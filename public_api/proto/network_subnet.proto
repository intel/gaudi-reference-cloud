// After updating this file, run "make generate-go".
//
// See:
//  - https://developers.google.com/protocol-buffers/docs/proto3
//  - https://github.com/googleapis/googleapis/blob/master/google/api/http.proto

syntax = "proto3";

package proto;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

import "annotations.proto";

option go_package = "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/pb";

option (idc.file).deploy = regional;
option (idc.file).service = "network-api-server";

// -------------------------------------------------------------------------------------------
// Subnet Service
// -------------------------------------------------------------------------------------------

service SubnetService {
    // Create a Subnet.
    rpc Create(SubnetCreateRequest) returns (VPCSubnet) {
      option (google.api.http) = {
        post: "/v1/cloudaccounts/{metadata.cloudAccountId}/network/vpcs/id/{spec.vpcId}/subnets"
        body: "*"
      };
      option (idc.method).authz.cloudAccount = true;
    };
    // Update a Subnet.
    rpc Update(SubnetUpdateRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/cloudaccounts/{metadata.cloudAccountId}/network/subnets/id/{metadata.resourceId}"
        body: "*"
      };
      option (idc.method).authz.cloudAccount = true;
    };
    // Retrieve a subnet record from DB
    rpc Get(SubnetGetRequest) returns (VPCSubnet) {
      option (google.api.http) = {
        get: "/v1/cloudaccounts/{metadata.cloudAccountId}/network/vpcs/id/{spec.vpcId}/subnets/id/{metadata.resourceId}"
      };
      option (idc.method).authz.cloudAccount = true;
    };
    // Get a list of stored Subnets.
    rpc Search(SubnetSearchRequest) returns (SubnetSearchResponse) {
      option (google.api.http) = {
        get: "/v1/cloudaccounts/{metadata.cloudAccountId}/network/vpcs/id/{spec.vpcId}/subnets"
        additional_bindings {
          post: "/v1/cloudaccounts/{metadata.cloudAccountId}/network/vpcs/id/{spec.vpcId}/subnets/search"
          body: "*"
        }
      };
      option (idc.method).authz.cloudAccount = true;
    };
    // Delete a Subnet from the DB.
    // Returns FailedPrecondition if Subnet has any resources associated like routers, subnets, ports or security groups.
    rpc Delete(SubnetDeleteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/cloudaccounts/{metadata.cloudAccountId}/network/vpcs/id/{spec.vpcId}/subnets/id/{metadata.resourceId}"
      };
      option (idc.method).authz.cloudAccount = true;
    };
    // Ping always returns a successful response by the service implementation.
    // It can be used for testing connectivity to the service.
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty) {};
  }

  message SubnetCreateRequest {
    SubnetMetadataCreate metadata = 1;
    SubnetSpec spec = 2;
  }

  message SubnetUpdateRequest {
    SubnetMetadata metadata = 1;
  }

  message SubnetGetRequest {
    SubnetMetadataReference metadata = 1;
    SubnetSpec spec = 2;
  }

  message SubnetSearchRequest {
    SubnetMetadataSearch metadata = 1;
    SubnetSpec spec = 2;
  }
  
  message SubnetMetadataSearch {
    string cloudAccountId = 1 [
      (idc.field).cloudAccount = true
    ];
    // If not empty, only return instances that have these key/value pairs.
    map<string, string> labels = 2;
    // Reserved. Added this field to overcome openAPi-same-struct issue.
    string reserved1 = 3 [deprecated = true];
  }

  message SubnetSearchResponse {
    repeated VPCSubnet items = 1;
  }

  message SubnetMetadataCreate {
    string cloudAccountId = 1 [
      (idc.field).cloudAccount = true
    ];
    // Name will be generated if empty.
    string name = 2;
    // Map of string keys and values that can be used to organize and categorize instances.
    // This is also used by TopologySpreadConstraints.
    map<string, string> labels = 3;
    // Reserved. Added this field to overcome openAPi-same-struct issue.
    string reserved1 = 4 [deprecated = true];
  }

  message VPCSubnet {
    SubnetMetadata metadata = 1;
    SubnetSpec spec = 2;
    SubnetStatus status = 3;
  }

  message SubnetMetadata {
    string cloudAccountId = 1 [
      (idc.field).cloudAccount = true
    ];
    string name = 2;
    string resourceId = 3;
    // resourceVersion can be provided with Update and Delete for concurrency control.
    string resourceVersion = 4;
    // Map of string keys and values that can be used to organize and categorize subnets.
    // This can also be used by to evaluate placements for instances.
    map<string, string> labels = 5;
    // Not implemented.
    google.protobuf.Timestamp creationTimestamp = 6;
    // Timestamp when resource was requested to be deleted.
    google.protobuf.Timestamp deletionTimestamp = 7;
  }

  message SubnetSpec {
    string cidrBlock = 1;
    string vpcId = 2;
    string availabilityZone = 3;
  }

  message SubnetStatus {
    // Subnet phase.
    SubnetPhase phase = 1;
    // Additional details about the state or any error conditions.
    string message = 2;
  }

  enum SubnetPhase {
    // The system is creating the Subnet.
    // Default.
    SubnetPhase_Provisioning = 0;
    // The subnet has been created.
    SubnetPhase_Ready = 1;

    // The subnet is being deleted.
    SubnetPhase_Deleting = 2;

    // The subnet has been deleted.
    SubnetPhase_Deleted = 3;
  }

  message SubnetDeleteRequest {
    SubnetMetadataReference metadata = 1;
    SubnetSpec spec = 2;
  }

  // A reference to a single subnet.
  message SubnetMetadataReference {
    string cloudAccountId = 1 [
      (idc.field).cloudAccount = true
    ];
    oneof nameOrId {
      string resourceId = 2;
    }
    // If provided, the existing record must have this resourceVersion for the request to succeed.
    string resourceVersion = 4;
    // Reserved. Added this field to overcome openAPi-same-struct issue.
    string reserved1 = 5 [deprecated = true];
}