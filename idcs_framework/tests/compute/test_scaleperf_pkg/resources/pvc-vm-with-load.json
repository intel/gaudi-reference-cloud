{
    "metadata": {
      "name": "load-vm-<<index>>"
    },
    "spec": {
      "availabilityZone": "us-region-1a",
      "instanceType": "vm-spr-pvc-1100-1",
      "machineImage": "ubuntu-22.04-pvc-v1100-vm-v2",
      "runStrategy": "RerunOnFailure",
      "sshPublicKeyNames": [
        "ssh-prod-mani"
      ],
      "interfaces": [
        {
          "name": "eth0",
          "vNet": "us-region-1a-default"
        }
      ],
      "userData": "#cloud-config\nwrite_files:\n  - path: /tmp/train_cifar10.py\n    permissions: '0777'\n    content: |\n      import torch\n      import torchvision\n      import torchvision.transforms as transforms\n      import torch.nn as nn\n      import torch.nn.functional as F\n      import torch.optim as optim\n\n      # Transform the data to torch.FloatTensor and normalize it\n      transform = transforms.Compose([\n          transforms.ToTensor(),\n          transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n      ])\n\n      # Load the training data\n      trainset = torchvision.datasets.CIFAR10(root='/workspace/data', train=True,\n                                              download=True, transform=transform)\n      trainloader = torch.utils.data.DataLoader(trainset, batch_size=10,\n                                                shuffle=True)\n\n      # Load the test data\n      testset = torchvision.datasets.CIFAR10(root='/workspace/data', train=False,\n                                             download=True, transform=transform)\n      testloader = torch.utils.data.DataLoader(testset, batch_size=10,\n                                               shuffle=False)\n\n      # Define a Convolutional Neural Network\n      class Net(nn.Module):\n          def __init__(self):\n              super(Net, self).__init__()\n              self.conv1 = nn.Conv2d(3, 6, 5)\n              self.pool = nn.MaxPool2d(2, 2)\n              self.conv2 = nn.Conv2d(6, 16, 5)\n              self.fc1 = nn.Linear(16 * 5 * 5, 120)\n              self.fc2 = nn.Linear(120, 84)\n              self.fc3 = nn.Linear(84, 10)\n\n          def forward(self, x):\n              x = self.pool(F.relu(self.conv1(x)))\n              x = self.pool(F.relu(self.conv2(x)))\n              x = x.view(-1, 16 * 5 * 5)\n              x = F.relu(self.fc1(x))\n              x = F.relu(self.fc2(x))\n              x = self.fc3(x)\n              return x\n\n      net = Net()\n\n      # Define a Loss function and optimizer\n      criterion = nn.CrossEntropyLoss()\n      optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)\n\n      # Train the network\n      for epoch in range(2):  # loop over the dataset multiple times\n\n          running_loss = 0.0\n          for i, data in enumerate(trainloader, 0):\n              # get the inputs; data is a list of [inputs, labels]\n              inputs, labels = data\n\n              # zero the parameter gradients\n              optimizer.zero_grad()\n\n              # forward + backward + optimize\n              outputs = net(inputs)\n              loss = criterion(outputs, labels)\n              loss.backward()\n              optimizer.step()\n\n              # print statistics\n              running_loss += loss.item()\n              if i % 2000 == 1999:    # print every 2000 mini-batches\n                  print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')\n                  running_loss = 0.0\n\n      print('Finished Training')\n\n      # Save the trained model\n      PATH = '/tmp/cifar_net.pth'\n      torch.save(net.state_dict(), PATH)\n\n      print(\"Model saved.\")\n\n  - path: /tmp/runcontainer.sh\n    permissions: '0777'\n    content: |\n      #!/bin/bash\n      export IMAGE_NAME=\"intel/intel-extension-for-pytorch\"\n      export IMAGE_TAG=\"xpu-max\"\n      sudo docker pull \"$IMAGE_NAME:$IMAGE_TAG\"\n      cd /tmp/\n      CURRENT_DIR=\"$(pwd)\"\n      sudo docker run -d -v \"$CURRENT_DIR\":/workspace -v /dev/dri/by-path:/dev/dri/by-path --device /dev/dri --privileged \"$IMAGE_NAME:$IMAGE_TAG\" tail -f /dev/null\n      CONTAINER_ID=$(sudo docker ps -q)\n      sudo docker exec \"$CONTAINER_ID\" python /workspace/train_cifar10.py >/tmp/dockeroutput2.txt 2>&1\n"
    }
}
