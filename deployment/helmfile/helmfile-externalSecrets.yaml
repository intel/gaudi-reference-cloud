bases:
  - environments.yaml

---

{{- $chartVersion := "0.9.20" }}

repositories:
  - name: external-secrets
    url: https://charts.external-secrets.io

releases:

{{- if $.Values.externalSecrets.enabled }}
  {{- if $.Values.global.externalSecrets.enabled }}
    # Create a release for global cluster.
        - name: "external-secrets"
          namespace: "idcs-system"
          kubeContext: {{ $.Values.global.kubeContext | quote }}
          labels:
            component: externalSecrets
            crd: true
            applicationName: external-secrets
            environmentName: {{ $.Values.global.environmentName }}
            geographicScope: global
            kubeContext: {{ $.Values.global.kubeContext | quote }}
          chart: "external-secrets/external-secrets"
          version: {{ $chartVersion | quote }}
          values:
            - installCRDs: true
          {{- if $.Values.global.externalSecrets.serviceMonitor.enabled }}
            - serviceMonitor:
                enabled: true
                {{- with $.Values.global.externalSecrets.serviceMonitor.additionalLabels }}
                additionalLabels:
                  {{ toYaml . | indent 18 }}
                {{- end}}
            - webhook:
                serviceMonitor:
                  enabled: true
                  {{- with $.Values.global.externalSecrets.serviceMonitor.additionalLabels }}
                  additionalLabels:
                    {{ toYaml . | indent 20 }}
                  {{- end}}
            - certController:
                serviceMonitor:
                  enabled: true
                  {{- with $.Values.global.externalSecrets.serviceMonitor.additionalLabels }}
                  additionalLabels:
                    {{ toYaml . | indent 20 }}
                  {{- end}}
          {{- end }}
  {{- end }}

  {{- range $region := .Values.regions }}
    {{- $region := mustMergeOverwrite (deepCopy $.Values.defaults.region) $region }}

    # Create a release for each regional cluster.
    {{- if $region.externalSecrets.enabled }}
        - name: {{ include "idc-common.toReleaseName" (print $region.region "-external-secrets") }}
          namespace: "idcs-system"
          kubeContext: {{ $region.kubeContext | quote }}
          labels:
            component: externalSecrets
            crd: true
            applicationName: external-secrets
            geographicScope: regional
            kubeContext: {{ $region.kubeContext | quote }}
            region: {{ $region.region }}
          chart: "external-secrets/external-secrets"
          version: {{ $chartVersion | quote }}
          values:
            - installCRDs: true
          {{- if $region.externalSecrets.serviceMonitor.enabled }}
            - serviceMonitor:
                enabled: true
                {{- with $region.externalSecrets.serviceMonitor.additionalLabels }}
                additionalLabels:
                  {{ toYaml . | indent 18 }}
                {{- end}}
            - webhook:
                serviceMonitor:
                  enabled: true
                  {{- with $region.externalSecrets.serviceMonitor.additionalLabels }}
                  additionalLabels:
                    {{ toYaml . | indent 20 }}
                  {{- end}}
            - certController:
                serviceMonitor:
                  enabled: true
                  {{- with $region.externalSecrets.serviceMonitor.additionalLabels }}
                  additionalLabels:
                    {{ toYaml . | indent 20 }}
                  {{- end}}
          {{- end }}
    {{- end }}

    {{- range $availabilityZoneIndex, $availabilityZone := $region.availabilityZones }}
      {{- $availabilityZone := mustMergeOverwrite (deepCopy $.Values.defaults.availabilityZone) $availabilityZone }}

      # Create a release for each AZ cluster.
      {{- if $availabilityZone.externalSecrets.enabled }}
        - name: {{ include "idc-common.toReleaseName" (print $availabilityZone.availabilityZone "-external-secrets") }}
          namespace: "idcs-system"
          kubeContext: {{ $availabilityZone.kubeContext }}
          labels:
            component: externalSecrets
            crd: true
            applicationName: external-secrets
            geographicScope: az
            kubeContext: {{ $availabilityZone.kubeContext }}
            region: {{ $region.region }}
            availabilityZone: {{ $availabilityZone.availabilityZone }}
          chart: "external-secrets/external-secrets"
          version: {{ $chartVersion | quote }}
          wait: true # Required for metal3 baremetal-operator
          timeout: 300
          values:
            - installCRDs: true
          {{- if $availabilityZone.externalSecrets.serviceMonitor.enabled }}
            - serviceMonitor:
                enabled: true
                {{- with $availabilityZone.externalSecrets.serviceMonitor.additionalLabels }}
                additionalLabels:
                  {{ toYaml . | indent 18 }}
                {{- end}}
            - webhook:
                serviceMonitor:
                  enabled: true
                  {{- with $availabilityZone.externalSecrets.serviceMonitor.additionalLabels }}
                  additionalLabels:
                    {{ toYaml . | indent 20 }}
                  {{- end}}
            - certController:
                serviceMonitor:
                  enabled: true
                  {{- with $availabilityZone.externalSecrets.serviceMonitor.additionalLabels }}
                  additionalLabels:
                    {{ toYaml . | indent 20 }}
                  {{- end}}
          {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}

{{- end }}
