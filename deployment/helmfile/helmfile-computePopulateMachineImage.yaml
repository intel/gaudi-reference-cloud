bases:
  - environments.yaml

---

{{- $helmChartVersionsDir := requiredEnv "HELM_CHART_VERSIONS_DIR" }}
{{- $secretsDir := requiredEnv "SECRETS_DIR" }}

repositories:
  - name: idc
    url: {{ (.Values.idcHelmRepository).url | quote }}
    oci: true

releases:

{{- $computeEnabled := or $.Values.components.computeBm.enabled $.Values.components.computeVm.enabled }}

{{- if $computeEnabled }}
{{- range $regionIndex, $region := .Values.regions }}
{{- $region := mustMergeOverwrite (deepCopy $.Values.defaults.region) $region }}

{{- $computeApiServerAddr := print $region.grpcProxy.internal.ingress.host ":443" }}
{{- $clusterName := ($region | get "clusterName" $region.region) }}

{{- $kind := "MachineImage" }}
{{- $dirConfigPath := "computeApiServer.dirMachineImage" }}
{{- $dirDefault := "../../go/pkg/compute_api_server/testdata/MachineImage" }}

  - name: {{ include "idc-common.toReleaseName" (print $region.region "-populate-") }}{{ $kind | kebabcase }}
    namespace: idcs-system
    kubeContext: {{ $region.kubeContext }}
    labels:
      component: computePopulate{{ $kind }}
      service: compute
      geographicScope: regional
      region: {{ $region.region }}
      kubeContext: {{ $region.kubeContext }}
      applicationName: {{ $region.region }}-populate-{{ $kind | kebabcase }}
      clusterName: {{ $clusterName | quote }}
    chart: idc/git-to-grpc-synchronizer
    version: {{ readFile (print $helmChartVersionsDir "/git-to-grpc-synchronizer.version") | quote }}
    values:
      - proxy.yaml.gotmpl
      - idc-common.yaml.gotmpl
      - image:
          registry: {{ ($.Values.image).registry | quote }}
          repository: "{{ ($.Values.image).repositoryPrefix }}git-to-grpc-synchronizer@sha256"
      - kind: {{ $kind | quote }}
      - target: {{ $computeApiServerAddr | quote }}
      # sourceMap will be a map from filename to YAML file contents, generated from files in dirConfigPath.
      - sourceMap:
          {{- range $index, $filename := readDir ($region | get $dirConfigPath $dirDefault) }}
          {{- $basename := splitList "/" $filename | last }}
          {{- $regex := "^[-._a-zA-Z0-9]+$" }}
          {{- if not (mustRegexMatch $regex $basename) }}
            {{- fail (print "last element of " $filename " must match the regex `" $regex "`.") }}
          {{- end }}
          {{ $basename }}: {{ readFile $filename | quote }}
          {{- end }}
      - otel:
          exporter:
            otlp:
              endpoint: {{ $region.otel.exporter.otlp.endpoint | quote }}
      - tls:
          issueCa: {{ $region.region }}-ca
      - ttlSecondsAfterFinished: {{ $region.gitToGrpcSynchronizer.ttlSecondsAfterFinished }}
      - vault:
          authPath: {{ $region.vault.authPath | quote }}

{{- range $availabilityZoneIndex, $availabilityZone := $region.availabilityZones }}
{{- $availabilityZone := mustMergeOverwrite (deepCopy $.Values.defaults.availabilityZone) $availabilityZone }}
{{- if $availabilityZone.computeVmMachineImages.enabled }}

  # Create vm-machine-images for each Harvester cluster.
  {{- range $clusterIndex, $cluster := $availabilityZone.harvesterClusters }}
  - name: {{ include "idc-common.toReleaseName" (dict "name" (print $availabilityZone.availabilityZone "-vm-machine-images-" $cluster.clusterId) "kubeContext" $availabilityZone.kubeContext) }}
    namespace: idcs-system
    kubeContext: {{ $cluster.clusterId }}
    labels:
      component: computePopulate{{ $kind }}
      service: compute-vm
      geographicScope: az
      availabilityZone: {{ $availabilityZone.availabilityZone }}
      region: {{ $region.region }}
      kubeContext: {{ $cluster.clusterId }}
      applicationName: vm-machine-images
    chart: idc/vm-machine-image-resources
    version: {{ readFile (print $helmChartVersionsDir "/vm-machine-image-resources.version") | quote }}
    values:
      - kind: "VirtualMachineImage"
      # sourceMap will be a map from metadata name to MachineImage YAML file contents, generated from files in dirConfigPath.
      - sourceMap:
          {{- range $index, $filename := readDir ($region | get $dirConfigPath $dirDefault) }}
          {{- if hasSuffix ".yaml" $filename }}
          {{- $contents := readFile $filename | fromYaml }}
          {{- $name := $contents.metadata.name }}
          {{ $name }}: {{ $contents | toJson }}
          {{- end }}
          {{- end }}
      - excludeSources: {{ $region.computeVmMachineImages.excludeSources | toJson }}
      - images: {{ $region.computeVmMachineImages.virtualMachineImages | toJson }}
      - urlPrefix: {{ $region.computeVmMachineImages.urlPrefix }}
  {{- end }}

  # Create vm-machine-images for each KubeVirt cluster.
  {{- range $clusterIndex, $cluster := $availabilityZone.kubeVirtClusters }}
  - name: {{ include "idc-common.toReleaseName" (dict "name" (print $availabilityZone.availabilityZone "-vm-machine-images-" $cluster.clusterId) "kubeContext" $availabilityZone.kubeContext) }}
    namespace: idcs-system
    kubeContext: {{ $cluster.clusterId }}
    labels:
      component: computePopulate{{ $kind }}
      service: compute-vm
      geographicScope: az
      availabilityZone: {{ $availabilityZone.availabilityZone }}
      region: {{ $region.region }}
      kubeContext: {{ $cluster.clusterId }}
      applicationName: vm-machine-images
    chart: idc/vm-machine-image-resources
    version: {{ readFile (print $helmChartVersionsDir "/vm-machine-image-resources.version") | quote }}
    values:
      - kind: "DataVolume"
      # sourceMap will be a map from metadata name to MachineImage YAML file contents, generated from files in dirConfigPath.
      - sourceMap:
          {{- range $index, $filename := readDir ($region | get $dirConfigPath $dirDefault) }}
          {{- if hasSuffix ".yaml" $filename }}
          {{- $contents := readFile $filename | fromYaml }}
          {{- $name := $contents.metadata.name }}
          {{ $name }}: {{ $contents | toJson }}
          {{- end }}
          {{- end }}
      - excludeSources: {{ $region.computeVmMachineImages.excludeSources | toJson }}
      - images: {{ $region.computeVmMachineImages.dataVolumes | toJson }}
      - urlPrefix: {{ $region.computeVmMachineImages.urlPrefix }}
  {{- end }}

{{- end }}
{{- end }}
{{- end }}
{{- end }}
