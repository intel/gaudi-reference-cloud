bases:
  - environments.yaml

---

{{- $helmChartVersionsDir := requiredEnv "HELM_CHART_VERSIONS_DIR" }}
{{- $secretsDir := requiredEnv "SECRETS_DIR" }}

repositories:
  - name: idc
    url: {{ (.Values.idcHelmRepository).url | quote }}
    oci: true

releases:

{{- $kind := "Product" }}

{{- $dirConfigPathKey := "productCatalog.sync.dirProducts" }}
{{- $dirDefault := "../../go/pkg/productcatalog/default_data/ProductCatalog" }}
{{- $dirConfigPath := .Values | get $dirConfigPathKey $dirDefault }}

{{- $productApiServerAddr := "productcatalog.idcs-system.svc.cluster.local:8443" }}

  - name: {{ include "idc-common.toReleaseName" (print "populate-") }}{{ $kind | kebabcase }}
    namespace: idcs-system
    kubeContext: {{ $.Values.global.kubeContext }}
    labels:
      component: populateProductCatalog
      geographicScope: global
      kubeContext: {{ $.Values.global.kubeContext }}
      applicationName: populateproductcatalog
      environmentName: {{ $.Values.global.environmentName }}
    chart: idc/git-to-grpc-synchronizer
    version: {{ readFile (print $helmChartVersionsDir "/git-to-grpc-synchronizer.version") | quote }}
    values:
      - proxy.yaml.gotmpl
      - idc-common.yaml.gotmpl
      - image:
          registry: {{ ($.Values.image).registry | quote }}
          repository: "{{ ($.Values.image).repositoryPrefix }}git-to-grpc-synchronizer@sha256"
      - kind: {{ $kind | quote }}
      - target: {{ $productApiServerAddr | quote }}
      # sourceMap will be a map from filename to YAML file contents, generated from files in dirConfigPath.
      - sourceMap:
          {{- range $index, $filename := readDir $dirConfigPath }}
          {{- $basename := splitList "/" $filename | last }}
          {{- $regex := "^[-._a-zA-Z0-9]+$" }}
          {{- if not (mustRegexMatch $regex $basename) }}
            {{- fail (print "last element of " $filename " must match the regex `" $regex "`.") }}
          {{- end }}
          {{ $basename }}: {{ readFile $filename | quote }}
          {{- end }}
      - otel:
          exporter:
            otlp:
              endpoint: {{$.Values.global.otel.exporter.otlp.endpoint | quote }}
      - tls:
          issueCa: {{ $.Values.global.issueCa }}
      - ttlSecondsAfterFinished: {{ $.Values.global.gitToGrpcSynchronizer.ttlSecondsAfterFinished }}
      - vault:
          authPath: {{ $.Values.global.vault.authPath | quote }}