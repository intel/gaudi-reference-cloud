apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bm-dnsmasq.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "bm-dnsmasq.labels" . | nindent 4 }}
data:
  dnsmasq.conf: |
    interface={{ .Values.dnsmasqConfig.provisioningInterface }}
    except-interface={{ .Values.dnsmasqConfig.exceptInterface }}
    bind-dynamic
    enable-tftp
    tftp-root=/shared/tftpboot
    log-queries

    # Configure listening for DNS (0 disables DNS)
    port=0
    log-dhcp
    dhcp-range={{ .Values.dnsmasqConfig.dhcpRangeStartingIP}},{{ .Values.dnsmasqConfig.dhcpRangeFinalIP }}

    # It can be used when setting DNS or GW variables.
    # dhcp-option=option:router,{{ .Values.dnsmasqConfig.gatewayIP }}
    # dhcp-option=option:dns-server,{{ .Values.dnsmasqConfig.dnsIP }}

    # IPv4 Configuration:
    # dhcp-match=ipxe,175
    # Client is already running iPXE; move to next stage of chainloading
    # dhcp-boot=tag:ipxe,http://{{ .Values.dnsmasqConfig.ironicIP }}:{{ .Values.dnsmasqConfig.httpPort }}/boot.ipxe

    # Note: Need to test EFI booting
    # dhcp-match=set:efi,option:client-arch,7
    # dhcp-match=set:efi,option:client-arch,9
    # dhcp-match=set:efi,option:client-arch,11
    # Client is PXE booting over EFI without iPXE ROM; send EFI version of iPXE chainloader
    # dhcp-boot=tag:efi,tag:!ipxe,snponly.efi

    # Client is running PXE over BIOS; send BIOS version of iPXE chainloader
    # dhcp-boot=/undionly.kpxe
