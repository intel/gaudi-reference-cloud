{{- if (include "redis-cluster.createStatefulSet" .) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "idc-common.fullname" . }}
  namespace: {{ include "idc-common.namespace" . }}
  labels:
    {{- include "idc-common.labels" . | nindent 4 }}
spec:
  {{- if .Values.redis.updateStrategy }}
  updateStrategy: {{- toYaml .Values.redis.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "idc-common.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.cluster.nodes }}
  serviceName: {{ include "idc-common.fullname" . }}-headless
  podManagementPolicy: {{ .Values.redis.podManagementPolicy }}
  template:
    metadata:
      annotations:
        {{- if .Values.fargateAnnotations }}
        {{- toYaml .Values.fargateAnnotations | nindent 8 }}
        {{- end }}
        {{- include "idc-common.vaultAnnotations" . | nindent 8 }}
        vault.hashicorp.com/agent-inject-secret-redis-password: "{{ .Values.global.redis.vaultCredentialsPath }}"
        vault.hashicorp.com/agent-inject-template-redis-password: |-
          {{`{{- with secret `}}"{{ .Values.global.redis.vaultCredentialsPath }}"{{` -}}`}}
          {{`{{ .Data.data.password }}`}}
          {{`{{- end }}`}}
        {{- include "idc-common.vaultPkiAnnotations" . | nindent 8 }}
        # File name must be redis-password for redis cluster to work
        vault.hashicorp.com/agent-inject-file-redis-password: "redis-password"
        vault.hashicorp.com/template-static-secret-render-interval: 2m
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "idc-common.selectorLabels" . | nindent 8 }}
    spec:
      hostNetwork: {{ .Values.redis.hostNetwork }}
      serviceAccountName: {{ include "idc-common.serviceAccountName" . }}
      {{- if .Values.redis.priorityClassName }}
      priorityClassName: {{ .Values.redis.priorityClassName }}
      {{- end }}
      containers:
        - name: {{ include "idc-common.fullname" . }}
          image: {{ .Values.image.registry }}{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command: ['/bin/bash', '-c']
          args:
            - |
              # Backwards compatibility change
              if ! [[ -f /opt/bitnami/redis/etc/redis.conf ]]; then
                  echo COPYING FILE
                  cp  /opt/bitnami/redis/etc/redis-default.conf /opt/bitnami/redis/etc/redis.conf
              fi
              {{- if .Values.cluster.init }}
              pod_index=($(echo "$POD_NAME" | tr "-" "\n"))
              pod_index="${pod_index[-1]}"
              if [[ "$pod_index" == "0" ]]; then
                export REDIS_CLUSTER_CREATOR="yes"
                export REDIS_CLUSTER_REPLICAS="{{ .Values.cluster.replicas }}"
              fi
              {{- end }}
              password_aux=`cat ${REDIS_PASSWORD_FILE}`
              export REDISCLI_AUTH=$password_aux
              /opt/bitnami/scripts/redis-cluster/entrypoint.sh /opt/bitnami/scripts/redis-cluster/run.sh
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REDIS_NODES
              value: "{{ $count := .Values.cluster.nodes | int }}{{ range $i, $v := until $count }}{{ include "idc-common.fullname" $ }}-{{ $i }}.{{ include "idc-common.fullname" $ }}-headless {{ end }}"
            - name: REDIS_PASSWORD_FILE
              value: "/etc/secrets/redis-password"
            - name: REDIS_AOF_ENABLED
              value: {{ .Values.redis.useAOFPersistence | quote }}
            - name: REDIS_TLS_ENABLED
              value: {{ ternary "yes" "no" .Values.tls.enabled | quote }}
            {{- if .Values.tls.enabled }}
            - name: REDIS_TLS_PORT_NUMBER
              value: {{ .Values.redis.containerPorts.redis | quote }}
            - name:  REDIS_TLS_AUTH_CLIENTS
              value: {{ ternary "yes" "no" .Values.tls.authClients | quote }}
            - name:  REDIS_TLS_CERT_FILE
              value: {{ .Values.tls.certFilename | quote }}
            - name:  REDIS_TLS_KEY_FILE
              value: {{ .Values.tls.certKeyFilename | quote }}
            - name:  REDIS_TLS_CA_FILE
              value: {{ .Values.tls.certCAFilename | quote }}
            {{- if .Values.tls.dhParamsFilename }}
            - name:  REDIS_TLS_DH_PARAMS_FILE
              value: {{ template "redis-cluster.tlsDHParams" . }}
            {{- end }}
            {{- end }}
            - name: REDIS_PORT_NUMBER
              value: {{ .Values.redis.containerPorts.redis | quote }}
          ports:
            - name: tcp-redis
              containerPort: {{ .Values.redis.containerPorts.redis }}
            - name: tcp-redis-bus
              containerPort: {{ .Values.redis.containerPorts.bus }}
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.redis.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.redis.livenessProbe.periodSeconds }}
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: {{ add1 .Values.redis.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.redis.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.redis.livenessProbe.failureThreshold }}
            exec:
              command:
                - sh
                - -c
                - /scripts/ping_liveness_local.sh {{ .Values.redis.livenessProbe.timeoutSeconds }}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            # {{- if .Values.usePasswordFile }}
            # - name: redis-password
            #   mountPath: /opt/bitnami/redis/secrets/
            # {{- end }}
            - name: default-config
              mountPath: /opt/bitnami/redis/etc/redis-default.conf
              subPath: redis-default.conf
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/redis/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/redis/logs
              subPath: app-logs-dir
            - name: redis-data
              mountPath: /bitnami/redis/data
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: vault-secrets
              mountPath: /etc/secrets
              readOnly: true
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: {{ .Values.metrics.image.registry }}{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - |
              {{- if .Values.usePasswordFile }}
              export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
              {{- end }}
              redis_exporter{{- range $key, $value := .Values.metrics.extraArgs }} --{{ $key }}={{ $value }}{{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: REDIS_ALIAS
              value: {{ include "idc-common.fullname" . }}
            - name: REDIS_ADDR
              value: {{ printf "%s://127.0.0.1:%g" (ternary "rediss" "redis" .Values.tls.enabled) .Values.redis.containerPorts.redis | quote }}
            {{- if .Values.usePasswordFile }}
            - name: REDIS_PASSWORD_FILE
              value: "/opt/bitnami/redis/secrets/redis-password"
            {{- end }}
            {{- if .Values.tls.enabled }}
            - name: REDIS_EXPORTER_TLS_CLIENT_KEY_FILE
              value: {{ template "redis-cluster.tlsCertKey" . }}
            - name: REDIS_EXPORTER_TLS_CLIENT_CERT_FILE
              value: {{ template "redis-cluster.tlsCert" . }}
            - name: REDIS_EXPORTER_TLS_CA_CERT_FILE
              value: {{ template "redis-cluster.tlsCACert" . }}
            {{- end }}
            - name: REDIS_EXPORTER_WEB_LISTEN_ADDRESS
              value: {{ printf ":%v" .Values.metrics.containerPorts.http }}
          {{- if or .Values.usePasswordFile .Values.tls.enabled }}
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            {{- if .Values.usePasswordFile }}
            - name: redis-password
              mountPath: /opt/bitnami/redis/secrets/
            {{- end }}
            {{- if .Values.tls.enabled }}
            - name: redis-certificates
              mountPath: /opt/bitnami/redis/certs
              readOnly: true
            {{- end }}
          {{- end }}
          ports:
            - name: http-metrics
              containerPort: {{ .Values.metrics.containerPorts.http }}
        {{- end }}
      {{- $needsVolumePermissions := and .Values.volumePermissions.enabled .Values.containerSecurityContext.enabled }}
      {{- if or $needsVolumePermissions .Values.sysctlImage.enabled .Values.redis.initContainers }}
      initContainers:
        {{- if $needsVolumePermissions }}
        - name: volume-permissions
          image: {{ include "redis-cluster.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command: ["/bin/chown", "-R", "{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}", "{{ .Values.persistence.path }}"]
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: redis-data
              mountPath: {{ .Values.persistence.path }}
              subPath: {{ .Values.persistence.subPath }}
        {{- end }}
        {{- if .Values.sysctlImage.enabled }}
        - name: init-sysctl
          image: {{ template "redis-cluster.sysctl.image" . }}
          imagePullPolicy: {{ default "" .Values.sysctlImage.pullPolicy | quote }}
          {{- if .Values.sysctlImage.mountHostSys }}
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: host-sys
              mountPath: /host-sys
          {{- end }}
          command:
          {{- toYaml .Values.sysctlImage.command | nindent 12 }}
        {{- end }}
        {{- if .Values.redis.initContainers }}
        {{- toYaml .Values.redis.initContainers | nindent 8 }}
        {{- end }}
      {{- end }}
      volumes:
        - name: scripts
          configMap:
            name: {{ include "idc-common.fullname" . }}-scripts
            defaultMode: 0755
        - name: default-config
          configMap:
            name: {{ include "idc-common.fullname" . }}-default
        - name: redis-data
          emptyDir: {}
        {{- if .Values.sysctlImage.mountHostSys }}
        - name: host-sys
          hostPath:
            path: /sys
        {{- end }}
        - name: empty-dir
          emptyDir: {}
        {{- if .Values.redis.extraVolumes }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.redis.extraVolumes "context" $ ) | nindent 8 }}
        {{- end }}
{{- end }}
