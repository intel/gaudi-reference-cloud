#!/usr/bin/env bash
# Make (generate) secrets.
# This script generates and writes missing secrets in ${SECRETS_DIR}.
# Run with "make secrets".
# By default, this does not overwrite existing secrets.
# To overwrite secrets, run "OVERWRITE_SECRETS=1 make secrets".

set -e

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
YQ=${YQ:-yq}
SECRETS_DIR=${SECRETS_DIR:-local/secrets}
HELMFILE_DUMP=${HELMFILE_DUMP:-${SECRETS_DIR}/helmfile-dump.yaml}
OVERWRITE_SECRETS=${OVERWRITE_SECRETS:-0}

query_config() {
  ${YQ} "$@" ${HELMFILE_DUMP}
}

get_regions() {
  query_config ".Values.regions[].region"
}

get_availability_zones_for_region() {
  region=$1
  query_config ".Values.regions.${region}.availabilityZones[].availabilityZone"
}

# Write a new secret if needed, generated by the provided command.
# Usage: create_secret_file file command to generate
create_secret_file() {
  local file=${SECRETS_DIR}/$1
  shift
  if [ -f "${file}" ]; then
    if [ "${OVERWRITE_SECRETS}" == "0" ]; then
      echo "Skipping existing secret file ${file}."
      return
    else
      echo "Overwriting existing secret file ${file}."
    fi
  else
    echo "Creating new secret file ${file}."
  fi
  mkdir -p $(dirname ${file})
  "$@" > ${file}
}

create_ssh_key_pair() {
  local name=$1
  local file=${SECRETS_DIR}/${name}/id_rsa
  if [ -f "${file}" ] && [ -f "${file}".pub ]; then
    if [ "${OVERWRITE_SECRETS}" == "0" ]; then
      echo "Skipping existing secret file ${file}."
      return
    else
      echo "Overwriting existing secret file ${file}."
    fi
  else
    echo "Creating new secret file ${file}."
  fi
  mkdir -p $(dirname ${file})
  local comment=${IDC_ENV}-${name}-${USER}-$(uuidgen | head -c 8)@intel.com
	ssh-keygen -f ${file} -N '' -t rsa -C ${comment} >/dev/null 2>&1
	echo Key pair created on $(date -u) by ${USER}@$(hostname) with comment ${comment} >> ${file}
}

# Create a new uuid (without a trailing new line).
new_uuid() {
  uuidgen | tr -d '\n'
}

# Create a random string with specific length
generate_truncated_uuid() {
  local length=$1
  tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c "$length"
}

create_uuid_secret_file() {
  local file=$1
  create_secret_file ${file} new_uuid
}

create_truncated_uuid_secret_file() {
  local file=$1
  local length=$2
  create_secret_file ${file} generate_truncated_uuid "$length"
}

create_long_uuid_secret_file() {
  local file=$1
  create_secret_file ${file} printf "$(new_uuid)-$(new_uuid)"
}

create_empty_secret_file() {
  local file=$1
  create_secret_file ${file} true
}

create_db_secrets() {
  local db=$1
  create_secret_file ${db}_db_admin_username echo ${DB_ADMIN_USERNAME}
  create_uuid_secret_file ${db}_db_admin_password
  create_uuid_secret_file ${db}_db_user_password
}

create_cognito_secrets() {
  local prefix=$1
  create_empty_secret_file ${prefix}_client_id
  create_empty_secret_file ${prefix}_client_secret
}

create_oauth_client_hmac_secret() {
  local file=$1
  create_secret_file ${file} printf "$(head -c 32 /dev/urandom | base64)"
}

# Create secrets that are global or not specific to a region.
process_global() {
  create_cognito_secrets cognito_compute_metering_monitor
  create_cognito_secrets cognito_region_compute_api_server
  create_cognito_secrets cognito_region_grpc_proxy
  create_cognito_secrets cognito_region_storage_api_server
  create_cognito_secrets cognito_region_training_api_server
  create_cognito_secrets cognito_region_quota_management_service
  create_db_secrets authz
  create_db_secrets billing
  create_db_secrets usage
  create_db_secrets catalog
  create_db_secrets cloudaccount
  create_db_secrets metering
  create_db_secrets cloudcredits
  create_db_secrets cloudmonitor
  create_db_secrets training
  create_db_secrets notification
  create_db_secrets productcatalog
  create_db_secrets insights
  create_empty_secret_file aws_credentials/access_key_id
  create_empty_secret_file aws_credentials/secret_access_key
  create_empty_secret_file aws_credentials/account_id
  create_empty_secret_file aria_auth_key
  create_empty_secret_file aria_client_no
  create_empty_secret_file aria_api_key
  create_empty_secret_file aria_api_crt
  create_empty_secret_file EAPI_PASSWD
  create_empty_secret_file EAPI_USERNAME
  create_empty_secret_file GTS_PASSWORD
  create_empty_secret_file GTS_USERNAME
  create_empty_secret_file ICP_PASSWORD
  create_empty_secret_file ICP_USERNAME
  create_empty_secret_file ilb-operator/config.yaml
  create_empty_secret_file kubernetes-operator/bootstrap-iks-controlplane.sh
  create_empty_secret_file kubernetes-operator/bootstrap-iks-worker.sh
  create_empty_secret_file kubernetes-operator/bootstrap-rke2.sh
  create_empty_secret_file kubernetes-operator/config.yaml
  create_empty_secret_file kubernetes-reconciler/config.yaml
  create_empty_secret_file training_api_server_cacrt
  create_empty_secret_file training_api_server_crt
  create_empty_secret_file training_api_server_key
  create_empty_secret_file training_api_server_cacrt
  create_empty_secret_file training_api_server_crt
  create_empty_secret_file training_api_server_key
  create_secret_file BM_ENROLLMENT_APISERVICE_USERNAME echo "admin"
  create_secret_file bm-instance-operator/host_public_key echo "# Fake host publickey"
  create_secret_file grafana_admin_username echo -n ${GRAFANA_ADMIN_USERNAME}
  create_secret_file MEN_AND_MICE_PASSWORD echo -n ${MEN_AND_MICE_PASSWORD}
  create_secret_file MEN_AND_MICE_USERNAME echo -n ${MEN_AND_MICE_USERNAME}
  create_secret_file NGINX_S3_GATEWAY_ACCESS_KEY_ID echo -n "fake"
  create_secret_file NGINX_S3_GATEWAY_SECRET_KEY echo -n "fake"
  create_secret_file RAVEN_PASSWD echo -n ${RAVEN_PASSWD}
  create_secret_file RAVEN_USERNAME echo -n ${RAVEN_USERNAME}
  create_secret_file restricted-kubeconfig/sdn-bmaas-kubeconfig.yaml echo "# Fake kubeconfig"
  create_secret_file NETBOX_TOKEN echo "0123456789abcdef0123456789abcdef01234567"
  create_secret_file ssh-proxy-operator/host_public_key echo "# Fake host publickey"
  create_ssh_key_pair bm-instance-operator
  create_ssh_key_pair bm-validation-operator
  create_secret_file VALIDATION_REPORTS_S3_ACCESS_KEY_ID echo -n "fake"
  create_secret_file VALIDATION_REPORTS_S3_SECRET_KEY echo -n "fake"
  create_secret_file bm-validation-operator/HUGGINGFACE_TOKEN echo -n "fake"
  create_ssh_key_pair ssh-proxy-operator
  create_uuid_secret_file BM_ENROLLMENT_APISERVICE_PASSWORD
  create_secret_file DEFAULT_BMC_USERNAME echo -n "admin"
  create_secret_file DEFAULT_BMC_PASSWD echo -n "password"
  create_uuid_secret_file gitea_admin_password
  create_uuid_secret_file rate_limit_redis_password
  create_uuid_secret_file grafana_admin_password
  create_uuid_secret_file minio_root_password
  create_secret_file vault_admin_username echo "admin"
  create_uuid_secret_file vault_admin_password
}

process_region() {
  local region=$1
  create_db_secrets ${region}-cloudmonitor-logs
  create_db_secrets ${region}-compute
  create_db_secrets ${region}-fleet-admin
  create_db_secrets ${region}-insights
  create_db_secrets ${region}-netbox-postgres
  create_db_secrets ${region}-netbox-redis
  create_db_secrets ${region}-storage
  create_db_secrets ${region}-training
  create_db_secrets ${region}-network
  create_db_secrets ${region}-sdn-vn-controller
  create_db_secrets ${region}-kfaas
  create_db_secrets ${region}-dpai
  create_db_secrets ${region}-quota-management-service
  # create_db_secrets ${region}-cloudmonitor
  create_long_uuid_secret_file ${region}-netbox_secretKey
  create_empty_secret_file ${region}-iks_admin_key
  create_truncated_uuid_secret_file ${region}-iks_db_encryption_keys 32
  create_empty_secret_file ${region}-iks_db_username
  create_empty_secret_file ${region}-iks_db_user_password
  create_empty_secret_file ${region}-iks_rw_db_username
  create_empty_secret_file ${region}-iks_rw_db_user_password
  create_empty_secret_file ${region}-dpai_external_caas_password
  create_empty_secret_file ${region}-dpai_helm_registry_password
  create_empty_secret_file ${region}-dpai_docker_registry_password
  create_empty_secret_file ${region}-insights_db_username
  create_empty_secret_file ${region}-insights_db_user_password
  create_uuid_secret_file ${region}-insights_github_api_key
  create_uuid_secret_file ${region}-rate_limit_redis_password
}

process_az() {
  local region=$1
  local availability_zone=$2
  create_uuid_secret_file ${availability_zone}-inspector_password
  create_uuid_secret_file ${availability_zone}-ironic_password
  create_harvester_kubeconfig ${region} ${availability_zone}
  create_kubevirt_kubeconfig ${region} ${availability_zone}
  create_empty_secret_file ${availability_zone}-loadbalancer-operator-azkubeconfig
  create_empty_secret_file ${availability_zone}-firewall_api_username
  create_empty_secret_file ${availability_zone}-firewall_api_password
  create_empty_secret_file ${availability_zone}-highwire_api_username
  create_empty_secret_file ${availability_zone}-highwire_api_password
  create_empty_secret_file ${availability_zone}-quick-connect-api-server-oauth-token
  create_oauth_client_hmac_secret ${availability_zone}-quick-connect-api-server-oauth-hmac
  create_empty_secret_file ${availability_zone}-rancher-url
  create_empty_secret_file ${availability_zone}-rancher-access_key
  create_empty_secret_file ${availability_zone}-rancher-secret_key
}

create_harvester_kubeconfig() {
  local region=$1
  local availability_zone=$2
  local clusterids=$(get_harvester_clusterids_for_region_az ${region} ${availability_zone})
  for clusterid in $clusterids; do
    create_secret_file harvester-kubeconfig/${clusterid} echo "# Fake kubeconfig"
  done
}

get_harvester_clusterids_for_region_az() {
  local region=$1
  local availabilityZone=$2
  query_config ".Values.regions.${region}.availabilityZones.${availabilityZone}.harvesterClusters[].clusterId"
}

create_kubevirt_kubeconfig() {
  local region=$1
  local availability_zone=$2
  local clusterids=$(get_kubevirt_clusterids_for_region_az ${region} ${availability_zone})
  for clusterid in $clusterids; do
    create_secret_file kubevirt-kubeconfig/${clusterid} echo "# Fake kubeconfig"
  done
}

get_kubevirt_clusterids_for_region_az() {
  local region=$1
  local availabilityZone=$2
  query_config ".Values.regions.${region}.availabilityZones.${availabilityZone}.kubeVirtClusters[].clusterId"
}

main() {
  if [ ! -f ${HELMFILE_DUMP} ]; then
    echo File ${HELMFILE_DUMP} does not exist.
    exit 1
  fi

  process_global

  local regions=$(get_regions)
  local region
  for region in ${regions}; do
    process_region ${region}
    local availability_zones=$(get_availability_zones_for_region ${region})
    local availability_zone
    for availability_zone in $availability_zones; do
      process_az ${region} ${availability_zone}
    done
  done

  echo make-secrets.sh: Done.
}

main
