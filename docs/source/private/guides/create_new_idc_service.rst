.. _create_new_idc_service:

Create a New IDC Service
########################

This document contains steps to create a new IDC service from scratch.

Prepare Local Development Workstation
*************************************

Before creating a new IDC service, prepare your local development workstation according to :ref:`local_development_guide`.

Create New gRPC Protobuf Definition
************************************

If you are creating a gRPC service, you should create a new gRPC Protobuf definition.
Under the public_api/proto path, create a new .proto file. In the below example I've created a new proto definition.
This has a post method defined, with the sample request and response. We also need to determine if the service will be a global one or a regional one.
Appropriately that can be defined with the parameters: ``option (idc.file).deploy = regional;``
Also define the name of the service to be used (ex : hello-worldservice in the below example).
The request and response structs need to be defined, like how we want to be request and response fields for the API.
In the below example, the service will take a request of type HelloWorldRequest and return type HelloWorldResponse.
Similarly we can add more methods like GET, PUT, DELETE etc.

.. code-block:: console

    syntax = "proto3";
    package proto;
 
    option go_package = "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/pb";
     
    import "google/api/annotations.proto";
     
    import "annotations.proto";
     
    option (idc.file).deploy = regional;
    option (idc.file).service = "helloworldservice";
     
    service HelloWorldService {
        rpc Register(HelloWorldRequest) returns (HelloWorldResponse) {
            option (google.api.http) = {
                post: "/v1/users"
                body: "*"
            };
        };
    }
     
    message HelloWorldRequest {
        repeated string names = 1;
    }
     
    message HelloWorldResponse {
        string msg = 1;
    }


Generate gRPC Stub Code 
***********************

Next, generate gRPC stub code using the command below. We can see those getting generated under the go/pkg/pb folder.
The ``*_grpc.pb.go``` file is the code generated by protoc-gen-go-grpc.
This has the unimplemented handlers and interfaces which needs to be implemented by the service in go/pkg.
The ``*pb.gw.go`` file created will have the register http handlers which actually registers the handlers to mux.

.. code-block:: bash
    
    make generate-go

Create New Files
****************

Create the following files based on the examples provided by ``fleet_admin``.
Replace ``hello_world`` and ``hello-world`` with your service name.

- deployment/charts/hello-world-api-server/.helmignore
- deployment/charts/hello-world-api-server/BUILD.bazel
- deployment/charts/hello-world-api-server/Chart.yaml
- deployment/charts/hello-world-api-server/templates/_helpers.tpl
- deployment/charts/hello-world-api-server/templates/configmap.yaml
- deployment/charts/hello-world-api-server/templates/deployment.yaml
- deployment/charts/hello-world-api-server/templates/service.yaml
- deployment/charts/hello-world-api-server/templates/serviceaccount.yaml
- deployment/charts/hello-world-api-server/values.yaml
- go/pkg/hello_world/api_server/BUILD.bazel
- go/pkg/hello_world/api_server/cmd/BUILD.bazel
- go/pkg/hello_world/api_server/cmd/hello_world_api_server/BUILD.bazel
- go/pkg/hello_world/api_server/cmd/hello_world_api_server/main.go
- go/pkg/hello_world/api_server/config/BUILD.bazel
- go/pkg/hello_world/api_server/config/config.go
- go/pkg/hello_world/api_server/hello_world/BUILD.bazel
- go/pkg/hello_world/api_server/hello_world/hello_world.go
- go/pkg/hello_world/api_server/server
- go/pkg/hello_world/api_server/server/BUILD.bazel
- go/pkg/hello_world/api_server/server/grpc_server.go
- go/pkg/hello_world/api_server/test
- go/pkg/hello_world/api_server/test/BUILD.bazel
- go/pkg/hello_world/api_server/test/suite_test.go
- go/pkg/hello_world/db
- go/pkg/hello_world/db/BUILD.bazel
- go/pkg/hello_world/db/migrations.go
- go/pkg/hello_world/db/migrations/20240502143700_initial.down.sql
- go/pkg/hello_world/db/migrations/20240502143700_initial.up.sql

Note: New services should not use ``go/svc``.

Deployment
**********

#. Services are deployed as Helm releases.
   A set of Helm releases is grouped into a component.
   The set of Helm releases for a component will be deployed from a single commit of the monorepo.
   Consider whether you want to deploy the new Helm release from the same commit as an existing component.
   Determine an existing or a new component name for the new service.

#. The Helm release are defined using Helmfile.
   Create the file ``deployment/helmfile/helmfile-helloWorld.yaml`` where ``helloWorld`` is the component name.
   Use one of the following as a template.

   - deployment/helmfile/helmfile-billing.yaml
   - deployment/helmfile/helmfile-fleetAdmin.yaml
   - deployment/helmfile/helmfile-computeInstanceReplicator.yaml

#. The component mappings must be defined in multiple ways and the resulting mappings must be consistent with each other.

   *  In the file ``deployment/artifacts.bzl``, each artifact must have the "components" value set to ``["helloWorld"]``.

   *  The Helm releases for component "helloWorld" must be in the file ``deployment/helmfile/helmfile-helloWorld.yaml``.

   *  Within the above file, the Helm releases must have the "component" label set to "helloWorld".

#. If this is a new component, edit the file ``deployment/helmfile/defaults.yaml.gotmpl``.
   Global components should be added to ``global.components``.
   Regional components should be added to ``defaults.region.components``.
   Availability zone components should be added to ``defaults.availabilityZone.components``.
   Only essential components should be enabled by default.

#. Add any default Helm chart values to ``deployment/helmfile/defaults.yaml.gotmpl``.
   To avoid confusion, if a default value is specified in this file, leave the default value blank or zero in the Helm chart itself.

#. To enable and make a service reachable, add the service name to ```deployment/helmfile/defaults.yaml.gotmpl``` and set its value to true under the enabledServices key.
   If you require fine-grained control over which environment the service should be enabled in, remove he service entry from ```deployment/helmfile/defaults.yaml.gotmpl```.
   Then, add it to the appropriate environment-specific file located in ```/deployment/helmfile/environments````.

#. If you need more fine-grained control over enabling Helm releases within a component, you should
   use appropriate values in ``global``, ``defaults.region``, or ``defaults.availabilityZone``.
   Only essential Helm releases should be enabled by default.
   
#. For testing in kind, enable the service in ``deployment/helmfile/environments/kind-singlecluster.yaml.gotmpl``.

#. Add a reference to ``deployment/helmfile/helmfile-helloWorld.yaml`` in ``deployment/helmfile/helmfile.yaml``.

#. Add the artifact to ``deployment/artifacts.bzl``.

#. Add secrets for your service to the following files. These secrets will be used by kind.

   - deployment/common/vault/configure.sh
   - deployment/common/vault/load-secrets.sh
   - deployment/common/vault/make-secrets.sh

Note: Do not add the service to ``Makefile``.

Testing
*******

To test your service, see :ref:`upgrade_services_in_local_kind_cluster`.

See Also
********

- :ref:`services_upgrade_procedure_development`
- `Building a new service in IDC (obsolete) <https://internal-placeholder.com/x/AjQRz>`__
