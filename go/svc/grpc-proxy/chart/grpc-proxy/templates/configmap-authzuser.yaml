# Code generated by protoauthzuser. DO NOT EDIT.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "idc-common.fullname" . }}-authzuser
  namespace: {{ include "idc-common.namespace" . }}
data:
  authzuser.rego: |
    package envoy.authz

    import future.keywords.in
    import input.attributes.request.http
    authz := {"scheme":scheme, "token":payload} {
     	[scheme, encoded] := split(http.headers.authorization, " ")
     	# The header and signature are ignored. The JWT has already been validated by
     	# the ingress. We are using the JWT for information about the caller, not for
     	# authentication.
     	[_, payload, _] := io.jwt.decode(encoded)
     }
         
    email := authz.token.email
    enterpriseId := authz.token.enterpriseId

    response := cloudaccount.getRelatedCloudAccounts(email)
    relatedCloudAccounts := response["relatedAccounts"]

    countryCode := authz.token.countryCode

    result["allowed"] := allow

    result["body"] := "User is restricted" {
        method_ok
        not user_ok
        not allow
    }

{{- if not $.Values.adminJwtOpaRules.insecureAlwaysAllowAdminToken }}
    result["body"] := "product not found" {
        product_need_custom_body
        prod == {}
    }
    result["body"] := "paid service not allowed" {
        product_access_ok
        product_need_custom_body
        prod != {}
    }
    result["body"] := "product access not allowed" {
        need_product_match
        not product_access_ok
        prod != {}
    }
    result["body"] := "gts check failed" {
        need_gts_match
        method_ok
        user_ok
        product_ok
        product_access_ok
        not gts_ok
    }

    result["body"] := "permission to access the resource is denied" {
        not authz_ok
        needs_authz_match
    }

    product_need_custom_body {
        need_product_match
        method_ok
        user_ok
        not product_ok
    }
{{- end }}

    default allow = false
    default prod = {}
    default need_product_match = false
    default need_gts_match = false
    default needs_authz_match = false

    # users allowed with or without cloudaccount
    allow {
        email != ""
        method_ok
        user_ok
{{- if not $.Values.adminJwtOpaRules.insecureAlwaysAllowAdminToken }}
        product_ok
        product_access_ok
        authz_ok
        gts_ok
{{- end }}
    }

    allow {
        some _, role in authz.token.groups
        role == "IDC.Admin"
        endswith(email, "@intel.com")
{{- if not $.Values.adminJwtOpaRules.insecureAlwaysAllowAdminToken }}
        valid_admin_endpoint
{{- end }}
    }

    allow {
        some _, role in authz.token.roles
        role == "IDC.Admin"
        endswith(authz.token.email, "@intel.com")
{{- if not $.Values.adminJwtOpaRules.insecureAlwaysAllowAdminToken }}
        valid_admin_endpoint
{{- end }}
    }

    admin_allowed_actions = {
        # AuthzService admin endpoint
        "/proto.AuthzService/AddCloudAccountRolesToUser": ["GET", "POST"],
        "/proto.AuthzService/RemoveCloudAccountRolesFromUser": ["GET", "POST"],
        "/proto.AuthzService/AssignSystemRole": ["GET", "POST"],
        "/proto.AuthzService/UnassignSystemRole": ["GET", "POST"],
        "/proto.AuthzService/ListUsersByCloudAccount": ["GET", "POST"],
        "/proto.AuthzService/CreatePolicy": ["GET", "POST"],
        "/proto.AuthzService/RemovePolicy": ["GET", "POST"],
        "/proto.AuthzService/Check": ["GET", "POST"],
        "/proto.AuthzService/Lookup": ["GET", "POST"],
        # Billing admin endpoints
        "/proto.BillingAccountService/Create": ["GET", "POST"],
        "/proto.BillingUsageService/Read": ["GET", "POST"],
        "/proto.BillingCouponService/Read": ["GET", "POST"],
        "/proto.BillingCouponService/Create": ["GET", "POST"],
        "/proto.BillingCouponService/Disable": ["GET", "POST"],
        "/proto.BillingOptionService/Read": ["GET", "POST"],
        "/proto.BillingCreditService/Read": ["GET", "POST"],
        "/proto.BillingCreditService/Create": ["GET", "POST"],
        "/proto.BillingCreditService/ReadUnappliedCreditBalance": ["GET", "POST"],
        "/proto.BillingDeactivateInstancesService/GetDeactivateInstances": ["GET", "POST"],
        #Cloudaccount admin endpoints
        "/proto.CloudAccountService/GetByName": ["GET", "POST"],
        "/proto.CloudAccountService/Search": ["GET", "POST"],
        "/proto.CloudAccountService/Delete": ["GET", "POST"],
        "/proto.CloudAccountService/GetById": ["GET", "POST"],
        "/proto.CloudAccountService/Update": ["GET", "POST"],
        "/proto.CloudAccountService/Create": ["GET", "POST"],
        "/proto.CloudAccountService/Ensure": ["GET", "POST"],
        # Cloudcredits admin endpoints
        "/proto.CloudCreditsCouponService/Read": ["GET", "POST"], 
        "/proto.CloudCreditsCouponService/Create": ["GET", "POST"],
        "/proto.CloudCreditsCouponService/ReadCredits": ["GET", "POST"],
        "/proto.CloudCreditsCouponService/Redeem": ["GET", "POST"],
        "/proto.CloudCreditsCouponService/Disable": ["GET", "POST"],
        "/proto.CloudCreditsCreditService/CreditMigrate": ["GET", "POST"],
        "/proto.CloudCreditsCreditService/Create": ["GET", "POST"],
        "/proto.CloudCreditsCreditService/ReadCredits": ["GET", "POST"],
        # Fleetadmin admin endpoints
        "/proto.FleetAdminService/Ping": ["GET", "POST"],
        "/proto.FleetAdminUIService/SearchNodes": ["GET", "POST"],
        "/proto.FleetAdminUIService/SearchComputeNodePoolsForPoolAccountManager": ["GET", "POST"],
        "/proto.FleetAdminUIService/SearchComputeNodePoolsForNodeAdmin": ["GET", "POST"],
        "/proto.FleetAdminUIService/PutComputeNodePool": ["GET", "POST"],
        "/proto.FleetAdminUIService/SearchCloudAccountsForComputeNodePool": ["GET", "POST"],
        "/proto.FleetAdminUIService/DeleteCloudAccountFromComputeNodePool": ["GET", "POST"],
        "/proto.FleetAdminUIService/UpdateNode": ["GET", "POST"],
        "/proto.FleetAdminService/SearchComputeNodePoolsForInstanceScheduling": ["GET", "POST"],
        "/proto.FleetAdminService/UpdateComputeNodePoolsForCloudAccount": ["GET", "POST"],	
        "/proto.FleetAdminUIService/AddCloudAccountToComputeNodePool": ["GET", "POST"],
        "/proto.FleetAdminUIService/SearchInstanceTypeStatsForNode": ["GET", "POST"],
        # Deprecated Fleetadmin endpoints
        "/proto.FleetAdminService/SearchNodes": ["GET", "POST"],
        "/proto.FleetAdminService/SearchComputeNodePoolsForPoolAccountManager": ["GET", "POST"],
        "/proto.FleetAdminService/SearchComputeNodePoolsForNodeAdmin": ["GET", "POST"],
        "/proto.FleetAdminService/PutComputeNodePool": ["GET", "POST"],
        "/proto.FleetAdminService/SearchCloudAccountsForComputeNodePool": ["GET", "POST"],
        "/proto.FleetAdminService/DeleteCloudAccountFromComputeNodePool": ["GET", "POST"],
        "/proto.FleetAdminService/UpdateNode": ["GET", "POST"],
        "/proto.FleetAdminService/AddCloudAccountToComputeNodePool": ["GET", "POST"],
        # IKS admin endpoints
        "/proto.IksAdmin/GetFirewallRule": ["GET", "POST"],
        "/proto.IksAdmin/AuthenticateIKSAdminUser": ["GET", "POST"],
        "/proto.IksAdmin/ClusterRecreate": ["GET", "POST"],
        "/proto.IksAdmin/ClusterSnapshot": ["GET", "POST"],
        "/proto.IksAdmin/CreateIMI": ["GET", "POST"],
        "/proto.IksAdmin/CreateInstanceTypes": ["GET", "POST"],
        "/proto.IksAdmin/CreateK8SVersion": ["GET", "POST"],
        "/proto.IksAdmin/CreateNewAddOn": ["GET", "POST"],
        "/proto.IksAdmin/DeleteAddOn": ["GET", "POST"],
        "/proto.IksAdmin/DeleteIMI": ["GET", "POST"],
        "/proto.IksAdmin/DeleteInstanceType": ["GET", "POST"],
        "/proto.IksAdmin/DeleteK8SVersion": ["GET", "POST"],
        "/proto.IksAdmin/DeleteLoadBalancer": ["GET", "POST"],
        "/proto.IksAdmin/GetAddOn": ["GET", "POST"],
        "/proto.IksAdmin/GetAddOns": ["GET", "POST"],
        "/proto.IksAdmin/GetCloudAccountApproveList": ["GET", "POST"],
        "/proto.IksAdmin/GetCluster": ["GET", "POST"],
        "/proto.IksAdmin/GetClusters": ["GET", "POST"],
        "/proto.IksAdmin/GetControlPlaneSSHKeys": ["GET", "POST"],
        "/proto.IksAdmin/GetEvents": ["GET", "POST"],
        "/proto.IksAdmin/GetIMI": ["GET", "POST"],
        "/proto.IksAdmin/GetIMIs": ["GET", "POST"],
        "/proto.IksAdmin/GetIMIsInfo": ["GET", "POST"],
        "/proto.IksAdmin/GetInstanceType": ["GET", "POST"],
        "/proto.IksAdmin/GetInstanceTypeInfo": ["GET", "POST"],
        "/proto.IksAdmin/GetInstanceTypes": ["GET", "POST"],
        "/proto.IksAdmin/GetK8SVersion": ["GET", "POST"],
        "/proto.IksAdmin/GetLoadBalancer": ["GET", "POST"],
        "/proto.IksAdmin/GetLoadBalancers": ["GET", "POST"],
        "/proto.IksAdmin/PostCloudAccountApproveList": ["GET", "POST"],
        "/proto.IksAdmin/PostLoadBalancer": ["GET", "POST"],
        "/proto.IksAdmin/PutAddOn": ["GET", "POST"],
        "/proto.IksAdmin/PutCPNodegroup": ["GET", "POST"],
        "/proto.IksAdmin/PutCloudAccountApproveList": ["GET", "POST"],
        "/proto.IksAdmin/PutIMI": ["GET", "POST"],
        "/proto.IksAdmin/PutInstanceType": ["GET", "POST"],
        "/proto.IksAdmin/PutK8SVersion": ["GET", "POST"],
        "/proto.IksAdmin/PutLoadBalancer": ["GET", "POST"],
        "/proto.IksAdmin/UpdateIMIInstanceTypeToK8sCompatibility": ["GET", "POST"],
        "/proto.IksAdmin/UpdateInstanceTypeIMIToK8sCompatibility": ["GET", "POST"],
        "/proto.IksAdmin/UpgradeClusterControlPlane": ["GET", "POST"],
        # Instance admin endpoints
        "/proto.InstanceService/Search": ["GET", "POST"],
        "/proto.InstanceService/Search2": ["GET", "POST"],
        "/proto.InstanceService/Delete": ["GET", "POST"],
        "/proto.InstanceService/Delete2": ["GET", "POST"],
        "/proto.InstanceGroupService/Search": ["GET", "POST"],
        "/proto.InstanceGroupService/Delete": ["GET", "POST"],
        # Metering admin endpoints
        "/proto.MeteringService/Update": ["GET", "POST"],
        "/proto.MeteringService/Search": ["GET", "POST"],
        "/proto.MeteringService/SearchInvalid": ["GET", "POST"],
        "/proto.MeteringService/Create": ["GET", "POST"],
        "/proto.MeteringService/FindPrevious": ["GET", "POST"],
        "/proto.MeteringService/CreateInvalidRecords": ["GET", "POST"],
        "/proto.MeteringService/IsMeteringRecordAvailable": ["GET", "POST"],
        "/proto.SecurityInsights/CompareReleaseVulnerabilities": ["GET", "POST"],
        # Security Storage
        "/proto.SecurityInsights/GetRelease": ["GET", "POST"],
        "/proto.SecurityInsights/GetReleaseSBOM": ["GET", "POST"],
        "/proto.SecurityInsights/GetSummary": ["GET", "POST"],
        "/proto.SecurityInsights/GetReleaseComponent": ["GET", "POST"],
        "/proto.SecurityInsights/GetReleaseVulnerabilities": ["GET", "POST"],
        "/proto.SecurityInsights/GetAllReleases": ["GET", "POST"],
        "/proto.SecurityInsights/GetAllComponents": ["GET", "POST"],
        # Storage admin endpoints
        "/proto.StorageAdminService/GetResourceUsage": ["GET", "POST"],
        "/proto.StorageAdminService/InsertStorageQuotaByAccount": ["GET", "POST"],
        "/proto.StorageAdminService/UpdateStorageQuotaByAccount": ["GET", "POST"],
        "/proto.StorageAdminService/DeleteStorageQuotaByAccount": ["GET", "POST"],
        "/proto.StorageAdminService/GetStorageQuotaByAccount": ["GET", "POST"],
        "/proto.StorageAdminService/GetAllStorageQuota": ["GET", "POST"],
        "/proto.FileStorageService/FileStorageService": ["GET", "POST"],
        "/proto.ObjectStorageService/DeleteBucket": ["GET", "POST"],	
        "/proto.ObjectStorageService/DeleteBucketLifecycleRule": ["GET", "POST"],
        "/proto.ObjectStorageService/DeleteObjectUser": ["GET", "POST"],
        "/proto.S3Service/DeleteBucket": ["GET", "POST"],
        "/proto.S3Service/DeleteLifecycleRules": ["GET", "POST"],
        "/proto.S3Service/DeleteS3Principal": ["GET", "POST"],
        "/proto.QuotaManagementService/Register": ["GET", "POST"],
        "/proto.QuotaManagementService/GetServiceResource": ["GET", "POST"],
        "/proto.QuotaManagementService/UpdateServiceRegistration": ["GET", "POST"],
        "/proto.QuotaManagementService/CreateServiceQuota": ["GET", "POST"],
        "/proto.QuotaManagementService/GetServiceQuotaResource": ["GET", "POST"],
        "/proto.QuotaManagementService/UpdateServiceQuotaResource": ["GET", "POST"],
        "/proto.QuotaManagementService/DeleteServiceQuotaResource": ["GET", "POST"],
        "/proto.QuotaManagementService/DeleteService": ["GET", "POST"],
        "/proto.QuotaManagementService/ListServiceQuota": ["GET", "POST"],
        "/proto.QuotaManagementService/ListAllServiceQuotas": ["GET", "POST"],
        "/proto.QuotaManagementService/ListRegisteredServices": ["GET", "POST"],
        "/proto.QuotaManagementService/ListServiceResources": ["GET", "POST"],
        # Product Catalog admin endpoints
        "/proto.ProductAccessService/ReadAccess": ["GET", "POST"],
        "/proto.ProductAccessService/CheckProductAccess": ["GET", "POST"],
        "/proto.ProductAccessService/AddAccess": ["GET", "POST"],
        "/proto.ProductAccessService/RemoveAccess": ["GET", "POST"],
        # PC
        "/proto.ProductCatalogService/AdminRead": ["GET", "POST"],
        "/proto.ProductCatalogService/UserRead": ["GET", "POST"],
        "/proto.ProductCatalogService/UserReadExternal": ["GET", "POST"],
        "/proto.RegionService/Add": ["GET", "POST"],
        "/proto.RegionService/AdminRead": ["GET", "POST"],
        "/proto.RegionService/UserRead": ["GET", "POST"],
        "/proto.RegionService/Update": ["GET", "POST"],
        "/proto.RegionService/Delete": ["GET", "POST"],
        "/proto.ProductFamilyService/Add": ["GET", "POST"],
        "/proto.ProductFamilyService/Read": ["GET", "POST"],
        "/proto.ProductFamilyService/Update": ["GET", "POST"],
        "/proto.ProductFamilyService/Delete": ["GET", "POST"],
        "/proto.ProductVendorService/Add": ["GET", "POST"],
        "/proto.ProductVendorService/Read": ["GET", "POST"],
        "/proto.ProductVendorService/Update": ["GET", "POST"],
        "/proto.ProductVendorService/Delete": ["GET", "POST"],
        # Usage Admin endpoints
        "/proto.UsageService/SearchProductUsages": ["GET", "POST"],
        "/proto.UsageService/SearchResourceUsages": ["GET", "POST"],
        "/proto.UsageService/StreamSearchProductUsages": ["GET", "POST"],
        "/proto.UsageService/StreamSearchResourceUsages": ["GET", "POST"],
        "/proto.UsageRecordService/CreateProductUsageRecord": ["GET", "POST"],
        "/proto.UsageRecordService/SearchProductUsageRecords": ["GET", "POST"],
        "/proto.UsageRecordService/SearchInvalidProductUsageRecords": ["GET", "POST"],
        # Cloud Account Region Access admin endpoints
        "/proto.RegionAccessService/ReadAccess": ["GET", "POST"],
        "/proto.RegionAccessService/AddAccess": ["GET", "POST"],
        "/proto.RegionAccessService/RemoveAccess": ["GET", "POST"],
        "/proto.RegionAccessService/CheckRegionAccess": ["GET", "POST"],

    }

    valid_admin_endpoint {
        admin_allowed_actions[input.attributes.request.http.path][_] == input.attributes.request.http.method
    }

    is_reflect {
        input.parsed_path[0] == "grpc.reflection.v1alpha.ServerReflection"
    }

    method_ok {
        is_reflect
    }

    product_ok {
        is_reflect
        endswith(authz.token.email, "@intel.com")
    }

    gts_ok {
        is_reflect
        endswith(authz.token.email, "@intel.com")
    }

    gts_ok {
        endswith(authz.token.email, "@intel.com")
    }

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceActions_authz_ok {
        AuthzService_Actions_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_Actions_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "Actions"]
        AuthzServiceActions_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "Actions"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "Actions"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_Actions_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_Actions_cloudAccount["personId"] if {
        email == AuthzService_Actions_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_Actions_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "Actions"]
        not AuthzService_Actions_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "Actions"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "Actions"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "Actions"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceCreateCloudAccountRole_authz_ok {
        AuthzService_CreateCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_CreateCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "CreateCloudAccountRole"]
        AuthzServiceCreateCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "CreateCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "CreateCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_CreateCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_CreateCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_CreateCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_CreateCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "CreateCloudAccountRole"]
        not AuthzService_CreateCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "CreateCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "CreateCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "CreateCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceQueryCloudAccountRoles_authz_ok {
        AuthzService_QueryCloudAccountRoles_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_QueryCloudAccountRoles_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "QueryCloudAccountRoles"]
        AuthzServiceQueryCloudAccountRoles_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "QueryCloudAccountRoles"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "QueryCloudAccountRoles"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_QueryCloudAccountRoles_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_QueryCloudAccountRoles_cloudAccount["personId"] if {
        email == AuthzService_QueryCloudAccountRoles_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_QueryCloudAccountRoles_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "QueryCloudAccountRoles"]
        not AuthzService_QueryCloudAccountRoles_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "QueryCloudAccountRoles"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "QueryCloudAccountRoles"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "QueryCloudAccountRoles"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceGetCloudAccountRole_authz_ok {
        AuthzService_GetCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_GetCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "GetCloudAccountRole"]
        AuthzServiceGetCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "GetCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "GetCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_GetCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_GetCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_GetCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_GetCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "GetCloudAccountRole"]
        not AuthzService_GetCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "GetCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "GetCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "GetCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceUpdateCloudAccountRole_authz_ok {
        AuthzService_UpdateCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_UpdateCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "UpdateCloudAccountRole"]
        AuthzServiceUpdateCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "UpdateCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "UpdateCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_UpdateCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_UpdateCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_UpdateCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_UpdateCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "UpdateCloudAccountRole"]
        not AuthzService_UpdateCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "UpdateCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "UpdateCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "UpdateCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceRemoveCloudAccountRole_authz_ok {
        AuthzService_RemoveCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_RemoveCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRole"]
        AuthzServiceRemoveCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_RemoveCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_RemoveCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_RemoveCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_RemoveCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRole"]
        not AuthzService_RemoveCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceAddUserToCloudAccountRole_authz_ok {
        AuthzService_AddUserToCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_AddUserToCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "AddUserToCloudAccountRole"]
        AuthzServiceAddUserToCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "AddUserToCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "AddUserToCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_AddUserToCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_AddUserToCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_AddUserToCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_AddUserToCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "AddUserToCloudAccountRole"]
        not AuthzService_AddUserToCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "AddUserToCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "AddUserToCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "AddUserToCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceAddCloudAccountRolesToUser_authz_ok {
        AuthzService_AddCloudAccountRolesToUser_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_AddCloudAccountRolesToUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "AddCloudAccountRolesToUser"]
        AuthzServiceAddCloudAccountRolesToUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "AddCloudAccountRolesToUser"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "AddCloudAccountRolesToUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_AddCloudAccountRolesToUser_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_AddCloudAccountRolesToUser_cloudAccount["personId"] if {
        email == AuthzService_AddCloudAccountRolesToUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_AddCloudAccountRolesToUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "AddCloudAccountRolesToUser"]
        not AuthzService_AddCloudAccountRolesToUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "AddCloudAccountRolesToUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "AddCloudAccountRolesToUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "AddCloudAccountRolesToUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceRemoveCloudAccountRolesFromUser_authz_ok {
        AuthzService_RemoveCloudAccountRolesFromUser_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_RemoveCloudAccountRolesFromUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRolesFromUser"]
        AuthzServiceRemoveCloudAccountRolesFromUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRolesFromUser"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRolesFromUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_RemoveCloudAccountRolesFromUser_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_RemoveCloudAccountRolesFromUser_cloudAccount["personId"] if {
        email == AuthzService_RemoveCloudAccountRolesFromUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_RemoveCloudAccountRolesFromUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRolesFromUser"]
        not AuthzService_RemoveCloudAccountRolesFromUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRolesFromUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRolesFromUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveCloudAccountRolesFromUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceRemoveResourceFromCloudAccountRole_authz_ok {
        AuthzService_RemoveResourceFromCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_RemoveResourceFromCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveResourceFromCloudAccountRole"]
        AuthzServiceRemoveResourceFromCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "RemoveResourceFromCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveResourceFromCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_RemoveResourceFromCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_RemoveResourceFromCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_RemoveResourceFromCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_RemoveResourceFromCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveResourceFromCloudAccountRole"]
        not AuthzService_RemoveResourceFromCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveResourceFromCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveResourceFromCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveResourceFromCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceRemoveUserFromCloudAccountRole_authz_ok {
        AuthzService_RemoveUserFromCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_RemoveUserFromCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveUserFromCloudAccountRole"]
        AuthzServiceRemoveUserFromCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "RemoveUserFromCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveUserFromCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_RemoveUserFromCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_RemoveUserFromCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_RemoveUserFromCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_RemoveUserFromCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveUserFromCloudAccountRole"]
        not AuthzService_RemoveUserFromCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveUserFromCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveUserFromCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "RemoveUserFromCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceAddPermissionToCloudAccountRole_authz_ok {
        AuthzService_AddPermissionToCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_AddPermissionToCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "AddPermissionToCloudAccountRole"]
        AuthzServiceAddPermissionToCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "AddPermissionToCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "AddPermissionToCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_AddPermissionToCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_AddPermissionToCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_AddPermissionToCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_AddPermissionToCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "AddPermissionToCloudAccountRole"]
        not AuthzService_AddPermissionToCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "AddPermissionToCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "AddPermissionToCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "AddPermissionToCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceUpdatePermissionCloudAccountRole_authz_ok {
        AuthzService_UpdatePermissionCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_UpdatePermissionCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "UpdatePermissionCloudAccountRole"]
        AuthzServiceUpdatePermissionCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "UpdatePermissionCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "UpdatePermissionCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_UpdatePermissionCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_UpdatePermissionCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_UpdatePermissionCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_UpdatePermissionCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "UpdatePermissionCloudAccountRole"]
        not AuthzService_UpdatePermissionCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "UpdatePermissionCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "UpdatePermissionCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "UpdatePermissionCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceRemovePermissionFromCloudAccountRole_authz_ok {
        AuthzService_RemovePermissionFromCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_RemovePermissionFromCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "RemovePermissionFromCloudAccountRole"]
        AuthzServiceRemovePermissionFromCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "RemovePermissionFromCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "RemovePermissionFromCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_RemovePermissionFromCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_RemovePermissionFromCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_RemovePermissionFromCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_RemovePermissionFromCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "RemovePermissionFromCloudAccountRole"]
        not AuthzService_RemovePermissionFromCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "RemovePermissionFromCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "RemovePermissionFromCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "RemovePermissionFromCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceAssignSystemRole_authz_ok {
        AuthzService_AssignSystemRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_AssignSystemRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "AssignSystemRole"]
        AuthzServiceAssignSystemRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "AssignSystemRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "AssignSystemRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_AssignSystemRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_AssignSystemRole_cloudAccount["personId"] if {
        email == AuthzService_AssignSystemRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_AssignSystemRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "AssignSystemRole"]
        not AuthzService_AssignSystemRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "AssignSystemRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "AssignSystemRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "AssignSystemRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceUnassignSystemRole_authz_ok {
        AuthzService_UnassignSystemRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_UnassignSystemRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "UnassignSystemRole"]
        AuthzServiceUnassignSystemRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "UnassignSystemRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "UnassignSystemRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_UnassignSystemRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_UnassignSystemRole_cloudAccount["personId"] if {
        email == AuthzService_UnassignSystemRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_UnassignSystemRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "UnassignSystemRole"]
        not AuthzService_UnassignSystemRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "UnassignSystemRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "UnassignSystemRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "UnassignSystemRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceCreatePolicy_authz_ok {
        AuthzService_CreatePolicy_AuthzCloudAccountId := "*"
        authzCheck := authzService.check(email, enterpriseId,AuthzService_CreatePolicy_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "CreatePolicy"]
        AuthzServiceCreatePolicy_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "CreatePolicy"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "CreatePolicy"]
    }

    user_ok {
        input.parsed_path == ["proto.AuthzService", "CreatePolicy"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "CreatePolicy"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "CreatePolicy"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "CreatePolicy"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "ListResourceDefinition"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "ListResourceDefinition"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "ListResourceDefinition"]
    }

    user_ok {
        input.parsed_path == ["proto.AuthzService", "ListResourceDefinition"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "ListResourceDefinition"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "ListResourceDefinition"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "ListResourceDefinition"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceGetUser_authz_ok {
        AuthzService_GetUser_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_GetUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "GetUser"]
        AuthzServiceGetUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "GetUser"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "GetUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_GetUser_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_GetUser_cloudAccount["personId"] if {
        email == AuthzService_GetUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_GetUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "GetUser"]
        not AuthzService_GetUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "GetUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "GetUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "GetUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceListUsersByCloudAccount_authz_ok {
        AuthzService_ListUsersByCloudAccount_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_ListUsersByCloudAccount_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "ListUsersByCloudAccount"]
        AuthzServiceListUsersByCloudAccount_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "ListUsersByCloudAccount"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "ListUsersByCloudAccount"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_ListUsersByCloudAccount_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_ListUsersByCloudAccount_cloudAccount["personId"] if {
        email == AuthzService_ListUsersByCloudAccount_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_ListUsersByCloudAccount_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "ListUsersByCloudAccount"]
        not AuthzService_ListUsersByCloudAccount_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "ListUsersByCloudAccount"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "ListUsersByCloudAccount"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "ListUsersByCloudAccount"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceDefaultCloudAccountRoleAssigned_authz_ok {
        AuthzService_DefaultCloudAccountRoleAssigned_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_DefaultCloudAccountRoleAssigned_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "DefaultCloudAccountRoleAssigned"]
        AuthzServiceDefaultCloudAccountRoleAssigned_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "DefaultCloudAccountRoleAssigned"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "DefaultCloudAccountRoleAssigned"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_DefaultCloudAccountRoleAssigned_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_DefaultCloudAccountRoleAssigned_cloudAccount["personId"] if {
        email == AuthzService_DefaultCloudAccountRoleAssigned_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_DefaultCloudAccountRoleAssigned_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "DefaultCloudAccountRoleAssigned"]
        not AuthzService_DefaultCloudAccountRoleAssigned_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "DefaultCloudAccountRoleAssigned"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "DefaultCloudAccountRoleAssigned"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "DefaultCloudAccountRoleAssigned"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    AuthzServiceAssignDefaultCloudAccountRole_authz_ok {
        AuthzService_AssignDefaultCloudAccountRole_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,AuthzService_AssignDefaultCloudAccountRole_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.AuthzService", "AssignDefaultCloudAccountRole"]
        AuthzServiceAssignDefaultCloudAccountRole_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.AuthzService", "AssignDefaultCloudAccountRole"]
    }

    method_ok {
        input.parsed_path == ["proto.AuthzService", "AssignDefaultCloudAccountRole"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    AuthzService_AssignDefaultCloudAccountRole_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := AuthzService_AssignDefaultCloudAccountRole_cloudAccount["personId"] if {
        email == AuthzService_AssignDefaultCloudAccountRole_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, AuthzService_AssignDefaultCloudAccountRole_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.AuthzService", "AssignDefaultCloudAccountRole"]
        not AuthzService_AssignDefaultCloudAccountRole_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.AuthzService", "AssignDefaultCloudAccountRole"]
    }


    product_access_ok {
        input.parsed_path == ["proto.AuthzService", "AssignDefaultCloudAccountRole"]
    }

    gts_ok {
        input.parsed_path == ["proto.AuthzService", "AssignDefaultCloudAccountRole"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingAccountService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingAccountService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingAccountService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingAccountService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingAccountService_Create_cloudAccount["personId"] if {
        email == BillingAccountService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingAccountService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingAccountService", "Create"]
        not BillingAccountService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingAccountService", "Create"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingAccountService", "Create"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingAccountService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingAccountService", "DowngradePremiumtoStandard"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingAccountService", "DowngradePremiumtoStandard"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingAccountService", "DowngradePremiumtoStandard"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingAccountService_DowngradePremiumtoStandard_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingAccountService_DowngradePremiumtoStandard_cloudAccount["personId"] if {
        email == BillingAccountService_DowngradePremiumtoStandard_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingAccountService_DowngradePremiumtoStandard_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingAccountService", "DowngradePremiumtoStandard"]
        not BillingAccountService_DowngradePremiumtoStandard_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingAccountService", "DowngradePremiumtoStandard"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingAccountService", "DowngradePremiumtoStandard"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingAccountService", "DowngradePremiumtoStandard"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingOptionService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingOptionService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingOptionService", "Read"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingOptionService_Read_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingOptionService_Read_cloudAccount["personId"] if {
        email == BillingOptionService_Read_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingOptionService_Read_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingOptionService", "Read"]
        not BillingOptionService_Read_cloudAccount["restricted"]
        email == BillingOptionService_Read_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingOptionService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingOptionService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingOptionService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingRateService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingRateService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingRateService", "Read"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingRateService_Read_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingRateService_Read_cloudAccount["personId"] if {
        email == BillingRateService_Read_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingRateService_Read_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingRateService", "Read"]
        not BillingRateService_Read_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingRateService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingRateService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingRateService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadInternal"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingCreditService", "ReadInternal"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadInternal"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingCreditService_ReadInternal_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingCreditService_ReadInternal_cloudAccount["personId"] if {
        email == BillingCreditService_ReadInternal_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingCreditService_ReadInternal_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadInternal"]
        not BillingCreditService_ReadInternal_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadInternal"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadInternal"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadInternal"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingCreditService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingCreditService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingCreditService", "Read"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingCreditService_Read_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingCreditService_Read_cloudAccount["personId"] if {
        email == BillingCreditService_Read_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingCreditService_Read_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingCreditService", "Read"]
        not BillingCreditService_Read_cloudAccount["restricted"]
        email == BillingCreditService_Read_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingCreditService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingCreditService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingCreditService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadUnappliedCreditBalance"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingCreditService", "ReadUnappliedCreditBalance"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadUnappliedCreditBalance"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingCreditService_ReadUnappliedCreditBalance_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingCreditService_ReadUnappliedCreditBalance_cloudAccount["personId"] if {
        email == BillingCreditService_ReadUnappliedCreditBalance_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingCreditService_ReadUnappliedCreditBalance_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadUnappliedCreditBalance"]
        not BillingCreditService_ReadUnappliedCreditBalance_cloudAccount["restricted"]
        email == BillingCreditService_ReadUnappliedCreditBalance_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadUnappliedCreditBalance"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadUnappliedCreditBalance"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingCreditService", "ReadUnappliedCreditBalance"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingCreditService", "CreditMigrate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingCreditService", "CreditMigrate"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingCreditService", "CreditMigrate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingCreditService_CreditMigrate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingCreditService_CreditMigrate_cloudAccount["personId"] if {
        email == BillingCreditService_CreditMigrate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingCreditService_CreditMigrate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingCreditService", "CreditMigrate"]
        not BillingCreditService_CreditMigrate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingCreditService", "CreditMigrate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingCreditService", "CreditMigrate"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingCreditService", "CreditMigrate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingCreditService", "DeleteMigratedCredit"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingCreditService", "DeleteMigratedCredit"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingCreditService", "DeleteMigratedCredit"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingCreditService_DeleteMigratedCredit_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingCreditService_DeleteMigratedCredit_cloudAccount["personId"] if {
        email == BillingCreditService_DeleteMigratedCredit_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingCreditService_DeleteMigratedCredit_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingCreditService", "DeleteMigratedCredit"]
        not BillingCreditService_DeleteMigratedCredit_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingCreditService", "DeleteMigratedCredit"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingCreditService", "DeleteMigratedCredit"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingCreditService", "DeleteMigratedCredit"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingCouponService", "Redeem"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingCouponService", "Redeem"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingCouponService", "Redeem"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingCouponService_Redeem_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingCouponService_Redeem_cloudAccount["personId"] if {
        email == BillingCouponService_Redeem_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingCouponService_Redeem_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingCouponService", "Redeem"]
        not BillingCouponService_Redeem_cloudAccount["restricted"]
        email == BillingCouponService_Redeem_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingCouponService", "Redeem"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingCouponService", "Redeem"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingCouponService", "Redeem"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingInvoiceService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "Read"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingInvoiceService_Read_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingInvoiceService_Read_cloudAccount["personId"] if {
        email == BillingInvoiceService_Read_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingInvoiceService_Read_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "Read"]
        not BillingInvoiceService_Read_cloudAccount["restricted"]
        email == BillingInvoiceService_Read_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadDetail"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadDetail"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadDetail"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingInvoiceService_ReadDetail_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingInvoiceService_ReadDetail_cloudAccount["personId"] if {
        email == BillingInvoiceService_ReadDetail_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingInvoiceService_ReadDetail_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadDetail"]
        not BillingInvoiceService_ReadDetail_cloudAccount["restricted"]
        email == BillingInvoiceService_ReadDetail_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadDetail"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadDetail"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadDetail"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadUnbilled"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadUnbilled"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadUnbilled"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingInvoiceService_ReadUnbilled_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingInvoiceService_ReadUnbilled_cloudAccount["personId"] if {
        email == BillingInvoiceService_ReadUnbilled_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingInvoiceService_ReadUnbilled_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadUnbilled"]
        not BillingInvoiceService_ReadUnbilled_cloudAccount["restricted"]
        email == BillingInvoiceService_ReadUnbilled_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadUnbilled"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadUnbilled"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadUnbilled"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadStatement"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadStatement"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadStatement"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingInvoiceService_ReadStatement_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingInvoiceService_ReadStatement_cloudAccount["personId"] if {
        email == BillingInvoiceService_ReadStatement_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingInvoiceService_ReadStatement_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadStatement"]
        not BillingInvoiceService_ReadStatement_cloudAccount["restricted"]
        email == BillingInvoiceService_ReadStatement_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadStatement"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadStatement"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingInvoiceService", "ReadStatement"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPreProcessing"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPreProcessing"]
    }

    method_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPreProcessing"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    PaymentService_AddPaymentPreProcessing_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := PaymentService_AddPaymentPreProcessing_cloudAccount["personId"] if {
        email == PaymentService_AddPaymentPreProcessing_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, PaymentService_AddPaymentPreProcessing_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPreProcessing"]
        not PaymentService_AddPaymentPreProcessing_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPreProcessing"]
    }


    product_access_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPreProcessing"]
    }

    gts_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPreProcessing"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPostProcessing"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPostProcessing"]
    }

    method_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPostProcessing"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    PaymentService_AddPaymentPostProcessing_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := PaymentService_AddPaymentPostProcessing_cloudAccount["personId"] if {
        email == PaymentService_AddPaymentPostProcessing_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, PaymentService_AddPaymentPostProcessing_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPostProcessing"]
        not PaymentService_AddPaymentPostProcessing_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPostProcessing"]
    }


    product_access_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPostProcessing"]
    }

    gts_ok {
        input.parsed_path == ["proto.PaymentService", "AddPaymentPostProcessing"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.BillingUsageService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.BillingUsageService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.BillingUsageService", "Read"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    BillingUsageService_Read_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := BillingUsageService_Read_cloudAccount["personId"] if {
        email == BillingUsageService_Read_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, BillingUsageService_Read_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.BillingUsageService", "Read"]
        not BillingUsageService_Read_cloudAccount["restricted"]
        email == BillingUsageService_Read_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.BillingUsageService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.BillingUsageService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.BillingUsageService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Enroll"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Enroll"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Enroll"]
    }

    user_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Enroll"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Enroll"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Enroll"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Enroll"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Upgrade"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Upgrade"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Upgrade"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudAccountEnrollService_Upgrade_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudAccountEnrollService_Upgrade_cloudAccount["personId"] if {
        email == CloudAccountEnrollService_Upgrade_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountEnrollService_Upgrade_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Upgrade"]
        not CloudAccountEnrollService_Upgrade_cloudAccount["restricted"]
        email == CloudAccountEnrollService_Upgrade_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Upgrade"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Upgrade"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "Upgrade"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "UpgradeWithCreditCard"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountEnrollService", "UpgradeWithCreditCard"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "UpgradeWithCreditCard"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudAccountEnrollService_UpgradeWithCreditCard_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudAccountEnrollService_UpgradeWithCreditCard_cloudAccount["personId"] if {
        email == CloudAccountEnrollService_UpgradeWithCreditCard_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountEnrollService_UpgradeWithCreditCard_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "UpgradeWithCreditCard"]
        not CloudAccountEnrollService_UpgradeWithCreditCard_cloudAccount["restricted"]
        email == CloudAccountEnrollService_UpgradeWithCreditCard_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "UpgradeWithCreditCard"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "UpgradeWithCreditCard"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountEnrollService", "UpgradeWithCreditCard"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadMembers"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadMembers"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadMembers"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.id == relatedCloudAccount["id"]
    }
    CloudAccountMemberService_ReadMembers_cloudAccount := cloudaccount.getById(input.parsed_body.id)

    personId := CloudAccountMemberService_ReadMembers_cloudAccount["personId"] if {
        email == CloudAccountMemberService_ReadMembers_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountMemberService_ReadMembers_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadMembers"]
        not CloudAccountMemberService_ReadMembers_cloudAccount["restricted"]
        email == CloudAccountMemberService_ReadMembers_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadMembers"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadMembers"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadMembers"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadActiveMembers"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadActiveMembers"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadActiveMembers"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.id == relatedCloudAccount["id"]
    }
    CloudAccountMemberService_ReadActiveMembers_cloudAccount := cloudaccount.getById(input.parsed_body.id)

    personId := CloudAccountMemberService_ReadActiveMembers_cloudAccount["personId"] if {
        email == CloudAccountMemberService_ReadActiveMembers_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountMemberService_ReadActiveMembers_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadActiveMembers"]
        not CloudAccountMemberService_ReadActiveMembers_cloudAccount["restricted"]
        email == CloudAccountMemberService_ReadActiveMembers_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadActiveMembers"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadActiveMembers"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadActiveMembers"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "AddMembers"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountMemberService", "AddMembers"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "AddMembers"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudAccountMemberService_AddMembers_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudAccountMemberService_AddMembers_cloudAccount["personId"] if {
        email == CloudAccountMemberService_AddMembers_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountMemberService_AddMembers_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "AddMembers"]
        not CloudAccountMemberService_AddMembers_cloudAccount["restricted"]
        email == CloudAccountMemberService_AddMembers_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "AddMembers"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "AddMembers"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "AddMembers"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "RemoveMembers"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountMemberService", "RemoveMembers"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "RemoveMembers"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudAccountMemberService_RemoveMembers_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudAccountMemberService_RemoveMembers_cloudAccount["personId"] if {
        email == CloudAccountMemberService_RemoveMembers_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountMemberService_RemoveMembers_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "RemoveMembers"]
        not CloudAccountMemberService_RemoveMembers_cloudAccount["restricted"]
        email == CloudAccountMemberService_RemoveMembers_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "RemoveMembers"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "RemoveMembers"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "RemoveMembers"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadUserCloudAccounts"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadUserCloudAccounts"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadUserCloudAccounts"]
        input.parsed_body.userName == authz.token.email
    }

    user_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadUserCloudAccounts"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadUserCloudAccounts"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadUserCloudAccounts"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountMemberService", "ReadUserCloudAccounts"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.OtpService", "CreateOtp"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.OtpService", "CreateOtp"]
    }

    method_ok {
        input.parsed_path == ["proto.OtpService", "CreateOtp"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    OtpService_CreateOtp_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := OtpService_CreateOtp_cloudAccount["personId"] if {
        email == OtpService_CreateOtp_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, OtpService_CreateOtp_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.OtpService", "CreateOtp"]
        not OtpService_CreateOtp_cloudAccount["restricted"]
        email == OtpService_CreateOtp_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.OtpService", "CreateOtp"]
    }


    product_access_ok {
        input.parsed_path == ["proto.OtpService", "CreateOtp"]
    }

    gts_ok {
        input.parsed_path == ["proto.OtpService", "CreateOtp"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.OtpService", "VerifyOtp"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.OtpService", "VerifyOtp"]
    }

    method_ok {
        input.parsed_path == ["proto.OtpService", "VerifyOtp"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    OtpService_VerifyOtp_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := OtpService_VerifyOtp_cloudAccount["personId"] if {
        email == OtpService_VerifyOtp_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, OtpService_VerifyOtp_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.OtpService", "VerifyOtp"]
        not OtpService_VerifyOtp_cloudAccount["restricted"]
        email == OtpService_VerifyOtp_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.OtpService", "VerifyOtp"]
    }


    product_access_ok {
        input.parsed_path == ["proto.OtpService", "VerifyOtp"]
    }

    gts_ok {
        input.parsed_path == ["proto.OtpService", "VerifyOtp"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.OtpService", "ResendOtp"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.OtpService", "ResendOtp"]
    }

    method_ok {
        input.parsed_path == ["proto.OtpService", "ResendOtp"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    OtpService_ResendOtp_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := OtpService_ResendOtp_cloudAccount["personId"] if {
        email == OtpService_ResendOtp_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, OtpService_ResendOtp_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.OtpService", "ResendOtp"]
        not OtpService_ResendOtp_cloudAccount["restricted"]
        email == OtpService_ResendOtp_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.OtpService", "ResendOtp"]
    }


    product_access_ok {
        input.parsed_path == ["proto.OtpService", "ResendOtp"]
    }

    gts_ok {
        input.parsed_path == ["proto.OtpService", "ResendOtp"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "CreateInvite"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationService", "CreateInvite"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "CreateInvite"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudAccountInvitationService_CreateInvite_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudAccountInvitationService_CreateInvite_cloudAccount["personId"] if {
        email == CloudAccountInvitationService_CreateInvite_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountInvitationService_CreateInvite_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "CreateInvite"]
        not CloudAccountInvitationService_CreateInvite_cloudAccount["restricted"]
        email == CloudAccountInvitationService_CreateInvite_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "CreateInvite"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "CreateInvite"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "CreateInvite"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ReadInvite"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ReadInvite"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ReadInvite"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.adminAccountId == relatedCloudAccount["id"]
    }
    CloudAccountInvitationService_ReadInvite_cloudAccount := cloudaccount.getById(input.parsed_body.adminAccountId)

    personId := CloudAccountInvitationService_ReadInvite_cloudAccount["personId"] if {
        email == CloudAccountInvitationService_ReadInvite_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountInvitationService_ReadInvite_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ReadInvite"]
        not CloudAccountInvitationService_ReadInvite_cloudAccount["restricted"]
        email == CloudAccountInvitationService_ReadInvite_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ReadInvite"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ReadInvite"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ReadInvite"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ResendInvite"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ResendInvite"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ResendInvite"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.adminAccountId == relatedCloudAccount["id"]
    }
    CloudAccountInvitationService_ResendInvite_cloudAccount := cloudaccount.getById(input.parsed_body.adminAccountId)

    personId := CloudAccountInvitationService_ResendInvite_cloudAccount["personId"] if {
        email == CloudAccountInvitationService_ResendInvite_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountInvitationService_ResendInvite_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ResendInvite"]
        not CloudAccountInvitationService_ResendInvite_cloudAccount["restricted"]
        email == CloudAccountInvitationService_ResendInvite_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ResendInvite"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ResendInvite"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ResendInvite"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RevokeInvite"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RevokeInvite"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RevokeInvite"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.adminAccountId == relatedCloudAccount["id"]
    }
    CloudAccountInvitationService_RevokeInvite_cloudAccount := cloudaccount.getById(input.parsed_body.adminAccountId)

    personId := CloudAccountInvitationService_RevokeInvite_cloudAccount["personId"] if {
        email == CloudAccountInvitationService_RevokeInvite_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountInvitationService_RevokeInvite_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RevokeInvite"]
        not CloudAccountInvitationService_RevokeInvite_cloudAccount["restricted"]
        email == CloudAccountInvitationService_RevokeInvite_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RevokeInvite"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RevokeInvite"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RevokeInvite"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ValidateInviteCode"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ValidateInviteCode"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ValidateInviteCode"]
        input.parsed_body.memberEmail == authz.token.email
    }

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ValidateInviteCode"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ValidateInviteCode"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ValidateInviteCode"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "ValidateInviteCode"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "SendInviteCode"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationService", "SendInviteCode"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "SendInviteCode"]
        input.parsed_body.memberEmail == authz.token.email
    }

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "SendInviteCode"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "SendInviteCode"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "SendInviteCode"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "SendInviteCode"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RemoveInvite"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RemoveInvite"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RemoveInvite"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.adminAccountId == relatedCloudAccount["id"]
    }
    CloudAccountInvitationService_RemoveInvite_cloudAccount := cloudaccount.getById(input.parsed_body.adminAccountId)

    personId := CloudAccountInvitationService_RemoveInvite_cloudAccount["personId"] if {
        email == CloudAccountInvitationService_RemoveInvite_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudAccountInvitationService_RemoveInvite_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RemoveInvite"]
        not CloudAccountInvitationService_RemoveInvite_cloudAccount["restricted"]
        email == CloudAccountInvitationService_RemoveInvite_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RemoveInvite"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RemoveInvite"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationService", "RemoveInvite"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudAccountInvitationMemberService", "RejectInvite"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudAccountInvitationMemberService", "RejectInvite"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudAccountInvitationMemberService", "RejectInvite"]
        input.parsed_body.memberEmail == authz.token.email
    }

    user_ok {
        input.parsed_path == ["proto.CloudAccountInvitationMemberService", "RejectInvite"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudAccountInvitationMemberService", "RejectInvite"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudAccountInvitationMemberService", "RejectInvite"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudAccountInvitationMemberService", "RejectInvite"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCredits"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCredits"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCredits"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCreditService_ReadCredits_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCreditService_ReadCredits_cloudAccount["personId"] if {
        email == CloudCreditsCreditService_ReadCredits_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCreditService_ReadCredits_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCredits"]
        not CloudCreditsCreditService_ReadCredits_cloudAccount["restricted"]
        email == CloudCreditsCreditService_ReadCredits_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCredits"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCredits"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCredits"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadUnappliedCreditBalance"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadUnappliedCreditBalance"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadUnappliedCreditBalance"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCreditService_ReadUnappliedCreditBalance_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCreditService_ReadUnappliedCreditBalance_cloudAccount["personId"] if {
        email == CloudCreditsCreditService_ReadUnappliedCreditBalance_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCreditService_ReadUnappliedCreditBalance_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadUnappliedCreditBalance"]
        not CloudCreditsCreditService_ReadUnappliedCreditBalance_cloudAccount["restricted"]
        email == CloudCreditsCreditService_ReadUnappliedCreditBalance_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadUnappliedCreditBalance"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadUnappliedCreditBalance"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadUnappliedCreditBalance"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadInternal"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadInternal"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadInternal"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCreditService_ReadInternal_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCreditService_ReadInternal_cloudAccount["personId"] if {
        email == CloudCreditsCreditService_ReadInternal_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCreditService_ReadInternal_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadInternal"]
        not CloudCreditsCreditService_ReadInternal_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadInternal"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadInternal"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadInternal"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreditMigrate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreditMigrate"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreditMigrate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCreditService_CreditMigrate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCreditService_CreditMigrate_cloudAccount["personId"] if {
        email == CloudCreditsCreditService_CreditMigrate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCreditService_CreditMigrate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreditMigrate"]
        not CloudCreditsCreditService_CreditMigrate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreditMigrate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreditMigrate"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreditMigrate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "DeleteMigratedCredit"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCreditService", "DeleteMigratedCredit"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "DeleteMigratedCredit"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCreditService_DeleteMigratedCredit_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCreditService_DeleteMigratedCredit_cloudAccount["personId"] if {
        email == CloudCreditsCreditService_DeleteMigratedCredit_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCreditService_DeleteMigratedCredit_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "DeleteMigratedCredit"]
        not CloudCreditsCreditService_DeleteMigratedCredit_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "DeleteMigratedCredit"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "DeleteMigratedCredit"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "DeleteMigratedCredit"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreateCreditStateLog"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreateCreditStateLog"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreateCreditStateLog"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCreditService_CreateCreditStateLog_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCreditService_CreateCreditStateLog_cloudAccount["personId"] if {
        email == CloudCreditsCreditService_CreateCreditStateLog_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCreditService_CreateCreditStateLog_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreateCreditStateLog"]
        not CloudCreditsCreditService_CreateCreditStateLog_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreateCreditStateLog"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreateCreditStateLog"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "CreateCreditStateLog"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCreditStateLog"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCreditStateLog"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCreditStateLog"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCreditService_ReadCreditStateLog_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCreditService_ReadCreditStateLog_cloudAccount["personId"] if {
        email == CloudCreditsCreditService_ReadCreditStateLog_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCreditService_ReadCreditStateLog_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCreditStateLog"]
        not CloudCreditsCreditService_ReadCreditStateLog_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCreditStateLog"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCreditStateLog"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCreditService", "ReadCreditStateLog"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudCreditsCouponService", "Redeem"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudCreditsCouponService", "Redeem"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudCreditsCouponService", "Redeem"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudCreditsCouponService_Redeem_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudCreditsCouponService_Redeem_cloudAccount["personId"] if {
        email == CloudCreditsCouponService_Redeem_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudCreditsCouponService_Redeem_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudCreditsCouponService", "Redeem"]
        not CloudCreditsCouponService_Redeem_cloudAccount["restricted"]
        email == CloudCreditsCouponService_Redeem_cloudAccount["name"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudCreditsCouponService", "Redeem"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudCreditsCouponService", "Redeem"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudCreditsCouponService", "Redeem"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorService", "QueryResourcesMetrics"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorService", "QueryResourcesMetrics"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorService", "QueryResourcesMetrics"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorService_QueryResourcesMetrics_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorService_QueryResourcesMetrics_cloudAccount["personId"] if {
        email == CloudMonitorService_QueryResourcesMetrics_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorService_QueryResourcesMetrics_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorService", "QueryResourcesMetrics"]
        not CloudMonitorService_QueryResourcesMetrics_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorService", "QueryResourcesMetrics"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorService", "QueryResourcesMetrics"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorService", "QueryResourcesMetrics"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorService", "EnableMonitor"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorService", "EnableMonitor"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorService", "EnableMonitor"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorService_EnableMonitor_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorService_EnableMonitor_cloudAccount["personId"] if {
        email == CloudMonitorService_EnableMonitor_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorService_EnableMonitor_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorService", "EnableMonitor"]
        not CloudMonitorService_EnableMonitor_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorService", "EnableMonitor"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorService", "EnableMonitor"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorService", "EnableMonitor"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorService", "DisableMonitor"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorService", "DisableMonitor"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorService", "DisableMonitor"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorService_DisableMonitor_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorService_DisableMonitor_cloudAccount["personId"] if {
        email == CloudMonitorService_DisableMonitor_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorService_DisableMonitor_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorService", "DisableMonitor"]
        not CloudMonitorService_DisableMonitor_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorService", "DisableMonitor"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorService", "DisableMonitor"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorService", "DisableMonitor"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchAllLogs"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchAllLogs"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchAllLogs"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorLogsService_SearchAllLogs_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorLogsService_SearchAllLogs_cloudAccount["personId"] if {
        email == CloudMonitorLogsService_SearchAllLogs_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorLogsService_SearchAllLogs_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchAllLogs"]
        not CloudMonitorLogsService_SearchAllLogs_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchAllLogs"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchAllLogs"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchAllLogs"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByTerm"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByTerm"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByTerm"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorLogsService_SearchLogsByTerm_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorLogsService_SearchLogsByTerm_cloudAccount["personId"] if {
        email == CloudMonitorLogsService_SearchLogsByTerm_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorLogsService_SearchLogsByTerm_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByTerm"]
        not CloudMonitorLogsService_SearchLogsByTerm_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByTerm"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByTerm"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByTerm"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchPanelData"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchPanelData"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchPanelData"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorLogsService_SearchPanelData_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorLogsService_SearchPanelData_cloudAccount["personId"] if {
        email == CloudMonitorLogsService_SearchPanelData_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorLogsService_SearchPanelData_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchPanelData"]
        not CloudMonitorLogsService_SearchPanelData_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchPanelData"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchPanelData"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchPanelData"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByFilter"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByFilter"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByFilter"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorLogsService_SearchLogsByFilter_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorLogsService_SearchLogsByFilter_cloudAccount["personId"] if {
        email == CloudMonitorLogsService_SearchLogsByFilter_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorLogsService_SearchLogsByFilter_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByFilter"]
        not CloudMonitorLogsService_SearchLogsByFilter_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByFilter"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByFilter"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByFilter"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByPhrase"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByPhrase"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByPhrase"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorLogsService_SearchLogsByPhrase_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorLogsService_SearchLogsByPhrase_cloudAccount["personId"] if {
        email == CloudMonitorLogsService_SearchLogsByPhrase_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorLogsService_SearchLogsByPhrase_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByPhrase"]
        not CloudMonitorLogsService_SearchLogsByPhrase_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByPhrase"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByPhrase"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "SearchLogsByPhrase"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "UserRegistration"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.CloudMonitorLogsService", "UserRegistration"]
    }

    method_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "UserRegistration"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    CloudMonitorLogsService_UserRegistration_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := CloudMonitorLogsService_UserRegistration_cloudAccount["personId"] if {
        email == CloudMonitorLogsService_UserRegistration_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, CloudMonitorLogsService_UserRegistration_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "UserRegistration"]
        not CloudMonitorLogsService_UserRegistration_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "UserRegistration"]
    }


    product_access_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "UserRegistration"]
    }

    gts_ok {
        input.parsed_path == ["proto.CloudMonitorLogsService", "UserRegistration"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SshPublicKeyService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SshPublicKeyService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SshPublicKeyService_Create_cloudAccount["personId"] if {
        email == SshPublicKeyService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SshPublicKeyService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Create"]
        not SshPublicKeyService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Create"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Create"]
    }

    gts_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SshPublicKeyService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SshPublicKeyService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SshPublicKeyService_Get_cloudAccount["personId"] if {
        email == SshPublicKeyService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SshPublicKeyService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Get"]
        not SshPublicKeyService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SshPublicKeyService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SshPublicKeyService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SshPublicKeyService_Search_cloudAccount["personId"] if {
        email == SshPublicKeyService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SshPublicKeyService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Search"]
        not SshPublicKeyService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Delete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SshPublicKeyService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Delete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SshPublicKeyService_Delete_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SshPublicKeyService_Delete_cloudAccount["personId"] if {
        email == SshPublicKeyService_Delete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SshPublicKeyService_Delete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Delete"]
        not SshPublicKeyService_Delete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.SshPublicKeyService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceService_Create_cloudAccount["personId"] if {
        email == InstanceService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceService", "Create"]
        not InstanceService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceService", "Create"]
        prod["name"] != ""
        InstanceServiceCreate_product_ok
    }


    InstanceServiceCreate_product_access_ok {
        prod["access"] == "open"
    }

    InstanceServiceCreate_product_access_ok {
        checkProductAccess := productcatalog.checkProductAccess(input.parsed_body.metadata.productId, InstanceService_Create_cloudAccount["id"])
        checkProductAccess == true
    }

    product_access_ok {
        input.parsed_path == ["proto.InstanceService", "Create"]
        InstanceServiceCreate_product_access_ok
    }
    prod := pp {
        input.parsed_path == ["proto.InstanceService", "Create"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceType, InstanceService_Create_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.InstanceService", "Create"]
    }
    InstanceServiceCreate_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    InstanceServiceCreate_product_ok {
        InstanceService_Create_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceService", "Create"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.InstanceService", "Create"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceType, InstanceService_Create_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.InstanceService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceService_Get_cloudAccount["personId"] if {
        email == InstanceService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceService", "Get"]
        not InstanceService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceService_Search_cloudAccount["personId"] if {
        email == InstanceService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceService", "Search"]
        not InstanceService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceService", "Update"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceService", "Update"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceService", "Update"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceService_Update_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceService_Update_cloudAccount["personId"] if {
        email == InstanceService_Update_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceService_Update_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceService", "Update"]
        not InstanceService_Update_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceService", "Update"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceService", "Update"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceService", "Update"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceService", "Delete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceService", "Delete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceService_Delete_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceService_Delete_cloudAccount["personId"] if {
        email == InstanceService_Delete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceService_Delete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceService", "Delete"]
        not InstanceService_Delete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceGroupService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceGroupService_Create_cloudAccount["personId"] if {
        email == InstanceGroupService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceGroupService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
        not InstanceGroupService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
        prod["name"] != ""
        InstanceGroupServiceCreate_product_ok
    }


    InstanceGroupServiceCreate_product_access_ok {
        prod["access"] == "open"
    }

    InstanceGroupServiceCreate_product_access_ok {
        checkProductAccess := productcatalog.checkProductAccess(input.parsed_body.metadata.productId, InstanceGroupService_Create_cloudAccount["id"])
        checkProductAccess == true
    }

    product_access_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
        InstanceGroupServiceCreate_product_access_ok
    }
    prod := pp {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceSpec.instanceType, InstanceGroupService_Create_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
    }
    InstanceGroupServiceCreate_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    InstanceGroupServiceCreate_product_ok {
        InstanceGroupService_Create_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceSpec.instanceType, InstanceGroupService_Create_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.InstanceGroupService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Update"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceGroupService", "Update"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Update"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceGroupService_Update_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceGroupService_Update_cloudAccount["personId"] if {
        email == InstanceGroupService_Update_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceGroupService_Update_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Update"]
        not InstanceGroupService_Update_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Update"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Update"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Update"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceGroupService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceGroupService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceGroupService_Search_cloudAccount["personId"] if {
        email == InstanceGroupService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceGroupService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Search"]
        not InstanceGroupService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Delete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceGroupService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Delete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceGroupService_Delete_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceGroupService_Delete_cloudAccount["personId"] if {
        email == InstanceGroupService_Delete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceGroupService_Delete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Delete"]
        not InstanceGroupService_Delete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceGroupService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceGroupService", "DeleteMember"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceGroupService", "DeleteMember"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceGroupService", "DeleteMember"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceGroupService_DeleteMember_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceGroupService_DeleteMember_cloudAccount["personId"] if {
        email == InstanceGroupService_DeleteMember_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceGroupService_DeleteMember_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceGroupService", "DeleteMember"]
        not InstanceGroupService_DeleteMember_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceGroupService", "DeleteMember"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceGroupService", "DeleteMember"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceGroupService", "DeleteMember"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceGroupService", "ScaleUp"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceGroupService", "ScaleUp"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceGroupService", "ScaleUp"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    InstanceGroupService_ScaleUp_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := InstanceGroupService_ScaleUp_cloudAccount["personId"] if {
        email == InstanceGroupService_ScaleUp_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, InstanceGroupService_ScaleUp_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.InstanceGroupService", "ScaleUp"]
        not InstanceGroupService_ScaleUp_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceGroupService", "ScaleUp"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceGroupService", "ScaleUp"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceGroupService", "ScaleUp"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceTypeService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Get"]
    }

    user_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Get"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceTypeService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Search"]
    }

    user_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Search"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceTypeService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.InstanceTypeService", "SearchStream"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.InstanceTypeService", "SearchStream"]
    }

    method_ok {
        input.parsed_path == ["proto.InstanceTypeService", "SearchStream"]
    }

    user_ok {
        input.parsed_path == ["proto.InstanceTypeService", "SearchStream"]
    }

    product_ok {
        input.parsed_path == ["proto.InstanceTypeService", "SearchStream"]
    }


    product_access_ok {
        input.parsed_path == ["proto.InstanceTypeService", "SearchStream"]
    }

    gts_ok {
        input.parsed_path == ["proto.InstanceTypeService", "SearchStream"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.MachineImageService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.MachineImageService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.MachineImageService", "Get"]
    }

    user_ok {
        input.parsed_path == ["proto.MachineImageService", "Get"]
    }

    product_ok {
        input.parsed_path == ["proto.MachineImageService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.MachineImageService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.MachineImageService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.MachineImageService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.MachineImageService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.MachineImageService", "Search"]
    }

    user_ok {
        input.parsed_path == ["proto.MachineImageService", "Search"]
    }

    product_ok {
        input.parsed_path == ["proto.MachineImageService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.MachineImageService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.MachineImageService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.MachineImageService", "SearchStream"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.MachineImageService", "SearchStream"]
    }

    method_ok {
        input.parsed_path == ["proto.MachineImageService", "SearchStream"]
    }

    user_ok {
        input.parsed_path == ["proto.MachineImageService", "SearchStream"]
    }

    product_ok {
        input.parsed_path == ["proto.MachineImageService", "SearchStream"]
    }


    product_access_ok {
        input.parsed_path == ["proto.MachineImageService", "SearchStream"]
    }

    gts_ok {
        input.parsed_path == ["proto.MachineImageService", "SearchStream"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VNetService", "Put"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VNetService", "Put"]
    }

    method_ok {
        input.parsed_path == ["proto.VNetService", "Put"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VNetService_Put_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VNetService_Put_cloudAccount["personId"] if {
        email == VNetService_Put_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VNetService_Put_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VNetService", "Put"]
        not VNetService_Put_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VNetService", "Put"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VNetService", "Put"]
    }

    gts_ok {
        input.parsed_path == ["proto.VNetService", "Put"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VNetService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VNetService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.VNetService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VNetService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VNetService_Get_cloudAccount["personId"] if {
        email == VNetService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VNetService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VNetService", "Get"]
        not VNetService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VNetService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VNetService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.VNetService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VNetService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VNetService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.VNetService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VNetService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VNetService_Search_cloudAccount["personId"] if {
        email == VNetService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VNetService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VNetService", "Search"]
        not VNetService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VNetService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VNetService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.VNetService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VNetService", "Delete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VNetService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.VNetService", "Delete"]
    }

    user_ok {
        input.parsed_path == ["proto.VNetService", "Delete"]
    }

    product_ok {
        input.parsed_path == ["proto.VNetService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VNetService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.VNetService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.LoadBalancerService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    LoadBalancerService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := LoadBalancerService_Create_cloudAccount["personId"] if {
        email == LoadBalancerService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, LoadBalancerService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Create"]
        not LoadBalancerService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Create"]
    }


    product_access_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Create"]
    }

    gts_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.LoadBalancerService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    LoadBalancerService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := LoadBalancerService_Get_cloudAccount["personId"] if {
        email == LoadBalancerService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, LoadBalancerService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Get"]
        not LoadBalancerService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.LoadBalancerService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    LoadBalancerService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := LoadBalancerService_Search_cloudAccount["personId"] if {
        email == LoadBalancerService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, LoadBalancerService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Search"]
        not LoadBalancerService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Update"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.LoadBalancerService", "Update"]
    }

    method_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Update"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    LoadBalancerService_Update_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := LoadBalancerService_Update_cloudAccount["personId"] if {
        email == LoadBalancerService_Update_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, LoadBalancerService_Update_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Update"]
        not LoadBalancerService_Update_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Update"]
    }


    product_access_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Update"]
    }

    gts_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Update"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Delete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.LoadBalancerService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Delete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    LoadBalancerService_Delete_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := LoadBalancerService_Delete_cloudAccount["personId"] if {
        email == LoadBalancerService_Delete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, LoadBalancerService_Delete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Delete"]
        not LoadBalancerService_Delete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.LoadBalancerService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.ConsoleInvoiceService", "ReadUnbilled"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.ConsoleInvoiceService", "ReadUnbilled"]
    }

    method_ok {
        input.parsed_path == ["proto.ConsoleInvoiceService", "ReadUnbilled"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    ConsoleInvoiceService_ReadUnbilled_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := ConsoleInvoiceService_ReadUnbilled_cloudAccount["personId"] if {
        email == ConsoleInvoiceService_ReadUnbilled_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ConsoleInvoiceService_ReadUnbilled_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ConsoleInvoiceService", "ReadUnbilled"]
        not ConsoleInvoiceService_ReadUnbilled_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ConsoleInvoiceService", "ReadUnbilled"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ConsoleInvoiceService", "ReadUnbilled"]
    }

    gts_ok {
        input.parsed_path == ["proto.ConsoleInvoiceService", "ReadUnbilled"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowSizeService_DpaiAirflowSizeCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowSizeService_DpaiAirflowSizeCreate_cloudAccount["personId"] if {
        email == DpaiAirflowSizeService_DpaiAirflowSizeCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowSizeService_DpaiAirflowSizeCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeCreate"]
        not DpaiAirflowSizeService_DpaiAirflowSizeCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowSizeService_DpaiAirflowSizeList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowSizeService_DpaiAirflowSizeList_cloudAccount["personId"] if {
        email == DpaiAirflowSizeService_DpaiAirflowSizeList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowSizeService_DpaiAirflowSizeList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeList"]
        not DpaiAirflowSizeService_DpaiAirflowSizeList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetById"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetById"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowSizeService_DpaiAirflowSizeGetById_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowSizeService_DpaiAirflowSizeGetById_cloudAccount["personId"] if {
        email == DpaiAirflowSizeService_DpaiAirflowSizeGetById_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowSizeService_DpaiAirflowSizeGetById_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetById"]
        not DpaiAirflowSizeService_DpaiAirflowSizeGetById_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetById"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetByName"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetByName"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetByName"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowSizeService_DpaiAirflowSizeGetByName_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowSizeService_DpaiAirflowSizeGetByName_cloudAccount["personId"] if {
        email == DpaiAirflowSizeService_DpaiAirflowSizeGetByName_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowSizeService_DpaiAirflowSizeGetByName_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetByName"]
        not DpaiAirflowSizeService_DpaiAirflowSizeGetByName_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetByName"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetByName"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeGetByName"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeUpdate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeUpdate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeUpdate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowSizeService_DpaiAirflowSizeUpdate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowSizeService_DpaiAirflowSizeUpdate_cloudAccount["personId"] if {
        email == DpaiAirflowSizeService_DpaiAirflowSizeUpdate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowSizeService_DpaiAirflowSizeUpdate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeUpdate"]
        not DpaiAirflowSizeService_DpaiAirflowSizeUpdate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeUpdate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeUpdate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeUpdate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowSizeService_DpaiAirflowSizeDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowSizeService_DpaiAirflowSizeDelete_cloudAccount["personId"] if {
        email == DpaiAirflowSizeService_DpaiAirflowSizeDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowSizeService_DpaiAirflowSizeDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeDelete"]
        not DpaiAirflowSizeService_DpaiAirflowSizeDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowSizeService", "DpaiAirflowSizeDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowVersionService_DpaiAirflowVersionCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowVersionService_DpaiAirflowVersionCreate_cloudAccount["personId"] if {
        email == DpaiAirflowVersionService_DpaiAirflowVersionCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowVersionService_DpaiAirflowVersionCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionCreate"]
        not DpaiAirflowVersionService_DpaiAirflowVersionCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowVersionService_DpaiAirflowVersionList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowVersionService_DpaiAirflowVersionList_cloudAccount["personId"] if {
        email == DpaiAirflowVersionService_DpaiAirflowVersionList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowVersionService_DpaiAirflowVersionList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionList"]
        not DpaiAirflowVersionService_DpaiAirflowVersionList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetById"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetById"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowVersionService_DpaiAirflowVersionGetById_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowVersionService_DpaiAirflowVersionGetById_cloudAccount["personId"] if {
        email == DpaiAirflowVersionService_DpaiAirflowVersionGetById_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowVersionService_DpaiAirflowVersionGetById_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetById"]
        not DpaiAirflowVersionService_DpaiAirflowVersionGetById_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetById"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetByName"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetByName"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetByName"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowVersionService_DpaiAirflowVersionGetByName_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowVersionService_DpaiAirflowVersionGetByName_cloudAccount["personId"] if {
        email == DpaiAirflowVersionService_DpaiAirflowVersionGetByName_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowVersionService_DpaiAirflowVersionGetByName_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetByName"]
        not DpaiAirflowVersionService_DpaiAirflowVersionGetByName_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetByName"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetByName"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionGetByName"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionUpdate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionUpdate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionUpdate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowVersionService_DpaiAirflowVersionUpdate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowVersionService_DpaiAirflowVersionUpdate_cloudAccount["personId"] if {
        email == DpaiAirflowVersionService_DpaiAirflowVersionUpdate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowVersionService_DpaiAirflowVersionUpdate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionUpdate"]
        not DpaiAirflowVersionService_DpaiAirflowVersionUpdate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionUpdate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionUpdate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionUpdate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowVersionService_DpaiAirflowVersionDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowVersionService_DpaiAirflowVersionDelete_cloudAccount["personId"] if {
        email == DpaiAirflowVersionService_DpaiAirflowVersionDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowVersionService_DpaiAirflowVersionDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionDelete"]
        not DpaiAirflowVersionService_DpaiAirflowVersionDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowVersionService", "DpaiAirflowVersionDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowConfService_DpaiAirflowConfCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowConfService_DpaiAirflowConfCreate_cloudAccount["personId"] if {
        email == DpaiAirflowConfService_DpaiAirflowConfCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowConfService_DpaiAirflowConfCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfCreate"]
        not DpaiAirflowConfService_DpaiAirflowConfCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowConfService_DpaiAirflowConfList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowConfService_DpaiAirflowConfList_cloudAccount["personId"] if {
        email == DpaiAirflowConfService_DpaiAirflowConfList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowConfService_DpaiAirflowConfList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfList"]
        not DpaiAirflowConfService_DpaiAirflowConfList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfGetById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfGetById"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfGetById"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowConfService_DpaiAirflowConfGetById_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowConfService_DpaiAirflowConfGetById_cloudAccount["personId"] if {
        email == DpaiAirflowConfService_DpaiAirflowConfGetById_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowConfService_DpaiAirflowConfGetById_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfGetById"]
        not DpaiAirflowConfService_DpaiAirflowConfGetById_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfGetById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfGetById"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfGetById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowConfService_DpaiAirflowConfDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowConfService_DpaiAirflowConfDelete_cloudAccount["personId"] if {
        email == DpaiAirflowConfService_DpaiAirflowConfDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowConfService_DpaiAirflowConfDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDelete"]
        not DpaiAirflowConfService_DpaiAirflowConfDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDeleteByAirflowId"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDeleteByAirflowId"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDeleteByAirflowId"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowConfService_DpaiAirflowConfDeleteByAirflowId_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowConfService_DpaiAirflowConfDeleteByAirflowId_cloudAccount["personId"] if {
        email == DpaiAirflowConfService_DpaiAirflowConfDeleteByAirflowId_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowConfService_DpaiAirflowConfDeleteByAirflowId_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDeleteByAirflowId"]
        not DpaiAirflowConfService_DpaiAirflowConfDeleteByAirflowId_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDeleteByAirflowId"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDeleteByAirflowId"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowConfService", "DpaiAirflowConfDeleteByAirflowId"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowCreate_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowCreate"]
        not DpaiAirflowService_DpaiAirflowCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowList_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowList"]
        not DpaiAirflowService_DpaiAirflowList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetById"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetById"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowGetById_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowGetById_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowGetById_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowGetById_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetById"]
        not DpaiAirflowService_DpaiAirflowGetById_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetById"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetByName"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetByName"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetByName"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowGetByName_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowGetByName_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowGetByName_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowGetByName_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetByName"]
        not DpaiAirflowService_DpaiAirflowGetByName_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetByName"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetByName"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowGetByName"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpdate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpdate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpdate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowUpdate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowUpdate_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowUpdate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowUpdate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpdate"]
        not DpaiAirflowService_DpaiAirflowUpdate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpdate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpdate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpdate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowDelete_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowDelete"]
        not DpaiAirflowService_DpaiAirflowDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowListUpgrade"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowListUpgrade"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowListUpgrade"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowListUpgrade_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowListUpgrade_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowListUpgrade_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowListUpgrade_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowListUpgrade"]
        not DpaiAirflowService_DpaiAirflowListUpgrade_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowListUpgrade"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowListUpgrade"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowListUpgrade"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpgrade"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpgrade"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpgrade"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowUpgrade_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowUpgrade_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowUpgrade_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowUpgrade_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpgrade"]
        not DpaiAirflowService_DpaiAirflowUpgrade_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpgrade"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpgrade"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowUpgrade"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowRestart"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowRestart"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowRestart"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowRestart_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowRestart_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowRestart_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowRestart_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowRestart"]
        not DpaiAirflowService_DpaiAirflowRestart_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowRestart"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowRestart"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowRestart"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowResize"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowResize"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowResize"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiAirflowService_DpaiAirflowResize_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiAirflowService_DpaiAirflowResize_cloudAccount["personId"] if {
        email == DpaiAirflowService_DpaiAirflowResize_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiAirflowService_DpaiAirflowResize_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowResize"]
        not DpaiAirflowService_DpaiAirflowResize_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowResize"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowResize"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiAirflowService", "DpaiAirflowResize"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentService_DpaiDeploymentCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentService_DpaiDeploymentCreate_cloudAccount["personId"] if {
        email == DpaiDeploymentService_DpaiDeploymentCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentService_DpaiDeploymentCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentCreate"]
        not DpaiDeploymentService_DpaiDeploymentCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentService_DpaiDeploymentList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentService_DpaiDeploymentList_cloudAccount["personId"] if {
        email == DpaiDeploymentService_DpaiDeploymentList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentService_DpaiDeploymentList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentList"]
        not DpaiDeploymentService_DpaiDeploymentList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentGet"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentGet"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentGet"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentService_DpaiDeploymentGet_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentService_DpaiDeploymentGet_cloudAccount["personId"] if {
        email == DpaiDeploymentService_DpaiDeploymentGet_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentService_DpaiDeploymentGet_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentGet"]
        not DpaiDeploymentService_DpaiDeploymentGet_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentGet"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentGet"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentGet"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentService_DpaiDeploymentDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentService_DpaiDeploymentDelete_cloudAccount["personId"] if {
        email == DpaiDeploymentService_DpaiDeploymentDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentService_DpaiDeploymentDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentDelete"]
        not DpaiDeploymentService_DpaiDeploymentDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentService", "DpaiDeploymentDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentTaskService_DpaiDeploymentTaskCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentTaskService_DpaiDeploymentTaskCreate_cloudAccount["personId"] if {
        email == DpaiDeploymentTaskService_DpaiDeploymentTaskCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentTaskService_DpaiDeploymentTaskCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskCreate"]
        not DpaiDeploymentTaskService_DpaiDeploymentTaskCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentTaskService_DpaiDeploymentTaskList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentTaskService_DpaiDeploymentTaskList_cloudAccount["personId"] if {
        email == DpaiDeploymentTaskService_DpaiDeploymentTaskList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentTaskService_DpaiDeploymentTaskList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskList"]
        not DpaiDeploymentTaskService_DpaiDeploymentTaskList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskGet"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskGet"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskGet"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentTaskService_DpaiDeploymentTaskGet_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentTaskService_DpaiDeploymentTaskGet_cloudAccount["personId"] if {
        email == DpaiDeploymentTaskService_DpaiDeploymentTaskGet_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentTaskService_DpaiDeploymentTaskGet_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskGet"]
        not DpaiDeploymentTaskService_DpaiDeploymentTaskGet_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskGet"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskGet"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskGet"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskUpdate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskUpdate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskUpdate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentTaskService_DpaiDeploymentTaskUpdate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentTaskService_DpaiDeploymentTaskUpdate_cloudAccount["personId"] if {
        email == DpaiDeploymentTaskService_DpaiDeploymentTaskUpdate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentTaskService_DpaiDeploymentTaskUpdate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskUpdate"]
        not DpaiDeploymentTaskService_DpaiDeploymentTaskUpdate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskUpdate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskUpdate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskUpdate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiDeploymentTaskService_DpaiDeploymentTaskDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiDeploymentTaskService_DpaiDeploymentTaskDelete_cloudAccount["personId"] if {
        email == DpaiDeploymentTaskService_DpaiDeploymentTaskDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiDeploymentTaskService_DpaiDeploymentTaskDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskDelete"]
        not DpaiDeploymentTaskService_DpaiDeploymentTaskDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiDeploymentTaskService", "DpaiDeploymentTaskDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresSizeService_DpaiPostgresSizeList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresSizeService_DpaiPostgresSizeList_cloudAccount["personId"] if {
        email == DpaiPostgresSizeService_DpaiPostgresSizeList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresSizeService_DpaiPostgresSizeList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeList"]
        not DpaiPostgresSizeService_DpaiPostgresSizeList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetById"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetById"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresSizeService_DpaiPostgresSizeGetById_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresSizeService_DpaiPostgresSizeGetById_cloudAccount["personId"] if {
        email == DpaiPostgresSizeService_DpaiPostgresSizeGetById_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresSizeService_DpaiPostgresSizeGetById_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetById"]
        not DpaiPostgresSizeService_DpaiPostgresSizeGetById_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetById"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetByName"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetByName"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetByName"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresSizeService_DpaiPostgresSizeGetByName_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresSizeService_DpaiPostgresSizeGetByName_cloudAccount["personId"] if {
        email == DpaiPostgresSizeService_DpaiPostgresSizeGetByName_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresSizeService_DpaiPostgresSizeGetByName_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetByName"]
        not DpaiPostgresSizeService_DpaiPostgresSizeGetByName_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetByName"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetByName"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresSizeService", "DpaiPostgresSizeGetByName"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresVersionService_DpaiPostgresVersionList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresVersionService_DpaiPostgresVersionList_cloudAccount["personId"] if {
        email == DpaiPostgresVersionService_DpaiPostgresVersionList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresVersionService_DpaiPostgresVersionList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionList"]
        not DpaiPostgresVersionService_DpaiPostgresVersionList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetById"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetById"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresVersionService_DpaiPostgresVersionGetById_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresVersionService_DpaiPostgresVersionGetById_cloudAccount["personId"] if {
        email == DpaiPostgresVersionService_DpaiPostgresVersionGetById_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresVersionService_DpaiPostgresVersionGetById_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetById"]
        not DpaiPostgresVersionService_DpaiPostgresVersionGetById_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetById"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetByName"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetByName"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetByName"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresVersionService_DpaiPostgresVersionGetByName_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresVersionService_DpaiPostgresVersionGetByName_cloudAccount["personId"] if {
        email == DpaiPostgresVersionService_DpaiPostgresVersionGetByName_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresVersionService_DpaiPostgresVersionGetByName_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetByName"]
        not DpaiPostgresVersionService_DpaiPostgresVersionGetByName_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetByName"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetByName"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresVersionService", "DpaiPostgresVersionGetByName"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresCreate_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresCreate"]
        not DpaiPostgresService_DpaiPostgresCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresList_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresList"]
        not DpaiPostgresService_DpaiPostgresList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetById"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetById"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresGetById_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresGetById_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresGetById_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresGetById_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetById"]
        not DpaiPostgresService_DpaiPostgresGetById_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetById"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetByName"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetByName"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetByName"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresGetByName_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresGetByName_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresGetByName_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresGetByName_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetByName"]
        not DpaiPostgresService_DpaiPostgresGetByName_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetByName"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetByName"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresGetByName"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpdate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpdate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpdate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresUpdate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresUpdate_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresUpdate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresUpdate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpdate"]
        not DpaiPostgresService_DpaiPostgresUpdate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpdate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpdate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpdate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresDelete_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresDelete"]
        not DpaiPostgresService_DpaiPostgresDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresListUpgrade"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresListUpgrade"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresListUpgrade"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresListUpgrade_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresListUpgrade_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresListUpgrade_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresListUpgrade_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresListUpgrade"]
        not DpaiPostgresService_DpaiPostgresListUpgrade_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresListUpgrade"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresListUpgrade"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresListUpgrade"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpgrade"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpgrade"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpgrade"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresUpgrade_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresUpgrade_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresUpgrade_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresUpgrade_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpgrade"]
        not DpaiPostgresService_DpaiPostgresUpgrade_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpgrade"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpgrade"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresUpgrade"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresRestart"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresRestart"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresRestart"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresRestart_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresRestart_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresRestart_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresRestart_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresRestart"]
        not DpaiPostgresService_DpaiPostgresRestart_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresRestart"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresRestart"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresRestart"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresResize"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresResize"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresResize"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiPostgresService_DpaiPostgresResize_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiPostgresService_DpaiPostgresResize_cloudAccount["personId"] if {
        email == DpaiPostgresService_DpaiPostgresResize_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiPostgresService_DpaiPostgresResize_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresResize"]
        not DpaiPostgresService_DpaiPostgresResize_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresResize"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresResize"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiPostgresService", "DpaiPostgresResize"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceCreate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceCreate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceCreate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiWorkspaceService_DpaiWorkspaceCreate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiWorkspaceService_DpaiWorkspaceCreate_cloudAccount["personId"] if {
        email == DpaiWorkspaceService_DpaiWorkspaceCreate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiWorkspaceService_DpaiWorkspaceCreate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceCreate"]
        not DpaiWorkspaceService_DpaiWorkspaceCreate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceCreate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceCreate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceCreate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceList"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceList"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceList"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiWorkspaceService_DpaiWorkspaceList_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiWorkspaceService_DpaiWorkspaceList_cloudAccount["personId"] if {
        email == DpaiWorkspaceService_DpaiWorkspaceList_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiWorkspaceService_DpaiWorkspaceList_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceList"]
        not DpaiWorkspaceService_DpaiWorkspaceList_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceList"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceList"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceList"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceGet"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceGet"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceGet"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiWorkspaceService_DpaiWorkspaceGet_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiWorkspaceService_DpaiWorkspaceGet_cloudAccount["personId"] if {
        email == DpaiWorkspaceService_DpaiWorkspaceGet_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiWorkspaceService_DpaiWorkspaceGet_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceGet"]
        not DpaiWorkspaceService_DpaiWorkspaceGet_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceGet"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceGet"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceGet"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceUpdate"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceUpdate"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceUpdate"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiWorkspaceService_DpaiWorkspaceUpdate_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiWorkspaceService_DpaiWorkspaceUpdate_cloudAccount["personId"] if {
        email == DpaiWorkspaceService_DpaiWorkspaceUpdate_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiWorkspaceService_DpaiWorkspaceUpdate_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceUpdate"]
        not DpaiWorkspaceService_DpaiWorkspaceUpdate_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceUpdate"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceUpdate"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceUpdate"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceDelete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceDelete"]
    }

    method_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceDelete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    DpaiWorkspaceService_DpaiWorkspaceDelete_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := DpaiWorkspaceService_DpaiWorkspaceDelete_cloudAccount["personId"] if {
        email == DpaiWorkspaceService_DpaiWorkspaceDelete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, DpaiWorkspaceService_DpaiWorkspaceDelete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceDelete"]
        not DpaiWorkspaceService_DpaiWorkspaceDelete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceDelete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceDelete"]
    }

    gts_ok {
        input.parsed_path == ["proto.DpaiWorkspaceService", "DpaiWorkspaceDelete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_CreateNewCluster_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_CreateNewCluster_cloudAccount["personId"] if {
        email == Iks_CreateNewCluster_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_CreateNewCluster_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
        not Iks_CreateNewCluster_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
        prod["name"] != ""
        IksCreateNewCluster_product_ok
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
    }
    prod := pp {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
        pp := productcatalog.getProductByName(input.parsed_body.instanceType, Iks_CreateNewCluster_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
    }
    IksCreateNewCluster_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    IksCreateNewCluster_product_ok {
        Iks_CreateNewCluster_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
        pp := productcatalog.getProductByName(input.parsed_body.instanceType, Iks_CreateNewCluster_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.Iks", "CreateNewCluster"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetClusters"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetClusters"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetClusters"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetClusters_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetClusters_cloudAccount["personId"] if {
        email == Iks_GetClusters_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetClusters_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetClusters"]
        not Iks_GetClusters_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetClusters"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetClusters"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetClusters"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetCluster"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetCluster"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetCluster"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetCluster_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetCluster_cloudAccount["personId"] if {
        email == Iks_GetCluster_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetCluster_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetCluster"]
        not Iks_GetCluster_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetCluster"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetCluster"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetCluster"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "PutCluster"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "PutCluster"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "PutCluster"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_PutCluster_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_PutCluster_cloudAccount["personId"] if {
        email == Iks_PutCluster_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_PutCluster_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "PutCluster"]
        not Iks_PutCluster_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "PutCluster"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "PutCluster"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "PutCluster"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "UpgradeCluster"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "UpgradeCluster"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "UpgradeCluster"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_UpgradeCluster_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_UpgradeCluster_cloudAccount["personId"] if {
        email == Iks_UpgradeCluster_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_UpgradeCluster_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "UpgradeCluster"]
        not Iks_UpgradeCluster_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "UpgradeCluster"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "UpgradeCluster"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "UpgradeCluster"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "EnableClusterStorage"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "EnableClusterStorage"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "EnableClusterStorage"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_EnableClusterStorage_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_EnableClusterStorage_cloudAccount["personId"] if {
        email == Iks_EnableClusterStorage_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_EnableClusterStorage_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "EnableClusterStorage"]
        not Iks_EnableClusterStorage_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "EnableClusterStorage"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "EnableClusterStorage"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "EnableClusterStorage"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "UpdateClusterStorage"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "UpdateClusterStorage"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "UpdateClusterStorage"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_UpdateClusterStorage_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_UpdateClusterStorage_cloudAccount["personId"] if {
        email == Iks_UpdateClusterStorage_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_UpdateClusterStorage_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "UpdateClusterStorage"]
        not Iks_UpdateClusterStorage_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "UpdateClusterStorage"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "UpdateClusterStorage"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "UpdateClusterStorage"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "DeleteCluster"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "DeleteCluster"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "DeleteCluster"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_DeleteCluster_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_DeleteCluster_cloudAccount["personId"] if {
        email == Iks_DeleteCluster_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_DeleteCluster_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "DeleteCluster"]
        not Iks_DeleteCluster_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "DeleteCluster"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "DeleteCluster"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "DeleteCluster"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetClusterStatus"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetClusterStatus"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetClusterStatus"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetClusterStatus_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetClusterStatus_cloudAccount["personId"] if {
        email == Iks_GetClusterStatus_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetClusterStatus_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetClusterStatus"]
        not Iks_GetClusterStatus_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetClusterStatus"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetClusterStatus"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetClusterStatus"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_CreateNodeGroup_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_CreateNodeGroup_cloudAccount["personId"] if {
        email == Iks_CreateNodeGroup_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_CreateNodeGroup_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
        not Iks_CreateNodeGroup_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
        prod["name"] != ""
        IksCreateNodeGroup_product_ok
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
    }
    prod := pp {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
        pp := productcatalog.getProductByName(input.parsed_body.instanceType, Iks_CreateNodeGroup_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
    }
    IksCreateNodeGroup_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    IksCreateNodeGroup_product_ok {
        Iks_CreateNodeGroup_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
        pp := productcatalog.getProductByName(input.parsed_body.instanceType, Iks_CreateNodeGroup_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.Iks", "CreateNodeGroup"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroups"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetNodeGroups"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroups"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetNodeGroups_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetNodeGroups_cloudAccount["personId"] if {
        email == Iks_GetNodeGroups_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetNodeGroups_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroups"]
        not Iks_GetNodeGroups_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroups"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroups"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroups"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroup"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetNodeGroup"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroup"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetNodeGroup_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetNodeGroup_cloudAccount["personId"] if {
        email == Iks_GetNodeGroup_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetNodeGroup_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroup"]
        not Iks_GetNodeGroup_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroup"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroup"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroup"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "PutNodeGroup"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "PutNodeGroup"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "PutNodeGroup"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_PutNodeGroup_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_PutNodeGroup_cloudAccount["personId"] if {
        email == Iks_PutNodeGroup_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_PutNodeGroup_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "PutNodeGroup"]
        not Iks_PutNodeGroup_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "PutNodeGroup"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "PutNodeGroup"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "PutNodeGroup"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "UpgradeNodeGroup"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "UpgradeNodeGroup"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "UpgradeNodeGroup"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_UpgradeNodeGroup_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_UpgradeNodeGroup_cloudAccount["personId"] if {
        email == Iks_UpgradeNodeGroup_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_UpgradeNodeGroup_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "UpgradeNodeGroup"]
        not Iks_UpgradeNodeGroup_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "UpgradeNodeGroup"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "UpgradeNodeGroup"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "UpgradeNodeGroup"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroup"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroup"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroup"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_DeleteNodeGroup_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_DeleteNodeGroup_cloudAccount["personId"] if {
        email == Iks_DeleteNodeGroup_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_DeleteNodeGroup_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroup"]
        not Iks_DeleteNodeGroup_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroup"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroup"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroup"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroupStatus"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetNodeGroupStatus"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroupStatus"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetNodeGroupStatus_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetNodeGroupStatus_cloudAccount["personId"] if {
        email == Iks_GetNodeGroupStatus_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetNodeGroupStatus_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroupStatus"]
        not Iks_GetNodeGroupStatus_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroupStatus"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroupStatus"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetNodeGroupStatus"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroupInstance"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroupInstance"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroupInstance"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_DeleteNodeGroupInstance_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_DeleteNodeGroupInstance_cloudAccount["personId"] if {
        email == Iks_DeleteNodeGroupInstance_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_DeleteNodeGroupInstance_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroupInstance"]
        not Iks_DeleteNodeGroupInstance_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroupInstance"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroupInstance"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "DeleteNodeGroupInstance"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetPublicK8sVersions"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetPublicK8sVersions"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetPublicK8sVersions"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetPublicK8sVersions_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetPublicK8sVersions_cloudAccount["personId"] if {
        email == Iks_GetPublicK8sVersions_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetPublicK8sVersions_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetPublicK8sVersions"]
        not Iks_GetPublicK8sVersions_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetPublicK8sVersions"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetPublicK8sVersions"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetPublicK8sVersions"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetPublicRuntimes"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetPublicRuntimes"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetPublicRuntimes"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetPublicRuntimes_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetPublicRuntimes_cloudAccount["personId"] if {
        email == Iks_GetPublicRuntimes_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetPublicRuntimes_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetPublicRuntimes"]
        not Iks_GetPublicRuntimes_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetPublicRuntimes"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetPublicRuntimes"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetPublicRuntimes"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetPublicInstanceTypes"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetPublicInstanceTypes"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetPublicInstanceTypes"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetPublicInstanceTypes_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetPublicInstanceTypes_cloudAccount["personId"] if {
        email == Iks_GetPublicInstanceTypes_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetPublicInstanceTypes_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetPublicInstanceTypes"]
        not Iks_GetPublicInstanceTypes_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetPublicInstanceTypes"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetPublicInstanceTypes"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetPublicInstanceTypes"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetKubeConfig"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetKubeConfig"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetKubeConfig"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetKubeConfig_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetKubeConfig_cloudAccount["personId"] if {
        email == Iks_GetKubeConfig_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetKubeConfig_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetKubeConfig"]
        not Iks_GetKubeConfig_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetKubeConfig"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetKubeConfig"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetKubeConfig"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "RetrieveKubeConfig"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "RetrieveKubeConfig"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "RetrieveKubeConfig"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_RetrieveKubeConfig_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_RetrieveKubeConfig_cloudAccount["personId"] if {
        email == Iks_RetrieveKubeConfig_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_RetrieveKubeConfig_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "RetrieveKubeConfig"]
        not Iks_RetrieveKubeConfig_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "RetrieveKubeConfig"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "RetrieveKubeConfig"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "RetrieveKubeConfig"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "CreateNewVip"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "CreateNewVip"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "CreateNewVip"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_CreateNewVip_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_CreateNewVip_cloudAccount["personId"] if {
        email == Iks_CreateNewVip_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_CreateNewVip_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "CreateNewVip"]
        not Iks_CreateNewVip_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "CreateNewVip"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "CreateNewVip"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "CreateNewVip"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetVips"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetVips"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetVips"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetVips_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetVips_cloudAccount["personId"] if {
        email == Iks_GetVips_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetVips_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetVips"]
        not Iks_GetVips_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetVips"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetVips"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetVips"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetVip"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetVip"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetVip"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetVip_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetVip_cloudAccount["personId"] if {
        email == Iks_GetVip_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetVip_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetVip"]
        not Iks_GetVip_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetVip"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetVip"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetVip"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "DeleteVip"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "DeleteVip"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "DeleteVip"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_DeleteVip_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_DeleteVip_cloudAccount["personId"] if {
        email == Iks_DeleteVip_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_DeleteVip_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "DeleteVip"]
        not Iks_DeleteVip_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "DeleteVip"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "DeleteVip"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "DeleteVip"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "UpdateFirewallRule"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "UpdateFirewallRule"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "UpdateFirewallRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_UpdateFirewallRule_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_UpdateFirewallRule_cloudAccount["personId"] if {
        email == Iks_UpdateFirewallRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_UpdateFirewallRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "UpdateFirewallRule"]
        not Iks_UpdateFirewallRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "UpdateFirewallRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "UpdateFirewallRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "UpdateFirewallRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "GetFirewallRule"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "GetFirewallRule"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "GetFirewallRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_GetFirewallRule_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_GetFirewallRule_cloudAccount["personId"] if {
        email == Iks_GetFirewallRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_GetFirewallRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "GetFirewallRule"]
        not Iks_GetFirewallRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "GetFirewallRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "GetFirewallRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "GetFirewallRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.Iks", "DeleteFirewallRule"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.Iks", "DeleteFirewallRule"]
    }

    method_ok {
        input.parsed_path == ["proto.Iks", "DeleteFirewallRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    Iks_DeleteFirewallRule_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := Iks_DeleteFirewallRule_cloudAccount["personId"] if {
        email == Iks_DeleteFirewallRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, Iks_DeleteFirewallRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.Iks", "DeleteFirewallRule"]
        not Iks_DeleteFirewallRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.Iks", "DeleteFirewallRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.Iks", "DeleteFirewallRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.Iks", "DeleteFirewallRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
    }

    method_ok {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    IksSuperCompute_SuperComputeCreateCluster_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := IksSuperCompute_SuperComputeCreateCluster_cloudAccount["personId"] if {
        email == IksSuperCompute_SuperComputeCreateCluster_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, IksSuperCompute_SuperComputeCreateCluster_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
        not IksSuperCompute_SuperComputeCreateCluster_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
        prod["name"] != ""
        IksSuperComputeSuperComputeCreateCluster_product_ok
    }


    product_access_ok {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
    }
    prod := pp {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
        pp := productcatalog.getProductByName(input.parsed_body.instanceType, IksSuperCompute_SuperComputeCreateCluster_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
    }
    IksSuperComputeSuperComputeCreateCluster_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    IksSuperComputeSuperComputeCreateCluster_product_ok {
        IksSuperCompute_SuperComputeCreateCluster_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
        pp := productcatalog.getProductByName(input.parsed_body.instanceType, IksSuperCompute_SuperComputeCreateCluster_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.IksSuperCompute", "SuperComputeCreateCluster"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "GetKFStatus"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "GetKFStatus"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "GetKFStatus"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    KFService_GetKFStatus_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := KFService_GetKFStatus_cloudAccount["personId"] if {
        email == KFService_GetKFStatus_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, KFService_GetKFStatus_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.KFService", "GetKFStatus"]
        not KFService_GetKFStatus_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "GetKFStatus"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "GetKFStatus"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "GetKFStatus"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "GetUserCredentials"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "GetUserCredentials"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "GetUserCredentials"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    KFService_GetUserCredentials_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := KFService_GetUserCredentials_cloudAccount["personId"] if {
        email == KFService_GetUserCredentials_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, KFService_GetUserCredentials_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.KFService", "GetUserCredentials"]
        not KFService_GetUserCredentials_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "GetUserCredentials"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "GetUserCredentials"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "GetUserCredentials"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "GetExternalIP"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "GetExternalIP"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "GetExternalIP"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    KFService_GetExternalIP_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := KFService_GetExternalIP_cloudAccount["personId"] if {
        email == KFService_GetExternalIP_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, KFService_GetExternalIP_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.KFService", "GetExternalIP"]
        not KFService_GetExternalIP_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "GetExternalIP"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "GetExternalIP"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "GetExternalIP"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "CreateKubeFlowDeployment"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "CreateKubeFlowDeployment"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "CreateKubeFlowDeployment"]
    }

    user_ok {
        input.parsed_path == ["proto.KFService", "CreateKubeFlowDeployment"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "CreateKubeFlowDeployment"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "CreateKubeFlowDeployment"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "CreateKubeFlowDeployment"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "ListKubeFlowDeployment"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "ListKubeFlowDeployment"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "ListKubeFlowDeployment"]
    }

    user_ok {
        input.parsed_path == ["proto.KFService", "ListKubeFlowDeployment"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "ListKubeFlowDeployment"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "ListKubeFlowDeployment"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "ListKubeFlowDeployment"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "DeleteKubeFlowDeployment"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "DeleteKubeFlowDeployment"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "DeleteKubeFlowDeployment"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    KFService_DeleteKubeFlowDeployment_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := KFService_DeleteKubeFlowDeployment_cloudAccount["personId"] if {
        email == KFService_DeleteKubeFlowDeployment_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, KFService_DeleteKubeFlowDeployment_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.KFService", "DeleteKubeFlowDeployment"]
        not KFService_DeleteKubeFlowDeployment_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "DeleteKubeFlowDeployment"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "DeleteKubeFlowDeployment"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "DeleteKubeFlowDeployment"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "ExecuteKFPreCheck"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "ExecuteKFPreCheck"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "ExecuteKFPreCheck"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    KFService_ExecuteKFPreCheck_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := KFService_ExecuteKFPreCheck_cloudAccount["personId"] if {
        email == KFService_ExecuteKFPreCheck_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, KFService_ExecuteKFPreCheck_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.KFService", "ExecuteKFPreCheck"]
        not KFService_ExecuteKFPreCheck_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "ExecuteKFPreCheck"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "ExecuteKFPreCheck"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "ExecuteKFPreCheck"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.KFService", "GetJobStatus"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.KFService", "GetJobStatus"]
    }

    method_ok {
        input.parsed_path == ["proto.KFService", "GetJobStatus"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    KFService_GetJobStatus_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := KFService_GetJobStatus_cloudAccount["personId"] if {
        email == KFService_GetJobStatus_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, KFService_GetJobStatus_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.KFService", "GetJobStatus"]
        not KFService_GetJobStatus_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.KFService", "GetJobStatus"]
    }


    product_access_ok {
        input.parsed_path == ["proto.KFService", "GetJobStatus"]
    }

    gts_ok {
        input.parsed_path == ["proto.KFService", "GetJobStatus"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
    }

    method_ok {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    MaasGateway_GenerateStream_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := MaasGateway_GenerateStream_cloudAccount["personId"] if {
        email == MaasGateway_GenerateStream_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, MaasGateway_GenerateStream_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
        not MaasGateway_GenerateStream_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
        prod["name"] != ""
        MaasGatewayGenerateStream_product_ok
    }


    MaasGatewayGenerateStream_product_access_ok {
        prod["access"] == "open"
    }

    MaasGatewayGenerateStream_product_access_ok {
        checkProductAccess := productcatalog.checkProductAccess(input.parsed_body.productId, MaasGateway_GenerateStream_cloudAccount["id"])
        checkProductAccess == true
    }

    product_access_ok {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
        MaasGatewayGenerateStream_product_access_ok
    }
    prod := pp {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
        pp := productcatalog.getProductByName(input.parsed_body.productName, MaasGateway_GenerateStream_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
    }
    MaasGatewayGenerateStream_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    MaasGatewayGenerateStream_product_ok {
        MaasGateway_GenerateStream_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
        pp := productcatalog.getProductByName(input.parsed_body.productName, MaasGateway_GenerateStream_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.MaasGateway", "GenerateStream"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.MaasGateway", "GetSupportedModels"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.MaasGateway", "GetSupportedModels"]
    }

    method_ok {
        input.parsed_path == ["proto.MaasGateway", "GetSupportedModels"]
    }

    user_ok {
        input.parsed_path == ["proto.MaasGateway", "GetSupportedModels"]
    }

    product_ok {
        input.parsed_path == ["proto.MaasGateway", "GetSupportedModels"]
    }


    product_access_ok {
        input.parsed_path == ["proto.MaasGateway", "GetSupportedModels"]
    }

    gts_ok {
        input.parsed_path == ["proto.MaasGateway", "GetSupportedModels"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.GlobalOperationsService", "CreateDefault"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.GlobalOperationsService", "CreateDefault"]
    }

    method_ok {
        input.parsed_path == ["proto.GlobalOperationsService", "CreateDefault"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    GlobalOperationsService_CreateDefault_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := GlobalOperationsService_CreateDefault_cloudAccount["personId"] if {
        email == GlobalOperationsService_CreateDefault_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, GlobalOperationsService_CreateDefault_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.GlobalOperationsService", "CreateDefault"]
        not GlobalOperationsService_CreateDefault_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.GlobalOperationsService", "CreateDefault"]
    }


    product_access_ok {
        input.parsed_path == ["proto.GlobalOperationsService", "CreateDefault"]
    }

    gts_ok {
        input.parsed_path == ["proto.GlobalOperationsService", "CreateDefault"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SubnetService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SubnetService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.SubnetService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SubnetService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SubnetService_Create_cloudAccount["personId"] if {
        email == SubnetService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SubnetService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SubnetService", "Create"]
        not SubnetService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SubnetService", "Create"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SubnetService", "Create"]
    }

    gts_ok {
        input.parsed_path == ["proto.SubnetService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SubnetService", "Update"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SubnetService", "Update"]
    }

    method_ok {
        input.parsed_path == ["proto.SubnetService", "Update"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SubnetService_Update_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SubnetService_Update_cloudAccount["personId"] if {
        email == SubnetService_Update_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SubnetService_Update_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SubnetService", "Update"]
        not SubnetService_Update_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SubnetService", "Update"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SubnetService", "Update"]
    }

    gts_ok {
        input.parsed_path == ["proto.SubnetService", "Update"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SubnetService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SubnetService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.SubnetService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SubnetService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SubnetService_Get_cloudAccount["personId"] if {
        email == SubnetService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SubnetService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SubnetService", "Get"]
        not SubnetService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SubnetService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SubnetService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.SubnetService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SubnetService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SubnetService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.SubnetService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SubnetService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SubnetService_Search_cloudAccount["personId"] if {
        email == SubnetService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SubnetService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SubnetService", "Search"]
        not SubnetService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SubnetService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SubnetService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.SubnetService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.SubnetService", "Delete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.SubnetService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.SubnetService", "Delete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    SubnetService_Delete_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := SubnetService_Delete_cloudAccount["personId"] if {
        email == SubnetService_Delete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, SubnetService_Delete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.SubnetService", "Delete"]
        not SubnetService_Delete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.SubnetService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.SubnetService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.SubnetService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VPCService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VPCService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.VPCService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VPCService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VPCService_Create_cloudAccount["personId"] if {
        email == VPCService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VPCService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VPCService", "Create"]
        not VPCService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VPCService", "Create"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VPCService", "Create"]
    }

    gts_ok {
        input.parsed_path == ["proto.VPCService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VPCService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VPCService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.VPCService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VPCService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VPCService_Get_cloudAccount["personId"] if {
        email == VPCService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VPCService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VPCService", "Get"]
        not VPCService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VPCService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VPCService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.VPCService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VPCService", "Search"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VPCService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.VPCService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VPCService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VPCService_Search_cloudAccount["personId"] if {
        email == VPCService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VPCService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VPCService", "Search"]
        not VPCService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VPCService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VPCService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.VPCService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VPCService", "Update"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VPCService", "Update"]
    }

    method_ok {
        input.parsed_path == ["proto.VPCService", "Update"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VPCService_Update_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VPCService_Update_cloudAccount["personId"] if {
        email == VPCService_Update_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VPCService_Update_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VPCService", "Update"]
        not VPCService_Update_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VPCService", "Update"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VPCService", "Update"]
    }

    gts_ok {
        input.parsed_path == ["proto.VPCService", "Update"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.VPCService", "Delete"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VPCService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.VPCService", "Delete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    VPCService_Delete_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := VPCService_Delete_cloudAccount["personId"] if {
        email == VPCService_Delete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, VPCService_Delete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.VPCService", "Delete"]
        not VPCService_Delete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.VPCService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VPCService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.VPCService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.NotificationGatewayService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Read"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    NotificationGatewayService_Read_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := NotificationGatewayService_Read_cloudAccount["personId"] if {
        email == NotificationGatewayService_Read_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, NotificationGatewayService_Read_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Read"]
        not NotificationGatewayService_Read_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Subscribe"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.NotificationGatewayService", "Subscribe"]
    }

    method_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Subscribe"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    NotificationGatewayService_Subscribe_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := NotificationGatewayService_Subscribe_cloudAccount["personId"] if {
        email == NotificationGatewayService_Subscribe_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, NotificationGatewayService_Subscribe_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Subscribe"]
        not NotificationGatewayService_Subscribe_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Subscribe"]
    }


    product_access_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Subscribe"]
    }

    gts_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "Subscribe"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "PublishEvent"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.NotificationGatewayService", "PublishEvent"]
    }

    method_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "PublishEvent"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.createEvent.cloudAccountId == relatedCloudAccount["id"]
    }
    NotificationGatewayService_PublishEvent_cloudAccount := cloudaccount.getById(input.parsed_body.createEvent.cloudAccountId)

    personId := NotificationGatewayService_PublishEvent_cloudAccount["personId"] if {
        email == NotificationGatewayService_PublishEvent_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, NotificationGatewayService_PublishEvent_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "PublishEvent"]
        not NotificationGatewayService_PublishEvent_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "PublishEvent"]
    }


    product_access_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "PublishEvent"]
    }

    gts_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "PublishEvent"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "SubscribeEvents"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.NotificationGatewayService", "SubscribeEvents"]
    }

    method_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "SubscribeEvents"]
    }

    user_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "SubscribeEvents"]
    }

    product_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "SubscribeEvents"]
    }


    product_access_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "SubscribeEvents"]
    }

    gts_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "SubscribeEvents"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "ReceiveEvents"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.NotificationGatewayService", "ReceiveEvents"]
    }

    method_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "ReceiveEvents"]
    }

    user_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "ReceiveEvents"]
    }

    product_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "ReceiveEvents"]
    }


    product_access_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "ReceiveEvents"]
    }

    gts_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "ReceiveEvents"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "DeleteEvents"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.NotificationGatewayService", "DeleteEvents"]
    }

    method_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "DeleteEvents"]
    }

    user_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "DeleteEvents"]
    }

    product_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "DeleteEvents"]
    }


    product_access_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "DeleteEvents"]
    }

    gts_ok {
        input.parsed_path == ["proto.NotificationGatewayService", "DeleteEvents"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.ProductVendorService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.ProductVendorService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.ProductVendorService", "Read"]
    }

    user_ok {
        input.parsed_path == ["proto.ProductVendorService", "Read"]
    }

    product_ok {
        input.parsed_path == ["proto.ProductVendorService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ProductVendorService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.ProductVendorService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserRead"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.ProductCatalogService", "UserRead"]
    }

    method_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserRead"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    ProductCatalogService_UserRead_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := ProductCatalogService_UserRead_cloudAccount["personId"] if {
        email == ProductCatalogService_UserRead_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ProductCatalogService_UserRead_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserRead"]
        not ProductCatalogService_UserRead_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserRead"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserRead"]
    }

    gts_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserRead"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserReadExternal"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.ProductCatalogService", "UserReadExternal"]
    }

    method_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserReadExternal"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    ProductCatalogService_UserReadExternal_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := ProductCatalogService_UserReadExternal_cloudAccount["personId"] if {
        email == ProductCatalogService_UserReadExternal_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ProductCatalogService_UserReadExternal_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserReadExternal"]
        not ProductCatalogService_UserReadExternal_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserReadExternal"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserReadExternal"]
    }

    gts_ok {
        input.parsed_path == ["proto.ProductCatalogService", "UserReadExternal"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.RegionService", "UserRead"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.RegionService", "UserRead"]
    }

    method_ok {
        input.parsed_path == ["proto.RegionService", "UserRead"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    RegionService_UserRead_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := RegionService_UserRead_cloudAccount["personId"] if {
        email == RegionService_UserRead_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, RegionService_UserRead_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.RegionService", "UserRead"]
        not RegionService_UserRead_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.RegionService", "UserRead"]
    }


    product_access_ok {
        input.parsed_path == ["proto.RegionService", "UserRead"]
    }

    gts_ok {
        input.parsed_path == ["proto.RegionService", "UserRead"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.ProductSyncService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.ProductSyncService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.ProductSyncService", "Get"]
    }

    user_ok {
        input.parsed_path == ["proto.ProductSyncService", "Get"]
    }

    product_ok {
        input.parsed_path == ["proto.ProductSyncService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ProductSyncService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.ProductSyncService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.VendorSyncService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VendorSyncService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.VendorSyncService", "Get"]
    }

    user_ok {
        input.parsed_path == ["proto.VendorSyncService", "Get"]
    }

    product_ok {
        input.parsed_path == ["proto.VendorSyncService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VendorSyncService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.VendorSyncService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.VendorService", "Read"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.VendorService", "Read"]
    }

    method_ok {
        input.parsed_path == ["proto.VendorService", "Read"]
    }

    user_ok {
        input.parsed_path == ["proto.VendorService", "Read"]
    }

    product_ok {
        input.parsed_path == ["proto.VendorService", "Read"]
    }


    product_access_ok {
        input.parsed_path == ["proto.VendorService", "Read"]
    }

    gts_ok {
        input.parsed_path == ["proto.VendorService", "Read"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserRead"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserRead"]
    }

    method_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserRead"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    ProductCatalogServiceV2_UserRead_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := ProductCatalogServiceV2_UserRead_cloudAccount["personId"] if {
        email == ProductCatalogServiceV2_UserRead_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ProductCatalogServiceV2_UserRead_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserRead"]
        not ProductCatalogServiceV2_UserRead_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserRead"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserRead"]
    }

    gts_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserRead"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserReadExternal"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserReadExternal"]
    }

    method_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserReadExternal"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    ProductCatalogServiceV2_UserReadExternal_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := ProductCatalogServiceV2_UserReadExternal_cloudAccount["personId"] if {
        email == ProductCatalogServiceV2_UserReadExternal_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ProductCatalogServiceV2_UserReadExternal_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserReadExternal"]
        not ProductCatalogServiceV2_UserReadExternal_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserReadExternal"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserReadExternal"]
    }

    gts_ok {
        input.parsed_path == ["proto.ProductCatalogServiceV2", "UserReadExternal"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    FileStorageServiceCreate_authz_ok {
        FileStorageService_Create_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,FileStorageService_Create_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.FileStorageService", "Create"]
        FileStorageServiceCreate_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.FileStorageService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.FileStorageService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    FileStorageService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := FileStorageService_Create_cloudAccount["personId"] if {
        email == FileStorageService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, FileStorageService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.FileStorageService", "Create"]
        not FileStorageService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.FileStorageService", "Create"]
        prod["name"] != ""
        FileStorageServiceCreate_product_ok
    }


    product_access_ok {
        input.parsed_path == ["proto.FileStorageService", "Create"]
    }
    prod := pp {
        input.parsed_path == ["proto.FileStorageService", "Create"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceType, FileStorageService_Create_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.FileStorageService", "Create"]
    }
    FileStorageServiceCreate_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    FileStorageServiceCreate_product_ok {
        FileStorageService_Create_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.FileStorageService", "Create"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.FileStorageService", "Create"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceType, FileStorageService_Create_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.FileStorageService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    FileStorageServiceGet_authz_ok {
        FileStorageService_Get_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,FileStorageService_Get_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.FileStorageService", "Get"]
        FileStorageServiceGet_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.FileStorageService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.FileStorageService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    FileStorageService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := FileStorageService_Get_cloudAccount["personId"] if {
        email == FileStorageService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, FileStorageService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.FileStorageService", "Get"]
        not FileStorageService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.FileStorageService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.FileStorageService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.FileStorageService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    FileStorageServiceSearch_authz_ok {
        FileStorageService_Search_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,FileStorageService_Search_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.FileStorageService", "Search"]
        FileStorageServiceSearch_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.FileStorageService", "Search"]
    }

    method_ok {
        input.parsed_path == ["proto.FileStorageService", "Search"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    FileStorageService_Search_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := FileStorageService_Search_cloudAccount["personId"] if {
        email == FileStorageService_Search_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, FileStorageService_Search_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.FileStorageService", "Search"]
        not FileStorageService_Search_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.FileStorageService", "Search"]
    }


    product_access_ok {
        input.parsed_path == ["proto.FileStorageService", "Search"]
    }

    gts_ok {
        input.parsed_path == ["proto.FileStorageService", "Search"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    FileStorageServiceUpdate_authz_ok {
        FileStorageService_Update_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,FileStorageService_Update_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.FileStorageService", "Update"]
        FileStorageServiceUpdate_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.FileStorageService", "Update"]
    }

    method_ok {
        input.parsed_path == ["proto.FileStorageService", "Update"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    FileStorageService_Update_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := FileStorageService_Update_cloudAccount["personId"] if {
        email == FileStorageService_Update_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, FileStorageService_Update_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.FileStorageService", "Update"]
        not FileStorageService_Update_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.FileStorageService", "Update"]
    }


    product_access_ok {
        input.parsed_path == ["proto.FileStorageService", "Update"]
    }

    gts_ok {
        input.parsed_path == ["proto.FileStorageService", "Update"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    FileStorageServiceDelete_authz_ok {
        FileStorageService_Delete_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,FileStorageService_Delete_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.FileStorageService", "Delete"]
        FileStorageServiceDelete_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.FileStorageService", "Delete"]
    }

    method_ok {
        input.parsed_path == ["proto.FileStorageService", "Delete"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    FileStorageService_Delete_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := FileStorageService_Delete_cloudAccount["personId"] if {
        email == FileStorageService_Delete_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, FileStorageService_Delete_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.FileStorageService", "Delete"]
        not FileStorageService_Delete_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.FileStorageService", "Delete"]
    }


    product_access_ok {
        input.parsed_path == ["proto.FileStorageService", "Delete"]
    }

    gts_ok {
        input.parsed_path == ["proto.FileStorageService", "Delete"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    FileStorageServiceGetUser_authz_ok {
        FileStorageService_GetUser_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,FileStorageService_GetUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.FileStorageService", "GetUser"]
        FileStorageServiceGetUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.FileStorageService", "GetUser"]
    }

    method_ok {
        input.parsed_path == ["proto.FileStorageService", "GetUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    FileStorageService_GetUser_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := FileStorageService_GetUser_cloudAccount["personId"] if {
        email == FileStorageService_GetUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, FileStorageService_GetUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.FileStorageService", "GetUser"]
        not FileStorageService_GetUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.FileStorageService", "GetUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.FileStorageService", "GetUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.FileStorageService", "GetUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceCreateBucket_authz_ok {
        ObjectStorageService_CreateBucket_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_CreateBucket_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
        ObjectStorageServiceCreateBucket_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_CreateBucket_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_CreateBucket_cloudAccount["personId"] if {
        email == ObjectStorageService_CreateBucket_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_CreateBucket_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
        not ObjectStorageService_CreateBucket_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
        prod["name"] != ""
        ObjectStorageServiceCreateBucket_product_ok
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
    }
    prod := pp {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceType, ObjectStorageService_CreateBucket_cloudAccount["type"])
    }

    need_product_match {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
    }
    ObjectStorageServiceCreateBucket_product_ok {
        some ii
        to_number(prod.rates[ii].rate) == 0
    }
    ObjectStorageServiceCreateBucket_product_ok {
        ObjectStorageService_CreateBucket_cloudAccount["paidServicesAllowed"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
        personId != ""
        countryCode != ""
        prodData["id"] != ""
        gts.isGTSOrderValid(prodData["id"], email, personId, countryCode)
    }
    prodData := pp {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
        pp := productcatalog.getProductByName(input.parsed_body.spec.instanceType, ObjectStorageService_CreateBucket_cloudAccount["type"])
    }
    need_gts_match {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucket"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceGetBucket_authz_ok {
        ObjectStorageService_GetBucket_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_GetBucket_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucket"]
        ObjectStorageServiceGetBucket_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucket"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucket"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_GetBucket_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_GetBucket_cloudAccount["personId"] if {
        email == ObjectStorageService_GetBucket_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_GetBucket_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucket"]
        not ObjectStorageService_GetBucket_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucket"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucket"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucket"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceSearchBucket_authz_ok {
        ObjectStorageService_SearchBucket_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_SearchBucket_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucket"]
        ObjectStorageServiceSearchBucket_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucket"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucket"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_SearchBucket_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_SearchBucket_cloudAccount["personId"] if {
        email == ObjectStorageService_SearchBucket_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_SearchBucket_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucket"]
        not ObjectStorageService_SearchBucket_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucket"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucket"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucket"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceDeleteBucket_authz_ok {
        ObjectStorageService_DeleteBucket_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_DeleteBucket_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucket"]
        ObjectStorageServiceDeleteBucket_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucket"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucket"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_DeleteBucket_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_DeleteBucket_cloudAccount["personId"] if {
        email == ObjectStorageService_DeleteBucket_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_DeleteBucket_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucket"]
        not ObjectStorageService_DeleteBucket_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucket"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucket"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucket"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceCreateBucketLifecycleRule_authz_ok {
        ObjectStorageService_CreateBucketLifecycleRule_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_CreateBucketLifecycleRule_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucketLifecycleRule"]
        ObjectStorageServiceCreateBucketLifecycleRule_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucketLifecycleRule"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucketLifecycleRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_CreateBucketLifecycleRule_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_CreateBucketLifecycleRule_cloudAccount["personId"] if {
        email == ObjectStorageService_CreateBucketLifecycleRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_CreateBucketLifecycleRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucketLifecycleRule"]
        not ObjectStorageService_CreateBucketLifecycleRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucketLifecycleRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucketLifecycleRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateBucketLifecycleRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceGetBucketLifecycleRule_authz_ok {
        ObjectStorageService_GetBucketLifecycleRule_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_GetBucketLifecycleRule_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucketLifecycleRule"]
        ObjectStorageServiceGetBucketLifecycleRule_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucketLifecycleRule"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucketLifecycleRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_GetBucketLifecycleRule_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_GetBucketLifecycleRule_cloudAccount["personId"] if {
        email == ObjectStorageService_GetBucketLifecycleRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_GetBucketLifecycleRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucketLifecycleRule"]
        not ObjectStorageService_GetBucketLifecycleRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucketLifecycleRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucketLifecycleRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetBucketLifecycleRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceSearchBucketLifecycleRule_authz_ok {
        ObjectStorageService_SearchBucketLifecycleRule_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_SearchBucketLifecycleRule_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucketLifecycleRule"]
        ObjectStorageServiceSearchBucketLifecycleRule_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucketLifecycleRule"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucketLifecycleRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_SearchBucketLifecycleRule_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := ObjectStorageService_SearchBucketLifecycleRule_cloudAccount["personId"] if {
        email == ObjectStorageService_SearchBucketLifecycleRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_SearchBucketLifecycleRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucketLifecycleRule"]
        not ObjectStorageService_SearchBucketLifecycleRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucketLifecycleRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucketLifecycleRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchBucketLifecycleRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceUpdateBucketLifecycleRule_authz_ok {
        ObjectStorageService_UpdateBucketLifecycleRule_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_UpdateBucketLifecycleRule_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateBucketLifecycleRule"]
        ObjectStorageServiceUpdateBucketLifecycleRule_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateBucketLifecycleRule"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateBucketLifecycleRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_UpdateBucketLifecycleRule_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_UpdateBucketLifecycleRule_cloudAccount["personId"] if {
        email == ObjectStorageService_UpdateBucketLifecycleRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_UpdateBucketLifecycleRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateBucketLifecycleRule"]
        not ObjectStorageService_UpdateBucketLifecycleRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateBucketLifecycleRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateBucketLifecycleRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateBucketLifecycleRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceDeleteBucketLifecycleRule_authz_ok {
        ObjectStorageService_DeleteBucketLifecycleRule_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_DeleteBucketLifecycleRule_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucketLifecycleRule"]
        ObjectStorageServiceDeleteBucketLifecycleRule_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucketLifecycleRule"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucketLifecycleRule"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_DeleteBucketLifecycleRule_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_DeleteBucketLifecycleRule_cloudAccount["personId"] if {
        email == ObjectStorageService_DeleteBucketLifecycleRule_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_DeleteBucketLifecycleRule_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucketLifecycleRule"]
        not ObjectStorageService_DeleteBucketLifecycleRule_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucketLifecycleRule"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucketLifecycleRule"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteBucketLifecycleRule"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceCreateObjectUser_authz_ok {
        ObjectStorageService_CreateObjectUser_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_CreateObjectUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateObjectUser"]
        ObjectStorageServiceCreateObjectUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "CreateObjectUser"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateObjectUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_CreateObjectUser_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_CreateObjectUser_cloudAccount["personId"] if {
        email == ObjectStorageService_CreateObjectUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_CreateObjectUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateObjectUser"]
        not ObjectStorageService_CreateObjectUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateObjectUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateObjectUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "CreateObjectUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceGetObjectUser_authz_ok {
        ObjectStorageService_GetObjectUser_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_GetObjectUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetObjectUser"]
        ObjectStorageServiceGetObjectUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "GetObjectUser"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetObjectUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_GetObjectUser_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_GetObjectUser_cloudAccount["personId"] if {
        email == ObjectStorageService_GetObjectUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_GetObjectUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetObjectUser"]
        not ObjectStorageService_GetObjectUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetObjectUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetObjectUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "GetObjectUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceSearchObjectUser_authz_ok {
        ObjectStorageService_SearchObjectUser_AuthzCloudAccountId := input.parsed_body.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_SearchObjectUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchObjectUser"]
        ObjectStorageServiceSearchObjectUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "SearchObjectUser"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchObjectUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_SearchObjectUser_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := ObjectStorageService_SearchObjectUser_cloudAccount["personId"] if {
        email == ObjectStorageService_SearchObjectUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_SearchObjectUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchObjectUser"]
        not ObjectStorageService_SearchObjectUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchObjectUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchObjectUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "SearchObjectUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceDeleteObjectUser_authz_ok {
        ObjectStorageService_DeleteObjectUser_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_DeleteObjectUser_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteObjectUser"]
        ObjectStorageServiceDeleteObjectUser_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteObjectUser"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteObjectUser"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_DeleteObjectUser_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_DeleteObjectUser_cloudAccount["personId"] if {
        email == ObjectStorageService_DeleteObjectUser_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_DeleteObjectUser_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteObjectUser"]
        not ObjectStorageService_DeleteObjectUser_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteObjectUser"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteObjectUser"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "DeleteObjectUser"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceUpdateObjectUserPolicy_authz_ok {
        ObjectStorageService_UpdateObjectUserPolicy_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_UpdateObjectUserPolicy_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserPolicy"]
        ObjectStorageServiceUpdateObjectUserPolicy_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserPolicy"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserPolicy"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_UpdateObjectUserPolicy_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_UpdateObjectUserPolicy_cloudAccount["personId"] if {
        email == ObjectStorageService_UpdateObjectUserPolicy_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_UpdateObjectUserPolicy_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserPolicy"]
        not ObjectStorageService_UpdateObjectUserPolicy_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserPolicy"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserPolicy"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserPolicy"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    ObjectStorageServiceUpdateObjectUserCredentials_authz_ok {
        ObjectStorageService_UpdateObjectUserCredentials_AuthzCloudAccountId := input.parsed_body.metadata.cloudAccountId
        authzCheck := authzService.check(email, enterpriseId,ObjectStorageService_UpdateObjectUserCredentials_AuthzCloudAccountId, input.attributes.request.http.headers["x-original-http-path"],input.attributes.request.http.headers["x-original-http-method"],input.parsed_body)
        authzCheck == true
    }

    authz_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserCredentials"]
        ObjectStorageServiceUpdateObjectUserCredentials_authz_ok
    }

    needs_authz_match {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserCredentials"]
    }

    method_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserCredentials"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.metadata.cloudAccountId == relatedCloudAccount["id"]
    }
    ObjectStorageService_UpdateObjectUserCredentials_cloudAccount := cloudaccount.getById(input.parsed_body.metadata.cloudAccountId)

    personId := ObjectStorageService_UpdateObjectUserCredentials_cloudAccount["personId"] if {
        email == ObjectStorageService_UpdateObjectUserCredentials_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, ObjectStorageService_UpdateObjectUserCredentials_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserCredentials"]
        not ObjectStorageService_UpdateObjectUserCredentials_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserCredentials"]
    }


    product_access_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserCredentials"]
    }

    gts_ok {
        input.parsed_path == ["proto.ObjectStorageService", "UpdateObjectUserCredentials"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Create"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.TrainingClusterService", "Create"]
    }

    method_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Create"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    TrainingClusterService_Create_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := TrainingClusterService_Create_cloudAccount["personId"] if {
        email == TrainingClusterService_Create_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, TrainingClusterService_Create_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Create"]
        not TrainingClusterService_Create_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Create"]
    }


    product_access_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Create"]
    }

    gts_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Create"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Get"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.TrainingClusterService", "Get"]
    }

    method_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Get"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    TrainingClusterService_Get_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := TrainingClusterService_Get_cloudAccount["personId"] if {
        email == TrainingClusterService_Get_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, TrainingClusterService_Get_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Get"]
        not TrainingClusterService_Get_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Get"]
    }


    product_access_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Get"]
    }

    gts_ok {
        input.parsed_path == ["proto.TrainingClusterService", "Get"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.TrainingClusterService", "List"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.TrainingClusterService", "List"]
    }

    method_ok {
        input.parsed_path == ["proto.TrainingClusterService", "List"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    TrainingClusterService_List_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := TrainingClusterService_List_cloudAccount["personId"] if {
        email == TrainingClusterService_List_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, TrainingClusterService_List_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.TrainingClusterService", "List"]
        not TrainingClusterService_List_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.TrainingClusterService", "List"]
    }


    product_access_ok {
        input.parsed_path == ["proto.TrainingClusterService", "List"]
    }

    gts_ok {
        input.parsed_path == ["proto.TrainingClusterService", "List"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "Register"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.TrainingBatchUserService", "Register"]
    }

    method_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "Register"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudAccountId == relatedCloudAccount["id"]
    }
    TrainingBatchUserService_Register_cloudAccount := cloudaccount.getById(input.parsed_body.cloudAccountId)

    personId := TrainingBatchUserService_Register_cloudAccount["personId"] if {
        email == TrainingBatchUserService_Register_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, TrainingBatchUserService_Register_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "Register"]
        not TrainingBatchUserService_Register_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "Register"]
    }


    product_access_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "Register"]
    }

    gts_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "Register"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}

    authz_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "GetExpiryTimeById"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.TrainingBatchUserService", "GetExpiryTimeById"]
    }

    method_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "GetExpiryTimeById"]
    }

    user_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "GetExpiryTimeById"]
    }

    product_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "GetExpiryTimeById"]
    }


    product_access_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "GetExpiryTimeById"]
    }

    gts_ok {
        input.parsed_path == ["proto.TrainingBatchUserService", "GetExpiryTimeById"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.UserCredentialsService", "GetUserCredentials"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.UserCredentialsService", "GetUserCredentials"]
    }

    method_ok {
        input.parsed_path == ["proto.UserCredentialsService", "GetUserCredentials"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    UserCredentialsService_GetUserCredentials_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := UserCredentialsService_GetUserCredentials_cloudAccount["personId"] if {
        email == UserCredentialsService_GetUserCredentials_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, UserCredentialsService_GetUserCredentials_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.UserCredentialsService", "GetUserCredentials"]
        not UserCredentialsService_GetUserCredentials_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.UserCredentialsService", "GetUserCredentials"]
    }


    product_access_ok {
        input.parsed_path == ["proto.UserCredentialsService", "GetUserCredentials"]
    }

    gts_ok {
        input.parsed_path == ["proto.UserCredentialsService", "GetUserCredentials"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.UserCredentialsService", "CreateUserCredentials"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.UserCredentialsService", "CreateUserCredentials"]
    }

    method_ok {
        input.parsed_path == ["proto.UserCredentialsService", "CreateUserCredentials"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    UserCredentialsService_CreateUserCredentials_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := UserCredentialsService_CreateUserCredentials_cloudAccount["personId"] if {
        email == UserCredentialsService_CreateUserCredentials_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, UserCredentialsService_CreateUserCredentials_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.UserCredentialsService", "CreateUserCredentials"]
        not UserCredentialsService_CreateUserCredentials_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.UserCredentialsService", "CreateUserCredentials"]
    }


    product_access_ok {
        input.parsed_path == ["proto.UserCredentialsService", "CreateUserCredentials"]
    }

    gts_ok {
        input.parsed_path == ["proto.UserCredentialsService", "CreateUserCredentials"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveUserCredentials"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveUserCredentials"]
    }

    method_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveUserCredentials"]
        some _, relatedCloudAccount in relatedCloudAccounts
        input.parsed_body.cloudaccountId == relatedCloudAccount["id"]
    }
    UserCredentialsService_RemoveUserCredentials_cloudAccount := cloudaccount.getById(input.parsed_body.cloudaccountId)

    personId := UserCredentialsService_RemoveUserCredentials_cloudAccount["personId"] if {
        email == UserCredentialsService_RemoveUserCredentials_cloudAccount["name"]
    } else := cloudaccount.getMemberPersonId(email, UserCredentialsService_RemoveUserCredentials_cloudAccount["id"])

    user_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveUserCredentials"]
        not UserCredentialsService_RemoveUserCredentials_cloudAccount["restricted"]
    }

    product_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveUserCredentials"]
    }


    product_access_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveUserCredentials"]
    }

    gts_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveUserCredentials"]
    }
{{- end }}

{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}

    authz_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveMemberUserCredentials"]
    }

    needs_authz_match {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveMemberUserCredentials"]
    }

    method_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveMemberUserCredentials"]
    }

    user_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveMemberUserCredentials"]
    }

    product_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveMemberUserCredentials"]
    }


    product_access_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveMemberUserCredentials"]
    }

    gts_ok {
        input.parsed_path == ["proto.UserCredentialsService", "RemoveMemberUserCredentials"]
    }
{{- end }}
