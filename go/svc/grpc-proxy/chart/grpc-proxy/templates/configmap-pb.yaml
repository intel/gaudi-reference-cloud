apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "idc-common.fullname" . }}-pb
  namespace: {{ include "idc-common.namespace" . }}
  annotations:
    argocd.argoproj.io/sync-options: Replace=true
binaryData:
{{- if eq $.Values.deployment "all" }}
  idc.pb: ""
{{- end }}
{{- if eq $.Values.deployment "global" }}
  idc.pb: ""
{{- end }}
{{- if eq $.Values.deployment "regional" }}
  idc.pb: ""
{{- end }}
 