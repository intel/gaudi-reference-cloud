# Code generated by prototempl. DO NOT EDIT.
{{- $trust_chain_verification := "VERIFY_TRUST_CHAIN" }}
{{- if $.Values.tls.client.insecureSkipVerify }}
{{- $trust_chain_verification := "ACCEPT_UNTRUSTED" }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "idc-common.fullname" . }}-appclient
  namespace: {{ include "idc-common.namespace" . }}
  annotations:
    # Add important parameters as annotations so that an administrator can easily see the effective values in this ConfigMap.
    # These annotations have no effect.
    deployment: {{ $.Values.deployment | quote }}
    enableJwtValidation: {{ $.Values.enableJwtValidation | quote }}
    tls.client.insecureSkipVerify: {{ $.Values.tls.client.insecureSkipVerify | quote }}
    tls.enabled: {{ $.Values.tls.enabled | quote }}
    tls.server.requireClientCertificate: {{ $.Values.tls.server.requireClientCertificate | quote }}
data:
{{- if $.Values.tls.enabled }}
  sds.yaml: |
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: tls_sds
        tls_certificate:
          certificate_chain:
            filename: "/vault/secrets/cert.pem"
          private_key:
            filename: "/vault/secrets/cert.key"
          watched_directory:
            path: /vault/secrets
{{- end }}
  envoy.yaml: |
    node:
      id: "grpc-proxy"
      cluster: "grpc-proxy"
{{- if eq $.Values.envoy.image.tag "v1.26.8" }}
    # disable the async cert validation for version [v1.24.0 to v1.26.8]
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          envoy.reloadable_features.tls_async_cert_validation: false
{{- end }}
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: {{ .Values.listenAddress }}
            port_value: {{ include "idc-common.listenPort" . }}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              # maximum request headers size for incoming connections
              # max_request_headers_kb: 1024
              # time that Envoy will wait for the entire request to be received
              common_http_protocol_options:
                idle_timeout: 600s # Maximum idle time for connections.
              request_timeout: 120s
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
{{- if eq $.Values.envoy.image.tag "v1.26.8" }}
                  log_format:
                    text_format_source: 
                      inline_string: "[%START_TIME%] %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% %REQ(X-FORWARDED-FOR)% %REQ(USER-AGENT)% %REQ(X-REQUEST-ID)% %REQ(:AUTHORITY)% %UPSTREAM_HOST% [ %DOWNSTREAM_TRANSPORT_FAILURE_REASON% %UPSTREAM_TRANSPORT_FAILURE_REASON% ]\n"
{{- end }}
              http_filters:
              # - name: envoy.filters.http.buffer
              #  typed_config:
              #    "@type": type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer
              #    # maximum request size that the filter will buffer before the connection manager
              #    max_request_bytes: 16777216 # 16 MiB (16 * 1024 * 1024 bytes)
{{- if .Values.oidc.servers }}
              - name: envoy.filters.http.jwt_authn
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                  providers:
{{- range $key, $value := $.Values.oidc.servers }}
                    oidc_provider_{{ $key }}:
                      issuer: {{ $value.issueURL }}
{{- if $value.audiences }}
                      audiences:
{{- range $value.audiences }}
                      - {{ . }}
{{- end }}
{{- end }}
                      forward: "true"
                      from_headers:
                        - name: Authorization
                          value_prefix: "Bearer "
                      remote_jwks:
                        http_uri:
                          uri: {{ $value.keyURL }}
                          cluster: oidc_cluster_{{ $key }}
                          timeout: 5s
                        cache_duration:
                          seconds: 300
{{- end }}
{{- if .Values.enableJwtValidation }}
                  rules:
                  - match:
                      prefix: "/"
                    requires:
{{- if eq (len .Values.oidc.servers) 1 }}
                      provider_name: oidc_provider_0
{{- else }}
                      requires_any:
                        requirements:
{{- range $key, $value := $.Values.oidc.servers }}
                        - provider_name: oidc_provider_{{ $key }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- if .Values.rateLimit.enabled }}
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                        local auth_header = request_handle:headers():get("Authorization")
                        -- request_handle:logInfo("rate_limit: authorization header: " .. (auth_header or "nil"))
                        -- Extract and parse the JWT
                        if auth_header then
                            local jwt = string.match(auth_header, "Bearer%s+(.+)")
                            -- request_handle:logInfo("rate_limit: extracted JWT " .. (jwt or "nil"))
                            if jwt then
                                -- Split JWT into header, payload, and signature
                                local _, payload, _ = jwt:match("([^%.]+)%.([^%.]+)%.([^%.]+)")
                                -- request_handle:logInfo("rate_limit: base64 payload " .. (payload or "nil"))
                                if payload then
                                    -- Decode the payload using the base64_decode function
                                    local decoded_payload = base64_decode(payload)
                                    -- request_handle:logInfo("rate_limit: decoded payload  " .. (decoded_payload or "nil"))
                                    if decoded_payload then
                                        local claim_variable = {{ $.Values.rateLimit.claim | quote }}
                                        -- request_handle:logInfo("rate_limit: claim variable " .. claim_variable)
                                        local claim_value = decoded_payload:match('"' .. claim_variable .. '"%s*:%s*"([^"]+)"')
                                        -- request_handle:logInfo("rate_limit: extracted claim value " .. (claim_value or "nil"))
                                        if claim_value then
                                            -- Add the claim value as user ID to the header
                                            request_handle:headers():add("X-User-ID", claim_value)
                                            -- request_handle:logInfo("rate_limit: user ID added to headers.")
                                        else
                                            request_handle:logInfo("rate_limit: user ID not found in JWT payload.")
                                        end

                                      else
                                          request_handle:logInfo("rate_limit: failed to decode the payload.")
                                    end
                                else
                                    request_handle:logInfo("rate_limit: failed to split JWT parts correctly.")
                                end
                            else
                                request_handle:logInfo("rate_limit: failed JWT not found in authorization header.")
                            end
                        else
                            request_handle:logInfo("rate_limit: authorization header not found.")
                        end
                    end

                    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                    function base64_decode(data)
                        -- Adjust for padding
                        data = string.gsub(data, '[^' .. b .. '=]', '')
                        data = string.gsub(data, '[-_]', function(x)
                            return (x == '-' and '+') or '/'
                        end)
                        
                        local padding = #data % 4
                        if padding > 0 then
                            data = data .. string.rep('=', 4 - padding)
                        end
                        return (data:gsub('.', function(x)
                            if x == '=' then return '' end
                            local r, f = '', (b:find(x) - 1)
                            for i = 6, 1, -1 do
                                r = r .. ((f % 2 ^ i - f % 2 ^ (i - 1) > 0) and '1' or '0')
                            end
                            return r
                        end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                            if #x ~= 8 then return '' end
                            local c = 0
                            for i = 1, 8 do
                                c = c + ((x:sub(i, i) == '1') and 2 ^ (8 - i) or 0)
                            end
                            return string.char(c)
                        end))
                    end
{{- end }}
              - name: envoy.filters.http.health_check
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                  pass_through_mode: false
                  headers:
                  - name: ":path"
                    string_match:
                      exact: "/healthz"
                  - name: "x-envoy-livenessprobe"
                    string_match:
                      exact: "healthz"
{{- if .Values.opa.enabled }}                 
              - name: envoy.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  with_request_body:
                    max_request_bytes: 8192
                    allow_partial_message: true
                    pack_as_bytes: true
                  failure_mode_allow: false
                  grpc_service:
                    google_grpc:
                      target_uri: 127.0.0.1:{{- .Values.opa.grpcPort }}
                      stat_prefix: ext_authz
                    timeout: 15s
{{- end }}
{{- if .Values.rateLimit.enabled }}
              - name: envoy.filters.http.ratelimit
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                  domain: idc
                  request_type: external
                  # stage: 0
                  rate_limited_as_resource_exhausted: {{ $.Values.rateLimit.rateLimitedAsResourceExhausted }}
                  failure_mode_deny: {{ $.Values.rateLimit.failureModeDeny }}
                  enable_x_ratelimit_headers: {{ $.Values.rateLimit.enableXRateLimitHeaders }}
                  rate_limit_service:
                    grpc_service:
                      envoy_grpc:
                        cluster_name: rate_limit_cluster
                    transport_api_version: V3
{{- end }}
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              codec_type: AUTO
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: http
                  domains:
                  - "*"
{{- if .Values.rateLimit.enabled }}
                  rate_limits:
                    - actions:
                        - request_headers:
                            header_name: "X-User-ID"
                            descriptor_key: "user_id"
                        - request_headers:
                            header_name: ":path"
                            descriptor_key: "path"
                        - request_headers:
                            header_name: ":method"
                            descriptor_key: "method"
{{- end }}
                  routes:
                  - match:
                      prefix: "/grpc.reflection.v1alpha.ServerReflection/"
                    route:
                      auto_host_rewrite: true
                      cluster: "grpc-reflect"
                    typed_per_filter_config:
                      envoy.filters.http.ext_authz:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                        disabled: true
{{- if and (has "SshPublicKeyService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.SshPublicKeyService/Create"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "SshPublicKeyService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.SshPublicKeyService/Get"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "SshPublicKeyService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.SshPublicKeyService/Search"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "SshPublicKeyService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.SshPublicKeyService/Delete"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "InstanceService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.InstanceService/Create"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "InstanceService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.InstanceService/Get"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "InstanceService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.InstanceService/Search"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "InstanceService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.InstanceService/Delete"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "InstanceTypeService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.InstanceTypeService/Search"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "MachineImageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.MachineImageService/Search"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "VNetService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.VNetService/Put"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "VNetService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.VNetService/Search"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "compute"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/CreateNewCluster"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetClusters"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetCluster"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/UpgradeCluster"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/EnableClusterStorage"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/DeleteCluster"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetClusterStatus"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/CreateNodeGroup"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetNodeGroup"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/PutNodeGroup"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/UpgradeNodeGroup"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/DeleteNodeGroup"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetNodeGroupStatus"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/DeleteNodeGroupInstance"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetPublicK8sVersions"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/RetrieveKubeConfig"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/CreateNewVip"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetVips"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetVip"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/UpdateFirewallRule"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/GetFirewallRule"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "Iks" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.Iks/DeleteFirewallRule"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "iks"
{{- end }}
{{- if and (has "MaasGateway" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.MaasGateway/GenerateStream"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "maas-gateway"
{{- end }}
{{- if and (has "MaasGateway" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.MaasGateway/GetSupportedModels"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "maas-gateway"
{{- end }}
{{- if and (has "FileStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.FileStorageService/Create"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "FileStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.FileStorageService/Get"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "FileStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.FileStorageService/Search"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "FileStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.FileStorageService/Update"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "FileStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.FileStorageService/Delete"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "FileStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.FileStorageService/GetUser"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "ObjectStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.ObjectStorageService/CreateBucket"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "ObjectStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.ObjectStorageService/GetBucket"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "ObjectStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.ObjectStorageService/DeleteBucket"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "ObjectStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.ObjectStorageService/CreateObjectUser"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "ObjectStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.ObjectStorageService/GetObjectUser"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
{{- if and (has "ObjectStorageService" $.Values.enabledServices)  (or (eq $.Values.deployment "all") (eq $.Values.deployment "regional")) }}
                  - match:
                      prefix: "/proto.ObjectStorageService/DeleteObjectUser"
                    route:
                      auto_host_rewrite: true
                      timeout: 60s
                      cluster: "storage"
{{- end }}
          transport_socket:
            name: envoy.transport_sockets.raw_buffer
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer
{{- if $.Values.tls.enabled }}
              tcp_keepalive:
                keepalive_probes: 10              # Number of keepalive probes sent before the connection is considered dead.
                keepalive_time: 120               # Time (in seconds) between subsequent keepalive probes.
                keepalive_interval: 30            # Time (in seconds) between the first keepalive probe and the first retransmission.
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: {{ $.Values.tls.server.requireClientCertificate }}
              common_tls_context:
                tls_certificate_sds_secret_configs:
                  name: tls_sds
                  sds_config:
                    path: /etc/envoy/sds.yaml
                validation_context:
                  trusted_ca:
                    filename: /vault/secrets/ca.pem
                  watched_directory:
                    path: /vault/secrets
                  trust_chain_verification: {{ $trust_chain_verification }}
{{- end }}
      clusters:
{{- if .Values.rateLimit.enabled }}
      - name: rate_limit_cluster
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: rate_limit_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}rate-limit{{ .Values.targetAddressSuffix }}
                    port_value: 8081
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificates:
                - certificate_chain:
                    filename: /vault/secrets/cert.pem
                  private_key:
                    filename: /vault/secrets/cert.key
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }}
{{- end }}
{{- range $key, $value := $.Values.oidc.servers }}
      - name: oidc_cluster_{{ $key  }}
        connect_timeout: {{ $.Values.oidc.oidcServerConnectTimeout }}
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: oidc_cluster_{{ $key  }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $value.server }}
                    port_value: {{ $value.port }}
{{- if ne (index $value "useTls") false }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: {{ $value.server }}
{{- end }}
{{- end }}
      - name: "grpc-reflect"
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: "grpc-reflect"
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}grpc-reflect{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: grpc-reflect.idcs-system.svc.cluster.local
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: authz
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: authz
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}authz{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "authz" "compute") (eq "authz" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}authz{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: billing-driver
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: billing-driver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}billing-driver{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "billing-driver" "compute") (eq "billing-driver" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}billing-driver{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: billing
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: billing
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}billing{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "billing" "compute") (eq "billing" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}billing{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: cloudaccount-enroll
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: cloudaccount-enroll
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}cloudaccount-enroll{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "cloudaccount-enroll" "compute") (eq "cloudaccount-enroll" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}cloudaccount-enroll{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: cloudaccount
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: cloudaccount
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}cloudaccount{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "cloudaccount" "compute") (eq "cloudaccount" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}cloudaccount{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: cloudcredits
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: cloudcredits
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}cloudcredits{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "cloudcredits" "compute") (eq "cloudcredits" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}cloudcredits{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: cloudmonitor
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: cloudmonitor
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}cloudmonitor{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "cloudmonitor" "compute") (eq "cloudmonitor" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}cloudmonitor{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: cloudmonitor_logs
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: cloudmonitor_logs
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}cloudmonitor-logs-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "cloudmonitor_logs" "compute") (eq "cloudmonitor_logs" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}cloudmonitor_logs{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: compute
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: compute
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "compute" "compute") (eq "compute" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}compute{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: compute_private
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: compute_private
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "compute_private" "compute") (eq "compute_private" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}compute_private{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: console
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: console
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}console{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "console" "compute") (eq "console" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}console{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: dataloader
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: dataloader
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}demoservice{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "dataloader" "compute") (eq "dataloader" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}dataloader{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: dpai_airflow
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: dpai_airflow
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}dpai{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "dpai_airflow" "compute") (eq "dpai_airflow" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}dpai_airflow{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: dpai_deployment
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: dpai_deployment
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}dpai{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "dpai_deployment" "compute") (eq "dpai_deployment" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}dpai_deployment{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: dpai_hms
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: dpai_hms
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}dpai{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "dpai_hms" "compute") (eq "dpai_hms" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}dpai_hms{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: dpai_network
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: dpai_network
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}dpai{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "dpai_network" "compute") (eq "dpai_network" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}dpai_network{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: dpai_postgres
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: dpai_postgres
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}dpai{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "dpai_postgres" "compute") (eq "dpai_postgres" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}dpai_postgres{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: dpai_workspace
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: dpai_workspace
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}dpai{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "dpai_workspace" "compute") (eq "dpai_workspace" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}dpai_workspace{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: fleet_admin
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: fleet_admin
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}fleet-admin-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "fleet_admin" "compute") (eq "fleet_admin" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}fleet_admin{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: fleet_admin_ui_server
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: fleet_admin_ui_server
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}fleet-admin-ui-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "fleet_admin_ui_server" "compute") (eq "fleet_admin_ui_server" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}fleet_admin_ui_server{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: fleet_common
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: fleet_common
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}fleet_common{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "fleet_common" "compute") (eq "fleet_common" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}fleet_common{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: iks
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: iks
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}iks{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "iks" "compute") (eq "iks" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}iks{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: iks_admin
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: iks_admin
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}iks{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "iks_admin" "compute") (eq "iks_admin" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}iks_admin{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: iks_private_reconciler
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: iks_private_reconciler
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}iks{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "iks_private_reconciler" "compute") (eq "iks_private_reconciler" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}iks_private_reconciler{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: infaas-dispatcher
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: infaas-dispatcher
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}infaas-dispatcher{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "infaas-dispatcher" "compute") (eq "infaas-dispatcher" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}infaas-dispatcher{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: infaas-generate
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: infaas-generate
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}infaas-generate{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "infaas-generate" "compute") (eq "infaas-generate" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}infaas-generate{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: kfaas
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: kfaas
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}kfaas{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "kfaas" "compute") (eq "kfaas" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}kfaas{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: maas-gateway
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: maas-gateway
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}Maas-gateway{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "maas-gateway" "compute") (eq "maas-gateway" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}maas-gateway{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: metering
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: metering
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}metering{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "metering" "compute") (eq "metering" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}metering{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: network_address_translation_private
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: network_address_translation_private
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}network-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "network_address_translation_private" "compute") (eq "network_address_translation_private" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}network_address_translation_private{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: network_global_operations
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: network_global_operations
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}network-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "network_global_operations" "compute") (eq "network_global_operations" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}network_global_operations{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: network_iprm_private
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: network_iprm_private
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}network-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "network_iprm_private" "compute") (eq "network_iprm_private" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}network_iprm_private{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: network_subnet
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: network_subnet
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}network-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "network_subnet" "compute") (eq "network_subnet" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}network_subnet{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: network_subnet_private
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: network_subnet_private
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}network-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "network_subnet_private" "compute") (eq "network_subnet_private" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}network_subnet_private{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: network_vpc
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: network_vpc
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}network-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "network_vpc" "compute") (eq "network_vpc" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}network_vpc{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: network_vpc_private
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: network_vpc_private
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}network-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "network_vpc_private" "compute") (eq "network_vpc_private" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}network_vpc_private{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: notification-gateway
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: notification-gateway
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}notification-gateway{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "notification-gateway" "compute") (eq "notification-gateway" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}notification-gateway{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: productcatalog
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: productcatalog
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}productcatalog{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "productcatalog" "compute") (eq "productcatalog" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}productcatalog{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: quota_admin_private
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: quota_admin_private
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}quota-management-service{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "quota_admin_private" "compute") (eq "quota_admin_private" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}quota_admin_private{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: quota_management
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: quota_management
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}quota-management-service{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "quota_management" "compute") (eq "quota_management" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}quota_management{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: security-insights
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: security-insights
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}security-insights{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "security-insights" "compute") (eq "security-insights" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}security-insights{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: storage
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: storage
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}storage-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "storage" "compute") (eq "storage" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}storage{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: storage_admin
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: storage_admin
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}storage-admin-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "storage_admin" "compute") (eq "storage_admin" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}storage_admin{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: storage_kms
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: storage_kms
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}storage-kms{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "storage_kms" "compute") (eq "storage_kms" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}storage_kms{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: storage_private
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: storage_private
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}storage-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "storage_private" "compute") (eq "storage_private" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}storage_private{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "regional") }}
      - name: training
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: training
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}training-api-server{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "training" "compute") (eq "training" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}training{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: usage
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: usage
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}usage{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "usage" "compute") (eq "usage" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}usage{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if or (eq $.Values.deployment "all") (eq $.Values.deployment "global") }}
      - name: user-credentials
        connect_timeout: 0.5s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: user-credentials
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.targetAddressPrefix }}user-credentials{{ .Values.targetAddressSuffix }}
                    port_value: 8443
        health_checks:
          timeout: 1s
          interval: 10s
          unhealthy_threshold: 2
          healthy_threshold: 2
          tcp_health_check: {}
{{- if $.Values.tls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if (eq $.Values.deployment "all") }}
{{- if or (eq "user-credentials" "compute") (eq "user-credentials" "compute_private") }}
            sni:  {{ .Values.targetAddressPrefix }}compute-api-server{{ .Values.targetAddressSuffix }}
{{- else   }}
            sni:  {{ .Values.targetAddressPrefix }}user-credentials{{ .Values.targetAddressSuffix }}
{{- end }}
{{- end }}
            common_tls_context:
              tls_certificate_sds_secret_configs:
                name: tls_sds
                sds_config:
                  path: /etc/envoy/sds.yaml
              validation_context:
                trusted_ca:
                  filename: /vault/secrets/ca.pem
                watched_directory:
                  path: /vault/secrets
                trust_chain_verification: {{ $trust_chain_verification }} 
{{- end }}
{{- end }}
{{- if .Values.statsd.enabled }}
      - name: statsd-exporter
        connect_timeout: 0.25s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: statsd-exporter
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.statsd.address }}
                    port_value: {{ .Values.statsd.port }}
    stats_sinks:
      - name: envoy.stat_sinks.statsd
        typed_config:
          "@type": type.googleapis.com/envoy.config.metrics.v3.StatsdSink
          tcp_cluster_name: statsd-exporter
          prefix: {{ .Values.statsd.prefix }}
{{- end }}
    admin:
      access_log_path: /dev/stdout
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 8090
