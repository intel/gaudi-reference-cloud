// Code generated by prototempl. DO NOT EDIT.
package main

import (
	"context"
	"log"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/pb"
	"google.golang.org/grpc"
)

func registerServers(ctx context.Context, conn *grpc.ClientConn, gwmux *runtime.ServeMux) {
	var err error
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterAuthzServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register AuthzService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingAccountServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingAccountService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingOptionServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingOptionService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingRateServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingRateService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingCreditServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingCreditService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingCouponServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingCouponService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingInvoiceServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingInvoiceService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingProductCatalogSyncServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingProductCatalogSyncService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterPaymentServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register PaymentService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingInstancesServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingInstancesService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingUsageServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingUsageService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingOpsActionServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingOpsActionService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterBillingDeactivateInstancesServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register BillingDeactivateInstancesService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudAccountEnrollServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudAccountEnrollService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudAccountServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudAccountService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudAccountMemberServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudAccountMemberService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudAccountAppClientServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudAccountAppClientService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterOtpServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register OtpService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudAccountInvitationServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudAccountInvitationService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudAccountInvitationMemberServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudAccountInvitationMemberService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudCreditsCreditServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudCreditsCreditService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudCreditsCouponServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudCreditsCouponService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterCloudMonitorServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudMonitorService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterCloudMonitorLogsServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register CloudMonitorLogsService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterSshPublicKeyServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register SshPublicKeyService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterInstanceServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register InstanceService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterInstanceGroupServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register InstanceGroupService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterInstanceTypeServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register InstanceTypeService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterMachineImageServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register MachineImageService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterVNetServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register VNetService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterLoadBalancerServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register LoadBalancerService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterConsoleInvoiceServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ConsoleInvoiceService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiAirflowSizeServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiAirflowSizeService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiAirflowVersionServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiAirflowVersionService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiAirflowConfServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiAirflowConfService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiAirflowServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiAirflowService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiDeploymentServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiDeploymentService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiDeploymentTaskServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiDeploymentTaskService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiPostgresSizeServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiPostgresSizeService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiPostgresVersionServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiPostgresVersionService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiPostgresServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiPostgresService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDpaiWorkspaceServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register DpaiWorkspaceService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterFleetAdminServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register FleetAdminService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterFleetAdminUIServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register FleetAdminUIService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterIksHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register Iks: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterIksSuperComputeHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register IksSuperCompute: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterIksAdminHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register IksAdmin: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterDispatcherHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register Dispatcher: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterKFServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register KFService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterMaasGatewayHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register MaasGateway: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterMeteringServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register MeteringService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterGlobalOperationsServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register GlobalOperationsService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterSubnetServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register SubnetService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterVPCServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register VPCService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterNotificationGatewayServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register NotificationGatewayService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterEmailNotificationServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register EmailNotificationService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterProductVendorServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ProductVendorService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterProductCatalogServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ProductCatalogService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterProductAccessServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ProductAccessService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterRegionServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register RegionService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterRegionAccessServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register RegionAccessService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterProductSyncServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ProductSyncService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterVendorSyncServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register VendorSyncService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterFamilyServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register FamilyService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterVendorServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register VendorService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterProductCatalogServiceV2Handler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ProductCatalogServiceV2: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterAccessServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register AccessService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterProductChangeRequestServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ProductChangeRequestService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterProductInterestServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ProductInterestService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterQuotaManagementServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register QuotaManagementService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterSecurityInsightsHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register SecurityInsights: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterFileStorageServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register FileStorageService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterObjectStorageServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register ObjectStorageService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterStorageAdminServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register StorageAdminService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterTrainingClusterServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register TrainingClusterService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "regional" {
		if err = pb.RegisterTrainingBatchUserServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register TrainingBatchUserService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterUsageServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register UsageService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterUsageRecordServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register UsageRecordService: %v", err)
		}
	}
	if config.Deployment == "all" || config.Deployment == "global" {
		if err = pb.RegisterUserCredentialsServiceHandler(ctx, gwmux, conn); err != nil {
			log.Fatalf("register UserCredentialsService: %v", err)
		}
	}
}
