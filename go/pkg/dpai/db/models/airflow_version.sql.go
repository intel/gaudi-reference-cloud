// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: airflow_version.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAirflowVersion = `-- name: CreateAirflowVersion :one
INSERT INTO airflow_version (
    id,
    name,
    version,
    airflow_version,
    python_version ,
    postgres_version ,
    redis_version ,
    executor_type ,
    image_reference ,
    chart_reference ,
    description ,
    backward_compatible_from ,
    backend_database_version_id,
    created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13,$14
)
RETURNING id, name, version, backend_database_version_id, airflow_version, python_version, postgres_version, redis_version, executor_type, image_reference, chart_reference, description, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
`

type CreateAirflowVersionParams struct {
	ID                       string
	Name                     string
	Version                  string
	AirflowVersion           string
	PythonVersion            string
	PostgresVersion          string
	RedisVersion             pgtype.Text
	ExecutorType             pgtype.Text
	ImageReference           []byte
	ChartReference           []byte
	Description              pgtype.Text
	BackwardCompatibleFrom   pgtype.Text
	BackendDatabaseVersionID string
	CreatedBy                string
}

func (q *Queries) CreateAirflowVersion(ctx context.Context, arg CreateAirflowVersionParams) (AirflowVersion, error) {
	row := q.db.QueryRow(ctx, createAirflowVersion,
		arg.ID,
		arg.Name,
		arg.Version,
		arg.AirflowVersion,
		arg.PythonVersion,
		arg.PostgresVersion,
		arg.RedisVersion,
		arg.ExecutorType,
		arg.ImageReference,
		arg.ChartReference,
		arg.Description,
		arg.BackwardCompatibleFrom,
		arg.BackendDatabaseVersionID,
		arg.CreatedBy,
	)
	var i AirflowVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.BackendDatabaseVersionID,
		&i.AirflowVersion,
		&i.PythonVersion,
		&i.PostgresVersion,
		&i.RedisVersion,
		&i.ExecutorType,
		&i.ImageReference,
		&i.ChartReference,
		&i.Description,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteAirflowVersion = `-- name: DeleteAirflowVersion :exec
update airflow_version
set is_active=false,
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteAirflowVersion(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteAirflowVersion, id)
	return err
}

const getAirflowVersionById = `-- name: GetAirflowVersionById :one
SELECT id, name, version, backend_database_version_id, airflow_version, python_version, postgres_version, redis_version, executor_type, image_reference, chart_reference, description, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM airflow_version
WHERE id = $1 
AND is_active = true
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetAirflowVersionById(ctx context.Context, id string) (AirflowVersion, error) {
	row := q.db.QueryRow(ctx, getAirflowVersionById, id)
	var i AirflowVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.BackendDatabaseVersionID,
		&i.AirflowVersion,
		&i.PythonVersion,
		&i.PostgresVersion,
		&i.RedisVersion,
		&i.ExecutorType,
		&i.ImageReference,
		&i.ChartReference,
		&i.Description,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAirflowVersionByName = `-- name: GetAirflowVersionByName :one
SELECT id, name, version, backend_database_version_id, airflow_version, python_version, postgres_version, redis_version, executor_type, image_reference, chart_reference, description, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM airflow_version
WHERE name = $1 
AND is_active = true
LIMIT 1
`

func (q *Queries) GetAirflowVersionByName(ctx context.Context, name string) (AirflowVersion, error) {
	row := q.db.QueryRow(ctx, getAirflowVersionByName, name)
	var i AirflowVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.BackendDatabaseVersionID,
		&i.AirflowVersion,
		&i.PythonVersion,
		&i.PostgresVersion,
		&i.RedisVersion,
		&i.ExecutorType,
		&i.ImageReference,
		&i.ChartReference,
		&i.Description,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listAirflowVersion = `-- name: ListAirflowVersion :many
SELECT id, name, version, backend_database_version_id, airflow_version, python_version, postgres_version, redis_version, executor_type, image_reference, chart_reference, description, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM airflow_version
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListAirflowVersion(ctx context.Context) ([]AirflowVersion, error) {
	rows, err := q.db.Query(ctx, listAirflowVersion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AirflowVersion
	for rows.Next() {
		var i AirflowVersion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Version,
			&i.BackendDatabaseVersionID,
			&i.AirflowVersion,
			&i.PythonVersion,
			&i.PostgresVersion,
			&i.RedisVersion,
			&i.ExecutorType,
			&i.ImageReference,
			&i.ChartReference,
			&i.Description,
			&i.BackwardCompatibleFrom,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAirflowVersionUpgrades = `-- name: ListAirflowVersionUpgrades :many
SELECT id, name, version, backend_database_version_id, airflow_version, python_version, postgres_version, redis_version, executor_type, image_reference, chart_reference, description, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
FROM airflow_version
WHERE version > (
        SELECT version
        FROM airflow_version
        WHERE id = $1
        AND is_active = true
    )
and backward_compatible_from <= (
        SELECT version
        FROM airflow_version
        WHERE id = $1
        AND is_active = true
    )
AND is_active = true
ORDER BY version DESC
`

func (q *Queries) ListAirflowVersionUpgrades(ctx context.Context, dollar_1 pgtype.Text) ([]AirflowVersion, error) {
	rows, err := q.db.Query(ctx, listAirflowVersionUpgrades, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AirflowVersion
	for rows.Next() {
		var i AirflowVersion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Version,
			&i.BackendDatabaseVersionID,
			&i.AirflowVersion,
			&i.PythonVersion,
			&i.PostgresVersion,
			&i.RedisVersion,
			&i.ExecutorType,
			&i.ImageReference,
			&i.ChartReference,
			&i.Description,
			&i.BackwardCompatibleFrom,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAirflowVersion = `-- name: UpdateAirflowVersion :one
UPDATE airflow_version
set 
    version = $2,
    description = $3,
    image_reference = $4,
    chart_reference = $5,
    backward_compatible_from = $6,
    updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING id, name, version, backend_database_version_id, airflow_version, python_version, postgres_version, redis_version, executor_type, image_reference, chart_reference, description, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
`

type UpdateAirflowVersionParams struct {
	ID                     string
	Version                string
	Description            pgtype.Text
	ImageReference         []byte
	ChartReference         []byte
	BackwardCompatibleFrom pgtype.Text
}

func (q *Queries) UpdateAirflowVersion(ctx context.Context, arg UpdateAirflowVersionParams) (AirflowVersion, error) {
	row := q.db.QueryRow(ctx, updateAirflowVersion,
		arg.ID,
		arg.Version,
		arg.Description,
		arg.ImageReference,
		arg.ChartReference,
		arg.BackwardCompatibleFrom,
	)
	var i AirflowVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.BackendDatabaseVersionID,
		&i.AirflowVersion,
		&i.PythonVersion,
		&i.PostgresVersion,
		&i.RedisVersion,
		&i.ExecutorType,
		&i.ImageReference,
		&i.ChartReference,
		&i.Description,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
