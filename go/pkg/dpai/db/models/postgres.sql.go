// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: postgres.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUniquePostgresId = `-- name: CheckUniquePostgresId :one
select count(*)  as cnt
from postgres
where id like $1 || '%'
`

func (q *Queries) CheckUniquePostgresId(ctx context.Context, dollar_1 pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, checkUniquePostgresId, dollar_1)
	var cnt int64
	err := row.Scan(&cnt)
	return cnt, err
}

const commitPostgresCreate = `-- name: CommitPostgresCreate :one
UPDATE postgres
set number_of_instances = coalesce($2, number_of_instances),
    number_of_pgpool_instances = coalesce($3, number_of_pgpool_instances),
    disk_size_in_gb = coalesce($4, disk_size_in_gb),
    server_url = coalesce($5, server_url),
    deployment_status_state = coalesce($6, deployment_status_state),
    deployment_status_display_name = coalesce($7, deployment_status_display_name),
    deployment_status_message = coalesce($8, deployment_status_message),
  updated_at = now()
WHERE id = $1
and is_active = true
RETURNING cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type CommitPostgresCreateParams struct {
	ID                          string
	NumberOfInstances           pgtype.Int4
	NumberOfPgpoolInstances     pgtype.Int4
	DiskSizeInGb                pgtype.Int4
	ServerUrl                   pgtype.Text
	DeploymentStatusState       pgtype.Text
	DeploymentStatusDisplayName pgtype.Text
	DeploymentStatusMessage     pgtype.Text
}

func (q *Queries) CommitPostgresCreate(ctx context.Context, arg CommitPostgresCreateParams) (Postgres, error) {
	row := q.db.QueryRow(ctx, commitPostgresCreate,
		arg.ID,
		arg.NumberOfInstances,
		arg.NumberOfPgpoolInstances,
		arg.DiskSizeInGb,
		arg.ServerUrl,
		arg.DeploymentStatusState,
		arg.DeploymentStatusDisplayName,
		arg.DeploymentStatusMessage,
	)
	var i Postgres
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.NumberOfPgpoolInstances,
		&i.DiskSizeInGb,
		&i.AdminUsername,
		&i.AdminPasswordSecretReference,
		&i.AdvanceConfiguration,
		&i.InitialDatabaseName,
		&i.Tags,
		&i.ServerUrl,
		&i.NodeGroupID,
		&i.DeploymentID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const createPostgres = `-- name: CreatePostgres :one

INSERT INTO postgres (
        id,
        cloud_account_id,
        workspace_id,
        name,
        version_id,
        size_id,
        description,
        number_of_instances,
        number_of_pgpool_instances,
        disk_size_in_gb,
        initial_database_name,
        admin_username,
        admin_password_secret_reference,
        advance_configuration,
        tags,
        server_url,
        node_group_id,
        deployment_id,
        deployment_status_state,
        deployment_status_display_name,
        deployment_status_message,
        created_by
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22
    ) RETURNING cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type CreatePostgresParams struct {
	ID                           string
	CloudAccountID               string
	WorkspaceID                  string
	Name                         string
	VersionID                    string
	SizeID                       string
	Description                  pgtype.Text
	NumberOfInstances            pgtype.Int4
	NumberOfPgpoolInstances      pgtype.Int4
	DiskSizeInGb                 pgtype.Int4
	InitialDatabaseName          pgtype.Text
	AdminUsername                string
	AdminPasswordSecretReference []byte
	AdvanceConfiguration         []byte
	Tags                         []byte
	ServerUrl                    pgtype.Text
	NodeGroupID                  string
	DeploymentID                 string
	DeploymentStatusState        string
	DeploymentStatusDisplayName  pgtype.Text
	DeploymentStatusMessage      pgtype.Text
	CreatedBy                    string
}

func (q *Queries) CreatePostgres(ctx context.Context, arg CreatePostgresParams) (Postgres, error) {
	row := q.db.QueryRow(ctx, createPostgres,
		arg.ID,
		arg.CloudAccountID,
		arg.WorkspaceID,
		arg.Name,
		arg.VersionID,
		arg.SizeID,
		arg.Description,
		arg.NumberOfInstances,
		arg.NumberOfPgpoolInstances,
		arg.DiskSizeInGb,
		arg.InitialDatabaseName,
		arg.AdminUsername,
		arg.AdminPasswordSecretReference,
		arg.AdvanceConfiguration,
		arg.Tags,
		arg.ServerUrl,
		arg.NodeGroupID,
		arg.DeploymentID,
		arg.DeploymentStatusState,
		arg.DeploymentStatusDisplayName,
		arg.DeploymentStatusMessage,
		arg.CreatedBy,
	)
	var i Postgres
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.NumberOfPgpoolInstances,
		&i.DiskSizeInGb,
		&i.AdminUsername,
		&i.AdminPasswordSecretReference,
		&i.AdvanceConfiguration,
		&i.InitialDatabaseName,
		&i.Tags,
		&i.ServerUrl,
		&i.NodeGroupID,
		&i.DeploymentID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deletePostgres = `-- name: DeletePostgres :exec
UPDATE postgres
set is_active=false,
  updated_at = now()
WHERE id = $1
AND is_active = true
`

func (q *Queries) DeletePostgres(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePostgres, id)
	return err
}

const getPostgresById = `-- name: GetPostgresById :one
SELECT cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by FROM postgres WHERE id = $1 AND is_active = true LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetPostgresById(ctx context.Context, id string) (Postgres, error) {
	row := q.db.QueryRow(ctx, getPostgresById, id)
	var i Postgres
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.NumberOfPgpoolInstances,
		&i.DiskSizeInGb,
		&i.AdminUsername,
		&i.AdminPasswordSecretReference,
		&i.AdvanceConfiguration,
		&i.InitialDatabaseName,
		&i.Tags,
		&i.ServerUrl,
		&i.NodeGroupID,
		&i.DeploymentID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getPostgresByName = `-- name: GetPostgresByName :one
SELECT cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by FROM postgres WHERE workspace_id = $1 and name = $2 AND is_active = true LIMIT 1
`

type GetPostgresByNameParams struct {
	WorkspaceID string
	Name        string
}

func (q *Queries) GetPostgresByName(ctx context.Context, arg GetPostgresByNameParams) (Postgres, error) {
	row := q.db.QueryRow(ctx, getPostgresByName, arg.WorkspaceID, arg.Name)
	var i Postgres
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.NumberOfPgpoolInstances,
		&i.DiskSizeInGb,
		&i.AdminUsername,
		&i.AdminPasswordSecretReference,
		&i.AdvanceConfiguration,
		&i.InitialDatabaseName,
		&i.Tags,
		&i.ServerUrl,
		&i.NodeGroupID,
		&i.DeploymentID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getUpdatePostgres = `-- name: GetUpdatePostgres :one
SELECT id, description, tags FROM postgres WHERE id = $1 AND is_active = true LIMIT 1
`

type GetUpdatePostgresRow struct {
	ID          string
	Description pgtype.Text
	Tags        []byte
}

func (q *Queries) GetUpdatePostgres(ctx context.Context, id string) (GetUpdatePostgresRow, error) {
	row := q.db.QueryRow(ctx, getUpdatePostgres, id)
	var i GetUpdatePostgresRow
	err := row.Scan(&i.ID, &i.Description, &i.Tags)
	return i, err
}

const listPostgres = `-- name: ListPostgres :many
SELECT cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by FROM postgres 
WHERE 
cloud_account_id = $1
and (lower(workspace_id) = lower(coalesce($2, workspace_id)) or workspace_id is null)
AND is_active = true 
ORDER BY name
LIMIT $4 
OFFSET $3
`

type ListPostgresParams struct {
	CloudAccountID string
	WorkspaceID    pgtype.Text
	Offset         int64
	Limit          int64
}

func (q *Queries) ListPostgres(ctx context.Context, arg ListPostgresParams) ([]Postgres, error) {
	rows, err := q.db.Query(ctx, listPostgres,
		arg.CloudAccountID,
		arg.WorkspaceID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Postgres
	for rows.Next() {
		var i Postgres
		if err := rows.Scan(
			&i.CloudAccountID,
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.VersionID,
			&i.SizeID,
			&i.NumberOfInstances,
			&i.NumberOfPgpoolInstances,
			&i.DiskSizeInGb,
			&i.AdminUsername,
			&i.AdminPasswordSecretReference,
			&i.AdvanceConfiguration,
			&i.InitialDatabaseName,
			&i.Tags,
			&i.ServerUrl,
			&i.NodeGroupID,
			&i.DeploymentID,
			&i.DeploymentStatusState,
			&i.DeploymentStatusDisplayName,
			&i.DeploymentStatusMessage,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resizePostgres = `-- name: ResizePostgres :one
UPDATE postgres
set
    size_id = $2,
    number_of_instances = $3,
    number_of_pgpool_instances = $4,
    disk_size_in_gb = $5,
    updated_at = now()
WHERE id = $1 
AND is_active = true
RETURNING cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type ResizePostgresParams struct {
	ID                      string
	SizeID                  string
	NumberOfInstances       pgtype.Int4
	NumberOfPgpoolInstances pgtype.Int4
	DiskSizeInGb            pgtype.Int4
}

func (q *Queries) ResizePostgres(ctx context.Context, arg ResizePostgresParams) (Postgres, error) {
	row := q.db.QueryRow(ctx, resizePostgres,
		arg.ID,
		arg.SizeID,
		arg.NumberOfInstances,
		arg.NumberOfPgpoolInstances,
		arg.DiskSizeInGb,
	)
	var i Postgres
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.NumberOfPgpoolInstances,
		&i.DiskSizeInGb,
		&i.AdminUsername,
		&i.AdminPasswordSecretReference,
		&i.AdvanceConfiguration,
		&i.InitialDatabaseName,
		&i.Tags,
		&i.ServerUrl,
		&i.NodeGroupID,
		&i.DeploymentID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const restartPostgres = `-- name: RestartPostgres :exec
UPDATE postgres
set updated_at = now()
WHERE id = $1
AND is_active = true
`

func (q *Queries) RestartPostgres(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, restartPostgres, id)
	return err
}

const updatePostgres = `-- name: UpdatePostgres :one
UPDATE postgres
set
    description = $2,
    tags = $3,
    updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type UpdatePostgresParams struct {
	ID          string
	Description pgtype.Text
	Tags        []byte
}

func (q *Queries) UpdatePostgres(ctx context.Context, arg UpdatePostgresParams) (Postgres, error) {
	row := q.db.QueryRow(ctx, updatePostgres, arg.ID, arg.Description, arg.Tags)
	var i Postgres
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.NumberOfPgpoolInstances,
		&i.DiskSizeInGb,
		&i.AdminUsername,
		&i.AdminPasswordSecretReference,
		&i.AdvanceConfiguration,
		&i.InitialDatabaseName,
		&i.Tags,
		&i.ServerUrl,
		&i.NodeGroupID,
		&i.DeploymentID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const upgradePostgres = `-- name: UpgradePostgres :one
UPDATE postgres
set
    version_id = $2,
    updated_at = now()
WHERE id = $1 
AND is_active = true
RETURNING cloud_account_id, workspace_id, id, name, description, version_id, size_id, number_of_instances, number_of_pgpool_instances, disk_size_in_gb, admin_username, admin_password_secret_reference, advance_configuration, initial_database_name, tags, server_url, node_group_id, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type UpgradePostgresParams struct {
	ID        string
	VersionID string
}

func (q *Queries) UpgradePostgres(ctx context.Context, arg UpgradePostgresParams) (Postgres, error) {
	row := q.db.QueryRow(ctx, upgradePostgres, arg.ID, arg.VersionID)
	var i Postgres
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.NumberOfPgpoolInstances,
		&i.DiskSizeInGb,
		&i.AdminUsername,
		&i.AdminPasswordSecretReference,
		&i.AdvanceConfiguration,
		&i.InitialDatabaseName,
		&i.Tags,
		&i.ServerUrl,
		&i.NodeGroupID,
		&i.DeploymentID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
