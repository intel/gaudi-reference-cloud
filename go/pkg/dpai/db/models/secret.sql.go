// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: secret.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secret (
    encrypted_password,
    nonce
) VALUES (
  $1, $2
)
RETURNING id, created_at, encrypted_password, nonce
`

type CreateSecretParams struct {
	EncryptedPassword string
	Nonce             string
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secret, error) {
	row := q.db.QueryRow(ctx, createSecret, arg.EncryptedPassword, arg.Nonce)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.EncryptedPassword,
		&i.Nonce,
	)
	return i, err
}

const deleteSecret = `-- name: DeleteSecret :exec
delete from secret
WHERE id = $1
`

func (q *Queries) DeleteSecret(ctx context.Context, id pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteSecret, id)
	return err
}

const getSecret = `-- name: GetSecret :one
SELECT id, created_at, encrypted_password, nonce FROM secret
WHERE id = $1 
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetSecret(ctx context.Context, id pgtype.Int4) (Secret, error) {
	row := q.db.QueryRow(ctx, getSecret, id)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.EncryptedPassword,
		&i.Nonce,
	)
	return i, err
}

const listSecret = `-- name: ListSecret :many
SELECT id, created_at, encrypted_password, nonce FROM secret
ORDER BY created_at desc
`

func (q *Queries) ListSecret(ctx context.Context) ([]Secret, error) {
	rows, err := q.db.Query(ctx, listSecret)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.EncryptedPassword,
			&i.Nonce,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purgeSecret = `-- name: PurgeSecret :exec
DELETE FROM secret
WHERE created_at < NOW() - INTERVAL '6 hours'
`

func (q *Queries) PurgeSecret(ctx context.Context) error {
	_, err := q.db.Exec(ctx, purgeSecret)
	return err
}
