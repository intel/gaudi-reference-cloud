// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deployment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUniqueDeploymentId = `-- name: CheckUniqueDeploymentId :one
select count(*)  as cnt
from deployment
where id like $1 || '%'
`

func (q *Queries) CheckUniqueDeploymentId(ctx context.Context, dollar_1 pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, checkUniqueDeploymentId, dollar_1)
	var cnt int64
	err := row.Scan(&cnt)
	return cnt, err
}

const countListDeployments = `-- name: CountListDeployments :one
SELECT count(1) FROM deployment
WHERE cloud_account_id=$1
and (workspace_id= coalesce($2, workspace_id) or workspace_id is null)
and (service_id = coalesce($3, service_id) or service_id is null)
and (service_type = coalesce($4, service_type) or service_type is null)
and change_indicator = coalesce($5, change_indicator)
and created_by = coalesce($6, created_by)
and (parent_deployment_id = coalesce($7, parent_deployment_id) or parent_deployment_id is null)
and (status_state = coalesce($8, status_state) or status_state is null)
`

type CountListDeploymentsParams struct {
	CloudAccountID     pgtype.Text
	WorkspaceID        pgtype.Text
	ServiceID          pgtype.Text
	ServiceType        pgtype.Text
	ChangeIndicator    pgtype.Text
	CreatedBy          pgtype.Text
	ParentDeploymentID pgtype.Text
	StatusState        pgtype.Text
}

func (q *Queries) CountListDeployments(ctx context.Context, arg CountListDeploymentsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countListDeployments,
		arg.CloudAccountID,
		arg.WorkspaceID,
		arg.ServiceID,
		arg.ServiceType,
		arg.ChangeIndicator,
		arg.CreatedBy,
		arg.ParentDeploymentID,
		arg.StatusState,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDeployment = `-- name: CreateDeployment :one
INSERT INTO deployment (
  cloud_account_id, workspace_id, id, service_id, service_type, change_indicator, input_payload, parent_deployment_id, created_by
) VALUES (
  $1, $2, $3,  $4, $5, $6, $7, $8, $9
)
RETURNING cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at
`

type CreateDeploymentParams struct {
	CloudAccountID     pgtype.Text
	WorkspaceID        pgtype.Text
	ID                 string
	ServiceID          pgtype.Text
	ServiceType        string
	ChangeIndicator    string
	InputPayload       []byte
	ParentDeploymentID pgtype.Text
	CreatedBy          string
}

func (q *Queries) CreateDeployment(ctx context.Context, arg CreateDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, createDeployment,
		arg.CloudAccountID,
		arg.WorkspaceID,
		arg.ID,
		arg.ServiceID,
		arg.ServiceType,
		arg.ChangeIndicator,
		arg.InputPayload,
		arg.ParentDeploymentID,
		arg.CreatedBy,
	)
	var i Deployment
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDeployment = `-- name: DeleteDeployment :exec
DELETE FROM deployment
WHERE id = $1
`

func (q *Queries) DeleteDeployment(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteDeployment, id)
	return err
}

const getDeployment = `-- name: GetDeployment :one
SELECT cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at FROM deployment
WHERE cloud_account_id= coalesce($1, cloud_account_id)
and id = $2 LIMIT 1
`

type GetDeploymentParams struct {
	CloudAccountID pgtype.Text
	ID             string
}

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetDeployment(ctx context.Context, arg GetDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, getDeployment, arg.CloudAccountID, arg.ID)
	var i Deployment
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getUpdateDeployment = `-- name: GetUpdateDeployment :one


SELECT id, status_state, error_message FROM deployment
WHERE  id = $1 LIMIT 1
`

type GetUpdateDeploymentRow struct {
	ID           string
	StatusState  string
	ErrorMessage pgtype.Text
}

// -- name: CreateDeploymentForCreate :one
// INSERT INTO deployment (
//
//	cloud_account_id, id, request_id, service_type, change_indicator, input_payload, created_by
//
// ) VALUES (
//
//	$1, $2, $3,  $4, 'CREATE', $5, $6
//
// )
// RETURNING *;
// -- name: CreateDeploymentForUpdateOrDelete :one
// INSERT INTO deployment (
//
//	cloud_account_id, id, service_id, service_type, change_indicator, input_payload, created_by
//
// ) VALUES (
//
//	$1, $2, $3, $4, $5, $6, $7
//
// )
// RETURNING *;
func (q *Queries) GetUpdateDeployment(ctx context.Context, id string) (GetUpdateDeploymentRow, error) {
	row := q.db.QueryRow(ctx, getUpdateDeployment, id)
	var i GetUpdateDeploymentRow
	err := row.Scan(&i.ID, &i.StatusState, &i.ErrorMessage)
	return i, err
}

const listDeployments = `-- name: ListDeployments :many
SELECT cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at FROM deployment
WHERE cloud_account_id=$1
and (workspace_id= coalesce($2, workspace_id) or workspace_id is null)
and (service_id = coalesce($3, service_id) or service_id is null)
and (service_type = coalesce($4, service_type) or service_type is null)
and change_indicator = coalesce($5, change_indicator)
and created_by = coalesce($6, created_by)
and (parent_deployment_id = coalesce($7, parent_deployment_id) or parent_deployment_id is null)
and (status_state = coalesce($8, status_state) or status_state is null)
ORDER BY created_at desc
LIMIT $10 
OFFSET $9
`

type ListDeploymentsParams struct {
	CloudAccountID     pgtype.Text
	WorkspaceID        pgtype.Text
	ServiceID          pgtype.Text
	ServiceType        pgtype.Text
	ChangeIndicator    pgtype.Text
	CreatedBy          pgtype.Text
	ParentDeploymentID pgtype.Text
	StatusState        pgtype.Text
	Offset             int64
	Limit              int64
}

func (q *Queries) ListDeployments(ctx context.Context, arg ListDeploymentsParams) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, listDeployments,
		arg.CloudAccountID,
		arg.WorkspaceID,
		arg.ServiceID,
		arg.ServiceType,
		arg.ChangeIndicator,
		arg.CreatedBy,
		arg.ParentDeploymentID,
		arg.StatusState,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.CloudAccountID,
			&i.WorkspaceID,
			&i.ID,
			&i.ParentDeploymentID,
			&i.ServiceID,
			&i.ServiceType,
			&i.ChangeIndicator,
			&i.InputPayload,
			&i.OutputPayload,
			&i.StatusState,
			&i.StatusDisplayName,
			&i.StatusMessage,
			&i.ErrorMessage,
			&i.NodeGroupID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeploymentsByAccountId = `-- name: ListDeploymentsByAccountId :many
SELECT cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at FROM deployment
WHERE cloud_account_id=$1
ORDER BY service_type, created_at
`

func (q *Queries) ListDeploymentsByAccountId(ctx context.Context, cloudAccountID pgtype.Text) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, listDeploymentsByAccountId, cloudAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.CloudAccountID,
			&i.WorkspaceID,
			&i.ID,
			&i.ParentDeploymentID,
			&i.ServiceID,
			&i.ServiceType,
			&i.ChangeIndicator,
			&i.InputPayload,
			&i.OutputPayload,
			&i.StatusState,
			&i.StatusDisplayName,
			&i.StatusMessage,
			&i.ErrorMessage,
			&i.NodeGroupID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeploymentsByWorkspaceId = `-- name: ListDeploymentsByWorkspaceId :many
SELECT cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at FROM deployment
WHERE cloud_account_id=$1
and workspace_id=$2
ORDER BY service_type, created_at
`

type ListDeploymentsByWorkspaceIdParams struct {
	CloudAccountID pgtype.Text
	WorkspaceID    pgtype.Text
}

func (q *Queries) ListDeploymentsByWorkspaceId(ctx context.Context, arg ListDeploymentsByWorkspaceIdParams) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, listDeploymentsByWorkspaceId, arg.CloudAccountID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.CloudAccountID,
			&i.WorkspaceID,
			&i.ID,
			&i.ParentDeploymentID,
			&i.ServiceID,
			&i.ServiceType,
			&i.ChangeIndicator,
			&i.InputPayload,
			&i.OutputPayload,
			&i.StatusState,
			&i.StatusDisplayName,
			&i.StatusMessage,
			&i.ErrorMessage,
			&i.NodeGroupID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeployment = `-- name: UpdateDeployment :one
UPDATE deployment
  set status_state = $2,
  status_display_name = $3,
  status_message = $4,
  error_message = $5,
  updated_at = now()
WHERE id = $1
RETURNING cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at
`

type UpdateDeploymentParams struct {
	ID                string
	StatusState       string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	ErrorMessage      pgtype.Text
}

func (q *Queries) UpdateDeployment(ctx context.Context, arg UpdateDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, updateDeployment,
		arg.ID,
		arg.StatusState,
		arg.StatusDisplayName,
		arg.StatusMessage,
		arg.ErrorMessage,
	)
	var i Deployment
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeploymentNodeGroupId = `-- name: UpdateDeploymentNodeGroupId :one
UPDATE deployment
  set node_group_id = $2,
  updated_at = now()
WHERE id = $1
RETURNING cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at
`

type UpdateDeploymentNodeGroupIdParams struct {
	ID          string
	NodeGroupID pgtype.Text
}

func (q *Queries) UpdateDeploymentNodeGroupId(ctx context.Context, arg UpdateDeploymentNodeGroupIdParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, updateDeploymentNodeGroupId, arg.ID, arg.NodeGroupID)
	var i Deployment
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeploymentStatusAsFailed = `-- name: UpdateDeploymentStatusAsFailed :one
UPDATE deployment
  set status_state = 'DPAI_FAILED',
  status_display_name = $2,
  status_message = $3,
  error_message = $4,
  updated_at = now()
WHERE id = $1
RETURNING cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at
`

type UpdateDeploymentStatusAsFailedParams struct {
	ID                string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	ErrorMessage      pgtype.Text
}

func (q *Queries) UpdateDeploymentStatusAsFailed(ctx context.Context, arg UpdateDeploymentStatusAsFailedParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, updateDeploymentStatusAsFailed,
		arg.ID,
		arg.StatusDisplayName,
		arg.StatusMessage,
		arg.ErrorMessage,
	)
	var i Deployment
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeploymentStatusAsRunning = `-- name: UpdateDeploymentStatusAsRunning :one
UPDATE deployment
  set status_state = 'DPAI_RUNNING',
    status_display_name = $2,
  status_message = $3,
  updated_at = now()
WHERE id = $1
RETURNING cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at
`

type UpdateDeploymentStatusAsRunningParams struct {
	ID                string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
}

func (q *Queries) UpdateDeploymentStatusAsRunning(ctx context.Context, arg UpdateDeploymentStatusAsRunningParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, updateDeploymentStatusAsRunning, arg.ID, arg.StatusDisplayName, arg.StatusMessage)
	var i Deployment
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeploymentStatusAsSuccess = `-- name: UpdateDeploymentStatusAsSuccess :one
UPDATE deployment
  set status_state = 'DPAI_SUCCESS',
    status_display_name = $3,
  status_message = $4,
  output_payload = $2,
  updated_at = now()
WHERE id = $1
RETURNING cloud_account_id, workspace_id, id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, created_at, created_by, updated_at
`

type UpdateDeploymentStatusAsSuccessParams struct {
	ID                string
	OutputPayload     []byte
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
}

func (q *Queries) UpdateDeploymentStatusAsSuccess(ctx context.Context, arg UpdateDeploymentStatusAsSuccessParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, updateDeploymentStatusAsSuccess,
		arg.ID,
		arg.OutputPayload,
		arg.StatusDisplayName,
		arg.StatusMessage,
	)
	var i Deployment
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}
