// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hms_conf.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHmsConf = `-- name: CreateHmsConf :one
INSERT INTO hms_conf (
  id, hms_id, group_id, key, value, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, hms_id, group_id, key, value, is_active, created_at, created_by, updated_at, updated_by
`

type CreateHmsConfParams struct {
	ID        string
	HmsID     string
	GroupID   string
	Key       string
	Value     pgtype.Text
	CreatedBy string
}

func (q *Queries) CreateHmsConf(ctx context.Context, arg CreateHmsConfParams) (HmsConf, error) {
	row := q.db.QueryRow(ctx, createHmsConf,
		arg.ID,
		arg.HmsID,
		arg.GroupID,
		arg.Key,
		arg.Value,
		arg.CreatedBy,
	)
	var i HmsConf
	err := row.Scan(
		&i.ID,
		&i.HmsID,
		&i.GroupID,
		&i.Key,
		&i.Value,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteHmsConf = `-- name: DeleteHmsConf :exec
UPDATE hms_conf
set is_active=false,
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteHmsConf(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteHmsConf, id)
	return err
}

const deleteHmsConfByHmsId = `-- name: DeleteHmsConfByHmsId :exec
UPDATE hms_conf
set is_active=false,
  updated_at = now()
WHERE hms_id = $1
`

func (q *Queries) DeleteHmsConfByHmsId(ctx context.Context, hmsID string) error {
	_, err := q.db.Exec(ctx, deleteHmsConfByHmsId, hmsID)
	return err
}

const getHmsConfById = `-- name: GetHmsConfById :one
SELECT id, hms_id, group_id, key, value, is_active, created_at, created_by, updated_at, updated_by FROM hms_conf
WHERE id = $1
AND is_active = true
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetHmsConfById(ctx context.Context, id string) (HmsConf, error) {
	row := q.db.QueryRow(ctx, getHmsConfById, id)
	var i HmsConf
	err := row.Scan(
		&i.ID,
		&i.HmsID,
		&i.GroupID,
		&i.Key,
		&i.Value,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listHmsConf = `-- name: ListHmsConf :many
SELECT id, hms_id, group_id, key, value, is_active, created_at, created_by, updated_at, updated_by FROM hms_conf
WHERE hms_id = $1 
AND is_active = true
order by group_id, key
`

func (q *Queries) ListHmsConf(ctx context.Context, hmsID string) ([]HmsConf, error) {
	rows, err := q.db.Query(ctx, listHmsConf, hmsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HmsConf
	for rows.Next() {
		var i HmsConf
		if err := rows.Scan(
			&i.ID,
			&i.HmsID,
			&i.GroupID,
			&i.Key,
			&i.Value,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHmsConfByGroupId = `-- name: ListHmsConfByGroupId :many
SELECT id, hms_id, group_id, key, value, is_active, created_at, created_by, updated_at, updated_by FROM hms_conf
WHERE hms_id = $1 
and group_id = $2
AND is_active = true
ORDER BY key
`

type ListHmsConfByGroupIdParams struct {
	HmsID   string
	GroupID string
}

func (q *Queries) ListHmsConfByGroupId(ctx context.Context, arg ListHmsConfByGroupIdParams) ([]HmsConf, error) {
	rows, err := q.db.Query(ctx, listHmsConfByGroupId, arg.HmsID, arg.GroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HmsConf
	for rows.Next() {
		var i HmsConf
		if err := rows.Scan(
			&i.ID,
			&i.HmsID,
			&i.GroupID,
			&i.Key,
			&i.Value,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHmsConf = `-- name: UpdateHmsConf :one
UPDATE hms_conf
  set key = $2,
  value = $3,
  updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING id, hms_id, group_id, key, value, is_active, created_at, created_by, updated_at, updated_by
`

type UpdateHmsConfParams struct {
	ID    string
	Key   string
	Value pgtype.Text
}

func (q *Queries) UpdateHmsConf(ctx context.Context, arg UpdateHmsConfParams) (HmsConf, error) {
	row := q.db.QueryRow(ctx, updateHmsConf, arg.ID, arg.Key, arg.Value)
	var i HmsConf
	err := row.Scan(
		&i.ID,
		&i.HmsID,
		&i.GroupID,
		&i.Key,
		&i.Value,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
