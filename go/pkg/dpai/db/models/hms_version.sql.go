// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hms_version.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHmsVersion = `-- name: CreateHmsVersion :one


INSERT INTO hms_version (
  id, name, description, version, hms_version,
  image_reference, chart_reference,backward_compatible_from, backend_database_version_id, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, name, description, version, hms_version, backend_database_version_id, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
`

type CreateHmsVersionParams struct {
	ID                       string
	Name                     string
	Description              pgtype.Text
	Version                  string
	HmsVersion               string
	ImageReference           []byte
	ChartReference           []byte
	BackwardCompatibleFrom   pgtype.Text
	BackendDatabaseVersionID string
	CreatedBy                string
}

func (q *Queries) CreateHmsVersion(ctx context.Context, arg CreateHmsVersionParams) (HmsVersion, error) {
	row := q.db.QueryRow(ctx, createHmsVersion,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Version,
		arg.HmsVersion,
		arg.ImageReference,
		arg.ChartReference,
		arg.BackwardCompatibleFrom,
		arg.BackendDatabaseVersionID,
		arg.CreatedBy,
	)
	var i HmsVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.HmsVersion,
		&i.BackendDatabaseVersionID,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteHmsVersion = `-- name: DeleteHmsVersion :exec
UPDATE hms_version
set is_active=false,
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteHmsVersion(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteHmsVersion, id)
	return err
}

const getHmsVersionById = `-- name: GetHmsVersionById :one
SELECT id, name, description, version, hms_version, backend_database_version_id, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM hms_version
WHERE id = $1
AND is_active = true
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetHmsVersionById(ctx context.Context, id string) (HmsVersion, error) {
	row := q.db.QueryRow(ctx, getHmsVersionById, id)
	var i HmsVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.HmsVersion,
		&i.BackendDatabaseVersionID,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getHmsVersionByName = `-- name: GetHmsVersionByName :one
SELECT id, name, description, version, hms_version, backend_database_version_id, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM hms_version
WHERE name = $1 
AND is_active = true
LIMIT 1
`

func (q *Queries) GetHmsVersionByName(ctx context.Context, name string) (HmsVersion, error) {
	row := q.db.QueryRow(ctx, getHmsVersionByName, name)
	var i HmsVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.HmsVersion,
		&i.BackendDatabaseVersionID,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listHmsVersion = `-- name: ListHmsVersion :many
SELECT id, name, description, version, hms_version, backend_database_version_id, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM hms_version
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListHmsVersion(ctx context.Context) ([]HmsVersion, error) {
	rows, err := q.db.Query(ctx, listHmsVersion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HmsVersion
	for rows.Next() {
		var i HmsVersion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.HmsVersion,
			&i.BackendDatabaseVersionID,
			&i.ImageReference,
			&i.ChartReference,
			&i.BackwardCompatibleFrom,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHmsVersionUpgrades = `-- name: ListHmsVersionUpgrades :many
SELECT id, name, description, version, hms_version, backend_database_version_id, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
FROM hms_version
WHERE version > (
        SELECT version
        FROM hms_version
        WHERE id = $1
        AND is_active = true
    )
and backward_compatible_from <= (
        SELECT version
        FROM hms_version
        WHERE id = $1
        AND is_active = true
    )
AND is_active = true
ORDER BY version DESC
`

func (q *Queries) ListHmsVersionUpgrades(ctx context.Context, dollar_1 pgtype.Text) ([]HmsVersion, error) {
	rows, err := q.db.Query(ctx, listHmsVersionUpgrades, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HmsVersion
	for rows.Next() {
		var i HmsVersion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.HmsVersion,
			&i.BackendDatabaseVersionID,
			&i.ImageReference,
			&i.ChartReference,
			&i.BackwardCompatibleFrom,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHmsVersion = `-- name: UpdateHmsVersion :one
UPDATE hms_version
  set description = $2,
  image_reference = $3,
  chart_reference = $4,
  backward_compatible_from = $5,
  updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING id, name, description, version, hms_version, backend_database_version_id, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
`

type UpdateHmsVersionParams struct {
	ID                     string
	Description            pgtype.Text
	ImageReference         []byte
	ChartReference         []byte
	BackwardCompatibleFrom pgtype.Text
}

func (q *Queries) UpdateHmsVersion(ctx context.Context, arg UpdateHmsVersionParams) (HmsVersion, error) {
	row := q.db.QueryRow(ctx, updateHmsVersion,
		arg.ID,
		arg.Description,
		arg.ImageReference,
		arg.ChartReference,
		arg.BackwardCompatibleFrom,
	)
	var i HmsVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.HmsVersion,
		&i.BackendDatabaseVersionID,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
