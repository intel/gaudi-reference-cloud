// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workspace.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUniqueWorkspaceId = `-- name: CheckUniqueWorkspaceId :one
select count(*)  as cnt
from workspace
where id like $1 || '%'
`

func (q *Queries) CheckUniqueWorkspaceId(ctx context.Context, dollar_1 pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, checkUniqueWorkspaceId, dollar_1)
	var cnt int64
	err := row.Scan(&cnt)
	return cnt, err
}

const countListWorkspaces = `-- name: CountListWorkspaces :one
SELECT count(1)
FROM workspace w 
join deployment d
on w.deployment_id = d.id
WHERE w.cloud_account_id = $1
AND w.name = coalesce($2, w.name)
AND (d.status_display_name = coalesce($3, d.status_display_name) or d.status_display_name is null)
AND w.is_active = true
`

type CountListWorkspacesParams struct {
	CloudAccountID    string
	Name              pgtype.Text
	StatusDisplayName pgtype.Text
}

func (q *Queries) CountListWorkspaces(ctx context.Context, arg CountListWorkspacesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countListWorkspaces, arg.CloudAccountID, arg.Name, arg.StatusDisplayName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWorkspace = `-- name: CreateWorkspace :one


INSERT INTO workspace (
  id, cloud_account_id, name, region, description, tags, deployment_id, deployment_status_state, deployment_status_display_name, deployment_status_message, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING cloud_account_id, id, name, region, description, tags, deployment_id, iks_id, management_nodegroup_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by, iks_cluster_name, ssh_key_name
`

type CreateWorkspaceParams struct {
	ID                          string
	CloudAccountID              string
	Name                        string
	Region                      pgtype.Text
	Description                 pgtype.Text
	Tags                        []byte
	DeploymentID                string
	DeploymentStatusState       string
	DeploymentStatusDisplayName pgtype.Text
	DeploymentStatusMessage     pgtype.Text
	CreatedBy                   string
}

// -- name: CreateWorkspaceRequest :one
// INSERT INTO workspace_form (
//
//	id, cloud_account_id, name, region, size_id, description, tags, created_by
//
// ) VALUES (
//
//	$1, $2, $3, $4, $5, $6, $7, $8
//
// )
// RETURNING *;
// -- name: GetWorkspaceFormById :one
// SELECT * FROM workspace_form
// WHERE id = $1 LIMIT 1;
func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace,
		arg.ID,
		arg.CloudAccountID,
		arg.Name,
		arg.Region,
		arg.Description,
		arg.Tags,
		arg.DeploymentID,
		arg.DeploymentStatusState,
		arg.DeploymentStatusDisplayName,
		arg.DeploymentStatusMessage,
		arg.CreatedBy,
	)
	var i Workspace
	err := row.Scan(
		&i.CloudAccountID,
		&i.ID,
		&i.Name,
		&i.Region,
		&i.Description,
		&i.Tags,
		&i.DeploymentID,
		&i.IksID,
		&i.ManagementNodegroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.IksClusterName,
		&i.SshKeyName,
	)
	return i, err
}

const deleteGatewayForWorkspaceService = `-- name: DeleteGatewayForWorkspaceService :exec

delete from workspace_service_gateways 
  where cloud_account_id = $1 
    and dns_fqdn = $2
`

type DeleteGatewayForWorkspaceServiceParams struct {
	CloudAccountID string
	DnsFqdn        string
}

// DOES A SINGLE ROW DELETE
func (q *Queries) DeleteGatewayForWorkspaceService(ctx context.Context, arg DeleteGatewayForWorkspaceServiceParams) error {
	_, err := q.db.Exec(ctx, deleteGatewayForWorkspaceService, arg.CloudAccountID, arg.DnsFqdn)
	return err
}

const deleteHwGatewayForWorkspace = `-- name: DeleteHwGatewayForWorkspace :exec

delete from workspace_hw_gateways
  where cloud_account_id = $1 and workspace_id = $2 and lb_fqdn = $3
`

type DeleteHwGatewayForWorkspaceParams struct {
	CloudAccountID string
	WorkspaceID    string
	LbFqdn         string
}

// DOES A CASCADE DELETE TO REMOVE ALL THE ROWS WHICH THIS LB FQDN CREATED BY THE PARENT WORKSAPCE
func (q *Queries) DeleteHwGatewayForWorkspace(ctx context.Context, arg DeleteHwGatewayForWorkspaceParams) error {
	_, err := q.db.Exec(ctx, deleteHwGatewayForWorkspace, arg.CloudAccountID, arg.WorkspaceID, arg.LbFqdn)
	return err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
UPDATE workspace
set is_active=false,
  updated_at = now()
WHERE id = $1
AND is_active = true
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteWorkspace, id)
	return err
}

const gatGatewayForWorkspaceService = `-- name: GatGatewayForWorkspaceService :one
select cloud_account_id, dns_fqdn, gateway_istio_name, gateway_selector_istio_labels, gateway_istio_secret_name, lb_fqdn, created_at, updated_at, is_active from workspace_service_gateways
  where cloud_account_id = $1 and dns_fqdn = $2
  limit 1
`

type GatGatewayForWorkspaceServiceParams struct {
	CloudAccountID string
	DnsFqdn        string
}

func (q *Queries) GatGatewayForWorkspaceService(ctx context.Context, arg GatGatewayForWorkspaceServiceParams) (WorkspaceServiceGateway, error) {
	row := q.db.QueryRow(ctx, gatGatewayForWorkspaceService, arg.CloudAccountID, arg.DnsFqdn)
	var i WorkspaceServiceGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.DnsFqdn,
		&i.GatewayIstioName,
		&i.GatewaySelectorIstioLabels,
		&i.GatewayIstioSecretName,
		&i.LbFqdn,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getClusterIdFromServiceId = `-- name: GetClusterIdFromServiceId :one
SELECT cloud_account_id, iks_id FROM workspace w
inner join (
  SELECT workspace_id FROM postgres
  WHERE id = $1
  union
  SELECT workspace_id FROM hms
  WHERE id = $1
  union
  select workspace_id from airflow
  where id = $1
) s
ON s.workspace_id = w.id
`

type GetClusterIdFromServiceIdRow struct {
	CloudAccountID string
	IksID          pgtype.Text
}

func (q *Queries) GetClusterIdFromServiceId(ctx context.Context, dollar_1 pgtype.Text) (GetClusterIdFromServiceIdRow, error) {
	row := q.db.QueryRow(ctx, getClusterIdFromServiceId, dollar_1)
	var i GetClusterIdFromServiceIdRow
	err := row.Scan(&i.CloudAccountID, &i.IksID)
	return i, err
}

const getGatewaysByWorkspaceIdCloudAccountandDnsLBReady = `-- name: GetGatewaysByWorkspaceIdCloudAccountandDnsLBReady :one
select cloud_account_id, lb_fqdn, lb_created, fw_created, gatewaynodeport, workspace_id, created_at, updated_at, is_active from workspace_hw_gateways where workspace_id = $1 and cloud_account_id = $2 and lb_created and fw_created limit 1
`

type GetGatewaysByWorkspaceIdCloudAccountandDnsLBReadyParams struct {
	WorkspaceID    string
	CloudAccountID string
}

func (q *Queries) GetGatewaysByWorkspaceIdCloudAccountandDnsLBReady(ctx context.Context, arg GetGatewaysByWorkspaceIdCloudAccountandDnsLBReadyParams) (WorkspaceHwGateway, error) {
	row := q.db.QueryRow(ctx, getGatewaysByWorkspaceIdCloudAccountandDnsLBReady, arg.WorkspaceID, arg.CloudAccountID)
	var i WorkspaceHwGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.LbFqdn,
		&i.LbCreated,
		&i.FwCreated,
		&i.Gatewaynodeport,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getGatewaysByWorkspaceIdandLBCreated = `-- name: GetGatewaysByWorkspaceIdandLBCreated :one
select cloud_account_id, lb_fqdn, lb_created, fw_created, gatewaynodeport, workspace_id, created_at, updated_at, is_active from workspace_hw_gateways where workspace_id = $1 and lb_fqdn = $2 and cloud_account_id = $3 and lb_created limit 1
`

type GetGatewaysByWorkspaceIdandLBCreatedParams struct {
	WorkspaceID    string
	LbFqdn         string
	CloudAccountID string
}

func (q *Queries) GetGatewaysByWorkspaceIdandLBCreated(ctx context.Context, arg GetGatewaysByWorkspaceIdandLBCreatedParams) (WorkspaceHwGateway, error) {
	row := q.db.QueryRow(ctx, getGatewaysByWorkspaceIdandLBCreated, arg.WorkspaceID, arg.LbFqdn, arg.CloudAccountID)
	var i WorkspaceHwGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.LbFqdn,
		&i.LbCreated,
		&i.FwCreated,
		&i.Gatewaynodeport,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getGatewaysByWorkspaceIdandLBReady = `-- name: GetGatewaysByWorkspaceIdandLBReady :one
select cloud_account_id, lb_fqdn, lb_created, fw_created, gatewaynodeport, workspace_id, created_at, updated_at, is_active from workspace_hw_gateways where workspace_id = $1 and cloud_account_id = $2 and lb_created and fw_created limit 1
`

type GetGatewaysByWorkspaceIdandLBReadyParams struct {
	WorkspaceID    string
	CloudAccountID string
}

func (q *Queries) GetGatewaysByWorkspaceIdandLBReady(ctx context.Context, arg GetGatewaysByWorkspaceIdandLBReadyParams) (WorkspaceHwGateway, error) {
	row := q.db.QueryRow(ctx, getGatewaysByWorkspaceIdandLBReady, arg.WorkspaceID, arg.CloudAccountID)
	var i WorkspaceHwGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.LbFqdn,
		&i.LbCreated,
		&i.FwCreated,
		&i.Gatewaynodeport,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getHwGatewayForWorkspaceService = `-- name: GetHwGatewayForWorkspaceService :one
select workspace_hw_gateways.lb_fqdn, workspace_hw_gateways.gatewayNodeport
  from workspace_hw_gateways inner join workspace on workspace_hw_gateways.workspace_id = workspace.id
  WHERE workspace.id = $1
LIMIT 1
`

type GetHwGatewayForWorkspaceServiceRow struct {
	LbFqdn          string
	Gatewaynodeport int32
}

func (q *Queries) GetHwGatewayForWorkspaceService(ctx context.Context, id string) (GetHwGatewayForWorkspaceServiceRow, error) {
	row := q.db.QueryRow(ctx, getHwGatewayForWorkspaceService, id)
	var i GetHwGatewayForWorkspaceServiceRow
	err := row.Scan(&i.LbFqdn, &i.Gatewaynodeport)
	return i, err
}

const getHwGatewaysByWorkspaceId = `-- name: GetHwGatewaysByWorkspaceId :one
select cloud_account_id, lb_fqdn, lb_created, fw_created, gatewaynodeport, workspace_id, created_at, updated_at, is_active from workspace_hw_gateways where workspace_id = $1 and cloud_account_id = $2 limit 1
`

type GetHwGatewaysByWorkspaceIdParams struct {
	WorkspaceID    string
	CloudAccountID string
}

func (q *Queries) GetHwGatewaysByWorkspaceId(ctx context.Context, arg GetHwGatewaysByWorkspaceIdParams) (WorkspaceHwGateway, error) {
	row := q.db.QueryRow(ctx, getHwGatewaysByWorkspaceId, arg.WorkspaceID, arg.CloudAccountID)
	var i WorkspaceHwGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.LbFqdn,
		&i.LbCreated,
		&i.FwCreated,
		&i.Gatewaynodeport,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getHwGatewaysByWorkspaceIdandLB = `-- name: GetHwGatewaysByWorkspaceIdandLB :one
select cloud_account_id, lb_fqdn, lb_created, fw_created, gatewaynodeport, workspace_id, created_at, updated_at, is_active from workspace_hw_gateways where workspace_id = $1 and lb_fqdn = $2 and cloud_account_id = $3 limit 1
`

type GetHwGatewaysByWorkspaceIdandLBParams struct {
	WorkspaceID    string
	LbFqdn         string
	CloudAccountID string
}

func (q *Queries) GetHwGatewaysByWorkspaceIdandLB(ctx context.Context, arg GetHwGatewaysByWorkspaceIdandLBParams) (WorkspaceHwGateway, error) {
	row := q.db.QueryRow(ctx, getHwGatewaysByWorkspaceIdandLB, arg.WorkspaceID, arg.LbFqdn, arg.CloudAccountID)
	var i WorkspaceHwGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.LbFqdn,
		&i.LbCreated,
		&i.FwCreated,
		&i.Gatewaynodeport,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getLbFqdnForWorkspace = `-- name: GetLbFqdnForWorkspace :one
select distinct(lb_fqdn) from workspace_hw_gateways where cloud_account_id = $1 and workspace_id = $2 limit 1
`

type GetLbFqdnForWorkspaceParams struct {
	CloudAccountID string
	WorkspaceID    string
}

func (q *Queries) GetLbFqdnForWorkspace(ctx context.Context, arg GetLbFqdnForWorkspaceParams) (string, error) {
	row := q.db.QueryRow(ctx, getLbFqdnForWorkspace, arg.CloudAccountID, arg.WorkspaceID)
	var lb_fqdn string
	err := row.Scan(&lb_fqdn)
	return lb_fqdn, err
}

const getServiceGatewayForWorkspaceService = `-- name: GetServiceGatewayForWorkspaceService :one
SELECT workspace_service_gateways.cloud_account_id, workspace_service_gateways.dns_fqdn, workspace_service_gateways.gateway_istio_name,
    workspace_service_gateways.gateway_selector_istio_labels, workspace_service_gateways.gateway_istio_secret_name, workspace_service_gateways.is_active FROM (
  SELECT workspace_hw_gateways.lb_fqdn
      FROM workspace_hw_gateways 
      INNER JOIN workspace ON workspace_hw_gateways.workspace_id = workspace.id
      WHERE workspace.id = $1
  ) as tm
  INNER JOIN workspace_service_gateways ON workspace_service_gateways.lb_fqdn = tm.lb_fqdn
LIMIT 1
`

type GetServiceGatewayForWorkspaceServiceRow struct {
	CloudAccountID             string
	DnsFqdn                    string
	GatewayIstioName           string
	GatewaySelectorIstioLabels string
	GatewayIstioSecretName     string
	IsActive                   bool
}

func (q *Queries) GetServiceGatewayForWorkspaceService(ctx context.Context, id string) (GetServiceGatewayForWorkspaceServiceRow, error) {
	row := q.db.QueryRow(ctx, getServiceGatewayForWorkspaceService, id)
	var i GetServiceGatewayForWorkspaceServiceRow
	err := row.Scan(
		&i.CloudAccountID,
		&i.DnsFqdn,
		&i.GatewayIstioName,
		&i.GatewaySelectorIstioLabels,
		&i.GatewayIstioSecretName,
		&i.IsActive,
	)
	return i, err
}

const getServiceGatewayForWorkspaceServiceFromDnsFqdn = `-- name: GetServiceGatewayForWorkspaceServiceFromDnsFqdn :one
select cloud_account_id, dns_fqdn, gateway_istio_name, gateway_selector_istio_labels, gateway_istio_secret_name, lb_fqdn, created_at, updated_at, is_active from workspace_service_gateways 
  where cloud_account_id = $1 and dns_fqdn = $2
limit 1
`

type GetServiceGatewayForWorkspaceServiceFromDnsFqdnParams struct {
	CloudAccountID string
	DnsFqdn        string
}

func (q *Queries) GetServiceGatewayForWorkspaceServiceFromDnsFqdn(ctx context.Context, arg GetServiceGatewayForWorkspaceServiceFromDnsFqdnParams) (WorkspaceServiceGateway, error) {
	row := q.db.QueryRow(ctx, getServiceGatewayForWorkspaceServiceFromDnsFqdn, arg.CloudAccountID, arg.DnsFqdn)
	var i WorkspaceServiceGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.DnsFqdn,
		&i.GatewayIstioName,
		&i.GatewaySelectorIstioLabels,
		&i.GatewayIstioSecretName,
		&i.LbFqdn,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUpdateWorkspace = `-- name: GetUpdateWorkspace :one
SELECT id, description, tags FROM workspace
WHERE  id = $1 
AND is_active = true
LIMIT 1
`

type GetUpdateWorkspaceRow struct {
	ID          string
	Description pgtype.Text
	Tags        []byte
}

func (q *Queries) GetUpdateWorkspace(ctx context.Context, id string) (GetUpdateWorkspaceRow, error) {
	row := q.db.QueryRow(ctx, getUpdateWorkspace, id)
	var i GetUpdateWorkspaceRow
	err := row.Scan(&i.ID, &i.Description, &i.Tags)
	return i, err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT 
  w.cloud_account_id, 
  w.id, 
  w.name, 
  w.region, 
  w.description, 
  w.tags, 
  w.deployment_id, 
  w.iks_id, 
  w.iks_cluster_name,
  w.ssh_key_name,
  w.management_nodegroup_id,
  d.status_state as deployment_status_state,
  d.status_display_name as deployment_status_display_name,
  d.status_message as deployment_status_message,
  w.created_at, 
  w.created_by, 
  d.updated_at, 
  w.updated_by
FROM workspace w
inner join deployment d 
on d.id = w.deployment_id
WHERE w.id = $1
  AND d.cloud_account_id = coalesce($2, d.cloud_account_id)
  AND w.is_active = true
`

type GetWorkspaceParams struct {
	WorkspaceID    string
	CloudAccountID pgtype.Text
}

type GetWorkspaceRow struct {
	CloudAccountID              string
	ID                          string
	Name                        string
	Region                      pgtype.Text
	Description                 pgtype.Text
	Tags                        []byte
	DeploymentID                string
	IksID                       pgtype.Text
	IksClusterName              pgtype.Text
	SshKeyName                  pgtype.Text
	ManagementNodegroupID       pgtype.Text
	DeploymentStatusState       string
	DeploymentStatusDisplayName pgtype.Text
	DeploymentStatusMessage     pgtype.Text
	CreatedAt                   pgtype.Timestamptz
	CreatedBy                   string
	UpdatedAt                   pgtype.Timestamptz
	UpdatedBy                   pgtype.Text
}

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetWorkspace(ctx context.Context, arg GetWorkspaceParams) (GetWorkspaceRow, error) {
	row := q.db.QueryRow(ctx, getWorkspace, arg.WorkspaceID, arg.CloudAccountID)
	var i GetWorkspaceRow
	err := row.Scan(
		&i.CloudAccountID,
		&i.ID,
		&i.Name,
		&i.Region,
		&i.Description,
		&i.Tags,
		&i.DeploymentID,
		&i.IksID,
		&i.IksClusterName,
		&i.SshKeyName,
		&i.ManagementNodegroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getWorkspaceIdFromServiceId = `-- name: GetWorkspaceIdFromServiceId :one
SELECT workspace_id FROM postgres
WHERE id = $1
union
SELECT workspace_id FROM hms
WHERE id = $1
union
  select workspace_id from airflow
  where id = $1
`

func (q *Queries) GetWorkspaceIdFromServiceId(ctx context.Context, dollar_1 pgtype.Text) (string, error) {
	row := q.db.QueryRow(ctx, getWorkspaceIdFromServiceId, dollar_1)
	var workspace_id string
	err := row.Scan(&workspace_id)
	return workspace_id, err
}

const insertGatewayForWorkspace = `-- name: InsertGatewayForWorkspace :one
insert into workspace_hw_gateways
  (cloud_account_id, lb_fqdn, lb_created, fw_created, gatewayNodeport, workspace_id, created_at, updated_at, is_active)
VALUES (
    $1, $2, $3, $4, $5, $6, now(), now(), true
) RETURNING 1
`

type InsertGatewayForWorkspaceParams struct {
	CloudAccountID  string
	LbFqdn          string
	LbCreated       bool
	FwCreated       bool
	Gatewaynodeport int32
	WorkspaceID     string
}

func (q *Queries) InsertGatewayForWorkspace(ctx context.Context, arg InsertGatewayForWorkspaceParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertGatewayForWorkspace,
		arg.CloudAccountID,
		arg.LbFqdn,
		arg.LbCreated,
		arg.FwCreated,
		arg.Gatewaynodeport,
		arg.WorkspaceID,
	)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const insertGatewayForWorkspaceService = `-- name: InsertGatewayForWorkspaceService :one
INSERT INTO workspace_service_gateways
  (cloud_account_id, dns_fqdn, gateway_istio_name, gateway_selector_istio_labels, gateway_istio_secret_name, lb_fqdn, created_at, updated_at, is_active)
VALUES (  
  $1, $2, $3, $4, $5, $6, now(), now(), $7
) RETURNING 1
`

type InsertGatewayForWorkspaceServiceParams struct {
	CloudAccountID             string
	DnsFqdn                    string
	GatewayIstioName           string
	GatewaySelectorIstioLabels string
	GatewayIstioSecretName     string
	LbFqdn                     string
	IsActive                   bool
}

func (q *Queries) InsertGatewayForWorkspaceService(ctx context.Context, arg InsertGatewayForWorkspaceServiceParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertGatewayForWorkspaceService,
		arg.CloudAccountID,
		arg.DnsFqdn,
		arg.GatewayIstioName,
		arg.GatewaySelectorIstioLabels,
		arg.GatewayIstioSecretName,
		arg.LbFqdn,
		arg.IsActive,
	)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const listWorkspaceServices = `-- name: ListWorkspaceServices :many

SELECT 
  s.id, 
  s.name, 
  s.version, 
  s.deployment_id, 
  d.service_type, 
  d.status_state,
  d.status_display_name,
  d.status_message,
  COALESCE(d.updated_at, d.created_at) AS service_updated_at
FROM (
  SELECT 
    id, 
    name, 
    version, 
    deployment_id
  FROM airflow
  WHERE cloud_account_id = coalesce($1, cloud_account_id)
    AND workspace_id = $2
  UNION
  SELECT 
    id, 
    name, 
    version_id as version, 
    deployment_id
  FROM hms
  WHERE cloud_account_id = coalesce($1, cloud_account_id)
    AND workspace_id = $2
) s 
INNER JOIN deployment d ON s.deployment_id = d.id
WHERE d.cloud_account_id = coalesce($1, cloud_account_id)
  AND d.workspace_id = $2
`

type ListWorkspaceServicesParams struct {
	CloudAccountID pgtype.Text
	WorkspaceID    pgtype.Text
}

type ListWorkspaceServicesRow struct {
	ID                string
	Name              string
	Version           string
	DeploymentID      string
	ServiceType       string
	StatusState       string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	ServiceUpdatedAt  pgtype.Timestamptz
}

func (q *Queries) ListWorkspaceServices(ctx context.Context, arg ListWorkspaceServicesParams) ([]ListWorkspaceServicesRow, error) {
	rows, err := q.db.Query(ctx, listWorkspaceServices, arg.CloudAccountID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWorkspaceServicesRow
	for rows.Next() {
		var i ListWorkspaceServicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Version,
			&i.DeploymentID,
			&i.ServiceType,
			&i.StatusState,
			&i.StatusDisplayName,
			&i.StatusMessage,
			&i.ServiceUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspaces = `-- name: ListWorkspaces :many
SELECT
  w.cloud_account_id, w.id, w.name, w.region, w.description, w.tags, w.deployment_id, w.iks_id, w.iks_cluster_name, w.ssh_key_name, w.management_nodegroup_id,
  d.status_display_name as deployment_status, d.status_message as deployment_status_message, d.status_state as deployment_status_state,
  w.created_at, w.created_by, w.updated_at, w.updated_by, w.is_active 
FROM workspace w 
join deployment d
on w.deployment_id = d.id
WHERE w.cloud_account_id = $1
AND w.name = coalesce($2, w.name)
AND (d.status_display_name = coalesce($3, d.status_display_name) or d.status_display_name is null)
AND w.is_active = true
ORDER BY name
LIMIT $5 
OFFSET $4
`

type ListWorkspacesParams struct {
	CloudAccountID    string
	Name              pgtype.Text
	StatusDisplayName pgtype.Text
	Offset            int64
	Limit             int64
}

type ListWorkspacesRow struct {
	CloudAccountID          string
	ID                      string
	Name                    string
	Region                  pgtype.Text
	Description             pgtype.Text
	Tags                    []byte
	DeploymentID            string
	IksID                   pgtype.Text
	IksClusterName          pgtype.Text
	SshKeyName              pgtype.Text
	ManagementNodegroupID   pgtype.Text
	DeploymentStatus        pgtype.Text
	DeploymentStatusMessage pgtype.Text
	DeploymentStatusState   string
	CreatedAt               pgtype.Timestamptz
	CreatedBy               string
	UpdatedAt               pgtype.Timestamptz
	UpdatedBy               pgtype.Text
	IsActive                bool
}

func (q *Queries) ListWorkspaces(ctx context.Context, arg ListWorkspacesParams) ([]ListWorkspacesRow, error) {
	rows, err := q.db.Query(ctx, listWorkspaces,
		arg.CloudAccountID,
		arg.Name,
		arg.StatusDisplayName,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWorkspacesRow
	for rows.Next() {
		var i ListWorkspacesRow
		if err := rows.Scan(
			&i.CloudAccountID,
			&i.ID,
			&i.Name,
			&i.Region,
			&i.Description,
			&i.Tags,
			&i.DeploymentID,
			&i.IksID,
			&i.IksClusterName,
			&i.SshKeyName,
			&i.ManagementNodegroupID,
			&i.DeploymentStatus,
			&i.DeploymentStatusMessage,
			&i.DeploymentStatusState,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGatewayFwStatusForWorkspace = `-- name: UpdateGatewayFwStatusForWorkspace :one
update workspace_hw_gateways set fw_created = $4 where workspace_id = $1 and lb_fqdn = $2 and cloud_account_id = $3 RETURNING cloud_account_id, lb_fqdn, lb_created, fw_created, gatewaynodeport, workspace_id, created_at, updated_at, is_active
`

type UpdateGatewayFwStatusForWorkspaceParams struct {
	WorkspaceID    string
	LbFqdn         string
	CloudAccountID string
	FwCreated      bool
}

func (q *Queries) UpdateGatewayFwStatusForWorkspace(ctx context.Context, arg UpdateGatewayFwStatusForWorkspaceParams) (WorkspaceHwGateway, error) {
	row := q.db.QueryRow(ctx, updateGatewayFwStatusForWorkspace,
		arg.WorkspaceID,
		arg.LbFqdn,
		arg.CloudAccountID,
		arg.FwCreated,
	)
	var i WorkspaceHwGateway
	err := row.Scan(
		&i.CloudAccountID,
		&i.LbFqdn,
		&i.LbCreated,
		&i.FwCreated,
		&i.Gatewaynodeport,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE workspace
  set description = $2,
  tags = $3,
  updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING cloud_account_id, id, name, region, description, tags, deployment_id, iks_id, management_nodegroup_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by, iks_cluster_name, ssh_key_name
`

type UpdateWorkspaceParams struct {
	ID          string
	Description pgtype.Text
	Tags        []byte
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, updateWorkspace, arg.ID, arg.Description, arg.Tags)
	var i Workspace
	err := row.Scan(
		&i.CloudAccountID,
		&i.ID,
		&i.Name,
		&i.Region,
		&i.Description,
		&i.Tags,
		&i.DeploymentID,
		&i.IksID,
		&i.ManagementNodegroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.IksClusterName,
		&i.SshKeyName,
	)
	return i, err
}

const updateWorkspaceDeploymentStatus = `-- name: UpdateWorkspaceDeploymentStatus :one
UPDATE workspace w
  set deployment_status_state = coalesce($1, d.status_state),
  deployment_status_display_name = coalesce($2, d.status_display_name),
  deployment_status_message = coalesce($3, d.status_message),
  iks_id = coalesce($4, iks_id),
  iks_cluster_name = coalesce($5, iks_cluster_name),
  management_nodegroup_id = coalesce($6, management_nodegroup_id),
  ssh_key_name = coalesce($7, ssh_key_name),
  updated_at = now()
FROM deployment d
WHERE (w.id = coalesce($8, 'PLACEHOLDER') or w.deployment_id = coalesce($9, 'PLACEHOLDER'))
and w.deployment_id = d.id
AND is_active = true
RETURNING d.cloud_account_id, workspace_id, d.id, parent_deployment_id, service_id, service_type, change_indicator, input_payload, output_payload, status_state, status_display_name, status_message, error_message, node_group_id, d.created_at, d.created_by, d.updated_at, w.cloud_account_id, w.id, name, region, description, tags, deployment_id, iks_id, management_nodegroup_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, w.created_at, w.created_by, w.updated_at, updated_by, iks_cluster_name, ssh_key_name
`

type UpdateWorkspaceDeploymentStatusParams struct {
	DeploymentStatusState       pgtype.Text
	DeploymentStatusDisplayName pgtype.Text
	DeploymentStatusMessage     pgtype.Text
	IksID                       pgtype.Text
	IksClusterName              pgtype.Text
	ManagementNodegroupID       pgtype.Text
	SshKeyName                  pgtype.Text
	ID                          pgtype.Text
	DeploymentID                pgtype.Text
}

type UpdateWorkspaceDeploymentStatusRow struct {
	CloudAccountID              pgtype.Text
	WorkspaceID                 pgtype.Text
	ID                          string
	ParentDeploymentID          pgtype.Text
	ServiceID                   pgtype.Text
	ServiceType                 string
	ChangeIndicator             string
	InputPayload                []byte
	OutputPayload               []byte
	StatusState                 string
	StatusDisplayName           pgtype.Text
	StatusMessage               pgtype.Text
	ErrorMessage                pgtype.Text
	NodeGroupID                 pgtype.Text
	CreatedAt                   pgtype.Timestamptz
	CreatedBy                   string
	UpdatedAt                   pgtype.Timestamptz
	CloudAccountID_2            string
	ID_2                        string
	Name                        string
	Region                      pgtype.Text
	Description                 pgtype.Text
	Tags                        []byte
	DeploymentID                string
	IksID                       pgtype.Text
	ManagementNodegroupID       pgtype.Text
	DeploymentStatusState       string
	DeploymentStatusDisplayName pgtype.Text
	DeploymentStatusMessage     pgtype.Text
	IsActive                    bool
	CreatedAt_2                 pgtype.Timestamptz
	CreatedBy_2                 string
	UpdatedAt_2                 pgtype.Timestamptz
	UpdatedBy                   pgtype.Text
	IksClusterName              pgtype.Text
	SshKeyName                  pgtype.Text
}

func (q *Queries) UpdateWorkspaceDeploymentStatus(ctx context.Context, arg UpdateWorkspaceDeploymentStatusParams) (UpdateWorkspaceDeploymentStatusRow, error) {
	row := q.db.QueryRow(ctx, updateWorkspaceDeploymentStatus,
		arg.DeploymentStatusState,
		arg.DeploymentStatusDisplayName,
		arg.DeploymentStatusMessage,
		arg.IksID,
		arg.IksClusterName,
		arg.ManagementNodegroupID,
		arg.SshKeyName,
		arg.ID,
		arg.DeploymentID,
	)
	var i UpdateWorkspaceDeploymentStatusRow
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.ParentDeploymentID,
		&i.ServiceID,
		&i.ServiceType,
		&i.ChangeIndicator,
		&i.InputPayload,
		&i.OutputPayload,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
		&i.NodeGroupID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.CloudAccountID_2,
		&i.ID_2,
		&i.Name,
		&i.Region,
		&i.Description,
		&i.Tags,
		&i.DeploymentID,
		&i.IksID,
		&i.ManagementNodegroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt_2,
		&i.CreatedBy_2,
		&i.UpdatedAt_2,
		&i.UpdatedBy,
		&i.IksClusterName,
		&i.SshKeyName,
	)
	return i, err
}
