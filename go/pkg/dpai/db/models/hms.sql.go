// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHms = `-- name: CreateHms :one

INSERT INTO hms (
        id,
        workspace_id,
        name,
        description,
        version_id,
        size_id,
        number_of_instances,
        tags,
        endpoint,
        object_store_storage_endpoint,
        object_store_warehouse_directory,
        object_store_storage_access_key_secret_reference,
        object_store_storage_access_secret_secret_reference,
        backend_database_id,
        node_group_id,
        deployment_id,
        deployment_status_state,
        deployment_status_display_name,
        deployment_status_message,
        created_by
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20
    ) RETURNING cloud_account_id, workspace_id, id, name, version_id, size_id, number_of_instances, description, tags, endpoint, object_store_storage_endpoint, object_store_warehouse_directory, object_store_storage_access_key_secret_reference, object_store_storage_access_secret_secret_reference, deployment_id, backend_database_id, node_group_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type CreateHmsParams struct {
	ID                                            string
	WorkspaceID                                   string
	Name                                          string
	Description                                   pgtype.Text
	VersionID                                     string
	SizeID                                        string
	NumberOfInstances                             pgtype.Int4
	Tags                                          []byte
	Endpoint                                      string
	ObjectStoreStorageEndpoint                    pgtype.Text
	ObjectStoreWarehouseDirectory                 string
	ObjectStoreStorageAccessKeySecretReference    []byte
	ObjectStoreStorageAccessSecretSecretReference []byte
	BackendDatabaseID                             string
	NodeGroupID                                   string
	DeploymentID                                  string
	DeploymentStatusState                         string
	DeploymentStatusDisplayName                   pgtype.Text
	DeploymentStatusMessage                       pgtype.Text
	CreatedBy                                     string
}

func (q *Queries) CreateHms(ctx context.Context, arg CreateHmsParams) (Hms, error) {
	row := q.db.QueryRow(ctx, createHms,
		arg.ID,
		arg.WorkspaceID,
		arg.Name,
		arg.Description,
		arg.VersionID,
		arg.SizeID,
		arg.NumberOfInstances,
		arg.Tags,
		arg.Endpoint,
		arg.ObjectStoreStorageEndpoint,
		arg.ObjectStoreWarehouseDirectory,
		arg.ObjectStoreStorageAccessKeySecretReference,
		arg.ObjectStoreStorageAccessSecretSecretReference,
		arg.BackendDatabaseID,
		arg.NodeGroupID,
		arg.DeploymentID,
		arg.DeploymentStatusState,
		arg.DeploymentStatusDisplayName,
		arg.DeploymentStatusMessage,
		arg.CreatedBy,
	)
	var i Hms
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.Description,
		&i.Tags,
		&i.Endpoint,
		&i.ObjectStoreStorageEndpoint,
		&i.ObjectStoreWarehouseDirectory,
		&i.ObjectStoreStorageAccessKeySecretReference,
		&i.ObjectStoreStorageAccessSecretSecretReference,
		&i.DeploymentID,
		&i.BackendDatabaseID,
		&i.NodeGroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteHms = `-- name: DeleteHms :exec
UPDATE hms
set is_active=false,
  updated_at = now()
WHERE id = $1
AND is_active = true
`

func (q *Queries) DeleteHms(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteHms, id)
	return err
}

const getHmsById = `-- name: GetHmsById :one
SELECT cloud_account_id, workspace_id, id, name, version_id, size_id, number_of_instances, description, tags, endpoint, object_store_storage_endpoint, object_store_warehouse_directory, object_store_storage_access_key_secret_reference, object_store_storage_access_secret_secret_reference, deployment_id, backend_database_id, node_group_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by FROM hms 
WHERE id = $1 AND is_active = true 
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetHmsById(ctx context.Context, id string) (Hms, error) {
	row := q.db.QueryRow(ctx, getHmsById, id)
	var i Hms
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.Description,
		&i.Tags,
		&i.Endpoint,
		&i.ObjectStoreStorageEndpoint,
		&i.ObjectStoreWarehouseDirectory,
		&i.ObjectStoreStorageAccessKeySecretReference,
		&i.ObjectStoreStorageAccessSecretSecretReference,
		&i.DeploymentID,
		&i.BackendDatabaseID,
		&i.NodeGroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getHmsByName = `-- name: GetHmsByName :one
SELECT cloud_account_id, workspace_id, id, name, version_id, size_id, number_of_instances, description, tags, endpoint, object_store_storage_endpoint, object_store_warehouse_directory, object_store_storage_access_key_secret_reference, object_store_storage_access_secret_secret_reference, deployment_id, backend_database_id, node_group_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by FROM hms 
WHERE workspace_id = $1 and name = $2 AND is_active = true 
LIMIT 1
`

type GetHmsByNameParams struct {
	WorkspaceID string
	Name        string
}

func (q *Queries) GetHmsByName(ctx context.Context, arg GetHmsByNameParams) (Hms, error) {
	row := q.db.QueryRow(ctx, getHmsByName, arg.WorkspaceID, arg.Name)
	var i Hms
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.Description,
		&i.Tags,
		&i.Endpoint,
		&i.ObjectStoreStorageEndpoint,
		&i.ObjectStoreWarehouseDirectory,
		&i.ObjectStoreStorageAccessKeySecretReference,
		&i.ObjectStoreStorageAccessSecretSecretReference,
		&i.DeploymentID,
		&i.BackendDatabaseID,
		&i.NodeGroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getUpdateHms = `-- name: GetUpdateHms :one
SELECT id, description, tags FROM hms WHERE id = $1 AND is_active = true LIMIT 1
`

type GetUpdateHmsRow struct {
	ID          string
	Description pgtype.Text
	Tags        []byte
}

func (q *Queries) GetUpdateHms(ctx context.Context, id string) (GetUpdateHmsRow, error) {
	row := q.db.QueryRow(ctx, getUpdateHms, id)
	var i GetUpdateHmsRow
	err := row.Scan(&i.ID, &i.Description, &i.Tags)
	return i, err
}

const listHms = `-- name: ListHms :many
SELECT cloud_account_id, workspace_id, id, name, version_id, size_id, number_of_instances, description, tags, endpoint, object_store_storage_endpoint, object_store_warehouse_directory, object_store_storage_access_key_secret_reference, object_store_storage_access_secret_secret_reference, deployment_id, backend_database_id, node_group_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by FROM hms 
WHERE workspace_id = $1 AND is_active = true 
ORDER BY name
`

func (q *Queries) ListHms(ctx context.Context, workspaceID string) ([]Hms, error) {
	rows, err := q.db.Query(ctx, listHms, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hms
	for rows.Next() {
		var i Hms
		if err := rows.Scan(
			&i.CloudAccountID,
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.VersionID,
			&i.SizeID,
			&i.NumberOfInstances,
			&i.Description,
			&i.Tags,
			&i.Endpoint,
			&i.ObjectStoreStorageEndpoint,
			&i.ObjectStoreWarehouseDirectory,
			&i.ObjectStoreStorageAccessKeySecretReference,
			&i.ObjectStoreStorageAccessSecretSecretReference,
			&i.DeploymentID,
			&i.BackendDatabaseID,
			&i.NodeGroupID,
			&i.DeploymentStatusState,
			&i.DeploymentStatusDisplayName,
			&i.DeploymentStatusMessage,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resizeHms = `-- name: ResizeHms :one
UPDATE hms
set
    size_id = $2,
    number_of_instances = $3,
    updated_at = now()
WHERE id = $1 
AND is_active = true
RETURNING cloud_account_id, workspace_id, id, name, version_id, size_id, number_of_instances, description, tags, endpoint, object_store_storage_endpoint, object_store_warehouse_directory, object_store_storage_access_key_secret_reference, object_store_storage_access_secret_secret_reference, deployment_id, backend_database_id, node_group_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type ResizeHmsParams struct {
	ID                string
	SizeID            string
	NumberOfInstances pgtype.Int4
}

func (q *Queries) ResizeHms(ctx context.Context, arg ResizeHmsParams) (Hms, error) {
	row := q.db.QueryRow(ctx, resizeHms, arg.ID, arg.SizeID, arg.NumberOfInstances)
	var i Hms
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.Description,
		&i.Tags,
		&i.Endpoint,
		&i.ObjectStoreStorageEndpoint,
		&i.ObjectStoreWarehouseDirectory,
		&i.ObjectStoreStorageAccessKeySecretReference,
		&i.ObjectStoreStorageAccessSecretSecretReference,
		&i.DeploymentID,
		&i.BackendDatabaseID,
		&i.NodeGroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const restartHms = `-- name: RestartHms :exec
UPDATE hms
set updated_at = now()
WHERE id = $1
AND is_active = true
`

func (q *Queries) RestartHms(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, restartHms, id)
	return err
}

const updateHms = `-- name: UpdateHms :one
UPDATE hms
set
    description = $2,
    tags = $3,
    updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING cloud_account_id, workspace_id, id, name, version_id, size_id, number_of_instances, description, tags, endpoint, object_store_storage_endpoint, object_store_warehouse_directory, object_store_storage_access_key_secret_reference, object_store_storage_access_secret_secret_reference, deployment_id, backend_database_id, node_group_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type UpdateHmsParams struct {
	ID          string
	Description pgtype.Text
	Tags        []byte
}

func (q *Queries) UpdateHms(ctx context.Context, arg UpdateHmsParams) (Hms, error) {
	row := q.db.QueryRow(ctx, updateHms, arg.ID, arg.Description, arg.Tags)
	var i Hms
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.Description,
		&i.Tags,
		&i.Endpoint,
		&i.ObjectStoreStorageEndpoint,
		&i.ObjectStoreWarehouseDirectory,
		&i.ObjectStoreStorageAccessKeySecretReference,
		&i.ObjectStoreStorageAccessSecretSecretReference,
		&i.DeploymentID,
		&i.BackendDatabaseID,
		&i.NodeGroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const upgradeHms = `-- name: UpgradeHms :one
UPDATE hms
set
    version_id = $2,
    updated_at = now()
WHERE id = $1 
AND is_active = true
RETURNING cloud_account_id, workspace_id, id, name, version_id, size_id, number_of_instances, description, tags, endpoint, object_store_storage_endpoint, object_store_warehouse_directory, object_store_storage_access_key_secret_reference, object_store_storage_access_secret_secret_reference, deployment_id, backend_database_id, node_group_id, deployment_status_state, deployment_status_display_name, deployment_status_message, is_active, created_at, created_by, updated_at, updated_by
`

type UpgradeHmsParams struct {
	ID        string
	VersionID string
}

func (q *Queries) UpgradeHms(ctx context.Context, arg UpgradeHmsParams) (Hms, error) {
	row := q.db.QueryRow(ctx, upgradeHms, arg.ID, arg.VersionID)
	var i Hms
	err := row.Scan(
		&i.CloudAccountID,
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.VersionID,
		&i.SizeID,
		&i.NumberOfInstances,
		&i.Description,
		&i.Tags,
		&i.Endpoint,
		&i.ObjectStoreStorageEndpoint,
		&i.ObjectStoreWarehouseDirectory,
		&i.ObjectStoreStorageAccessKeySecretReference,
		&i.ObjectStoreStorageAccessSecretSecretReference,
		&i.DeploymentID,
		&i.BackendDatabaseID,
		&i.NodeGroupID,
		&i.DeploymentStatusState,
		&i.DeploymentStatusDisplayName,
		&i.DeploymentStatusMessage,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
