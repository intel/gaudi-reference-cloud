// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: airflow_size.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAirflowSize = `-- name: CreateAirflowSize :one
INSERT INTO airflow_size (
    id,
    name,
    description,
    number_of_nodes_default,
    node_size_id,
    backend_database_size_id,
    webserver_count,
    webserver_cpu_limit,
    webserver_memory_limit,
    webserver_cpu_request,
    webserver_memory_request,
    log_directory_disk_size,
    redis_disk_size,
    schedular_count_default,
    scheduler_count_min,
    scheduler_count_max,
    scheduler_cpu_limit,
    scheduler_memory_limit,
    scheduler_memory_request,
    scheduler_cpu_request,
    worker_count_default,
    worker_count_min,
    worker_count_max,
    worker_memory_limit,
    worker_memory_request,
    worker_cpu_limit,
    worker_cpu_request,
    trigger_count,
    trigger_memory_limit,
    trigger_memory_request,
    trigger_cpu_limit,
    trigger_cpu_request,
    created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33
)
RETURNING id, name, description, number_of_nodes_default, node_size_id, backend_database_size_id, webserver_count, webserver_cpu_limit, webserver_memory_limit, webserver_cpu_request, webserver_memory_request, log_directory_disk_size, redis_disk_size, schedular_count_default, scheduler_count_min, scheduler_count_max, scheduler_cpu_limit, scheduler_memory_limit, scheduler_memory_request, scheduler_cpu_request, worker_count_default, worker_count_min, worker_count_max, worker_memory_limit, worker_memory_request, worker_cpu_limit, worker_cpu_request, trigger_count, trigger_memory_limit, trigger_memory_request, trigger_cpu_limit, trigger_cpu_request, is_active, created_at, created_by, updated_at, updated_by
`

type CreateAirflowSizeParams struct {
	ID                     string
	Name                   string
	Description            pgtype.Text
	NumberOfNodesDefault   int32
	NodeSizeID             string
	BackendDatabaseSizeID  pgtype.Text
	WebserverCount         pgtype.Int4
	WebserverCpuLimit      pgtype.Text
	WebserverMemoryLimit   pgtype.Text
	WebserverCpuRequest    pgtype.Text
	WebserverMemoryRequest pgtype.Text
	LogDirectoryDiskSize   pgtype.Text
	RedisDiskSize          pgtype.Text
	SchedularCountDefault  pgtype.Int4
	SchedulerCountMin      pgtype.Int4
	SchedulerCountMax      pgtype.Int4
	SchedulerCpuLimit      pgtype.Text
	SchedulerMemoryLimit   pgtype.Text
	SchedulerMemoryRequest pgtype.Text
	SchedulerCpuRequest    pgtype.Text
	WorkerCountDefault     pgtype.Int4
	WorkerCountMin         pgtype.Int4
	WorkerCountMax         pgtype.Int4
	WorkerMemoryLimit      pgtype.Text
	WorkerMemoryRequest    pgtype.Text
	WorkerCpuLimit         pgtype.Text
	WorkerCpuRequest       pgtype.Text
	TriggerCount           pgtype.Int4
	TriggerMemoryLimit     pgtype.Text
	TriggerMemoryRequest   pgtype.Text
	TriggerCpuLimit        pgtype.Text
	TriggerCpuRequest      pgtype.Text
	CreatedBy              string
}

func (q *Queries) CreateAirflowSize(ctx context.Context, arg CreateAirflowSizeParams) (AirflowSize, error) {
	row := q.db.QueryRow(ctx, createAirflowSize,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.NumberOfNodesDefault,
		arg.NodeSizeID,
		arg.BackendDatabaseSizeID,
		arg.WebserverCount,
		arg.WebserverCpuLimit,
		arg.WebserverMemoryLimit,
		arg.WebserverCpuRequest,
		arg.WebserverMemoryRequest,
		arg.LogDirectoryDiskSize,
		arg.RedisDiskSize,
		arg.SchedularCountDefault,
		arg.SchedulerCountMin,
		arg.SchedulerCountMax,
		arg.SchedulerCpuLimit,
		arg.SchedulerMemoryLimit,
		arg.SchedulerMemoryRequest,
		arg.SchedulerCpuRequest,
		arg.WorkerCountDefault,
		arg.WorkerCountMin,
		arg.WorkerCountMax,
		arg.WorkerMemoryLimit,
		arg.WorkerMemoryRequest,
		arg.WorkerCpuLimit,
		arg.WorkerCpuRequest,
		arg.TriggerCount,
		arg.TriggerMemoryLimit,
		arg.TriggerMemoryRequest,
		arg.TriggerCpuLimit,
		arg.TriggerCpuRequest,
		arg.CreatedBy,
	)
	var i AirflowSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NumberOfNodesDefault,
		&i.NodeSizeID,
		&i.BackendDatabaseSizeID,
		&i.WebserverCount,
		&i.WebserverCpuLimit,
		&i.WebserverMemoryLimit,
		&i.WebserverCpuRequest,
		&i.WebserverMemoryRequest,
		&i.LogDirectoryDiskSize,
		&i.RedisDiskSize,
		&i.SchedularCountDefault,
		&i.SchedulerCountMin,
		&i.SchedulerCountMax,
		&i.SchedulerCpuLimit,
		&i.SchedulerMemoryLimit,
		&i.SchedulerMemoryRequest,
		&i.SchedulerCpuRequest,
		&i.WorkerCountDefault,
		&i.WorkerCountMin,
		&i.WorkerCountMax,
		&i.WorkerMemoryLimit,
		&i.WorkerMemoryRequest,
		&i.WorkerCpuLimit,
		&i.WorkerCpuRequest,
		&i.TriggerCount,
		&i.TriggerMemoryLimit,
		&i.TriggerMemoryRequest,
		&i.TriggerCpuLimit,
		&i.TriggerCpuRequest,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteAirflowSize = `-- name: DeleteAirflowSize :exec
update airflow_size
set is_active=false,
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteAirflowSize(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteAirflowSize, id)
	return err
}

const getAirflowSizeById = `-- name: GetAirflowSizeById :one
SELECT id, name, description, number_of_nodes_default, node_size_id, backend_database_size_id, webserver_count, webserver_cpu_limit, webserver_memory_limit, webserver_cpu_request, webserver_memory_request, log_directory_disk_size, redis_disk_size, schedular_count_default, scheduler_count_min, scheduler_count_max, scheduler_cpu_limit, scheduler_memory_limit, scheduler_memory_request, scheduler_cpu_request, worker_count_default, worker_count_min, worker_count_max, worker_memory_limit, worker_memory_request, worker_cpu_limit, worker_cpu_request, trigger_count, trigger_memory_limit, trigger_memory_request, trigger_cpu_limit, trigger_cpu_request, is_active, created_at, created_by, updated_at, updated_by FROM airflow_size
WHERE id = $1 
AND is_active = true
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetAirflowSizeById(ctx context.Context, id string) (AirflowSize, error) {
	row := q.db.QueryRow(ctx, getAirflowSizeById, id)
	var i AirflowSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NumberOfNodesDefault,
		&i.NodeSizeID,
		&i.BackendDatabaseSizeID,
		&i.WebserverCount,
		&i.WebserverCpuLimit,
		&i.WebserverMemoryLimit,
		&i.WebserverCpuRequest,
		&i.WebserverMemoryRequest,
		&i.LogDirectoryDiskSize,
		&i.RedisDiskSize,
		&i.SchedularCountDefault,
		&i.SchedulerCountMin,
		&i.SchedulerCountMax,
		&i.SchedulerCpuLimit,
		&i.SchedulerMemoryLimit,
		&i.SchedulerMemoryRequest,
		&i.SchedulerCpuRequest,
		&i.WorkerCountDefault,
		&i.WorkerCountMin,
		&i.WorkerCountMax,
		&i.WorkerMemoryLimit,
		&i.WorkerMemoryRequest,
		&i.WorkerCpuLimit,
		&i.WorkerCpuRequest,
		&i.TriggerCount,
		&i.TriggerMemoryLimit,
		&i.TriggerMemoryRequest,
		&i.TriggerCpuLimit,
		&i.TriggerCpuRequest,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAirflowSizeByName = `-- name: GetAirflowSizeByName :one
SELECT id, name, description, number_of_nodes_default, node_size_id, backend_database_size_id, webserver_count, webserver_cpu_limit, webserver_memory_limit, webserver_cpu_request, webserver_memory_request, log_directory_disk_size, redis_disk_size, schedular_count_default, scheduler_count_min, scheduler_count_max, scheduler_cpu_limit, scheduler_memory_limit, scheduler_memory_request, scheduler_cpu_request, worker_count_default, worker_count_min, worker_count_max, worker_memory_limit, worker_memory_request, worker_cpu_limit, worker_cpu_request, trigger_count, trigger_memory_limit, trigger_memory_request, trigger_cpu_limit, trigger_cpu_request, is_active, created_at, created_by, updated_at, updated_by FROM airflow_size
WHERE name = $1 
AND is_active = true
LIMIT 1
`

func (q *Queries) GetAirflowSizeByName(ctx context.Context, name string) (AirflowSize, error) {
	row := q.db.QueryRow(ctx, getAirflowSizeByName, name)
	var i AirflowSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NumberOfNodesDefault,
		&i.NodeSizeID,
		&i.BackendDatabaseSizeID,
		&i.WebserverCount,
		&i.WebserverCpuLimit,
		&i.WebserverMemoryLimit,
		&i.WebserverCpuRequest,
		&i.WebserverMemoryRequest,
		&i.LogDirectoryDiskSize,
		&i.RedisDiskSize,
		&i.SchedularCountDefault,
		&i.SchedulerCountMin,
		&i.SchedulerCountMax,
		&i.SchedulerCpuLimit,
		&i.SchedulerMemoryLimit,
		&i.SchedulerMemoryRequest,
		&i.SchedulerCpuRequest,
		&i.WorkerCountDefault,
		&i.WorkerCountMin,
		&i.WorkerCountMax,
		&i.WorkerMemoryLimit,
		&i.WorkerMemoryRequest,
		&i.WorkerCpuLimit,
		&i.WorkerCpuRequest,
		&i.TriggerCount,
		&i.TriggerMemoryLimit,
		&i.TriggerMemoryRequest,
		&i.TriggerCpuLimit,
		&i.TriggerCpuRequest,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listAirflowSize = `-- name: ListAirflowSize :many
SELECT id, name, description, number_of_nodes_default, node_size_id, backend_database_size_id, webserver_count, webserver_cpu_limit, webserver_memory_limit, webserver_cpu_request, webserver_memory_request, log_directory_disk_size, redis_disk_size, schedular_count_default, scheduler_count_min, scheduler_count_max, scheduler_cpu_limit, scheduler_memory_limit, scheduler_memory_request, scheduler_cpu_request, worker_count_default, worker_count_min, worker_count_max, worker_memory_limit, worker_memory_request, worker_cpu_limit, worker_cpu_request, trigger_count, trigger_memory_limit, trigger_memory_request, trigger_cpu_limit, trigger_cpu_request, is_active, created_at, created_by, updated_at, updated_by FROM airflow_size
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListAirflowSize(ctx context.Context) ([]AirflowSize, error) {
	rows, err := q.db.Query(ctx, listAirflowSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AirflowSize
	for rows.Next() {
		var i AirflowSize
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.NumberOfNodesDefault,
			&i.NodeSizeID,
			&i.BackendDatabaseSizeID,
			&i.WebserverCount,
			&i.WebserverCpuLimit,
			&i.WebserverMemoryLimit,
			&i.WebserverCpuRequest,
			&i.WebserverMemoryRequest,
			&i.LogDirectoryDiskSize,
			&i.RedisDiskSize,
			&i.SchedularCountDefault,
			&i.SchedulerCountMin,
			&i.SchedulerCountMax,
			&i.SchedulerCpuLimit,
			&i.SchedulerMemoryLimit,
			&i.SchedulerMemoryRequest,
			&i.SchedulerCpuRequest,
			&i.WorkerCountDefault,
			&i.WorkerCountMin,
			&i.WorkerCountMax,
			&i.WorkerMemoryLimit,
			&i.WorkerMemoryRequest,
			&i.WorkerCpuLimit,
			&i.WorkerCpuRequest,
			&i.TriggerCount,
			&i.TriggerMemoryLimit,
			&i.TriggerMemoryRequest,
			&i.TriggerCpuLimit,
			&i.TriggerCpuRequest,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAirflowSize = `-- name: UpdateAirflowSize :one
UPDATE airflow_size
set 
    description = $2
    ,number_of_nodes_default = $3
    ,node_size_id = $4
    ,backend_database_size_id = $5
    ,webserver_count = $6
    ,webserver_cpu_limit = $7
    ,webserver_memory_limit = $8
    ,webserver_cpu_request = $9
    ,webserver_memory_request = $10
    ,log_directory_disk_size = $11
    ,redis_disk_size = $12
    ,schedular_count_default = $13
    ,scheduler_count_min = $14
    ,scheduler_count_max = $15
    ,scheduler_cpu_limit = $16
    ,scheduler_memory_limit = $17
    ,scheduler_memory_request = $18
    ,scheduler_cpu_request = $19
    ,worker_count_default = $20
    ,worker_count_min = $21
    ,worker_count_max = $22
    ,worker_memory_limit = $23
    ,worker_memory_request = $24
    ,worker_cpu_limit = $25
    ,worker_cpu_request = $26
    ,trigger_count = $27
    ,trigger_memory_limit = $28
    ,trigger_memory_request = $29
    ,trigger_cpu_limit = $30
    ,trigger_cpu_request = $31
    ,updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING id, name, description, number_of_nodes_default, node_size_id, backend_database_size_id, webserver_count, webserver_cpu_limit, webserver_memory_limit, webserver_cpu_request, webserver_memory_request, log_directory_disk_size, redis_disk_size, schedular_count_default, scheduler_count_min, scheduler_count_max, scheduler_cpu_limit, scheduler_memory_limit, scheduler_memory_request, scheduler_cpu_request, worker_count_default, worker_count_min, worker_count_max, worker_memory_limit, worker_memory_request, worker_cpu_limit, worker_cpu_request, trigger_count, trigger_memory_limit, trigger_memory_request, trigger_cpu_limit, trigger_cpu_request, is_active, created_at, created_by, updated_at, updated_by
`

type UpdateAirflowSizeParams struct {
	ID                     string
	Description            pgtype.Text
	NumberOfNodesDefault   int32
	NodeSizeID             string
	BackendDatabaseSizeID  pgtype.Text
	WebserverCount         pgtype.Int4
	WebserverCpuLimit      pgtype.Text
	WebserverMemoryLimit   pgtype.Text
	WebserverCpuRequest    pgtype.Text
	WebserverMemoryRequest pgtype.Text
	LogDirectoryDiskSize   pgtype.Text
	RedisDiskSize          pgtype.Text
	SchedularCountDefault  pgtype.Int4
	SchedulerCountMin      pgtype.Int4
	SchedulerCountMax      pgtype.Int4
	SchedulerCpuLimit      pgtype.Text
	SchedulerMemoryLimit   pgtype.Text
	SchedulerMemoryRequest pgtype.Text
	SchedulerCpuRequest    pgtype.Text
	WorkerCountDefault     pgtype.Int4
	WorkerCountMin         pgtype.Int4
	WorkerCountMax         pgtype.Int4
	WorkerMemoryLimit      pgtype.Text
	WorkerMemoryRequest    pgtype.Text
	WorkerCpuLimit         pgtype.Text
	WorkerCpuRequest       pgtype.Text
	TriggerCount           pgtype.Int4
	TriggerMemoryLimit     pgtype.Text
	TriggerMemoryRequest   pgtype.Text
	TriggerCpuLimit        pgtype.Text
	TriggerCpuRequest      pgtype.Text
}

func (q *Queries) UpdateAirflowSize(ctx context.Context, arg UpdateAirflowSizeParams) (AirflowSize, error) {
	row := q.db.QueryRow(ctx, updateAirflowSize,
		arg.ID,
		arg.Description,
		arg.NumberOfNodesDefault,
		arg.NodeSizeID,
		arg.BackendDatabaseSizeID,
		arg.WebserverCount,
		arg.WebserverCpuLimit,
		arg.WebserverMemoryLimit,
		arg.WebserverCpuRequest,
		arg.WebserverMemoryRequest,
		arg.LogDirectoryDiskSize,
		arg.RedisDiskSize,
		arg.SchedularCountDefault,
		arg.SchedulerCountMin,
		arg.SchedulerCountMax,
		arg.SchedulerCpuLimit,
		arg.SchedulerMemoryLimit,
		arg.SchedulerMemoryRequest,
		arg.SchedulerCpuRequest,
		arg.WorkerCountDefault,
		arg.WorkerCountMin,
		arg.WorkerCountMax,
		arg.WorkerMemoryLimit,
		arg.WorkerMemoryRequest,
		arg.WorkerCpuLimit,
		arg.WorkerCpuRequest,
		arg.TriggerCount,
		arg.TriggerMemoryLimit,
		arg.TriggerMemoryRequest,
		arg.TriggerCpuLimit,
		arg.TriggerCpuRequest,
	)
	var i AirflowSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NumberOfNodesDefault,
		&i.NodeSizeID,
		&i.BackendDatabaseSizeID,
		&i.WebserverCount,
		&i.WebserverCpuLimit,
		&i.WebserverMemoryLimit,
		&i.WebserverCpuRequest,
		&i.WebserverMemoryRequest,
		&i.LogDirectoryDiskSize,
		&i.RedisDiskSize,
		&i.SchedularCountDefault,
		&i.SchedulerCountMin,
		&i.SchedulerCountMax,
		&i.SchedulerCpuLimit,
		&i.SchedulerMemoryLimit,
		&i.SchedulerMemoryRequest,
		&i.SchedulerCpuRequest,
		&i.WorkerCountDefault,
		&i.WorkerCountMin,
		&i.WorkerCountMax,
		&i.WorkerMemoryLimit,
		&i.WorkerMemoryRequest,
		&i.WorkerCpuLimit,
		&i.WorkerCpuRequest,
		&i.TriggerCount,
		&i.TriggerMemoryLimit,
		&i.TriggerMemoryRequest,
		&i.TriggerCpuLimit,
		&i.TriggerCpuRequest,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
