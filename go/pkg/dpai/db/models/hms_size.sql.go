// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hms_size.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHmsSize = `-- name: CreateHmsSize :one

INSERT INTO hms_size (
id
,name
,description
,instance_type_id
,number_of_instances_default
,number_of_instances_min
,number_of_instances_max
,resource_cpu_limit
,resource_cpu_request
,resource_memory_limit
,resource_memory_request
,backend_database_size_id
,created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
RETURNING id, name, description, instance_type_id, number_of_instances_default, number_of_instances_min, number_of_instances_max, resource_cpu_limit, resource_cpu_request, resource_memory_limit, resource_memory_request, backend_database_size_id, is_active, created_at, created_by, updated_at, updated_by
`

type CreateHmsSizeParams struct {
	ID                       string
	Name                     string
	Description              pgtype.Text
	InstanceTypeID           pgtype.Text
	NumberOfInstancesDefault int32
	NumberOfInstancesMin     pgtype.Int4
	NumberOfInstancesMax     pgtype.Int4
	ResourceCpuLimit         pgtype.Text
	ResourceCpuRequest       pgtype.Text
	ResourceMemoryLimit      pgtype.Text
	ResourceMemoryRequest    pgtype.Text
	BackendDatabaseSizeID    pgtype.Text
	CreatedBy                string
}

func (q *Queries) CreateHmsSize(ctx context.Context, arg CreateHmsSizeParams) (HmsSize, error) {
	row := q.db.QueryRow(ctx, createHmsSize,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.InstanceTypeID,
		arg.NumberOfInstancesDefault,
		arg.NumberOfInstancesMin,
		arg.NumberOfInstancesMax,
		arg.ResourceCpuLimit,
		arg.ResourceCpuRequest,
		arg.ResourceMemoryLimit,
		arg.ResourceMemoryRequest,
		arg.BackendDatabaseSizeID,
		arg.CreatedBy,
	)
	var i HmsSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InstanceTypeID,
		&i.NumberOfInstancesDefault,
		&i.NumberOfInstancesMin,
		&i.NumberOfInstancesMax,
		&i.ResourceCpuLimit,
		&i.ResourceCpuRequest,
		&i.ResourceMemoryLimit,
		&i.ResourceMemoryRequest,
		&i.BackendDatabaseSizeID,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteHmsSize = `-- name: DeleteHmsSize :exec
update hms_size
set is_active=false,
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteHmsSize(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteHmsSize, id)
	return err
}

const getHmsSizeById = `-- name: GetHmsSizeById :one
SELECT id, name, description, instance_type_id, number_of_instances_default, number_of_instances_min, number_of_instances_max, resource_cpu_limit, resource_cpu_request, resource_memory_limit, resource_memory_request, backend_database_size_id, is_active, created_at, created_by, updated_at, updated_by FROM hms_size
WHERE id = $1 
AND is_active = true
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetHmsSizeById(ctx context.Context, id string) (HmsSize, error) {
	row := q.db.QueryRow(ctx, getHmsSizeById, id)
	var i HmsSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InstanceTypeID,
		&i.NumberOfInstancesDefault,
		&i.NumberOfInstancesMin,
		&i.NumberOfInstancesMax,
		&i.ResourceCpuLimit,
		&i.ResourceCpuRequest,
		&i.ResourceMemoryLimit,
		&i.ResourceMemoryRequest,
		&i.BackendDatabaseSizeID,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getHmsSizeByName = `-- name: GetHmsSizeByName :one
SELECT id, name, description, instance_type_id, number_of_instances_default, number_of_instances_min, number_of_instances_max, resource_cpu_limit, resource_cpu_request, resource_memory_limit, resource_memory_request, backend_database_size_id, is_active, created_at, created_by, updated_at, updated_by FROM hms_size
WHERE name = $1 
AND is_active = true
LIMIT 1
`

func (q *Queries) GetHmsSizeByName(ctx context.Context, name string) (HmsSize, error) {
	row := q.db.QueryRow(ctx, getHmsSizeByName, name)
	var i HmsSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InstanceTypeID,
		&i.NumberOfInstancesDefault,
		&i.NumberOfInstancesMin,
		&i.NumberOfInstancesMax,
		&i.ResourceCpuLimit,
		&i.ResourceCpuRequest,
		&i.ResourceMemoryLimit,
		&i.ResourceMemoryRequest,
		&i.BackendDatabaseSizeID,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listHmsSize = `-- name: ListHmsSize :many
SELECT id, name, description, instance_type_id, number_of_instances_default, number_of_instances_min, number_of_instances_max, resource_cpu_limit, resource_cpu_request, resource_memory_limit, resource_memory_request, backend_database_size_id, is_active, created_at, created_by, updated_at, updated_by FROM hms_size
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListHmsSize(ctx context.Context) ([]HmsSize, error) {
	rows, err := q.db.Query(ctx, listHmsSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HmsSize
	for rows.Next() {
		var i HmsSize
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.InstanceTypeID,
			&i.NumberOfInstancesDefault,
			&i.NumberOfInstancesMin,
			&i.NumberOfInstancesMax,
			&i.ResourceCpuLimit,
			&i.ResourceCpuRequest,
			&i.ResourceMemoryLimit,
			&i.ResourceMemoryRequest,
			&i.BackendDatabaseSizeID,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHmsSize = `-- name: UpdateHmsSize :one
UPDATE hms_size
set  description = $2
,number_of_instances_default = $3 
,number_of_instances_min = $4
,number_of_instances_max = $5 
,resource_cpu_limit = $6
,resource_cpu_request = $7 
,resource_memory_limit = $8 
,resource_memory_request = $9 
,backend_database_size_id = $10
,instance_type_id = $11
,updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING id, name, description, instance_type_id, number_of_instances_default, number_of_instances_min, number_of_instances_max, resource_cpu_limit, resource_cpu_request, resource_memory_limit, resource_memory_request, backend_database_size_id, is_active, created_at, created_by, updated_at, updated_by
`

type UpdateHmsSizeParams struct {
	ID                       string
	Description              pgtype.Text
	NumberOfInstancesDefault int32
	NumberOfInstancesMin     pgtype.Int4
	NumberOfInstancesMax     pgtype.Int4
	ResourceCpuLimit         pgtype.Text
	ResourceCpuRequest       pgtype.Text
	ResourceMemoryLimit      pgtype.Text
	ResourceMemoryRequest    pgtype.Text
	BackendDatabaseSizeID    pgtype.Text
	InstanceTypeID           pgtype.Text
}

func (q *Queries) UpdateHmsSize(ctx context.Context, arg UpdateHmsSizeParams) (HmsSize, error) {
	row := q.db.QueryRow(ctx, updateHmsSize,
		arg.ID,
		arg.Description,
		arg.NumberOfInstancesDefault,
		arg.NumberOfInstancesMin,
		arg.NumberOfInstancesMax,
		arg.ResourceCpuLimit,
		arg.ResourceCpuRequest,
		arg.ResourceMemoryLimit,
		arg.ResourceMemoryRequest,
		arg.BackendDatabaseSizeID,
		arg.InstanceTypeID,
	)
	var i HmsSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InstanceTypeID,
		&i.NumberOfInstancesDefault,
		&i.NumberOfInstancesMin,
		&i.NumberOfInstancesMax,
		&i.ResourceCpuLimit,
		&i.ResourceCpuRequest,
		&i.ResourceMemoryLimit,
		&i.ResourceMemoryRequest,
		&i.BackendDatabaseSizeID,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
