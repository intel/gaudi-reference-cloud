// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: postgres_version.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPostgresVersion = `-- name: CreatePostgresVersion :one


INSERT INTO postgres_version (
  id, name, description, version, postgres_version,
  image_reference, chart_reference,backward_compatible_from, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, description, version, postgres_version, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
`

type CreatePostgresVersionParams struct {
	ID                     string
	Name                   string
	Description            pgtype.Text
	Version                string
	PostgresVersion        string
	ImageReference         pgtype.Text
	ChartReference         []byte
	BackwardCompatibleFrom pgtype.Text
	CreatedBy              string
}

func (q *Queries) CreatePostgresVersion(ctx context.Context, arg CreatePostgresVersionParams) (PostgresVersion, error) {
	row := q.db.QueryRow(ctx, createPostgresVersion,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Version,
		arg.PostgresVersion,
		arg.ImageReference,
		arg.ChartReference,
		arg.BackwardCompatibleFrom,
		arg.CreatedBy,
	)
	var i PostgresVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.PostgresVersion,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deletePostgresVersion = `-- name: DeletePostgresVersion :exec
UPDATE postgres_version
set is_active=false,
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeletePostgresVersion(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePostgresVersion, id)
	return err
}

const getPostgresVersionById = `-- name: GetPostgresVersionById :one
SELECT id, name, description, version, postgres_version, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM postgres_version
WHERE id = $1
AND is_active = true
LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetPostgresVersionById(ctx context.Context, id string) (PostgresVersion, error) {
	row := q.db.QueryRow(ctx, getPostgresVersionById, id)
	var i PostgresVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.PostgresVersion,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getPostgresVersionByName = `-- name: GetPostgresVersionByName :one
SELECT id, name, description, version, postgres_version, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM postgres_version
WHERE name = $1 
AND is_active = true
LIMIT 1
`

func (q *Queries) GetPostgresVersionByName(ctx context.Context, name string) (PostgresVersion, error) {
	row := q.db.QueryRow(ctx, getPostgresVersionByName, name)
	var i PostgresVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.PostgresVersion,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listPostgresVersion = `-- name: ListPostgresVersion :many
SELECT id, name, description, version, postgres_version, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by FROM postgres_version
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListPostgresVersion(ctx context.Context) ([]PostgresVersion, error) {
	rows, err := q.db.Query(ctx, listPostgresVersion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostgresVersion
	for rows.Next() {
		var i PostgresVersion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.PostgresVersion,
			&i.ImageReference,
			&i.ChartReference,
			&i.BackwardCompatibleFrom,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostgresVersionUpgrades = `-- name: ListPostgresVersionUpgrades :many
SELECT id, name, description, version, postgres_version, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
FROM postgres_version
WHERE version > (
        SELECT version
        FROM postgres_version
        WHERE id = $1
        AND is_active = true
    )
and backward_compatible_from <= (
        SELECT version
        FROM postgres_version
        WHERE id = $1
        AND is_active = true
    )
AND is_active = true
ORDER BY version DESC
`

func (q *Queries) ListPostgresVersionUpgrades(ctx context.Context, dollar_1 pgtype.Text) ([]PostgresVersion, error) {
	rows, err := q.db.Query(ctx, listPostgresVersionUpgrades, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostgresVersion
	for rows.Next() {
		var i PostgresVersion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.PostgresVersion,
			&i.ImageReference,
			&i.ChartReference,
			&i.BackwardCompatibleFrom,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostgresVersion = `-- name: UpdatePostgresVersion :one
UPDATE postgres_version
  set description = $2,
  image_reference = $3,
  chart_reference = $4,
  backward_compatible_from = $5,
  updated_at = now()
WHERE id = $1
AND is_active = true
RETURNING id, name, description, version, postgres_version, image_reference, chart_reference, backward_compatible_from, is_active, created_at, created_by, updated_at, updated_by
`

type UpdatePostgresVersionParams struct {
	ID                     string
	Description            pgtype.Text
	ImageReference         pgtype.Text
	ChartReference         []byte
	BackwardCompatibleFrom pgtype.Text
}

func (q *Queries) UpdatePostgresVersion(ctx context.Context, arg UpdatePostgresVersionParams) (PostgresVersion, error) {
	row := q.db.QueryRow(ctx, updatePostgresVersion,
		arg.ID,
		arg.Description,
		arg.ImageReference,
		arg.ChartReference,
		arg.BackwardCompatibleFrom,
	)
	var i PostgresVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.PostgresVersion,
		&i.ImageReference,
		&i.ChartReference,
		&i.BackwardCompatibleFrom,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
