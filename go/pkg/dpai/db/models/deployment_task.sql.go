// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deployment_task.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUniqueDeploymentTaskId = `-- name: CheckUniqueDeploymentTaskId :one
select count(*)  as cnt
from deployment_task
where id like $1 || '%'
`

func (q *Queries) CheckUniqueDeploymentTaskId(ctx context.Context, dollar_1 pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, checkUniqueDeploymentTaskId, dollar_1)
	var cnt int64
	err := row.Scan(&cnt)
	return cnt, err
}

const createDeploymentTask = `-- name: CreateDeploymentTask :one
INSERT INTO deployment_task (
  id, deployment_id, name, description, status_state, status_display_name, status_message
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, deployment_id, name, description, timeout_in_mins, status_state, status_display_name, status_message, input_payload, output_payload, error_message, created_at, updated_at, started_at, ended_at
`

type CreateDeploymentTaskParams struct {
	ID                string
	DeploymentID      string
	Name              string
	Description       pgtype.Text
	StatusState       string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
}

func (q *Queries) CreateDeploymentTask(ctx context.Context, arg CreateDeploymentTaskParams) (DeploymentTask, error) {
	row := q.db.QueryRow(ctx, createDeploymentTask,
		arg.ID,
		arg.DeploymentID,
		arg.Name,
		arg.Description,
		arg.StatusState,
		arg.StatusDisplayName,
		arg.StatusMessage,
	)
	var i DeploymentTask
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Name,
		&i.Description,
		&i.TimeoutInMins,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.InputPayload,
		&i.OutputPayload,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}

const deleteDeploymentTask = `-- name: DeleteDeploymentTask :exec
DELETE FROM deployment_task
WHERE id = $1
`

func (q *Queries) DeleteDeploymentTask(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteDeploymentTask, id)
	return err
}

const deleteDeploymentTaskByDeploymentId = `-- name: DeleteDeploymentTaskByDeploymentId :exec
DELETE FROM deployment_task
WHERE deployment_id = $1
`

func (q *Queries) DeleteDeploymentTaskByDeploymentId(ctx context.Context, deploymentID string) error {
	_, err := q.db.Exec(ctx, deleteDeploymentTaskByDeploymentId, deploymentID)
	return err
}

const getDeploymentTask = `-- name: GetDeploymentTask :one
SELECT id, deployment_id, name, description, timeout_in_mins, status_state, status_display_name, status_message, input_payload, output_payload, error_message, created_at, updated_at, started_at, ended_at FROM deployment_task
WHERE id = $1 LIMIT 1
`

// INTEL CONFIDENTIAL
// Copyright (C) 2023 Intel Corporation
func (q *Queries) GetDeploymentTask(ctx context.Context, id string) (DeploymentTask, error) {
	row := q.db.QueryRow(ctx, getDeploymentTask, id)
	var i DeploymentTask
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Name,
		&i.Description,
		&i.TimeoutInMins,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.InputPayload,
		&i.OutputPayload,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}

const getUpdateDeploymentTask = `-- name: GetUpdateDeploymentTask :one
SELECT id, status_state, status_display_name, status_message, error_message FROM deployment_task
WHERE  id = $1 LIMIT 1
`

type GetUpdateDeploymentTaskRow struct {
	ID                string
	StatusState       string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	ErrorMessage      pgtype.Text
}

func (q *Queries) GetUpdateDeploymentTask(ctx context.Context, id string) (GetUpdateDeploymentTaskRow, error) {
	row := q.db.QueryRow(ctx, getUpdateDeploymentTask, id)
	var i GetUpdateDeploymentTaskRow
	err := row.Scan(
		&i.ID,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.ErrorMessage,
	)
	return i, err
}

const listDeploymentTasks = `-- name: ListDeploymentTasks :many
SELECT id, deployment_id, name, description, timeout_in_mins, status_state, status_display_name, status_message, input_payload, output_payload, error_message, created_at, updated_at, started_at, ended_at FROM deployment_task
WHERE deployment_id = $1
ORDER BY created_at
`

func (q *Queries) ListDeploymentTasks(ctx context.Context, deploymentID string) ([]DeploymentTask, error) {
	rows, err := q.db.Query(ctx, listDeploymentTasks, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeploymentTask
	for rows.Next() {
		var i DeploymentTask
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.Name,
			&i.Description,
			&i.TimeoutInMins,
			&i.StatusState,
			&i.StatusDisplayName,
			&i.StatusMessage,
			&i.InputPayload,
			&i.OutputPayload,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartedAt,
			&i.EndedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeploymentTask = `-- name: UpdateDeploymentTask :one
UPDATE deployment_task
  set status_state = $2,
  status_display_name = $3,
  status_message = $4,
  error_message = $5,
  ended_at = now(),
  updated_at = now()
WHERE id = $1
RETURNING id, deployment_id, name, description, timeout_in_mins, status_state, status_display_name, status_message, input_payload, output_payload, error_message, created_at, updated_at, started_at, ended_at
`

type UpdateDeploymentTaskParams struct {
	ID                string
	StatusState       string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	ErrorMessage      pgtype.Text
}

func (q *Queries) UpdateDeploymentTask(ctx context.Context, arg UpdateDeploymentTaskParams) (DeploymentTask, error) {
	row := q.db.QueryRow(ctx, updateDeploymentTask,
		arg.ID,
		arg.StatusState,
		arg.StatusDisplayName,
		arg.StatusMessage,
		arg.ErrorMessage,
	)
	var i DeploymentTask
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Name,
		&i.Description,
		&i.TimeoutInMins,
		&i.StatusState,
		&i.StatusDisplayName,
		&i.StatusMessage,
		&i.InputPayload,
		&i.OutputPayload,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}

const updateDeploymentTaskStatusAsFailed = `-- name: UpdateDeploymentTaskStatusAsFailed :exec
UPDATE deployment_task
  set status_state = 'DPAI_FAILED',
  status_display_name = $2,
  status_message = $3,
  error_message = $4,
  ended_at = now(),
  updated_at = now()
WHERE id = $1
`

type UpdateDeploymentTaskStatusAsFailedParams struct {
	ID                string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	ErrorMessage      pgtype.Text
}

func (q *Queries) UpdateDeploymentTaskStatusAsFailed(ctx context.Context, arg UpdateDeploymentTaskStatusAsFailedParams) error {
	_, err := q.db.Exec(ctx, updateDeploymentTaskStatusAsFailed,
		arg.ID,
		arg.StatusDisplayName,
		arg.StatusMessage,
		arg.ErrorMessage,
	)
	return err
}

const updateDeploymentTaskStatusAsRunning = `-- name: UpdateDeploymentTaskStatusAsRunning :exec
UPDATE deployment_task
  set status_state = 'DPAI_RUNNING',
  status_display_name = $2,
  status_message = $3,
  started_at = now(),
  updated_at = now()
WHERE id = $1
`

type UpdateDeploymentTaskStatusAsRunningParams struct {
	ID                string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
}

func (q *Queries) UpdateDeploymentTaskStatusAsRunning(ctx context.Context, arg UpdateDeploymentTaskStatusAsRunningParams) error {
	_, err := q.db.Exec(ctx, updateDeploymentTaskStatusAsRunning, arg.ID, arg.StatusDisplayName, arg.StatusMessage)
	return err
}

const updateDeploymentTaskStatusAsSuccess = `-- name: UpdateDeploymentTaskStatusAsSuccess :exec
UPDATE deployment_task
  set status_state = 'DPAI_SUCCESS',
  status_display_name = $2,
  status_message = $3,
  output_payload = $4,
  ended_at = now(),
  updated_at = now()
WHERE id = $1
`

type UpdateDeploymentTaskStatusAsSuccessParams struct {
	ID                string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	OutputPayload     []byte
}

func (q *Queries) UpdateDeploymentTaskStatusAsSuccess(ctx context.Context, arg UpdateDeploymentTaskStatusAsSuccessParams) error {
	_, err := q.db.Exec(ctx, updateDeploymentTaskStatusAsSuccess,
		arg.ID,
		arg.StatusDisplayName,
		arg.StatusMessage,
		arg.OutputPayload,
	)
	return err
}

const updateDeploymentTaskStatusAsUpstreamFailed = `-- name: UpdateDeploymentTaskStatusAsUpstreamFailed :exec
UPDATE deployment_task
  set status_state = 'DPAI_UPSTREAM_FAILED',
    status_display_name = $2,
  status_message = $3,
  error_message = $4,
  updated_at = now(),
  ended_at = now()
WHERE id = $1
`

type UpdateDeploymentTaskStatusAsUpstreamFailedParams struct {
	ID                string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
	ErrorMessage      pgtype.Text
}

func (q *Queries) UpdateDeploymentTaskStatusAsUpstreamFailed(ctx context.Context, arg UpdateDeploymentTaskStatusAsUpstreamFailedParams) error {
	_, err := q.db.Exec(ctx, updateDeploymentTaskStatusAsUpstreamFailed,
		arg.ID,
		arg.StatusDisplayName,
		arg.StatusMessage,
		arg.ErrorMessage,
	)
	return err
}

const updateDeploymentTaskStatusAsWaitingForUpstream = `-- name: UpdateDeploymentTaskStatusAsWaitingForUpstream :exec
UPDATE deployment_task
  set status_state = 'DPAI_WAITING_FOR_UPSTREAM',
  status_display_name = $2,
  status_message = $3,
  updated_at = now()
WHERE id = $1
`

type UpdateDeploymentTaskStatusAsWaitingForUpstreamParams struct {
	ID                string
	StatusDisplayName pgtype.Text
	StatusMessage     pgtype.Text
}

func (q *Queries) UpdateDeploymentTaskStatusAsWaitingForUpstream(ctx context.Context, arg UpdateDeploymentTaskStatusAsWaitingForUpstreamParams) error {
	_, err := q.db.Exec(ctx, updateDeploymentTaskStatusAsWaitingForUpstream, arg.ID, arg.StatusDisplayName, arg.StatusMessage)
	return err
}
