// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/firewall_operator/api/v1alpha1"
	provider "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/firewall_operator/internal/provider"
)

// MockFirewallProvider is a mock of FirewallProvider interface.
type MockFirewallProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallProviderMockRecorder
}

// MockFirewallProviderMockRecorder is the mock recorder for MockFirewallProvider.
type MockFirewallProviderMockRecorder struct {
	mock *MockFirewallProvider
}

// NewMockFirewallProvider creates a new mock instance.
func NewMockFirewallProvider(ctrl *gomock.Controller) *MockFirewallProvider {
	mock := &MockFirewallProvider{ctrl: ctrl}
	mock.recorder = &MockFirewallProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallProvider) EXPECT() *MockFirewallProviderMockRecorder {
	return m.recorder
}

// GetExistingCustomerAccess mocks base method.
func (m *MockFirewallProvider) GetExistingCustomerAccess(ctx context.Context, customerId, vip string) ([]provider.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingCustomerAccess", ctx, customerId, vip)
	ret0, _ := ret[0].([]provider.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingCustomerAccess indicates an expected call of GetExistingCustomerAccess.
func (mr *MockFirewallProviderMockRecorder) GetExistingCustomerAccess(ctx, customerId, vip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingCustomerAccess", reflect.TypeOf((*MockFirewallProvider)(nil).GetExistingCustomerAccess), ctx, customerId, vip)
}

// RemoveAccess mocks base method.
func (m *MockFirewallProvider) RemoveAccess(ctx context.Context, rule v1alpha1.FirewallRule) (*provider.RequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccess", ctx, rule)
	ret0, _ := ret[0].(*provider.RequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockFirewallProviderMockRecorder) RemoveAccess(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockFirewallProvider)(nil).RemoveAccess), ctx, rule)
}

// SyncFirewallRules mocks base method.
func (m *MockFirewallProvider) SyncFirewallRules(ctx context.Context, rules []v1alpha1.FirewallRule, existingRules []provider.Rule, vip, cloudAccountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncFirewallRules", ctx, rules, existingRules, vip, cloudAccountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncFirewallRules indicates an expected call of SyncFirewallRules.
func (mr *MockFirewallProviderMockRecorder) SyncFirewallRules(ctx, rules, existingRules, vip, cloudAccountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFirewallRules", reflect.TypeOf((*MockFirewallProvider)(nil).SyncFirewallRules), ctx, rules, existingRules, vip, cloudAccountId)
}
