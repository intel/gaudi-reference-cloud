// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/baremetal_enrollment/dcim (interfaces: DCIM)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dcim "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/baremetal_enrollment/dcim"
)

// MockDCIM is a mock of DCIM interface.
type MockDCIM struct {
	ctrl     *gomock.Controller
	recorder *MockDCIMMockRecorder
}

// MockDCIMMockRecorder is the mock recorder for MockDCIM.
type MockDCIMMockRecorder struct {
	mock *MockDCIM
}

// NewMockDCIM creates a new mock instance.
func NewMockDCIM(ctrl *gomock.Controller) *MockDCIM {
	mock := &MockDCIM{ctrl: ctrl}
	mock.recorder = &MockDCIMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDCIM) EXPECT() *MockDCIMMockRecorder {
	return m.recorder
}

// GetBMCMACAddress mocks base method.
func (m *MockDCIM) GetBMCMACAddress(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBMCMACAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBMCMACAddress indicates an expected call of GetBMCMACAddress.
func (mr *MockDCIMMockRecorder) GetBMCMACAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBMCMACAddress", reflect.TypeOf((*MockDCIM)(nil).GetBMCMACAddress), arg0, arg1, arg2)
}

// GetBMCURL mocks base method.
func (m *MockDCIM) GetBMCURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBMCURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBMCURL indicates an expected call of GetBMCURL.
func (mr *MockDCIMMockRecorder) GetBMCURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBMCURL", reflect.TypeOf((*MockDCIM)(nil).GetBMCURL), arg0, arg1)
}

// GetClusterNetworkMode mocks base method.
func (m *MockDCIM) GetClusterNetworkMode(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterNetworkMode", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterNetworkMode indicates an expected call of GetClusterNetworkMode.
func (mr *MockDCIMMockRecorder) GetClusterNetworkMode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterNetworkMode", reflect.TypeOf((*MockDCIM)(nil).GetClusterNetworkMode), arg0, arg1, arg2)
}

// GetClusterSize mocks base method.
func (m *MockDCIM) GetClusterSize(arg0 context.Context, arg1, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterSize indicates an expected call of GetClusterSize.
func (mr *MockDCIMMockRecorder) GetClusterSize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterSize", reflect.TypeOf((*MockDCIM)(nil).GetClusterSize), arg0, arg1, arg2)
}

// GetCustomField mocks base method.
func (m *MockDCIM) GetCustomField(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomField", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomField indicates an expected call of GetCustomField.
func (mr *MockDCIMMockRecorder) GetCustomField(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomField", reflect.TypeOf((*MockDCIM)(nil).GetCustomField), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetDeviceId mocks base method.
func (m *MockDCIM) GetDeviceId(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceId indicates an expected call of GetDeviceId.
func (mr *MockDCIMMockRecorder) GetDeviceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceId", reflect.TypeOf((*MockDCIM)(nil).GetDeviceId), arg0, arg1)
}

// GetDeviceNamespace mocks base method.
func (m *MockDCIM) GetDeviceNamespace(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceNamespace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceNamespace indicates an expected call of GetDeviceNamespace.
func (mr *MockDCIMMockRecorder) GetDeviceNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceNamespace", reflect.TypeOf((*MockDCIM)(nil).GetDeviceNamespace), arg0, arg1)
}

// GetDeviceRegionName mocks base method.
func (m *MockDCIM) GetDeviceRegionName(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRegionName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceRegionName indicates an expected call of GetDeviceRegionName.
func (mr *MockDCIMMockRecorder) GetDeviceRegionName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRegionName", reflect.TypeOf((*MockDCIM)(nil).GetDeviceRegionName), arg0, arg1)
}

// GetDeviceSwitchIPAddress mocks base method.
func (m *MockDCIM) GetDeviceSwitchIPAddress(arg0 context.Context, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSwitchIPAddress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceSwitchIPAddress indicates an expected call of GetDeviceSwitchIPAddress.
func (mr *MockDCIMMockRecorder) GetDeviceSwitchIPAddress(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSwitchIPAddress", reflect.TypeOf((*MockDCIM)(nil).GetDeviceSwitchIPAddress), arg0, arg1, arg2, arg3)
}

// NetBoxCustomGetRequest mocks base method.
func (m *MockDCIM) NetBoxCustomGetRequest(arg0 context.Context, arg1 string, arg2 map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetBoxCustomGetRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetBoxCustomGetRequest indicates an expected call of NetBoxCustomGetRequest.
func (mr *MockDCIMMockRecorder) NetBoxCustomGetRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetBoxCustomGetRequest", reflect.TypeOf((*MockDCIM)(nil).NetBoxCustomGetRequest), arg0, arg1, arg2)
}

// NetBoxCustomPatchRequest mocks base method.
func (m *MockDCIM) NetBoxCustomPatchRequest(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetBoxCustomPatchRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetBoxCustomPatchRequest indicates an expected call of NetBoxCustomPatchRequest.
func (mr *MockDCIMMockRecorder) NetBoxCustomPatchRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetBoxCustomPatchRequest", reflect.TypeOf((*MockDCIM)(nil).NetBoxCustomPatchRequest), arg0, arg1, arg2)
}

// PatchDeviceCustomFields mocks base method.
func (m *MockDCIM) PatchDeviceCustomFields(arg0 context.Context, arg1 string, arg2 int64, arg3 string, arg4 dcim.DeviceCustomFields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeviceCustomFields", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDeviceCustomFields indicates an expected call of PatchDeviceCustomFields.
func (mr *MockDCIMMockRecorder) PatchDeviceCustomFields(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeviceCustomFields", reflect.TypeOf((*MockDCIM)(nil).PatchDeviceCustomFields), arg0, arg1, arg2, arg3, arg4)
}

// UpdateBMValidationStatus mocks base method.
func (m *MockDCIM) UpdateBMValidationStatus(arg0 context.Context, arg1 int64, arg2 string, arg3 dcim.DeviceCustomFields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBMValidationStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBMValidationStatus indicates an expected call of UpdateBMValidationStatus.
func (mr *MockDCIMMockRecorder) UpdateBMValidationStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBMValidationStatus", reflect.TypeOf((*MockDCIM)(nil).UpdateBMValidationStatus), arg0, arg1, arg2, arg3)
}

// UpdateDeviceCustomFields mocks base method.
func (m *MockDCIM) UpdateDeviceCustomFields(arg0 context.Context, arg1 string, arg2 int64, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceCustomFields", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceCustomFields indicates an expected call of UpdateDeviceCustomFields.
func (mr *MockDCIMMockRecorder) UpdateDeviceCustomFields(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceCustomFields", reflect.TypeOf((*MockDCIM)(nil).UpdateDeviceCustomFields), arg0, arg1, arg2, arg3)
}

// UpdateDeviceStatus mocks base method.
func (m *MockDCIM) UpdateDeviceStatus(arg0 context.Context, arg1 string, arg2 int64, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceStatus indicates an expected call of UpdateDeviceStatus.
func (mr *MockDCIMMockRecorder) UpdateDeviceStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceStatus", reflect.TypeOf((*MockDCIM)(nil).UpdateDeviceStatus), arg0, arg1, arg2, arg3, arg4)
}
