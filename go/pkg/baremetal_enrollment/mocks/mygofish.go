// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/baremetal_enrollment/mygofish (interfaces: GoFishManagerAccessor,GoFishClientAccessor,GoFishServiceAccessor,GoFishAccountServiceAccessor,GoFishComputerSystemAccessor,GoFishBootAccessor,GoFishUpdateServiceAccessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mygofish "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/baremetal_enrollment/mygofish"
	gofish "github.com/stmcginnis/gofish"
	redfish "github.com/stmcginnis/gofish/redfish"
)

// MockGoFishManagerAccessor is a mock of GoFishManagerAccessor interface.
type MockGoFishManagerAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockGoFishManagerAccessorMockRecorder
}

// MockGoFishManagerAccessorMockRecorder is the mock recorder for MockGoFishManagerAccessor.
type MockGoFishManagerAccessorMockRecorder struct {
	mock *MockGoFishManagerAccessor
}

// NewMockGoFishManagerAccessor creates a new mock instance.
func NewMockGoFishManagerAccessor(ctrl *gomock.Controller) *MockGoFishManagerAccessor {
	mock := &MockGoFishManagerAccessor{ctrl: ctrl}
	mock.recorder = &MockGoFishManagerAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoFishManagerAccessor) EXPECT() *MockGoFishManagerAccessorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockGoFishManagerAccessor) Connect(arg0 gofish.ClientConfig) (mygofish.GoFishClientAccessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(mygofish.GoFishClientAccessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockGoFishManagerAccessorMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockGoFishManagerAccessor)(nil).Connect), arg0)
}

// MockGoFishClientAccessor is a mock of GoFishClientAccessor interface.
type MockGoFishClientAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockGoFishClientAccessorMockRecorder
}

// MockGoFishClientAccessorMockRecorder is the mock recorder for MockGoFishClientAccessor.
type MockGoFishClientAccessorMockRecorder struct {
	mock *MockGoFishClientAccessor
}

// NewMockGoFishClientAccessor creates a new mock instance.
func NewMockGoFishClientAccessor(ctrl *gomock.Controller) *MockGoFishClientAccessor {
	mock := &MockGoFishClientAccessor{ctrl: ctrl}
	mock.recorder = &MockGoFishClientAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoFishClientAccessor) EXPECT() *MockGoFishClientAccessorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGoFishClientAccessor) Get(arg0 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGoFishClientAccessorMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGoFishClientAccessor)(nil).Get), arg0)
}

// GetService mocks base method.
func (m *MockGoFishClientAccessor) GetService() mygofish.GoFishServiceAccessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService")
	ret0, _ := ret[0].(mygofish.GoFishServiceAccessor)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockGoFishClientAccessorMockRecorder) GetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockGoFishClientAccessor)(nil).GetService))
}

// Patch mocks base method.
func (m *MockGoFishClientAccessor) Patch(arg0 string, arg1 interface{}) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockGoFishClientAccessorMockRecorder) Patch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockGoFishClientAccessor)(nil).Patch), arg0, arg1)
}

// Post mocks base method.
func (m *MockGoFishClientAccessor) Post(arg0 string, arg1 interface{}) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockGoFishClientAccessorMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockGoFishClientAccessor)(nil).Post), arg0, arg1)
}

// MockGoFishServiceAccessor is a mock of GoFishServiceAccessor interface.
type MockGoFishServiceAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockGoFishServiceAccessorMockRecorder
}

// MockGoFishServiceAccessorMockRecorder is the mock recorder for MockGoFishServiceAccessor.
type MockGoFishServiceAccessorMockRecorder struct {
	mock *MockGoFishServiceAccessor
}

// NewMockGoFishServiceAccessor creates a new mock instance.
func NewMockGoFishServiceAccessor(ctrl *gomock.Controller) *MockGoFishServiceAccessor {
	mock := &MockGoFishServiceAccessor{ctrl: ctrl}
	mock.recorder = &MockGoFishServiceAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoFishServiceAccessor) EXPECT() *MockGoFishServiceAccessorMockRecorder {
	return m.recorder
}

// AccountService mocks base method.
func (m *MockGoFishServiceAccessor) AccountService() (mygofish.GoFishAccountServiceAccessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountService")
	ret0, _ := ret[0].(mygofish.GoFishAccountServiceAccessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountService indicates an expected call of AccountService.
func (mr *MockGoFishServiceAccessorMockRecorder) AccountService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountService", reflect.TypeOf((*MockGoFishServiceAccessor)(nil).AccountService))
}

// Systems mocks base method.
func (m *MockGoFishServiceAccessor) Systems() ([]mygofish.GoFishComputerSystemAccessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Systems")
	ret0, _ := ret[0].([]mygofish.GoFishComputerSystemAccessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Systems indicates an expected call of Systems.
func (mr *MockGoFishServiceAccessorMockRecorder) Systems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Systems", reflect.TypeOf((*MockGoFishServiceAccessor)(nil).Systems))
}

// UpdateService mocks base method.
func (m *MockGoFishServiceAccessor) UpdateService() (mygofish.GoFishUpdateServiceAccessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService")
	ret0, _ := ret[0].(mygofish.GoFishUpdateServiceAccessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockGoFishServiceAccessorMockRecorder) UpdateService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockGoFishServiceAccessor)(nil).UpdateService))
}

// MockGoFishAccountServiceAccessor is a mock of GoFishAccountServiceAccessor interface.
type MockGoFishAccountServiceAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockGoFishAccountServiceAccessorMockRecorder
}

// MockGoFishAccountServiceAccessorMockRecorder is the mock recorder for MockGoFishAccountServiceAccessor.
type MockGoFishAccountServiceAccessorMockRecorder struct {
	mock *MockGoFishAccountServiceAccessor
}

// NewMockGoFishAccountServiceAccessor creates a new mock instance.
func NewMockGoFishAccountServiceAccessor(ctrl *gomock.Controller) *MockGoFishAccountServiceAccessor {
	mock := &MockGoFishAccountServiceAccessor{ctrl: ctrl}
	mock.recorder = &MockGoFishAccountServiceAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoFishAccountServiceAccessor) EXPECT() *MockGoFishAccountServiceAccessorMockRecorder {
	return m.recorder
}

// Accounts mocks base method.
func (m *MockGoFishAccountServiceAccessor) Accounts() ([]*redfish.ManagerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts")
	ret0, _ := ret[0].([]*redfish.ManagerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockGoFishAccountServiceAccessorMockRecorder) Accounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockGoFishAccountServiceAccessor)(nil).Accounts))
}

// MockGoFishComputerSystemAccessor is a mock of GoFishComputerSystemAccessor interface.
type MockGoFishComputerSystemAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockGoFishComputerSystemAccessorMockRecorder
}

// MockGoFishComputerSystemAccessorMockRecorder is the mock recorder for MockGoFishComputerSystemAccessor.
type MockGoFishComputerSystemAccessorMockRecorder struct {
	mock *MockGoFishComputerSystemAccessor
}

// NewMockGoFishComputerSystemAccessor creates a new mock instance.
func NewMockGoFishComputerSystemAccessor(ctrl *gomock.Controller) *MockGoFishComputerSystemAccessor {
	mock := &MockGoFishComputerSystemAccessor{ctrl: ctrl}
	mock.recorder = &MockGoFishComputerSystemAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoFishComputerSystemAccessor) EXPECT() *MockGoFishComputerSystemAccessorMockRecorder {
	return m.recorder
}

// Boot mocks base method.
func (m *MockGoFishComputerSystemAccessor) Boot() mygofish.GoFishBootAccessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Boot")
	ret0, _ := ret[0].(mygofish.GoFishBootAccessor)
	return ret0
}

// Boot indicates an expected call of Boot.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) Boot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boot", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).Boot))
}

// EthernetInterfaces mocks base method.
func (m *MockGoFishComputerSystemAccessor) EthernetInterfaces() ([]*redfish.EthernetInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthernetInterfaces")
	ret0, _ := ret[0].([]*redfish.EthernetInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthernetInterfaces indicates an expected call of EthernetInterfaces.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) EthernetInterfaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthernetInterfaces", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).EthernetInterfaces))
}

// ID mocks base method.
func (m *MockGoFishComputerSystemAccessor) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).ID))
}

// Manufacturer mocks base method.
func (m *MockGoFishComputerSystemAccessor) Manufacturer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manufacturer")
	ret0, _ := ret[0].(string)
	return ret0
}

// Manufacturer indicates an expected call of Manufacturer.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) Manufacturer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manufacturer", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).Manufacturer))
}

// Memory mocks base method.
func (m *MockGoFishComputerSystemAccessor) Memory() ([]*redfish.Memory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Memory")
	ret0, _ := ret[0].([]*redfish.Memory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Memory indicates an expected call of Memory.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) Memory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Memory", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).Memory))
}

// Model mocks base method.
func (m *MockGoFishComputerSystemAccessor) Model() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(string)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).Model))
}

// Name mocks base method.
func (m *MockGoFishComputerSystemAccessor) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).Name))
}

// NetworkInterfaces mocks base method.
func (m *MockGoFishComputerSystemAccessor) NetworkInterfaces() ([]*redfish.NetworkInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInterfaces")
	ret0, _ := ret[0].([]*redfish.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInterfaces indicates an expected call of NetworkInterfaces.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) NetworkInterfaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInterfaces", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).NetworkInterfaces))
}

// ODataID mocks base method.
func (m *MockGoFishComputerSystemAccessor) ODataID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ODataID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ODataID indicates an expected call of ODataID.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) ODataID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ODataID", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).ODataID))
}

// PCIeDevices mocks base method.
func (m *MockGoFishComputerSystemAccessor) PCIeDevices() ([]*redfish.PCIeDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PCIeDevices")
	ret0, _ := ret[0].([]*redfish.PCIeDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PCIeDevices indicates an expected call of PCIeDevices.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) PCIeDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PCIeDevices", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).PCIeDevices))
}

// PowerState mocks base method.
func (m *MockGoFishComputerSystemAccessor) PowerState() redfish.PowerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerState")
	ret0, _ := ret[0].(redfish.PowerState)
	return ret0
}

// PowerState indicates an expected call of PowerState.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) PowerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerState", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).PowerState))
}

// Processors mocks base method.
func (m *MockGoFishComputerSystemAccessor) Processors() ([]*redfish.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processors")
	ret0, _ := ret[0].([]*redfish.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Processors indicates an expected call of Processors.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) Processors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processors", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).Processors))
}

// Reset mocks base method.
func (m *MockGoFishComputerSystemAccessor) Reset(arg0 redfish.ResetType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).Reset), arg0)
}

// SetBoot mocks base method.
func (m *MockGoFishComputerSystemAccessor) SetBoot(arg0 mygofish.GoFishBootAccessor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBoot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBoot indicates an expected call of SetBoot.
func (mr *MockGoFishComputerSystemAccessorMockRecorder) SetBoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBoot", reflect.TypeOf((*MockGoFishComputerSystemAccessor)(nil).SetBoot), arg0)
}

// MockGoFishBootAccessor is a mock of GoFishBootAccessor interface.
type MockGoFishBootAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockGoFishBootAccessorMockRecorder
}

// MockGoFishBootAccessorMockRecorder is the mock recorder for MockGoFishBootAccessor.
type MockGoFishBootAccessorMockRecorder struct {
	mock *MockGoFishBootAccessor
}

// NewMockGoFishBootAccessor creates a new mock instance.
func NewMockGoFishBootAccessor(ctrl *gomock.Controller) *MockGoFishBootAccessor {
	mock := &MockGoFishBootAccessor{ctrl: ctrl}
	mock.recorder = &MockGoFishBootAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoFishBootAccessor) EXPECT() *MockGoFishBootAccessorMockRecorder {
	return m.recorder
}

// BootOrder mocks base method.
func (m *MockGoFishBootAccessor) BootOrder() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootOrder")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BootOrder indicates an expected call of BootOrder.
func (mr *MockGoFishBootAccessorMockRecorder) BootOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootOrder", reflect.TypeOf((*MockGoFishBootAccessor)(nil).BootOrder))
}

// GetBoot mocks base method.
func (m *MockGoFishBootAccessor) GetBoot() redfish.Boot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoot")
	ret0, _ := ret[0].(redfish.Boot)
	return ret0
}

// GetBoot indicates an expected call of GetBoot.
func (mr *MockGoFishBootAccessorMockRecorder) GetBoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoot", reflect.TypeOf((*MockGoFishBootAccessor)(nil).GetBoot))
}

// SetBootOrder mocks base method.
func (m *MockGoFishBootAccessor) SetBootOrder(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBootOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBootOrder indicates an expected call of SetBootOrder.
func (mr *MockGoFishBootAccessorMockRecorder) SetBootOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBootOrder", reflect.TypeOf((*MockGoFishBootAccessor)(nil).SetBootOrder), arg0)
}

// MockGoFishUpdateServiceAccessor is a mock of GoFishUpdateServiceAccessor interface.
type MockGoFishUpdateServiceAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockGoFishUpdateServiceAccessorMockRecorder
}

// MockGoFishUpdateServiceAccessorMockRecorder is the mock recorder for MockGoFishUpdateServiceAccessor.
type MockGoFishUpdateServiceAccessorMockRecorder struct {
	mock *MockGoFishUpdateServiceAccessor
}

// NewMockGoFishUpdateServiceAccessor creates a new mock instance.
func NewMockGoFishUpdateServiceAccessor(ctrl *gomock.Controller) *MockGoFishUpdateServiceAccessor {
	mock := &MockGoFishUpdateServiceAccessor{ctrl: ctrl}
	mock.recorder = &MockGoFishUpdateServiceAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoFishUpdateServiceAccessor) EXPECT() *MockGoFishUpdateServiceAccessorMockRecorder {
	return m.recorder
}

// FirmwareInventories mocks base method.
func (m *MockGoFishUpdateServiceAccessor) FirmwareInventories() ([]*redfish.SoftwareInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirmwareInventories")
	ret0, _ := ret[0].([]*redfish.SoftwareInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirmwareInventories indicates an expected call of FirmwareInventories.
func (mr *MockGoFishUpdateServiceAccessorMockRecorder) FirmwareInventories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirmwareInventories", reflect.TypeOf((*MockGoFishUpdateServiceAccessor)(nil).FirmwareInventories))
}
