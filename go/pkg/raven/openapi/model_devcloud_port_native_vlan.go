/*
Devcloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DevcloudPortNativeVlan - struct for DevcloudPortNativeVlan
type DevcloudPortNativeVlan struct {
	Float32 *float32
	String  *string
}

// float32AsDevcloudPortNativeVlan is a convenience function that returns float32 wrapped in DevcloudPortNativeVlan
func Float32AsDevcloudPortNativeVlan(v *float32) DevcloudPortNativeVlan {
	return DevcloudPortNativeVlan{
		Float32: v,
	}
}

// stringAsDevcloudPortNativeVlan is a convenience function that returns string wrapped in DevcloudPortNativeVlan
func StringAsDevcloudPortNativeVlan(v *string) DevcloudPortNativeVlan {
	return DevcloudPortNativeVlan{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DevcloudPortNativeVlan) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, jsonErr := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" || jsonErr != nil { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, jsonErr := json.Marshal(dst.String)
		if string(jsonString) == "{}" || jsonErr != nil { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DevcloudPortNativeVlan)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DevcloudPortNativeVlan)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DevcloudPortNativeVlan) MarshalJSON() ([]byte, error) {
	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DevcloudPortNativeVlan) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDevcloudPortNativeVlan struct {
	value *DevcloudPortNativeVlan
	isSet bool
}

func (v NullableDevcloudPortNativeVlan) Get() *DevcloudPortNativeVlan {
	return v.value
}

func (v *NullableDevcloudPortNativeVlan) Set(val *DevcloudPortNativeVlan) {
	v.value = val
	v.isSet = true
}

func (v NullableDevcloudPortNativeVlan) IsSet() bool {
	return v.isSet
}

func (v *NullableDevcloudPortNativeVlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevcloudPortNativeVlan(val *DevcloudPortNativeVlan) *NullableDevcloudPortNativeVlan {
	return &NullableDevcloudPortNativeVlan{value: val, isSet: true}
}

func (v NullableDevcloudPortNativeVlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevcloudPortNativeVlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
