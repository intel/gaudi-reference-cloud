/*
Devcloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PortsApiService PortsApi service
type PortsApiService service

type ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest struct {
	ctx                                                context.Context
	ApiService                                         *PortsApiService
	environment                                        string
	devcloudV2EnvironmentConfigurePortAccessPutRequest *DevcloudV2EnvironmentConfigurePortAccessPutRequest
}

func (r ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest) DevcloudV2EnvironmentConfigurePortAccessPutRequest(devcloudV2EnvironmentConfigurePortAccessPutRequest DevcloudV2EnvironmentConfigurePortAccessPutRequest) ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest {
	r.devcloudV2EnvironmentConfigurePortAccessPutRequest = &devcloudV2EnvironmentConfigurePortAccessPutRequest
	return r
}

func (r ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest) Execute() (*DevcloudV2EnvironmentConfigurePortAccessPut200Response, *http.Response, error) {
	return r.ApiService.DevcloudV2EnvironmentConfigurePortAccessPutExecute(r)
}

/*
DevcloudV2EnvironmentConfigurePortAccessPut Method for DevcloudV2EnvironmentConfigurePortAccessPut

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param environment
	@return ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest
*/
func (a *PortsApiService) DevcloudV2EnvironmentConfigurePortAccessPut(ctx context.Context, environment string) ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest {
	return ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest{
		ApiService:  a,
		ctx:         ctx,
		environment: environment,
	}
}

// Execute executes the request
//
//	@return DevcloudV2EnvironmentConfigurePortAccessPut200Response
func (a *PortsApiService) DevcloudV2EnvironmentConfigurePortAccessPutExecute(r ApiDevcloudV2EnvironmentConfigurePortAccessPutRequest) (*DevcloudV2EnvironmentConfigurePortAccessPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DevcloudV2EnvironmentConfigurePortAccessPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.DevcloudV2EnvironmentConfigurePortAccessPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devcloud/v2/{environment}/configure/port/access"
	localVarPath = strings.Replace(localVarPath, "{"+"environment"+"}", url.PathEscape(parameterToString(r.environment, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.devcloudV2EnvironmentConfigurePortAccessPutRequest == nil {
		return localVarReturnValue, nil, reportError("devcloudV2EnvironmentConfigurePortAccessPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.devcloudV2EnvironmentConfigurePortAccessPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Model503
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest struct {
	ctx                                               context.Context
	ApiService                                        *PortsApiService
	environment                                       string
	devcloudV2EnvironmentConfigurePortTrunkPutRequest *DevcloudV2EnvironmentConfigurePortTrunkPutRequest
}

func (r ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest) DevcloudV2EnvironmentConfigurePortTrunkPutRequest(devcloudV2EnvironmentConfigurePortTrunkPutRequest DevcloudV2EnvironmentConfigurePortTrunkPutRequest) ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest {
	r.devcloudV2EnvironmentConfigurePortTrunkPutRequest = &devcloudV2EnvironmentConfigurePortTrunkPutRequest
	return r
}

func (r ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest) Execute() (*DevcloudV2EnvironmentConfigurePortAccessPut200Response, *http.Response, error) {
	return r.ApiService.DevcloudV2EnvironmentConfigurePortTrunkPutExecute(r)
}

/*
DevcloudV2EnvironmentConfigurePortTrunkPut Method for DevcloudV2EnvironmentConfigurePortTrunkPut

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param environment
	@return ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest
*/
func (a *PortsApiService) DevcloudV2EnvironmentConfigurePortTrunkPut(ctx context.Context, environment string) ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest {
	return ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest{
		ApiService:  a,
		ctx:         ctx,
		environment: environment,
	}
}

// Execute executes the request
//
//	@return DevcloudV2EnvironmentConfigurePortAccessPut200Response
func (a *PortsApiService) DevcloudV2EnvironmentConfigurePortTrunkPutExecute(r ApiDevcloudV2EnvironmentConfigurePortTrunkPutRequest) (*DevcloudV2EnvironmentConfigurePortAccessPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DevcloudV2EnvironmentConfigurePortAccessPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.DevcloudV2EnvironmentConfigurePortTrunkPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devcloud/v2/{environment}/configure/port/trunk"
	localVarPath = strings.Replace(localVarPath, "{"+"environment"+"}", url.PathEscape(parameterToString(r.environment, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.devcloudV2EnvironmentConfigurePortTrunkPutRequest == nil {
		return localVarReturnValue, nil, reportError("devcloudV2EnvironmentConfigurePortTrunkPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.devcloudV2EnvironmentConfigurePortTrunkPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Model503
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevcloudV2EnvironmentListPortsGetRequest struct {
	ctx         context.Context
	ApiService  *PortsApiService
	switchFqdn  *string
	environment string
}

func (r ApiDevcloudV2EnvironmentListPortsGetRequest) SwitchFqdn(switchFqdn string) ApiDevcloudV2EnvironmentListPortsGetRequest {
	r.switchFqdn = &switchFqdn
	return r
}

func (r ApiDevcloudV2EnvironmentListPortsGetRequest) Execute() (*DevcloudV2EnvironmentListPortsGet200Response, *http.Response, error) {
	return r.ApiService.DevcloudV2EnvironmentListPortsGetExecute(r)
}

/*
DevcloudV2EnvironmentListPortsGet Method for DevcloudV2EnvironmentListPortsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param environment
	@return ApiDevcloudV2EnvironmentListPortsGetRequest
*/
func (a *PortsApiService) DevcloudV2EnvironmentListPortsGet(ctx context.Context, environment string) ApiDevcloudV2EnvironmentListPortsGetRequest {
	return ApiDevcloudV2EnvironmentListPortsGetRequest{
		ApiService:  a,
		ctx:         ctx,
		environment: environment,
	}
}

// Execute executes the request
//
//	@return DevcloudV2EnvironmentListPortsGet200Response
func (a *PortsApiService) DevcloudV2EnvironmentListPortsGetExecute(r ApiDevcloudV2EnvironmentListPortsGetRequest) (*DevcloudV2EnvironmentListPortsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DevcloudV2EnvironmentListPortsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.DevcloudV2EnvironmentListPortsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devcloud/v2/{environment}/list/ports"
	localVarPath = strings.Replace(localVarPath, "{"+"environment"+"}", url.PathEscape(parameterToString(r.environment, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.switchFqdn == nil {
		return localVarReturnValue, nil, reportError("switchFqdn is required and must be specified")
	}

	localVarQueryParams.Add("switch_fqdn", parameterToString(*r.switchFqdn, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevcloudV2EnvironmentPortDetailsGetRequest struct {
	ctx         context.Context
	ApiService  *PortsApiService
	switchFqdn  *string
	switchPort  *string
	environment string
}

func (r ApiDevcloudV2EnvironmentPortDetailsGetRequest) SwitchFqdn(switchFqdn string) ApiDevcloudV2EnvironmentPortDetailsGetRequest {
	r.switchFqdn = &switchFqdn
	return r
}

func (r ApiDevcloudV2EnvironmentPortDetailsGetRequest) SwitchPort(switchPort string) ApiDevcloudV2EnvironmentPortDetailsGetRequest {
	r.switchPort = &switchPort
	return r
}

func (r ApiDevcloudV2EnvironmentPortDetailsGetRequest) Execute() (*DevcloudV2EnvironmentPortDetailsGet200Response, *http.Response, error) {
	return r.ApiService.DevcloudV2EnvironmentPortDetailsGetExecute(r)
}

/*
DevcloudV2EnvironmentPortDetailsGet Method for DevcloudV2EnvironmentPortDetailsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param environment
	@return ApiDevcloudV2EnvironmentPortDetailsGetRequest
*/
func (a *PortsApiService) DevcloudV2EnvironmentPortDetailsGet(ctx context.Context, environment string) ApiDevcloudV2EnvironmentPortDetailsGetRequest {
	return ApiDevcloudV2EnvironmentPortDetailsGetRequest{
		ApiService:  a,
		ctx:         ctx,
		environment: environment,
	}
}

// Execute executes the request
//
//	@return DevcloudV2EnvironmentPortDetailsGet200Response
func (a *PortsApiService) DevcloudV2EnvironmentPortDetailsGetExecute(r ApiDevcloudV2EnvironmentPortDetailsGetRequest) (*DevcloudV2EnvironmentPortDetailsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DevcloudV2EnvironmentPortDetailsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortsApiService.DevcloudV2EnvironmentPortDetailsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devcloud/v2/{environment}/port/details"
	localVarPath = strings.Replace(localVarPath, "{"+"environment"+"}", url.PathEscape(parameterToString(r.environment, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.switchFqdn == nil {
		return localVarReturnValue, nil, reportError("switchFqdn is required and must be specified")
	}
	if r.switchPort == nil {
		return localVarReturnValue, nil, reportError("switchPort is required and must be specified")
	}

	localVarQueryParams.Add("switch_fqdn", parameterToString(*r.switchFqdn, ""))
	localVarQueryParams.Add("switch_port", parameterToString(*r.switchPort, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v DevcloudV2EnvironmentConfigurePortAccessPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
