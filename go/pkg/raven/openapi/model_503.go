/*
Devcloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Model503 struct for Model503
type Model503 struct {
	Error   *string  `json:"error,omitempty"`
	Message []string `json:"message,omitempty"`
	Status  *bool    `json:"status,omitempty"`
}

// NewModel503 instantiates a new Model503 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel503() *Model503 {
	this := Model503{}
	var error_ string = "Service Temporarily Unavailable"
	this.Error = &error_
	var status bool = false
	this.Status = &status
	return &this
}

// NewModel503WithDefaults instantiates a new Model503 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModel503WithDefaults() *Model503 {
	this := Model503{}
	var error_ string = "Service Temporarily Unavailable"
	this.Error = &error_
	var status bool = false
	this.Status = &status
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Model503) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model503) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Model503) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Model503) SetError(v string) {
	o.Error = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Model503) GetMessage() []string {
	if o == nil || isNil(o.Message) {
		var ret []string
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model503) GetMessageOk() ([]string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Model503) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given []string and assigns it to the Message field.
func (o *Model503) SetMessage(v []string) {
	o.Message = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Model503) GetStatus() bool {
	if o == nil || isNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model503) GetStatusOk() (*bool, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Model503) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *Model503) SetStatus(v bool) {
	o.Status = &v
}

func (o Model503) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableModel503 struct {
	value *Model503
	isSet bool
}

func (v NullableModel503) Get() *Model503 {
	return v.value
}

func (v *NullableModel503) Set(val *Model503) {
	v.value = val
	v.isSet = true
}

func (v NullableModel503) IsSet() bool {
	return v.isSet
}

func (v *NullableModel503) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel503(val *Model503) *NullableModel503 {
	return &NullableModel503{value: val, isSet: true}
}

func (v NullableModel503) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel503) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
