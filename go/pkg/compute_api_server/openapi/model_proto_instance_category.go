/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProtoInstanceCategory the model 'ProtoInstanceCategory'
type ProtoInstanceCategory string

// List of protoInstanceCategory
const (
	VIRTUAL_MACHINE ProtoInstanceCategory = "VirtualMachine"
	BARE_METAL_HOST ProtoInstanceCategory = "BareMetalHost"
)

// All allowed values of ProtoInstanceCategory enum
var AllowedProtoInstanceCategoryEnumValues = []ProtoInstanceCategory{
	"VirtualMachine",
	"BareMetalHost",
}

func (v *ProtoInstanceCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtoInstanceCategory(value)
	for _, existing := range AllowedProtoInstanceCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtoInstanceCategory", value)
}

// NewProtoInstanceCategoryFromValue returns a pointer to a valid ProtoInstanceCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtoInstanceCategoryFromValue(v string) (*ProtoInstanceCategory, error) {
	ev := ProtoInstanceCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtoInstanceCategory: valid values are %v", v, AllowedProtoInstanceCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtoInstanceCategory) IsValid() bool {
	for _, existing := range AllowedProtoInstanceCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to protoInstanceCategory value
func (v ProtoInstanceCategory) Ptr() *ProtoInstanceCategory {
	return &v
}

type NullableProtoInstanceCategory struct {
	value *ProtoInstanceCategory
	isSet bool
}

func (v NullableProtoInstanceCategory) Get() *ProtoInstanceCategory {
	return v.value
}

func (v *NullableProtoInstanceCategory) Set(val *ProtoInstanceCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoInstanceCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoInstanceCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoInstanceCategory(val *ProtoInstanceCategory) *NullableProtoInstanceCategory {
	return &NullableProtoInstanceCategory{value: val, isSet: true}
}

func (v NullableProtoInstanceCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoInstanceCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
