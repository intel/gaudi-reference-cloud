/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProtoInstance struct for ProtoInstance
type ProtoInstance struct {
	Metadata *ProtoInstanceMetadata `json:"metadata,omitempty"`
	Spec     *ProtoInstanceSpec     `json:"spec,omitempty"`
	Status   *ProtoInstanceStatus   `json:"status,omitempty"`
}

// NewProtoInstance instantiates a new ProtoInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoInstance() *ProtoInstance {
	this := ProtoInstance{}
	return &this
}

// NewProtoInstanceWithDefaults instantiates a new ProtoInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoInstanceWithDefaults() *ProtoInstance {
	this := ProtoInstance{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ProtoInstance) GetMetadata() ProtoInstanceMetadata {
	if o == nil || isNil(o.Metadata) {
		var ret ProtoInstanceMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstance) GetMetadataOk() (*ProtoInstanceMetadata, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ProtoInstance) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ProtoInstanceMetadata and assigns it to the Metadata field.
func (o *ProtoInstance) SetMetadata(v ProtoInstanceMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *ProtoInstance) GetSpec() ProtoInstanceSpec {
	if o == nil || isNil(o.Spec) {
		var ret ProtoInstanceSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstance) GetSpecOk() (*ProtoInstanceSpec, bool) {
	if o == nil || isNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *ProtoInstance) HasSpec() bool {
	if o != nil && !isNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given ProtoInstanceSpec and assigns it to the Spec field.
func (o *ProtoInstance) SetSpec(v ProtoInstanceSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProtoInstance) GetStatus() ProtoInstanceStatus {
	if o == nil || isNil(o.Status) {
		var ret ProtoInstanceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstance) GetStatusOk() (*ProtoInstanceStatus, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProtoInstance) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProtoInstanceStatus and assigns it to the Status field.
func (o *ProtoInstance) SetStatus(v ProtoInstanceStatus) {
	o.Status = &v
}

func (o ProtoInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableProtoInstance struct {
	value *ProtoInstance
	isSet bool
}

func (v NullableProtoInstance) Get() *ProtoInstance {
	return v.value
}

func (v *NullableProtoInstance) Set(val *ProtoInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoInstance(val *ProtoInstance) *NullableProtoInstance {
	return &NullableProtoInstance{value: val, isSet: true}
}

func (v NullableProtoInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
