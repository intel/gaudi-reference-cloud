/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProtoInstanceTypeSpec struct for ProtoInstanceTypeSpec
type ProtoInstanceTypeSpec struct {
	Name             *string                `json:"name,omitempty"`
	DisplayName      *string                `json:"displayName,omitempty"`
	Description      *string                `json:"description,omitempty"`
	InstanceCategory *ProtoInstanceCategory `json:"instanceCategory,omitempty"`
	Cpu              *ProtoCpuSpec          `json:"cpu,omitempty"`
	Memory           *ProtoMemorySpec       `json:"memory,omitempty"`
	Disks            []ProtoDiskSpec        `json:"disks,omitempty"`
	Gpu              *ProtoGpuSpec          `json:"gpu,omitempty"`
	HbmMode          *string                `json:"hbmMode,omitempty"`
}

// NewProtoInstanceTypeSpec instantiates a new ProtoInstanceTypeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoInstanceTypeSpec() *ProtoInstanceTypeSpec {
	this := ProtoInstanceTypeSpec{}
	var instanceCategory ProtoInstanceCategory = VIRTUAL_MACHINE
	this.InstanceCategory = &instanceCategory
	return &this
}

// NewProtoInstanceTypeSpecWithDefaults instantiates a new ProtoInstanceTypeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoInstanceTypeSpecWithDefaults() *ProtoInstanceTypeSpec {
	this := ProtoInstanceTypeSpec{}
	var instanceCategory ProtoInstanceCategory = VIRTUAL_MACHINE
	this.InstanceCategory = &instanceCategory
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProtoInstanceTypeSpec) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ProtoInstanceTypeSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProtoInstanceTypeSpec) SetDescription(v string) {
	o.Description = &v
}

// GetInstanceCategory returns the InstanceCategory field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetInstanceCategory() ProtoInstanceCategory {
	if o == nil || isNil(o.InstanceCategory) {
		var ret ProtoInstanceCategory
		return ret
	}
	return *o.InstanceCategory
}

// GetInstanceCategoryOk returns a tuple with the InstanceCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetInstanceCategoryOk() (*ProtoInstanceCategory, bool) {
	if o == nil || isNil(o.InstanceCategory) {
		return nil, false
	}
	return o.InstanceCategory, true
}

// HasInstanceCategory returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasInstanceCategory() bool {
	if o != nil && !isNil(o.InstanceCategory) {
		return true
	}

	return false
}

// SetInstanceCategory gets a reference to the given ProtoInstanceCategory and assigns it to the InstanceCategory field.
func (o *ProtoInstanceTypeSpec) SetInstanceCategory(v ProtoInstanceCategory) {
	o.InstanceCategory = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetCpu() ProtoCpuSpec {
	if o == nil || isNil(o.Cpu) {
		var ret ProtoCpuSpec
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetCpuOk() (*ProtoCpuSpec, bool) {
	if o == nil || isNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasCpu() bool {
	if o != nil && !isNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given ProtoCpuSpec and assigns it to the Cpu field.
func (o *ProtoInstanceTypeSpec) SetCpu(v ProtoCpuSpec) {
	o.Cpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetMemory() ProtoMemorySpec {
	if o == nil || isNil(o.Memory) {
		var ret ProtoMemorySpec
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetMemoryOk() (*ProtoMemorySpec, bool) {
	if o == nil || isNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasMemory() bool {
	if o != nil && !isNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given ProtoMemorySpec and assigns it to the Memory field.
func (o *ProtoInstanceTypeSpec) SetMemory(v ProtoMemorySpec) {
	o.Memory = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetDisks() []ProtoDiskSpec {
	if o == nil || isNil(o.Disks) {
		var ret []ProtoDiskSpec
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetDisksOk() ([]ProtoDiskSpec, bool) {
	if o == nil || isNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasDisks() bool {
	if o != nil && !isNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []ProtoDiskSpec and assigns it to the Disks field.
func (o *ProtoInstanceTypeSpec) SetDisks(v []ProtoDiskSpec) {
	o.Disks = v
}

// GetGpu returns the Gpu field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetGpu() ProtoGpuSpec {
	if o == nil || isNil(o.Gpu) {
		var ret ProtoGpuSpec
		return ret
	}
	return *o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetGpuOk() (*ProtoGpuSpec, bool) {
	if o == nil || isNil(o.Gpu) {
		return nil, false
	}
	return o.Gpu, true
}

// HasGpu returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasGpu() bool {
	if o != nil && !isNil(o.Gpu) {
		return true
	}

	return false
}

// SetGpu gets a reference to the given ProtoGpuSpec and assigns it to the Gpu field.
func (o *ProtoInstanceTypeSpec) SetGpu(v ProtoGpuSpec) {
	o.Gpu = &v
}

// GetHbmMode returns the HbmMode field value if set, zero value otherwise.
func (o *ProtoInstanceTypeSpec) GetHbmMode() string {
	if o == nil || isNil(o.HbmMode) {
		var ret string
		return ret
	}
	return *o.HbmMode
}

// GetHbmModeOk returns a tuple with the HbmMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceTypeSpec) GetHbmModeOk() (*string, bool) {
	if o == nil || isNil(o.HbmMode) {
		return nil, false
	}
	return o.HbmMode, true
}

// HasHbmMode returns a boolean if a field has been set.
func (o *ProtoInstanceTypeSpec) HasHbmMode() bool {
	if o != nil && !isNil(o.HbmMode) {
		return true
	}

	return false
}

// SetHbmMode gets a reference to the given string and assigns it to the HbmMode field.
func (o *ProtoInstanceTypeSpec) SetHbmMode(v string) {
	o.HbmMode = &v
}

func (o ProtoInstanceTypeSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.InstanceCategory) {
		toSerialize["instanceCategory"] = o.InstanceCategory
	}
	if !isNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !isNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !isNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !isNil(o.Gpu) {
		toSerialize["gpu"] = o.Gpu
	}
	if !isNil(o.HbmMode) {
		toSerialize["hbmMode"] = o.HbmMode
	}
	return json.Marshal(toSerialize)
}

type NullableProtoInstanceTypeSpec struct {
	value *ProtoInstanceTypeSpec
	isSet bool
}

func (v NullableProtoInstanceTypeSpec) Get() *ProtoInstanceTypeSpec {
	return v.value
}

func (v *NullableProtoInstanceTypeSpec) Set(val *ProtoInstanceTypeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoInstanceTypeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoInstanceTypeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoInstanceTypeSpec(val *ProtoInstanceTypeSpec) *NullableProtoInstanceTypeSpec {
	return &NullableProtoInstanceTypeSpec{value: val, isSet: true}
}

func (v NullableProtoInstanceTypeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoInstanceTypeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
