/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProtoRunStrategy  - RerunOnFailure: Instance will initially be running. It will be restarted if a failure occurs. If the instance powers itself off, it will not be restarted. Default.  - Halted: Instance should never be running.  - Always: Instance should always be running.
type ProtoRunStrategy string

// List of protoRunStrategy
const (
	RERUN_ON_FAILURE ProtoRunStrategy = "RerunOnFailure"
	HALTED           ProtoRunStrategy = "Halted"
	ALWAYS           ProtoRunStrategy = "Always"
)

// All allowed values of ProtoRunStrategy enum
var AllowedProtoRunStrategyEnumValues = []ProtoRunStrategy{
	"RerunOnFailure",
	"Halted",
	"Always",
}

func (v *ProtoRunStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtoRunStrategy(value)
	for _, existing := range AllowedProtoRunStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtoRunStrategy", value)
}

// NewProtoRunStrategyFromValue returns a pointer to a valid ProtoRunStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtoRunStrategyFromValue(v string) (*ProtoRunStrategy, error) {
	ev := ProtoRunStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtoRunStrategy: valid values are %v", v, AllowedProtoRunStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtoRunStrategy) IsValid() bool {
	for _, existing := range AllowedProtoRunStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to protoRunStrategy value
func (v ProtoRunStrategy) Ptr() *ProtoRunStrategy {
	return &v
}

type NullableProtoRunStrategy struct {
	value *ProtoRunStrategy
	isSet bool
}

func (v NullableProtoRunStrategy) Get() *ProtoRunStrategy {
	return v.value
}

func (v *NullableProtoRunStrategy) Set(val *ProtoRunStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoRunStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoRunStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoRunStrategy(val *ProtoRunStrategy) *NullableProtoRunStrategy {
	return &NullableProtoRunStrategy{value: val, isSet: true}
}

func (v NullableProtoRunStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoRunStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
