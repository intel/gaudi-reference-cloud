/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// LoadBalancerServiceApiService LoadBalancerServiceApi service
type LoadBalancerServiceApiService service

type ApiLoadBalancerServiceCreateRequest struct {
	ctx                    context.Context
	ApiService             *LoadBalancerServiceApiService
	metadataCloudAccountId string
	body                   *LoadBalancerServiceCreateRequest
}

func (r ApiLoadBalancerServiceCreateRequest) Body(body LoadBalancerServiceCreateRequest) ApiLoadBalancerServiceCreateRequest {
	r.body = &body
	return r
}

func (r ApiLoadBalancerServiceCreateRequest) Execute() (*ProtoLoadBalancer, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceCreateExecute(r)
}

/*
LoadBalancerServiceCreate Create a new load balancer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@return ApiLoadBalancerServiceCreateRequest
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceCreate(ctx context.Context, metadataCloudAccountId string) ApiLoadBalancerServiceCreateRequest {
	return ApiLoadBalancerServiceCreateRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
	}
}

// Execute executes the request
//
//	@return ProtoLoadBalancer
func (a *LoadBalancerServiceApiService) LoadBalancerServiceCreateExecute(r ApiLoadBalancerServiceCreateRequest) (*ProtoLoadBalancer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoLoadBalancer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceDeleteRequest struct {
	ctx                     context.Context
	ApiService              *LoadBalancerServiceApiService
	metadataCloudAccountId  string
	metadataResourceId      string
	metadataName            *string
	metadataResourceVersion *string
	metadataReserved1       *string
}

func (r ApiLoadBalancerServiceDeleteRequest) MetadataName(metadataName string) ApiLoadBalancerServiceDeleteRequest {
	r.metadataName = &metadataName
	return r
}

// If provided, the existing record must have this resourceVersion for the request to succeed.
func (r ApiLoadBalancerServiceDeleteRequest) MetadataResourceVersion(metadataResourceVersion string) ApiLoadBalancerServiceDeleteRequest {
	r.metadataResourceVersion = &metadataResourceVersion
	return r
}

// Reserved. Added this field to overcome openAPi-same-struct issue.
func (r ApiLoadBalancerServiceDeleteRequest) MetadataReserved1(metadataReserved1 string) ApiLoadBalancerServiceDeleteRequest {
	r.metadataReserved1 = &metadataReserved1
	return r
}

func (r ApiLoadBalancerServiceDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceDeleteExecute(r)
}

/*
LoadBalancerServiceDelete Request deletion of a load balancer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataResourceId
	@return ApiLoadBalancerServiceDeleteRequest
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceDelete(ctx context.Context, metadataCloudAccountId string, metadataResourceId string) ApiLoadBalancerServiceDeleteRequest {
	return ApiLoadBalancerServiceDeleteRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataResourceId:     metadataResourceId,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *LoadBalancerServiceApiService) LoadBalancerServiceDeleteExecute(r ApiLoadBalancerServiceDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers/id/{metadata.resourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.resourceId"+"}", url.PathEscape(parameterToString(r.metadataResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataName != nil {
		localVarQueryParams.Add("metadata.name", parameterToString(*r.metadataName, ""))
	}
	if r.metadataResourceVersion != nil {
		localVarQueryParams.Add("metadata.resourceVersion", parameterToString(*r.metadataResourceVersion, ""))
	}
	if r.metadataReserved1 != nil {
		localVarQueryParams.Add("metadata.reserved1", parameterToString(*r.metadataReserved1, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceDelete2Request struct {
	ctx                     context.Context
	ApiService              *LoadBalancerServiceApiService
	metadataCloudAccountId  string
	metadataName            string
	metadataResourceId      *string
	metadataResourceVersion *string
	metadataReserved1       *string
}

func (r ApiLoadBalancerServiceDelete2Request) MetadataResourceId(metadataResourceId string) ApiLoadBalancerServiceDelete2Request {
	r.metadataResourceId = &metadataResourceId
	return r
}

// If provided, the existing record must have this resourceVersion for the request to succeed.
func (r ApiLoadBalancerServiceDelete2Request) MetadataResourceVersion(metadataResourceVersion string) ApiLoadBalancerServiceDelete2Request {
	r.metadataResourceVersion = &metadataResourceVersion
	return r
}

// Reserved. Added this field to overcome openAPi-same-struct issue.
func (r ApiLoadBalancerServiceDelete2Request) MetadataReserved1(metadataReserved1 string) ApiLoadBalancerServiceDelete2Request {
	r.metadataReserved1 = &metadataReserved1
	return r
}

func (r ApiLoadBalancerServiceDelete2Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceDelete2Execute(r)
}

/*
LoadBalancerServiceDelete2 Request deletion of a load balancer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataName
	@return ApiLoadBalancerServiceDelete2Request
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceDelete2(ctx context.Context, metadataCloudAccountId string, metadataName string) ApiLoadBalancerServiceDelete2Request {
	return ApiLoadBalancerServiceDelete2Request{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataName:           metadataName,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *LoadBalancerServiceApiService) LoadBalancerServiceDelete2Execute(r ApiLoadBalancerServiceDelete2Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceDelete2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers/name/{metadata.name}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.name"+"}", url.PathEscape(parameterToString(r.metadataName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataResourceId != nil {
		localVarQueryParams.Add("metadata.resourceId", parameterToString(*r.metadataResourceId, ""))
	}
	if r.metadataResourceVersion != nil {
		localVarQueryParams.Add("metadata.resourceVersion", parameterToString(*r.metadataResourceVersion, ""))
	}
	if r.metadataReserved1 != nil {
		localVarQueryParams.Add("metadata.reserved1", parameterToString(*r.metadataReserved1, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceGetRequest struct {
	ctx                     context.Context
	ApiService              *LoadBalancerServiceApiService
	metadataCloudAccountId  string
	metadataResourceId      string
	metadataName            *string
	metadataResourceVersion *string
	metadataReserved1       *string
}

func (r ApiLoadBalancerServiceGetRequest) MetadataName(metadataName string) ApiLoadBalancerServiceGetRequest {
	r.metadataName = &metadataName
	return r
}

// If provided, the existing record must have this resourceVersion for the request to succeed.
func (r ApiLoadBalancerServiceGetRequest) MetadataResourceVersion(metadataResourceVersion string) ApiLoadBalancerServiceGetRequest {
	r.metadataResourceVersion = &metadataResourceVersion
	return r
}

// Reserved. Added this field to overcome openAPi-same-struct issue.
func (r ApiLoadBalancerServiceGetRequest) MetadataReserved1(metadataReserved1 string) ApiLoadBalancerServiceGetRequest {
	r.metadataReserved1 = &metadataReserved1
	return r
}

func (r ApiLoadBalancerServiceGetRequest) Execute() (*ProtoLoadBalancer, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceGetExecute(r)
}

/*
LoadBalancerServiceGet Get the status of a load balancer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataResourceId
	@return ApiLoadBalancerServiceGetRequest
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceGet(ctx context.Context, metadataCloudAccountId string, metadataResourceId string) ApiLoadBalancerServiceGetRequest {
	return ApiLoadBalancerServiceGetRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataResourceId:     metadataResourceId,
	}
}

// Execute executes the request
//
//	@return ProtoLoadBalancer
func (a *LoadBalancerServiceApiService) LoadBalancerServiceGetExecute(r ApiLoadBalancerServiceGetRequest) (*ProtoLoadBalancer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoLoadBalancer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers/id/{metadata.resourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.resourceId"+"}", url.PathEscape(parameterToString(r.metadataResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataName != nil {
		localVarQueryParams.Add("metadata.name", parameterToString(*r.metadataName, ""))
	}
	if r.metadataResourceVersion != nil {
		localVarQueryParams.Add("metadata.resourceVersion", parameterToString(*r.metadataResourceVersion, ""))
	}
	if r.metadataReserved1 != nil {
		localVarQueryParams.Add("metadata.reserved1", parameterToString(*r.metadataReserved1, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceGet2Request struct {
	ctx                     context.Context
	ApiService              *LoadBalancerServiceApiService
	metadataCloudAccountId  string
	metadataName            string
	metadataResourceId      *string
	metadataResourceVersion *string
	metadataReserved1       *string
}

func (r ApiLoadBalancerServiceGet2Request) MetadataResourceId(metadataResourceId string) ApiLoadBalancerServiceGet2Request {
	r.metadataResourceId = &metadataResourceId
	return r
}

// If provided, the existing record must have this resourceVersion for the request to succeed.
func (r ApiLoadBalancerServiceGet2Request) MetadataResourceVersion(metadataResourceVersion string) ApiLoadBalancerServiceGet2Request {
	r.metadataResourceVersion = &metadataResourceVersion
	return r
}

// Reserved. Added this field to overcome openAPi-same-struct issue.
func (r ApiLoadBalancerServiceGet2Request) MetadataReserved1(metadataReserved1 string) ApiLoadBalancerServiceGet2Request {
	r.metadataReserved1 = &metadataReserved1
	return r
}

func (r ApiLoadBalancerServiceGet2Request) Execute() (*ProtoLoadBalancer, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceGet2Execute(r)
}

/*
LoadBalancerServiceGet2 Get the status of a load balancer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataName
	@return ApiLoadBalancerServiceGet2Request
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceGet2(ctx context.Context, metadataCloudAccountId string, metadataName string) ApiLoadBalancerServiceGet2Request {
	return ApiLoadBalancerServiceGet2Request{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataName:           metadataName,
	}
}

// Execute executes the request
//
//	@return ProtoLoadBalancer
func (a *LoadBalancerServiceApiService) LoadBalancerServiceGet2Execute(r ApiLoadBalancerServiceGet2Request) (*ProtoLoadBalancer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoLoadBalancer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceGet2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers/name/{metadata.name}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.name"+"}", url.PathEscape(parameterToString(r.metadataName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataResourceId != nil {
		localVarQueryParams.Add("metadata.resourceId", parameterToString(*r.metadataResourceId, ""))
	}
	if r.metadataResourceVersion != nil {
		localVarQueryParams.Add("metadata.resourceVersion", parameterToString(*r.metadataResourceVersion, ""))
	}
	if r.metadataReserved1 != nil {
		localVarQueryParams.Add("metadata.reserved1", parameterToString(*r.metadataReserved1, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServicePingRequest struct {
	ctx        context.Context
	ApiService *LoadBalancerServiceApiService
	body       *map[string]interface{}
}

func (r ApiLoadBalancerServicePingRequest) Body(body map[string]interface{}) ApiLoadBalancerServicePingRequest {
	r.body = &body
	return r
}

func (r ApiLoadBalancerServicePingRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LoadBalancerServicePingExecute(r)
}

/*
LoadBalancerServicePing Ping always returns a successful response by the service implementation. It can be used for testing connectivity to the service.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLoadBalancerServicePingRequest
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServicePing(ctx context.Context) ApiLoadBalancerServicePingRequest {
	return ApiLoadBalancerServicePingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *LoadBalancerServiceApiService) LoadBalancerServicePingExecute(r ApiLoadBalancerServicePingRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServicePing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/proto.LoadBalancerService/Ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceSearchRequest struct {
	ctx                    context.Context
	ApiService             *LoadBalancerServiceApiService
	metadataCloudAccountId string
	metadataReserved1      *string
}

// Reserved. Added this field to overcome openAPi-same-struct issue.
func (r ApiLoadBalancerServiceSearchRequest) MetadataReserved1(metadataReserved1 string) ApiLoadBalancerServiceSearchRequest {
	r.metadataReserved1 = &metadataReserved1
	return r
}

func (r ApiLoadBalancerServiceSearchRequest) Execute() (*ProtoLoadBalancerSearchResponse, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceSearchExecute(r)
}

/*
LoadBalancerServiceSearch List load balancers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@return ApiLoadBalancerServiceSearchRequest
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceSearch(ctx context.Context, metadataCloudAccountId string) ApiLoadBalancerServiceSearchRequest {
	return ApiLoadBalancerServiceSearchRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
	}
}

// Execute executes the request
//
//	@return ProtoLoadBalancerSearchResponse
func (a *LoadBalancerServiceApiService) LoadBalancerServiceSearchExecute(r ApiLoadBalancerServiceSearchRequest) (*ProtoLoadBalancerSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoLoadBalancerSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataReserved1 != nil {
		localVarQueryParams.Add("metadata.reserved1", parameterToString(*r.metadataReserved1, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceSearch2Request struct {
	ctx                    context.Context
	ApiService             *LoadBalancerServiceApiService
	metadataCloudAccountId string
	body                   *LoadBalancerServiceSearch2Request
}

func (r ApiLoadBalancerServiceSearch2Request) Body(body LoadBalancerServiceSearch2Request) ApiLoadBalancerServiceSearch2Request {
	r.body = &body
	return r
}

func (r ApiLoadBalancerServiceSearch2Request) Execute() (*ProtoLoadBalancerSearchResponse, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceSearch2Execute(r)
}

/*
LoadBalancerServiceSearch2 List load balancers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@return ApiLoadBalancerServiceSearch2Request
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceSearch2(ctx context.Context, metadataCloudAccountId string) ApiLoadBalancerServiceSearch2Request {
	return ApiLoadBalancerServiceSearch2Request{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
	}
}

// Execute executes the request
//
//	@return ProtoLoadBalancerSearchResponse
func (a *LoadBalancerServiceApiService) LoadBalancerServiceSearch2Execute(r ApiLoadBalancerServiceSearch2Request) (*ProtoLoadBalancerSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoLoadBalancerSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceSearch2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers/search"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceUpdateRequest struct {
	ctx                    context.Context
	ApiService             *LoadBalancerServiceApiService
	metadataCloudAccountId string
	metadataResourceId     string
	body                   *LoadBalancerServiceUpdateRequest
}

func (r ApiLoadBalancerServiceUpdateRequest) Body(body LoadBalancerServiceUpdateRequest) ApiLoadBalancerServiceUpdateRequest {
	r.body = &body
	return r
}

func (r ApiLoadBalancerServiceUpdateRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceUpdateExecute(r)
}

/*
LoadBalancerServiceUpdate Update the specification of an load balancer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataResourceId
	@return ApiLoadBalancerServiceUpdateRequest
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceUpdate(ctx context.Context, metadataCloudAccountId string, metadataResourceId string) ApiLoadBalancerServiceUpdateRequest {
	return ApiLoadBalancerServiceUpdateRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataResourceId:     metadataResourceId,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *LoadBalancerServiceApiService) LoadBalancerServiceUpdateExecute(r ApiLoadBalancerServiceUpdateRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers/id/{metadata.resourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.resourceId"+"}", url.PathEscape(parameterToString(r.metadataResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLoadBalancerServiceUpdate2Request struct {
	ctx                    context.Context
	ApiService             *LoadBalancerServiceApiService
	metadataCloudAccountId string
	metadataName           string
	body                   *LoadBalancerServiceUpdate2Request
}

func (r ApiLoadBalancerServiceUpdate2Request) Body(body LoadBalancerServiceUpdate2Request) ApiLoadBalancerServiceUpdate2Request {
	r.body = &body
	return r
}

func (r ApiLoadBalancerServiceUpdate2Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LoadBalancerServiceUpdate2Execute(r)
}

/*
LoadBalancerServiceUpdate2 Update the specification of an load balancer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataName
	@return ApiLoadBalancerServiceUpdate2Request
*/
func (a *LoadBalancerServiceApiService) LoadBalancerServiceUpdate2(ctx context.Context, metadataCloudAccountId string, metadataName string) ApiLoadBalancerServiceUpdate2Request {
	return ApiLoadBalancerServiceUpdate2Request{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataName:           metadataName,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *LoadBalancerServiceApiService) LoadBalancerServiceUpdate2Execute(r ApiLoadBalancerServiceUpdate2Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerServiceApiService.LoadBalancerServiceUpdate2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/loadbalancers/name/{metadata.name}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.name"+"}", url.PathEscape(parameterToString(r.metadataName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
