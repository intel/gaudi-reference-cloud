/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// VNetServiceApiService VNetServiceApi service
type VNetServiceApiService service

type ApiVNetServiceDeleteRequest struct {
	ctx                    context.Context
	ApiService             *VNetServiceApiService
	metadataCloudAccountId string
	metadataResourceId     string
	metadataName           *string
}

func (r ApiVNetServiceDeleteRequest) MetadataName(metadataName string) ApiVNetServiceDeleteRequest {
	r.metadataName = &metadataName
	return r
}

func (r ApiVNetServiceDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.VNetServiceDeleteExecute(r)
}

/*
VNetServiceDelete Delete an VNet from the DB. Returns FailedPrecondition if VNet has running instances or other consumed IP addresses.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataResourceId
	@return ApiVNetServiceDeleteRequest
*/
func (a *VNetServiceApiService) VNetServiceDelete(ctx context.Context, metadataCloudAccountId string, metadataResourceId string) ApiVNetServiceDeleteRequest {
	return ApiVNetServiceDeleteRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataResourceId:     metadataResourceId,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *VNetServiceApiService) VNetServiceDeleteExecute(r ApiVNetServiceDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServiceDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/vnets/id/{metadata.resourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.resourceId"+"}", url.PathEscape(parameterToString(r.metadataResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataName != nil {
		localVarQueryParams.Add("metadata.name", parameterToString(*r.metadataName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVNetServiceDelete2Request struct {
	ctx                    context.Context
	ApiService             *VNetServiceApiService
	metadataCloudAccountId string
	metadataName           string
	metadataResourceId     *string
}

func (r ApiVNetServiceDelete2Request) MetadataResourceId(metadataResourceId string) ApiVNetServiceDelete2Request {
	r.metadataResourceId = &metadataResourceId
	return r
}

func (r ApiVNetServiceDelete2Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.VNetServiceDelete2Execute(r)
}

/*
VNetServiceDelete2 Delete an VNet from the DB. Returns FailedPrecondition if VNet has running instances or other consumed IP addresses.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataName
	@return ApiVNetServiceDelete2Request
*/
func (a *VNetServiceApiService) VNetServiceDelete2(ctx context.Context, metadataCloudAccountId string, metadataName string) ApiVNetServiceDelete2Request {
	return ApiVNetServiceDelete2Request{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataName:           metadataName,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *VNetServiceApiService) VNetServiceDelete2Execute(r ApiVNetServiceDelete2Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServiceDelete2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/vnets/name/{metadata.name}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.name"+"}", url.PathEscape(parameterToString(r.metadataName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataResourceId != nil {
		localVarQueryParams.Add("metadata.resourceId", parameterToString(*r.metadataResourceId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVNetServiceGetRequest struct {
	ctx                    context.Context
	ApiService             *VNetServiceApiService
	metadataCloudAccountId string
	metadataResourceId     string
	metadataName           *string
}

func (r ApiVNetServiceGetRequest) MetadataName(metadataName string) ApiVNetServiceGetRequest {
	r.metadataName = &metadataName
	return r
}

func (r ApiVNetServiceGetRequest) Execute() (*ProtoVNet, *http.Response, error) {
	return r.ApiService.VNetServiceGetExecute(r)
}

/*
VNetServiceGet Retrieve a VNet record from DB

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataResourceId
	@return ApiVNetServiceGetRequest
*/
func (a *VNetServiceApiService) VNetServiceGet(ctx context.Context, metadataCloudAccountId string, metadataResourceId string) ApiVNetServiceGetRequest {
	return ApiVNetServiceGetRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataResourceId:     metadataResourceId,
	}
}

// Execute executes the request
//
//	@return ProtoVNet
func (a *VNetServiceApiService) VNetServiceGetExecute(r ApiVNetServiceGetRequest) (*ProtoVNet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoVNet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServiceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/vnets/id/{metadata.resourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.resourceId"+"}", url.PathEscape(parameterToString(r.metadataResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataName != nil {
		localVarQueryParams.Add("metadata.name", parameterToString(*r.metadataName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVNetServiceGet2Request struct {
	ctx                    context.Context
	ApiService             *VNetServiceApiService
	metadataCloudAccountId string
	metadataName           string
	metadataResourceId     *string
}

func (r ApiVNetServiceGet2Request) MetadataResourceId(metadataResourceId string) ApiVNetServiceGet2Request {
	r.metadataResourceId = &metadataResourceId
	return r
}

func (r ApiVNetServiceGet2Request) Execute() (*ProtoVNet, *http.Response, error) {
	return r.ApiService.VNetServiceGet2Execute(r)
}

/*
VNetServiceGet2 Retrieve a VNet record from DB

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@param metadataName
	@return ApiVNetServiceGet2Request
*/
func (a *VNetServiceApiService) VNetServiceGet2(ctx context.Context, metadataCloudAccountId string, metadataName string) ApiVNetServiceGet2Request {
	return ApiVNetServiceGet2Request{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
		metadataName:           metadataName,
	}
}

// Execute executes the request
//
//	@return ProtoVNet
func (a *VNetServiceApiService) VNetServiceGet2Execute(r ApiVNetServiceGet2Request) (*ProtoVNet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoVNet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServiceGet2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/vnets/name/{metadata.name}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.name"+"}", url.PathEscape(parameterToString(r.metadataName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadataResourceId != nil {
		localVarQueryParams.Add("metadata.resourceId", parameterToString(*r.metadataResourceId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVNetServicePingRequest struct {
	ctx        context.Context
	ApiService *VNetServiceApiService
	body       *map[string]interface{}
}

func (r ApiVNetServicePingRequest) Body(body map[string]interface{}) ApiVNetServicePingRequest {
	r.body = &body
	return r
}

func (r ApiVNetServicePingRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.VNetServicePingExecute(r)
}

/*
VNetServicePing Ping always returns a successful response by the service implementation. It can be used for testing connectivity to the service.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiVNetServicePingRequest
*/
func (a *VNetServiceApiService) VNetServicePing(ctx context.Context) ApiVNetServicePingRequest {
	return ApiVNetServicePingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *VNetServiceApiService) VNetServicePingExecute(r ApiVNetServicePingRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServicePing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/proto.VNetService/Ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVNetServicePutRequest struct {
	ctx                    context.Context
	ApiService             *VNetServiceApiService
	metadataCloudAccountId string
	body                   *VNetServicePutRequest
}

func (r ApiVNetServicePutRequest) Body(body VNetServicePutRequest) ApiVNetServicePutRequest {
	r.body = &body
	return r
}

func (r ApiVNetServicePutRequest) Execute() (*ProtoVNet, *http.Response, error) {
	return r.ApiService.VNetServicePutExecute(r)
}

/*
VNetServicePut Create or update a VNet.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@return ApiVNetServicePutRequest
*/
func (a *VNetServiceApiService) VNetServicePut(ctx context.Context, metadataCloudAccountId string) ApiVNetServicePutRequest {
	return ApiVNetServicePutRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
	}
}

// Execute executes the request
//
//	@return ProtoVNet
func (a *VNetServiceApiService) VNetServicePutExecute(r ApiVNetServicePutRequest) (*ProtoVNet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoVNet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServicePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/vnets"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVNetServiceSearchRequest struct {
	ctx                    context.Context
	ApiService             *VNetServiceApiService
	metadataCloudAccountId string
}

func (r ApiVNetServiceSearchRequest) Execute() (*ProtoVNetSearchResponse, *http.Response, error) {
	return r.ApiService.VNetServiceSearchExecute(r)
}

/*
VNetServiceSearch Get a list of stored VNets.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metadataCloudAccountId
	@return ApiVNetServiceSearchRequest
*/
func (a *VNetServiceApiService) VNetServiceSearch(ctx context.Context, metadataCloudAccountId string) ApiVNetServiceSearchRequest {
	return ApiVNetServiceSearchRequest{
		ApiService:             a,
		ctx:                    ctx,
		metadataCloudAccountId: metadataCloudAccountId,
	}
}

// Execute executes the request
//
//	@return ProtoVNetSearchResponse
func (a *VNetServiceApiService) VNetServiceSearchExecute(r ApiVNetServiceSearchRequest) (*ProtoVNetSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProtoVNetSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServiceSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudaccounts/{metadata.cloudAccountId}/vnets"
	localVarPath = strings.Replace(localVarPath, "{"+"metadata.cloudAccountId"+"}", url.PathEscape(parameterToString(r.metadataCloudAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVNetServiceSearchStreamRequest struct {
	ctx        context.Context
	ApiService *VNetServiceApiService
	body       *ProtoVNetSearchRequest
}

func (r ApiVNetServiceSearchStreamRequest) Body(body ProtoVNetSearchRequest) ApiVNetServiceSearchStreamRequest {
	r.body = &body
	return r
}

func (r ApiVNetServiceSearchStreamRequest) Execute() (*StreamResultOfProtoVNet, *http.Response, error) {
	return r.ApiService.VNetServiceSearchStreamExecute(r)
}

/*
VNetServiceSearchStream List stored VNets as a stream.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiVNetServiceSearchStreamRequest
*/
func (a *VNetServiceApiService) VNetServiceSearchStream(ctx context.Context) ApiVNetServiceSearchStreamRequest {
	return ApiVNetServiceSearchStreamRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StreamResultOfProtoVNet
func (a *VNetServiceApiService) VNetServiceSearchStreamExecute(r ApiVNetServiceSearchStreamRequest) (*StreamResultOfProtoVNet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StreamResultOfProtoVNet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VNetServiceApiService.VNetServiceSearchStream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/proto.VNetService/SearchStream"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	closeErr := localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if closeErr != nil {
		return localVarReturnValue, localVarHTTPResponse, closeErr
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v RpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
