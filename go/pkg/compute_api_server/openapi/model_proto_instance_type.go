/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProtoInstanceType struct for ProtoInstanceType
type ProtoInstanceType struct {
	Metadata *ProtoInstanceTypeMetadata `json:"metadata,omitempty"`
	Spec     *ProtoInstanceTypeSpec     `json:"spec,omitempty"`
}

// NewProtoInstanceType instantiates a new ProtoInstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoInstanceType() *ProtoInstanceType {
	this := ProtoInstanceType{}
	return &this
}

// NewProtoInstanceTypeWithDefaults instantiates a new ProtoInstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoInstanceTypeWithDefaults() *ProtoInstanceType {
	this := ProtoInstanceType{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ProtoInstanceType) GetMetadata() ProtoInstanceTypeMetadata {
	if o == nil || isNil(o.Metadata) {
		var ret ProtoInstanceTypeMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceType) GetMetadataOk() (*ProtoInstanceTypeMetadata, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ProtoInstanceType) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ProtoInstanceTypeMetadata and assigns it to the Metadata field.
func (o *ProtoInstanceType) SetMetadata(v ProtoInstanceTypeMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *ProtoInstanceType) GetSpec() ProtoInstanceTypeSpec {
	if o == nil || isNil(o.Spec) {
		var ret ProtoInstanceTypeSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceType) GetSpecOk() (*ProtoInstanceTypeSpec, bool) {
	if o == nil || isNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *ProtoInstanceType) HasSpec() bool {
	if o != nil && !isNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given ProtoInstanceTypeSpec and assigns it to the Spec field.
func (o *ProtoInstanceType) SetSpec(v ProtoInstanceTypeSpec) {
	o.Spec = &v
}

func (o ProtoInstanceType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableProtoInstanceType struct {
	value *ProtoInstanceType
	isSet bool
}

func (v NullableProtoInstanceType) Get() *ProtoInstanceType {
	return v.value
}

func (v *NullableProtoInstanceType) Set(val *ProtoInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoInstanceType(val *ProtoInstanceType) *NullableProtoInstanceType {
	return &NullableProtoInstanceType{value: val, isSet: true}
}

func (v NullableProtoInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
