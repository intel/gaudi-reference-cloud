/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProtoSearchFilterCriteria the model 'ProtoSearchFilterCriteria'
type ProtoSearchFilterCriteria string

// List of protoSearchFilterCriteria
const (
	DEFAULT     ProtoSearchFilterCriteria = "Default"
	ANY         ProtoSearchFilterCriteria = "Any"
	EMPTY       ProtoSearchFilterCriteria = "Empty"
	NON_EMPTY   ProtoSearchFilterCriteria = "NonEmpty"
	EXACT_VALUE ProtoSearchFilterCriteria = "ExactValue"
)

// All allowed values of ProtoSearchFilterCriteria enum
var AllowedProtoSearchFilterCriteriaEnumValues = []ProtoSearchFilterCriteria{
	"Default",
	"Any",
	"Empty",
	"NonEmpty",
	"ExactValue",
}

func (v *ProtoSearchFilterCriteria) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtoSearchFilterCriteria(value)
	for _, existing := range AllowedProtoSearchFilterCriteriaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtoSearchFilterCriteria", value)
}

// NewProtoSearchFilterCriteriaFromValue returns a pointer to a valid ProtoSearchFilterCriteria
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtoSearchFilterCriteriaFromValue(v string) (*ProtoSearchFilterCriteria, error) {
	ev := ProtoSearchFilterCriteria(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtoSearchFilterCriteria: valid values are %v", v, AllowedProtoSearchFilterCriteriaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtoSearchFilterCriteria) IsValid() bool {
	for _, existing := range AllowedProtoSearchFilterCriteriaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to protoSearchFilterCriteria value
func (v ProtoSearchFilterCriteria) Ptr() *ProtoSearchFilterCriteria {
	return &v
}

type NullableProtoSearchFilterCriteria struct {
	value *ProtoSearchFilterCriteria
	isSet bool
}

func (v NullableProtoSearchFilterCriteria) Get() *ProtoSearchFilterCriteria {
	return v.value
}

func (v *NullableProtoSearchFilterCriteria) Set(val *ProtoSearchFilterCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoSearchFilterCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoSearchFilterCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoSearchFilterCriteria(val *ProtoSearchFilterCriteria) *NullableProtoSearchFilterCriteria {
	return &NullableProtoSearchFilterCriteria{value: val, isSet: true}
}

func (v NullableProtoSearchFilterCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoSearchFilterCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
