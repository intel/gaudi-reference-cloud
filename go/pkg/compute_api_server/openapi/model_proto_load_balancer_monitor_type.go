/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProtoLoadBalancerMonitorType  - tcp: Healthcheck monitoring type utilizing TCP checks. Default.  - http: HTTP monitoring type expecting a \"200 OK\" HTTP Response.  - https: HTTPS monitoring type expecting a \"200 OK\" HTTP Response.
type ProtoLoadBalancerMonitorType string

// List of protoLoadBalancerMonitorType
const (
	TCP   ProtoLoadBalancerMonitorType = "tcp"
	HTTP  ProtoLoadBalancerMonitorType = "http"
	HTTPS ProtoLoadBalancerMonitorType = "https"
)

// All allowed values of ProtoLoadBalancerMonitorType enum
var AllowedProtoLoadBalancerMonitorTypeEnumValues = []ProtoLoadBalancerMonitorType{
	"tcp",
	"http",
	"https",
}

func (v *ProtoLoadBalancerMonitorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtoLoadBalancerMonitorType(value)
	for _, existing := range AllowedProtoLoadBalancerMonitorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtoLoadBalancerMonitorType", value)
}

// NewProtoLoadBalancerMonitorTypeFromValue returns a pointer to a valid ProtoLoadBalancerMonitorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtoLoadBalancerMonitorTypeFromValue(v string) (*ProtoLoadBalancerMonitorType, error) {
	ev := ProtoLoadBalancerMonitorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtoLoadBalancerMonitorType: valid values are %v", v, AllowedProtoLoadBalancerMonitorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtoLoadBalancerMonitorType) IsValid() bool {
	for _, existing := range AllowedProtoLoadBalancerMonitorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to protoLoadBalancerMonitorType value
func (v ProtoLoadBalancerMonitorType) Ptr() *ProtoLoadBalancerMonitorType {
	return &v
}

type NullableProtoLoadBalancerMonitorType struct {
	value *ProtoLoadBalancerMonitorType
	isSet bool
}

func (v NullableProtoLoadBalancerMonitorType) Get() *ProtoLoadBalancerMonitorType {
	return v.value
}

func (v *NullableProtoLoadBalancerMonitorType) Set(val *ProtoLoadBalancerMonitorType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoLoadBalancerMonitorType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoLoadBalancerMonitorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoLoadBalancerMonitorType(val *ProtoLoadBalancerMonitorType) *NullableProtoLoadBalancerMonitorType {
	return &NullableProtoLoadBalancerMonitorType{value: val, isSet: true}
}

func (v NullableProtoLoadBalancerMonitorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoLoadBalancerMonitorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
