/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProtoLoadBalancerPool struct for ProtoLoadBalancerPool
type ProtoLoadBalancerPool struct {
	// The port to route traffic to each instance.
	Port              *int32                        `json:"port,omitempty"`
	Monitor           *ProtoLoadBalancerMonitorType `json:"monitor,omitempty"`
	LoadBalancingMode *ProtoLoadBalancingMode       `json:"loadBalancingMode,omitempty"`
	// (Optional) Map of string keys and values that controls how the lb pool members are selected.  One of instances or instanceSelectors is valid.
	InstanceSelectors *map[string]string `json:"instanceSelectors,omitempty"`
	// (Optional) Set of Instances to make up the members of the pool. One of instances or instanceSelectors is valid.
	InstanceResourceIds []string `json:"instanceResourceIds,omitempty"`
}

// NewProtoLoadBalancerPool instantiates a new ProtoLoadBalancerPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoLoadBalancerPool() *ProtoLoadBalancerPool {
	this := ProtoLoadBalancerPool{}
	var monitor ProtoLoadBalancerMonitorType = TCP
	this.Monitor = &monitor
	var loadBalancingMode ProtoLoadBalancingMode = ROUND_ROBIN
	this.LoadBalancingMode = &loadBalancingMode
	return &this
}

// NewProtoLoadBalancerPoolWithDefaults instantiates a new ProtoLoadBalancerPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoLoadBalancerPoolWithDefaults() *ProtoLoadBalancerPool {
	this := ProtoLoadBalancerPool{}
	var monitor ProtoLoadBalancerMonitorType = TCP
	this.Monitor = &monitor
	var loadBalancingMode ProtoLoadBalancingMode = ROUND_ROBIN
	this.LoadBalancingMode = &loadBalancingMode
	return &this
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ProtoLoadBalancerPool) GetPort() int32 {
	if o == nil || isNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoLoadBalancerPool) GetPortOk() (*int32, bool) {
	if o == nil || isNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ProtoLoadBalancerPool) HasPort() bool {
	if o != nil && !isNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ProtoLoadBalancerPool) SetPort(v int32) {
	o.Port = &v
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *ProtoLoadBalancerPool) GetMonitor() ProtoLoadBalancerMonitorType {
	if o == nil || isNil(o.Monitor) {
		var ret ProtoLoadBalancerMonitorType
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoLoadBalancerPool) GetMonitorOk() (*ProtoLoadBalancerMonitorType, bool) {
	if o == nil || isNil(o.Monitor) {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *ProtoLoadBalancerPool) HasMonitor() bool {
	if o != nil && !isNil(o.Monitor) {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given ProtoLoadBalancerMonitorType and assigns it to the Monitor field.
func (o *ProtoLoadBalancerPool) SetMonitor(v ProtoLoadBalancerMonitorType) {
	o.Monitor = &v
}

// GetLoadBalancingMode returns the LoadBalancingMode field value if set, zero value otherwise.
func (o *ProtoLoadBalancerPool) GetLoadBalancingMode() ProtoLoadBalancingMode {
	if o == nil || isNil(o.LoadBalancingMode) {
		var ret ProtoLoadBalancingMode
		return ret
	}
	return *o.LoadBalancingMode
}

// GetLoadBalancingModeOk returns a tuple with the LoadBalancingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoLoadBalancerPool) GetLoadBalancingModeOk() (*ProtoLoadBalancingMode, bool) {
	if o == nil || isNil(o.LoadBalancingMode) {
		return nil, false
	}
	return o.LoadBalancingMode, true
}

// HasLoadBalancingMode returns a boolean if a field has been set.
func (o *ProtoLoadBalancerPool) HasLoadBalancingMode() bool {
	if o != nil && !isNil(o.LoadBalancingMode) {
		return true
	}

	return false
}

// SetLoadBalancingMode gets a reference to the given ProtoLoadBalancingMode and assigns it to the LoadBalancingMode field.
func (o *ProtoLoadBalancerPool) SetLoadBalancingMode(v ProtoLoadBalancingMode) {
	o.LoadBalancingMode = &v
}

// GetInstanceSelectors returns the InstanceSelectors field value if set, zero value otherwise.
func (o *ProtoLoadBalancerPool) GetInstanceSelectors() map[string]string {
	if o == nil || isNil(o.InstanceSelectors) {
		var ret map[string]string
		return ret
	}
	return *o.InstanceSelectors
}

// GetInstanceSelectorsOk returns a tuple with the InstanceSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoLoadBalancerPool) GetInstanceSelectorsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.InstanceSelectors) {
		return nil, false
	}
	return o.InstanceSelectors, true
}

// HasInstanceSelectors returns a boolean if a field has been set.
func (o *ProtoLoadBalancerPool) HasInstanceSelectors() bool {
	if o != nil && !isNil(o.InstanceSelectors) {
		return true
	}

	return false
}

// SetInstanceSelectors gets a reference to the given map[string]string and assigns it to the InstanceSelectors field.
func (o *ProtoLoadBalancerPool) SetInstanceSelectors(v map[string]string) {
	o.InstanceSelectors = &v
}

// GetInstanceResourceIds returns the InstanceResourceIds field value if set, zero value otherwise.
func (o *ProtoLoadBalancerPool) GetInstanceResourceIds() []string {
	if o == nil || isNil(o.InstanceResourceIds) {
		var ret []string
		return ret
	}
	return o.InstanceResourceIds
}

// GetInstanceResourceIdsOk returns a tuple with the InstanceResourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoLoadBalancerPool) GetInstanceResourceIdsOk() ([]string, bool) {
	if o == nil || isNil(o.InstanceResourceIds) {
		return nil, false
	}
	return o.InstanceResourceIds, true
}

// HasInstanceResourceIds returns a boolean if a field has been set.
func (o *ProtoLoadBalancerPool) HasInstanceResourceIds() bool {
	if o != nil && !isNil(o.InstanceResourceIds) {
		return true
	}

	return false
}

// SetInstanceResourceIds gets a reference to the given []string and assigns it to the InstanceResourceIds field.
func (o *ProtoLoadBalancerPool) SetInstanceResourceIds(v []string) {
	o.InstanceResourceIds = v
}

func (o ProtoLoadBalancerPool) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !isNil(o.Monitor) {
		toSerialize["monitor"] = o.Monitor
	}
	if !isNil(o.LoadBalancingMode) {
		toSerialize["loadBalancingMode"] = o.LoadBalancingMode
	}
	if !isNil(o.InstanceSelectors) {
		toSerialize["instanceSelectors"] = o.InstanceSelectors
	}
	if !isNil(o.InstanceResourceIds) {
		toSerialize["instanceResourceIds"] = o.InstanceResourceIds
	}
	return json.Marshal(toSerialize)
}

type NullableProtoLoadBalancerPool struct {
	value *ProtoLoadBalancerPool
	isSet bool
}

func (v NullableProtoLoadBalancerPool) Get() *ProtoLoadBalancerPool {
	return v.value
}

func (v *NullableProtoLoadBalancerPool) Set(val *ProtoLoadBalancerPool) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoLoadBalancerPool) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoLoadBalancerPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoLoadBalancerPool(val *ProtoLoadBalancerPool) *NullableProtoLoadBalancerPool {
	return &NullableProtoLoadBalancerPool{value: val, isSet: true}
}

func (v NullableProtoLoadBalancerPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoLoadBalancerPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
