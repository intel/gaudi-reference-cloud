/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProtoInstanceGroupSpec struct for ProtoInstanceGroupSpec
type ProtoInstanceGroupSpec struct {
	InstanceSpec  *ProtoInstanceSpec `json:"instanceSpec,omitempty"`
	InstanceCount *int32             `json:"instanceCount,omitempty"`
}

// NewProtoInstanceGroupSpec instantiates a new ProtoInstanceGroupSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoInstanceGroupSpec() *ProtoInstanceGroupSpec {
	this := ProtoInstanceGroupSpec{}
	return &this
}

// NewProtoInstanceGroupSpecWithDefaults instantiates a new ProtoInstanceGroupSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoInstanceGroupSpecWithDefaults() *ProtoInstanceGroupSpec {
	this := ProtoInstanceGroupSpec{}
	return &this
}

// GetInstanceSpec returns the InstanceSpec field value if set, zero value otherwise.
func (o *ProtoInstanceGroupSpec) GetInstanceSpec() ProtoInstanceSpec {
	if o == nil || isNil(o.InstanceSpec) {
		var ret ProtoInstanceSpec
		return ret
	}
	return *o.InstanceSpec
}

// GetInstanceSpecOk returns a tuple with the InstanceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceGroupSpec) GetInstanceSpecOk() (*ProtoInstanceSpec, bool) {
	if o == nil || isNil(o.InstanceSpec) {
		return nil, false
	}
	return o.InstanceSpec, true
}

// HasInstanceSpec returns a boolean if a field has been set.
func (o *ProtoInstanceGroupSpec) HasInstanceSpec() bool {
	if o != nil && !isNil(o.InstanceSpec) {
		return true
	}

	return false
}

// SetInstanceSpec gets a reference to the given ProtoInstanceSpec and assigns it to the InstanceSpec field.
func (o *ProtoInstanceGroupSpec) SetInstanceSpec(v ProtoInstanceSpec) {
	o.InstanceSpec = &v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *ProtoInstanceGroupSpec) GetInstanceCount() int32 {
	if o == nil || isNil(o.InstanceCount) {
		var ret int32
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoInstanceGroupSpec) GetInstanceCountOk() (*int32, bool) {
	if o == nil || isNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *ProtoInstanceGroupSpec) HasInstanceCount() bool {
	if o != nil && !isNil(o.InstanceCount) {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given int32 and assigns it to the InstanceCount field.
func (o *ProtoInstanceGroupSpec) SetInstanceCount(v int32) {
	o.InstanceCount = &v
}

func (o ProtoInstanceGroupSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InstanceSpec) {
		toSerialize["instanceSpec"] = o.InstanceSpec
	}
	if !isNil(o.InstanceCount) {
		toSerialize["instanceCount"] = o.InstanceCount
	}
	return json.Marshal(toSerialize)
}

type NullableProtoInstanceGroupSpec struct {
	value *ProtoInstanceGroupSpec
	isSet bool
}

func (v NullableProtoInstanceGroupSpec) Get() *ProtoInstanceGroupSpec {
	return v.value
}

func (v *NullableProtoInstanceGroupSpec) Set(val *ProtoInstanceGroupSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoInstanceGroupSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoInstanceGroupSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoInstanceGroupSpec(val *ProtoInstanceGroupSpec) *NullableProtoInstanceGroupSpec {
	return &NullableProtoInstanceGroupSpec{value: val, isSet: true}
}

func (v NullableProtoInstanceGroupSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoInstanceGroupSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
