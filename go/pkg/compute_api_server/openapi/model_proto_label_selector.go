/*
compute.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProtoLabelSelector struct for ProtoLabelSelector
type ProtoLabelSelector struct {
	MatchLabels *map[string]string `json:"matchLabels,omitempty"`
}

// NewProtoLabelSelector instantiates a new ProtoLabelSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoLabelSelector() *ProtoLabelSelector {
	this := ProtoLabelSelector{}
	return &this
}

// NewProtoLabelSelectorWithDefaults instantiates a new ProtoLabelSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoLabelSelectorWithDefaults() *ProtoLabelSelector {
	this := ProtoLabelSelector{}
	return &this
}

// GetMatchLabels returns the MatchLabels field value if set, zero value otherwise.
func (o *ProtoLabelSelector) GetMatchLabels() map[string]string {
	if o == nil || isNil(o.MatchLabels) {
		var ret map[string]string
		return ret
	}
	return *o.MatchLabels
}

// GetMatchLabelsOk returns a tuple with the MatchLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoLabelSelector) GetMatchLabelsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.MatchLabels) {
		return nil, false
	}
	return o.MatchLabels, true
}

// HasMatchLabels returns a boolean if a field has been set.
func (o *ProtoLabelSelector) HasMatchLabels() bool {
	if o != nil && !isNil(o.MatchLabels) {
		return true
	}

	return false
}

// SetMatchLabels gets a reference to the given map[string]string and assigns it to the MatchLabels field.
func (o *ProtoLabelSelector) SetMatchLabels(v map[string]string) {
	o.MatchLabels = &v
}

func (o ProtoLabelSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MatchLabels) {
		toSerialize["matchLabels"] = o.MatchLabels
	}
	return json.Marshal(toSerialize)
}

type NullableProtoLabelSelector struct {
	value *ProtoLabelSelector
	isSet bool
}

func (v NullableProtoLabelSelector) Get() *ProtoLabelSelector {
	return v.value
}

func (v *NullableProtoLabelSelector) Set(val *ProtoLabelSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoLabelSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoLabelSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoLabelSelector(val *ProtoLabelSelector) *NullableProtoLabelSelector {
	return &NullableProtoLabelSelector{value: val, isSet: true}
}

func (v NullableProtoLabelSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoLabelSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
