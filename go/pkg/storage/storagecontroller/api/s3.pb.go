// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.4
// source: go/pkg/storage/storagecontroller/api/s3.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BucketAccessPolicy int32

const (
	BucketAccessPolicy_BUCKET_ACCESS_POLICY_UNSPECIFIED BucketAccessPolicy = 0
	BucketAccessPolicy_BUCKET_ACCESS_POLICY_NONE        BucketAccessPolicy = 1
	BucketAccessPolicy_BUCKET_ACCESS_POLICY_READ        BucketAccessPolicy = 2
	BucketAccessPolicy_BUCKET_ACCESS_POLICY_READ_WRITE  BucketAccessPolicy = 3
)

// Enum value maps for BucketAccessPolicy.
var (
	BucketAccessPolicy_name = map[int32]string{
		0: "BUCKET_ACCESS_POLICY_UNSPECIFIED",
		1: "BUCKET_ACCESS_POLICY_NONE",
		2: "BUCKET_ACCESS_POLICY_READ",
		3: "BUCKET_ACCESS_POLICY_READ_WRITE",
	}
	BucketAccessPolicy_value = map[string]int32{
		"BUCKET_ACCESS_POLICY_UNSPECIFIED": 0,
		"BUCKET_ACCESS_POLICY_NONE":        1,
		"BUCKET_ACCESS_POLICY_READ":        2,
		"BUCKET_ACCESS_POLICY_READ_WRITE":  3,
	}
)

func (x BucketAccessPolicy) Enum() *BucketAccessPolicy {
	p := new(BucketAccessPolicy)
	*p = x
	return p
}

func (x BucketAccessPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketAccessPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_enumTypes[0].Descriptor()
}

func (BucketAccessPolicy) Type() protoreflect.EnumType {
	return &file_go_pkg_storage_storagecontroller_api_s3_proto_enumTypes[0]
}

func (x BucketAccessPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketAccessPolicy.Descriptor instead.
func (BucketAccessPolicy) EnumDescriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{0}
}

type S3Principal_Policy_BucketActions int32

const (
	S3Principal_Policy_BUCKET_ACTIONS_UNSPECIFIED                   S3Principal_Policy_BucketActions = 0
	S3Principal_Policy_BUCKET_ACTIONS_GET_BUCKET_LOCATION           S3Principal_Policy_BucketActions = 1
	S3Principal_Policy_BUCKET_ACTIONS_GET_BUCKET_POLICY             S3Principal_Policy_BucketActions = 2
	S3Principal_Policy_BUCKET_ACTIONS_LIST_BUCKET                   S3Principal_Policy_BucketActions = 3
	S3Principal_Policy_BUCKET_ACTIONS_LIST_BUCKET_MULTIPART_UPLOADS S3Principal_Policy_BucketActions = 4
	S3Principal_Policy_BUCKET_ACTIONS_LIST_MULTIPART_UPLOAD_PARTS   S3Principal_Policy_BucketActions = 5
	S3Principal_Policy_BUCKET_ACTIONS_GET_BUCKET_TAGGING            S3Principal_Policy_BucketActions = 6
	S3Principal_Policy_BUCKET_ACTIONS_LIST_BUCKET_VERSIONS          S3Principal_Policy_BucketActions = 7
)

// Enum value maps for S3Principal_Policy_BucketActions.
var (
	S3Principal_Policy_BucketActions_name = map[int32]string{
		0: "BUCKET_ACTIONS_UNSPECIFIED",
		1: "BUCKET_ACTIONS_GET_BUCKET_LOCATION",
		2: "BUCKET_ACTIONS_GET_BUCKET_POLICY",
		3: "BUCKET_ACTIONS_LIST_BUCKET",
		4: "BUCKET_ACTIONS_LIST_BUCKET_MULTIPART_UPLOADS",
		5: "BUCKET_ACTIONS_LIST_MULTIPART_UPLOAD_PARTS",
		6: "BUCKET_ACTIONS_GET_BUCKET_TAGGING",
		7: "BUCKET_ACTIONS_LIST_BUCKET_VERSIONS",
	}
	S3Principal_Policy_BucketActions_value = map[string]int32{
		"BUCKET_ACTIONS_UNSPECIFIED":                   0,
		"BUCKET_ACTIONS_GET_BUCKET_LOCATION":           1,
		"BUCKET_ACTIONS_GET_BUCKET_POLICY":             2,
		"BUCKET_ACTIONS_LIST_BUCKET":                   3,
		"BUCKET_ACTIONS_LIST_BUCKET_MULTIPART_UPLOADS": 4,
		"BUCKET_ACTIONS_LIST_MULTIPART_UPLOAD_PARTS":   5,
		"BUCKET_ACTIONS_GET_BUCKET_TAGGING":            6,
		"BUCKET_ACTIONS_LIST_BUCKET_VERSIONS":          7,
	}
)

func (x S3Principal_Policy_BucketActions) Enum() *S3Principal_Policy_BucketActions {
	p := new(S3Principal_Policy_BucketActions)
	*p = x
	return p
}

func (x S3Principal_Policy_BucketActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (S3Principal_Policy_BucketActions) Descriptor() protoreflect.EnumDescriptor {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_enumTypes[1].Descriptor()
}

func (S3Principal_Policy_BucketActions) Type() protoreflect.EnumType {
	return &file_go_pkg_storage_storagecontroller_api_s3_proto_enumTypes[1]
}

func (x S3Principal_Policy_BucketActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use S3Principal_Policy_BucketActions.Descriptor instead.
func (S3Principal_Policy_BucketActions) EnumDescriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{32, 0, 0}
}

type ListBucketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId *ClusterIdentifier         `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Filter    *ListBucketsRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListBucketsRequest) Reset() {
	*x = ListBucketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsRequest) ProtoMessage() {}

func (x *ListBucketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsRequest.ProtoReflect.Descriptor instead.
func (*ListBucketsRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{0}
}

func (x *ListBucketsRequest) GetClusterId() *ClusterIdentifier {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *ListBucketsRequest) GetFilter() *ListBucketsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListBucketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *ListBucketsResponse) Reset() {
	*x = ListBucketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsResponse) ProtoMessage() {}

func (x *ListBucketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsResponse.ProtoReflect.Descriptor instead.
func (*ListBucketsResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{1}
}

func (x *ListBucketsResponse) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type GetBucketPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId *BucketIdentifier `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *GetBucketPolicyRequest) Reset() {
	*x = GetBucketPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBucketPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketPolicyRequest) ProtoMessage() {}

func (x *GetBucketPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetBucketPolicyRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{2}
}

func (x *GetBucketPolicyRequest) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

type GetBucketPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId *BucketIdentifier  `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Policy   BucketAccessPolicy `protobuf:"varint,2,opt,name=policy,proto3,enum=intel.storagecontroller.v1.BucketAccessPolicy" json:"policy,omitempty"`
}

func (x *GetBucketPolicyResponse) Reset() {
	*x = GetBucketPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBucketPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketPolicyResponse) ProtoMessage() {}

func (x *GetBucketPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetBucketPolicyResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{3}
}

func (x *GetBucketPolicyResponse) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *GetBucketPolicyResponse) GetPolicy() BucketAccessPolicy {
	if x != nil {
		return x.Policy
	}
	return BucketAccessPolicy_BUCKET_ACCESS_POLICY_UNSPECIFIED
}

type CreateBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    *ClusterIdentifier `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Name         string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AccessPolicy BucketAccessPolicy `protobuf:"varint,3,opt,name=access_policy,json=accessPolicy,proto3,enum=intel.storagecontroller.v1.BucketAccessPolicy" json:"access_policy,omitempty"`
	Versioned    bool               `protobuf:"varint,4,opt,name=versioned,proto3" json:"versioned,omitempty"`
	QuotaBytes   uint64             `protobuf:"varint,5,opt,name=quota_bytes,json=quotaBytes,proto3" json:"quota_bytes,omitempty"`
}

func (x *CreateBucketRequest) Reset() {
	*x = CreateBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketRequest) ProtoMessage() {}

func (x *CreateBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketRequest.ProtoReflect.Descriptor instead.
func (*CreateBucketRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBucketRequest) GetClusterId() *ClusterIdentifier {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *CreateBucketRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBucketRequest) GetAccessPolicy() BucketAccessPolicy {
	if x != nil {
		return x.AccessPolicy
	}
	return BucketAccessPolicy_BUCKET_ACCESS_POLICY_UNSPECIFIED
}

func (x *CreateBucketRequest) GetVersioned() bool {
	if x != nil {
		return x.Versioned
	}
	return false
}

func (x *CreateBucketRequest) GetQuotaBytes() uint64 {
	if x != nil {
		return x.QuotaBytes
	}
	return 0
}

type CreateBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket *Bucket `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *CreateBucketResponse) Reset() {
	*x = CreateBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketResponse) ProtoMessage() {}

func (x *CreateBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketResponse.ProtoReflect.Descriptor instead.
func (*CreateBucketResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{5}
}

func (x *CreateBucketResponse) GetBucket() *Bucket {
	if x != nil {
		return x.Bucket
	}
	return nil
}

type UpdateBucketPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId     *BucketIdentifier  `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	AccessPolicy BucketAccessPolicy `protobuf:"varint,2,opt,name=access_policy,json=accessPolicy,proto3,enum=intel.storagecontroller.v1.BucketAccessPolicy" json:"access_policy,omitempty"`
}

func (x *UpdateBucketPolicyRequest) Reset() {
	*x = UpdateBucketPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBucketPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBucketPolicyRequest) ProtoMessage() {}

func (x *UpdateBucketPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBucketPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateBucketPolicyRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBucketPolicyRequest) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *UpdateBucketPolicyRequest) GetAccessPolicy() BucketAccessPolicy {
	if x != nil {
		return x.AccessPolicy
	}
	return BucketAccessPolicy_BUCKET_ACCESS_POLICY_UNSPECIFIED
}

type UpdateBucketPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBucketPolicyResponse) Reset() {
	*x = UpdateBucketPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBucketPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBucketPolicyResponse) ProtoMessage() {}

func (x *UpdateBucketPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBucketPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateBucketPolicyResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{7}
}

type DeleteBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId *BucketIdentifier `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Force    bool              `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteBucketRequest) Reset() {
	*x = DeleteBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketRequest) ProtoMessage() {}

func (x *DeleteBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketRequest.ProtoReflect.Descriptor instead.
func (*DeleteBucketRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteBucketRequest) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *DeleteBucketRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBucketResponse) Reset() {
	*x = DeleteBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketResponse) ProtoMessage() {}

func (x *DeleteBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketResponse.ProtoReflect.Descriptor instead.
func (*DeleteBucketResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{9}
}

type ListLifecycleRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId *BucketIdentifier `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *ListLifecycleRulesRequest) Reset() {
	*x = ListLifecycleRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLifecycleRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLifecycleRulesRequest) ProtoMessage() {}

func (x *ListLifecycleRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLifecycleRulesRequest.ProtoReflect.Descriptor instead.
func (*ListLifecycleRulesRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{10}
}

func (x *ListLifecycleRulesRequest) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

type ListLifecycleRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleRules []*LifecycleRule `protobuf:"bytes,1,rep,name=lifecycle_rules,json=lifecycleRules,proto3" json:"lifecycle_rules,omitempty"`
}

func (x *ListLifecycleRulesResponse) Reset() {
	*x = ListLifecycleRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLifecycleRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLifecycleRulesResponse) ProtoMessage() {}

func (x *ListLifecycleRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLifecycleRulesResponse.ProtoReflect.Descriptor instead.
func (*ListLifecycleRulesResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{11}
}

func (x *ListLifecycleRulesResponse) GetLifecycleRules() []*LifecycleRule {
	if x != nil {
		return x.LifecycleRules
	}
	return nil
}

type CreateLifecycleRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId       *BucketIdentifier `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	LifecycleRules []*LifecycleRule  `protobuf:"bytes,2,rep,name=lifecycle_rules,json=lifecycleRules,proto3" json:"lifecycle_rules,omitempty"`
}

func (x *CreateLifecycleRulesRequest) Reset() {
	*x = CreateLifecycleRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLifecycleRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLifecycleRulesRequest) ProtoMessage() {}

func (x *CreateLifecycleRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLifecycleRulesRequest.ProtoReflect.Descriptor instead.
func (*CreateLifecycleRulesRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{12}
}

func (x *CreateLifecycleRulesRequest) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *CreateLifecycleRulesRequest) GetLifecycleRules() []*LifecycleRule {
	if x != nil {
		return x.LifecycleRules
	}
	return nil
}

type CreateLifecycleRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleRules []*LifecycleRule `protobuf:"bytes,1,rep,name=lifecycle_rules,json=lifecycleRules,proto3" json:"lifecycle_rules,omitempty"`
}

func (x *CreateLifecycleRulesResponse) Reset() {
	*x = CreateLifecycleRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLifecycleRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLifecycleRulesResponse) ProtoMessage() {}

func (x *CreateLifecycleRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLifecycleRulesResponse.ProtoReflect.Descriptor instead.
func (*CreateLifecycleRulesResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{13}
}

func (x *CreateLifecycleRulesResponse) GetLifecycleRules() []*LifecycleRule {
	if x != nil {
		return x.LifecycleRules
	}
	return nil
}

type UpdateLifecycleRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId       *BucketIdentifier `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	LifecycleRules []*LifecycleRule  `protobuf:"bytes,2,rep,name=lifecycle_rules,json=lifecycleRules,proto3" json:"lifecycle_rules,omitempty"`
}

func (x *UpdateLifecycleRulesRequest) Reset() {
	*x = UpdateLifecycleRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLifecycleRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLifecycleRulesRequest) ProtoMessage() {}

func (x *UpdateLifecycleRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLifecycleRulesRequest.ProtoReflect.Descriptor instead.
func (*UpdateLifecycleRulesRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateLifecycleRulesRequest) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *UpdateLifecycleRulesRequest) GetLifecycleRules() []*LifecycleRule {
	if x != nil {
		return x.LifecycleRules
	}
	return nil
}

type UpdateLifecycleRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleRules []*LifecycleRule `protobuf:"bytes,1,rep,name=lifecycle_rules,json=lifecycleRules,proto3" json:"lifecycle_rules,omitempty"`
}

func (x *UpdateLifecycleRulesResponse) Reset() {
	*x = UpdateLifecycleRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLifecycleRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLifecycleRulesResponse) ProtoMessage() {}

func (x *UpdateLifecycleRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLifecycleRulesResponse.ProtoReflect.Descriptor instead.
func (*UpdateLifecycleRulesResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateLifecycleRulesResponse) GetLifecycleRules() []*LifecycleRule {
	if x != nil {
		return x.LifecycleRules
	}
	return nil
}

type DeleteLifecycleRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId *BucketIdentifier `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *DeleteLifecycleRulesRequest) Reset() {
	*x = DeleteLifecycleRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLifecycleRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLifecycleRulesRequest) ProtoMessage() {}

func (x *DeleteLifecycleRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLifecycleRulesRequest.ProtoReflect.Descriptor instead.
func (*DeleteLifecycleRulesRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteLifecycleRulesRequest) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

type DeleteLifecycleRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLifecycleRulesResponse) Reset() {
	*x = DeleteLifecycleRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLifecycleRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLifecycleRulesResponse) ProtoMessage() {}

func (x *DeleteLifecycleRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLifecycleRulesResponse.ProtoReflect.Descriptor instead.
func (*DeleteLifecycleRulesResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{17}
}

type CreateS3PrincipalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   *ClusterIdentifier `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Credentials string             `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *CreateS3PrincipalRequest) Reset() {
	*x = CreateS3PrincipalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateS3PrincipalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateS3PrincipalRequest) ProtoMessage() {}

func (x *CreateS3PrincipalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateS3PrincipalRequest.ProtoReflect.Descriptor instead.
func (*CreateS3PrincipalRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{18}
}

func (x *CreateS3PrincipalRequest) GetClusterId() *ClusterIdentifier {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *CreateS3PrincipalRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateS3PrincipalRequest) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

type CreateS3PrincipalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Principal *S3Principal `protobuf:"bytes,1,opt,name=s3_principal,json=s3Principal,proto3" json:"s3_principal,omitempty"`
}

func (x *CreateS3PrincipalResponse) Reset() {
	*x = CreateS3PrincipalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateS3PrincipalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateS3PrincipalResponse) ProtoMessage() {}

func (x *CreateS3PrincipalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateS3PrincipalResponse.ProtoReflect.Descriptor instead.
func (*CreateS3PrincipalResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{19}
}

func (x *CreateS3PrincipalResponse) GetS3Principal() *S3Principal {
	if x != nil {
		return x.S3Principal
	}
	return nil
}

type GetS3PrincipalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalId *S3PrincipalIdentifier `protobuf:"bytes,1,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
}

func (x *GetS3PrincipalRequest) Reset() {
	*x = GetS3PrincipalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetS3PrincipalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetS3PrincipalRequest) ProtoMessage() {}

func (x *GetS3PrincipalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetS3PrincipalRequest.ProtoReflect.Descriptor instead.
func (*GetS3PrincipalRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{20}
}

func (x *GetS3PrincipalRequest) GetPrincipalId() *S3PrincipalIdentifier {
	if x != nil {
		return x.PrincipalId
	}
	return nil
}

type GetS3PrincipalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Principal *S3Principal `protobuf:"bytes,1,opt,name=s3_principal,json=s3Principal,proto3" json:"s3_principal,omitempty"`
}

func (x *GetS3PrincipalResponse) Reset() {
	*x = GetS3PrincipalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetS3PrincipalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetS3PrincipalResponse) ProtoMessage() {}

func (x *GetS3PrincipalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetS3PrincipalResponse.ProtoReflect.Descriptor instead.
func (*GetS3PrincipalResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{21}
}

func (x *GetS3PrincipalResponse) GetS3Principal() *S3Principal {
	if x != nil {
		return x.S3Principal
	}
	return nil
}

type SetS3PrincipalCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalId *S3PrincipalIdentifier `protobuf:"bytes,1,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	Credentials string                 `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *SetS3PrincipalCredentialsRequest) Reset() {
	*x = SetS3PrincipalCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetS3PrincipalCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetS3PrincipalCredentialsRequest) ProtoMessage() {}

func (x *SetS3PrincipalCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetS3PrincipalCredentialsRequest.ProtoReflect.Descriptor instead.
func (*SetS3PrincipalCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{22}
}

func (x *SetS3PrincipalCredentialsRequest) GetPrincipalId() *S3PrincipalIdentifier {
	if x != nil {
		return x.PrincipalId
	}
	return nil
}

func (x *SetS3PrincipalCredentialsRequest) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

type SetS3PrincipalCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetS3PrincipalCredentialsResponse) Reset() {
	*x = SetS3PrincipalCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetS3PrincipalCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetS3PrincipalCredentialsResponse) ProtoMessage() {}

func (x *SetS3PrincipalCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetS3PrincipalCredentialsResponse.ProtoReflect.Descriptor instead.
func (*SetS3PrincipalCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{23}
}

type UpdateS3PrincipalPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalId *S3PrincipalIdentifier `protobuf:"bytes,1,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	Policies    []*S3Principal_Policy  `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *UpdateS3PrincipalPoliciesRequest) Reset() {
	*x = UpdateS3PrincipalPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateS3PrincipalPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateS3PrincipalPoliciesRequest) ProtoMessage() {}

func (x *UpdateS3PrincipalPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateS3PrincipalPoliciesRequest.ProtoReflect.Descriptor instead.
func (*UpdateS3PrincipalPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateS3PrincipalPoliciesRequest) GetPrincipalId() *S3PrincipalIdentifier {
	if x != nil {
		return x.PrincipalId
	}
	return nil
}

func (x *UpdateS3PrincipalPoliciesRequest) GetPolicies() []*S3Principal_Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UpdateS3PrincipalPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Principal *S3Principal `protobuf:"bytes,1,opt,name=s3_principal,json=s3Principal,proto3" json:"s3_principal,omitempty"`
}

func (x *UpdateS3PrincipalPoliciesResponse) Reset() {
	*x = UpdateS3PrincipalPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateS3PrincipalPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateS3PrincipalPoliciesResponse) ProtoMessage() {}

func (x *UpdateS3PrincipalPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateS3PrincipalPoliciesResponse.ProtoReflect.Descriptor instead.
func (*UpdateS3PrincipalPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateS3PrincipalPoliciesResponse) GetS3Principal() *S3Principal {
	if x != nil {
		return x.S3Principal
	}
	return nil
}

type DeleteS3PrincipalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalId *S3PrincipalIdentifier `protobuf:"bytes,1,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
}

func (x *DeleteS3PrincipalRequest) Reset() {
	*x = DeleteS3PrincipalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteS3PrincipalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteS3PrincipalRequest) ProtoMessage() {}

func (x *DeleteS3PrincipalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteS3PrincipalRequest.ProtoReflect.Descriptor instead.
func (*DeleteS3PrincipalRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteS3PrincipalRequest) GetPrincipalId() *S3PrincipalIdentifier {
	if x != nil {
		return x.PrincipalId
	}
	return nil
}

type DeleteS3PrincipalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteS3PrincipalResponse) Reset() {
	*x = DeleteS3PrincipalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteS3PrincipalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteS3PrincipalResponse) ProtoMessage() {}

func (x *DeleteS3PrincipalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteS3PrincipalResponse.ProtoReflect.Descriptor instead.
func (*DeleteS3PrincipalResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{27}
}

type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *BucketIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Versioned   bool              `protobuf:"varint,3,opt,name=versioned,proto3" json:"versioned,omitempty"`
	Capacity    *Bucket_Capacity  `protobuf:"bytes,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	EndpointUrl string            `protobuf:"bytes,5,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{28}
}

func (x *Bucket) GetId() *BucketIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bucket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bucket) GetVersioned() bool {
	if x != nil {
		return x.Versioned
	}
	return false
}

func (x *Bucket) GetCapacity() *Bucket_Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *Bucket) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

type BucketIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId *ClusterIdentifier `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Id        string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BucketIdentifier) Reset() {
	*x = BucketIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketIdentifier) ProtoMessage() {}

func (x *BucketIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketIdentifier.ProtoReflect.Descriptor instead.
func (*BucketIdentifier) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{29}
}

func (x *BucketIdentifier) GetClusterId() *ClusterIdentifier {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *BucketIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LifecycleRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *LifecycleRuleIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Prefix               string                   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ExpireDays           uint32                   `protobuf:"varint,3,opt,name=expire_days,json=expireDays,proto3" json:"expire_days,omitempty"`
	NoncurrentExpireDays uint32                   `protobuf:"varint,4,opt,name=noncurrent_expire_days,json=noncurrentExpireDays,proto3" json:"noncurrent_expire_days,omitempty"`
	DeleteMarker         bool                     `protobuf:"varint,5,opt,name=delete_marker,json=deleteMarker,proto3" json:"delete_marker,omitempty"`
}

func (x *LifecycleRule) Reset() {
	*x = LifecycleRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifecycleRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleRule) ProtoMessage() {}

func (x *LifecycleRule) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleRule.ProtoReflect.Descriptor instead.
func (*LifecycleRule) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{30}
}

func (x *LifecycleRule) GetId() *LifecycleRuleIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LifecycleRule) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *LifecycleRule) GetExpireDays() uint32 {
	if x != nil {
		return x.ExpireDays
	}
	return 0
}

func (x *LifecycleRule) GetNoncurrentExpireDays() uint32 {
	if x != nil {
		return x.NoncurrentExpireDays
	}
	return 0
}

func (x *LifecycleRule) GetDeleteMarker() bool {
	if x != nil {
		return x.DeleteMarker
	}
	return false
}

type LifecycleRuleIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LifecycleRuleIdentifier) Reset() {
	*x = LifecycleRuleIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifecycleRuleIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleRuleIdentifier) ProtoMessage() {}

func (x *LifecycleRuleIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleRuleIdentifier.ProtoReflect.Descriptor instead.
func (*LifecycleRuleIdentifier) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{31}
}

func (x *LifecycleRuleIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type S3Principal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *S3PrincipalIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Policies []*S3Principal_Policy  `protobuf:"bytes,3,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *S3Principal) Reset() {
	*x = S3Principal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Principal) ProtoMessage() {}

func (x *S3Principal) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Principal.ProtoReflect.Descriptor instead.
func (*S3Principal) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{32}
}

func (x *S3Principal) GetId() *S3PrincipalIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *S3Principal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S3Principal) GetPolicies() []*S3Principal_Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type S3PrincipalIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId *ClusterIdentifier `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Id        string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *S3PrincipalIdentifier) Reset() {
	*x = S3PrincipalIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3PrincipalIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3PrincipalIdentifier) ProtoMessage() {}

func (x *S3PrincipalIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3PrincipalIdentifier.ProtoReflect.Descriptor instead.
func (*S3PrincipalIdentifier) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{33}
}

func (x *S3PrincipalIdentifier) GetClusterId() *ClusterIdentifier {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *S3PrincipalIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListBucketsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ListBucketsRequest_Filter) Reset() {
	*x = ListBucketsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsRequest_Filter) ProtoMessage() {}

func (x *ListBucketsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListBucketsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ListBucketsRequest_Filter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Bucket_Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytes     uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	AvailableBytes uint64 `protobuf:"varint,2,opt,name=available_bytes,json=availableBytes,proto3" json:"available_bytes,omitempty"`
}

func (x *Bucket_Capacity) Reset() {
	*x = Bucket_Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket_Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket_Capacity) ProtoMessage() {}

func (x *Bucket_Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket_Capacity.ProtoReflect.Descriptor instead.
func (*Bucket_Capacity) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Bucket_Capacity) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *Bucket_Capacity) GetAvailableBytes() uint64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

type S3Principal_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId       *BucketIdentifier                  `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Prefix         string                             `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Read           bool                               `protobuf:"varint,3,opt,name=read,proto3" json:"read,omitempty"`
	Write          bool                               `protobuf:"varint,4,opt,name=write,proto3" json:"write,omitempty"`
	Delete         bool                               `protobuf:"varint,5,opt,name=delete,proto3" json:"delete,omitempty"`
	Actions        []S3Principal_Policy_BucketActions `protobuf:"varint,6,rep,packed,name=actions,proto3,enum=intel.storagecontroller.v1.S3Principal_Policy_BucketActions" json:"actions,omitempty"`
	SourceIpFilter *S3Principal_Policy_SourceIpFilter `protobuf:"bytes,7,opt,name=source_ip_filter,json=sourceIpFilter,proto3" json:"source_ip_filter,omitempty"`
}

func (x *S3Principal_Policy) Reset() {
	*x = S3Principal_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Principal_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Principal_Policy) ProtoMessage() {}

func (x *S3Principal_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Principal_Policy.ProtoReflect.Descriptor instead.
func (*S3Principal_Policy) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{32, 0}
}

func (x *S3Principal_Policy) GetBucketId() *BucketIdentifier {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *S3Principal_Policy) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *S3Principal_Policy) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *S3Principal_Policy) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

func (x *S3Principal_Policy) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *S3Principal_Policy) GetActions() []S3Principal_Policy_BucketActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *S3Principal_Policy) GetSourceIpFilter() *S3Principal_Policy_SourceIpFilter {
	if x != nil {
		return x.SourceIpFilter
	}
	return nil
}

type S3Principal_Policy_SourceIpFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allow    []string `protobuf:"bytes,1,rep,name=allow,proto3" json:"allow,omitempty"`
	Disallow []string `protobuf:"bytes,2,rep,name=disallow,proto3" json:"disallow,omitempty"`
}

func (x *S3Principal_Policy_SourceIpFilter) Reset() {
	*x = S3Principal_Policy_SourceIpFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Principal_Policy_SourceIpFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Principal_Policy_SourceIpFilter) ProtoMessage() {}

func (x *S3Principal_Policy_SourceIpFilter) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Principal_Policy_SourceIpFilter.ProtoReflect.Descriptor instead.
func (*S3Principal_Policy_SourceIpFilter) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP(), []int{32, 0, 0}
}

func (x *S3Principal_Policy_SourceIpFilter) GetAllow() []string {
	if x != nil {
		return x.Allow
	}
	return nil
}

func (x *S3Principal_Policy_SourceIpFilter) GetDisallow() []string {
	if x != nil {
		return x.Disallow
	}
	return nil
}

var File_go_pkg_storage_storagecontroller_api_s3_proto protoreflect.FileDescriptor

var file_go_pkg_storage_storagecontroller_api_s3_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x67, 0x6f, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x1e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x63, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0xac, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x8b, 0x02, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xbb,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x1c, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x70, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x52, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x67, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x33, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x52, 0x0b, 0x73, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x6d,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x64, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x33, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0b, 0x73, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x22, 0x23, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x33, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x52, 0x0b, 0x73, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x70, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x22,
	0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x02, 0x0a,
	0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x1a, 0x54, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x10, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4c, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x0d,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x17, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xb7, 0x07, 0x0a, 0x0b, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x12, 0x41, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x1a, 0x84, 0x06, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x49, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x10,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x42, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0xcf, 0x02, 0x0a, 0x0d, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x42,
	0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x42,
	0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x52,
	0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x42,
	0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x53, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x42,
	0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x07, 0x22, 0x75, 0x0a, 0x15, 0x53,
	0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x2a, 0x9d, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x10, 0x03, 0x32, 0xde, 0x0e, 0x0a, 0x09, 0x53, 0x33, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x70, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2f, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x37, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x37, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x82, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x3c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x33, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x33,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x6a, 0x5a, 0x68, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescOnce sync.Once
	file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescData = file_go_pkg_storage_storagecontroller_api_s3_proto_rawDesc
)

func file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescGZIP() []byte {
	file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescOnce.Do(func() {
		file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescData)
	})
	return file_go_pkg_storage_storagecontroller_api_s3_proto_rawDescData
}

var file_go_pkg_storage_storagecontroller_api_s3_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_go_pkg_storage_storagecontroller_api_s3_proto_goTypes = []interface{}{
	(BucketAccessPolicy)(0),                   // 0: intel.storagecontroller.v1.BucketAccessPolicy
	(S3Principal_Policy_BucketActions)(0),     // 1: intel.storagecontroller.v1.S3Principal.Policy.BucketActions
	(*ListBucketsRequest)(nil),                // 2: intel.storagecontroller.v1.ListBucketsRequest
	(*ListBucketsResponse)(nil),               // 3: intel.storagecontroller.v1.ListBucketsResponse
	(*GetBucketPolicyRequest)(nil),            // 4: intel.storagecontroller.v1.GetBucketPolicyRequest
	(*GetBucketPolicyResponse)(nil),           // 5: intel.storagecontroller.v1.GetBucketPolicyResponse
	(*CreateBucketRequest)(nil),               // 6: intel.storagecontroller.v1.CreateBucketRequest
	(*CreateBucketResponse)(nil),              // 7: intel.storagecontroller.v1.CreateBucketResponse
	(*UpdateBucketPolicyRequest)(nil),         // 8: intel.storagecontroller.v1.UpdateBucketPolicyRequest
	(*UpdateBucketPolicyResponse)(nil),        // 9: intel.storagecontroller.v1.UpdateBucketPolicyResponse
	(*DeleteBucketRequest)(nil),               // 10: intel.storagecontroller.v1.DeleteBucketRequest
	(*DeleteBucketResponse)(nil),              // 11: intel.storagecontroller.v1.DeleteBucketResponse
	(*ListLifecycleRulesRequest)(nil),         // 12: intel.storagecontroller.v1.ListLifecycleRulesRequest
	(*ListLifecycleRulesResponse)(nil),        // 13: intel.storagecontroller.v1.ListLifecycleRulesResponse
	(*CreateLifecycleRulesRequest)(nil),       // 14: intel.storagecontroller.v1.CreateLifecycleRulesRequest
	(*CreateLifecycleRulesResponse)(nil),      // 15: intel.storagecontroller.v1.CreateLifecycleRulesResponse
	(*UpdateLifecycleRulesRequest)(nil),       // 16: intel.storagecontroller.v1.UpdateLifecycleRulesRequest
	(*UpdateLifecycleRulesResponse)(nil),      // 17: intel.storagecontroller.v1.UpdateLifecycleRulesResponse
	(*DeleteLifecycleRulesRequest)(nil),       // 18: intel.storagecontroller.v1.DeleteLifecycleRulesRequest
	(*DeleteLifecycleRulesResponse)(nil),      // 19: intel.storagecontroller.v1.DeleteLifecycleRulesResponse
	(*CreateS3PrincipalRequest)(nil),          // 20: intel.storagecontroller.v1.CreateS3PrincipalRequest
	(*CreateS3PrincipalResponse)(nil),         // 21: intel.storagecontroller.v1.CreateS3PrincipalResponse
	(*GetS3PrincipalRequest)(nil),             // 22: intel.storagecontroller.v1.GetS3PrincipalRequest
	(*GetS3PrincipalResponse)(nil),            // 23: intel.storagecontroller.v1.GetS3PrincipalResponse
	(*SetS3PrincipalCredentialsRequest)(nil),  // 24: intel.storagecontroller.v1.SetS3PrincipalCredentialsRequest
	(*SetS3PrincipalCredentialsResponse)(nil), // 25: intel.storagecontroller.v1.SetS3PrincipalCredentialsResponse
	(*UpdateS3PrincipalPoliciesRequest)(nil),  // 26: intel.storagecontroller.v1.UpdateS3PrincipalPoliciesRequest
	(*UpdateS3PrincipalPoliciesResponse)(nil), // 27: intel.storagecontroller.v1.UpdateS3PrincipalPoliciesResponse
	(*DeleteS3PrincipalRequest)(nil),          // 28: intel.storagecontroller.v1.DeleteS3PrincipalRequest
	(*DeleteS3PrincipalResponse)(nil),         // 29: intel.storagecontroller.v1.DeleteS3PrincipalResponse
	(*Bucket)(nil),                            // 30: intel.storagecontroller.v1.Bucket
	(*BucketIdentifier)(nil),                  // 31: intel.storagecontroller.v1.BucketIdentifier
	(*LifecycleRule)(nil),                     // 32: intel.storagecontroller.v1.LifecycleRule
	(*LifecycleRuleIdentifier)(nil),           // 33: intel.storagecontroller.v1.LifecycleRuleIdentifier
	(*S3Principal)(nil),                       // 34: intel.storagecontroller.v1.S3Principal
	(*S3PrincipalIdentifier)(nil),             // 35: intel.storagecontroller.v1.S3PrincipalIdentifier
	(*ListBucketsRequest_Filter)(nil),         // 36: intel.storagecontroller.v1.ListBucketsRequest.Filter
	(*Bucket_Capacity)(nil),                   // 37: intel.storagecontroller.v1.Bucket.Capacity
	(*S3Principal_Policy)(nil),                // 38: intel.storagecontroller.v1.S3Principal.Policy
	(*S3Principal_Policy_SourceIpFilter)(nil), // 39: intel.storagecontroller.v1.S3Principal.Policy.SourceIpFilter
	(*ClusterIdentifier)(nil),                 // 40: intel.storagecontroller.v1.ClusterIdentifier
}
var file_go_pkg_storage_storagecontroller_api_s3_proto_depIdxs = []int32{
	40, // 0: intel.storagecontroller.v1.ListBucketsRequest.cluster_id:type_name -> intel.storagecontroller.v1.ClusterIdentifier
	36, // 1: intel.storagecontroller.v1.ListBucketsRequest.filter:type_name -> intel.storagecontroller.v1.ListBucketsRequest.Filter
	30, // 2: intel.storagecontroller.v1.ListBucketsResponse.buckets:type_name -> intel.storagecontroller.v1.Bucket
	31, // 3: intel.storagecontroller.v1.GetBucketPolicyRequest.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	31, // 4: intel.storagecontroller.v1.GetBucketPolicyResponse.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	0,  // 5: intel.storagecontroller.v1.GetBucketPolicyResponse.policy:type_name -> intel.storagecontroller.v1.BucketAccessPolicy
	40, // 6: intel.storagecontroller.v1.CreateBucketRequest.cluster_id:type_name -> intel.storagecontroller.v1.ClusterIdentifier
	0,  // 7: intel.storagecontroller.v1.CreateBucketRequest.access_policy:type_name -> intel.storagecontroller.v1.BucketAccessPolicy
	30, // 8: intel.storagecontroller.v1.CreateBucketResponse.bucket:type_name -> intel.storagecontroller.v1.Bucket
	31, // 9: intel.storagecontroller.v1.UpdateBucketPolicyRequest.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	0,  // 10: intel.storagecontroller.v1.UpdateBucketPolicyRequest.access_policy:type_name -> intel.storagecontroller.v1.BucketAccessPolicy
	31, // 11: intel.storagecontroller.v1.DeleteBucketRequest.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	31, // 12: intel.storagecontroller.v1.ListLifecycleRulesRequest.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	32, // 13: intel.storagecontroller.v1.ListLifecycleRulesResponse.lifecycle_rules:type_name -> intel.storagecontroller.v1.LifecycleRule
	31, // 14: intel.storagecontroller.v1.CreateLifecycleRulesRequest.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	32, // 15: intel.storagecontroller.v1.CreateLifecycleRulesRequest.lifecycle_rules:type_name -> intel.storagecontroller.v1.LifecycleRule
	32, // 16: intel.storagecontroller.v1.CreateLifecycleRulesResponse.lifecycle_rules:type_name -> intel.storagecontroller.v1.LifecycleRule
	31, // 17: intel.storagecontroller.v1.UpdateLifecycleRulesRequest.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	32, // 18: intel.storagecontroller.v1.UpdateLifecycleRulesRequest.lifecycle_rules:type_name -> intel.storagecontroller.v1.LifecycleRule
	32, // 19: intel.storagecontroller.v1.UpdateLifecycleRulesResponse.lifecycle_rules:type_name -> intel.storagecontroller.v1.LifecycleRule
	31, // 20: intel.storagecontroller.v1.DeleteLifecycleRulesRequest.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	40, // 21: intel.storagecontroller.v1.CreateS3PrincipalRequest.cluster_id:type_name -> intel.storagecontroller.v1.ClusterIdentifier
	34, // 22: intel.storagecontroller.v1.CreateS3PrincipalResponse.s3_principal:type_name -> intel.storagecontroller.v1.S3Principal
	35, // 23: intel.storagecontroller.v1.GetS3PrincipalRequest.principal_id:type_name -> intel.storagecontroller.v1.S3PrincipalIdentifier
	34, // 24: intel.storagecontroller.v1.GetS3PrincipalResponse.s3_principal:type_name -> intel.storagecontroller.v1.S3Principal
	35, // 25: intel.storagecontroller.v1.SetS3PrincipalCredentialsRequest.principal_id:type_name -> intel.storagecontroller.v1.S3PrincipalIdentifier
	35, // 26: intel.storagecontroller.v1.UpdateS3PrincipalPoliciesRequest.principal_id:type_name -> intel.storagecontroller.v1.S3PrincipalIdentifier
	38, // 27: intel.storagecontroller.v1.UpdateS3PrincipalPoliciesRequest.policies:type_name -> intel.storagecontroller.v1.S3Principal.Policy
	34, // 28: intel.storagecontroller.v1.UpdateS3PrincipalPoliciesResponse.s3_principal:type_name -> intel.storagecontroller.v1.S3Principal
	35, // 29: intel.storagecontroller.v1.DeleteS3PrincipalRequest.principal_id:type_name -> intel.storagecontroller.v1.S3PrincipalIdentifier
	31, // 30: intel.storagecontroller.v1.Bucket.id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	37, // 31: intel.storagecontroller.v1.Bucket.capacity:type_name -> intel.storagecontroller.v1.Bucket.Capacity
	40, // 32: intel.storagecontroller.v1.BucketIdentifier.cluster_id:type_name -> intel.storagecontroller.v1.ClusterIdentifier
	33, // 33: intel.storagecontroller.v1.LifecycleRule.id:type_name -> intel.storagecontroller.v1.LifecycleRuleIdentifier
	35, // 34: intel.storagecontroller.v1.S3Principal.id:type_name -> intel.storagecontroller.v1.S3PrincipalIdentifier
	38, // 35: intel.storagecontroller.v1.S3Principal.policies:type_name -> intel.storagecontroller.v1.S3Principal.Policy
	40, // 36: intel.storagecontroller.v1.S3PrincipalIdentifier.cluster_id:type_name -> intel.storagecontroller.v1.ClusterIdentifier
	31, // 37: intel.storagecontroller.v1.S3Principal.Policy.bucket_id:type_name -> intel.storagecontroller.v1.BucketIdentifier
	1,  // 38: intel.storagecontroller.v1.S3Principal.Policy.actions:type_name -> intel.storagecontroller.v1.S3Principal.Policy.BucketActions
	39, // 39: intel.storagecontroller.v1.S3Principal.Policy.source_ip_filter:type_name -> intel.storagecontroller.v1.S3Principal.Policy.SourceIpFilter
	2,  // 40: intel.storagecontroller.v1.S3Service.ListBuckets:input_type -> intel.storagecontroller.v1.ListBucketsRequest
	4,  // 41: intel.storagecontroller.v1.S3Service.GetBucketPolicy:input_type -> intel.storagecontroller.v1.GetBucketPolicyRequest
	6,  // 42: intel.storagecontroller.v1.S3Service.CreateBucket:input_type -> intel.storagecontroller.v1.CreateBucketRequest
	8,  // 43: intel.storagecontroller.v1.S3Service.UpdateBucketPolicy:input_type -> intel.storagecontroller.v1.UpdateBucketPolicyRequest
	10, // 44: intel.storagecontroller.v1.S3Service.DeleteBucket:input_type -> intel.storagecontroller.v1.DeleteBucketRequest
	12, // 45: intel.storagecontroller.v1.S3Service.ListLifecycleRules:input_type -> intel.storagecontroller.v1.ListLifecycleRulesRequest
	14, // 46: intel.storagecontroller.v1.S3Service.CreateLifecycleRules:input_type -> intel.storagecontroller.v1.CreateLifecycleRulesRequest
	16, // 47: intel.storagecontroller.v1.S3Service.UpdateLifecycleRules:input_type -> intel.storagecontroller.v1.UpdateLifecycleRulesRequest
	18, // 48: intel.storagecontroller.v1.S3Service.DeleteLifecycleRules:input_type -> intel.storagecontroller.v1.DeleteLifecycleRulesRequest
	22, // 49: intel.storagecontroller.v1.S3Service.GetS3Principal:input_type -> intel.storagecontroller.v1.GetS3PrincipalRequest
	20, // 50: intel.storagecontroller.v1.S3Service.CreateS3Principal:input_type -> intel.storagecontroller.v1.CreateS3PrincipalRequest
	24, // 51: intel.storagecontroller.v1.S3Service.SetS3PrincipalCredentials:input_type -> intel.storagecontroller.v1.SetS3PrincipalCredentialsRequest
	26, // 52: intel.storagecontroller.v1.S3Service.UpdateS3PrincipalPolicies:input_type -> intel.storagecontroller.v1.UpdateS3PrincipalPoliciesRequest
	28, // 53: intel.storagecontroller.v1.S3Service.DeleteS3Principal:input_type -> intel.storagecontroller.v1.DeleteS3PrincipalRequest
	3,  // 54: intel.storagecontroller.v1.S3Service.ListBuckets:output_type -> intel.storagecontroller.v1.ListBucketsResponse
	5,  // 55: intel.storagecontroller.v1.S3Service.GetBucketPolicy:output_type -> intel.storagecontroller.v1.GetBucketPolicyResponse
	7,  // 56: intel.storagecontroller.v1.S3Service.CreateBucket:output_type -> intel.storagecontroller.v1.CreateBucketResponse
	9,  // 57: intel.storagecontroller.v1.S3Service.UpdateBucketPolicy:output_type -> intel.storagecontroller.v1.UpdateBucketPolicyResponse
	11, // 58: intel.storagecontroller.v1.S3Service.DeleteBucket:output_type -> intel.storagecontroller.v1.DeleteBucketResponse
	13, // 59: intel.storagecontroller.v1.S3Service.ListLifecycleRules:output_type -> intel.storagecontroller.v1.ListLifecycleRulesResponse
	15, // 60: intel.storagecontroller.v1.S3Service.CreateLifecycleRules:output_type -> intel.storagecontroller.v1.CreateLifecycleRulesResponse
	17, // 61: intel.storagecontroller.v1.S3Service.UpdateLifecycleRules:output_type -> intel.storagecontroller.v1.UpdateLifecycleRulesResponse
	19, // 62: intel.storagecontroller.v1.S3Service.DeleteLifecycleRules:output_type -> intel.storagecontroller.v1.DeleteLifecycleRulesResponse
	23, // 63: intel.storagecontroller.v1.S3Service.GetS3Principal:output_type -> intel.storagecontroller.v1.GetS3PrincipalResponse
	21, // 64: intel.storagecontroller.v1.S3Service.CreateS3Principal:output_type -> intel.storagecontroller.v1.CreateS3PrincipalResponse
	25, // 65: intel.storagecontroller.v1.S3Service.SetS3PrincipalCredentials:output_type -> intel.storagecontroller.v1.SetS3PrincipalCredentialsResponse
	27, // 66: intel.storagecontroller.v1.S3Service.UpdateS3PrincipalPolicies:output_type -> intel.storagecontroller.v1.UpdateS3PrincipalPoliciesResponse
	29, // 67: intel.storagecontroller.v1.S3Service.DeleteS3Principal:output_type -> intel.storagecontroller.v1.DeleteS3PrincipalResponse
	54, // [54:68] is the sub-list for method output_type
	40, // [40:54] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_go_pkg_storage_storagecontroller_api_s3_proto_init() }
func file_go_pkg_storage_storagecontroller_api_s3_proto_init() {
	if File_go_pkg_storage_storagecontroller_api_s3_proto != nil {
		return
	}
	file_go_pkg_storage_storagecontroller_api_cluster_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBucketPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBucketPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBucketPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBucketPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLifecycleRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLifecycleRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLifecycleRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLifecycleRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLifecycleRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLifecycleRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLifecycleRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLifecycleRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateS3PrincipalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateS3PrincipalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetS3PrincipalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetS3PrincipalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetS3PrincipalCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetS3PrincipalCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateS3PrincipalPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateS3PrincipalPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteS3PrincipalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteS3PrincipalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifecycleRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifecycleRuleIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Principal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3PrincipalIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket_Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Principal_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Principal_Policy_SourceIpFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_pkg_storage_storagecontroller_api_s3_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_pkg_storage_storagecontroller_api_s3_proto_goTypes,
		DependencyIndexes: file_go_pkg_storage_storagecontroller_api_s3_proto_depIdxs,
		EnumInfos:         file_go_pkg_storage_storagecontroller_api_s3_proto_enumTypes,
		MessageInfos:      file_go_pkg_storage_storagecontroller_api_s3_proto_msgTypes,
	}.Build()
	File_go_pkg_storage_storagecontroller_api_s3_proto = out.File
	file_go_pkg_storage_storagecontroller_api_s3_proto_rawDesc = nil
	file_go_pkg_storage_storagecontroller_api_s3_proto_goTypes = nil
	file_go_pkg_storage_storagecontroller_api_s3_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// S3ServiceClient is the client API for S3Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type S3ServiceClient interface {
	ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error)
	GetBucketPolicy(ctx context.Context, in *GetBucketPolicyRequest, opts ...grpc.CallOption) (*GetBucketPolicyResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	UpdateBucketPolicy(ctx context.Context, in *UpdateBucketPolicyRequest, opts ...grpc.CallOption) (*UpdateBucketPolicyResponse, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
	ListLifecycleRules(ctx context.Context, in *ListLifecycleRulesRequest, opts ...grpc.CallOption) (*ListLifecycleRulesResponse, error)
	CreateLifecycleRules(ctx context.Context, in *CreateLifecycleRulesRequest, opts ...grpc.CallOption) (*CreateLifecycleRulesResponse, error)
	UpdateLifecycleRules(ctx context.Context, in *UpdateLifecycleRulesRequest, opts ...grpc.CallOption) (*UpdateLifecycleRulesResponse, error)
	DeleteLifecycleRules(ctx context.Context, in *DeleteLifecycleRulesRequest, opts ...grpc.CallOption) (*DeleteLifecycleRulesResponse, error)
	GetS3Principal(ctx context.Context, in *GetS3PrincipalRequest, opts ...grpc.CallOption) (*GetS3PrincipalResponse, error)
	CreateS3Principal(ctx context.Context, in *CreateS3PrincipalRequest, opts ...grpc.CallOption) (*CreateS3PrincipalResponse, error)
	SetS3PrincipalCredentials(ctx context.Context, in *SetS3PrincipalCredentialsRequest, opts ...grpc.CallOption) (*SetS3PrincipalCredentialsResponse, error)
	UpdateS3PrincipalPolicies(ctx context.Context, in *UpdateS3PrincipalPoliciesRequest, opts ...grpc.CallOption) (*UpdateS3PrincipalPoliciesResponse, error)
	DeleteS3Principal(ctx context.Context, in *DeleteS3PrincipalRequest, opts ...grpc.CallOption) (*DeleteS3PrincipalResponse, error)
}

type s3ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS3ServiceClient(cc grpc.ClientConnInterface) S3ServiceClient {
	return &s3ServiceClient{cc}
}

func (c *s3ServiceClient) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error) {
	out := new(ListBucketsResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/ListBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) GetBucketPolicy(ctx context.Context, in *GetBucketPolicyRequest, opts ...grpc.CallOption) (*GetBucketPolicyResponse, error) {
	out := new(GetBucketPolicyResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/GetBucketPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) UpdateBucketPolicy(ctx context.Context, in *UpdateBucketPolicyRequest, opts ...grpc.CallOption) (*UpdateBucketPolicyResponse, error) {
	out := new(UpdateBucketPolicyResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/UpdateBucketPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) ListLifecycleRules(ctx context.Context, in *ListLifecycleRulesRequest, opts ...grpc.CallOption) (*ListLifecycleRulesResponse, error) {
	out := new(ListLifecycleRulesResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/ListLifecycleRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) CreateLifecycleRules(ctx context.Context, in *CreateLifecycleRulesRequest, opts ...grpc.CallOption) (*CreateLifecycleRulesResponse, error) {
	out := new(CreateLifecycleRulesResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/CreateLifecycleRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) UpdateLifecycleRules(ctx context.Context, in *UpdateLifecycleRulesRequest, opts ...grpc.CallOption) (*UpdateLifecycleRulesResponse, error) {
	out := new(UpdateLifecycleRulesResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/UpdateLifecycleRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) DeleteLifecycleRules(ctx context.Context, in *DeleteLifecycleRulesRequest, opts ...grpc.CallOption) (*DeleteLifecycleRulesResponse, error) {
	out := new(DeleteLifecycleRulesResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/DeleteLifecycleRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) GetS3Principal(ctx context.Context, in *GetS3PrincipalRequest, opts ...grpc.CallOption) (*GetS3PrincipalResponse, error) {
	out := new(GetS3PrincipalResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/GetS3Principal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) CreateS3Principal(ctx context.Context, in *CreateS3PrincipalRequest, opts ...grpc.CallOption) (*CreateS3PrincipalResponse, error) {
	out := new(CreateS3PrincipalResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/CreateS3Principal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) SetS3PrincipalCredentials(ctx context.Context, in *SetS3PrincipalCredentialsRequest, opts ...grpc.CallOption) (*SetS3PrincipalCredentialsResponse, error) {
	out := new(SetS3PrincipalCredentialsResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/SetS3PrincipalCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) UpdateS3PrincipalPolicies(ctx context.Context, in *UpdateS3PrincipalPoliciesRequest, opts ...grpc.CallOption) (*UpdateS3PrincipalPoliciesResponse, error) {
	out := new(UpdateS3PrincipalPoliciesResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/UpdateS3PrincipalPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) DeleteS3Principal(ctx context.Context, in *DeleteS3PrincipalRequest, opts ...grpc.CallOption) (*DeleteS3PrincipalResponse, error) {
	out := new(DeleteS3PrincipalResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.S3Service/DeleteS3Principal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3ServiceServer is the server API for S3Service service.
type S3ServiceServer interface {
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	GetBucketPolicy(context.Context, *GetBucketPolicyRequest) (*GetBucketPolicyResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	UpdateBucketPolicy(context.Context, *UpdateBucketPolicyRequest) (*UpdateBucketPolicyResponse, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error)
	ListLifecycleRules(context.Context, *ListLifecycleRulesRequest) (*ListLifecycleRulesResponse, error)
	CreateLifecycleRules(context.Context, *CreateLifecycleRulesRequest) (*CreateLifecycleRulesResponse, error)
	UpdateLifecycleRules(context.Context, *UpdateLifecycleRulesRequest) (*UpdateLifecycleRulesResponse, error)
	DeleteLifecycleRules(context.Context, *DeleteLifecycleRulesRequest) (*DeleteLifecycleRulesResponse, error)
	GetS3Principal(context.Context, *GetS3PrincipalRequest) (*GetS3PrincipalResponse, error)
	CreateS3Principal(context.Context, *CreateS3PrincipalRequest) (*CreateS3PrincipalResponse, error)
	SetS3PrincipalCredentials(context.Context, *SetS3PrincipalCredentialsRequest) (*SetS3PrincipalCredentialsResponse, error)
	UpdateS3PrincipalPolicies(context.Context, *UpdateS3PrincipalPoliciesRequest) (*UpdateS3PrincipalPoliciesResponse, error)
	DeleteS3Principal(context.Context, *DeleteS3PrincipalRequest) (*DeleteS3PrincipalResponse, error)
}

// UnimplementedS3ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedS3ServiceServer struct {
}

func (*UnimplementedS3ServiceServer) ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (*UnimplementedS3ServiceServer) GetBucketPolicy(context.Context, *GetBucketPolicyRequest) (*GetBucketPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketPolicy not implemented")
}
func (*UnimplementedS3ServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (*UnimplementedS3ServiceServer) UpdateBucketPolicy(context.Context, *UpdateBucketPolicyRequest) (*UpdateBucketPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketPolicy not implemented")
}
func (*UnimplementedS3ServiceServer) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (*UnimplementedS3ServiceServer) ListLifecycleRules(context.Context, *ListLifecycleRulesRequest) (*ListLifecycleRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLifecycleRules not implemented")
}
func (*UnimplementedS3ServiceServer) CreateLifecycleRules(context.Context, *CreateLifecycleRulesRequest) (*CreateLifecycleRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLifecycleRules not implemented")
}
func (*UnimplementedS3ServiceServer) UpdateLifecycleRules(context.Context, *UpdateLifecycleRulesRequest) (*UpdateLifecycleRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLifecycleRules not implemented")
}
func (*UnimplementedS3ServiceServer) DeleteLifecycleRules(context.Context, *DeleteLifecycleRulesRequest) (*DeleteLifecycleRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLifecycleRules not implemented")
}
func (*UnimplementedS3ServiceServer) GetS3Principal(context.Context, *GetS3PrincipalRequest) (*GetS3PrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS3Principal not implemented")
}
func (*UnimplementedS3ServiceServer) CreateS3Principal(context.Context, *CreateS3PrincipalRequest) (*CreateS3PrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateS3Principal not implemented")
}
func (*UnimplementedS3ServiceServer) SetS3PrincipalCredentials(context.Context, *SetS3PrincipalCredentialsRequest) (*SetS3PrincipalCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetS3PrincipalCredentials not implemented")
}
func (*UnimplementedS3ServiceServer) UpdateS3PrincipalPolicies(context.Context, *UpdateS3PrincipalPoliciesRequest) (*UpdateS3PrincipalPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateS3PrincipalPolicies not implemented")
}
func (*UnimplementedS3ServiceServer) DeleteS3Principal(context.Context, *DeleteS3PrincipalRequest) (*DeleteS3PrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteS3Principal not implemented")
}

func RegisterS3ServiceServer(s *grpc.Server, srv S3ServiceServer) {
	s.RegisterService(&_S3Service_serviceDesc, srv)
}

func _S3Service_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/ListBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).ListBuckets(ctx, req.(*ListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_GetBucketPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).GetBucketPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/GetBucketPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).GetBucketPolicy(ctx, req.(*GetBucketPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_UpdateBucketPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).UpdateBucketPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/UpdateBucketPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).UpdateBucketPolicy(ctx, req.(*UpdateBucketPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_ListLifecycleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLifecycleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).ListLifecycleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/ListLifecycleRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).ListLifecycleRules(ctx, req.(*ListLifecycleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_CreateLifecycleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLifecycleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).CreateLifecycleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/CreateLifecycleRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).CreateLifecycleRules(ctx, req.(*CreateLifecycleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_UpdateLifecycleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLifecycleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).UpdateLifecycleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/UpdateLifecycleRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).UpdateLifecycleRules(ctx, req.(*UpdateLifecycleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_DeleteLifecycleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLifecycleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).DeleteLifecycleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/DeleteLifecycleRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).DeleteLifecycleRules(ctx, req.(*DeleteLifecycleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_GetS3Principal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetS3PrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).GetS3Principal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/GetS3Principal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).GetS3Principal(ctx, req.(*GetS3PrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_CreateS3Principal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateS3PrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).CreateS3Principal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/CreateS3Principal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).CreateS3Principal(ctx, req.(*CreateS3PrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_SetS3PrincipalCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetS3PrincipalCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).SetS3PrincipalCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/SetS3PrincipalCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).SetS3PrincipalCredentials(ctx, req.(*SetS3PrincipalCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_UpdateS3PrincipalPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateS3PrincipalPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).UpdateS3PrincipalPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/UpdateS3PrincipalPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).UpdateS3PrincipalPolicies(ctx, req.(*UpdateS3PrincipalPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_DeleteS3Principal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteS3PrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).DeleteS3Principal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.S3Service/DeleteS3Principal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).DeleteS3Principal(ctx, req.(*DeleteS3PrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _S3Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intel.storagecontroller.v1.S3Service",
	HandlerType: (*S3ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuckets",
			Handler:    _S3Service_ListBuckets_Handler,
		},
		{
			MethodName: "GetBucketPolicy",
			Handler:    _S3Service_GetBucketPolicy_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _S3Service_CreateBucket_Handler,
		},
		{
			MethodName: "UpdateBucketPolicy",
			Handler:    _S3Service_UpdateBucketPolicy_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _S3Service_DeleteBucket_Handler,
		},
		{
			MethodName: "ListLifecycleRules",
			Handler:    _S3Service_ListLifecycleRules_Handler,
		},
		{
			MethodName: "CreateLifecycleRules",
			Handler:    _S3Service_CreateLifecycleRules_Handler,
		},
		{
			MethodName: "UpdateLifecycleRules",
			Handler:    _S3Service_UpdateLifecycleRules_Handler,
		},
		{
			MethodName: "DeleteLifecycleRules",
			Handler:    _S3Service_DeleteLifecycleRules_Handler,
		},
		{
			MethodName: "GetS3Principal",
			Handler:    _S3Service_GetS3Principal_Handler,
		},
		{
			MethodName: "CreateS3Principal",
			Handler:    _S3Service_CreateS3Principal_Handler,
		},
		{
			MethodName: "SetS3PrincipalCredentials",
			Handler:    _S3Service_SetS3PrincipalCredentials_Handler,
		},
		{
			MethodName: "UpdateS3PrincipalPolicies",
			Handler:    _S3Service_UpdateS3PrincipalPolicies_Handler,
		},
		{
			MethodName: "DeleteS3Principal",
			Handler:    _S3Service_DeleteS3Principal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/pkg/storage/storagecontroller/api/s3.proto",
}
