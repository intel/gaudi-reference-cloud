// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.4
// source: go/pkg/storage/storagecontroller/api/vast/filesystem.proto

package vast

import (
	context "context"
	api "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/storage/storagecontroller/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Filesystem_Protocol int32

const (
	Filesystem_PROTOCOL_UNSPECIFIED Filesystem_Protocol = 0
	Filesystem_PROTOCOL_NFS_V3      Filesystem_Protocol = 1
	Filesystem_PROTOCOL_NFS_V4      Filesystem_Protocol = 2
	Filesystem_PROTOCOL_SMB         Filesystem_Protocol = 3
)

// Enum value maps for Filesystem_Protocol.
var (
	Filesystem_Protocol_name = map[int32]string{
		0: "PROTOCOL_UNSPECIFIED",
		1: "PROTOCOL_NFS_V3",
		2: "PROTOCOL_NFS_V4",
		3: "PROTOCOL_SMB",
	}
	Filesystem_Protocol_value = map[string]int32{
		"PROTOCOL_UNSPECIFIED": 0,
		"PROTOCOL_NFS_V3":      1,
		"PROTOCOL_NFS_V4":      2,
		"PROTOCOL_SMB":         3,
	}
)

func (x Filesystem_Protocol) Enum() *Filesystem_Protocol {
	p := new(Filesystem_Protocol)
	*p = x
	return p
}

func (x Filesystem_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filesystem_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_enumTypes[0].Descriptor()
}

func (Filesystem_Protocol) Type() protoreflect.EnumType {
	return &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_enumTypes[0]
}

func (x Filesystem_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filesystem_Protocol.Descriptor instead.
func (Filesystem_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{11, 0}
}

type ListFilesystemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *api.NamespaceIdentifier       `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Filter      *ListFilesystemsRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListFilesystemsRequest) Reset() {
	*x = ListFilesystemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesystemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesystemsRequest) ProtoMessage() {}

func (x *ListFilesystemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesystemsRequest.ProtoReflect.Descriptor instead.
func (*ListFilesystemsRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{0}
}

func (x *ListFilesystemsRequest) GetNamespaceId() *api.NamespaceIdentifier {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *ListFilesystemsRequest) GetFilter() *ListFilesystemsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListFilesystemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filesystems []*Filesystem `protobuf:"bytes,1,rep,name=filesystems,proto3" json:"filesystems,omitempty"`
}

func (x *ListFilesystemsResponse) Reset() {
	*x = ListFilesystemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesystemsResponse) ProtoMessage() {}

func (x *ListFilesystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesystemsResponse.ProtoReflect.Descriptor instead.
func (*ListFilesystemsResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{1}
}

func (x *ListFilesystemsResponse) GetFilesystems() []*Filesystem {
	if x != nil {
		return x.Filesystems
	}
	return nil
}

type GetFilesystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemId *FilesystemIdentifier `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
}

func (x *GetFilesystemRequest) Reset() {
	*x = GetFilesystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesystemRequest) ProtoMessage() {}

func (x *GetFilesystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesystemRequest.ProtoReflect.Descriptor instead.
func (*GetFilesystemRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{2}
}

func (x *GetFilesystemRequest) GetFilesystemId() *FilesystemIdentifier {
	if x != nil {
		return x.FilesystemId
	}
	return nil
}

type GetFilesystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filesystem *Filesystem `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
}

func (x *GetFilesystemResponse) Reset() {
	*x = GetFilesystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesystemResponse) ProtoMessage() {}

func (x *GetFilesystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesystemResponse.ProtoReflect.Descriptor instead.
func (*GetFilesystemResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{3}
}

func (x *GetFilesystemResponse) GetFilesystem() *Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type CreateFilesystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *api.NamespaceIdentifier `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Name        string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path        string                   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	TotalBytes  uint64                   `protobuf:"varint,4,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	Protocols   []Filesystem_Protocol    `protobuf:"varint,5,rep,packed,name=protocols,proto3,enum=intel.storagecontroller.v1.vast.Filesystem_Protocol" json:"protocols,omitempty"`
}

func (x *CreateFilesystemRequest) Reset() {
	*x = CreateFilesystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFilesystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilesystemRequest) ProtoMessage() {}

func (x *CreateFilesystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilesystemRequest.ProtoReflect.Descriptor instead.
func (*CreateFilesystemRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFilesystemRequest) GetNamespaceId() *api.NamespaceIdentifier {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CreateFilesystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFilesystemRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateFilesystemRequest) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *CreateFilesystemRequest) GetProtocols() []Filesystem_Protocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type CreateFilesystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filesystem *Filesystem `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
}

func (x *CreateFilesystemResponse) Reset() {
	*x = CreateFilesystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFilesystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilesystemResponse) ProtoMessage() {}

func (x *CreateFilesystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilesystemResponse.ProtoReflect.Descriptor instead.
func (*CreateFilesystemResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFilesystemResponse) GetFilesystem() *Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type UpdateFilesystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemId  *FilesystemIdentifier `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
	NewName       *string               `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3,oneof" json:"new_name,omitempty"`
	NewTotalBytes *uint64               `protobuf:"varint,3,opt,name=new_total_bytes,json=newTotalBytes,proto3,oneof" json:"new_total_bytes,omitempty"`
}

func (x *UpdateFilesystemRequest) Reset() {
	*x = UpdateFilesystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFilesystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilesystemRequest) ProtoMessage() {}

func (x *UpdateFilesystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilesystemRequest.ProtoReflect.Descriptor instead.
func (*UpdateFilesystemRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFilesystemRequest) GetFilesystemId() *FilesystemIdentifier {
	if x != nil {
		return x.FilesystemId
	}
	return nil
}

func (x *UpdateFilesystemRequest) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

func (x *UpdateFilesystemRequest) GetNewTotalBytes() uint64 {
	if x != nil && x.NewTotalBytes != nil {
		return *x.NewTotalBytes
	}
	return 0
}

type UpdateFilesystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filesystem *Filesystem `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
}

func (x *UpdateFilesystemResponse) Reset() {
	*x = UpdateFilesystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFilesystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilesystemResponse) ProtoMessage() {}

func (x *UpdateFilesystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilesystemResponse.ProtoReflect.Descriptor instead.
func (*UpdateFilesystemResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFilesystemResponse) GetFilesystem() *Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type DeleteFilesystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemId *FilesystemIdentifier `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
}

func (x *DeleteFilesystemRequest) Reset() {
	*x = DeleteFilesystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesystemRequest) ProtoMessage() {}

func (x *DeleteFilesystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteFilesystemRequest) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFilesystemRequest) GetFilesystemId() *FilesystemIdentifier {
	if x != nil {
		return x.FilesystemId
	}
	return nil
}

type DeleteFilesystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFilesystemResponse) Reset() {
	*x = DeleteFilesystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesystemResponse) ProtoMessage() {}

func (x *DeleteFilesystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesystemResponse.ProtoReflect.Descriptor instead.
func (*DeleteFilesystemResponse) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{9}
}

type FilesystemIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *api.NamespaceIdentifier `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Id          string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FilesystemIdentifier) Reset() {
	*x = FilesystemIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemIdentifier) ProtoMessage() {}

func (x *FilesystemIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemIdentifier.ProtoReflect.Descriptor instead.
func (*FilesystemIdentifier) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{10}
}

func (x *FilesystemIdentifier) GetNamespaceId() *api.NamespaceIdentifier {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *FilesystemIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *FilesystemIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Capacity  *Filesystem_Capacity  `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Path      string                `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Protocols []Filesystem_Protocol `protobuf:"varint,5,rep,packed,name=protocols,proto3,enum=intel.storagecontroller.v1.vast.Filesystem_Protocol" json:"protocols,omitempty"`
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{11}
}

func (x *Filesystem) GetId() *FilesystemIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Filesystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filesystem) GetCapacity() *Filesystem_Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *Filesystem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Filesystem) GetProtocols() []Filesystem_Protocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type ListFilesystemsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ListFilesystemsRequest_Filter) Reset() {
	*x = ListFilesystemsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesystemsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesystemsRequest_Filter) ProtoMessage() {}

func (x *ListFilesystemsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesystemsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListFilesystemsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ListFilesystemsRequest_Filter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Filesystem_Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytes     uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	AvailableBytes uint64 `protobuf:"varint,2,opt,name=available_bytes,json=availableBytes,proto3" json:"available_bytes,omitempty"`
}

func (x *Filesystem_Capacity) Reset() {
	*x = Filesystem_Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filesystem_Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem_Capacity) ProtoMessage() {}

func (x *Filesystem_Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem_Capacity.ProtoReflect.Descriptor instead.
func (*Filesystem_Capacity) Descriptor() ([]byte, []int) {
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Filesystem_Capacity) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *Filesystem_Capacity) GetAvailableBytes() uint64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

var File_go_pkg_storage_storagecontroller_api_vast_filesystem_proto protoreflect.FileDescriptor

var file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x61, 0x73, 0x74, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x1a, 0x34, 0x67,
	0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x72, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x8a,
	0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0x67, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0x75, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xd9, 0x03, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x45, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x52, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x1a, 0x54, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e,
	0x46, 0x53, 0x5f, 0x56, 0x33, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x46, 0x53, 0x5f, 0x56, 0x34, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x4d, 0x42, 0x10, 0x03, 0x32, 0xc3,
	0x05, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x61, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x89, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x38, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x61, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x78, 0x5a, 0x76, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x69, 0x64, 0x63, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x64, 0x73, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x73, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescOnce sync.Once
	file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescData = file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDesc
)

func file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescGZIP() []byte {
	file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescOnce.Do(func() {
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescData)
	})
	return file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDescData
}

var file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_goTypes = []interface{}{
	(Filesystem_Protocol)(0),              // 0: intel.storagecontroller.v1.vast.Filesystem.Protocol
	(*ListFilesystemsRequest)(nil),        // 1: intel.storagecontroller.v1.vast.ListFilesystemsRequest
	(*ListFilesystemsResponse)(nil),       // 2: intel.storagecontroller.v1.vast.ListFilesystemsResponse
	(*GetFilesystemRequest)(nil),          // 3: intel.storagecontroller.v1.vast.GetFilesystemRequest
	(*GetFilesystemResponse)(nil),         // 4: intel.storagecontroller.v1.vast.GetFilesystemResponse
	(*CreateFilesystemRequest)(nil),       // 5: intel.storagecontroller.v1.vast.CreateFilesystemRequest
	(*CreateFilesystemResponse)(nil),      // 6: intel.storagecontroller.v1.vast.CreateFilesystemResponse
	(*UpdateFilesystemRequest)(nil),       // 7: intel.storagecontroller.v1.vast.UpdateFilesystemRequest
	(*UpdateFilesystemResponse)(nil),      // 8: intel.storagecontroller.v1.vast.UpdateFilesystemResponse
	(*DeleteFilesystemRequest)(nil),       // 9: intel.storagecontroller.v1.vast.DeleteFilesystemRequest
	(*DeleteFilesystemResponse)(nil),      // 10: intel.storagecontroller.v1.vast.DeleteFilesystemResponse
	(*FilesystemIdentifier)(nil),          // 11: intel.storagecontroller.v1.vast.FilesystemIdentifier
	(*Filesystem)(nil),                    // 12: intel.storagecontroller.v1.vast.Filesystem
	(*ListFilesystemsRequest_Filter)(nil), // 13: intel.storagecontroller.v1.vast.ListFilesystemsRequest.Filter
	(*Filesystem_Capacity)(nil),           // 14: intel.storagecontroller.v1.vast.Filesystem.Capacity
	(*api.NamespaceIdentifier)(nil),       // 15: intel.storagecontroller.v1.NamespaceIdentifier
}
var file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_depIdxs = []int32{
	15, // 0: intel.storagecontroller.v1.vast.ListFilesystemsRequest.namespace_id:type_name -> intel.storagecontroller.v1.NamespaceIdentifier
	13, // 1: intel.storagecontroller.v1.vast.ListFilesystemsRequest.filter:type_name -> intel.storagecontroller.v1.vast.ListFilesystemsRequest.Filter
	12, // 2: intel.storagecontroller.v1.vast.ListFilesystemsResponse.filesystems:type_name -> intel.storagecontroller.v1.vast.Filesystem
	11, // 3: intel.storagecontroller.v1.vast.GetFilesystemRequest.filesystem_id:type_name -> intel.storagecontroller.v1.vast.FilesystemIdentifier
	12, // 4: intel.storagecontroller.v1.vast.GetFilesystemResponse.filesystem:type_name -> intel.storagecontroller.v1.vast.Filesystem
	15, // 5: intel.storagecontroller.v1.vast.CreateFilesystemRequest.namespace_id:type_name -> intel.storagecontroller.v1.NamespaceIdentifier
	0,  // 6: intel.storagecontroller.v1.vast.CreateFilesystemRequest.protocols:type_name -> intel.storagecontroller.v1.vast.Filesystem.Protocol
	12, // 7: intel.storagecontroller.v1.vast.CreateFilesystemResponse.filesystem:type_name -> intel.storagecontroller.v1.vast.Filesystem
	11, // 8: intel.storagecontroller.v1.vast.UpdateFilesystemRequest.filesystem_id:type_name -> intel.storagecontroller.v1.vast.FilesystemIdentifier
	12, // 9: intel.storagecontroller.v1.vast.UpdateFilesystemResponse.filesystem:type_name -> intel.storagecontroller.v1.vast.Filesystem
	11, // 10: intel.storagecontroller.v1.vast.DeleteFilesystemRequest.filesystem_id:type_name -> intel.storagecontroller.v1.vast.FilesystemIdentifier
	15, // 11: intel.storagecontroller.v1.vast.FilesystemIdentifier.namespace_id:type_name -> intel.storagecontroller.v1.NamespaceIdentifier
	11, // 12: intel.storagecontroller.v1.vast.Filesystem.id:type_name -> intel.storagecontroller.v1.vast.FilesystemIdentifier
	14, // 13: intel.storagecontroller.v1.vast.Filesystem.capacity:type_name -> intel.storagecontroller.v1.vast.Filesystem.Capacity
	0,  // 14: intel.storagecontroller.v1.vast.Filesystem.protocols:type_name -> intel.storagecontroller.v1.vast.Filesystem.Protocol
	1,  // 15: intel.storagecontroller.v1.vast.FilesystemService.ListFilesystems:input_type -> intel.storagecontroller.v1.vast.ListFilesystemsRequest
	3,  // 16: intel.storagecontroller.v1.vast.FilesystemService.GetFilesystem:input_type -> intel.storagecontroller.v1.vast.GetFilesystemRequest
	5,  // 17: intel.storagecontroller.v1.vast.FilesystemService.CreateFilesystem:input_type -> intel.storagecontroller.v1.vast.CreateFilesystemRequest
	7,  // 18: intel.storagecontroller.v1.vast.FilesystemService.UpdateFilesystem:input_type -> intel.storagecontroller.v1.vast.UpdateFilesystemRequest
	9,  // 19: intel.storagecontroller.v1.vast.FilesystemService.DeleteFilesystem:input_type -> intel.storagecontroller.v1.vast.DeleteFilesystemRequest
	2,  // 20: intel.storagecontroller.v1.vast.FilesystemService.ListFilesystems:output_type -> intel.storagecontroller.v1.vast.ListFilesystemsResponse
	4,  // 21: intel.storagecontroller.v1.vast.FilesystemService.GetFilesystem:output_type -> intel.storagecontroller.v1.vast.GetFilesystemResponse
	6,  // 22: intel.storagecontroller.v1.vast.FilesystemService.CreateFilesystem:output_type -> intel.storagecontroller.v1.vast.CreateFilesystemResponse
	8,  // 23: intel.storagecontroller.v1.vast.FilesystemService.UpdateFilesystem:output_type -> intel.storagecontroller.v1.vast.UpdateFilesystemResponse
	10, // 24: intel.storagecontroller.v1.vast.FilesystemService.DeleteFilesystem:output_type -> intel.storagecontroller.v1.vast.DeleteFilesystemResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_init() }
func file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_init() {
	if File_go_pkg_storage_storagecontroller_api_vast_filesystem_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesystemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesystemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFilesystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFilesystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFilesystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFilesystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesystemsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filesystem_Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_goTypes,
		DependencyIndexes: file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_depIdxs,
		EnumInfos:         file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_enumTypes,
		MessageInfos:      file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_msgTypes,
	}.Build()
	File_go_pkg_storage_storagecontroller_api_vast_filesystem_proto = out.File
	file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_rawDesc = nil
	file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_goTypes = nil
	file_go_pkg_storage_storagecontroller_api_vast_filesystem_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FilesystemServiceClient is the client API for FilesystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesystemServiceClient interface {
	ListFilesystems(ctx context.Context, in *ListFilesystemsRequest, opts ...grpc.CallOption) (*ListFilesystemsResponse, error)
	GetFilesystem(ctx context.Context, in *GetFilesystemRequest, opts ...grpc.CallOption) (*GetFilesystemResponse, error)
	CreateFilesystem(ctx context.Context, in *CreateFilesystemRequest, opts ...grpc.CallOption) (*CreateFilesystemResponse, error)
	UpdateFilesystem(ctx context.Context, in *UpdateFilesystemRequest, opts ...grpc.CallOption) (*UpdateFilesystemResponse, error)
	DeleteFilesystem(ctx context.Context, in *DeleteFilesystemRequest, opts ...grpc.CallOption) (*DeleteFilesystemResponse, error)
}

type filesystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemServiceClient(cc grpc.ClientConnInterface) FilesystemServiceClient {
	return &filesystemServiceClient{cc}
}

func (c *filesystemServiceClient) ListFilesystems(ctx context.Context, in *ListFilesystemsRequest, opts ...grpc.CallOption) (*ListFilesystemsResponse, error) {
	out := new(ListFilesystemsResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.vast.FilesystemService/ListFilesystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) GetFilesystem(ctx context.Context, in *GetFilesystemRequest, opts ...grpc.CallOption) (*GetFilesystemResponse, error) {
	out := new(GetFilesystemResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.vast.FilesystemService/GetFilesystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) CreateFilesystem(ctx context.Context, in *CreateFilesystemRequest, opts ...grpc.CallOption) (*CreateFilesystemResponse, error) {
	out := new(CreateFilesystemResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.vast.FilesystemService/CreateFilesystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) UpdateFilesystem(ctx context.Context, in *UpdateFilesystemRequest, opts ...grpc.CallOption) (*UpdateFilesystemResponse, error) {
	out := new(UpdateFilesystemResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.vast.FilesystemService/UpdateFilesystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) DeleteFilesystem(ctx context.Context, in *DeleteFilesystemRequest, opts ...grpc.CallOption) (*DeleteFilesystemResponse, error) {
	out := new(DeleteFilesystemResponse)
	err := c.cc.Invoke(ctx, "/intel.storagecontroller.v1.vast.FilesystemService/DeleteFilesystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServiceServer is the server API for FilesystemService service.
type FilesystemServiceServer interface {
	ListFilesystems(context.Context, *ListFilesystemsRequest) (*ListFilesystemsResponse, error)
	GetFilesystem(context.Context, *GetFilesystemRequest) (*GetFilesystemResponse, error)
	CreateFilesystem(context.Context, *CreateFilesystemRequest) (*CreateFilesystemResponse, error)
	UpdateFilesystem(context.Context, *UpdateFilesystemRequest) (*UpdateFilesystemResponse, error)
	DeleteFilesystem(context.Context, *DeleteFilesystemRequest) (*DeleteFilesystemResponse, error)
}

// UnimplementedFilesystemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFilesystemServiceServer struct {
}

func (*UnimplementedFilesystemServiceServer) ListFilesystems(context.Context, *ListFilesystemsRequest) (*ListFilesystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesystems not implemented")
}
func (*UnimplementedFilesystemServiceServer) GetFilesystem(context.Context, *GetFilesystemRequest) (*GetFilesystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesystem not implemented")
}
func (*UnimplementedFilesystemServiceServer) CreateFilesystem(context.Context, *CreateFilesystemRequest) (*CreateFilesystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilesystem not implemented")
}
func (*UnimplementedFilesystemServiceServer) UpdateFilesystem(context.Context, *UpdateFilesystemRequest) (*UpdateFilesystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilesystem not implemented")
}
func (*UnimplementedFilesystemServiceServer) DeleteFilesystem(context.Context, *DeleteFilesystemRequest) (*DeleteFilesystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilesystem not implemented")
}

func RegisterFilesystemServiceServer(s *grpc.Server, srv FilesystemServiceServer) {
	s.RegisterService(&_FilesystemService_serviceDesc, srv)
}

func _FilesystemService_ListFilesystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).ListFilesystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.vast.FilesystemService/ListFilesystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).ListFilesystems(ctx, req.(*ListFilesystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_GetFilesystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).GetFilesystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.vast.FilesystemService/GetFilesystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).GetFilesystem(ctx, req.(*GetFilesystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_CreateFilesystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilesystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).CreateFilesystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.vast.FilesystemService/CreateFilesystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).CreateFilesystem(ctx, req.(*CreateFilesystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_UpdateFilesystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilesystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).UpdateFilesystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.vast.FilesystemService/UpdateFilesystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).UpdateFilesystem(ctx, req.(*UpdateFilesystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_DeleteFilesystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilesystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).DeleteFilesystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intel.storagecontroller.v1.vast.FilesystemService/DeleteFilesystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).DeleteFilesystem(ctx, req.(*DeleteFilesystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilesystemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intel.storagecontroller.v1.vast.FilesystemService",
	HandlerType: (*FilesystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFilesystems",
			Handler:    _FilesystemService_ListFilesystems_Handler,
		},
		{
			MethodName: "GetFilesystem",
			Handler:    _FilesystemService_GetFilesystem_Handler,
		},
		{
			MethodName: "CreateFilesystem",
			Handler:    _FilesystemService_CreateFilesystem_Handler,
		},
		{
			MethodName: "UpdateFilesystem",
			Handler:    _FilesystemService_UpdateFilesystem_Handler,
		},
		{
			MethodName: "DeleteFilesystem",
			Handler:    _FilesystemService_DeleteFilesystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/pkg/storage/storagecontroller/api/vast/filesystem.proto",
}
