// Code generated by MockGen. DO NOT EDIT.
// Source: /home/aaronxia/go/src/frameworks.cloud.devcloud.services.idc/go/pkg/storage/storagecontroller/api/vast/filesystem.pb.go

// Package vastmocks is a generated GoMock package.
package vastmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vast "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/storage/storagecontroller/api/vast"
	grpc "google.golang.org/grpc"
)

// MockFilesystemServiceClient is a mock of FilesystemServiceClient interface.
type MockFilesystemServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemServiceClientMockRecorder
}

// MockFilesystemServiceClientMockRecorder is the mock recorder for MockFilesystemServiceClient.
type MockFilesystemServiceClientMockRecorder struct {
	mock *MockFilesystemServiceClient
}

// NewMockFilesystemServiceClient creates a new mock instance.
func NewMockFilesystemServiceClient(ctrl *gomock.Controller) *MockFilesystemServiceClient {
	mock := &MockFilesystemServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemServiceClient) EXPECT() *MockFilesystemServiceClientMockRecorder {
	return m.recorder
}

// CreateFilesystem mocks base method.
func (m *MockFilesystemServiceClient) CreateFilesystem(ctx context.Context, in *vast.CreateFilesystemRequest, opts ...grpc.CallOption) (*vast.CreateFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFilesystem", varargs...)
	ret0, _ := ret[0].(*vast.CreateFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilesystem indicates an expected call of CreateFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) CreateFilesystem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).CreateFilesystem), varargs...)
}

// DeleteFilesystem mocks base method.
func (m *MockFilesystemServiceClient) DeleteFilesystem(ctx context.Context, in *vast.DeleteFilesystemRequest, opts ...grpc.CallOption) (*vast.DeleteFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFilesystem", varargs...)
	ret0, _ := ret[0].(*vast.DeleteFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilesystem indicates an expected call of DeleteFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) DeleteFilesystem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).DeleteFilesystem), varargs...)
}

// GetFilesystem mocks base method.
func (m *MockFilesystemServiceClient) GetFilesystem(ctx context.Context, in *vast.GetFilesystemRequest, opts ...grpc.CallOption) (*vast.GetFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilesystem", varargs...)
	ret0, _ := ret[0].(*vast.GetFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystem indicates an expected call of GetFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) GetFilesystem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).GetFilesystem), varargs...)
}

// ListFilesystems mocks base method.
func (m *MockFilesystemServiceClient) ListFilesystems(ctx context.Context, in *vast.ListFilesystemsRequest, opts ...grpc.CallOption) (*vast.ListFilesystemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFilesystems", varargs...)
	ret0, _ := ret[0].(*vast.ListFilesystemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystems indicates an expected call of ListFilesystems.
func (mr *MockFilesystemServiceClientMockRecorder) ListFilesystems(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystems", reflect.TypeOf((*MockFilesystemServiceClient)(nil).ListFilesystems), varargs...)
}

// UpdateFilesystem mocks base method.
func (m *MockFilesystemServiceClient) UpdateFilesystem(ctx context.Context, in *vast.UpdateFilesystemRequest, opts ...grpc.CallOption) (*vast.UpdateFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFilesystem", varargs...)
	ret0, _ := ret[0].(*vast.UpdateFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilesystem indicates an expected call of UpdateFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) UpdateFilesystem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).UpdateFilesystem), varargs...)
}

// MockFilesystemServiceServer is a mock of FilesystemServiceServer interface.
type MockFilesystemServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemServiceServerMockRecorder
}

// MockFilesystemServiceServerMockRecorder is the mock recorder for MockFilesystemServiceServer.
type MockFilesystemServiceServerMockRecorder struct {
	mock *MockFilesystemServiceServer
}

// NewMockFilesystemServiceServer creates a new mock instance.
func NewMockFilesystemServiceServer(ctrl *gomock.Controller) *MockFilesystemServiceServer {
	mock := &MockFilesystemServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemServiceServer) EXPECT() *MockFilesystemServiceServerMockRecorder {
	return m.recorder
}

// CreateFilesystem mocks base method.
func (m *MockFilesystemServiceServer) CreateFilesystem(arg0 context.Context, arg1 *vast.CreateFilesystemRequest) (*vast.CreateFilesystemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilesystem", arg0, arg1)
	ret0, _ := ret[0].(*vast.CreateFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilesystem indicates an expected call of CreateFilesystem.
func (mr *MockFilesystemServiceServerMockRecorder) CreateFilesystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilesystem", reflect.TypeOf((*MockFilesystemServiceServer)(nil).CreateFilesystem), arg0, arg1)
}

// DeleteFilesystem mocks base method.
func (m *MockFilesystemServiceServer) DeleteFilesystem(arg0 context.Context, arg1 *vast.DeleteFilesystemRequest) (*vast.DeleteFilesystemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesystem", arg0, arg1)
	ret0, _ := ret[0].(*vast.DeleteFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilesystem indicates an expected call of DeleteFilesystem.
func (mr *MockFilesystemServiceServerMockRecorder) DeleteFilesystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystem", reflect.TypeOf((*MockFilesystemServiceServer)(nil).DeleteFilesystem), arg0, arg1)
}

// GetFilesystem mocks base method.
func (m *MockFilesystemServiceServer) GetFilesystem(arg0 context.Context, arg1 *vast.GetFilesystemRequest) (*vast.GetFilesystemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystem", arg0, arg1)
	ret0, _ := ret[0].(*vast.GetFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystem indicates an expected call of GetFilesystem.
func (mr *MockFilesystemServiceServerMockRecorder) GetFilesystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystem", reflect.TypeOf((*MockFilesystemServiceServer)(nil).GetFilesystem), arg0, arg1)
}

// ListFilesystems mocks base method.
func (m *MockFilesystemServiceServer) ListFilesystems(arg0 context.Context, arg1 *vast.ListFilesystemsRequest) (*vast.ListFilesystemsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesystems", arg0, arg1)
	ret0, _ := ret[0].(*vast.ListFilesystemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystems indicates an expected call of ListFilesystems.
func (mr *MockFilesystemServiceServerMockRecorder) ListFilesystems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystems", reflect.TypeOf((*MockFilesystemServiceServer)(nil).ListFilesystems), arg0, arg1)
}

// UpdateFilesystem mocks base method.
func (m *MockFilesystemServiceServer) UpdateFilesystem(arg0 context.Context, arg1 *vast.UpdateFilesystemRequest) (*vast.UpdateFilesystemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilesystem", arg0, arg1)
	ret0, _ := ret[0].(*vast.UpdateFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilesystem indicates an expected call of UpdateFilesystem.
func (mr *MockFilesystemServiceServerMockRecorder) UpdateFilesystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilesystem", reflect.TypeOf((*MockFilesystemServiceServer)(nil).UpdateFilesystem), arg0, arg1)
}
