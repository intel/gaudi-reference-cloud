// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/storage/storagecontroller/api/weka (interfaces: FilesystemServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	weka "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/storage/storagecontroller/api/weka"
	grpc "google.golang.org/grpc"
)

// MockFilesystemServiceClient is a mock of FilesystemServiceClient interface.
type MockFilesystemServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemServiceClientMockRecorder
}

// MockFilesystemServiceClientMockRecorder is the mock recorder for MockFilesystemServiceClient.
type MockFilesystemServiceClientMockRecorder struct {
	mock *MockFilesystemServiceClient
}

// NewMockFilesystemServiceClient creates a new mock instance.
func NewMockFilesystemServiceClient(ctrl *gomock.Controller) *MockFilesystemServiceClient {
	mock := &MockFilesystemServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemServiceClient) EXPECT() *MockFilesystemServiceClientMockRecorder {
	return m.recorder
}

// CreateFilesystem mocks base method.
func (m *MockFilesystemServiceClient) CreateFilesystem(arg0 context.Context, arg1 *weka.CreateFilesystemRequest, arg2 ...grpc.CallOption) (*weka.CreateFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFilesystem", varargs...)
	ret0, _ := ret[0].(*weka.CreateFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilesystem indicates an expected call of CreateFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) CreateFilesystem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).CreateFilesystem), varargs...)
}

// DeleteFilesystem mocks base method.
func (m *MockFilesystemServiceClient) DeleteFilesystem(arg0 context.Context, arg1 *weka.DeleteFilesystemRequest, arg2 ...grpc.CallOption) (*weka.DeleteFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFilesystem", varargs...)
	ret0, _ := ret[0].(*weka.DeleteFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilesystem indicates an expected call of DeleteFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) DeleteFilesystem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).DeleteFilesystem), varargs...)
}

// GetFilesystem mocks base method.
func (m *MockFilesystemServiceClient) GetFilesystem(arg0 context.Context, arg1 *weka.GetFilesystemRequest, arg2 ...grpc.CallOption) (*weka.GetFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilesystem", varargs...)
	ret0, _ := ret[0].(*weka.GetFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystem indicates an expected call of GetFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) GetFilesystem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).GetFilesystem), varargs...)
}

// ListFilesystems mocks base method.
func (m *MockFilesystemServiceClient) ListFilesystems(arg0 context.Context, arg1 *weka.ListFilesystemsRequest, arg2 ...grpc.CallOption) (*weka.ListFilesystemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFilesystems", varargs...)
	ret0, _ := ret[0].(*weka.ListFilesystemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystems indicates an expected call of ListFilesystems.
func (mr *MockFilesystemServiceClientMockRecorder) ListFilesystems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystems", reflect.TypeOf((*MockFilesystemServiceClient)(nil).ListFilesystems), varargs...)
}

// UpdateFilesystem mocks base method.
func (m *MockFilesystemServiceClient) UpdateFilesystem(arg0 context.Context, arg1 *weka.UpdateFilesystemRequest, arg2 ...grpc.CallOption) (*weka.UpdateFilesystemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFilesystem", varargs...)
	ret0, _ := ret[0].(*weka.UpdateFilesystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilesystem indicates an expected call of UpdateFilesystem.
func (mr *MockFilesystemServiceClientMockRecorder) UpdateFilesystem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilesystem", reflect.TypeOf((*MockFilesystemServiceClient)(nil).UpdateFilesystem), varargs...)
}
