// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/storage/storagecontroller/api (interfaces: S3ServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/storage/storagecontroller/api"
	grpc "google.golang.org/grpc"
)

// MockS3ServiceClient is a mock of S3ServiceClient interface.
type MockS3ServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockS3ServiceClientMockRecorder
}

// MockS3ServiceClientMockRecorder is the mock recorder for MockS3ServiceClient.
type MockS3ServiceClientMockRecorder struct {
	mock *MockS3ServiceClient
}

// NewMockS3ServiceClient creates a new mock instance.
func NewMockS3ServiceClient(ctrl *gomock.Controller) *MockS3ServiceClient {
	mock := &MockS3ServiceClient{ctrl: ctrl}
	mock.recorder = &MockS3ServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3ServiceClient) EXPECT() *MockS3ServiceClientMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method.
func (m *MockS3ServiceClient) CreateBucket(arg0 context.Context, arg1 *api.CreateBucketRequest, arg2 ...grpc.CallOption) (*api.CreateBucketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucket", varargs...)
	ret0, _ := ret[0].(*api.CreateBucketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockS3ServiceClientMockRecorder) CreateBucket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockS3ServiceClient)(nil).CreateBucket), varargs...)
}

// CreateLifecycleRules mocks base method.
func (m *MockS3ServiceClient) CreateLifecycleRules(arg0 context.Context, arg1 *api.CreateLifecycleRulesRequest, arg2 ...grpc.CallOption) (*api.CreateLifecycleRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLifecycleRules", varargs...)
	ret0, _ := ret[0].(*api.CreateLifecycleRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLifecycleRules indicates an expected call of CreateLifecycleRules.
func (mr *MockS3ServiceClientMockRecorder) CreateLifecycleRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLifecycleRules", reflect.TypeOf((*MockS3ServiceClient)(nil).CreateLifecycleRules), varargs...)
}

// CreateS3Principal mocks base method.
func (m *MockS3ServiceClient) CreateS3Principal(arg0 context.Context, arg1 *api.CreateS3PrincipalRequest, arg2 ...grpc.CallOption) (*api.CreateS3PrincipalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateS3Principal", varargs...)
	ret0, _ := ret[0].(*api.CreateS3PrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateS3Principal indicates an expected call of CreateS3Principal.
func (mr *MockS3ServiceClientMockRecorder) CreateS3Principal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateS3Principal", reflect.TypeOf((*MockS3ServiceClient)(nil).CreateS3Principal), varargs...)
}

// DeleteBucket mocks base method.
func (m *MockS3ServiceClient) DeleteBucket(arg0 context.Context, arg1 *api.DeleteBucketRequest, arg2 ...grpc.CallOption) (*api.DeleteBucketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucket", varargs...)
	ret0, _ := ret[0].(*api.DeleteBucketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockS3ServiceClientMockRecorder) DeleteBucket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockS3ServiceClient)(nil).DeleteBucket), varargs...)
}

// DeleteLifecycleRules mocks base method.
func (m *MockS3ServiceClient) DeleteLifecycleRules(arg0 context.Context, arg1 *api.DeleteLifecycleRulesRequest, arg2 ...grpc.CallOption) (*api.DeleteLifecycleRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLifecycleRules", varargs...)
	ret0, _ := ret[0].(*api.DeleteLifecycleRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLifecycleRules indicates an expected call of DeleteLifecycleRules.
func (mr *MockS3ServiceClientMockRecorder) DeleteLifecycleRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifecycleRules", reflect.TypeOf((*MockS3ServiceClient)(nil).DeleteLifecycleRules), varargs...)
}

// DeleteS3Principal mocks base method.
func (m *MockS3ServiceClient) DeleteS3Principal(arg0 context.Context, arg1 *api.DeleteS3PrincipalRequest, arg2 ...grpc.CallOption) (*api.DeleteS3PrincipalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteS3Principal", varargs...)
	ret0, _ := ret[0].(*api.DeleteS3PrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteS3Principal indicates an expected call of DeleteS3Principal.
func (mr *MockS3ServiceClientMockRecorder) DeleteS3Principal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteS3Principal", reflect.TypeOf((*MockS3ServiceClient)(nil).DeleteS3Principal), varargs...)
}

// GetBucketPolicy mocks base method.
func (m *MockS3ServiceClient) GetBucketPolicy(arg0 context.Context, arg1 *api.GetBucketPolicyRequest, arg2 ...grpc.CallOption) (*api.GetBucketPolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketPolicy", varargs...)
	ret0, _ := ret[0].(*api.GetBucketPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPolicy indicates an expected call of GetBucketPolicy.
func (mr *MockS3ServiceClientMockRecorder) GetBucketPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPolicy", reflect.TypeOf((*MockS3ServiceClient)(nil).GetBucketPolicy), varargs...)
}

// GetS3Principal mocks base method.
func (m *MockS3ServiceClient) GetS3Principal(arg0 context.Context, arg1 *api.GetS3PrincipalRequest, arg2 ...grpc.CallOption) (*api.GetS3PrincipalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetS3Principal", varargs...)
	ret0, _ := ret[0].(*api.GetS3PrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetS3Principal indicates an expected call of GetS3Principal.
func (mr *MockS3ServiceClientMockRecorder) GetS3Principal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3Principal", reflect.TypeOf((*MockS3ServiceClient)(nil).GetS3Principal), varargs...)
}

// ListBuckets mocks base method.
func (m *MockS3ServiceClient) ListBuckets(arg0 context.Context, arg1 *api.ListBucketsRequest, arg2 ...grpc.CallOption) (*api.ListBucketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuckets", varargs...)
	ret0, _ := ret[0].(*api.ListBucketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockS3ServiceClientMockRecorder) ListBuckets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockS3ServiceClient)(nil).ListBuckets), varargs...)
}

// ListLifecycleRules mocks base method.
func (m *MockS3ServiceClient) ListLifecycleRules(arg0 context.Context, arg1 *api.ListLifecycleRulesRequest, arg2 ...grpc.CallOption) (*api.ListLifecycleRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLifecycleRules", varargs...)
	ret0, _ := ret[0].(*api.ListLifecycleRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLifecycleRules indicates an expected call of ListLifecycleRules.
func (mr *MockS3ServiceClientMockRecorder) ListLifecycleRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLifecycleRules", reflect.TypeOf((*MockS3ServiceClient)(nil).ListLifecycleRules), varargs...)
}

// SetS3PrincipalCredentials mocks base method.
func (m *MockS3ServiceClient) SetS3PrincipalCredentials(arg0 context.Context, arg1 *api.SetS3PrincipalCredentialsRequest, arg2 ...grpc.CallOption) (*api.SetS3PrincipalCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetS3PrincipalCredentials", varargs...)
	ret0, _ := ret[0].(*api.SetS3PrincipalCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetS3PrincipalCredentials indicates an expected call of SetS3PrincipalCredentials.
func (mr *MockS3ServiceClientMockRecorder) SetS3PrincipalCredentials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetS3PrincipalCredentials", reflect.TypeOf((*MockS3ServiceClient)(nil).SetS3PrincipalCredentials), varargs...)
}

// UpdateBucketPolicy mocks base method.
func (m *MockS3ServiceClient) UpdateBucketPolicy(arg0 context.Context, arg1 *api.UpdateBucketPolicyRequest, arg2 ...grpc.CallOption) (*api.UpdateBucketPolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBucketPolicy", varargs...)
	ret0, _ := ret[0].(*api.UpdateBucketPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketPolicy indicates an expected call of UpdateBucketPolicy.
func (mr *MockS3ServiceClientMockRecorder) UpdateBucketPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketPolicy", reflect.TypeOf((*MockS3ServiceClient)(nil).UpdateBucketPolicy), varargs...)
}

// UpdateLifecycleRules mocks base method.
func (m *MockS3ServiceClient) UpdateLifecycleRules(arg0 context.Context, arg1 *api.UpdateLifecycleRulesRequest, arg2 ...grpc.CallOption) (*api.UpdateLifecycleRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLifecycleRules", varargs...)
	ret0, _ := ret[0].(*api.UpdateLifecycleRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLifecycleRules indicates an expected call of UpdateLifecycleRules.
func (mr *MockS3ServiceClientMockRecorder) UpdateLifecycleRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLifecycleRules", reflect.TypeOf((*MockS3ServiceClient)(nil).UpdateLifecycleRules), varargs...)
}

// UpdateS3PrincipalPolicies mocks base method.
func (m *MockS3ServiceClient) UpdateS3PrincipalPolicies(arg0 context.Context, arg1 *api.UpdateS3PrincipalPoliciesRequest, arg2 ...grpc.CallOption) (*api.UpdateS3PrincipalPoliciesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateS3PrincipalPolicies", varargs...)
	ret0, _ := ret[0].(*api.UpdateS3PrincipalPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateS3PrincipalPolicies indicates an expected call of UpdateS3PrincipalPolicies.
func (mr *MockS3ServiceClientMockRecorder) UpdateS3PrincipalPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateS3PrincipalPolicies", reflect.TypeOf((*MockS3ServiceClient)(nil).UpdateS3PrincipalPolicies), varargs...)
}
