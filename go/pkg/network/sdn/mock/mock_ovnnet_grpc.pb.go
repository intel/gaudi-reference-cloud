// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/network/sdn/ovnnet_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/network/sdn"
	grpc "google.golang.org/grpc"
)

// MockOvnnetClient is a mock of OvnnetClient interface.
type MockOvnnetClient struct {
	ctrl     *gomock.Controller
	recorder *MockOvnnetClientMockRecorder
}

// MockOvnnetClientMockRecorder is the mock recorder for MockOvnnetClient.
type MockOvnnetClientMockRecorder struct {
	mock *MockOvnnetClient
}

// NewMockOvnnetClient creates a new mock instance.
func NewMockOvnnetClient(ctrl *gomock.Controller) *MockOvnnetClient {
	mock := &MockOvnnetClient{ctrl: ctrl}
	mock.recorder = &MockOvnnetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvnnetClient) EXPECT() *MockOvnnetClientMockRecorder {
	return m.recorder
}

// CreatePort mocks base method.
func (m *MockOvnnetClient) CreatePort(ctx context.Context, in *v1.CreatePortRequest, opts ...grpc.CallOption) (*v1.CreatePortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePort", varargs...)
	ret0, _ := ret[0].(*v1.CreatePortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePort indicates an expected call of CreatePort.
func (mr *MockOvnnetClientMockRecorder) CreatePort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePort", reflect.TypeOf((*MockOvnnetClient)(nil).CreatePort), varargs...)
}

// CreateRouter mocks base method.
func (m *MockOvnnetClient) CreateRouter(ctx context.Context, in *v1.CreateRouterRequest, opts ...grpc.CallOption) (*v1.CreateRouterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouter", varargs...)
	ret0, _ := ret[0].(*v1.CreateRouterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter.
func (mr *MockOvnnetClientMockRecorder) CreateRouter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockOvnnetClient)(nil).CreateRouter), varargs...)
}

// CreateRouterInterface mocks base method.
func (m *MockOvnnetClient) CreateRouterInterface(ctx context.Context, in *v1.CreateRouterInterfaceRequest, opts ...grpc.CallOption) (*v1.CreateRouterInterfaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouterInterface", varargs...)
	ret0, _ := ret[0].(*v1.CreateRouterInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouterInterface indicates an expected call of CreateRouterInterface.
func (mr *MockOvnnetClientMockRecorder) CreateRouterInterface(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouterInterface", reflect.TypeOf((*MockOvnnetClient)(nil).CreateRouterInterface), varargs...)
}

// CreateSecurityGroup mocks base method.
func (m *MockOvnnetClient) CreateSecurityGroup(ctx context.Context, in *v1.CreateSecurityGroupRequest, opts ...grpc.CallOption) (*v1.CreateSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityGroup", varargs...)
	ret0, _ := ret[0].(*v1.CreateSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockOvnnetClientMockRecorder) CreateSecurityGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockOvnnetClient)(nil).CreateSecurityGroup), varargs...)
}

// CreateSecurityRule mocks base method.
func (m *MockOvnnetClient) CreateSecurityRule(ctx context.Context, in *v1.CreateSecurityRuleRequest, opts ...grpc.CallOption) (*v1.CreateSecurityRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityRule", varargs...)
	ret0, _ := ret[0].(*v1.CreateSecurityRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityRule indicates an expected call of CreateSecurityRule.
func (mr *MockOvnnetClientMockRecorder) CreateSecurityRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityRule", reflect.TypeOf((*MockOvnnetClient)(nil).CreateSecurityRule), varargs...)
}

// CreateStaticRoute mocks base method.
func (m *MockOvnnetClient) CreateStaticRoute(ctx context.Context, in *v1.CreateStaticRouteRequest, opts ...grpc.CallOption) (*v1.CreateStaticRouteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStaticRoute", varargs...)
	ret0, _ := ret[0].(*v1.CreateStaticRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStaticRoute indicates an expected call of CreateStaticRoute.
func (mr *MockOvnnetClientMockRecorder) CreateStaticRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaticRoute", reflect.TypeOf((*MockOvnnetClient)(nil).CreateStaticRoute), varargs...)
}

// CreateSubnet mocks base method.
func (m *MockOvnnetClient) CreateSubnet(ctx context.Context, in *v1.CreateSubnetRequest, opts ...grpc.CallOption) (*v1.CreateSubnetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubnet", varargs...)
	ret0, _ := ret[0].(*v1.CreateSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockOvnnetClientMockRecorder) CreateSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockOvnnetClient)(nil).CreateSubnet), varargs...)
}

// CreateVPC mocks base method.
func (m *MockOvnnetClient) CreateVPC(ctx context.Context, in *v1.CreateVPCRequest, opts ...grpc.CallOption) (*v1.CreateVPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVPC", varargs...)
	ret0, _ := ret[0].(*v1.CreateVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPC indicates an expected call of CreateVPC.
func (mr *MockOvnnetClientMockRecorder) CreateVPC(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPC", reflect.TypeOf((*MockOvnnetClient)(nil).CreateVPC), varargs...)
}

// DeletePort mocks base method.
func (m *MockOvnnetClient) DeletePort(ctx context.Context, in *v1.DeletePortRequest, opts ...grpc.CallOption) (*v1.DeletePortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePort", varargs...)
	ret0, _ := ret[0].(*v1.DeletePortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePort indicates an expected call of DeletePort.
func (mr *MockOvnnetClientMockRecorder) DeletePort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePort", reflect.TypeOf((*MockOvnnetClient)(nil).DeletePort), varargs...)
}

// DeleteRouter mocks base method.
func (m *MockOvnnetClient) DeleteRouter(ctx context.Context, in *v1.DeleteRouterRequest, opts ...grpc.CallOption) (*v1.DeleteRouterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouter", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRouterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockOvnnetClientMockRecorder) DeleteRouter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockOvnnetClient)(nil).DeleteRouter), varargs...)
}

// DeleteRouterInterface mocks base method.
func (m *MockOvnnetClient) DeleteRouterInterface(ctx context.Context, in *v1.DeleteRouterInterfaceRequest, opts ...grpc.CallOption) (*v1.DeleteRouterInterfaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouterInterface", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRouterInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouterInterface indicates an expected call of DeleteRouterInterface.
func (mr *MockOvnnetClientMockRecorder) DeleteRouterInterface(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouterInterface", reflect.TypeOf((*MockOvnnetClient)(nil).DeleteRouterInterface), varargs...)
}

// DeleteSecurityGroup mocks base method.
func (m *MockOvnnetClient) DeleteSecurityGroup(ctx context.Context, in *v1.DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*v1.DeleteSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", varargs...)
	ret0, _ := ret[0].(*v1.DeleteSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockOvnnetClientMockRecorder) DeleteSecurityGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockOvnnetClient)(nil).DeleteSecurityGroup), varargs...)
}

// DeleteSecurityRule mocks base method.
func (m *MockOvnnetClient) DeleteSecurityRule(ctx context.Context, in *v1.DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*v1.DeleteSecurityRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecurityRule", varargs...)
	ret0, _ := ret[0].(*v1.DeleteSecurityRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityRule indicates an expected call of DeleteSecurityRule.
func (mr *MockOvnnetClientMockRecorder) DeleteSecurityRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityRule", reflect.TypeOf((*MockOvnnetClient)(nil).DeleteSecurityRule), varargs...)
}

// DeleteStaticRoute mocks base method.
func (m *MockOvnnetClient) DeleteStaticRoute(ctx context.Context, in *v1.DeleteStaticRouteRequest, opts ...grpc.CallOption) (*v1.DeleteStaticRouteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStaticRoute", varargs...)
	ret0, _ := ret[0].(*v1.DeleteStaticRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStaticRoute indicates an expected call of DeleteStaticRoute.
func (mr *MockOvnnetClientMockRecorder) DeleteStaticRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaticRoute", reflect.TypeOf((*MockOvnnetClient)(nil).DeleteStaticRoute), varargs...)
}

// DeleteSubnet mocks base method.
func (m *MockOvnnetClient) DeleteSubnet(ctx context.Context, in *v1.DeleteSubnetRequest, opts ...grpc.CallOption) (*v1.DeleteSubnetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubnet", varargs...)
	ret0, _ := ret[0].(*v1.DeleteSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockOvnnetClientMockRecorder) DeleteSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockOvnnetClient)(nil).DeleteSubnet), varargs...)
}

// DeleteVPC mocks base method.
func (m *MockOvnnetClient) DeleteVPC(ctx context.Context, in *v1.DeleteVPCRequest, opts ...grpc.CallOption) (*v1.DeleteVPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVPC", varargs...)
	ret0, _ := ret[0].(*v1.DeleteVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPC indicates an expected call of DeleteVPC.
func (mr *MockOvnnetClientMockRecorder) DeleteVPC(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPC", reflect.TypeOf((*MockOvnnetClient)(nil).DeleteVPC), varargs...)
}

// GetPort mocks base method.
func (m *MockOvnnetClient) GetPort(ctx context.Context, in *v1.GetPortRequest, opts ...grpc.CallOption) (*v1.GetPortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPort", varargs...)
	ret0, _ := ret[0].(*v1.GetPortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort.
func (mr *MockOvnnetClientMockRecorder) GetPort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockOvnnetClient)(nil).GetPort), varargs...)
}

// GetRouter mocks base method.
func (m *MockOvnnetClient) GetRouter(ctx context.Context, in *v1.GetRouterRequest, opts ...grpc.CallOption) (*v1.GetRouterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouter", varargs...)
	ret0, _ := ret[0].(*v1.GetRouterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouter indicates an expected call of GetRouter.
func (mr *MockOvnnetClientMockRecorder) GetRouter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockOvnnetClient)(nil).GetRouter), varargs...)
}

// GetRouterInterface mocks base method.
func (m *MockOvnnetClient) GetRouterInterface(ctx context.Context, in *v1.GetRouterInterfaceRequest, opts ...grpc.CallOption) (*v1.GetRouterInterfaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouterInterface", varargs...)
	ret0, _ := ret[0].(*v1.GetRouterInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterInterface indicates an expected call of GetRouterInterface.
func (mr *MockOvnnetClientMockRecorder) GetRouterInterface(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterInterface", reflect.TypeOf((*MockOvnnetClient)(nil).GetRouterInterface), varargs...)
}

// GetSecurityGroup mocks base method.
func (m *MockOvnnetClient) GetSecurityGroup(ctx context.Context, in *v1.GetSecurityGroupRequest, opts ...grpc.CallOption) (*v1.GetSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityGroup", varargs...)
	ret0, _ := ret[0].(*v1.GetSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockOvnnetClientMockRecorder) GetSecurityGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockOvnnetClient)(nil).GetSecurityGroup), varargs...)
}

// GetSecurityRule mocks base method.
func (m *MockOvnnetClient) GetSecurityRule(ctx context.Context, in *v1.GetSecurityRuleRequest, opts ...grpc.CallOption) (*v1.GetSecurityRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityRule", varargs...)
	ret0, _ := ret[0].(*v1.GetSecurityRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityRule indicates an expected call of GetSecurityRule.
func (mr *MockOvnnetClientMockRecorder) GetSecurityRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityRule", reflect.TypeOf((*MockOvnnetClient)(nil).GetSecurityRule), varargs...)
}

// GetStaticRoute mocks base method.
func (m *MockOvnnetClient) GetStaticRoute(ctx context.Context, in *v1.GetStaticRouteRequest, opts ...grpc.CallOption) (*v1.GetStaticRouteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStaticRoute", varargs...)
	ret0, _ := ret[0].(*v1.GetStaticRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticRoute indicates an expected call of GetStaticRoute.
func (mr *MockOvnnetClientMockRecorder) GetStaticRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticRoute", reflect.TypeOf((*MockOvnnetClient)(nil).GetStaticRoute), varargs...)
}

// GetSubnet mocks base method.
func (m *MockOvnnetClient) GetSubnet(ctx context.Context, in *v1.GetSubnetRequest, opts ...grpc.CallOption) (*v1.GetSubnetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnet", varargs...)
	ret0, _ := ret[0].(*v1.GetSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockOvnnetClientMockRecorder) GetSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockOvnnetClient)(nil).GetSubnet), varargs...)
}

// GetVPC mocks base method.
func (m *MockOvnnetClient) GetVPC(ctx context.Context, in *v1.GetVPCRequest, opts ...grpc.CallOption) (*v1.GetVPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVPC", varargs...)
	ret0, _ := ret[0].(*v1.GetVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPC indicates an expected call of GetVPC.
func (mr *MockOvnnetClientMockRecorder) GetVPC(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPC", reflect.TypeOf((*MockOvnnetClient)(nil).GetVPC), varargs...)
}

// ListPorts mocks base method.
func (m *MockOvnnetClient) ListPorts(ctx context.Context, in *v1.ListPortsRequest, opts ...grpc.CallOption) (*v1.ListPortsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPorts", varargs...)
	ret0, _ := ret[0].(*v1.ListPortsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPorts indicates an expected call of ListPorts.
func (mr *MockOvnnetClientMockRecorder) ListPorts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPorts", reflect.TypeOf((*MockOvnnetClient)(nil).ListPorts), varargs...)
}

// ListRouterInterfaces mocks base method.
func (m *MockOvnnetClient) ListRouterInterfaces(ctx context.Context, in *v1.ListRouterInterfacesRequest, opts ...grpc.CallOption) (*v1.ListRouterInterfacesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouterInterfaces", varargs...)
	ret0, _ := ret[0].(*v1.ListRouterInterfacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouterInterfaces indicates an expected call of ListRouterInterfaces.
func (mr *MockOvnnetClientMockRecorder) ListRouterInterfaces(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouterInterfaces", reflect.TypeOf((*MockOvnnetClient)(nil).ListRouterInterfaces), varargs...)
}

// ListRouters mocks base method.
func (m *MockOvnnetClient) ListRouters(ctx context.Context, in *v1.ListRoutersRequest, opts ...grpc.CallOption) (*v1.ListRoutersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouters", varargs...)
	ret0, _ := ret[0].(*v1.ListRoutersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockOvnnetClientMockRecorder) ListRouters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockOvnnetClient)(nil).ListRouters), varargs...)
}

// ListSecurityGroups mocks base method.
func (m *MockOvnnetClient) ListSecurityGroups(ctx context.Context, in *v1.ListSecurityGroupsRequest, opts ...grpc.CallOption) (*v1.ListSecurityGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroups indicates an expected call of ListSecurityGroups.
func (mr *MockOvnnetClientMockRecorder) ListSecurityGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroups", reflect.TypeOf((*MockOvnnetClient)(nil).ListSecurityGroups), varargs...)
}

// ListSecurityRules mocks base method.
func (m *MockOvnnetClient) ListSecurityRules(ctx context.Context, in *v1.ListSecurityRulesRequest, opts ...grpc.CallOption) (*v1.ListSecurityRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityRules", varargs...)
	ret0, _ := ret[0].(*v1.ListSecurityRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityRules indicates an expected call of ListSecurityRules.
func (mr *MockOvnnetClientMockRecorder) ListSecurityRules(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityRules", reflect.TypeOf((*MockOvnnetClient)(nil).ListSecurityRules), varargs...)
}

// ListStaticRoutes mocks base method.
func (m *MockOvnnetClient) ListStaticRoutes(ctx context.Context, in *v1.ListStaticRoutesRequest, opts ...grpc.CallOption) (*v1.ListStaticRoutesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStaticRoutes", varargs...)
	ret0, _ := ret[0].(*v1.ListStaticRoutesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaticRoutes indicates an expected call of ListStaticRoutes.
func (mr *MockOvnnetClientMockRecorder) ListStaticRoutes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaticRoutes", reflect.TypeOf((*MockOvnnetClient)(nil).ListStaticRoutes), varargs...)
}

// ListSubnets mocks base method.
func (m *MockOvnnetClient) ListSubnets(ctx context.Context, in *v1.ListSubnetsRequest, opts ...grpc.CallOption) (*v1.ListSubnetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubnets", varargs...)
	ret0, _ := ret[0].(*v1.ListSubnetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockOvnnetClientMockRecorder) ListSubnets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockOvnnetClient)(nil).ListSubnets), varargs...)
}

// ListVPCs mocks base method.
func (m *MockOvnnetClient) ListVPCs(ctx context.Context, in *v1.ListVPCsRequest, opts ...grpc.CallOption) (*v1.ListVPCsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVPCs", varargs...)
	ret0, _ := ret[0].(*v1.ListVPCsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCs indicates an expected call of ListVPCs.
func (mr *MockOvnnetClientMockRecorder) ListVPCs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCs", reflect.TypeOf((*MockOvnnetClient)(nil).ListVPCs), varargs...)
}

// UpdatePort mocks base method.
func (m *MockOvnnetClient) UpdatePort(ctx context.Context, in *v1.UpdatePortRequest, opts ...grpc.CallOption) (*v1.UpdatePortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePort", varargs...)
	ret0, _ := ret[0].(*v1.UpdatePortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePort indicates an expected call of UpdatePort.
func (mr *MockOvnnetClientMockRecorder) UpdatePort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePort", reflect.TypeOf((*MockOvnnetClient)(nil).UpdatePort), varargs...)
}

// UpdateSecurityGroup mocks base method.
func (m *MockOvnnetClient) UpdateSecurityGroup(ctx context.Context, in *v1.UpdateSecurityGroupRequest, opts ...grpc.CallOption) (*v1.UpdateSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecurityGroup", varargs...)
	ret0, _ := ret[0].(*v1.UpdateSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityGroup indicates an expected call of UpdateSecurityGroup.
func (mr *MockOvnnetClientMockRecorder) UpdateSecurityGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroup", reflect.TypeOf((*MockOvnnetClient)(nil).UpdateSecurityGroup), varargs...)
}

// MockOvnnetServer is a mock of OvnnetServer interface.
type MockOvnnetServer struct {
	ctrl     *gomock.Controller
	recorder *MockOvnnetServerMockRecorder
}

// MockOvnnetServerMockRecorder is the mock recorder for MockOvnnetServer.
type MockOvnnetServerMockRecorder struct {
	mock *MockOvnnetServer
}

// NewMockOvnnetServer creates a new mock instance.
func NewMockOvnnetServer(ctrl *gomock.Controller) *MockOvnnetServer {
	mock := &MockOvnnetServer{ctrl: ctrl}
	mock.recorder = &MockOvnnetServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvnnetServer) EXPECT() *MockOvnnetServerMockRecorder {
	return m.recorder
}

// CreatePort mocks base method.
func (m *MockOvnnetServer) CreatePort(arg0 context.Context, arg1 *v1.CreatePortRequest) (*v1.CreatePortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePort", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreatePortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePort indicates an expected call of CreatePort.
func (mr *MockOvnnetServerMockRecorder) CreatePort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePort", reflect.TypeOf((*MockOvnnetServer)(nil).CreatePort), arg0, arg1)
}

// CreateRouter mocks base method.
func (m *MockOvnnetServer) CreateRouter(arg0 context.Context, arg1 *v1.CreateRouterRequest) (*v1.CreateRouterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouter", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateRouterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter.
func (mr *MockOvnnetServerMockRecorder) CreateRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockOvnnetServer)(nil).CreateRouter), arg0, arg1)
}

// CreateRouterInterface mocks base method.
func (m *MockOvnnetServer) CreateRouterInterface(arg0 context.Context, arg1 *v1.CreateRouterInterfaceRequest) (*v1.CreateRouterInterfaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouterInterface", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateRouterInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouterInterface indicates an expected call of CreateRouterInterface.
func (mr *MockOvnnetServerMockRecorder) CreateRouterInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouterInterface", reflect.TypeOf((*MockOvnnetServer)(nil).CreateRouterInterface), arg0, arg1)
}

// CreateSecurityGroup mocks base method.
func (m *MockOvnnetServer) CreateSecurityGroup(arg0 context.Context, arg1 *v1.CreateSecurityGroupRequest) (*v1.CreateSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockOvnnetServerMockRecorder) CreateSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockOvnnetServer)(nil).CreateSecurityGroup), arg0, arg1)
}

// CreateSecurityRule mocks base method.
func (m *MockOvnnetServer) CreateSecurityRule(arg0 context.Context, arg1 *v1.CreateSecurityRuleRequest) (*v1.CreateSecurityRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityRule", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateSecurityRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityRule indicates an expected call of CreateSecurityRule.
func (mr *MockOvnnetServerMockRecorder) CreateSecurityRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityRule", reflect.TypeOf((*MockOvnnetServer)(nil).CreateSecurityRule), arg0, arg1)
}

// CreateStaticRoute mocks base method.
func (m *MockOvnnetServer) CreateStaticRoute(arg0 context.Context, arg1 *v1.CreateStaticRouteRequest) (*v1.CreateStaticRouteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStaticRoute", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateStaticRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStaticRoute indicates an expected call of CreateStaticRoute.
func (mr *MockOvnnetServerMockRecorder) CreateStaticRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaticRoute", reflect.TypeOf((*MockOvnnetServer)(nil).CreateStaticRoute), arg0, arg1)
}

// CreateSubnet mocks base method.
func (m *MockOvnnetServer) CreateSubnet(arg0 context.Context, arg1 *v1.CreateSubnetRequest) (*v1.CreateSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockOvnnetServerMockRecorder) CreateSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockOvnnetServer)(nil).CreateSubnet), arg0, arg1)
}

// CreateVPC mocks base method.
func (m *MockOvnnetServer) CreateVPC(arg0 context.Context, arg1 *v1.CreateVPCRequest) (*v1.CreateVPCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPC", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPC indicates an expected call of CreateVPC.
func (mr *MockOvnnetServerMockRecorder) CreateVPC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPC", reflect.TypeOf((*MockOvnnetServer)(nil).CreateVPC), arg0, arg1)
}

// DeletePort mocks base method.
func (m *MockOvnnetServer) DeletePort(arg0 context.Context, arg1 *v1.DeletePortRequest) (*v1.DeletePortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePort", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeletePortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePort indicates an expected call of DeletePort.
func (mr *MockOvnnetServerMockRecorder) DeletePort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePort", reflect.TypeOf((*MockOvnnetServer)(nil).DeletePort), arg0, arg1)
}

// DeleteRouter mocks base method.
func (m *MockOvnnetServer) DeleteRouter(arg0 context.Context, arg1 *v1.DeleteRouterRequest) (*v1.DeleteRouterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRouterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockOvnnetServerMockRecorder) DeleteRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockOvnnetServer)(nil).DeleteRouter), arg0, arg1)
}

// DeleteRouterInterface mocks base method.
func (m *MockOvnnetServer) DeleteRouterInterface(arg0 context.Context, arg1 *v1.DeleteRouterInterfaceRequest) (*v1.DeleteRouterInterfaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouterInterface", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRouterInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouterInterface indicates an expected call of DeleteRouterInterface.
func (mr *MockOvnnetServerMockRecorder) DeleteRouterInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouterInterface", reflect.TypeOf((*MockOvnnetServer)(nil).DeleteRouterInterface), arg0, arg1)
}

// DeleteSecurityGroup mocks base method.
func (m *MockOvnnetServer) DeleteSecurityGroup(arg0 context.Context, arg1 *v1.DeleteSecurityGroupRequest) (*v1.DeleteSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockOvnnetServerMockRecorder) DeleteSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockOvnnetServer)(nil).DeleteSecurityGroup), arg0, arg1)
}

// DeleteSecurityRule mocks base method.
func (m *MockOvnnetServer) DeleteSecurityRule(arg0 context.Context, arg1 *v1.DeleteSecurityRuleRequest) (*v1.DeleteSecurityRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityRule", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteSecurityRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityRule indicates an expected call of DeleteSecurityRule.
func (mr *MockOvnnetServerMockRecorder) DeleteSecurityRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityRule", reflect.TypeOf((*MockOvnnetServer)(nil).DeleteSecurityRule), arg0, arg1)
}

// DeleteStaticRoute mocks base method.
func (m *MockOvnnetServer) DeleteStaticRoute(arg0 context.Context, arg1 *v1.DeleteStaticRouteRequest) (*v1.DeleteStaticRouteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaticRoute", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteStaticRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStaticRoute indicates an expected call of DeleteStaticRoute.
func (mr *MockOvnnetServerMockRecorder) DeleteStaticRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaticRoute", reflect.TypeOf((*MockOvnnetServer)(nil).DeleteStaticRoute), arg0, arg1)
}

// DeleteSubnet mocks base method.
func (m *MockOvnnetServer) DeleteSubnet(arg0 context.Context, arg1 *v1.DeleteSubnetRequest) (*v1.DeleteSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockOvnnetServerMockRecorder) DeleteSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockOvnnetServer)(nil).DeleteSubnet), arg0, arg1)
}

// DeleteVPC mocks base method.
func (m *MockOvnnetServer) DeleteVPC(arg0 context.Context, arg1 *v1.DeleteVPCRequest) (*v1.DeleteVPCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPC", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPC indicates an expected call of DeleteVPC.
func (mr *MockOvnnetServerMockRecorder) DeleteVPC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPC", reflect.TypeOf((*MockOvnnetServer)(nil).DeleteVPC), arg0, arg1)
}

// GetPort mocks base method.
func (m *MockOvnnetServer) GetPort(arg0 context.Context, arg1 *v1.GetPortRequest) (*v1.GetPortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetPortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort.
func (mr *MockOvnnetServerMockRecorder) GetPort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockOvnnetServer)(nil).GetPort), arg0, arg1)
}

// GetRouter mocks base method.
func (m *MockOvnnetServer) GetRouter(arg0 context.Context, arg1 *v1.GetRouterRequest) (*v1.GetRouterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouter", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRouterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouter indicates an expected call of GetRouter.
func (mr *MockOvnnetServerMockRecorder) GetRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockOvnnetServer)(nil).GetRouter), arg0, arg1)
}

// GetRouterInterface mocks base method.
func (m *MockOvnnetServer) GetRouterInterface(arg0 context.Context, arg1 *v1.GetRouterInterfaceRequest) (*v1.GetRouterInterfaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterInterface", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRouterInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterInterface indicates an expected call of GetRouterInterface.
func (mr *MockOvnnetServerMockRecorder) GetRouterInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterInterface", reflect.TypeOf((*MockOvnnetServer)(nil).GetRouterInterface), arg0, arg1)
}

// GetSecurityGroup mocks base method.
func (m *MockOvnnetServer) GetSecurityGroup(arg0 context.Context, arg1 *v1.GetSecurityGroupRequest) (*v1.GetSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockOvnnetServerMockRecorder) GetSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockOvnnetServer)(nil).GetSecurityGroup), arg0, arg1)
}

// GetSecurityRule mocks base method.
func (m *MockOvnnetServer) GetSecurityRule(arg0 context.Context, arg1 *v1.GetSecurityRuleRequest) (*v1.GetSecurityRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityRule", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetSecurityRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityRule indicates an expected call of GetSecurityRule.
func (mr *MockOvnnetServerMockRecorder) GetSecurityRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityRule", reflect.TypeOf((*MockOvnnetServer)(nil).GetSecurityRule), arg0, arg1)
}

// GetStaticRoute mocks base method.
func (m *MockOvnnetServer) GetStaticRoute(arg0 context.Context, arg1 *v1.GetStaticRouteRequest) (*v1.GetStaticRouteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticRoute", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetStaticRouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticRoute indicates an expected call of GetStaticRoute.
func (mr *MockOvnnetServerMockRecorder) GetStaticRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticRoute", reflect.TypeOf((*MockOvnnetServer)(nil).GetStaticRoute), arg0, arg1)
}

// GetSubnet mocks base method.
func (m *MockOvnnetServer) GetSubnet(arg0 context.Context, arg1 *v1.GetSubnetRequest) (*v1.GetSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockOvnnetServerMockRecorder) GetSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockOvnnetServer)(nil).GetSubnet), arg0, arg1)
}

// GetVPC mocks base method.
func (m *MockOvnnetServer) GetVPC(arg0 context.Context, arg1 *v1.GetVPCRequest) (*v1.GetVPCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPC", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPC indicates an expected call of GetVPC.
func (mr *MockOvnnetServerMockRecorder) GetVPC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPC", reflect.TypeOf((*MockOvnnetServer)(nil).GetVPC), arg0, arg1)
}

// ListPorts mocks base method.
func (m *MockOvnnetServer) ListPorts(arg0 context.Context, arg1 *v1.ListPortsRequest) (*v1.ListPortsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPorts", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListPortsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPorts indicates an expected call of ListPorts.
func (mr *MockOvnnetServerMockRecorder) ListPorts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPorts", reflect.TypeOf((*MockOvnnetServer)(nil).ListPorts), arg0, arg1)
}

// ListRouterInterfaces mocks base method.
func (m *MockOvnnetServer) ListRouterInterfaces(arg0 context.Context, arg1 *v1.ListRouterInterfacesRequest) (*v1.ListRouterInterfacesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouterInterfaces", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListRouterInterfacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouterInterfaces indicates an expected call of ListRouterInterfaces.
func (mr *MockOvnnetServerMockRecorder) ListRouterInterfaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouterInterfaces", reflect.TypeOf((*MockOvnnetServer)(nil).ListRouterInterfaces), arg0, arg1)
}

// ListRouters mocks base method.
func (m *MockOvnnetServer) ListRouters(arg0 context.Context, arg1 *v1.ListRoutersRequest) (*v1.ListRoutersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListRoutersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockOvnnetServerMockRecorder) ListRouters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockOvnnetServer)(nil).ListRouters), arg0, arg1)
}

// ListSecurityGroups mocks base method.
func (m *MockOvnnetServer) ListSecurityGroups(arg0 context.Context, arg1 *v1.ListSecurityGroupsRequest) (*v1.ListSecurityGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroups", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroups indicates an expected call of ListSecurityGroups.
func (mr *MockOvnnetServerMockRecorder) ListSecurityGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroups", reflect.TypeOf((*MockOvnnetServer)(nil).ListSecurityGroups), arg0, arg1)
}

// ListSecurityRules mocks base method.
func (m *MockOvnnetServer) ListSecurityRules(arg0 context.Context, arg1 *v1.ListSecurityRulesRequest) (*v1.ListSecurityRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityRules", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListSecurityRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityRules indicates an expected call of ListSecurityRules.
func (mr *MockOvnnetServerMockRecorder) ListSecurityRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityRules", reflect.TypeOf((*MockOvnnetServer)(nil).ListSecurityRules), arg0, arg1)
}

// ListStaticRoutes mocks base method.
func (m *MockOvnnetServer) ListStaticRoutes(arg0 context.Context, arg1 *v1.ListStaticRoutesRequest) (*v1.ListStaticRoutesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaticRoutes", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListStaticRoutesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaticRoutes indicates an expected call of ListStaticRoutes.
func (mr *MockOvnnetServerMockRecorder) ListStaticRoutes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaticRoutes", reflect.TypeOf((*MockOvnnetServer)(nil).ListStaticRoutes), arg0, arg1)
}

// ListSubnets mocks base method.
func (m *MockOvnnetServer) ListSubnets(arg0 context.Context, arg1 *v1.ListSubnetsRequest) (*v1.ListSubnetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnets", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListSubnetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockOvnnetServerMockRecorder) ListSubnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockOvnnetServer)(nil).ListSubnets), arg0, arg1)
}

// ListVPCs mocks base method.
func (m *MockOvnnetServer) ListVPCs(arg0 context.Context, arg1 *v1.ListVPCsRequest) (*v1.ListVPCsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPCs", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListVPCsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCs indicates an expected call of ListVPCs.
func (mr *MockOvnnetServerMockRecorder) ListVPCs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCs", reflect.TypeOf((*MockOvnnetServer)(nil).ListVPCs), arg0, arg1)
}

// UpdatePort mocks base method.
func (m *MockOvnnetServer) UpdatePort(arg0 context.Context, arg1 *v1.UpdatePortRequest) (*v1.UpdatePortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePort", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdatePortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePort indicates an expected call of UpdatePort.
func (mr *MockOvnnetServerMockRecorder) UpdatePort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePort", reflect.TypeOf((*MockOvnnetServer)(nil).UpdatePort), arg0, arg1)
}

// UpdateSecurityGroup mocks base method.
func (m *MockOvnnetServer) UpdateSecurityGroup(arg0 context.Context, arg1 *v1.UpdateSecurityGroupRequest) (*v1.UpdateSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityGroup indicates an expected call of UpdateSecurityGroup.
func (mr *MockOvnnetServerMockRecorder) UpdateSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroup", reflect.TypeOf((*MockOvnnetServer)(nil).UpdateSecurityGroup), arg0, arg1)
}

// mustEmbedUnimplementedOvnnetServer mocks base method.
func (m *MockOvnnetServer) mustEmbedUnimplementedOvnnetServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOvnnetServer")
}

// mustEmbedUnimplementedOvnnetServer indicates an expected call of mustEmbedUnimplementedOvnnetServer.
func (mr *MockOvnnetServerMockRecorder) mustEmbedUnimplementedOvnnetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOvnnetServer", reflect.TypeOf((*MockOvnnetServer)(nil).mustEmbedUnimplementedOvnnetServer))
}

// MockUnsafeOvnnetServer is a mock of UnsafeOvnnetServer interface.
type MockUnsafeOvnnetServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOvnnetServerMockRecorder
}

// MockUnsafeOvnnetServerMockRecorder is the mock recorder for MockUnsafeOvnnetServer.
type MockUnsafeOvnnetServerMockRecorder struct {
	mock *MockUnsafeOvnnetServer
}

// NewMockUnsafeOvnnetServer creates a new mock instance.
func NewMockUnsafeOvnnetServer(ctrl *gomock.Controller) *MockUnsafeOvnnetServer {
	mock := &MockUnsafeOvnnetServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOvnnetServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOvnnetServer) EXPECT() *MockUnsafeOvnnetServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOvnnetServer mocks base method.
func (m *MockUnsafeOvnnetServer) mustEmbedUnimplementedOvnnetServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOvnnetServer")
}

// mustEmbedUnimplementedOvnnetServer indicates an expected call of mustEmbedUnimplementedOvnnetServer.
func (mr *MockUnsafeOvnnetServerMockRecorder) mustEmbedUnimplementedOvnnetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOvnnetServer", reflect.TypeOf((*MockUnsafeOvnnetServer)(nil).mustEmbedUnimplementedOvnnetServer))
}
