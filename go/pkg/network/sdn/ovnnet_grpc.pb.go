// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/sdn/v1/ovnnet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OvnnetClient is the client API for Ovnnet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OvnnetClient interface {
	// Get the Ids of all the VPCs
	ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error)
	// Create a new VPC and return the ID
	CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*CreateVPCResponse, error)
	// Get details of the VPC with the given ID
	GetVPC(ctx context.Context, in *GetVPCRequest, opts ...grpc.CallOption) (*GetVPCResponse, error)
	// Delete the VPC  with the given ID
	DeleteVPC(ctx context.Context, in *DeleteVPCRequest, opts ...grpc.CallOption) (*DeleteVPCResponse, error)
	// Get the Ids of all the Subnets
	ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error)
	// Create a new Subnet and return the ID
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*CreateSubnetResponse, error)
	// Get details of a Subnet with the given ID
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error)
	// Delete the Subnet  with the given ID
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error)
	// Get the Ids of all the Routers
	ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersResponse, error)
	// Create a new Router and return the ID
	CreateRouter(ctx context.Context, in *CreateRouterRequest, opts ...grpc.CallOption) (*CreateRouterResponse, error)
	// Get details of a Router with the given ID
	GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*GetRouterResponse, error)
	// Delete the Router  with the given ID
	DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*DeleteRouterResponse, error)
	// Get the Ids of all the RouterInterfaces
	ListRouterInterfaces(ctx context.Context, in *ListRouterInterfacesRequest, opts ...grpc.CallOption) (*ListRouterInterfacesResponse, error)
	// Create a new RouterInterface and return the ID
	CreateRouterInterface(ctx context.Context, in *CreateRouterInterfaceRequest, opts ...grpc.CallOption) (*CreateRouterInterfaceResponse, error)
	// Get details of a RouterInterface with the given ID
	GetRouterInterface(ctx context.Context, in *GetRouterInterfaceRequest, opts ...grpc.CallOption) (*GetRouterInterfaceResponse, error)
	// Delete the RouterInterface  with the given ID
	DeleteRouterInterface(ctx context.Context, in *DeleteRouterInterfaceRequest, opts ...grpc.CallOption) (*DeleteRouterInterfaceResponse, error)
	// Get the Ids of all the StaticRoutes
	ListStaticRoutes(ctx context.Context, in *ListStaticRoutesRequest, opts ...grpc.CallOption) (*ListStaticRoutesResponse, error)
	// Create a new StaticRoute and return the ID
	CreateStaticRoute(ctx context.Context, in *CreateStaticRouteRequest, opts ...grpc.CallOption) (*CreateStaticRouteResponse, error)
	// Get details of a StaticRoute with the given ID
	GetStaticRoute(ctx context.Context, in *GetStaticRouteRequest, opts ...grpc.CallOption) (*GetStaticRouteResponse, error)
	// Delete the StaticRoute  with the given ID
	DeleteStaticRoute(ctx context.Context, in *DeleteStaticRouteRequest, opts ...grpc.CallOption) (*DeleteStaticRouteResponse, error)
	// Get the Ids of all the Ports
	ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error)
	// Create a new Port and return the ID
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error)
	// Get details of a Port with the given ID
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error)
	// Update the Port  with the given ID to the given attributes
	//
	// Usage :
	//
	// * Enable/Disable SNAT
	//
	// This can be done by setting the IsNAT to True or False.
	//
	// * Associate/Disassociate ElasticIP
	//
	// In order to associate or remove Elastic IP set (or clear) the external_IP_address and External_MAC attributes for the Port.
	// Caller must ensure the external IP address is available for assignment
	// Only one of SNAT or External IP can be enabled at any instant
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error)
	// Delete the Port  with the given ID
	DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*DeletePortResponse, error)
	// Get the Ids of all the SecurityGroups
	ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsRequest, opts ...grpc.CallOption) (*ListSecurityGroupsResponse, error)
	// Create a new SecurityGroup and return the ID
	CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupRequest, opts ...grpc.CallOption) (*CreateSecurityGroupResponse, error)
	// Get details of a SecurityGroup
	GetSecurityGroup(ctx context.Context, in *GetSecurityGroupRequest, opts ...grpc.CallOption) (*GetSecurityGroupResponse, error)
	// Update the SecurityGroup  with the given ID to the given attributes
	//
	// This can be used to:
	//
	// * Add or remove Security Rules from the SecurityGroup
	//
	// The list of Security Rules specified in this call should have all the Security Rules
	// that would be part of the Security Group once the update completes.
	//
	// * Add or remove Ports the SecurityGroup needs to be applied to
	//
	// The list of Ports specified in this call should have all the Ports
	// that would be part of the Security Group once the update completes.
	//
	// * Add or remove Subnets the SecurityGroup needs to be applied to
	//
	// The list of Subnets specified in this call should have all the Subnets
	// that would be part of the Security Group once the update completes.
	//
	// **Note**:
	//
	// Any change to the definition or application of a Security Group can have implications on traffic that is currently flowing through the affected ports.
	//
	// It is callerâ€™s responsibility to assess and take appropriate measures such as quiesce the port. The API will not implicitly take any such measures.
	UpdateSecurityGroup(ctx context.Context, in *UpdateSecurityGroupRequest, opts ...grpc.CallOption) (*UpdateSecurityGroupResponse, error)
	// Delete the SecurityGroup  with the given ID
	DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupResponse, error)
	// Get the Ids of all the SecurityRules
	ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error)
	// Create a new SecurityRule and return the ID
	CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*CreateSecurityRuleResponse, error)
	// Get details of a SecurityRule
	GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*GetSecurityRuleResponse, error)
	// Delete the SecurityRule  with the given ID
	DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*DeleteSecurityRuleResponse, error)
}

type ovnnetClient struct {
	cc grpc.ClientConnInterface
}

func NewOvnnetClient(cc grpc.ClientConnInterface) OvnnetClient {
	return &ovnnetClient{cc}
}

func (c *ovnnetClient) ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error) {
	out := new(ListVPCsResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListVPCs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*CreateVPCResponse, error) {
	out := new(CreateVPCResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreateVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetVPC(ctx context.Context, in *GetVPCRequest, opts ...grpc.CallOption) (*GetVPCResponse, error) {
	out := new(GetVPCResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeleteVPC(ctx context.Context, in *DeleteVPCRequest, opts ...grpc.CallOption) (*DeleteVPCResponse, error) {
	out := new(DeleteVPCResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeleteVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error) {
	out := new(ListSubnetsResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*CreateSubnetResponse, error) {
	out := new(CreateSubnetResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error) {
	out := new(GetSubnetResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error) {
	out := new(DeleteSubnetResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersResponse, error) {
	out := new(ListRoutersResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListRouters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreateRouter(ctx context.Context, in *CreateRouterRequest, opts ...grpc.CallOption) (*CreateRouterResponse, error) {
	out := new(CreateRouterResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreateRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*GetRouterResponse, error) {
	out := new(GetRouterResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*DeleteRouterResponse, error) {
	out := new(DeleteRouterResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeleteRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) ListRouterInterfaces(ctx context.Context, in *ListRouterInterfacesRequest, opts ...grpc.CallOption) (*ListRouterInterfacesResponse, error) {
	out := new(ListRouterInterfacesResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListRouterInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreateRouterInterface(ctx context.Context, in *CreateRouterInterfaceRequest, opts ...grpc.CallOption) (*CreateRouterInterfaceResponse, error) {
	out := new(CreateRouterInterfaceResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreateRouterInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetRouterInterface(ctx context.Context, in *GetRouterInterfaceRequest, opts ...grpc.CallOption) (*GetRouterInterfaceResponse, error) {
	out := new(GetRouterInterfaceResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetRouterInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeleteRouterInterface(ctx context.Context, in *DeleteRouterInterfaceRequest, opts ...grpc.CallOption) (*DeleteRouterInterfaceResponse, error) {
	out := new(DeleteRouterInterfaceResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeleteRouterInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) ListStaticRoutes(ctx context.Context, in *ListStaticRoutesRequest, opts ...grpc.CallOption) (*ListStaticRoutesResponse, error) {
	out := new(ListStaticRoutesResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListStaticRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreateStaticRoute(ctx context.Context, in *CreateStaticRouteRequest, opts ...grpc.CallOption) (*CreateStaticRouteResponse, error) {
	out := new(CreateStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreateStaticRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetStaticRoute(ctx context.Context, in *GetStaticRouteRequest, opts ...grpc.CallOption) (*GetStaticRouteResponse, error) {
	out := new(GetStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetStaticRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeleteStaticRoute(ctx context.Context, in *DeleteStaticRouteRequest, opts ...grpc.CallOption) (*DeleteStaticRouteResponse, error) {
	out := new(DeleteStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeleteStaticRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error) {
	out := new(ListPortsResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListPorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error) {
	out := new(CreatePortResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error) {
	out := new(GetPortResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error) {
	out := new(UpdatePortResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/UpdatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*DeletePortResponse, error) {
	out := new(DeletePortResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeletePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsRequest, opts ...grpc.CallOption) (*ListSecurityGroupsResponse, error) {
	out := new(ListSecurityGroupsResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListSecurityGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupRequest, opts ...grpc.CallOption) (*CreateSecurityGroupResponse, error) {
	out := new(CreateSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreateSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetSecurityGroup(ctx context.Context, in *GetSecurityGroupRequest, opts ...grpc.CallOption) (*GetSecurityGroupResponse, error) {
	out := new(GetSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) UpdateSecurityGroup(ctx context.Context, in *UpdateSecurityGroupRequest, opts ...grpc.CallOption) (*UpdateSecurityGroupResponse, error) {
	out := new(UpdateSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/UpdateSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupResponse, error) {
	out := new(DeleteSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error) {
	out := new(ListSecurityRulesResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/ListSecurityRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*CreateSecurityRuleResponse, error) {
	out := new(CreateSecurityRuleResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/CreateSecurityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*GetSecurityRuleResponse, error) {
	out := new(GetSecurityRuleResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/GetSecurityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovnnetClient) DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*DeleteSecurityRuleResponse, error) {
	out := new(DeleteSecurityRuleResponse)
	err := c.cc.Invoke(ctx, "/sdn.v1.Ovnnet/DeleteSecurityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OvnnetServer is the server API for Ovnnet service.
// All implementations must embed UnimplementedOvnnetServer
// for forward compatibility
type OvnnetServer interface {
	// Get the Ids of all the VPCs
	ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error)
	// Create a new VPC and return the ID
	CreateVPC(context.Context, *CreateVPCRequest) (*CreateVPCResponse, error)
	// Get details of the VPC with the given ID
	GetVPC(context.Context, *GetVPCRequest) (*GetVPCResponse, error)
	// Delete the VPC  with the given ID
	DeleteVPC(context.Context, *DeleteVPCRequest) (*DeleteVPCResponse, error)
	// Get the Ids of all the Subnets
	ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error)
	// Create a new Subnet and return the ID
	CreateSubnet(context.Context, *CreateSubnetRequest) (*CreateSubnetResponse, error)
	// Get details of a Subnet with the given ID
	GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error)
	// Delete the Subnet  with the given ID
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error)
	// Get the Ids of all the Routers
	ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersResponse, error)
	// Create a new Router and return the ID
	CreateRouter(context.Context, *CreateRouterRequest) (*CreateRouterResponse, error)
	// Get details of a Router with the given ID
	GetRouter(context.Context, *GetRouterRequest) (*GetRouterResponse, error)
	// Delete the Router  with the given ID
	DeleteRouter(context.Context, *DeleteRouterRequest) (*DeleteRouterResponse, error)
	// Get the Ids of all the RouterInterfaces
	ListRouterInterfaces(context.Context, *ListRouterInterfacesRequest) (*ListRouterInterfacesResponse, error)
	// Create a new RouterInterface and return the ID
	CreateRouterInterface(context.Context, *CreateRouterInterfaceRequest) (*CreateRouterInterfaceResponse, error)
	// Get details of a RouterInterface with the given ID
	GetRouterInterface(context.Context, *GetRouterInterfaceRequest) (*GetRouterInterfaceResponse, error)
	// Delete the RouterInterface  with the given ID
	DeleteRouterInterface(context.Context, *DeleteRouterInterfaceRequest) (*DeleteRouterInterfaceResponse, error)
	// Get the Ids of all the StaticRoutes
	ListStaticRoutes(context.Context, *ListStaticRoutesRequest) (*ListStaticRoutesResponse, error)
	// Create a new StaticRoute and return the ID
	CreateStaticRoute(context.Context, *CreateStaticRouteRequest) (*CreateStaticRouteResponse, error)
	// Get details of a StaticRoute with the given ID
	GetStaticRoute(context.Context, *GetStaticRouteRequest) (*GetStaticRouteResponse, error)
	// Delete the StaticRoute  with the given ID
	DeleteStaticRoute(context.Context, *DeleteStaticRouteRequest) (*DeleteStaticRouteResponse, error)
	// Get the Ids of all the Ports
	ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error)
	// Create a new Port and return the ID
	CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error)
	// Get details of a Port with the given ID
	GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error)
	// Update the Port  with the given ID to the given attributes
	//
	// Usage :
	//
	// * Enable/Disable SNAT
	//
	// This can be done by setting the IsNAT to True or False.
	//
	// * Associate/Disassociate ElasticIP
	//
	// In order to associate or remove Elastic IP set (or clear) the external_IP_address and External_MAC attributes for the Port.
	// Caller must ensure the external IP address is available for assignment
	// Only one of SNAT or External IP can be enabled at any instant
	UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error)
	// Delete the Port  with the given ID
	DeletePort(context.Context, *DeletePortRequest) (*DeletePortResponse, error)
	// Get the Ids of all the SecurityGroups
	ListSecurityGroups(context.Context, *ListSecurityGroupsRequest) (*ListSecurityGroupsResponse, error)
	// Create a new SecurityGroup and return the ID
	CreateSecurityGroup(context.Context, *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error)
	// Get details of a SecurityGroup
	GetSecurityGroup(context.Context, *GetSecurityGroupRequest) (*GetSecurityGroupResponse, error)
	// Update the SecurityGroup  with the given ID to the given attributes
	//
	// This can be used to:
	//
	// * Add or remove Security Rules from the SecurityGroup
	//
	// The list of Security Rules specified in this call should have all the Security Rules
	// that would be part of the Security Group once the update completes.
	//
	// * Add or remove Ports the SecurityGroup needs to be applied to
	//
	// The list of Ports specified in this call should have all the Ports
	// that would be part of the Security Group once the update completes.
	//
	// * Add or remove Subnets the SecurityGroup needs to be applied to
	//
	// The list of Subnets specified in this call should have all the Subnets
	// that would be part of the Security Group once the update completes.
	//
	// **Note**:
	//
	// Any change to the definition or application of a Security Group can have implications on traffic that is currently flowing through the affected ports.
	//
	// It is callerâ€™s responsibility to assess and take appropriate measures such as quiesce the port. The API will not implicitly take any such measures.
	UpdateSecurityGroup(context.Context, *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error)
	// Delete the SecurityGroup  with the given ID
	DeleteSecurityGroup(context.Context, *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error)
	// Get the Ids of all the SecurityRules
	ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error)
	// Create a new SecurityRule and return the ID
	CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*CreateSecurityRuleResponse, error)
	// Get details of a SecurityRule
	GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*GetSecurityRuleResponse, error)
	// Delete the SecurityRule  with the given ID
	DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*DeleteSecurityRuleResponse, error)
	mustEmbedUnimplementedOvnnetServer()
}

// UnimplementedOvnnetServer must be embedded to have forward compatible implementations.
type UnimplementedOvnnetServer struct {
}

func (UnimplementedOvnnetServer) ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCs not implemented")
}
func (UnimplementedOvnnetServer) CreateVPC(context.Context, *CreateVPCRequest) (*CreateVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPC not implemented")
}
func (UnimplementedOvnnetServer) GetVPC(context.Context, *GetVPCRequest) (*GetVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPC not implemented")
}
func (UnimplementedOvnnetServer) DeleteVPC(context.Context, *DeleteVPCRequest) (*DeleteVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPC not implemented")
}
func (UnimplementedOvnnetServer) ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedOvnnetServer) CreateSubnet(context.Context, *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedOvnnetServer) GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (UnimplementedOvnnetServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedOvnnetServer) ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouters not implemented")
}
func (UnimplementedOvnnetServer) CreateRouter(context.Context, *CreateRouterRequest) (*CreateRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouter not implemented")
}
func (UnimplementedOvnnetServer) GetRouter(context.Context, *GetRouterRequest) (*GetRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}
func (UnimplementedOvnnetServer) DeleteRouter(context.Context, *DeleteRouterRequest) (*DeleteRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouter not implemented")
}
func (UnimplementedOvnnetServer) ListRouterInterfaces(context.Context, *ListRouterInterfacesRequest) (*ListRouterInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouterInterfaces not implemented")
}
func (UnimplementedOvnnetServer) CreateRouterInterface(context.Context, *CreateRouterInterfaceRequest) (*CreateRouterInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouterInterface not implemented")
}
func (UnimplementedOvnnetServer) GetRouterInterface(context.Context, *GetRouterInterfaceRequest) (*GetRouterInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouterInterface not implemented")
}
func (UnimplementedOvnnetServer) DeleteRouterInterface(context.Context, *DeleteRouterInterfaceRequest) (*DeleteRouterInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouterInterface not implemented")
}
func (UnimplementedOvnnetServer) ListStaticRoutes(context.Context, *ListStaticRoutesRequest) (*ListStaticRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaticRoutes not implemented")
}
func (UnimplementedOvnnetServer) CreateStaticRoute(context.Context, *CreateStaticRouteRequest) (*CreateStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticRoute not implemented")
}
func (UnimplementedOvnnetServer) GetStaticRoute(context.Context, *GetStaticRouteRequest) (*GetStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaticRoute not implemented")
}
func (UnimplementedOvnnetServer) DeleteStaticRoute(context.Context, *DeleteStaticRouteRequest) (*DeleteStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaticRoute not implemented")
}
func (UnimplementedOvnnetServer) ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorts not implemented")
}
func (UnimplementedOvnnetServer) CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedOvnnetServer) GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedOvnnetServer) UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedOvnnetServer) DeletePort(context.Context, *DeletePortRequest) (*DeletePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (UnimplementedOvnnetServer) ListSecurityGroups(context.Context, *ListSecurityGroupsRequest) (*ListSecurityGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityGroups not implemented")
}
func (UnimplementedOvnnetServer) CreateSecurityGroup(context.Context, *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityGroup not implemented")
}
func (UnimplementedOvnnetServer) GetSecurityGroup(context.Context, *GetSecurityGroupRequest) (*GetSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityGroup not implemented")
}
func (UnimplementedOvnnetServer) UpdateSecurityGroup(context.Context, *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityGroup not implemented")
}
func (UnimplementedOvnnetServer) DeleteSecurityGroup(context.Context, *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (UnimplementedOvnnetServer) ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityRules not implemented")
}
func (UnimplementedOvnnetServer) CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*CreateSecurityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityRule not implemented")
}
func (UnimplementedOvnnetServer) GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*GetSecurityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityRule not implemented")
}
func (UnimplementedOvnnetServer) DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*DeleteSecurityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityRule not implemented")
}
func (UnimplementedOvnnetServer) mustEmbedUnimplementedOvnnetServer() {}

// UnsafeOvnnetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OvnnetServer will
// result in compilation errors.
type UnsafeOvnnetServer interface {
	mustEmbedUnimplementedOvnnetServer()
}

func RegisterOvnnetServer(s grpc.ServiceRegistrar, srv OvnnetServer) {
	s.RegisterService(&Ovnnet_ServiceDesc, srv)
}

func _Ovnnet_ListVPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListVPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListVPCs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListVPCs(ctx, req.(*ListVPCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreateVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreateVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreateVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreateVPC(ctx, req.(*CreateVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetVPC(ctx, req.(*GetVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeleteVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeleteVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeleteVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeleteVPC(ctx, req.(*DeleteVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListSubnets(ctx, req.(*ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_ListRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListRouters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListRouters(ctx, req.(*ListRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreateRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreateRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreateRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreateRouter(ctx, req.(*CreateRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetRouter(ctx, req.(*GetRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeleteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeleteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeleteRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeleteRouter(ctx, req.(*DeleteRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_ListRouterInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouterInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListRouterInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListRouterInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListRouterInterfaces(ctx, req.(*ListRouterInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreateRouterInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouterInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreateRouterInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreateRouterInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreateRouterInterface(ctx, req.(*CreateRouterInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetRouterInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetRouterInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetRouterInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetRouterInterface(ctx, req.(*GetRouterInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeleteRouterInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouterInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeleteRouterInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeleteRouterInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeleteRouterInterface(ctx, req.(*DeleteRouterInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_ListStaticRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaticRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListStaticRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListStaticRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListStaticRoutes(ctx, req.(*ListStaticRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreateStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreateStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreateStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreateStaticRoute(ctx, req.(*CreateStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetStaticRoute(ctx, req.(*GetStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeleteStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeleteStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeleteStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeleteStaticRoute(ctx, req.(*DeleteStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_ListPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListPorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListPorts(ctx, req.(*ListPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/UpdatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeletePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeletePort(ctx, req.(*DeletePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListSecurityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListSecurityGroups(ctx, req.(*ListSecurityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreateSecurityGroup(ctx, req.(*CreateSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetSecurityGroup(ctx, req.(*GetSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_UpdateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).UpdateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/UpdateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).UpdateSecurityGroup(ctx, req.(*UpdateSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeleteSecurityGroup(ctx, req.(*DeleteSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_ListSecurityRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).ListSecurityRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/ListSecurityRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).ListSecurityRules(ctx, req.(*ListSecurityRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_CreateSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).CreateSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/CreateSecurityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).CreateSecurityRule(ctx, req.(*CreateSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_GetSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).GetSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/GetSecurityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).GetSecurityRule(ctx, req.(*GetSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ovnnet_DeleteSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvnnetServer).DeleteSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.v1.Ovnnet/DeleteSecurityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvnnetServer).DeleteSecurityRule(ctx, req.(*DeleteSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ovnnet_ServiceDesc is the grpc.ServiceDesc for Ovnnet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ovnnet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdn.v1.Ovnnet",
	HandlerType: (*OvnnetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVPCs",
			Handler:    _Ovnnet_ListVPCs_Handler,
		},
		{
			MethodName: "CreateVPC",
			Handler:    _Ovnnet_CreateVPC_Handler,
		},
		{
			MethodName: "GetVPC",
			Handler:    _Ovnnet_GetVPC_Handler,
		},
		{
			MethodName: "DeleteVPC",
			Handler:    _Ovnnet_DeleteVPC_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _Ovnnet_ListSubnets_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _Ovnnet_CreateSubnet_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _Ovnnet_GetSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _Ovnnet_DeleteSubnet_Handler,
		},
		{
			MethodName: "ListRouters",
			Handler:    _Ovnnet_ListRouters_Handler,
		},
		{
			MethodName: "CreateRouter",
			Handler:    _Ovnnet_CreateRouter_Handler,
		},
		{
			MethodName: "GetRouter",
			Handler:    _Ovnnet_GetRouter_Handler,
		},
		{
			MethodName: "DeleteRouter",
			Handler:    _Ovnnet_DeleteRouter_Handler,
		},
		{
			MethodName: "ListRouterInterfaces",
			Handler:    _Ovnnet_ListRouterInterfaces_Handler,
		},
		{
			MethodName: "CreateRouterInterface",
			Handler:    _Ovnnet_CreateRouterInterface_Handler,
		},
		{
			MethodName: "GetRouterInterface",
			Handler:    _Ovnnet_GetRouterInterface_Handler,
		},
		{
			MethodName: "DeleteRouterInterface",
			Handler:    _Ovnnet_DeleteRouterInterface_Handler,
		},
		{
			MethodName: "ListStaticRoutes",
			Handler:    _Ovnnet_ListStaticRoutes_Handler,
		},
		{
			MethodName: "CreateStaticRoute",
			Handler:    _Ovnnet_CreateStaticRoute_Handler,
		},
		{
			MethodName: "GetStaticRoute",
			Handler:    _Ovnnet_GetStaticRoute_Handler,
		},
		{
			MethodName: "DeleteStaticRoute",
			Handler:    _Ovnnet_DeleteStaticRoute_Handler,
		},
		{
			MethodName: "ListPorts",
			Handler:    _Ovnnet_ListPorts_Handler,
		},
		{
			MethodName: "CreatePort",
			Handler:    _Ovnnet_CreatePort_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _Ovnnet_GetPort_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _Ovnnet_UpdatePort_Handler,
		},
		{
			MethodName: "DeletePort",
			Handler:    _Ovnnet_DeletePort_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _Ovnnet_ListSecurityGroups_Handler,
		},
		{
			MethodName: "CreateSecurityGroup",
			Handler:    _Ovnnet_CreateSecurityGroup_Handler,
		},
		{
			MethodName: "GetSecurityGroup",
			Handler:    _Ovnnet_GetSecurityGroup_Handler,
		},
		{
			MethodName: "UpdateSecurityGroup",
			Handler:    _Ovnnet_UpdateSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _Ovnnet_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "ListSecurityRules",
			Handler:    _Ovnnet_ListSecurityRules_Handler,
		},
		{
			MethodName: "CreateSecurityRule",
			Handler:    _Ovnnet_CreateSecurityRule_Handler,
		},
		{
			MethodName: "GetSecurityRule",
			Handler:    _Ovnnet_GetSecurityRule_Handler,
		},
		{
			MethodName: "DeleteSecurityRule",
			Handler:    _Ovnnet_DeleteSecurityRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sdn/v1/ovnnet.proto",
}
