/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/metal3.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBareMetalHosts implements BareMetalHostInterface
type FakeBareMetalHosts struct {
	Fake *FakeMetal3V1alpha1
	ns   string
}

var baremetalhostsResource = v1alpha1.SchemeGroupVersion.WithResource("baremetalhosts")

var baremetalhostsKind = v1alpha1.SchemeGroupVersion.WithKind("BareMetalHost")

// Get takes name of the bareMetalHost, and returns the corresponding bareMetalHost object, and an error if there is any.
func (c *FakeBareMetalHosts) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.BareMetalHost, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(baremetalhostsResource, c.ns, name), &v1alpha1.BareMetalHost{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BareMetalHost), err
}

// List takes label and field selectors, and returns the list of BareMetalHosts that match those selectors.
func (c *FakeBareMetalHosts) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.BareMetalHostList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(baremetalhostsResource, baremetalhostsKind, c.ns, opts), &v1alpha1.BareMetalHostList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.BareMetalHostList{ListMeta: obj.(*v1alpha1.BareMetalHostList).ListMeta}
	for _, item := range obj.(*v1alpha1.BareMetalHostList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested bareMetalHosts.
func (c *FakeBareMetalHosts) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(baremetalhostsResource, c.ns, opts))

}

// Create takes the representation of a bareMetalHost and creates it.  Returns the server's representation of the bareMetalHost, and an error, if there is any.
func (c *FakeBareMetalHosts) Create(ctx context.Context, bareMetalHost *v1alpha1.BareMetalHost, opts v1.CreateOptions) (result *v1alpha1.BareMetalHost, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(baremetalhostsResource, c.ns, bareMetalHost), &v1alpha1.BareMetalHost{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BareMetalHost), err
}

// Update takes the representation of a bareMetalHost and updates it. Returns the server's representation of the bareMetalHost, and an error, if there is any.
func (c *FakeBareMetalHosts) Update(ctx context.Context, bareMetalHost *v1alpha1.BareMetalHost, opts v1.UpdateOptions) (result *v1alpha1.BareMetalHost, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(baremetalhostsResource, c.ns, bareMetalHost), &v1alpha1.BareMetalHost{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BareMetalHost), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeBareMetalHosts) UpdateStatus(ctx context.Context, bareMetalHost *v1alpha1.BareMetalHost, opts v1.UpdateOptions) (*v1alpha1.BareMetalHost, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(baremetalhostsResource, "status", c.ns, bareMetalHost), &v1alpha1.BareMetalHost{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BareMetalHost), err
}

// Delete takes name of the bareMetalHost and deletes it. Returns an error if one occurs.
func (c *FakeBareMetalHosts) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(baremetalhostsResource, c.ns, name, opts), &v1alpha1.BareMetalHost{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBareMetalHosts) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(baremetalhostsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.BareMetalHostList{})
	return err
}

// Patch applies the patch and returns the patched bareMetalHost.
func (c *FakeBareMetalHosts) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.BareMetalHost, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(baremetalhostsResource, c.ns, name, pt, data, subresources...), &v1alpha1.BareMetalHost{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BareMetalHost), err
}
