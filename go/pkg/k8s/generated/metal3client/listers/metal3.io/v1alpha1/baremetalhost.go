/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/metal3.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BareMetalHostLister helps list BareMetalHosts.
// All objects returned here must be treated as read-only.
type BareMetalHostLister interface {
	// List lists all BareMetalHosts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BareMetalHost, err error)
	// BareMetalHosts returns an object that can list and get BareMetalHosts.
	BareMetalHosts(namespace string) BareMetalHostNamespaceLister
	BareMetalHostListerExpansion
}

// bareMetalHostLister implements the BareMetalHostLister interface.
type bareMetalHostLister struct {
	indexer cache.Indexer
}

// NewBareMetalHostLister returns a new BareMetalHostLister.
func NewBareMetalHostLister(indexer cache.Indexer) BareMetalHostLister {
	return &bareMetalHostLister{indexer: indexer}
}

// List lists all BareMetalHosts in the indexer.
func (s *bareMetalHostLister) List(selector labels.Selector) (ret []*v1alpha1.BareMetalHost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BareMetalHost))
	})
	return ret, err
}

// BareMetalHosts returns an object that can list and get BareMetalHosts.
func (s *bareMetalHostLister) BareMetalHosts(namespace string) BareMetalHostNamespaceLister {
	return bareMetalHostNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BareMetalHostNamespaceLister helps list and get BareMetalHosts.
// All objects returned here must be treated as read-only.
type BareMetalHostNamespaceLister interface {
	// List lists all BareMetalHosts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BareMetalHost, err error)
	// Get retrieves the BareMetalHost from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BareMetalHost, error)
	BareMetalHostNamespaceListerExpansion
}

// bareMetalHostNamespaceLister implements the BareMetalHostNamespaceLister
// interface.
type bareMetalHostNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BareMetalHosts in the indexer for a given namespace.
func (s bareMetalHostNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BareMetalHost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BareMetalHost))
	})
	return ret, err
}

// Get retrieves the BareMetalHost from the indexer for a given namespace and name.
func (s bareMetalHostNamespaceLister) Get(name string) (*v1alpha1.BareMetalHost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("baremetalhost"), name)
	}
	return obj.(*v1alpha1.BareMetalHost), nil
}
