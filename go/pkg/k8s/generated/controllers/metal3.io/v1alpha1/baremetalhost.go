/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/metal3.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type BareMetalHostHandler func(string, *v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error)

type BareMetalHostController interface {
	generic.ControllerMeta
	BareMetalHostClient

	OnChange(ctx context.Context, name string, sync BareMetalHostHandler)
	OnRemove(ctx context.Context, name string, sync BareMetalHostHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() BareMetalHostCache
}

type BareMetalHostClient interface {
	Create(*v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error)
	Update(*v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error)
	UpdateStatus(*v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.BareMetalHost, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.BareMetalHostList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.BareMetalHost, err error)
}

type BareMetalHostCache interface {
	Get(namespace, name string) (*v1alpha1.BareMetalHost, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.BareMetalHost, error)

	AddIndexer(indexName string, indexer BareMetalHostIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.BareMetalHost, error)
}

type BareMetalHostIndexer func(obj *v1alpha1.BareMetalHost) ([]string, error)

type bareMetalHostController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewBareMetalHostController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) BareMetalHostController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &bareMetalHostController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromBareMetalHostHandlerToHandler(sync BareMetalHostHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.BareMetalHost
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.BareMetalHost))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *bareMetalHostController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.BareMetalHost))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateBareMetalHostDeepCopyOnChange(client BareMetalHostClient, obj *v1alpha1.BareMetalHost, handler func(obj *v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error)) (*v1alpha1.BareMetalHost, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *bareMetalHostController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *bareMetalHostController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *bareMetalHostController) OnChange(ctx context.Context, name string, sync BareMetalHostHandler) {
	c.AddGenericHandler(ctx, name, FromBareMetalHostHandlerToHandler(sync))
}

func (c *bareMetalHostController) OnRemove(ctx context.Context, name string, sync BareMetalHostHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromBareMetalHostHandlerToHandler(sync)))
}

func (c *bareMetalHostController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *bareMetalHostController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *bareMetalHostController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *bareMetalHostController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *bareMetalHostController) Cache() BareMetalHostCache {
	return &bareMetalHostCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *bareMetalHostController) Create(obj *v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error) {
	result := &v1alpha1.BareMetalHost{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *bareMetalHostController) Update(obj *v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error) {
	result := &v1alpha1.BareMetalHost{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *bareMetalHostController) UpdateStatus(obj *v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error) {
	result := &v1alpha1.BareMetalHost{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *bareMetalHostController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *bareMetalHostController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.BareMetalHost, error) {
	result := &v1alpha1.BareMetalHost{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *bareMetalHostController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.BareMetalHostList, error) {
	result := &v1alpha1.BareMetalHostList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *bareMetalHostController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *bareMetalHostController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.BareMetalHost, error) {
	result := &v1alpha1.BareMetalHost{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type bareMetalHostCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *bareMetalHostCache) Get(namespace, name string) (*v1alpha1.BareMetalHost, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.BareMetalHost), nil
}

func (c *bareMetalHostCache) List(namespace string, selector labels.Selector) (ret []*v1alpha1.BareMetalHost, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BareMetalHost))
	})

	return ret, err
}

func (c *bareMetalHostCache) AddIndexer(indexName string, indexer BareMetalHostIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.BareMetalHost))
		},
	}))
}

func (c *bareMetalHostCache) GetByIndex(indexName, key string) (result []*v1alpha1.BareMetalHost, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.BareMetalHost, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.BareMetalHost))
	}
	return result, nil
}

type BareMetalHostStatusHandler func(obj *v1alpha1.BareMetalHost, status v1alpha1.BareMetalHostStatus) (v1alpha1.BareMetalHostStatus, error)

type BareMetalHostGeneratingHandler func(obj *v1alpha1.BareMetalHost, status v1alpha1.BareMetalHostStatus) ([]runtime.Object, v1alpha1.BareMetalHostStatus, error)

func RegisterBareMetalHostStatusHandler(ctx context.Context, controller BareMetalHostController, condition condition.Cond, name string, handler BareMetalHostStatusHandler) {
	statusHandler := &bareMetalHostStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromBareMetalHostHandlerToHandler(statusHandler.sync))
}

func RegisterBareMetalHostGeneratingHandler(ctx context.Context, controller BareMetalHostController, apply apply.Apply,
	condition condition.Cond, name string, handler BareMetalHostGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &bareMetalHostGeneratingHandler{
		BareMetalHostGeneratingHandler: handler,
		apply:                          apply,
		name:                           name,
		gvk:                            controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterBareMetalHostStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type bareMetalHostStatusHandler struct {
	client    BareMetalHostClient
	condition condition.Cond
	handler   BareMetalHostStatusHandler
}

func (a *bareMetalHostStatusHandler) sync(key string, obj *v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type bareMetalHostGeneratingHandler struct {
	BareMetalHostGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *bareMetalHostGeneratingHandler) Remove(key string, obj *v1alpha1.BareMetalHost) (*v1alpha1.BareMetalHost, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.BareMetalHost{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *bareMetalHostGeneratingHandler) Handle(obj *v1alpha1.BareMetalHost, status v1alpha1.BareMetalHostStatus) (v1alpha1.BareMetalHostStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.BareMetalHostGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
