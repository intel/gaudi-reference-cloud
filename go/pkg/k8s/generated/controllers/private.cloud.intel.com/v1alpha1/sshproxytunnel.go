/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/private.cloud/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type SshProxyTunnelHandler func(string, *v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error)

type SshProxyTunnelController interface {
	generic.ControllerMeta
	SshProxyTunnelClient

	OnChange(ctx context.Context, name string, sync SshProxyTunnelHandler)
	OnRemove(ctx context.Context, name string, sync SshProxyTunnelHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() SshProxyTunnelCache
}

type SshProxyTunnelClient interface {
	Create(*v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error)
	Update(*v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error)
	UpdateStatus(*v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.SshProxyTunnel, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.SshProxyTunnelList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SshProxyTunnel, err error)
}

type SshProxyTunnelCache interface {
	Get(namespace, name string) (*v1alpha1.SshProxyTunnel, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.SshProxyTunnel, error)

	AddIndexer(indexName string, indexer SshProxyTunnelIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.SshProxyTunnel, error)
}

type SshProxyTunnelIndexer func(obj *v1alpha1.SshProxyTunnel) ([]string, error)

type sshProxyTunnelController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewSshProxyTunnelController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) SshProxyTunnelController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &sshProxyTunnelController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromSshProxyTunnelHandlerToHandler(sync SshProxyTunnelHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.SshProxyTunnel
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.SshProxyTunnel))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *sshProxyTunnelController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.SshProxyTunnel))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateSshProxyTunnelDeepCopyOnChange(client SshProxyTunnelClient, obj *v1alpha1.SshProxyTunnel, handler func(obj *v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error)) (*v1alpha1.SshProxyTunnel, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *sshProxyTunnelController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *sshProxyTunnelController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *sshProxyTunnelController) OnChange(ctx context.Context, name string, sync SshProxyTunnelHandler) {
	c.AddGenericHandler(ctx, name, FromSshProxyTunnelHandlerToHandler(sync))
}

func (c *sshProxyTunnelController) OnRemove(ctx context.Context, name string, sync SshProxyTunnelHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromSshProxyTunnelHandlerToHandler(sync)))
}

func (c *sshProxyTunnelController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *sshProxyTunnelController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *sshProxyTunnelController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *sshProxyTunnelController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *sshProxyTunnelController) Cache() SshProxyTunnelCache {
	return &sshProxyTunnelCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *sshProxyTunnelController) Create(obj *v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error) {
	result := &v1alpha1.SshProxyTunnel{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *sshProxyTunnelController) Update(obj *v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error) {
	result := &v1alpha1.SshProxyTunnel{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *sshProxyTunnelController) UpdateStatus(obj *v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error) {
	result := &v1alpha1.SshProxyTunnel{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *sshProxyTunnelController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *sshProxyTunnelController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.SshProxyTunnel, error) {
	result := &v1alpha1.SshProxyTunnel{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *sshProxyTunnelController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.SshProxyTunnelList, error) {
	result := &v1alpha1.SshProxyTunnelList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *sshProxyTunnelController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *sshProxyTunnelController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.SshProxyTunnel, error) {
	result := &v1alpha1.SshProxyTunnel{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type sshProxyTunnelCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *sshProxyTunnelCache) Get(namespace, name string) (*v1alpha1.SshProxyTunnel, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.SshProxyTunnel), nil
}

func (c *sshProxyTunnelCache) List(namespace string, selector labels.Selector) (ret []*v1alpha1.SshProxyTunnel, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SshProxyTunnel))
	})

	return ret, err
}

func (c *sshProxyTunnelCache) AddIndexer(indexName string, indexer SshProxyTunnelIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.SshProxyTunnel))
		},
	}))
}

func (c *sshProxyTunnelCache) GetByIndex(indexName, key string) (result []*v1alpha1.SshProxyTunnel, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.SshProxyTunnel, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.SshProxyTunnel))
	}
	return result, nil
}

type SshProxyTunnelStatusHandler func(obj *v1alpha1.SshProxyTunnel, status v1alpha1.SshProxyTunnelStatus) (v1alpha1.SshProxyTunnelStatus, error)

type SshProxyTunnelGeneratingHandler func(obj *v1alpha1.SshProxyTunnel, status v1alpha1.SshProxyTunnelStatus) ([]runtime.Object, v1alpha1.SshProxyTunnelStatus, error)

func RegisterSshProxyTunnelStatusHandler(ctx context.Context, controller SshProxyTunnelController, condition condition.Cond, name string, handler SshProxyTunnelStatusHandler) {
	statusHandler := &sshProxyTunnelStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromSshProxyTunnelHandlerToHandler(statusHandler.sync))
}

func RegisterSshProxyTunnelGeneratingHandler(ctx context.Context, controller SshProxyTunnelController, apply apply.Apply,
	condition condition.Cond, name string, handler SshProxyTunnelGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &sshProxyTunnelGeneratingHandler{
		SshProxyTunnelGeneratingHandler: handler,
		apply:                           apply,
		name:                            name,
		gvk:                             controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterSshProxyTunnelStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type sshProxyTunnelStatusHandler struct {
	client    SshProxyTunnelClient
	condition condition.Cond
	handler   SshProxyTunnelStatusHandler
}

func (a *sshProxyTunnelStatusHandler) sync(key string, obj *v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type sshProxyTunnelGeneratingHandler struct {
	SshProxyTunnelGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *sshProxyTunnelGeneratingHandler) Remove(key string, obj *v1alpha1.SshProxyTunnel) (*v1alpha1.SshProxyTunnel, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.SshProxyTunnel{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *sshProxyTunnelGeneratingHandler) Handle(obj *v1alpha1.SshProxyTunnel, status v1alpha1.SshProxyTunnelStatus) (v1alpha1.SshProxyTunnelStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.SshProxyTunnelGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
