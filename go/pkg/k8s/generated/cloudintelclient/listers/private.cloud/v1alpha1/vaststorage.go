/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/private.cloud/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VastStorageLister helps list VastStorages.
// All objects returned here must be treated as read-only.
type VastStorageLister interface {
	// List lists all VastStorages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VastStorage, err error)
	// VastStorages returns an object that can list and get VastStorages.
	VastStorages(namespace string) VastStorageNamespaceLister
	VastStorageListerExpansion
}

// vastStorageLister implements the VastStorageLister interface.
type vastStorageLister struct {
	indexer cache.Indexer
}

// NewVastStorageLister returns a new VastStorageLister.
func NewVastStorageLister(indexer cache.Indexer) VastStorageLister {
	return &vastStorageLister{indexer: indexer}
}

// List lists all VastStorages in the indexer.
func (s *vastStorageLister) List(selector labels.Selector) (ret []*v1alpha1.VastStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VastStorage))
	})
	return ret, err
}

// VastStorages returns an object that can list and get VastStorages.
func (s *vastStorageLister) VastStorages(namespace string) VastStorageNamespaceLister {
	return vastStorageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VastStorageNamespaceLister helps list and get VastStorages.
// All objects returned here must be treated as read-only.
type VastStorageNamespaceLister interface {
	// List lists all VastStorages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VastStorage, err error)
	// Get retrieves the VastStorage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VastStorage, error)
	VastStorageNamespaceListerExpansion
}

// vastStorageNamespaceLister implements the VastStorageNamespaceLister
// interface.
type vastStorageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VastStorages in the indexer for a given namespace.
func (s vastStorageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VastStorage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VastStorage))
	})
	return ret, err
}

// Get retrieves the VastStorage from the indexer for a given namespace and name.
func (s vastStorageNamespaceLister) Get(name string) (*v1alpha1.VastStorage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaststorage"), name)
	}
	return obj.(*v1alpha1.VastStorage), nil
}
