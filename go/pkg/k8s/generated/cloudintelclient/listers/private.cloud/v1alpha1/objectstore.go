/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/private.cloud/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectStoreLister helps list ObjectStores.
// All objects returned here must be treated as read-only.
type ObjectStoreLister interface {
	// List lists all ObjectStores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectStore, err error)
	// ObjectStores returns an object that can list and get ObjectStores.
	ObjectStores(namespace string) ObjectStoreNamespaceLister
	ObjectStoreListerExpansion
}

// objectStoreLister implements the ObjectStoreLister interface.
type objectStoreLister struct {
	indexer cache.Indexer
}

// NewObjectStoreLister returns a new ObjectStoreLister.
func NewObjectStoreLister(indexer cache.Indexer) ObjectStoreLister {
	return &objectStoreLister{indexer: indexer}
}

// List lists all ObjectStores in the indexer.
func (s *objectStoreLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectStore))
	})
	return ret, err
}

// ObjectStores returns an object that can list and get ObjectStores.
func (s *objectStoreLister) ObjectStores(namespace string) ObjectStoreNamespaceLister {
	return objectStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectStoreNamespaceLister helps list and get ObjectStores.
// All objects returned here must be treated as read-only.
type ObjectStoreNamespaceLister interface {
	// List lists all ObjectStores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectStore, err error)
	// Get retrieves the ObjectStore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectStore, error)
	ObjectStoreNamespaceListerExpansion
}

// objectStoreNamespaceLister implements the ObjectStoreNamespaceLister
// interface.
type objectStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectStores in the indexer for a given namespace.
func (s objectStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectStore))
	})
	return ret, err
}

// Get retrieves the ObjectStore from the indexer for a given namespace and name.
func (s objectStoreNamespaceLister) Get(name string) (*v1alpha1.ObjectStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectstore"), name)
	}
	return obj.(*v1alpha1.ObjectStore), nil
}
