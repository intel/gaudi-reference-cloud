/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/private.cloud/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeObjectStores implements ObjectStoreInterface
type FakeObjectStores struct {
	Fake *FakePrivateV1alpha1
	ns   string
}

var objectstoresResource = v1alpha1.SchemeGroupVersion.WithResource("objectstores")

var objectstoresKind = v1alpha1.SchemeGroupVersion.WithKind("ObjectStore")

// Get takes name of the objectStore, and returns the corresponding objectStore object, and an error if there is any.
func (c *FakeObjectStores) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ObjectStore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(objectstoresResource, c.ns, name), &v1alpha1.ObjectStore{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ObjectStore), err
}

// List takes label and field selectors, and returns the list of ObjectStores that match those selectors.
func (c *FakeObjectStores) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ObjectStoreList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(objectstoresResource, objectstoresKind, c.ns, opts), &v1alpha1.ObjectStoreList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ObjectStoreList{ListMeta: obj.(*v1alpha1.ObjectStoreList).ListMeta}
	for _, item := range obj.(*v1alpha1.ObjectStoreList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested objectStores.
func (c *FakeObjectStores) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(objectstoresResource, c.ns, opts))

}

// Create takes the representation of a objectStore and creates it.  Returns the server's representation of the objectStore, and an error, if there is any.
func (c *FakeObjectStores) Create(ctx context.Context, objectStore *v1alpha1.ObjectStore, opts v1.CreateOptions) (result *v1alpha1.ObjectStore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(objectstoresResource, c.ns, objectStore), &v1alpha1.ObjectStore{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ObjectStore), err
}

// Update takes the representation of a objectStore and updates it. Returns the server's representation of the objectStore, and an error, if there is any.
func (c *FakeObjectStores) Update(ctx context.Context, objectStore *v1alpha1.ObjectStore, opts v1.UpdateOptions) (result *v1alpha1.ObjectStore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(objectstoresResource, c.ns, objectStore), &v1alpha1.ObjectStore{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ObjectStore), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeObjectStores) UpdateStatus(ctx context.Context, objectStore *v1alpha1.ObjectStore, opts v1.UpdateOptions) (*v1alpha1.ObjectStore, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(objectstoresResource, "status", c.ns, objectStore), &v1alpha1.ObjectStore{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ObjectStore), err
}

// Delete takes name of the objectStore and deletes it. Returns an error if one occurs.
func (c *FakeObjectStores) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(objectstoresResource, c.ns, name, opts), &v1alpha1.ObjectStore{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeObjectStores) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(objectstoresResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ObjectStoreList{})
	return err
}

// Patch applies the patch and returns the patched objectStore.
func (c *FakeObjectStores) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ObjectStore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(objectstoresResource, c.ns, name, pt, data, subresources...), &v1alpha1.ObjectStore{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ObjectStore), err
}
