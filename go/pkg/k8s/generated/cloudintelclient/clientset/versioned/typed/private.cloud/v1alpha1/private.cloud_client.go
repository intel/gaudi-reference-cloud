/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"net/http"

	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/private.cloud/v1alpha1"
	"github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/generated/cloudintelclient/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type PrivateV1alpha1Interface interface {
	RESTClient() rest.Interface
	InstancesGetter
	ObjectStoresGetter
	SshProxyTunnelsGetter
	StoragesGetter
	VastStoragesGetter
}

// PrivateV1alpha1Client is used to interact with features provided by the private.cloud group.
type PrivateV1alpha1Client struct {
	restClient rest.Interface
}

func (c *PrivateV1alpha1Client) Instances(namespace string) InstanceInterface {
	return newInstances(c, namespace)
}

func (c *PrivateV1alpha1Client) ObjectStores(namespace string) ObjectStoreInterface {
	return newObjectStores(c, namespace)
}

func (c *PrivateV1alpha1Client) SshProxyTunnels(namespace string) SshProxyTunnelInterface {
	return newSshProxyTunnels(c, namespace)
}

func (c *PrivateV1alpha1Client) Storages(namespace string) StorageInterface {
	return newStorages(c, namespace)
}

func (c *PrivateV1alpha1Client) VastStorages(namespace string) VastStorageInterface {
	return newVastStorages(c, namespace)
}

// NewForConfig creates a new PrivateV1alpha1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*PrivateV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new PrivateV1alpha1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*PrivateV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &PrivateV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new PrivateV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *PrivateV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new PrivateV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *PrivateV1alpha1Client {
	return &PrivateV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *PrivateV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
