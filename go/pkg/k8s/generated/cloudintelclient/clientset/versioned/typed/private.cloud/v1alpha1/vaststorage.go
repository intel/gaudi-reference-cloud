/*
This software and the related documents are Intel copyrighted materials, and
your use of them is governed by the express license under which they were
provided to you ("License"). Unless the License provides otherwise, you may not
use, modify, copy, publish, distribute, disclose or transmit this software or
the related documents without Intel's prior written permission.

This software and the related documents are provided as is, with no express or
implied warranties, other than those that are expressly stated in the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/apis/private.cloud/v1alpha1"
	scheme "github.com/intel-innersource/frameworks.cloud.devcloud.services.idc/go/pkg/k8s/generated/cloudintelclient/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VastStoragesGetter has a method to return a VastStorageInterface.
// A group's client should implement this interface.
type VastStoragesGetter interface {
	VastStorages(namespace string) VastStorageInterface
}

// VastStorageInterface has methods to work with VastStorage resources.
type VastStorageInterface interface {
	Create(ctx context.Context, vastStorage *v1alpha1.VastStorage, opts v1.CreateOptions) (*v1alpha1.VastStorage, error)
	Update(ctx context.Context, vastStorage *v1alpha1.VastStorage, opts v1.UpdateOptions) (*v1alpha1.VastStorage, error)
	UpdateStatus(ctx context.Context, vastStorage *v1alpha1.VastStorage, opts v1.UpdateOptions) (*v1alpha1.VastStorage, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.VastStorage, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.VastStorageList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.VastStorage, err error)
	VastStorageExpansion
}

// vastStorages implements VastStorageInterface
type vastStorages struct {
	client rest.Interface
	ns     string
}

// newVastStorages returns a VastStorages
func newVastStorages(c *PrivateV1alpha1Client, namespace string) *vastStorages {
	return &vastStorages{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the vastStorage, and returns the corresponding vastStorage object, and an error if there is any.
func (c *vastStorages) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.VastStorage, err error) {
	result = &v1alpha1.VastStorage{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("vaststorages").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VastStorages that match those selectors.
func (c *vastStorages) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.VastStorageList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.VastStorageList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("vaststorages").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested vastStorages.
func (c *vastStorages) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("vaststorages").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a vastStorage and creates it.  Returns the server's representation of the vastStorage, and an error, if there is any.
func (c *vastStorages) Create(ctx context.Context, vastStorage *v1alpha1.VastStorage, opts v1.CreateOptions) (result *v1alpha1.VastStorage, err error) {
	result = &v1alpha1.VastStorage{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("vaststorages").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(vastStorage).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a vastStorage and updates it. Returns the server's representation of the vastStorage, and an error, if there is any.
func (c *vastStorages) Update(ctx context.Context, vastStorage *v1alpha1.VastStorage, opts v1.UpdateOptions) (result *v1alpha1.VastStorage, err error) {
	result = &v1alpha1.VastStorage{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("vaststorages").
		Name(vastStorage.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(vastStorage).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *vastStorages) UpdateStatus(ctx context.Context, vastStorage *v1alpha1.VastStorage, opts v1.UpdateOptions) (result *v1alpha1.VastStorage, err error) {
	result = &v1alpha1.VastStorage{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("vaststorages").
		Name(vastStorage.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(vastStorage).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the vastStorage and deletes it. Returns an error if one occurs.
func (c *vastStorages) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("vaststorages").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *vastStorages) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("vaststorages").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched vastStorage.
func (c *vastStorages) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.VastStorage, err error) {
	result = &v1alpha1.VastStorage{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("vaststorages").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
