// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage_private.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FilesystemUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemUpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemUpdateStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemUpdateStatusRequestMultiError, or nil if none found.
func (m *FilesystemUpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemUpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemUpdateStatusRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemUpdateStatusRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemUpdateStatusRequestMultiError(errors)
	}

	return nil
}

// FilesystemUpdateStatusRequestMultiError is an error wrapping multiple
// validation errors returned by FilesystemUpdateStatusRequest.ValidateAll()
// if the designated constraints aren't met.
type FilesystemUpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemUpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemUpdateStatusRequestMultiError) AllErrors() []error { return m }

// FilesystemUpdateStatusRequestValidationError is the validation error
// returned by FilesystemUpdateStatusRequest.Validate if the designated
// constraints aren't met.
type FilesystemUpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemUpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemUpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemUpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemUpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemUpdateStatusRequestValidationError) ErrorName() string {
	return "FilesystemUpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemUpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemUpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemUpdateStatusRequestValidationError{}

// Validate checks the field values on FilesystemRemoveFinalizerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemRemoveFinalizerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemRemoveFinalizerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemRemoveFinalizerRequestMultiError, or nil if none found.
func (m *FilesystemRemoveFinalizerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemRemoveFinalizerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemRemoveFinalizerRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemRemoveFinalizerRequestMultiError(errors)
	}

	return nil
}

// FilesystemRemoveFinalizerRequestMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemRemoveFinalizerRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemRemoveFinalizerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemRemoveFinalizerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemRemoveFinalizerRequestMultiError) AllErrors() []error { return m }

// FilesystemRemoveFinalizerRequestValidationError is the validation error
// returned by FilesystemRemoveFinalizerRequest.Validate if the designated
// constraints aren't met.
type FilesystemRemoveFinalizerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemRemoveFinalizerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemRemoveFinalizerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemRemoveFinalizerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemRemoveFinalizerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemRemoveFinalizerRequestValidationError) ErrorName() string {
	return "FilesystemRemoveFinalizerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemRemoveFinalizerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemRemoveFinalizerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemRemoveFinalizerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemRemoveFinalizerRequestValidationError{}

// Validate checks the field values on FilesystemSearchStreamPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FilesystemSearchStreamPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSearchStreamPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemSearchStreamPrivateRequestMultiError, or nil if none found.
func (m *FilesystemSearchStreamPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSearchStreamPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return FilesystemSearchStreamPrivateRequestMultiError(errors)
	}

	return nil
}

// FilesystemSearchStreamPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemSearchStreamPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemSearchStreamPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemSearchStreamPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemSearchStreamPrivateRequestMultiError) AllErrors() []error { return m }

// FilesystemSearchStreamPrivateRequestValidationError is the validation error
// returned by FilesystemSearchStreamPrivateRequest.Validate if the designated
// constraints aren't met.
type FilesystemSearchStreamPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemSearchStreamPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemSearchStreamPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemSearchStreamPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemSearchStreamPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemSearchStreamPrivateRequestValidationError) ErrorName() string {
	return "FilesystemSearchStreamPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemSearchStreamPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSearchStreamPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemSearchStreamPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemSearchStreamPrivateRequestValidationError{}

// Validate checks the field values on FilesystemDeleteUserRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemDeleteUserRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemDeleteUserRequestPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemDeleteUserRequestPrivateMultiError, or nil if none found.
func (m *FilesystemDeleteUserRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemDeleteUserRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	// no validation rules for ClusterId

	// no validation rules for UserName

	if len(errors) > 0 {
		return FilesystemDeleteUserRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemDeleteUserRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemDeleteUserRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemDeleteUserRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemDeleteUserRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemDeleteUserRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemDeleteUserRequestPrivateValidationError is the validation error
// returned by FilesystemDeleteUserRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemDeleteUserRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemDeleteUserRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemDeleteUserRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemDeleteUserRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemDeleteUserRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemDeleteUserRequestPrivateValidationError) ErrorName() string {
	return "FilesystemDeleteUserRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemDeleteUserRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemDeleteUserRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemDeleteUserRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemDeleteUserRequestPrivateValidationError{}

// Validate checks the field values on FilesystemGetUserRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemGetUserRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemGetUserRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemGetUserRequestPrivateMultiError, or nil if none found.
func (m *FilesystemGetUserRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemGetUserRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemGetUserRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemGetUserRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemGetUserRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemGetUserRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemGetUserRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemGetUserRequestPrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemGetUserRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemGetUserRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemGetUserRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemGetUserRequestPrivateValidationError is the validation error
// returned by FilesystemGetUserRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemGetUserRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemGetUserRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemGetUserRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemGetUserRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemGetUserRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemGetUserRequestPrivateValidationError) ErrorName() string {
	return "FilesystemGetUserRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemGetUserRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemGetUserRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemGetUserRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemGetUserRequestPrivateValidationError{}

// Validate checks the field values on FilesystemRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemRequestResponseMultiError, or nil if none found.
func (m *FilesystemRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilesystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemRequestResponseValidationError{
					field:  "Filesystem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemRequestResponseValidationError{
					field:  "Filesystem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilesystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemRequestResponseValidationError{
				field:  "Filesystem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemRequestResponseMultiError(errors)
	}

	return nil
}

// FilesystemRequestResponseMultiError is an error wrapping multiple validation
// errors returned by FilesystemRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type FilesystemRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemRequestResponseMultiError) AllErrors() []error { return m }

// FilesystemRequestResponseValidationError is the validation error returned by
// FilesystemRequestResponse.Validate if the designated constraints aren't met.
type FilesystemRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemRequestResponseValidationError) ErrorName() string {
	return "FilesystemRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemRequestResponseValidationError{}

// Validate checks the field values on FilesystemStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemStatusPrivateMultiError, or nil if none found.
func (m *FilesystemStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "Mount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "Mount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemStatusPrivateValidationError{
				field:  "Mount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemStatusPrivateValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemStatusPrivateValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolumeIdentifiers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "VolumeIdentifiers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemStatusPrivateValidationError{
					field:  "VolumeIdentifiers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolumeIdentifiers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemStatusPrivateValidationError{
				field:  "VolumeIdentifiers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterInfo

	if len(errors) > 0 {
		return FilesystemStatusPrivateMultiError(errors)
	}

	return nil
}

// FilesystemStatusPrivateMultiError is an error wrapping multiple validation
// errors returned by FilesystemStatusPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemStatusPrivateMultiError) AllErrors() []error { return m }

// FilesystemStatusPrivateValidationError is the validation error returned by
// FilesystemStatusPrivate.Validate if the designated constraints aren't met.
type FilesystemStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemStatusPrivateValidationError) ErrorName() string {
	return "FilesystemStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemStatusPrivateValidationError{}

// Validate checks the field values on VolumeIdentifiers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VolumeIdentifiers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VolumeIdentifiers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VolumeIdentifiersMultiError, or nil if none found.
func (m *VolumeIdentifiers) ValidateAll() error {
	return m.validate(true)
}

func (m *VolumeIdentifiers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for TenantId

	// no validation rules for FilesystemId

	if len(errors) > 0 {
		return VolumeIdentifiersMultiError(errors)
	}

	return nil
}

// VolumeIdentifiersMultiError is an error wrapping multiple validation errors
// returned by VolumeIdentifiers.ValidateAll() if the designated constraints
// aren't met.
type VolumeIdentifiersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeIdentifiersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeIdentifiersMultiError) AllErrors() []error { return m }

// VolumeIdentifiersValidationError is the validation error returned by
// VolumeIdentifiers.Validate if the designated constraints aren't met.
type VolumeIdentifiersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeIdentifiersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeIdentifiersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeIdentifiersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeIdentifiersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeIdentifiersValidationError) ErrorName() string {
	return "VolumeIdentifiersValidationError"
}

// Error satisfies the builtin error interface
func (e VolumeIdentifiersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeIdentifiers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeIdentifiersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeIdentifiersValidationError{}

// Validate checks the field values on FilesystemGetUserResponsePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemGetUserResponsePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemGetUserResponsePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemGetUserResponsePrivateMultiError, or nil if none found.
func (m *FilesystemGetUserResponsePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemGetUserResponsePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Password

	if len(errors) > 0 {
		return FilesystemGetUserResponsePrivateMultiError(errors)
	}

	return nil
}

// FilesystemGetUserResponsePrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemGetUserResponsePrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemGetUserResponsePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemGetUserResponsePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemGetUserResponsePrivateMultiError) AllErrors() []error { return m }

// FilesystemGetUserResponsePrivateValidationError is the validation error
// returned by FilesystemGetUserResponsePrivate.Validate if the designated
// constraints aren't met.
type FilesystemGetUserResponsePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemGetUserResponsePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemGetUserResponsePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemGetUserResponsePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemGetUserResponsePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemGetUserResponsePrivateValidationError) ErrorName() string {
	return "FilesystemGetUserResponsePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemGetUserResponsePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemGetUserResponsePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemGetUserResponsePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemGetUserResponsePrivateValidationError{}

// Validate checks the field values on FilesystemUpdateRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemUpdateRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemUpdateRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemUpdateRequestPrivateMultiError, or nil if none found.
func (m *FilesystemUpdateRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemUpdateRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemUpdateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemUpdateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemUpdateRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemUpdateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemUpdateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemUpdateRequestPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemUpdateRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemUpdateRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemUpdateRequestPrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemUpdateRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemUpdateRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemUpdateRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemUpdateRequestPrivateValidationError is the validation error
// returned by FilesystemUpdateRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemUpdateRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemUpdateRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemUpdateRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemUpdateRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemUpdateRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemUpdateRequestPrivateValidationError) ErrorName() string {
	return "FilesystemUpdateRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemUpdateRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemUpdateRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemUpdateRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemUpdateRequestPrivateValidationError{}

// Validate checks the field values on FilesystemUserStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemUserStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemUserStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemUserStatusPrivateMultiError, or nil if none found.
func (m *FilesystemUserStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemUserStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Password

	if len(errors) > 0 {
		return FilesystemUserStatusPrivateMultiError(errors)
	}

	return nil
}

// FilesystemUserStatusPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemUserStatusPrivate.ValidateAll() if
// the designated constraints aren't met.
type FilesystemUserStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemUserStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemUserStatusPrivateMultiError) AllErrors() []error { return m }

// FilesystemUserStatusPrivateValidationError is the validation error returned
// by FilesystemUserStatusPrivate.Validate if the designated constraints
// aren't met.
type FilesystemUserStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemUserStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemUserStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemUserStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemUserStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemUserStatusPrivateValidationError) ErrorName() string {
	return "FilesystemUserStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemUserStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemUserStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemUserStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemUserStatusPrivateValidationError{}

// Validate checks the field values on FilesystemIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemIdReferenceMultiError, or nil if none found.
func (m *FilesystemIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return FilesystemIdReferenceMultiError(errors)
	}

	return nil
}

// FilesystemIdReferenceMultiError is an error wrapping multiple validation
// errors returned by FilesystemIdReference.ValidateAll() if the designated
// constraints aren't met.
type FilesystemIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemIdReferenceMultiError) AllErrors() []error { return m }

// FilesystemIdReferenceValidationError is the validation error returned by
// FilesystemIdReference.Validate if the designated constraints aren't met.
type FilesystemIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemIdReferenceValidationError) ErrorName() string {
	return "FilesystemIdReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemIdReferenceValidationError{}

// Validate checks the field values on FilesystemPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FilesystemPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemPrivateMultiError, or nil if none found.
func (m *FilesystemPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemPrivateMultiError(errors)
	}

	return nil
}

// FilesystemPrivateMultiError is an error wrapping multiple validation errors
// returned by FilesystemPrivate.ValidateAll() if the designated constraints
// aren't met.
type FilesystemPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemPrivateMultiError) AllErrors() []error { return m }

// FilesystemPrivateValidationError is the validation error returned by
// FilesystemPrivate.Validate if the designated constraints aren't met.
type FilesystemPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemPrivateValidationError) ErrorName() string {
	return "FilesystemPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemPrivateValidationError{}

// Validate checks the field values on FilesystemMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMetadataPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMetadataPrivateMultiError, or nil if none found.
func (m *FilesystemMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Description

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemMetadataPrivateValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemMetadataPrivateValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemMetadataPrivateValidationError{
				field:  "UpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipQuotaCheck

	// no validation rules for SkipProductCheck

	// no validation rules for ClientType

	if len(errors) > 0 {
		return FilesystemMetadataPrivateMultiError(errors)
	}

	return nil
}

// FilesystemMetadataPrivateMultiError is an error wrapping multiple validation
// errors returned by FilesystemMetadataPrivate.ValidateAll() if the
// designated constraints aren't met.
type FilesystemMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMetadataPrivateMultiError) AllErrors() []error { return m }

// FilesystemMetadataPrivateValidationError is the validation error returned by
// FilesystemMetadataPrivate.Validate if the designated constraints aren't met.
type FilesystemMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMetadataPrivateValidationError) ErrorName() string {
	return "FilesystemMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMetadataPrivateValidationError{}

// Validate checks the field values on FilesystemSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemSpecPrivateMultiError, or nil if none found.
func (m *FilesystemSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemSpecPrivateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemSpecPrivateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemSpecPrivateValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StorageClass

	// no validation rules for FilesystemType

	// no validation rules for AccessModes

	// no validation rules for MountProtocol

	// no validation rules for Encrypted

	if all {
		switch v := interface{}(m.GetScheduler()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemSpecPrivateValidationError{
					field:  "Scheduler",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemSpecPrivateValidationError{
					field:  "Scheduler",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduler()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemSpecPrivateValidationError{
				field:  "Scheduler",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VolumePath

	if all {
		switch v := interface{}(m.GetSecurityGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemSpecPrivateValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemSpecPrivateValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemSpecPrivateValidationError{
				field:  "SecurityGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceType

	// no validation rules for Prefix

	if len(errors) > 0 {
		return FilesystemSpecPrivateMultiError(errors)
	}

	return nil
}

// FilesystemSpecPrivateMultiError is an error wrapping multiple validation
// errors returned by FilesystemSpecPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemSpecPrivateMultiError) AllErrors() []error { return m }

// FilesystemSpecPrivateValidationError is the validation error returned by
// FilesystemSpecPrivate.Validate if the designated constraints aren't met.
type FilesystemSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemSpecPrivateValidationError) ErrorName() string {
	return "FilesystemSpecPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemSpecPrivateValidationError{}

// Validate checks the field values on FilesystemSpecUpdatePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemSpecUpdatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSpecUpdatePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemSpecUpdatePrivateMultiError, or nil if none found.
func (m *FilesystemSpecUpdatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSpecUpdatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemSpecUpdatePrivateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemSpecUpdatePrivateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemSpecUpdatePrivateValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemSpecUpdatePrivateMultiError(errors)
	}

	return nil
}

// FilesystemSpecUpdatePrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemSpecUpdatePrivate.ValidateAll() if
// the designated constraints aren't met.
type FilesystemSpecUpdatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemSpecUpdatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemSpecUpdatePrivateMultiError) AllErrors() []error { return m }

// FilesystemSpecUpdatePrivateValidationError is the validation error returned
// by FilesystemSpecUpdatePrivate.Validate if the designated constraints
// aren't met.
type FilesystemSpecUpdatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemSpecUpdatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemSpecUpdatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemSpecUpdatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemSpecUpdatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemSpecUpdatePrivateValidationError) ErrorName() string {
	return "FilesystemSpecUpdatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemSpecUpdatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSpecUpdatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemSpecUpdatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemSpecUpdatePrivateValidationError{}

// Validate checks the field values on FilesystemSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemScheduleMultiError, or nil if none found.
func (m *FilesystemSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilesystemName

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemScheduleValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemScheduleValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemScheduleValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemScheduleValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemScheduleValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemScheduleValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemScheduleMultiError(errors)
	}

	return nil
}

// FilesystemScheduleMultiError is an error wrapping multiple validation errors
// returned by FilesystemSchedule.ValidateAll() if the designated constraints
// aren't met.
type FilesystemScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemScheduleMultiError) AllErrors() []error { return m }

// FilesystemScheduleValidationError is the validation error returned by
// FilesystemSchedule.Validate if the designated constraints aren't met.
type FilesystemScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemScheduleValidationError) ErrorName() string {
	return "FilesystemScheduleValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemScheduleValidationError{}

// Validate checks the field values on AssignedCluster with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssignedCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedCluster with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignedClusterMultiError, or nil if none found.
func (m *AssignedCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ClusterAddr

	// no validation rules for ClusterUUID

	// no validation rules for AccessEndpoint

	if m.ClusterVersion != nil {
		// no validation rules for ClusterVersion
	}

	if len(errors) > 0 {
		return AssignedClusterMultiError(errors)
	}

	return nil
}

// AssignedClusterMultiError is an error wrapping multiple validation errors
// returned by AssignedCluster.ValidateAll() if the designated constraints
// aren't met.
type AssignedClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedClusterMultiError) AllErrors() []error { return m }

// AssignedClusterValidationError is the validation error returned by
// AssignedCluster.Validate if the designated constraints aren't met.
type AssignedClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedClusterValidationError) ErrorName() string { return "AssignedClusterValidationError" }

// Error satisfies the builtin error interface
func (e AssignedClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedClusterValidationError{}

// Validate checks the field values on AssignedNamespace with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssignedNamespace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignedNamespace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignedNamespaceMultiError, or nil if none found.
func (m *AssignedNamespace) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignedNamespace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CredentialsPath

	if len(errors) > 0 {
		return AssignedNamespaceMultiError(errors)
	}

	return nil
}

// AssignedNamespaceMultiError is an error wrapping multiple validation errors
// returned by AssignedNamespace.ValidateAll() if the designated constraints
// aren't met.
type AssignedNamespaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignedNamespaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignedNamespaceMultiError) AllErrors() []error { return m }

// AssignedNamespaceValidationError is the validation error returned by
// AssignedNamespace.Validate if the designated constraints aren't met.
type AssignedNamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignedNamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignedNamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignedNamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignedNamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignedNamespaceValidationError) ErrorName() string {
	return "AssignedNamespaceValidationError"
}

// Error satisfies the builtin error interface
func (e AssignedNamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignedNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignedNamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignedNamespaceValidationError{}

// Validate checks the field values on FilesystemMountStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMountStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMountStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMountStatusPrivateMultiError, or nil if none found.
func (m *FilesystemMountStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMountStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ClusterAddr

	// no validation rules for Namespace

	// no validation rules for Username

	// no validation rules for FilesystemName

	if m.ClusterVersion != nil {
		// no validation rules for ClusterVersion
	}

	if len(errors) > 0 {
		return FilesystemMountStatusPrivateMultiError(errors)
	}

	return nil
}

// FilesystemMountStatusPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemMountStatusPrivate.ValidateAll() if
// the designated constraints aren't met.
type FilesystemMountStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMountStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMountStatusPrivateMultiError) AllErrors() []error { return m }

// FilesystemMountStatusPrivateValidationError is the validation error returned
// by FilesystemMountStatusPrivate.Validate if the designated constraints
// aren't met.
type FilesystemMountStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMountStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMountStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMountStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMountStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMountStatusPrivateValidationError) ErrorName() string {
	return "FilesystemMountStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMountStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMountStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMountStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMountStatusPrivateValidationError{}

// Validate checks the field values on FilesystemNamespaceStatusPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemNamespaceStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemNamespaceStatusPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemNamespaceStatusPrivateMultiError, or nil if none found.
func (m *FilesystemNamespaceStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemNamespaceStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for User

	// no validation rules for Password

	if len(errors) > 0 {
		return FilesystemNamespaceStatusPrivateMultiError(errors)
	}

	return nil
}

// FilesystemNamespaceStatusPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemNamespaceStatusPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemNamespaceStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemNamespaceStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemNamespaceStatusPrivateMultiError) AllErrors() []error { return m }

// FilesystemNamespaceStatusPrivateValidationError is the validation error
// returned by FilesystemNamespaceStatusPrivate.Validate if the designated
// constraints aren't met.
type FilesystemNamespaceStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemNamespaceStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemNamespaceStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemNamespaceStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemNamespaceStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemNamespaceStatusPrivateValidationError) ErrorName() string {
	return "FilesystemNamespaceStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemNamespaceStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemNamespaceStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemNamespaceStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemNamespaceStatusPrivateValidationError{}

// Validate checks the field values on FilesystemDeleteRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemDeleteRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemDeleteRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemDeleteRequestPrivateMultiError, or nil if none found.
func (m *FilesystemDeleteRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemDeleteRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemDeleteRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemDeleteRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemDeleteRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemDeleteRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemDeleteRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemDeleteRequestPrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemDeleteRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemDeleteRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemDeleteRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemDeleteRequestPrivateValidationError is the validation error
// returned by FilesystemDeleteRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemDeleteRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemDeleteRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemDeleteRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemDeleteRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemDeleteRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemDeleteRequestPrivateValidationError) ErrorName() string {
	return "FilesystemDeleteRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemDeleteRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemDeleteRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemDeleteRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemDeleteRequestPrivateValidationError{}

// Validate checks the field values on FilesystemCreateRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemCreateRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemCreateRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemCreateRequestPrivateMultiError, or nil if none found.
func (m *FilesystemCreateRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemCreateRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemCreateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemCreateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemCreateRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemCreateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemCreateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemCreateRequestPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemCreateRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemCreateRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemCreateRequestPrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemCreateRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemCreateRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemCreateRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemCreateRequestPrivateValidationError is the validation error
// returned by FilesystemCreateRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemCreateRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemCreateRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemCreateRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemCreateRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemCreateRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemCreateRequestPrivateValidationError) ErrorName() string {
	return "FilesystemCreateRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemCreateRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemCreateRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemCreateRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemCreateRequestPrivateValidationError{}

// Validate checks the field values on FilesystemGetRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemGetRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemGetRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemGetRequestPrivateMultiError, or nil if none found.
func (m *FilesystemGetRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemGetRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemGetRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemGetRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemGetRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemGetRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemGetRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemGetRequestPrivate.ValidateAll() if
// the designated constraints aren't met.
type FilesystemGetRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemGetRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemGetRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemGetRequestPrivateValidationError is the validation error returned
// by FilesystemGetRequestPrivate.Validate if the designated constraints
// aren't met.
type FilesystemGetRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemGetRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemGetRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemGetRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemGetRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemGetRequestPrivateValidationError) ErrorName() string {
	return "FilesystemGetRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemGetRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemGetRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemGetRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemGetRequestPrivateValidationError{}

// Validate checks the field values on FilesystemInOrgGetRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemInOrgGetRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemInOrgGetRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemInOrgGetRequestPrivateMultiError, or nil if none found.
func (m *FilesystemInOrgGetRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemInOrgGetRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ClusterId

	// no validation rules for NamespaceCredsPath

	if len(errors) > 0 {
		return FilesystemInOrgGetRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemInOrgGetRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemInOrgGetRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemInOrgGetRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemInOrgGetRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemInOrgGetRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemInOrgGetRequestPrivateValidationError is the validation error
// returned by FilesystemInOrgGetRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemInOrgGetRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemInOrgGetRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemInOrgGetRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemInOrgGetRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemInOrgGetRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemInOrgGetRequestPrivateValidationError) ErrorName() string {
	return "FilesystemInOrgGetRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemInOrgGetRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemInOrgGetRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemInOrgGetRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemInOrgGetRequestPrivateValidationError{}

// Validate checks the field values on FilesystemOrgsIsExistsResponsePrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FilesystemOrgsIsExistsResponsePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgsIsExistsResponsePrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemOrgsIsExistsResponsePrivateMultiError, or nil if none found.
func (m *FilesystemOrgsIsExistsResponsePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgsIsExistsResponsePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return FilesystemOrgsIsExistsResponsePrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgsIsExistsResponsePrivateMultiError is an error wrapping
// multiple validation errors returned by
// FilesystemOrgsIsExistsResponsePrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgsIsExistsResponsePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgsIsExistsResponsePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgsIsExistsResponsePrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgsIsExistsResponsePrivateValidationError is the validation error
// returned by FilesystemOrgsIsExistsResponsePrivate.Validate if the
// designated constraints aren't met.
type FilesystemOrgsIsExistsResponsePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgsIsExistsResponsePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgsIsExistsResponsePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgsIsExistsResponsePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgsIsExistsResponsePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgsIsExistsResponsePrivateValidationError) ErrorName() string {
	return "FilesystemOrgsIsExistsResponsePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgsIsExistsResponsePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgsIsExistsResponsePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgsIsExistsResponsePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgsIsExistsResponsePrivateValidationError{}

// Validate checks the field values on FilesystemScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemScheduleRequestMultiError, or nil if none found.
func (m *FilesystemScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	for idx, item := range m.GetAssignments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilesystemScheduleRequestValidationError{
						field:  fmt.Sprintf("Assignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilesystemScheduleRequestValidationError{
						field:  fmt.Sprintf("Assignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilesystemScheduleRequestValidationError{
					field:  fmt.Sprintf("Assignments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRequestSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemScheduleRequestValidationError{
					field:  "RequestSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemScheduleRequestValidationError{
					field:  "RequestSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemScheduleRequestValidationError{
				field:  "RequestSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemScheduleRequestMultiError(errors)
	}

	return nil
}

// FilesystemScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by FilesystemScheduleRequest.ValidateAll() if the
// designated constraints aren't met.
type FilesystemScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemScheduleRequestMultiError) AllErrors() []error { return m }

// FilesystemScheduleRequestValidationError is the validation error returned by
// FilesystemScheduleRequest.Validate if the designated constraints aren't met.
type FilesystemScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemScheduleRequestValidationError) ErrorName() string {
	return "FilesystemScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemScheduleRequestValidationError{}

// Validate checks the field values on BucketScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketScheduleRequestMultiError, or nil if none found.
func (m *BucketScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketScheduleRequestValidationError{
					field:  "RequestSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketScheduleRequestValidationError{
					field:  "RequestSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketScheduleRequestValidationError{
				field:  "RequestSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return BucketScheduleRequestMultiError(errors)
	}

	return nil
}

// BucketScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by BucketScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketScheduleRequestMultiError) AllErrors() []error { return m }

// BucketScheduleRequestValidationError is the validation error returned by
// BucketScheduleRequest.Validate if the designated constraints aren't met.
type BucketScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketScheduleRequestValidationError) ErrorName() string {
	return "BucketScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketScheduleRequestValidationError{}

// Validate checks the field values on BucketScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketScheduleResponseMultiError, or nil if none found.
func (m *BucketScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketScheduleResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return BucketScheduleResponseMultiError(errors)
	}

	return nil
}

// BucketScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by BucketScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type BucketScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketScheduleResponseMultiError) AllErrors() []error { return m }

// BucketScheduleResponseValidationError is the validation error returned by
// BucketScheduleResponse.Validate if the designated constraints aren't met.
type BucketScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketScheduleResponseValidationError) ErrorName() string {
	return "BucketScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BucketScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketScheduleResponseValidationError{}

// Validate checks the field values on ResourceSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceScheduleMultiError, or nil if none found.
func (m *ResourceSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ClusterAddr

	// no validation rules for ClusterUUID

	// no validation rules for ClusterVersion

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ResourceScheduleMultiError(errors)
	}

	return nil
}

// ResourceScheduleMultiError is an error wrapping multiple validation errors
// returned by ResourceSchedule.ValidateAll() if the designated constraints
// aren't met.
type ResourceScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceScheduleMultiError) AllErrors() []error { return m }

// ResourceScheduleValidationError is the validation error returned by
// ResourceSchedule.Validate if the designated constraints aren't met.
type ResourceScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceScheduleValidationError) ErrorName() string { return "ResourceScheduleValidationError" }

// Error satisfies the builtin error interface
func (e ResourceScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceScheduleValidationError{}

// Validate checks the field values on FilesystemScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemScheduleResponseMultiError, or nil if none found.
func (m *FilesystemScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemScheduleResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NewSchedule

	if len(errors) > 0 {
		return FilesystemScheduleResponseMultiError(errors)
	}

	return nil
}

// FilesystemScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by FilesystemScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type FilesystemScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemScheduleResponseMultiError) AllErrors() []error { return m }

// FilesystemScheduleResponseValidationError is the validation error returned
// by FilesystemScheduleResponse.Validate if the designated constraints aren't met.
type FilesystemScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemScheduleResponseValidationError) ErrorName() string {
	return "FilesystemScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemScheduleResponseValidationError{}

// Validate checks the field values on RegisterAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAgentRequestMultiError, or nil if none found.
func (m *RegisterAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Name

	// no validation rules for IpAddr

	if len(errors) > 0 {
		return RegisterAgentRequestMultiError(errors)
	}

	return nil
}

// RegisterAgentRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAgentRequestMultiError) AllErrors() []error { return m }

// RegisterAgentRequestValidationError is the validation error returned by
// RegisterAgentRequest.Validate if the designated constraints aren't met.
type RegisterAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAgentRequestValidationError) ErrorName() string {
	return "RegisterAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAgentRequestValidationError{}

// Validate checks the field values on FilesystemOrgsGetRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemOrgsGetRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgsGetRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemOrgsGetRequestPrivateMultiError, or nil if none found.
func (m *FilesystemOrgsGetRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgsGetRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Prefix

	if len(errors) > 0 {
		return FilesystemOrgsGetRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgsGetRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemOrgsGetRequestPrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemOrgsGetRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgsGetRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgsGetRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgsGetRequestPrivateValidationError is the validation error
// returned by FilesystemOrgsGetRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgsGetRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgsGetRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgsGetRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgsGetRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgsGetRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgsGetRequestPrivateValidationError) ErrorName() string {
	return "FilesystemOrgsGetRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgsGetRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgsGetRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgsGetRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgsGetRequestPrivateValidationError{}

// Validate checks the field values on FilesystemOrgsIsExistsRequestPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FilesystemOrgsIsExistsRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgsIsExistsRequestPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemOrgsIsExistsRequestPrivateMultiError, or nil if none found.
func (m *FilesystemOrgsIsExistsRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgsIsExistsRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Name

	// no validation rules for Prefix

	if len(errors) > 0 {
		return FilesystemOrgsIsExistsRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgsIsExistsRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemOrgsIsExistsRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgsIsExistsRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgsIsExistsRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgsIsExistsRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgsIsExistsRequestPrivateValidationError is the validation error
// returned by FilesystemOrgsIsExistsRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgsIsExistsRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgsIsExistsRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgsIsExistsRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgsIsExistsRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgsIsExistsRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgsIsExistsRequestPrivateValidationError) ErrorName() string {
	return "FilesystemOrgsIsExistsRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgsIsExistsRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgsIsExistsRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgsIsExistsRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgsIsExistsRequestPrivateValidationError{}

// Validate checks the field values on FilesystemOrgsListRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemOrgsListRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgsListRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemOrgsListRequestPrivateMultiError, or nil if none found.
func (m *FilesystemOrgsListRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgsListRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgsListRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgsListRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgsListRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterId

	// no validation rules for Prefix

	if len(errors) > 0 {
		return FilesystemOrgsListRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgsListRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemOrgsListRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgsListRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgsListRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgsListRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgsListRequestPrivateValidationError is the validation error
// returned by FilesystemOrgsListRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgsListRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgsListRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgsListRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgsListRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgsListRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgsListRequestPrivateValidationError) ErrorName() string {
	return "FilesystemOrgsListRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgsListRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgsListRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgsListRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgsListRequestPrivateValidationError{}

// Validate checks the field values on FilesystemUserCreateOrGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemUserCreateOrGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemUserCreateOrGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemUserCreateOrGetRequestMultiError, or nil if none found.
func (m *FilesystemUserCreateOrGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemUserCreateOrGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterUUID

	// no validation rules for NamespaceName

	// no validation rules for UserCredsPath

	// no validation rules for UserName

	// no validation rules for Password

	// no validation rules for NamespaceId

	if len(errors) > 0 {
		return FilesystemUserCreateOrGetRequestMultiError(errors)
	}

	return nil
}

// FilesystemUserCreateOrGetRequestMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemUserCreateOrGetRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemUserCreateOrGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemUserCreateOrGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemUserCreateOrGetRequestMultiError) AllErrors() []error { return m }

// FilesystemUserCreateOrGetRequestValidationError is the validation error
// returned by FilesystemUserCreateOrGetRequest.Validate if the designated
// constraints aren't met.
type FilesystemUserCreateOrGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemUserCreateOrGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemUserCreateOrGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemUserCreateOrGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemUserCreateOrGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemUserCreateOrGetRequestValidationError) ErrorName() string {
	return "FilesystemUserCreateOrGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemUserCreateOrGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemUserCreateOrGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemUserCreateOrGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemUserCreateOrGetRequestValidationError{}

// Validate checks the field values on FilesystemUserResponsePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemUserResponsePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemUserResponsePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemUserResponsePrivateMultiError, or nil if none found.
func (m *FilesystemUserResponsePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemUserResponsePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Password

	if len(errors) > 0 {
		return FilesystemUserResponsePrivateMultiError(errors)
	}

	return nil
}

// FilesystemUserResponsePrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemUserResponsePrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemUserResponsePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemUserResponsePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemUserResponsePrivateMultiError) AllErrors() []error { return m }

// FilesystemUserResponsePrivateValidationError is the validation error
// returned by FilesystemUserResponsePrivate.Validate if the designated
// constraints aren't met.
type FilesystemUserResponsePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemUserResponsePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemUserResponsePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemUserResponsePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemUserResponsePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemUserResponsePrivateValidationError) ErrorName() string {
	return "FilesystemUserResponsePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemUserResponsePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemUserResponsePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemUserResponsePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemUserResponsePrivateValidationError{}

// Validate checks the field values on FilesystemOrgsResponsePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemOrgsResponsePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgsResponsePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemOrgsResponsePrivateMultiError, or nil if none found.
func (m *FilesystemOrgsResponsePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgsResponsePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrg() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilesystemOrgsResponsePrivateValidationError{
						field:  fmt.Sprintf("Org[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilesystemOrgsResponsePrivateValidationError{
						field:  fmt.Sprintf("Org[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilesystemOrgsResponsePrivateValidationError{
					field:  fmt.Sprintf("Org[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FilesystemOrgsResponsePrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgsResponsePrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemOrgsResponsePrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemOrgsResponsePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgsResponsePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgsResponsePrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgsResponsePrivateValidationError is the validation error
// returned by FilesystemOrgsResponsePrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgsResponsePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgsResponsePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgsResponsePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgsResponsePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgsResponsePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgsResponsePrivateValidationError) ErrorName() string {
	return "FilesystemOrgsResponsePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgsResponsePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgsResponsePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgsResponsePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgsResponsePrivateValidationError{}

// Validate checks the field values on FilesystemOrgsPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemOrgsPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgsPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemOrgsPrivateMultiError, or nil if none found.
func (m *FilesystemOrgsPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgsPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return FilesystemOrgsPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgsPrivateMultiError is an error wrapping multiple validation
// errors returned by FilesystemOrgsPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgsPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgsPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgsPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgsPrivateValidationError is the validation error returned by
// FilesystemOrgsPrivate.Validate if the designated constraints aren't met.
type FilesystemOrgsPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgsPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgsPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgsPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgsPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgsPrivateValidationError) ErrorName() string {
	return "FilesystemOrgsPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgsPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgsPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgsPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgsPrivateValidationError{}

// Validate checks the field values on FilesystemAgent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FilesystemAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemAgent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemAgentMultiError, or nil if none found.
func (m *FilesystemAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for ClientId

	// no validation rules for Name

	// no validation rules for CustomStatus

	// no validation rules for PredefinedStatus

	if len(errors) > 0 {
		return FilesystemAgentMultiError(errors)
	}

	return nil
}

// FilesystemAgentMultiError is an error wrapping multiple validation errors
// returned by FilesystemAgent.ValidateAll() if the designated constraints
// aren't met.
type FilesystemAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemAgentMultiError) AllErrors() []error { return m }

// FilesystemAgentValidationError is the validation error returned by
// FilesystemAgent.Validate if the designated constraints aren't met.
type FilesystemAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemAgentValidationError) ErrorName() string { return "FilesystemAgentValidationError" }

// Error satisfies the builtin error interface
func (e FilesystemAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemAgentValidationError{}

// Validate checks the field values on DeRegisterAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeRegisterAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeRegisterAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeRegisterAgentRequestMultiError, or nil if none found.
func (m *DeRegisterAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeRegisterAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for ClientId

	if len(errors) > 0 {
		return DeRegisterAgentRequestMultiError(errors)
	}

	return nil
}

// DeRegisterAgentRequestMultiError is an error wrapping multiple validation
// errors returned by DeRegisterAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeRegisterAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeRegisterAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeRegisterAgentRequestMultiError) AllErrors() []error { return m }

// DeRegisterAgentRequestValidationError is the validation error returned by
// DeRegisterAgentRequest.Validate if the designated constraints aren't met.
type DeRegisterAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeRegisterAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeRegisterAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeRegisterAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeRegisterAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeRegisterAgentRequestValidationError) ErrorName() string {
	return "DeRegisterAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeRegisterAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeRegisterAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeRegisterAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeRegisterAgentRequestValidationError{}

// Validate checks the field values on GetRegisterAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRegisterAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegisterAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRegisterAgentRequestMultiError, or nil if none found.
func (m *GetRegisterAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegisterAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for ClientId

	if len(errors) > 0 {
		return GetRegisterAgentRequestMultiError(errors)
	}

	return nil
}

// GetRegisterAgentRequestMultiError is an error wrapping multiple validation
// errors returned by GetRegisterAgentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRegisterAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegisterAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegisterAgentRequestMultiError) AllErrors() []error { return m }

// GetRegisterAgentRequestValidationError is the validation error returned by
// GetRegisterAgentRequest.Validate if the designated constraints aren't met.
type GetRegisterAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegisterAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegisterAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegisterAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegisterAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegisterAgentRequestValidationError) ErrorName() string {
	return "GetRegisterAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegisterAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegisterAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegisterAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegisterAgentRequestValidationError{}

// Validate checks the field values on ListRegisteredAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegisteredAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegisteredAgentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegisteredAgentRequestMultiError, or nil if none found.
func (m *ListRegisteredAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisteredAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return ListRegisteredAgentRequestMultiError(errors)
	}

	return nil
}

// ListRegisteredAgentRequestMultiError is an error wrapping multiple
// validation errors returned by ListRegisteredAgentRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRegisteredAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisteredAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisteredAgentRequestMultiError) AllErrors() []error { return m }

// ListRegisteredAgentRequestValidationError is the validation error returned
// by ListRegisteredAgentRequest.Validate if the designated constraints aren't met.
type ListRegisteredAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisteredAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisteredAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisteredAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisteredAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisteredAgentRequestValidationError) ErrorName() string {
	return "ListRegisteredAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisteredAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisteredAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisteredAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisteredAgentRequestValidationError{}

// Validate checks the field values on ListClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClusterRequestMultiError, or nil if none found.
func (m *ListClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListClusterRequestMultiError(errors)
	}

	return nil
}

// ListClusterRequestMultiError is an error wrapping multiple validation errors
// returned by ListClusterRequest.ValidateAll() if the designated constraints
// aren't met.
type ListClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClusterRequestMultiError) AllErrors() []error { return m }

// ListClusterRequestValidationError is the validation error returned by
// ListClusterRequest.Validate if the designated constraints aren't met.
type ListClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterRequestValidationError) ErrorName() string {
	return "ListClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterRequestValidationError{}

// Validate checks the field values on FilesystemStorageClusters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemStorageClusters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemStorageClusters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemStorageClustersMultiError, or nil if none found.
func (m *FilesystemStorageClusters) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemStorageClusters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Name

	// no validation rules for Location

	// no validation rules for VendorType

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCapacity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemStorageClustersValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemStorageClustersValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemStorageClustersValidationError{
				field:  "Capacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Health

	if len(errors) > 0 {
		return FilesystemStorageClustersMultiError(errors)
	}

	return nil
}

// FilesystemStorageClustersMultiError is an error wrapping multiple validation
// errors returned by FilesystemStorageClusters.ValidateAll() if the
// designated constraints aren't met.
type FilesystemStorageClustersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemStorageClustersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemStorageClustersMultiError) AllErrors() []error { return m }

// FilesystemStorageClustersValidationError is the validation error returned by
// FilesystemStorageClusters.Validate if the designated constraints aren't met.
type FilesystemStorageClustersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemStorageClustersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemStorageClustersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemStorageClustersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemStorageClustersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemStorageClustersValidationError) ErrorName() string {
	return "FilesystemStorageClustersValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemStorageClustersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemStorageClusters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemStorageClustersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemStorageClustersValidationError{}

// Validate checks the field values on StorageClusterCapacity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageClusterCapacity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageClusterCapacity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageClusterCapacityMultiError, or nil if none found.
func (m *StorageClusterCapacity) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageClusterCapacity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalBytes

	// no validation rules for AvailableBytes

	if len(errors) > 0 {
		return StorageClusterCapacityMultiError(errors)
	}

	return nil
}

// StorageClusterCapacityMultiError is an error wrapping multiple validation
// errors returned by StorageClusterCapacity.ValidateAll() if the designated
// constraints aren't met.
type StorageClusterCapacityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageClusterCapacityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageClusterCapacityMultiError) AllErrors() []error { return m }

// StorageClusterCapacityValidationError is the validation error returned by
// StorageClusterCapacity.Validate if the designated constraints aren't met.
type StorageClusterCapacityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageClusterCapacityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageClusterCapacityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageClusterCapacityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageClusterCapacityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageClusterCapacityValidationError) ErrorName() string {
	return "StorageClusterCapacityValidationError"
}

// Error satisfies the builtin error interface
func (e StorageClusterCapacityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageClusterCapacity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageClusterCapacityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageClusterCapacityValidationError{}

// Validate checks the field values on BucketFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BucketFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BucketFilterMultiError, or
// nil if none found.
func (m *BucketFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for BucketId

	if len(errors) > 0 {
		return BucketFilterMultiError(errors)
	}

	return nil
}

// BucketFilterMultiError is an error wrapping multiple validation errors
// returned by BucketFilter.ValidateAll() if the designated constraints aren't met.
type BucketFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketFilterMultiError) AllErrors() []error { return m }

// BucketFilterValidationError is the validation error returned by
// BucketFilter.Validate if the designated constraints aren't met.
type BucketFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketFilterValidationError) ErrorName() string { return "BucketFilterValidationError" }

// Error satisfies the builtin error interface
func (e BucketFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketFilterValidationError{}

// Validate checks the field values on BucketCapacity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BucketCapacity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketCapacity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BucketCapacityMultiError,
// or nil if none found.
func (m *BucketCapacity) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketCapacity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCapacity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketCapacityValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketCapacityValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketCapacityValidationError{
				field:  "Capacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketCapacityMultiError(errors)
	}

	return nil
}

// BucketCapacityMultiError is an error wrapping multiple validation errors
// returned by BucketCapacity.ValidateAll() if the designated constraints
// aren't met.
type BucketCapacityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketCapacityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketCapacityMultiError) AllErrors() []error { return m }

// BucketCapacityValidationError is the validation error returned by
// BucketCapacity.Validate if the designated constraints aren't met.
type BucketCapacityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketCapacityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketCapacityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketCapacityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketCapacityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketCapacityValidationError) ErrorName() string { return "BucketCapacityValidationError" }

// Error satisfies the builtin error interface
func (e BucketCapacityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketCapacity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketCapacityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketCapacityValidationError{}

// Validate checks the field values on Capacity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Capacity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Capacity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CapacityMultiError, or nil
// if none found.
func (m *Capacity) ValidateAll() error {
	return m.validate(true)
}

func (m *Capacity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalBytes

	// no validation rules for AvailableBytes

	if len(errors) > 0 {
		return CapacityMultiError(errors)
	}

	return nil
}

// CapacityMultiError is an error wrapping multiple validation errors returned
// by Capacity.ValidateAll() if the designated constraints aren't met.
type CapacityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapacityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapacityMultiError) AllErrors() []error { return m }

// CapacityValidationError is the validation error returned by
// Capacity.Validate if the designated constraints aren't met.
type CapacityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapacityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapacityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapacityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapacityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapacityValidationError) ErrorName() string { return "CapacityValidationError" }

// Error satisfies the builtin error interface
func (e CapacityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapacity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapacityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapacityValidationError{}

// Validate checks the field values on CreateBucketUserParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBucketUserParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBucketUserParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBucketUserParamsMultiError, or nil if none found.
func (m *CreateBucketUserParams) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBucketUserParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetCreateParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBucketUserParamsValidationError{
					field:  "CreateParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBucketUserParamsValidationError{
					field:  "CreateParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBucketUserParamsValidationError{
				field:  "CreateParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBucketUserParamsMultiError(errors)
	}

	return nil
}

// CreateBucketUserParamsMultiError is an error wrapping multiple validation
// errors returned by CreateBucketUserParams.ValidateAll() if the designated
// constraints aren't met.
type CreateBucketUserParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBucketUserParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBucketUserParamsMultiError) AllErrors() []error { return m }

// CreateBucketUserParamsValidationError is the validation error returned by
// CreateBucketUserParams.Validate if the designated constraints aren't met.
type CreateBucketUserParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBucketUserParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBucketUserParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBucketUserParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBucketUserParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBucketUserParamsValidationError) ErrorName() string {
	return "CreateBucketUserParamsValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBucketUserParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBucketUserParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBucketUserParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBucketUserParamsValidationError{}

// Validate checks the field values on BucketUserParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BucketUserParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketUserParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketUserParamsMultiError, or nil if none found.
func (m *BucketUserParams) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketUserParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ClusterUUID

	// no validation rules for UserId

	// no validation rules for Password

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketUserParamsValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketUserParamsValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketUserParamsValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecurityGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketUserParamsValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketUserParamsValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketUserParamsValidationError{
				field:  "SecurityGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterName

	// no validation rules for AccessEndpoint

	if len(errors) > 0 {
		return BucketUserParamsMultiError(errors)
	}

	return nil
}

// BucketUserParamsMultiError is an error wrapping multiple validation errors
// returned by BucketUserParams.ValidateAll() if the designated constraints
// aren't met.
type BucketUserParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketUserParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketUserParamsMultiError) AllErrors() []error { return m }

// BucketUserParamsValidationError is the validation error returned by
// BucketUserParams.Validate if the designated constraints aren't met.
type BucketUserParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketUserParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketUserParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketUserParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketUserParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketUserParamsValidationError) ErrorName() string { return "BucketUserParamsValidationError" }

// Error satisfies the builtin error interface
func (e BucketUserParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketUserParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketUserParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketUserParamsValidationError{}

// Validate checks the field values on BucketUpdateUserPolicyParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketUpdateUserPolicyParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketUpdateUserPolicyParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketUpdateUserPolicyParamsMultiError, or nil if none found.
func (m *BucketUpdateUserPolicyParams) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketUpdateUserPolicyParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrincipalId

	// no validation rules for ClusterUUID

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketUpdateUserPolicyParamsValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketUpdateUserPolicyParamsValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketUpdateUserPolicyParamsValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecurityGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketUpdateUserPolicyParamsValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketUpdateUserPolicyParamsValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketUpdateUserPolicyParamsValidationError{
				field:  "SecurityGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterName

	// no validation rules for AccessEndpoint

	if len(errors) > 0 {
		return BucketUpdateUserPolicyParamsMultiError(errors)
	}

	return nil
}

// BucketUpdateUserPolicyParamsMultiError is an error wrapping multiple
// validation errors returned by BucketUpdateUserPolicyParams.ValidateAll() if
// the designated constraints aren't met.
type BucketUpdateUserPolicyParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketUpdateUserPolicyParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketUpdateUserPolicyParamsMultiError) AllErrors() []error { return m }

// BucketUpdateUserPolicyParamsValidationError is the validation error returned
// by BucketUpdateUserPolicyParams.Validate if the designated constraints
// aren't met.
type BucketUpdateUserPolicyParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketUpdateUserPolicyParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketUpdateUserPolicyParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketUpdateUserPolicyParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketUpdateUserPolicyParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketUpdateUserPolicyParamsValidationError) ErrorName() string {
	return "BucketUpdateUserPolicyParamsValidationError"
}

// Error satisfies the builtin error interface
func (e BucketUpdateUserPolicyParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketUpdateUserPolicyParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketUpdateUserPolicyParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketUpdateUserPolicyParamsValidationError{}

// Validate checks the field values on UpdateBucketUserPolicyParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBucketUserPolicyParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBucketUserPolicyParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBucketUserPolicyParamsMultiError, or nil if none found.
func (m *UpdateBucketUserPolicyParams) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBucketUserPolicyParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetUpdateParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBucketUserPolicyParamsValidationError{
					field:  "UpdateParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBucketUserPolicyParamsValidationError{
					field:  "UpdateParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBucketUserPolicyParamsValidationError{
				field:  "UpdateParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBucketUserPolicyParamsMultiError(errors)
	}

	return nil
}

// UpdateBucketUserPolicyParamsMultiError is an error wrapping multiple
// validation errors returned by UpdateBucketUserPolicyParams.ValidateAll() if
// the designated constraints aren't met.
type UpdateBucketUserPolicyParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBucketUserPolicyParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBucketUserPolicyParamsMultiError) AllErrors() []error { return m }

// UpdateBucketUserPolicyParamsValidationError is the validation error returned
// by UpdateBucketUserPolicyParams.Validate if the designated constraints
// aren't met.
type UpdateBucketUserPolicyParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBucketUserPolicyParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBucketUserPolicyParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBucketUserPolicyParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBucketUserPolicyParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBucketUserPolicyParamsValidationError) ErrorName() string {
	return "UpdateBucketUserPolicyParamsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBucketUserPolicyParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBucketUserPolicyParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBucketUserPolicyParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBucketUserPolicyParamsValidationError{}

// Validate checks the field values on BucketUpdateUserCredsParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketUpdateUserCredsParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketUpdateUserCredsParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketUpdateUserCredsParamsMultiError, or nil if none found.
func (m *BucketUpdateUserCredsParams) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketUpdateUserCredsParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrincipalId

	// no validation rules for ClusterUUID

	// no validation rules for UserId

	// no validation rules for Password

	if len(errors) > 0 {
		return BucketUpdateUserCredsParamsMultiError(errors)
	}

	return nil
}

// BucketUpdateUserCredsParamsMultiError is an error wrapping multiple
// validation errors returned by BucketUpdateUserCredsParams.ValidateAll() if
// the designated constraints aren't met.
type BucketUpdateUserCredsParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketUpdateUserCredsParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketUpdateUserCredsParamsMultiError) AllErrors() []error { return m }

// BucketUpdateUserCredsParamsValidationError is the validation error returned
// by BucketUpdateUserCredsParams.Validate if the designated constraints
// aren't met.
type BucketUpdateUserCredsParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketUpdateUserCredsParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketUpdateUserCredsParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketUpdateUserCredsParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketUpdateUserCredsParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketUpdateUserCredsParamsValidationError) ErrorName() string {
	return "BucketUpdateUserCredsParamsValidationError"
}

// Error satisfies the builtin error interface
func (e BucketUpdateUserCredsParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketUpdateUserCredsParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketUpdateUserCredsParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketUpdateUserCredsParamsValidationError{}

// Validate checks the field values on UpdateBucketUserCredsParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBucketUserCredsParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBucketUserCredsParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBucketUserCredsParamsMultiError, or nil if none found.
func (m *UpdateBucketUserCredsParams) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBucketUserCredsParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetUpdateParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBucketUserCredsParamsValidationError{
					field:  "UpdateParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBucketUserCredsParamsValidationError{
					field:  "UpdateParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBucketUserCredsParamsValidationError{
				field:  "UpdateParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBucketUserCredsParamsMultiError(errors)
	}

	return nil
}

// UpdateBucketUserCredsParamsMultiError is an error wrapping multiple
// validation errors returned by UpdateBucketUserCredsParams.ValidateAll() if
// the designated constraints aren't met.
type UpdateBucketUserCredsParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBucketUserCredsParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBucketUserCredsParamsMultiError) AllErrors() []error { return m }

// UpdateBucketUserCredsParamsValidationError is the validation error returned
// by UpdateBucketUserCredsParams.Validate if the designated constraints
// aren't met.
type UpdateBucketUserCredsParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBucketUserCredsParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBucketUserCredsParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBucketUserCredsParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBucketUserCredsParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBucketUserCredsParamsValidationError) ErrorName() string {
	return "UpdateBucketUserCredsParamsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBucketUserCredsParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBucketUserCredsParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBucketUserCredsParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBucketUserCredsParamsValidationError{}

// Validate checks the field values on DeleteBucketUserParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBucketUserParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBucketUserParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBucketUserParamsMultiError, or nil if none found.
func (m *DeleteBucketUserParams) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBucketUserParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ClusterId

	// no validation rules for PrincipalId

	if len(errors) > 0 {
		return DeleteBucketUserParamsMultiError(errors)
	}

	return nil
}

// DeleteBucketUserParamsMultiError is an error wrapping multiple validation
// errors returned by DeleteBucketUserParams.ValidateAll() if the designated
// constraints aren't met.
type DeleteBucketUserParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBucketUserParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBucketUserParamsMultiError) AllErrors() []error { return m }

// DeleteBucketUserParamsValidationError is the validation error returned by
// DeleteBucketUserParams.Validate if the designated constraints aren't met.
type DeleteBucketUserParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBucketUserParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBucketUserParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBucketUserParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBucketUserParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBucketUserParamsValidationError) ErrorName() string {
	return "DeleteBucketUserParamsValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBucketUserParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBucketUserParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBucketUserParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBucketUserParamsValidationError{}

// Validate checks the field values on BucketPrincipal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BucketPrincipal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketPrincipal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketPrincipalMultiError, or nil if none found.
func (m *BucketPrincipal) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketPrincipal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for PrincipalId

	// no validation rules for AccessEndpoint

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketPrincipalValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketPrincipalValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketPrincipalValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return BucketPrincipalMultiError(errors)
	}

	return nil
}

// BucketPrincipalMultiError is an error wrapping multiple validation errors
// returned by BucketPrincipal.ValidateAll() if the designated constraints
// aren't met.
type BucketPrincipalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketPrincipalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketPrincipalMultiError) AllErrors() []error { return m }

// BucketPrincipalValidationError is the validation error returned by
// BucketPrincipal.Validate if the designated constraints aren't met.
type BucketPrincipalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketPrincipalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketPrincipalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketPrincipalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketPrincipalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketPrincipalValidationError) ErrorName() string { return "BucketPrincipalValidationError" }

// Error satisfies the builtin error interface
func (e BucketPrincipalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketPrincipal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketPrincipalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketPrincipalValidationError{}

// Validate checks the field values on FilesystemUserCreateOrUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemUserCreateOrUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemUserCreateOrUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemUserCreateOrUpdateRequestMultiError, or nil if none found.
func (m *FilesystemUserCreateOrUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemUserCreateOrUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterUUID

	// no validation rules for NamespaceName

	// no validation rules for NamespaceCredsPath

	// no validation rules for UserName

	// no validation rules for NewUserPassword

	if len(errors) > 0 {
		return FilesystemUserCreateOrUpdateRequestMultiError(errors)
	}

	return nil
}

// FilesystemUserCreateOrUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemUserCreateOrUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemUserCreateOrUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemUserCreateOrUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemUserCreateOrUpdateRequestMultiError) AllErrors() []error { return m }

// FilesystemUserCreateOrUpdateRequestValidationError is the validation error
// returned by FilesystemUserCreateOrUpdateRequest.Validate if the designated
// constraints aren't met.
type FilesystemUserCreateOrUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemUserCreateOrUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemUserCreateOrUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemUserCreateOrUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemUserCreateOrUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemUserCreateOrUpdateRequestValidationError) ErrorName() string {
	return "FilesystemUserCreateOrUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemUserCreateOrUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemUserCreateOrUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemUserCreateOrUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemUserCreateOrUpdateRequestValidationError{}

// Validate checks the field values on FilesystemOrgCreateRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemOrgCreateRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgCreateRequestPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemOrgCreateRequestPrivateMultiError, or nil if none found.
func (m *FilesystemOrgCreateRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgCreateRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgCreateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgCreateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgCreateRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgCreateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgCreateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgCreateRequestPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemOrgCreateRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgCreateRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemOrgCreateRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgCreateRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgCreateRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgCreateRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgCreateRequestPrivateValidationError is the validation error
// returned by FilesystemOrgCreateRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgCreateRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgCreateRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgCreateRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgCreateRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgCreateRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgCreateRequestPrivateValidationError) ErrorName() string {
	return "FilesystemOrgCreateRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgCreateRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgCreateRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgCreateRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgCreateRequestPrivateValidationError{}

// Validate checks the field values on FilesystemOrgUpdateRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemOrgUpdateRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgUpdateRequestPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemOrgUpdateRequestPrivateMultiError, or nil if none found.
func (m *FilesystemOrgUpdateRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgUpdateRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgUpdateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgUpdateRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgUpdateRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgUpdateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgUpdateRequestPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgUpdateRequestPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemOrgUpdateRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgUpdateRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemOrgUpdateRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgUpdateRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgUpdateRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgUpdateRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgUpdateRequestPrivateValidationError is the validation error
// returned by FilesystemOrgUpdateRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgUpdateRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgUpdateRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgUpdateRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgUpdateRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgUpdateRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgUpdateRequestPrivateValidationError) ErrorName() string {
	return "FilesystemOrgUpdateRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgUpdateRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgUpdateRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgUpdateRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgUpdateRequestPrivateValidationError{}

// Validate checks the field values on FilesystemOrgPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemOrgPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemOrgPrivateMultiError, or nil if none found.
func (m *FilesystemOrgPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemOrgPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgPrivateMultiError is an error wrapping multiple validation
// errors returned by FilesystemOrgPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgPrivateValidationError is the validation error returned by
// FilesystemOrgPrivate.Validate if the designated constraints aren't met.
type FilesystemOrgPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgPrivateValidationError) ErrorName() string {
	return "FilesystemOrgPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgPrivateValidationError{}

// Validate checks the field values on FilesystemOrgGetRequestPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemOrgGetRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgGetRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilesystemOrgGetRequestPrivateMultiError, or nil if none found.
func (m *FilesystemOrgGetRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgGetRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgGetRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgGetRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgGetRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Prefix

	if len(errors) > 0 {
		return FilesystemOrgGetRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgGetRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemOrgGetRequestPrivate.ValidateAll()
// if the designated constraints aren't met.
type FilesystemOrgGetRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgGetRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgGetRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgGetRequestPrivateValidationError is the validation error
// returned by FilesystemOrgGetRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgGetRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgGetRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgGetRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgGetRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgGetRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgGetRequestPrivateValidationError) ErrorName() string {
	return "FilesystemOrgGetRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgGetRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgGetRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgGetRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgGetRequestPrivateValidationError{}

// Validate checks the field values on FilesystemOrgDeleteRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemOrgDeleteRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgDeleteRequestPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemOrgDeleteRequestPrivateMultiError, or nil if none found.
func (m *FilesystemOrgDeleteRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgDeleteRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemOrgDeleteRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemOrgDeleteRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemOrgDeleteRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Prefix

	if len(errors) > 0 {
		return FilesystemOrgDeleteRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgDeleteRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemOrgDeleteRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemOrgDeleteRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgDeleteRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgDeleteRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgDeleteRequestPrivateValidationError is the validation error
// returned by FilesystemOrgDeleteRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemOrgDeleteRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgDeleteRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgDeleteRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgDeleteRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgDeleteRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgDeleteRequestPrivateValidationError) ErrorName() string {
	return "FilesystemOrgDeleteRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgDeleteRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgDeleteRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgDeleteRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgDeleteRequestPrivateValidationError{}

// Validate checks the field values on FilesystemsInOrgListRequestPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemsInOrgListRequestPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemsInOrgListRequestPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemsInOrgListRequestPrivateMultiError, or nil if none found.
func (m *FilesystemsInOrgListRequestPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemsInOrgListRequestPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemsInOrgListRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemsInOrgListRequestPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemsInOrgListRequestPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterId

	// no validation rules for Prefix

	if len(errors) > 0 {
		return FilesystemsInOrgListRequestPrivateMultiError(errors)
	}

	return nil
}

// FilesystemsInOrgListRequestPrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemsInOrgListRequestPrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemsInOrgListRequestPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemsInOrgListRequestPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemsInOrgListRequestPrivateMultiError) AllErrors() []error { return m }

// FilesystemsInOrgListRequestPrivateValidationError is the validation error
// returned by FilesystemsInOrgListRequestPrivate.Validate if the designated
// constraints aren't met.
type FilesystemsInOrgListRequestPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemsInOrgListRequestPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemsInOrgListRequestPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemsInOrgListRequestPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemsInOrgListRequestPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemsInOrgListRequestPrivateValidationError) ErrorName() string {
	return "FilesystemsInOrgListRequestPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemsInOrgListRequestPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemsInOrgListRequestPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemsInOrgListRequestPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemsInOrgListRequestPrivateValidationError{}

// Validate checks the field values on FilesystemsInOrgListResponsePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemsInOrgListResponsePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemsInOrgListResponsePrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemsInOrgListResponsePrivateMultiError, or nil if none found.
func (m *FilesystemsInOrgListResponsePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemsInOrgListResponsePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilesystemsInOrgListResponsePrivateValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilesystemsInOrgListResponsePrivateValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilesystemsInOrgListResponsePrivateValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FilesystemsInOrgListResponsePrivateMultiError(errors)
	}

	return nil
}

// FilesystemsInOrgListResponsePrivateMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemsInOrgListResponsePrivate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemsInOrgListResponsePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemsInOrgListResponsePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemsInOrgListResponsePrivateMultiError) AllErrors() []error { return m }

// FilesystemsInOrgListResponsePrivateValidationError is the validation error
// returned by FilesystemsInOrgListResponsePrivate.Validate if the designated
// constraints aren't met.
type FilesystemsInOrgListResponsePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemsInOrgListResponsePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemsInOrgListResponsePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemsInOrgListResponsePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemsInOrgListResponsePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemsInOrgListResponsePrivateValidationError) ErrorName() string {
	return "FilesystemsInOrgListResponsePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemsInOrgListResponsePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemsInOrgListResponsePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemsInOrgListResponsePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemsInOrgListResponsePrivateValidationError{}

// Validate checks the field values on FilesystemOrgResponsePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemOrgResponsePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemOrgResponsePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemOrgResponsePrivateMultiError, or nil if none found.
func (m *FilesystemOrgResponsePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemOrgResponsePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilesystemOrgResponsePrivateValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilesystemOrgResponsePrivateValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilesystemOrgResponsePrivateValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FilesystemOrgResponsePrivateMultiError(errors)
	}

	return nil
}

// FilesystemOrgResponsePrivateMultiError is an error wrapping multiple
// validation errors returned by FilesystemOrgResponsePrivate.ValidateAll() if
// the designated constraints aren't met.
type FilesystemOrgResponsePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemOrgResponsePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemOrgResponsePrivateMultiError) AllErrors() []error { return m }

// FilesystemOrgResponsePrivateValidationError is the validation error returned
// by FilesystemOrgResponsePrivate.Validate if the designated constraints
// aren't met.
type FilesystemOrgResponsePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemOrgResponsePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemOrgResponsePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemOrgResponsePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemOrgResponsePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemOrgResponsePrivateValidationError) ErrorName() string {
	return "FilesystemOrgResponsePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemOrgResponsePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemOrgResponsePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemOrgResponsePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemOrgResponsePrivateValidationError{}

// Validate checks the field values on FilesystemAccountMetadataReference with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FilesystemAccountMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemAccountMetadataReference
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilesystemAccountMetadataReferenceMultiError, or nil if none found.
func (m *FilesystemAccountMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemAccountMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if len(errors) > 0 {
		return FilesystemAccountMetadataReferenceMultiError(errors)
	}

	return nil
}

// FilesystemAccountMetadataReferenceMultiError is an error wrapping multiple
// validation errors returned by
// FilesystemAccountMetadataReference.ValidateAll() if the designated
// constraints aren't met.
type FilesystemAccountMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemAccountMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemAccountMetadataReferenceMultiError) AllErrors() []error { return m }

// FilesystemAccountMetadataReferenceValidationError is the validation error
// returned by FilesystemAccountMetadataReference.Validate if the designated
// constraints aren't met.
type FilesystemAccountMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemAccountMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemAccountMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemAccountMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemAccountMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemAccountMetadataReferenceValidationError) ErrorName() string {
	return "FilesystemAccountMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemAccountMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemAccountMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemAccountMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemAccountMetadataReferenceValidationError{}

// Validate checks the field values on SubnetEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetEventRequestMultiError, or nil if none found.
func (m *SubnetEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubnetEventRequestMultiError(errors)
	}

	return nil
}

// SubnetEventRequestMultiError is an error wrapping multiple validation errors
// returned by SubnetEventRequest.ValidateAll() if the designated constraints
// aren't met.
type SubnetEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetEventRequestMultiError) AllErrors() []error { return m }

// SubnetEventRequestValidationError is the validation error returned by
// SubnetEventRequest.Validate if the designated constraints aren't met.
type SubnetEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetEventRequestValidationError) ErrorName() string {
	return "SubnetEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetEventRequestValidationError{}

// Validate checks the field values on BucketSubnetUpdateEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketSubnetUpdateEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketSubnetUpdateEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketSubnetUpdateEventMultiError, or nil if none found.
func (m *BucketSubnetUpdateEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketSubnetUpdateEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	for idx, item := range m.GetPrincipals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketSubnetUpdateEventValidationError{
						field:  fmt.Sprintf("Principals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketSubnetUpdateEventValidationError{
						field:  fmt.Sprintf("Principals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketSubnetUpdateEventValidationError{
					field:  fmt.Sprintf("Principals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVnet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketSubnetUpdateEventValidationError{
					field:  "Vnet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketSubnetUpdateEventValidationError{
					field:  "Vnet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVnet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketSubnetUpdateEventValidationError{
				field:  "Vnet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketSubnetUpdateEventMultiError(errors)
	}

	return nil
}

// BucketSubnetUpdateEventMultiError is an error wrapping multiple validation
// errors returned by BucketSubnetUpdateEvent.ValidateAll() if the designated
// constraints aren't met.
type BucketSubnetUpdateEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketSubnetUpdateEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketSubnetUpdateEventMultiError) AllErrors() []error { return m }

// BucketSubnetUpdateEventValidationError is the validation error returned by
// BucketSubnetUpdateEvent.Validate if the designated constraints aren't met.
type BucketSubnetUpdateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketSubnetUpdateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketSubnetUpdateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketSubnetUpdateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketSubnetUpdateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketSubnetUpdateEventValidationError) ErrorName() string {
	return "BucketSubnetUpdateEventValidationError"
}

// Error satisfies the builtin error interface
func (e BucketSubnetUpdateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketSubnetUpdateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketSubnetUpdateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketSubnetUpdateEventValidationError{}

// Validate checks the field values on BucketSubnetStatusUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketSubnetStatusUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketSubnetStatusUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BucketSubnetStatusUpdateRequestMultiError, or nil if none found.
func (m *BucketSubnetStatusUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketSubnetStatusUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for CloudacccountId

	// no validation rules for VNetName

	// no validation rules for Status

	if len(errors) > 0 {
		return BucketSubnetStatusUpdateRequestMultiError(errors)
	}

	return nil
}

// BucketSubnetStatusUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by BucketSubnetStatusUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type BucketSubnetStatusUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketSubnetStatusUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketSubnetStatusUpdateRequestMultiError) AllErrors() []error { return m }

// BucketSubnetStatusUpdateRequestValidationError is the validation error
// returned by BucketSubnetStatusUpdateRequest.Validate if the designated
// constraints aren't met.
type BucketSubnetStatusUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketSubnetStatusUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketSubnetStatusUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketSubnetStatusUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketSubnetStatusUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketSubnetStatusUpdateRequestValidationError) ErrorName() string {
	return "BucketSubnetStatusUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketSubnetStatusUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketSubnetStatusUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketSubnetStatusUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketSubnetStatusUpdateRequestValidationError{}

// Validate checks the field values on ObjectBucketCreatePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ObjectBucketCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketCreatePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectBucketCreatePrivateRequestMultiError, or nil if none found.
func (m *ObjectBucketCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketCreatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// ObjectBucketCreatePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketCreatePrivateRequestMultiError) AllErrors() []error { return m }

// ObjectBucketCreatePrivateRequestValidationError is the validation error
// returned by ObjectBucketCreatePrivateRequest.Validate if the designated
// constraints aren't met.
type ObjectBucketCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketCreatePrivateRequestValidationError) ErrorName() string {
	return "ObjectBucketCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketCreatePrivateRequestValidationError{}

// Validate checks the field values on ObjectBucketMetadataPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketMetadataPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketMetadataPrivateMultiError, or nil if none found.
func (m *ObjectBucketMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for BucketId

	// no validation rules for ResourceVersion

	// no validation rules for Description

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipQuotaCheck

	// no validation rules for SkipProductCheck

	// no validation rules for ClientType

	if len(errors) > 0 {
		return ObjectBucketMetadataPrivateMultiError(errors)
	}

	return nil
}

// ObjectBucketMetadataPrivateMultiError is an error wrapping multiple
// validation errors returned by ObjectBucketMetadataPrivate.ValidateAll() if
// the designated constraints aren't met.
type ObjectBucketMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketMetadataPrivateMultiError) AllErrors() []error { return m }

// ObjectBucketMetadataPrivateValidationError is the validation error returned
// by ObjectBucketMetadataPrivate.Validate if the designated constraints
// aren't met.
type ObjectBucketMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketMetadataPrivateValidationError) ErrorName() string {
	return "ObjectBucketMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketMetadataPrivateValidationError{}

// Validate checks the field values on ObjectBucketSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketSpecPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketSpecPrivateMultiError, or nil if none found.
func (m *ObjectBucketSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketSpecPrivateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketSpecPrivateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketSpecPrivateValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Versioned

	// no validation rules for AccessPolicy

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketSpecPrivateValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketSpecPrivateValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketSpecPrivateValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceType

	if len(errors) > 0 {
		return ObjectBucketSpecPrivateMultiError(errors)
	}

	return nil
}

// ObjectBucketSpecPrivateMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketSpecPrivate.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketSpecPrivateMultiError) AllErrors() []error { return m }

// ObjectBucketSpecPrivateValidationError is the validation error returned by
// ObjectBucketSpecPrivate.Validate if the designated constraints aren't met.
type ObjectBucketSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketSpecPrivateValidationError) ErrorName() string {
	return "ObjectBucketSpecPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketSpecPrivateValidationError{}

// Validate checks the field values on BucketSchedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BucketSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BucketScheduleMultiError,
// or nil if none found.
func (m *BucketSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketScheduleValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketScheduleValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketScheduleValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketScheduleMultiError(errors)
	}

	return nil
}

// BucketScheduleMultiError is an error wrapping multiple validation errors
// returned by BucketSchedule.ValidateAll() if the designated constraints
// aren't met.
type BucketScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketScheduleMultiError) AllErrors() []error { return m }

// BucketScheduleValidationError is the validation error returned by
// BucketSchedule.Validate if the designated constraints aren't met.
type BucketScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketScheduleValidationError) ErrorName() string { return "BucketScheduleValidationError" }

// Error satisfies the builtin error interface
func (e BucketScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketScheduleValidationError{}

// Validate checks the field values on ObjectBucketPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketPrivateMultiError, or nil if none found.
func (m *ObjectBucketPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketPrivateMultiError(errors)
	}

	return nil
}

// ObjectBucketPrivateMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketPrivate.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketPrivateMultiError) AllErrors() []error { return m }

// ObjectBucketPrivateValidationError is the validation error returned by
// ObjectBucketPrivate.Validate if the designated constraints aren't met.
type ObjectBucketPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketPrivateValidationError) ErrorName() string {
	return "ObjectBucketPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketPrivateValidationError{}

// Validate checks the field values on ObjectBucketGetPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketGetPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketGetPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectBucketGetPrivateRequestMultiError, or nil if none found.
func (m *ObjectBucketGetPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketGetPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketGetPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketGetPrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketGetPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectBucketGetPrivateRequest.ValidateAll()
// if the designated constraints aren't met.
type ObjectBucketGetPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketGetPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketGetPrivateRequestMultiError) AllErrors() []error { return m }

// ObjectBucketGetPrivateRequestValidationError is the validation error
// returned by ObjectBucketGetPrivateRequest.Validate if the designated
// constraints aren't met.
type ObjectBucketGetPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketGetPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketGetPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketGetPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketGetPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketGetPrivateRequestValidationError) ErrorName() string {
	return "ObjectBucketGetPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketGetPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketGetPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketGetPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketGetPrivateRequestValidationError{}

// Validate checks the field values on ObjectBucketSearchPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ObjectBucketSearchPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketSearchPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectBucketSearchPrivateRequestMultiError, or nil if none found.
func (m *ObjectBucketSearchPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketSearchPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return ObjectBucketSearchPrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketSearchPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// ObjectBucketSearchPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketSearchPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketSearchPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketSearchPrivateRequestMultiError) AllErrors() []error { return m }

// ObjectBucketSearchPrivateRequestValidationError is the validation error
// returned by ObjectBucketSearchPrivateRequest.Validate if the designated
// constraints aren't met.
type ObjectBucketSearchPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketSearchPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketSearchPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketSearchPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketSearchPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketSearchPrivateRequestValidationError) ErrorName() string {
	return "ObjectBucketSearchPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketSearchPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketSearchPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketSearchPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketSearchPrivateRequestValidationError{}

// Validate checks the field values on ObjectBucketSearchPrivateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ObjectBucketSearchPrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketSearchPrivateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ObjectBucketSearchPrivateResponseMultiError, or nil if none found.
func (m *ObjectBucketSearchPrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketSearchPrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBucket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketSearchPrivateResponseValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketSearchPrivateResponseValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBucket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketSearchPrivateResponseValidationError{
				field:  "Bucket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketSearchPrivateResponseMultiError(errors)
	}

	return nil
}

// ObjectBucketSearchPrivateResponseMultiError is an error wrapping multiple
// validation errors returned by
// ObjectBucketSearchPrivateResponse.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketSearchPrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketSearchPrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketSearchPrivateResponseMultiError) AllErrors() []error { return m }

// ObjectBucketSearchPrivateResponseValidationError is the validation error
// returned by ObjectBucketSearchPrivateResponse.Validate if the designated
// constraints aren't met.
type ObjectBucketSearchPrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketSearchPrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketSearchPrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketSearchPrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketSearchPrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketSearchPrivateResponseValidationError) ErrorName() string {
	return "ObjectBucketSearchPrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketSearchPrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketSearchPrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketSearchPrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketSearchPrivateResponseValidationError{}

// Validate checks the field values on ObjectBucketDeletePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ObjectBucketDeletePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketDeletePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectBucketDeletePrivateRequestMultiError, or nil if none found.
func (m *ObjectBucketDeletePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketDeletePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketDeletePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketDeletePrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketDeletePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// ObjectBucketDeletePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketDeletePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketDeletePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketDeletePrivateRequestMultiError) AllErrors() []error { return m }

// ObjectBucketDeletePrivateRequestValidationError is the validation error
// returned by ObjectBucketDeletePrivateRequest.Validate if the designated
// constraints aren't met.
type ObjectBucketDeletePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketDeletePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketDeletePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketDeletePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketDeletePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketDeletePrivateRequestValidationError) ErrorName() string {
	return "ObjectBucketDeletePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketDeletePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketDeletePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketDeletePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketDeletePrivateRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleCreatePrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BucketLifecycleRuleCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BucketLifecycleRuleCreatePrivateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BucketLifecycleRuleCreatePrivateRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleCreatePrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// BucketLifecycleRuleCreatePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleCreatePrivateRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleCreatePrivateRequestValidationError is the validation
// error returned by BucketLifecycleRuleCreatePrivateRequest.Validate if the
// designated constraints aren't met.
type BucketLifecycleRuleCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleCreatePrivateRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleCreatePrivateRequestValidationError{}

// Validate checks the field values on BucketLifecycleRulePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketLifecycleRulePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRulePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketLifecycleRulePrivateMultiError, or nil if none found.
func (m *BucketLifecycleRulePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRulePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRulePrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRulePrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRulePrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRulePrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRulePrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRulePrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRulePrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRulePrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRulePrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRulePrivateMultiError(errors)
	}

	return nil
}

// BucketLifecycleRulePrivateMultiError is an error wrapping multiple
// validation errors returned by BucketLifecycleRulePrivate.ValidateAll() if
// the designated constraints aren't met.
type BucketLifecycleRulePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRulePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRulePrivateMultiError) AllErrors() []error { return m }

// BucketLifecycleRulePrivateValidationError is the validation error returned
// by BucketLifecycleRulePrivate.Validate if the designated constraints aren't met.
type BucketLifecycleRulePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRulePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRulePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRulePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRulePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRulePrivateValidationError) ErrorName() string {
	return "BucketLifecycleRulePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRulePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRulePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRulePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRulePrivateValidationError{}

// Validate checks the field values on BucketLifecycleRuleGetPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BucketLifecycleRuleGetPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleGetPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleGetPrivateRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleGetPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleGetPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleGetPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleGetPrivateRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleGetPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// BucketLifecycleRuleGetPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleGetPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleGetPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleGetPrivateRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleGetPrivateRequestValidationError is the validation error
// returned by BucketLifecycleRuleGetPrivateRequest.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleGetPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleGetPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleGetPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleGetPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleGetPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleGetPrivateRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleGetPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleGetPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleGetPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleGetPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleGetPrivateRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleSearchPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BucketLifecycleRuleSearchPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BucketLifecycleRuleSearchPrivateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BucketLifecycleRuleSearchPrivateRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleSearchPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleSearchPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for BucketId

	if len(errors) > 0 {
		return BucketLifecycleRuleSearchPrivateRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleSearchPrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// BucketLifecycleRuleSearchPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleSearchPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleSearchPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleSearchPrivateRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleSearchPrivateRequestValidationError is the validation
// error returned by BucketLifecycleRuleSearchPrivateRequest.Validate if the
// designated constraints aren't met.
type BucketLifecycleRuleSearchPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleSearchPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleSearchPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleSearchPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleSearchPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleSearchPrivateRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleSearchPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleSearchPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleSearchPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleSearchPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleSearchPrivateRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleSearchPrivateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BucketLifecycleRuleSearchPrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BucketLifecycleRuleSearchPrivateResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BucketLifecycleRuleSearchPrivateResponseMultiError, or nil if none found.
func (m *BucketLifecycleRuleSearchPrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleSearchPrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLifecycleRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleSearchPrivateResponseValidationError{
					field:  "LifecycleRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleSearchPrivateResponseValidationError{
					field:  "LifecycleRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLifecycleRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleSearchPrivateResponseValidationError{
				field:  "LifecycleRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleSearchPrivateResponseMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleSearchPrivateResponseMultiError is an error wrapping
// multiple validation errors returned by
// BucketLifecycleRuleSearchPrivateResponse.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleSearchPrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleSearchPrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleSearchPrivateResponseMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleSearchPrivateResponseValidationError is the validation
// error returned by BucketLifecycleRuleSearchPrivateResponse.Validate if the
// designated constraints aren't met.
type BucketLifecycleRuleSearchPrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleSearchPrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleSearchPrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleSearchPrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleSearchPrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleSearchPrivateResponseValidationError) ErrorName() string {
	return "BucketLifecycleRuleSearchPrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleSearchPrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleSearchPrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleSearchPrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleSearchPrivateResponseValidationError{}

// Validate checks the field values on BucketLifecycleRuleUpdatePrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BucketLifecycleRuleUpdatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BucketLifecycleRuleUpdatePrivateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BucketLifecycleRuleUpdatePrivateRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleUpdatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleUpdatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleUpdatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleUpdatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleUpdatePrivateRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleUpdatePrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// BucketLifecycleRuleUpdatePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleUpdatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleUpdatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleUpdatePrivateRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleUpdatePrivateRequestValidationError is the validation
// error returned by BucketLifecycleRuleUpdatePrivateRequest.Validate if the
// designated constraints aren't met.
type BucketLifecycleRuleUpdatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleUpdatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleUpdatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleUpdatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleUpdatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleUpdatePrivateRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleUpdatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleUpdatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleUpdatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleUpdatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleUpdatePrivateRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleDeletePrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BucketLifecycleRuleDeletePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BucketLifecycleRuleDeletePrivateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// BucketLifecycleRuleDeletePrivateRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleDeletePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleDeletePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleDeletePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleDeletePrivateRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleDeletePrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// BucketLifecycleRuleDeletePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleDeletePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleDeletePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleDeletePrivateRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleDeletePrivateRequestValidationError is the validation
// error returned by BucketLifecycleRuleDeletePrivateRequest.Validate if the
// designated constraints aren't met.
type BucketLifecycleRuleDeletePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleDeletePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleDeletePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleDeletePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleDeletePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleDeletePrivateRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleDeletePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleDeletePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleDeletePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleDeletePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleDeletePrivateRequestValidationError{}

// Validate checks the field values on CreateObjectUserPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateObjectUserPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateObjectUserPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateObjectUserPrivateRequestMultiError, or nil if none found.
func (m *CreateObjectUserPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateObjectUserPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateObjectUserPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateObjectUserPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateObjectUserPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateObjectUserPrivateRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateObjectUserPrivateRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateObjectUserPrivateRequestValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateObjectUserPrivateRequestMultiError(errors)
	}

	return nil
}

// CreateObjectUserPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by CreateObjectUserPrivateRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateObjectUserPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateObjectUserPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateObjectUserPrivateRequestMultiError) AllErrors() []error { return m }

// CreateObjectUserPrivateRequestValidationError is the validation error
// returned by CreateObjectUserPrivateRequest.Validate if the designated
// constraints aren't met.
type CreateObjectUserPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectUserPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectUserPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectUserPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectUserPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectUserPrivateRequestValidationError) ErrorName() string {
	return "CreateObjectUserPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectUserPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectUserPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectUserPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectUserPrivateRequestValidationError{}

// Validate checks the field values on ObjectUserPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserPrivateMultiError, or nil if none found.
func (m *ObjectUserPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectUserPrivateValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectUserPrivateValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectUserPrivateValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserPrivateMultiError(errors)
	}

	return nil
}

// ObjectUserPrivateMultiError is an error wrapping multiple validation errors
// returned by ObjectUserPrivate.ValidateAll() if the designated constraints
// aren't met.
type ObjectUserPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserPrivateMultiError) AllErrors() []error { return m }

// ObjectUserPrivateValidationError is the validation error returned by
// ObjectUserPrivate.Validate if the designated constraints aren't met.
type ObjectUserPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserPrivateValidationError) ErrorName() string {
	return "ObjectUserPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserPrivateValidationError{}

// Validate checks the field values on ObjectUserMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserMetadataPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserMetadataPrivateMultiError, or nil if none found.
func (m *ObjectUserMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserMetadataPrivateValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserMetadataPrivateValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserMetadataPrivateValidationError{
				field:  "UpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeleteTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserMetadataPrivateValidationError{
					field:  "DeleteTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserMetadataPrivateValidationError{
					field:  "DeleteTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserMetadataPrivateValidationError{
				field:  "DeleteTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserMetadataPrivateMultiError(errors)
	}

	return nil
}

// ObjectUserMetadataPrivateMultiError is an error wrapping multiple validation
// errors returned by ObjectUserMetadataPrivate.ValidateAll() if the
// designated constraints aren't met.
type ObjectUserMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserMetadataPrivateMultiError) AllErrors() []error { return m }

// ObjectUserMetadataPrivateValidationError is the validation error returned by
// ObjectUserMetadataPrivate.Validate if the designated constraints aren't met.
type ObjectUserMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserMetadataPrivateValidationError) ErrorName() string {
	return "ObjectUserMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserMetadataPrivateValidationError{}

// Validate checks the field values on ObjectUserStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserStatusPrivateMultiError, or nil if none found.
func (m *ObjectUserStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserStatusPrivateValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserStatusPrivateValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserStatusPrivateValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserStatusPrivateMultiError(errors)
	}

	return nil
}

// ObjectUserStatusPrivateMultiError is an error wrapping multiple validation
// errors returned by ObjectUserStatusPrivate.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserStatusPrivateMultiError) AllErrors() []error { return m }

// ObjectUserStatusPrivateValidationError is the validation error returned by
// ObjectUserStatusPrivate.Validate if the designated constraints aren't met.
type ObjectUserStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserStatusPrivateValidationError) ErrorName() string {
	return "ObjectUserStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserStatusPrivateValidationError{}

// Validate checks the field values on AccessPrincipalPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessPrincipalPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessPrincipalPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessPrincipalPrivateMultiError, or nil if none found.
func (m *AccessPrincipalPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessPrincipalPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessPrincipalPrivateValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessPrincipalPrivateValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessPrincipalPrivateValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessPrincipalPrivateValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessPrincipalPrivateValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessPrincipalPrivateValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PrincipalId

	if len(errors) > 0 {
		return AccessPrincipalPrivateMultiError(errors)
	}

	return nil
}

// AccessPrincipalPrivateMultiError is an error wrapping multiple validation
// errors returned by AccessPrincipalPrivate.ValidateAll() if the designated
// constraints aren't met.
type AccessPrincipalPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessPrincipalPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessPrincipalPrivateMultiError) AllErrors() []error { return m }

// AccessPrincipalPrivateValidationError is the validation error returned by
// AccessPrincipalPrivate.Validate if the designated constraints aren't met.
type AccessPrincipalPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessPrincipalPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessPrincipalPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessPrincipalPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessPrincipalPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessPrincipalPrivateValidationError) ErrorName() string {
	return "AccessPrincipalPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e AccessPrincipalPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessPrincipalPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessPrincipalPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessPrincipalPrivateValidationError{}

// Validate checks the field values on ObjectUserGetPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserGetPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserGetPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserGetPrivateRequestMultiError, or nil if none found.
func (m *ObjectUserGetPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserGetPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserGetPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserGetPrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectUserGetPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectUserGetPrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type ObjectUserGetPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserGetPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserGetPrivateRequestMultiError) AllErrors() []error { return m }

// ObjectUserGetPrivateRequestValidationError is the validation error returned
// by ObjectUserGetPrivateRequest.Validate if the designated constraints
// aren't met.
type ObjectUserGetPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserGetPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserGetPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserGetPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserGetPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserGetPrivateRequestValidationError) ErrorName() string {
	return "ObjectUserGetPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserGetPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserGetPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserGetPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserGetPrivateRequestValidationError{}

// Validate checks the field values on ObjectUserUpdatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserUpdatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserUpdatePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectUserUpdatePrivateRequestMultiError, or nil if none found.
func (m *ObjectUserUpdatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserUpdatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserUpdatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectUserUpdatePrivateRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectUserUpdatePrivateRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectUserUpdatePrivateRequestValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectUserUpdatePrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectUserUpdatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectUserUpdatePrivateRequest.ValidateAll()
// if the designated constraints aren't met.
type ObjectUserUpdatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserUpdatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserUpdatePrivateRequestMultiError) AllErrors() []error { return m }

// ObjectUserUpdatePrivateRequestValidationError is the validation error
// returned by ObjectUserUpdatePrivateRequest.Validate if the designated
// constraints aren't met.
type ObjectUserUpdatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserUpdatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserUpdatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserUpdatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserUpdatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserUpdatePrivateRequestValidationError) ErrorName() string {
	return "ObjectUserUpdatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserUpdatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserUpdatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserUpdatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserUpdatePrivateRequestValidationError{}

// Validate checks the field values on ObjectUserDeletePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserDeletePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserDeletePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectUserDeletePrivateRequestMultiError, or nil if none found.
func (m *ObjectUserDeletePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserDeletePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserDeletePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserDeletePrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectUserDeletePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectUserDeletePrivateRequest.ValidateAll()
// if the designated constraints aren't met.
type ObjectUserDeletePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserDeletePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserDeletePrivateRequestMultiError) AllErrors() []error { return m }

// ObjectUserDeletePrivateRequestValidationError is the validation error
// returned by ObjectUserDeletePrivateRequest.Validate if the designated
// constraints aren't met.
type ObjectUserDeletePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserDeletePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserDeletePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserDeletePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserDeletePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserDeletePrivateRequestValidationError) ErrorName() string {
	return "ObjectUserDeletePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserDeletePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserDeletePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserDeletePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserDeletePrivateRequestValidationError{}

// Validate checks the field values on ObjectUserSearchPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserSearchPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserSearchPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectUserSearchPrivateRequestMultiError, or nil if none found.
func (m *ObjectUserSearchPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserSearchPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return ObjectUserSearchPrivateRequestMultiError(errors)
	}

	return nil
}

// ObjectUserSearchPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectUserSearchPrivateRequest.ValidateAll()
// if the designated constraints aren't met.
type ObjectUserSearchPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserSearchPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserSearchPrivateRequestMultiError) AllErrors() []error { return m }

// ObjectUserSearchPrivateRequestValidationError is the validation error
// returned by ObjectUserSearchPrivateRequest.Validate if the designated
// constraints aren't met.
type ObjectUserSearchPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserSearchPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserSearchPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserSearchPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserSearchPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserSearchPrivateRequestValidationError) ErrorName() string {
	return "ObjectUserSearchPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserSearchPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserSearchPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserSearchPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserSearchPrivateRequestValidationError{}

// Validate checks the field values on ObjectUserSearchPrivateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserSearchPrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserSearchPrivateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectUserSearchPrivateResponseMultiError, or nil if none found.
func (m *ObjectUserSearchPrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserSearchPrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserSearchPrivateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserSearchPrivateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserSearchPrivateResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserSearchPrivateResponseMultiError(errors)
	}

	return nil
}

// ObjectUserSearchPrivateResponseMultiError is an error wrapping multiple
// validation errors returned by ObjectUserSearchPrivateResponse.ValidateAll()
// if the designated constraints aren't met.
type ObjectUserSearchPrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserSearchPrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserSearchPrivateResponseMultiError) AllErrors() []error { return m }

// ObjectUserSearchPrivateResponseValidationError is the validation error
// returned by ObjectUserSearchPrivateResponse.Validate if the designated
// constraints aren't met.
type ObjectUserSearchPrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserSearchPrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserSearchPrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserSearchPrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserSearchPrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserSearchPrivateResponseValidationError) ErrorName() string {
	return "ObjectUserSearchPrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserSearchPrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserSearchPrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserSearchPrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserSearchPrivateResponseValidationError{}

// Validate checks the field values on ObjectBucketStatusUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketStatusUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketStatusUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectBucketStatusUpdateRequestMultiError, or nil if none found.
func (m *ObjectBucketStatusUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketStatusUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketStatusUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketStatusUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketStatusUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketStatusUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketStatusUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketStatusUpdateRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketStatusUpdateRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketStatusUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectBucketStatusUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type ObjectBucketStatusUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketStatusUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketStatusUpdateRequestMultiError) AllErrors() []error { return m }

// ObjectBucketStatusUpdateRequestValidationError is the validation error
// returned by ObjectBucketStatusUpdateRequest.Validate if the designated
// constraints aren't met.
type ObjectBucketStatusUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketStatusUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketStatusUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketStatusUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketStatusUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketStatusUpdateRequestValidationError) ErrorName() string {
	return "ObjectBucketStatusUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketStatusUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketStatusUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketStatusUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketStatusUpdateRequestValidationError{}

// Validate checks the field values on ObjectBucketRemoveFinalizerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ObjectBucketRemoveFinalizerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketRemoveFinalizerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ObjectBucketRemoveFinalizerRequestMultiError, or nil if none found.
func (m *ObjectBucketRemoveFinalizerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketRemoveFinalizerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketRemoveFinalizerRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketRemoveFinalizerRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketRemoveFinalizerRequestMultiError is an error wrapping multiple
// validation errors returned by
// ObjectBucketRemoveFinalizerRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketRemoveFinalizerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketRemoveFinalizerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketRemoveFinalizerRequestMultiError) AllErrors() []error { return m }

// ObjectBucketRemoveFinalizerRequestValidationError is the validation error
// returned by ObjectBucketRemoveFinalizerRequest.Validate if the designated
// constraints aren't met.
type ObjectBucketRemoveFinalizerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketRemoveFinalizerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketRemoveFinalizerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketRemoveFinalizerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketRemoveFinalizerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketRemoveFinalizerRequestValidationError) ErrorName() string {
	return "ObjectBucketRemoveFinalizerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketRemoveFinalizerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketRemoveFinalizerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketRemoveFinalizerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketRemoveFinalizerRequestValidationError{}

// Validate checks the field values on ObjectUserStatusUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserStatusUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserStatusUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectUserStatusUpdateRequestMultiError, or nil if none found.
func (m *ObjectUserStatusUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserStatusUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserStatusUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserStatusUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserStatusUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserStatusUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserStatusUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserStatusUpdateRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserStatusUpdateRequestMultiError(errors)
	}

	return nil
}

// ObjectUserStatusUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectUserStatusUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type ObjectUserStatusUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserStatusUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserStatusUpdateRequestMultiError) AllErrors() []error { return m }

// ObjectUserStatusUpdateRequestValidationError is the validation error
// returned by ObjectUserStatusUpdateRequest.Validate if the designated
// constraints aren't met.
type ObjectUserStatusUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserStatusUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserStatusUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserStatusUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserStatusUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserStatusUpdateRequestValidationError) ErrorName() string {
	return "ObjectUserStatusUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserStatusUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserStatusUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserStatusUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserStatusUpdateRequestValidationError{}

// Validate checks the field values on ObjectUserRemoveFinalizerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ObjectUserRemoveFinalizerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserRemoveFinalizerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectUserRemoveFinalizerRequestMultiError, or nil if none found.
func (m *ObjectUserRemoveFinalizerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserRemoveFinalizerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserRemoveFinalizerRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserRemoveFinalizerRequestMultiError(errors)
	}

	return nil
}

// ObjectUserRemoveFinalizerRequestMultiError is an error wrapping multiple
// validation errors returned by
// ObjectUserRemoveFinalizerRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserRemoveFinalizerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserRemoveFinalizerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserRemoveFinalizerRequestMultiError) AllErrors() []error { return m }

// ObjectUserRemoveFinalizerRequestValidationError is the validation error
// returned by ObjectUserRemoveFinalizerRequest.Validate if the designated
// constraints aren't met.
type ObjectUserRemoveFinalizerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserRemoveFinalizerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserRemoveFinalizerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserRemoveFinalizerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserRemoveFinalizerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserRemoveFinalizerRequestValidationError) ErrorName() string {
	return "ObjectUserRemoveFinalizerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserRemoveFinalizerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserRemoveFinalizerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserRemoveFinalizerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserRemoveFinalizerRequestValidationError{}

// Validate checks the field values on ObjectBucketIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketIdReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketIdReferenceMultiError, or nil if none found.
func (m *ObjectBucketIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return ObjectBucketIdReferenceMultiError(errors)
	}

	return nil
}

// ObjectBucketIdReferenceMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketIdReference.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketIdReferenceMultiError) AllErrors() []error { return m }

// ObjectBucketIdReferenceValidationError is the validation error returned by
// ObjectBucketIdReference.Validate if the designated constraints aren't met.
type ObjectBucketIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketIdReferenceValidationError) ErrorName() string {
	return "ObjectBucketIdReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketIdReferenceValidationError{}

// Validate checks the field values on ObjectUserIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserIdReferenceMultiError, or nil if none found.
func (m *ObjectUserIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return ObjectUserIdReferenceMultiError(errors)
	}

	return nil
}

// ObjectUserIdReferenceMultiError is an error wrapping multiple validation
// errors returned by ObjectUserIdReference.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserIdReferenceMultiError) AllErrors() []error { return m }

// ObjectUserIdReferenceValidationError is the validation error returned by
// ObjectUserIdReference.Validate if the designated constraints aren't met.
type ObjectUserIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserIdReferenceValidationError) ErrorName() string {
	return "ObjectUserIdReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserIdReferenceValidationError{}

// Validate checks the field values on CreateOrUpdateLifecycleRuleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrUpdateLifecycleRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateLifecycleRuleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateLifecycleRuleRequestMultiError, or nil if none found.
func (m *CreateOrUpdateLifecycleRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateLifecycleRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ClusterId

	// no validation rules for BucketId

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrUpdateLifecycleRuleRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrUpdateLifecycleRuleRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrUpdateLifecycleRuleRequestValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrUpdateLifecycleRuleRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateLifecycleRuleRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateLifecycleRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateLifecycleRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateLifecycleRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateLifecycleRuleRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateLifecycleRuleRequestValidationError is the validation error
// returned by CreateOrUpdateLifecycleRuleRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateLifecycleRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateLifecycleRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateLifecycleRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateLifecycleRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateLifecycleRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateLifecycleRuleRequestValidationError) ErrorName() string {
	return "CreateOrUpdateLifecycleRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateLifecycleRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateLifecycleRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateLifecycleRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateLifecycleRuleRequestValidationError{}

// Validate checks the field values on LifecycleRulePrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleRulePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleRulePrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleRulePrivateMultiError, or nil if none found.
func (m *LifecycleRulePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleRulePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for BucketId

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LifecycleRulePrivateValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LifecycleRulePrivateValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LifecycleRulePrivateValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LifecycleRulePrivateMultiError(errors)
	}

	return nil
}

// LifecycleRulePrivateMultiError is an error wrapping multiple validation
// errors returned by LifecycleRulePrivate.ValidateAll() if the designated
// constraints aren't met.
type LifecycleRulePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleRulePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleRulePrivateMultiError) AllErrors() []error { return m }

// LifecycleRulePrivateValidationError is the validation error returned by
// LifecycleRulePrivate.Validate if the designated constraints aren't met.
type LifecycleRulePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleRulePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleRulePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleRulePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleRulePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleRulePrivateValidationError) ErrorName() string {
	return "LifecycleRulePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleRulePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleRulePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleRulePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleRulePrivateValidationError{}

// Validate checks the field values on DeleteLifecycleRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLifecycleRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLifecycleRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLifecycleRuleRequestMultiError, or nil if none found.
func (m *DeleteLifecycleRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLifecycleRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ClusterId

	// no validation rules for BucketId

	// no validation rules for RuleId

	if len(errors) > 0 {
		return DeleteLifecycleRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteLifecycleRuleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteLifecycleRuleRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteLifecycleRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLifecycleRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLifecycleRuleRequestMultiError) AllErrors() []error { return m }

// DeleteLifecycleRuleRequestValidationError is the validation error returned
// by DeleteLifecycleRuleRequest.Validate if the designated constraints aren't met.
type DeleteLifecycleRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLifecycleRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLifecycleRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLifecycleRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLifecycleRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLifecycleRuleRequestValidationError) ErrorName() string {
	return "DeleteLifecycleRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLifecycleRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLifecycleRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLifecycleRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLifecycleRuleRequestValidationError{}
