// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fleet_admin_ui_server.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddCloudAccountToComputeNodePoolRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddCloudAccountToComputeNodePoolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddCloudAccountToComputeNodePoolRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddCloudAccountToComputeNodePoolRequestMultiError, or nil if none found.
func (m *AddCloudAccountToComputeNodePoolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCloudAccountToComputeNodePoolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for PoolId

	// no validation rules for CreateAdmin

	if len(errors) > 0 {
		return AddCloudAccountToComputeNodePoolRequestMultiError(errors)
	}

	return nil
}

// AddCloudAccountToComputeNodePoolRequestMultiError is an error wrapping
// multiple validation errors returned by
// AddCloudAccountToComputeNodePoolRequest.ValidateAll() if the designated
// constraints aren't met.
type AddCloudAccountToComputeNodePoolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCloudAccountToComputeNodePoolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCloudAccountToComputeNodePoolRequestMultiError) AllErrors() []error { return m }

// AddCloudAccountToComputeNodePoolRequestValidationError is the validation
// error returned by AddCloudAccountToComputeNodePoolRequest.Validate if the
// designated constraints aren't met.
type AddCloudAccountToComputeNodePoolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCloudAccountToComputeNodePoolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCloudAccountToComputeNodePoolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCloudAccountToComputeNodePoolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCloudAccountToComputeNodePoolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCloudAccountToComputeNodePoolRequestValidationError) ErrorName() string {
	return "AddCloudAccountToComputeNodePoolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCloudAccountToComputeNodePoolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCloudAccountToComputeNodePoolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCloudAccountToComputeNodePoolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCloudAccountToComputeNodePoolRequestValidationError{}

// Validate checks the field values on SearchNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchNodesRequestMultiError, or nil if none found.
func (m *SearchNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PoolId != nil {
		// no validation rules for PoolId
	}

	if len(errors) > 0 {
		return SearchNodesRequestMultiError(errors)
	}

	return nil
}

// SearchNodesRequestMultiError is an error wrapping multiple validation errors
// returned by SearchNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchNodesRequestMultiError) AllErrors() []error { return m }

// SearchNodesRequestValidationError is the validation error returned by
// SearchNodesRequest.Validate if the designated constraints aren't met.
type SearchNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchNodesRequestValidationError) ErrorName() string {
	return "SearchNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchNodesRequestValidationError{}

// Validate checks the field values on SearchNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchNodesResponseMultiError, or nil if none found.
func (m *SearchNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComputeNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchNodesResponseValidationError{
						field:  fmt.Sprintf("ComputeNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchNodesResponseValidationError{
						field:  fmt.Sprintf("ComputeNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchNodesResponseValidationError{
					field:  fmt.Sprintf("ComputeNodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchNodesResponseMultiError(errors)
	}

	return nil
}

// SearchNodesResponseMultiError is an error wrapping multiple validation
// errors returned by SearchNodesResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchNodesResponseMultiError) AllErrors() []error { return m }

// SearchNodesResponseValidationError is the validation error returned by
// SearchNodesResponse.Validate if the designated constraints aren't met.
type SearchNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchNodesResponseValidationError) ErrorName() string {
	return "SearchNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchNodesResponseValidationError{}

// Validate checks the field values on UpdateNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodeRequestMultiError, or nil if none found.
func (m *UpdateNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstanceTypesOverride()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNodeRequestValidationError{
					field:  "InstanceTypesOverride",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNodeRequestValidationError{
					field:  "InstanceTypesOverride",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstanceTypesOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeRequestValidationError{
				field:  "InstanceTypesOverride",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComputeNodePoolsOverride()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNodeRequestValidationError{
					field:  "ComputeNodePoolsOverride",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNodeRequestValidationError{
					field:  "ComputeNodePoolsOverride",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComputeNodePoolsOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeRequestValidationError{
				field:  "ComputeNodePoolsOverride",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NodeId

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	if len(errors) > 0 {
		return UpdateNodeRequestMultiError(errors)
	}

	return nil
}

// UpdateNodeRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodeRequestMultiError) AllErrors() []error { return m }

// UpdateNodeRequestValidationError is the validation error returned by
// UpdateNodeRequest.Validate if the designated constraints aren't met.
type UpdateNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeRequestValidationError) ErrorName() string {
	return "UpdateNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeRequestValidationError{}

// Validate checks the field values on OverridePoliciesAndValues with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OverridePoliciesAndValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OverridePoliciesAndValues with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OverridePoliciesAndValuesMultiError, or nil if none found.
func (m *OverridePoliciesAndValues) ValidateAll() error {
	return m.validate(true)
}

func (m *OverridePoliciesAndValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OverridePolicies

	if len(errors) > 0 {
		return OverridePoliciesAndValuesMultiError(errors)
	}

	return nil
}

// OverridePoliciesAndValuesMultiError is an error wrapping multiple validation
// errors returned by OverridePoliciesAndValues.ValidateAll() if the
// designated constraints aren't met.
type OverridePoliciesAndValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverridePoliciesAndValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverridePoliciesAndValuesMultiError) AllErrors() []error { return m }

// OverridePoliciesAndValuesValidationError is the validation error returned by
// OverridePoliciesAndValues.Validate if the designated constraints aren't met.
type OverridePoliciesAndValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverridePoliciesAndValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverridePoliciesAndValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverridePoliciesAndValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverridePoliciesAndValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverridePoliciesAndValuesValidationError) ErrorName() string {
	return "OverridePoliciesAndValuesValidationError"
}

// Error satisfies the builtin error interface
func (e OverridePoliciesAndValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverridePoliciesAndValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverridePoliciesAndValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverridePoliciesAndValuesValidationError{}

// Validate checks the field values on
// SearchComputeNodePoolsForNodeAdminResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchComputeNodePoolsForNodeAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchComputeNodePoolsForNodeAdminResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchComputeNodePoolsForNodeAdminResponseMultiError, or nil if none found.
func (m *SearchComputeNodePoolsForNodeAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchComputeNodePoolsForNodeAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComputeNodePools() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchComputeNodePoolsForNodeAdminResponseValidationError{
						field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchComputeNodePoolsForNodeAdminResponseValidationError{
						field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchComputeNodePoolsForNodeAdminResponseValidationError{
					field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchComputeNodePoolsForNodeAdminResponseMultiError(errors)
	}

	return nil
}

// SearchComputeNodePoolsForNodeAdminResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchComputeNodePoolsForNodeAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchComputeNodePoolsForNodeAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchComputeNodePoolsForNodeAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchComputeNodePoolsForNodeAdminResponseMultiError) AllErrors() []error { return m }

// SearchComputeNodePoolsForNodeAdminResponseValidationError is the validation
// error returned by SearchComputeNodePoolsForNodeAdminResponse.Validate if
// the designated constraints aren't met.
type SearchComputeNodePoolsForNodeAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchComputeNodePoolsForNodeAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchComputeNodePoolsForNodeAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchComputeNodePoolsForNodeAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchComputeNodePoolsForNodeAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchComputeNodePoolsForNodeAdminResponseValidationError) ErrorName() string {
	return "SearchComputeNodePoolsForNodeAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchComputeNodePoolsForNodeAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchComputeNodePoolsForNodeAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchComputeNodePoolsForNodeAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchComputeNodePoolsForNodeAdminResponseValidationError{}

// Validate checks the field values on ComputeNodePool with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComputeNodePool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComputeNodePool with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComputeNodePoolMultiError, or nil if none found.
func (m *ComputeNodePool) ValidateAll() error {
	return m.validate(true)
}

func (m *ComputeNodePool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	// no validation rules for PoolName

	// no validation rules for NumberOfNodes

	// no validation rules for PoolAccountManagerAgsRole

	if len(errors) > 0 {
		return ComputeNodePoolMultiError(errors)
	}

	return nil
}

// ComputeNodePoolMultiError is an error wrapping multiple validation errors
// returned by ComputeNodePool.ValidateAll() if the designated constraints
// aren't met.
type ComputeNodePoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComputeNodePoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComputeNodePoolMultiError) AllErrors() []error { return m }

// ComputeNodePoolValidationError is the validation error returned by
// ComputeNodePool.Validate if the designated constraints aren't met.
type ComputeNodePoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputeNodePoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputeNodePoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputeNodePoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputeNodePoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputeNodePoolValidationError) ErrorName() string { return "ComputeNodePoolValidationError" }

// Error satisfies the builtin error interface
func (e ComputeNodePoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputeNodePool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputeNodePoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputeNodePoolValidationError{}

// Validate checks the field values on PutComputeNodePoolRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutComputeNodePoolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutComputeNodePoolRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutComputeNodePoolRequestMultiError, or nil if none found.
func (m *PutComputeNodePoolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutComputeNodePoolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	// no validation rules for PoolName

	// no validation rules for PoolAccountManagerAgsRole

	if len(errors) > 0 {
		return PutComputeNodePoolRequestMultiError(errors)
	}

	return nil
}

// PutComputeNodePoolRequestMultiError is an error wrapping multiple validation
// errors returned by PutComputeNodePoolRequest.ValidateAll() if the
// designated constraints aren't met.
type PutComputeNodePoolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutComputeNodePoolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutComputeNodePoolRequestMultiError) AllErrors() []error { return m }

// PutComputeNodePoolRequestValidationError is the validation error returned by
// PutComputeNodePoolRequest.Validate if the designated constraints aren't met.
type PutComputeNodePoolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutComputeNodePoolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutComputeNodePoolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutComputeNodePoolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutComputeNodePoolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutComputeNodePoolRequestValidationError) ErrorName() string {
	return "PutComputeNodePoolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutComputeNodePoolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutComputeNodePoolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutComputeNodePoolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutComputeNodePoolRequestValidationError{}

// Validate checks the field values on
// SearchComputeNodePoolsForPoolAccountManagerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchComputeNodePoolsForPoolAccountManagerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchComputeNodePoolsForPoolAccountManagerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SearchComputeNodePoolsForPoolAccountManagerResponseMultiError, or nil if
// none found.
func (m *SearchComputeNodePoolsForPoolAccountManagerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchComputeNodePoolsForPoolAccountManagerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComputeNodePoolsForPoolAccountManager() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchComputeNodePoolsForPoolAccountManagerResponseValidationError{
						field:  fmt.Sprintf("ComputeNodePoolsForPoolAccountManager[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchComputeNodePoolsForPoolAccountManagerResponseValidationError{
						field:  fmt.Sprintf("ComputeNodePoolsForPoolAccountManager[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchComputeNodePoolsForPoolAccountManagerResponseValidationError{
					field:  fmt.Sprintf("ComputeNodePoolsForPoolAccountManager[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchComputeNodePoolsForPoolAccountManagerResponseMultiError(errors)
	}

	return nil
}

// SearchComputeNodePoolsForPoolAccountManagerResponseMultiError is an error
// wrapping multiple validation errors returned by
// SearchComputeNodePoolsForPoolAccountManagerResponse.ValidateAll() if the
// designated constraints aren't met.
type SearchComputeNodePoolsForPoolAccountManagerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchComputeNodePoolsForPoolAccountManagerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchComputeNodePoolsForPoolAccountManagerResponseMultiError) AllErrors() []error { return m }

// SearchComputeNodePoolsForPoolAccountManagerResponseValidationError is the
// validation error returned by
// SearchComputeNodePoolsForPoolAccountManagerResponse.Validate if the
// designated constraints aren't met.
type SearchComputeNodePoolsForPoolAccountManagerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchComputeNodePoolsForPoolAccountManagerResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SearchComputeNodePoolsForPoolAccountManagerResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SearchComputeNodePoolsForPoolAccountManagerResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SearchComputeNodePoolsForPoolAccountManagerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchComputeNodePoolsForPoolAccountManagerResponseValidationError) ErrorName() string {
	return "SearchComputeNodePoolsForPoolAccountManagerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchComputeNodePoolsForPoolAccountManagerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchComputeNodePoolsForPoolAccountManagerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchComputeNodePoolsForPoolAccountManagerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchComputeNodePoolsForPoolAccountManagerResponseValidationError{}

// Validate checks the field values on ComputeNodePoolForPoolAccountManager
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ComputeNodePoolForPoolAccountManager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComputeNodePoolForPoolAccountManager
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ComputeNodePoolForPoolAccountManagerMultiError, or nil if none found.
func (m *ComputeNodePoolForPoolAccountManager) ValidateAll() error {
	return m.validate(true)
}

func (m *ComputeNodePoolForPoolAccountManager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	// no validation rules for PoolName

	if len(errors) > 0 {
		return ComputeNodePoolForPoolAccountManagerMultiError(errors)
	}

	return nil
}

// ComputeNodePoolForPoolAccountManagerMultiError is an error wrapping multiple
// validation errors returned by
// ComputeNodePoolForPoolAccountManager.ValidateAll() if the designated
// constraints aren't met.
type ComputeNodePoolForPoolAccountManagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComputeNodePoolForPoolAccountManagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComputeNodePoolForPoolAccountManagerMultiError) AllErrors() []error { return m }

// ComputeNodePoolForPoolAccountManagerValidationError is the validation error
// returned by ComputeNodePoolForPoolAccountManager.Validate if the designated
// constraints aren't met.
type ComputeNodePoolForPoolAccountManagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputeNodePoolForPoolAccountManagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputeNodePoolForPoolAccountManagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputeNodePoolForPoolAccountManagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputeNodePoolForPoolAccountManagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputeNodePoolForPoolAccountManagerValidationError) ErrorName() string {
	return "ComputeNodePoolForPoolAccountManagerValidationError"
}

// Error satisfies the builtin error interface
func (e ComputeNodePoolForPoolAccountManagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputeNodePoolForPoolAccountManager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputeNodePoolForPoolAccountManagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputeNodePoolForPoolAccountManagerValidationError{}

// Validate checks the field values on
// SearchCloudAccountsForComputeNodePoolRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchCloudAccountsForComputeNodePoolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchCloudAccountsForComputeNodePoolRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchCloudAccountsForComputeNodePoolRequestMultiError, or nil if none found.
func (m *SearchCloudAccountsForComputeNodePoolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCloudAccountsForComputeNodePoolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	if len(errors) > 0 {
		return SearchCloudAccountsForComputeNodePoolRequestMultiError(errors)
	}

	return nil
}

// SearchCloudAccountsForComputeNodePoolRequestMultiError is an error wrapping
// multiple validation errors returned by
// SearchCloudAccountsForComputeNodePoolRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchCloudAccountsForComputeNodePoolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCloudAccountsForComputeNodePoolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCloudAccountsForComputeNodePoolRequestMultiError) AllErrors() []error { return m }

// SearchCloudAccountsForComputeNodePoolRequestValidationError is the
// validation error returned by
// SearchCloudAccountsForComputeNodePoolRequest.Validate if the designated
// constraints aren't met.
type SearchCloudAccountsForComputeNodePoolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCloudAccountsForComputeNodePoolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCloudAccountsForComputeNodePoolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCloudAccountsForComputeNodePoolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCloudAccountsForComputeNodePoolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCloudAccountsForComputeNodePoolRequestValidationError) ErrorName() string {
	return "SearchCloudAccountsForComputeNodePoolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCloudAccountsForComputeNodePoolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCloudAccountsForComputeNodePoolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCloudAccountsForComputeNodePoolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCloudAccountsForComputeNodePoolRequestValidationError{}

// Validate checks the field values on
// SearchCloudAccountsForComputeNodePoolResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchCloudAccountsForComputeNodePoolResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchCloudAccountsForComputeNodePoolResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchCloudAccountsForComputeNodePoolResponseMultiError, or nil if none found.
func (m *SearchCloudAccountsForComputeNodePoolResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCloudAccountsForComputeNodePoolResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCloudAccountsForComputeNodePool() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchCloudAccountsForComputeNodePoolResponseValidationError{
						field:  fmt.Sprintf("CloudAccountsForComputeNodePool[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchCloudAccountsForComputeNodePoolResponseValidationError{
						field:  fmt.Sprintf("CloudAccountsForComputeNodePool[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchCloudAccountsForComputeNodePoolResponseValidationError{
					field:  fmt.Sprintf("CloudAccountsForComputeNodePool[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchCloudAccountsForComputeNodePoolResponseMultiError(errors)
	}

	return nil
}

// SearchCloudAccountsForComputeNodePoolResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchCloudAccountsForComputeNodePoolResponse.ValidateAll() if the
// designated constraints aren't met.
type SearchCloudAccountsForComputeNodePoolResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCloudAccountsForComputeNodePoolResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCloudAccountsForComputeNodePoolResponseMultiError) AllErrors() []error { return m }

// SearchCloudAccountsForComputeNodePoolResponseValidationError is the
// validation error returned by
// SearchCloudAccountsForComputeNodePoolResponse.Validate if the designated
// constraints aren't met.
type SearchCloudAccountsForComputeNodePoolResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCloudAccountsForComputeNodePoolResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCloudAccountsForComputeNodePoolResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SearchCloudAccountsForComputeNodePoolResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCloudAccountsForComputeNodePoolResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCloudAccountsForComputeNodePoolResponseValidationError) ErrorName() string {
	return "SearchCloudAccountsForComputeNodePoolResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCloudAccountsForComputeNodePoolResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCloudAccountsForComputeNodePoolResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCloudAccountsForComputeNodePoolResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCloudAccountsForComputeNodePoolResponseValidationError{}

// Validate checks the field values on CloudAccountForComputeNodePool with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountForComputeNodePool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountForComputeNodePool with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudAccountForComputeNodePoolMultiError, or nil if none found.
func (m *CloudAccountForComputeNodePool) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountForComputeNodePool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for PoolId

	// no validation rules for CreateAdmin

	if len(errors) > 0 {
		return CloudAccountForComputeNodePoolMultiError(errors)
	}

	return nil
}

// CloudAccountForComputeNodePoolMultiError is an error wrapping multiple
// validation errors returned by CloudAccountForComputeNodePool.ValidateAll()
// if the designated constraints aren't met.
type CloudAccountForComputeNodePoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountForComputeNodePoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountForComputeNodePoolMultiError) AllErrors() []error { return m }

// CloudAccountForComputeNodePoolValidationError is the validation error
// returned by CloudAccountForComputeNodePool.Validate if the designated
// constraints aren't met.
type CloudAccountForComputeNodePoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountForComputeNodePoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountForComputeNodePoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountForComputeNodePoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountForComputeNodePoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountForComputeNodePoolValidationError) ErrorName() string {
	return "CloudAccountForComputeNodePoolValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountForComputeNodePoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountForComputeNodePool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountForComputeNodePoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountForComputeNodePoolValidationError{}

// Validate checks the field values on
// DeleteCloudAccountFromComputeNodePoolRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudAccountFromComputeNodePoolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteCloudAccountFromComputeNodePoolRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteCloudAccountFromComputeNodePoolRequestMultiError, or nil if none found.
func (m *DeleteCloudAccountFromComputeNodePoolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudAccountFromComputeNodePoolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DeleteCloudAccountFromComputeNodePoolRequestMultiError(errors)
	}

	return nil
}

// DeleteCloudAccountFromComputeNodePoolRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteCloudAccountFromComputeNodePoolRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteCloudAccountFromComputeNodePoolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudAccountFromComputeNodePoolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudAccountFromComputeNodePoolRequestMultiError) AllErrors() []error { return m }

// DeleteCloudAccountFromComputeNodePoolRequestValidationError is the
// validation error returned by
// DeleteCloudAccountFromComputeNodePoolRequest.Validate if the designated
// constraints aren't met.
type DeleteCloudAccountFromComputeNodePoolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudAccountFromComputeNodePoolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudAccountFromComputeNodePoolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudAccountFromComputeNodePoolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudAccountFromComputeNodePoolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudAccountFromComputeNodePoolRequestValidationError) ErrorName() string {
	return "DeleteCloudAccountFromComputeNodePoolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudAccountFromComputeNodePoolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudAccountFromComputeNodePoolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudAccountFromComputeNodePoolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudAccountFromComputeNodePoolRequestValidationError{}

// Validate checks the field values on SearchInstanceTypeStatsForNodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchInstanceTypeStatsForNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchInstanceTypeStatsForNodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchInstanceTypeStatsForNodeRequestMultiError, or nil if none found.
func (m *SearchInstanceTypeStatsForNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchInstanceTypeStatsForNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return SearchInstanceTypeStatsForNodeRequestMultiError(errors)
	}

	return nil
}

// SearchInstanceTypeStatsForNodeRequestMultiError is an error wrapping
// multiple validation errors returned by
// SearchInstanceTypeStatsForNodeRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchInstanceTypeStatsForNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchInstanceTypeStatsForNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchInstanceTypeStatsForNodeRequestMultiError) AllErrors() []error { return m }

// SearchInstanceTypeStatsForNodeRequestValidationError is the validation error
// returned by SearchInstanceTypeStatsForNodeRequest.Validate if the
// designated constraints aren't met.
type SearchInstanceTypeStatsForNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchInstanceTypeStatsForNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchInstanceTypeStatsForNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchInstanceTypeStatsForNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchInstanceTypeStatsForNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchInstanceTypeStatsForNodeRequestValidationError) ErrorName() string {
	return "SearchInstanceTypeStatsForNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchInstanceTypeStatsForNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchInstanceTypeStatsForNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchInstanceTypeStatsForNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchInstanceTypeStatsForNodeRequestValidationError{}

// Validate checks the field values on SearchInstanceTypeStatsForNodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchInstanceTypeStatsForNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchInstanceTypeStatsForNodeResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SearchInstanceTypeStatsForNodeResponseMultiError, or nil if none found.
func (m *SearchInstanceTypeStatsForNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchInstanceTypeStatsForNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodeInstanceTypeStats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchInstanceTypeStatsForNodeResponseValidationError{
						field:  fmt.Sprintf("NodeInstanceTypeStats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchInstanceTypeStatsForNodeResponseValidationError{
						field:  fmt.Sprintf("NodeInstanceTypeStats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchInstanceTypeStatsForNodeResponseValidationError{
					field:  fmt.Sprintf("NodeInstanceTypeStats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchInstanceTypeStatsForNodeResponseMultiError(errors)
	}

	return nil
}

// SearchInstanceTypeStatsForNodeResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchInstanceTypeStatsForNodeResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchInstanceTypeStatsForNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchInstanceTypeStatsForNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchInstanceTypeStatsForNodeResponseMultiError) AllErrors() []error { return m }

// SearchInstanceTypeStatsForNodeResponseValidationError is the validation
// error returned by SearchInstanceTypeStatsForNodeResponse.Validate if the
// designated constraints aren't met.
type SearchInstanceTypeStatsForNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchInstanceTypeStatsForNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchInstanceTypeStatsForNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchInstanceTypeStatsForNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchInstanceTypeStatsForNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchInstanceTypeStatsForNodeResponseValidationError) ErrorName() string {
	return "SearchInstanceTypeStatsForNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchInstanceTypeStatsForNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchInstanceTypeStatsForNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchInstanceTypeStatsForNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchInstanceTypeStatsForNodeResponseValidationError{}

// Validate checks the field values on NodeInstanceTypeStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NodeInstanceTypeStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeInstanceTypeStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeInstanceTypeStatsMultiError, or nil if none found.
func (m *NodeInstanceTypeStats) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeInstanceTypeStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	for idx, item := range m.GetInstanceTypeStats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeInstanceTypeStatsValidationError{
						field:  fmt.Sprintf("InstanceTypeStats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeInstanceTypeStatsValidationError{
						field:  fmt.Sprintf("InstanceTypeStats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeInstanceTypeStatsValidationError{
					field:  fmt.Sprintf("InstanceTypeStats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeInstanceTypeStatsMultiError(errors)
	}

	return nil
}

// NodeInstanceTypeStatsMultiError is an error wrapping multiple validation
// errors returned by NodeInstanceTypeStats.ValidateAll() if the designated
// constraints aren't met.
type NodeInstanceTypeStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeInstanceTypeStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeInstanceTypeStatsMultiError) AllErrors() []error { return m }

// NodeInstanceTypeStatsValidationError is the validation error returned by
// NodeInstanceTypeStats.Validate if the designated constraints aren't met.
type NodeInstanceTypeStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeInstanceTypeStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeInstanceTypeStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeInstanceTypeStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeInstanceTypeStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeInstanceTypeStatsValidationError) ErrorName() string {
	return "NodeInstanceTypeStatsValidationError"
}

// Error satisfies the builtin error interface
func (e NodeInstanceTypeStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeInstanceTypeStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeInstanceTypeStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeInstanceTypeStatsValidationError{}

// Validate checks the field values on InstanceTypeStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstanceTypeStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTypeStatsMultiError, or nil if none found.
func (m *InstanceTypeStats) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceType

	// no validation rules for RunningInstances

	// no validation rules for MaxNewInstances

	if len(errors) > 0 {
		return InstanceTypeStatsMultiError(errors)
	}

	return nil
}

// InstanceTypeStatsMultiError is an error wrapping multiple validation errors
// returned by InstanceTypeStats.ValidateAll() if the designated constraints
// aren't met.
type InstanceTypeStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeStatsMultiError) AllErrors() []error { return m }

// InstanceTypeStatsValidationError is the validation error returned by
// InstanceTypeStats.Validate if the designated constraints aren't met.
type InstanceTypeStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeStatsValidationError) ErrorName() string {
	return "InstanceTypeStatsValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTypeStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeStatsValidationError{}

// Validate checks the field values on SearchNodesResponse_ComputeNode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchNodesResponse_ComputeNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchNodesResponse_ComputeNode with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchNodesResponse_ComputeNodeMultiError, or nil if none found.
func (m *SearchNodesResponse_ComputeNode) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchNodesResponse_ComputeNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeName

	// no validation rules for AvailabilityZone

	// no validation rules for PercentageResourcesUsed

	// no validation rules for Region

	// no validation rules for ClusterId

	// no validation rules for Namespace

	// no validation rules for NodeId

	if len(errors) > 0 {
		return SearchNodesResponse_ComputeNodeMultiError(errors)
	}

	return nil
}

// SearchNodesResponse_ComputeNodeMultiError is an error wrapping multiple
// validation errors returned by SearchNodesResponse_ComputeNode.ValidateAll()
// if the designated constraints aren't met.
type SearchNodesResponse_ComputeNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchNodesResponse_ComputeNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchNodesResponse_ComputeNodeMultiError) AllErrors() []error { return m }

// SearchNodesResponse_ComputeNodeValidationError is the validation error
// returned by SearchNodesResponse_ComputeNode.Validate if the designated
// constraints aren't met.
type SearchNodesResponse_ComputeNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchNodesResponse_ComputeNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchNodesResponse_ComputeNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchNodesResponse_ComputeNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchNodesResponse_ComputeNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchNodesResponse_ComputeNodeValidationError) ErrorName() string {
	return "SearchNodesResponse_ComputeNodeValidationError"
}

// Error satisfies the builtin error interface
func (e SearchNodesResponse_ComputeNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchNodesResponse_ComputeNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchNodesResponse_ComputeNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchNodesResponse_ComputeNodeValidationError{}
