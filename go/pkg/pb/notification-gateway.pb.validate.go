// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification-gateway.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NotificationType

	if all {
		switch v := interface{}(m.GetCreation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Creation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Creation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "Creation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Properties

	// no validation rules for ClientRecordId

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.ServiceName != nil {
		// no validation rules for ServiceName
	}

	if m.Severity != nil {
		// no validation rules for Severity
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Alert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AlertMultiError, or nil if none found.
func (m *Alert) ValidateAll() error {
	return m.validate(true)
}

func (m *Alert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AlertType

	if all {
		switch v := interface{}(m.GetCreation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Creation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Creation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "Creation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Properties

	// no validation rules for ClientRecordId

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.ServiceName != nil {
		// no validation rules for ServiceName
	}

	if m.Severity != nil {
		// no validation rules for Severity
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return AlertMultiError(errors)
	}

	return nil
}

// AlertMultiError is an error wrapping multiple validation errors returned by
// Alert.ValidateAll() if the designated constraints aren't met.
type AlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertMultiError) AllErrors() []error { return m }

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AlertType

	if all {
		switch v := interface{}(m.GetCreation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorValidationError{
					field:  "Creation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorValidationError{
					field:  "Creation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorValidationError{
				field:  "Creation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Properties

	// no validation rules for ClientRecordId

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.ServiceName != nil {
		// no validation rules for ServiceName
	}

	if m.Severity != nil {
		// no validation rules for Severity
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.Region != nil {
		// no validation rules for Region
	}

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on CreateEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateEventMultiError, or
// nil if none found.
func (m *CreateEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for EventSubType

	// no validation rules for Properties

	// no validation rules for ClientRecordId

	// no validation rules for EventName

	if m.Severity != nil {
		// no validation rules for Severity
	}

	if m.ServiceName != nil {
		// no validation rules for ServiceName
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Region != nil {
		// no validation rules for Region
	}

	if m.EventState != nil {
		// no validation rules for EventState
	}

	if len(errors) > 0 {
		return CreateEventMultiError(errors)
	}

	return nil
}

// CreateEventMultiError is an error wrapping multiple validation errors
// returned by CreateEvent.ValidateAll() if the designated constraints aren't met.
type CreateEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventMultiError) AllErrors() []error { return m }

// CreateEventValidationError is the validation error returned by
// CreateEvent.Validate if the designated constraints aren't met.
type CreateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventValidationError) ErrorName() string { return "CreateEventValidationError" }

// Error satisfies the builtin error interface
func (e CreateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventValidationError{}

// Validate checks the field values on RegisterEventSubTypeReceiver with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEventSubTypeReceiver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEventSubTypeReceiver with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEventSubTypeReceiverMultiError, or nil if none found.
func (m *RegisterEventSubTypeReceiver) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEventSubTypeReceiver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventSubType

	// no validation rules for EventReceiver

	if len(errors) > 0 {
		return RegisterEventSubTypeReceiverMultiError(errors)
	}

	return nil
}

// RegisterEventSubTypeReceiverMultiError is an error wrapping multiple
// validation errors returned by RegisterEventSubTypeReceiver.ValidateAll() if
// the designated constraints aren't met.
type RegisterEventSubTypeReceiverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEventSubTypeReceiverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEventSubTypeReceiverMultiError) AllErrors() []error { return m }

// RegisterEventSubTypeReceiverValidationError is the validation error returned
// by RegisterEventSubTypeReceiver.Validate if the designated constraints
// aren't met.
type RegisterEventSubTypeReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEventSubTypeReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEventSubTypeReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEventSubTypeReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEventSubTypeReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEventSubTypeReceiverValidationError) ErrorName() string {
	return "RegisterEventSubTypeReceiverValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEventSubTypeReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEventSubTypeReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEventSubTypeReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEventSubTypeReceiverValidationError{}

// Validate checks the field values on RegisterServiceEvents with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterServiceEvents) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterServiceEvents with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterServiceEventsMultiError, or nil if none found.
func (m *RegisterServiceEvents) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterServiceEvents) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	for idx, item := range m.GetEventSubTypeRecievers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterServiceEventsValidationError{
						field:  fmt.Sprintf("EventSubTypeRecievers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterServiceEventsValidationError{
						field:  fmt.Sprintf("EventSubTypeRecievers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterServiceEventsValidationError{
					field:  fmt.Sprintf("EventSubTypeRecievers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterServiceEventsMultiError(errors)
	}

	return nil
}

// RegisterServiceEventsMultiError is an error wrapping multiple validation
// errors returned by RegisterServiceEvents.ValidateAll() if the designated
// constraints aren't met.
type RegisterServiceEventsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterServiceEventsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterServiceEventsMultiError) AllErrors() []error { return m }

// RegisterServiceEventsValidationError is the validation error returned by
// RegisterServiceEvents.Validate if the designated constraints aren't met.
type RegisterServiceEventsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterServiceEventsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterServiceEventsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterServiceEventsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterServiceEventsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterServiceEventsValidationError) ErrorName() string {
	return "RegisterServiceEventsValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterServiceEventsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterServiceEvents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterServiceEventsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterServiceEventsValidationError{}

// Validate checks the field values on Events with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Events) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Events with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventsMultiError, or nil if none found.
func (m *Events) ValidateAll() error {
	return m.validate(true)
}

func (m *Events) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfNotifications

	// no validation rules for NumberOfAlerts

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventsValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventsValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventsValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventsValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventsValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventsValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventsMultiError(errors)
	}

	return nil
}

// EventsMultiError is an error wrapping multiple validation errors returned by
// Events.ValidateAll() if the designated constraints aren't met.
type EventsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventsMultiError) AllErrors() []error { return m }

// EventsValidationError is the validation error returned by Events.Validate if
// the designated constraints aren't met.
type EventsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventsValidationError) ErrorName() string { return "EventsValidationError" }

// Error satisfies the builtin error interface
func (e EventsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventsValidationError{}

// Validate checks the field values on EventsSubscribe with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EventsSubscribe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventsSubscribe with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventsSubscribeMultiError, or nil if none found.
func (m *EventsSubscribe) ValidateAll() error {
	return m.validate(true)
}

func (m *EventsSubscribe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return EventsSubscribeMultiError(errors)
	}

	return nil
}

// EventsSubscribeMultiError is an error wrapping multiple validation errors
// returned by EventsSubscribe.ValidateAll() if the designated constraints
// aren't met.
type EventsSubscribeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventsSubscribeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventsSubscribeMultiError) AllErrors() []error { return m }

// EventsSubscribeValidationError is the validation error returned by
// EventsSubscribe.Validate if the designated constraints aren't met.
type EventsSubscribeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventsSubscribeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventsSubscribeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventsSubscribeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventsSubscribeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventsSubscribeValidationError) ErrorName() string { return "EventsSubscribeValidationError" }

// Error satisfies the builtin error interface
func (e EventsSubscribeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventsSubscribe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventsSubscribeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventsSubscribeValidationError{}

// Validate checks the field values on EventsFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventsFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventsFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventsFilterMultiError, or
// nil if none found.
func (m *EventsFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *EventsFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ClientRecordId

	if len(errors) > 0 {
		return EventsFilterMultiError(errors)
	}

	return nil
}

// EventsFilterMultiError is an error wrapping multiple validation errors
// returned by EventsFilter.ValidateAll() if the designated constraints aren't met.
type EventsFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventsFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventsFilterMultiError) AllErrors() []error { return m }

// EventsFilterValidationError is the validation error returned by
// EventsFilter.Validate if the designated constraints aren't met.
type EventsFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventsFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventsFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventsFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventsFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventsFilterValidationError) ErrorName() string { return "EventsFilterValidationError" }

// Error satisfies the builtin error interface
func (e EventsFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventsFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventsFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventsFilterValidationError{}

// Validate checks the field values on PublishEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishEventRequestMultiError, or nil if none found.
func (m *PublishEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishEventRequestValidationError{
					field:  "CreateEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishEventRequestValidationError{
					field:  "CreateEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishEventRequestValidationError{
				field:  "CreateEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Subject

	// no validation rules for TopicName

	if len(errors) > 0 {
		return PublishEventRequestMultiError(errors)
	}

	return nil
}

// PublishEventRequestMultiError is an error wrapping multiple validation
// errors returned by PublishEventRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishEventRequestMultiError) AllErrors() []error { return m }

// PublishEventRequestValidationError is the validation error returned by
// PublishEventRequest.Validate if the designated constraints aren't met.
type PublishEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishEventRequestValidationError) ErrorName() string {
	return "PublishEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishEventRequestValidationError{}

// Validate checks the field values on SubscribeEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeEventRequestMultiError, or nil if none found.
func (m *SubscribeEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TopicName

	// no validation rules for QueueName

	// no validation rules for Protocol

	if len(errors) > 0 {
		return SubscribeEventRequestMultiError(errors)
	}

	return nil
}

// SubscribeEventRequestMultiError is an error wrapping multiple validation
// errors returned by SubscribeEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscribeEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeEventRequestMultiError) AllErrors() []error { return m }

// SubscribeEventRequestValidationError is the validation error returned by
// SubscribeEventRequest.Validate if the designated constraints aren't met.
type SubscribeEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeEventRequestValidationError) ErrorName() string {
	return "SubscribeEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeEventRequestValidationError{}

// Validate checks the field values on ReceiveEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveEventRequestMultiError, or nil if none found.
func (m *ReceiveEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QueueName

	// no validation rules for MaxNumberOfMessages

	// no validation rules for WaitTimeSeconds

	// no validation rules for EventName

	// no validation rules for TimeStamp

	if len(errors) > 0 {
		return ReceiveEventRequestMultiError(errors)
	}

	return nil
}

// ReceiveEventRequestMultiError is an error wrapping multiple validation
// errors returned by ReceiveEventRequest.ValidateAll() if the designated
// constraints aren't met.
type ReceiveEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveEventRequestMultiError) AllErrors() []error { return m }

// ReceiveEventRequestValidationError is the validation error returned by
// ReceiveEventRequest.Validate if the designated constraints aren't met.
type ReceiveEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveEventRequestValidationError) ErrorName() string {
	return "ReceiveEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveEventRequestValidationError{}

// Validate checks the field values on DeleteEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEventRequestMultiError, or nil if none found.
func (m *DeleteEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	// no validation rules for ReceiptHandle

	if len(errors) > 0 {
		return DeleteEventRequestMultiError(errors)
	}

	return nil
}

// DeleteEventRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEventRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventRequestMultiError) AllErrors() []error { return m }

// DeleteEventRequestValidationError is the validation error returned by
// DeleteEventRequest.Validate if the designated constraints aren't met.
type DeleteEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventRequestValidationError) ErrorName() string {
	return "DeleteEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventRequestValidationError{}

// Validate checks the field values on DeleteEventRequestList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEventRequestList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventRequestList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEventRequestListMultiError, or nil if none found.
func (m *DeleteEventRequestList) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventRequestList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QueueName

	for idx, item := range m.GetDeleteEventRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteEventRequestListValidationError{
						field:  fmt.Sprintf("DeleteEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteEventRequestListValidationError{
						field:  fmt.Sprintf("DeleteEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteEventRequestListValidationError{
					field:  fmt.Sprintf("DeleteEventRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteEventRequestListMultiError(errors)
	}

	return nil
}

// DeleteEventRequestListMultiError is an error wrapping multiple validation
// errors returned by DeleteEventRequestList.ValidateAll() if the designated
// constraints aren't met.
type DeleteEventRequestListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventRequestListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventRequestListMultiError) AllErrors() []error { return m }

// DeleteEventRequestListValidationError is the validation error returned by
// DeleteEventRequestList.Validate if the designated constraints aren't met.
type DeleteEventRequestListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventRequestListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventRequestListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventRequestListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventRequestListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventRequestListValidationError) ErrorName() string {
	return "DeleteEventRequestListValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventRequestListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventRequestList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventRequestListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventRequestListValidationError{}

// Validate checks the field values on SubscribeEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeEventResponseMultiError, or nil if none found.
func (m *SubscribeEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriptionArn

	if len(errors) > 0 {
		return SubscribeEventResponseMultiError(errors)
	}

	return nil
}

// SubscribeEventResponseMultiError is an error wrapping multiple validation
// errors returned by SubscribeEventResponse.ValidateAll() if the designated
// constraints aren't met.
type SubscribeEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeEventResponseMultiError) AllErrors() []error { return m }

// SubscribeEventResponseValidationError is the validation error returned by
// SubscribeEventResponse.Validate if the designated constraints aren't met.
type SubscribeEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeEventResponseValidationError) ErrorName() string {
	return "SubscribeEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeEventResponseValidationError{}

// Validate checks the field values on PublishEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishEventResponseMultiError, or nil if none found.
func (m *PublishEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	if len(errors) > 0 {
		return PublishEventResponseMultiError(errors)
	}

	return nil
}

// PublishEventResponseMultiError is an error wrapping multiple validation
// errors returned by PublishEventResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishEventResponseMultiError) AllErrors() []error { return m }

// PublishEventResponseValidationError is the validation error returned by
// PublishEventResponse.Validate if the designated constraints aren't met.
type PublishEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishEventResponseValidationError) ErrorName() string {
	return "PublishEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishEventResponseValidationError{}

// Validate checks the field values on ReceiveEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveEventResponseMultiError, or nil if none found.
func (m *ReceiveEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessageResponse() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveEventResponseValidationError{
						field:  fmt.Sprintf("MessageResponse[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveEventResponseValidationError{
						field:  fmt.Sprintf("MessageResponse[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveEventResponseValidationError{
					field:  fmt.Sprintf("MessageResponse[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReceiveEventResponseMultiError(errors)
	}

	return nil
}

// ReceiveEventResponseMultiError is an error wrapping multiple validation
// errors returned by ReceiveEventResponse.ValidateAll() if the designated
// constraints aren't met.
type ReceiveEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveEventResponseMultiError) AllErrors() []error { return m }

// ReceiveEventResponseValidationError is the validation error returned by
// ReceiveEventResponse.Validate if the designated constraints aren't met.
type ReceiveEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveEventResponseValidationError) ErrorName() string {
	return "ReceiveEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveEventResponseValidationError{}

// Validate checks the field values on MessageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageResponseMultiError, or nil if none found.
func (m *MessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	// no validation rules for Body

	// no validation rules for Attributes

	// no validation rules for ReceiptHandle

	if len(errors) > 0 {
		return MessageResponseMultiError(errors)
	}

	return nil
}

// MessageResponseMultiError is an error wrapping multiple validation errors
// returned by MessageResponse.ValidateAll() if the designated constraints
// aren't met.
type MessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageResponseMultiError) AllErrors() []error { return m }

// MessageResponseValidationError is the validation error returned by
// MessageResponse.Validate if the designated constraints aren't met.
type MessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageResponseValidationError) ErrorName() string { return "MessageResponseValidationError" }

// Error satisfies the builtin error interface
func (e MessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageResponseValidationError{}

// Validate checks the field values on EmailRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmailRequestMultiError, or
// nil if none found.
func (m *EmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageType

	// no validation rules for ServiceName

	// no validation rules for Recipient

	// no validation rules for Sender

	// no validation rules for TemplateName

	// no validation rules for TemplateData

	if len(errors) > 0 {
		return EmailRequestMultiError(errors)
	}

	return nil
}

// EmailRequestMultiError is an error wrapping multiple validation errors
// returned by EmailRequest.ValidateAll() if the designated constraints aren't met.
type EmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailRequestMultiError) AllErrors() []error { return m }

// EmailRequestValidationError is the validation error returned by
// EmailRequest.Validate if the designated constraints aren't met.
type EmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailRequestValidationError) ErrorName() string { return "EmailRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailRequestValidationError{}

// Validate checks the field values on SendEmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailRequestMultiError, or nil if none found.
func (m *SendEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageType

	// no validation rules for ServiceName

	// no validation rules for Sender

	// no validation rules for TemplateName

	// no validation rules for TemplateData

	if len(errors) > 0 {
		return SendEmailRequestMultiError(errors)
	}

	return nil
}

// SendEmailRequestMultiError is an error wrapping multiple validation errors
// returned by SendEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type SendEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailRequestMultiError) AllErrors() []error { return m }

// SendEmailRequestValidationError is the validation error returned by
// SendEmailRequest.Validate if the designated constraints aren't met.
type SendEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailRequestValidationError) ErrorName() string { return "SendEmailRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailRequestValidationError{}

// Validate checks the field values on EmailResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmailResponseMultiError, or
// nil if none found.
func (m *EmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for MessageId

	if len(errors) > 0 {
		return EmailResponseMultiError(errors)
	}

	return nil
}

// EmailResponseMultiError is an error wrapping multiple validation errors
// returned by EmailResponse.ValidateAll() if the designated constraints
// aren't met.
type EmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailResponseMultiError) AllErrors() []error { return m }

// EmailResponseValidationError is the validation error returned by
// EmailResponse.Validate if the designated constraints aren't met.
type EmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailResponseValidationError) ErrorName() string { return "EmailResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailResponseValidationError{}
