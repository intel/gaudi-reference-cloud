// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FilesystemCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemCreateRequestMultiError, or nil if none found.
func (m *FilesystemCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemCreateRequestMultiError(errors)
	}

	return nil
}

// FilesystemCreateRequestMultiError is an error wrapping multiple validation
// errors returned by FilesystemCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemCreateRequestMultiError) AllErrors() []error { return m }

// FilesystemCreateRequestValidationError is the validation error returned by
// FilesystemCreateRequest.Validate if the designated constraints aren't met.
type FilesystemCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemCreateRequestValidationError) ErrorName() string {
	return "FilesystemCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemCreateRequestValidationError{}

// Validate checks the field values on FilesystemGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemGetRequestMultiError, or nil if none found.
func (m *FilesystemGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemGetRequestMultiError(errors)
	}

	return nil
}

// FilesystemGetRequestMultiError is an error wrapping multiple validation
// errors returned by FilesystemGetRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemGetRequestMultiError) AllErrors() []error { return m }

// FilesystemGetRequestValidationError is the validation error returned by
// FilesystemGetRequest.Validate if the designated constraints aren't met.
type FilesystemGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemGetRequestValidationError) ErrorName() string {
	return "FilesystemGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemGetRequestValidationError{}

// Validate checks the field values on FilesystemGetUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemGetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemGetUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemGetUserRequestMultiError, or nil if none found.
func (m *FilesystemGetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemGetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemGetUserRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemGetUserRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemGetUserRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemGetUserRequestMultiError(errors)
	}

	return nil
}

// FilesystemGetUserRequestMultiError is an error wrapping multiple validation
// errors returned by FilesystemGetUserRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemGetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemGetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemGetUserRequestMultiError) AllErrors() []error { return m }

// FilesystemGetUserRequestValidationError is the validation error returned by
// FilesystemGetUserRequest.Validate if the designated constraints aren't met.
type FilesystemGetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemGetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemGetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemGetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemGetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemGetUserRequestValidationError) ErrorName() string {
	return "FilesystemGetUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemGetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemGetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemGetUserRequestValidationError{}

// Validate checks the field values on FilesystemGetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemGetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemGetUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemGetUserResponseMultiError, or nil if none found.
func (m *FilesystemGetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemGetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Password

	if len(errors) > 0 {
		return FilesystemGetUserResponseMultiError(errors)
	}

	return nil
}

// FilesystemGetUserResponseMultiError is an error wrapping multiple validation
// errors returned by FilesystemGetUserResponse.ValidateAll() if the
// designated constraints aren't met.
type FilesystemGetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemGetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemGetUserResponseMultiError) AllErrors() []error { return m }

// FilesystemGetUserResponseValidationError is the validation error returned by
// FilesystemGetUserResponse.Validate if the designated constraints aren't met.
type FilesystemGetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemGetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemGetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemGetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemGetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemGetUserResponseValidationError) ErrorName() string {
	return "FilesystemGetUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemGetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemGetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemGetUserResponseValidationError{}

// Validate checks the field values on FilesystemSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemSearchRequestMultiError, or nil if none found.
func (m *FilesystemSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemSearchRequestMultiError(errors)
	}

	return nil
}

// FilesystemSearchRequestMultiError is an error wrapping multiple validation
// errors returned by FilesystemSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemSearchRequestMultiError) AllErrors() []error { return m }

// FilesystemSearchRequestValidationError is the validation error returned by
// FilesystemSearchRequest.Validate if the designated constraints aren't met.
type FilesystemSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemSearchRequestValidationError) ErrorName() string {
	return "FilesystemSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemSearchRequestValidationError{}

// Validate checks the field values on FilesystemSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemSearchResponseMultiError, or nil if none found.
func (m *FilesystemSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilesystemSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilesystemSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilesystemSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FilesystemSearchResponseMultiError(errors)
	}

	return nil
}

// FilesystemSearchResponseMultiError is an error wrapping multiple validation
// errors returned by FilesystemSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type FilesystemSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemSearchResponseMultiError) AllErrors() []error { return m }

// FilesystemSearchResponseValidationError is the validation error returned by
// FilesystemSearchResponse.Validate if the designated constraints aren't met.
type FilesystemSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemSearchResponseValidationError) ErrorName() string {
	return "FilesystemSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemSearchResponseValidationError{}

// Validate checks the field values on FilesystemUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemUpdateRequestMultiError, or nil if none found.
func (m *FilesystemUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemUpdateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemUpdateRequestMultiError(errors)
	}

	return nil
}

// FilesystemUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by FilesystemUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemUpdateRequestMultiError) AllErrors() []error { return m }

// FilesystemUpdateRequestValidationError is the validation error returned by
// FilesystemUpdateRequest.Validate if the designated constraints aren't met.
type FilesystemUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemUpdateRequestValidationError) ErrorName() string {
	return "FilesystemUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemUpdateRequestValidationError{}

// Validate checks the field values on FilesystemDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemDeleteRequestMultiError, or nil if none found.
func (m *FilesystemDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemDeleteRequestMultiError(errors)
	}

	return nil
}

// FilesystemDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by FilesystemDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type FilesystemDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemDeleteRequestMultiError) AllErrors() []error { return m }

// FilesystemDeleteRequestValidationError is the validation error returned by
// FilesystemDeleteRequest.Validate if the designated constraints aren't met.
type FilesystemDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemDeleteRequestValidationError) ErrorName() string {
	return "FilesystemDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemDeleteRequestValidationError{}

// Validate checks the field values on Filesystem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filesystem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filesystem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilesystemMultiError, or
// nil if none found.
func (m *Filesystem) ValidateAll() error {
	return m.validate(true)
}

func (m *Filesystem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemMultiError(errors)
	}

	return nil
}

// FilesystemMultiError is an error wrapping multiple validation errors
// returned by Filesystem.ValidateAll() if the designated constraints aren't met.
type FilesystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMultiError) AllErrors() []error { return m }

// FilesystemValidationError is the validation error returned by
// Filesystem.Validate if the designated constraints aren't met.
type FilesystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemValidationError) ErrorName() string { return "FilesystemValidationError" }

// Error satisfies the builtin error interface
func (e FilesystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemValidationError{}

// Validate checks the field values on FilesystemSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilesystemSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilesystemSpecMultiError,
// or nil if none found.
func (m *FilesystemSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemSpecValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemSpecValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemSpecValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StorageClass

	// no validation rules for FilesystemType

	// no validation rules for AccessModes

	// no validation rules for MountProtocol

	// no validation rules for Encrypted

	// no validation rules for InstanceType

	if len(errors) > 0 {
		return FilesystemSpecMultiError(errors)
	}

	return nil
}

// FilesystemSpecMultiError is an error wrapping multiple validation errors
// returned by FilesystemSpec.ValidateAll() if the designated constraints
// aren't met.
type FilesystemSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemSpecMultiError) AllErrors() []error { return m }

// FilesystemSpecValidationError is the validation error returned by
// FilesystemSpec.Validate if the designated constraints aren't met.
type FilesystemSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemSpecValidationError) ErrorName() string { return "FilesystemSpecValidationError" }

// Error satisfies the builtin error interface
func (e FilesystemSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemSpecValidationError{}

// Validate checks the field values on FilesystemSpecUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemSpecUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemSpecUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemSpecUpdateMultiError, or nil if none found.
func (m *FilesystemSpecUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemSpecUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemSpecUpdateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemSpecUpdateValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemSpecUpdateValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemSpecUpdateMultiError(errors)
	}

	return nil
}

// FilesystemSpecUpdateMultiError is an error wrapping multiple validation
// errors returned by FilesystemSpecUpdate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemSpecUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemSpecUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemSpecUpdateMultiError) AllErrors() []error { return m }

// FilesystemSpecUpdateValidationError is the validation error returned by
// FilesystemSpecUpdate.Validate if the designated constraints aren't met.
type FilesystemSpecUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemSpecUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemSpecUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemSpecUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemSpecUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemSpecUpdateValidationError) ErrorName() string {
	return "FilesystemSpecUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemSpecUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemSpecUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemSpecUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemSpecUpdateValidationError{}

// Validate checks the field values on FilesystemCapacity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemCapacity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemCapacity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemCapacityMultiError, or nil if none found.
func (m *FilesystemCapacity) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemCapacity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Storage

	if len(errors) > 0 {
		return FilesystemCapacityMultiError(errors)
	}

	return nil
}

// FilesystemCapacityMultiError is an error wrapping multiple validation errors
// returned by FilesystemCapacity.ValidateAll() if the designated constraints
// aren't met.
type FilesystemCapacityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemCapacityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemCapacityMultiError) AllErrors() []error { return m }

// FilesystemCapacityValidationError is the validation error returned by
// FilesystemCapacity.Validate if the designated constraints aren't met.
type FilesystemCapacityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemCapacityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemCapacityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemCapacityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemCapacityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemCapacityValidationError) ErrorName() string {
	return "FilesystemCapacityValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemCapacityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemCapacity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemCapacityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemCapacityValidationError{}

// Validate checks the field values on FilesystemMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMetadataMultiError, or nil if none found.
func (m *FilesystemMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Description

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemMetadataValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemMetadataValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemMetadataValidationError{
				field:  "UpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemMetadataValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemMetadataMultiError(errors)
	}

	return nil
}

// FilesystemMetadataMultiError is an error wrapping multiple validation errors
// returned by FilesystemMetadata.ValidateAll() if the designated constraints
// aren't met.
type FilesystemMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMetadataMultiError) AllErrors() []error { return m }

// FilesystemMetadataValidationError is the validation error returned by
// FilesystemMetadata.Validate if the designated constraints aren't met.
type FilesystemMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMetadataValidationError) ErrorName() string {
	return "FilesystemMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMetadataValidationError{}

// Validate checks the field values on FilesystemMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMetadataCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMetadataCreateMultiError, or nil if none found.
func (m *FilesystemMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Labels

	if len(errors) > 0 {
		return FilesystemMetadataCreateMultiError(errors)
	}

	return nil
}

// FilesystemMetadataCreateMultiError is an error wrapping multiple validation
// errors returned by FilesystemMetadataCreate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMetadataCreateMultiError) AllErrors() []error { return m }

// FilesystemMetadataCreateValidationError is the validation error returned by
// FilesystemMetadataCreate.Validate if the designated constraints aren't met.
type FilesystemMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMetadataCreateValidationError) ErrorName() string {
	return "FilesystemMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMetadataCreateValidationError{}

// Validate checks the field values on FilesystemMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMetadataUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMetadataUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMetadataUpdateMultiError, or nil if none found.
func (m *FilesystemMetadataUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMetadataUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	switch v := m.NameOrId.(type) {
	case *FilesystemMetadataUpdate_Name:
		if v == nil {
			err := FilesystemMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *FilesystemMetadataUpdate_ResourceId:
		if v == nil {
			err := FilesystemMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FilesystemMetadataUpdateMultiError(errors)
	}

	return nil
}

// FilesystemMetadataUpdateMultiError is an error wrapping multiple validation
// errors returned by FilesystemMetadataUpdate.ValidateAll() if the designated
// constraints aren't met.
type FilesystemMetadataUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMetadataUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMetadataUpdateMultiError) AllErrors() []error { return m }

// FilesystemMetadataUpdateValidationError is the validation error returned by
// FilesystemMetadataUpdate.Validate if the designated constraints aren't met.
type FilesystemMetadataUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMetadataUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMetadataUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMetadataUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMetadataUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMetadataUpdateValidationError) ErrorName() string {
	return "FilesystemMetadataUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMetadataUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMetadataUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMetadataUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMetadataUpdateValidationError{}

// Validate checks the field values on FilesystemMetadataReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMetadataReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMetadataReferenceMultiError, or nil if none found.
func (m *FilesystemMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	switch v := m.NameOrId.(type) {
	case *FilesystemMetadataReference_Name:
		if v == nil {
			err := FilesystemMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *FilesystemMetadataReference_ResourceId:
		if v == nil {
			err := FilesystemMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FilesystemMetadataReferenceMultiError(errors)
	}

	return nil
}

// FilesystemMetadataReferenceMultiError is an error wrapping multiple
// validation errors returned by FilesystemMetadataReference.ValidateAll() if
// the designated constraints aren't met.
type FilesystemMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMetadataReferenceMultiError) AllErrors() []error { return m }

// FilesystemMetadataReferenceValidationError is the validation error returned
// by FilesystemMetadataReference.Validate if the designated constraints
// aren't met.
type FilesystemMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMetadataReferenceValidationError) ErrorName() string {
	return "FilesystemMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMetadataReferenceValidationError{}

// Validate checks the field values on FilesystemMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMetadataSearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMetadataSearch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMetadataSearchMultiError, or nil if none found.
func (m *FilesystemMetadataSearch) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMetadataSearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	// no validation rules for FilterType

	if len(errors) > 0 {
		return FilesystemMetadataSearchMultiError(errors)
	}

	return nil
}

// FilesystemMetadataSearchMultiError is an error wrapping multiple validation
// errors returned by FilesystemMetadataSearch.ValidateAll() if the designated
// constraints aren't met.
type FilesystemMetadataSearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMetadataSearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMetadataSearchMultiError) AllErrors() []error { return m }

// FilesystemMetadataSearchValidationError is the validation error returned by
// FilesystemMetadataSearch.Validate if the designated constraints aren't met.
type FilesystemMetadataSearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMetadataSearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMetadataSearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMetadataSearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMetadataSearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMetadataSearchValidationError) ErrorName() string {
	return "FilesystemMetadataSearchValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMetadataSearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMetadataSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMetadataSearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMetadataSearchValidationError{}

// Validate checks the field values on FilesystemStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FilesystemStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemStatusMultiError, or nil if none found.
func (m *FilesystemStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemStatusValidationError{
					field:  "Mount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemStatusValidationError{
					field:  "Mount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemStatusValidationError{
				field:  "Mount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecurityGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilesystemStatusValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilesystemStatusValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilesystemStatusValidationError{
				field:  "SecurityGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilesystemStatusMultiError(errors)
	}

	return nil
}

// FilesystemStatusMultiError is an error wrapping multiple validation errors
// returned by FilesystemStatus.ValidateAll() if the designated constraints
// aren't met.
type FilesystemStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemStatusMultiError) AllErrors() []error { return m }

// FilesystemStatusValidationError is the validation error returned by
// FilesystemStatus.Validate if the designated constraints aren't met.
type FilesystemStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemStatusValidationError) ErrorName() string { return "FilesystemStatusValidationError" }

// Error satisfies the builtin error interface
func (e FilesystemStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemStatusValidationError{}

// Validate checks the field values on FilesystemMountStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilesystemMountStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilesystemMountStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilesystemMountStatusMultiError, or nil if none found.
func (m *FilesystemMountStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *FilesystemMountStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ClusterAddr

	// no validation rules for Namespace

	// no validation rules for Username

	// no validation rules for FilesystemName

	// no validation rules for VolumePath

	if m.ClusterVersion != nil {
		// no validation rules for ClusterVersion
	}

	if len(errors) > 0 {
		return FilesystemMountStatusMultiError(errors)
	}

	return nil
}

// FilesystemMountStatusMultiError is an error wrapping multiple validation
// errors returned by FilesystemMountStatus.ValidateAll() if the designated
// constraints aren't met.
type FilesystemMountStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesystemMountStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesystemMountStatusMultiError) AllErrors() []error { return m }

// FilesystemMountStatusValidationError is the validation error returned by
// FilesystemMountStatus.Validate if the designated constraints aren't met.
type FilesystemMountStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesystemMountStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesystemMountStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesystemMountStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesystemMountStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesystemMountStatusValidationError) ErrorName() string {
	return "FilesystemMountStatusValidationError"
}

// Error satisfies the builtin error interface
func (e FilesystemMountStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilesystemMountStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesystemMountStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesystemMountStatusValidationError{}

// Validate checks the field values on VolumeSecurityGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VolumeSecurityGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VolumeSecurityGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VolumeSecurityGroupMultiError, or nil if none found.
func (m *VolumeSecurityGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *VolumeSecurityGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNetworkFilterAllow() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VolumeSecurityGroupValidationError{
						field:  fmt.Sprintf("NetworkFilterAllow[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VolumeSecurityGroupValidationError{
						field:  fmt.Sprintf("NetworkFilterAllow[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VolumeSecurityGroupValidationError{
					field:  fmt.Sprintf("NetworkFilterAllow[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VolumeSecurityGroupMultiError(errors)
	}

	return nil
}

// VolumeSecurityGroupMultiError is an error wrapping multiple validation
// errors returned by VolumeSecurityGroup.ValidateAll() if the designated
// constraints aren't met.
type VolumeSecurityGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeSecurityGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeSecurityGroupMultiError) AllErrors() []error { return m }

// VolumeSecurityGroupValidationError is the validation error returned by
// VolumeSecurityGroup.Validate if the designated constraints aren't met.
type VolumeSecurityGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeSecurityGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeSecurityGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeSecurityGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeSecurityGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeSecurityGroupValidationError) ErrorName() string {
	return "VolumeSecurityGroupValidationError"
}

// Error satisfies the builtin error interface
func (e VolumeSecurityGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeSecurityGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeSecurityGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeSecurityGroupValidationError{}

// Validate checks the field values on VolumeNetworkGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VolumeNetworkGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VolumeNetworkGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VolumeNetworkGroupMultiError, or nil if none found.
func (m *VolumeNetworkGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *VolumeNetworkGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subnet

	// no validation rules for PrefixLength

	// no validation rules for Gateway

	if len(errors) > 0 {
		return VolumeNetworkGroupMultiError(errors)
	}

	return nil
}

// VolumeNetworkGroupMultiError is an error wrapping multiple validation errors
// returned by VolumeNetworkGroup.ValidateAll() if the designated constraints
// aren't met.
type VolumeNetworkGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeNetworkGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeNetworkGroupMultiError) AllErrors() []error { return m }

// VolumeNetworkGroupValidationError is the validation error returned by
// VolumeNetworkGroup.Validate if the designated constraints aren't met.
type VolumeNetworkGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeNetworkGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeNetworkGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeNetworkGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeNetworkGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeNetworkGroupValidationError) ErrorName() string {
	return "VolumeNetworkGroupValidationError"
}

// Error satisfies the builtin error interface
func (e VolumeNetworkGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeNetworkGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeNetworkGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeNetworkGroupValidationError{}

// Validate checks the field values on ObjectBucketCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketCreateRequestMultiError, or nil if none found.
func (m *ObjectBucketCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketCreateRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type ObjectBucketCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketCreateRequestMultiError) AllErrors() []error { return m }

// ObjectBucketCreateRequestValidationError is the validation error returned by
// ObjectBucketCreateRequest.Validate if the designated constraints aren't met.
type ObjectBucketCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketCreateRequestValidationError) ErrorName() string {
	return "ObjectBucketCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketCreateRequestValidationError{}

// Validate checks the field values on ObjectBucketCreateMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketCreateMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketCreateMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketCreateMetadataMultiError, or nil if none found.
func (m *ObjectBucketCreateMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketCreateMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Labels

	if len(errors) > 0 {
		return ObjectBucketCreateMetadataMultiError(errors)
	}

	return nil
}

// ObjectBucketCreateMetadataMultiError is an error wrapping multiple
// validation errors returned by ObjectBucketCreateMetadata.ValidateAll() if
// the designated constraints aren't met.
type ObjectBucketCreateMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketCreateMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketCreateMetadataMultiError) AllErrors() []error { return m }

// ObjectBucketCreateMetadataValidationError is the validation error returned
// by ObjectBucketCreateMetadata.Validate if the designated constraints aren't met.
type ObjectBucketCreateMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketCreateMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketCreateMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketCreateMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketCreateMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketCreateMetadataValidationError) ErrorName() string {
	return "ObjectBucketCreateMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketCreateMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketCreateMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketCreateMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketCreateMetadataValidationError{}

// Validate checks the field values on ObjectBucketSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketSpecMultiError, or nil if none found.
func (m *ObjectBucketSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketSpecValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketSpecValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketSpecValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Versioned

	// no validation rules for AccessPolicy

	// no validation rules for InstanceType

	if len(errors) > 0 {
		return ObjectBucketSpecMultiError(errors)
	}

	return nil
}

// ObjectBucketSpecMultiError is an error wrapping multiple validation errors
// returned by ObjectBucketSpec.ValidateAll() if the designated constraints
// aren't met.
type ObjectBucketSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketSpecMultiError) AllErrors() []error { return m }

// ObjectBucketSpecValidationError is the validation error returned by
// ObjectBucketSpec.Validate if the designated constraints aren't met.
type ObjectBucketSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketSpecValidationError) ErrorName() string { return "ObjectBucketSpecValidationError" }

// Error satisfies the builtin error interface
func (e ObjectBucketSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketSpecValidationError{}

// Validate checks the field values on StorageCapacityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageCapacityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageCapacityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageCapacityRequestMultiError, or nil if none found.
func (m *StorageCapacityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageCapacityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	if len(errors) > 0 {
		return StorageCapacityRequestMultiError(errors)
	}

	return nil
}

// StorageCapacityRequestMultiError is an error wrapping multiple validation
// errors returned by StorageCapacityRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageCapacityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageCapacityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageCapacityRequestMultiError) AllErrors() []error { return m }

// StorageCapacityRequestValidationError is the validation error returned by
// StorageCapacityRequest.Validate if the designated constraints aren't met.
type StorageCapacityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageCapacityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageCapacityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageCapacityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageCapacityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageCapacityRequestValidationError) ErrorName() string {
	return "StorageCapacityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageCapacityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageCapacityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageCapacityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageCapacityRequestValidationError{}

// Validate checks the field values on ObjectBucket with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectBucket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucket with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectBucketMultiError, or
// nil if none found.
func (m *ObjectBucket) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketMultiError(errors)
	}

	return nil
}

// ObjectBucketMultiError is an error wrapping multiple validation errors
// returned by ObjectBucket.ValidateAll() if the designated constraints aren't met.
type ObjectBucketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketMultiError) AllErrors() []error { return m }

// ObjectBucketValidationError is the validation error returned by
// ObjectBucket.Validate if the designated constraints aren't met.
type ObjectBucketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketValidationError) ErrorName() string { return "ObjectBucketValidationError" }

// Error satisfies the builtin error interface
func (e ObjectBucketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketValidationError{}

// Validate checks the field values on ObjectBucketMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketMetadataMultiError, or nil if none found.
func (m *ObjectBucketMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Description

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketMetadataValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketMetadataMultiError(errors)
	}

	return nil
}

// ObjectBucketMetadataMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketMetadata.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketMetadataMultiError) AllErrors() []error { return m }

// ObjectBucketMetadataValidationError is the validation error returned by
// ObjectBucketMetadata.Validate if the designated constraints aren't met.
type ObjectBucketMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketMetadataValidationError) ErrorName() string {
	return "ObjectBucketMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketMetadataValidationError{}

// Validate checks the field values on ObjectBucketMetadataRef with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketMetadataRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketMetadataRef with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketMetadataRefMultiError, or nil if none found.
func (m *ObjectBucketMetadataRef) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketMetadataRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	switch v := m.NameOrId.(type) {
	case *ObjectBucketMetadataRef_BucketName:
		if v == nil {
			err := ObjectBucketMetadataRefValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BucketName
	case *ObjectBucketMetadataRef_BucketId:
		if v == nil {
			err := ObjectBucketMetadataRefValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BucketId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ObjectBucketMetadataRefMultiError(errors)
	}

	return nil
}

// ObjectBucketMetadataRefMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketMetadataRef.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketMetadataRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketMetadataRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketMetadataRefMultiError) AllErrors() []error { return m }

// ObjectBucketMetadataRefValidationError is the validation error returned by
// ObjectBucketMetadataRef.Validate if the designated constraints aren't met.
type ObjectBucketMetadataRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketMetadataRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketMetadataRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketMetadataRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketMetadataRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketMetadataRefValidationError) ErrorName() string {
	return "ObjectBucketMetadataRefValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketMetadataRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketMetadataRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketMetadataRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketMetadataRefValidationError{}

// Validate checks the field values on ObjectBucketStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketStatusMultiError, or nil if none found.
func (m *ObjectBucketStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketStatusValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketStatusValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketStatusValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketStatusValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketStatusValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketStatusValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecurityGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketStatusValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketStatusValidationError{
					field:  "SecurityGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketStatusValidationError{
				field:  "SecurityGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketStatusMultiError(errors)
	}

	return nil
}

// ObjectBucketStatusMultiError is an error wrapping multiple validation errors
// returned by ObjectBucketStatus.ValidateAll() if the designated constraints
// aren't met.
type ObjectBucketStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketStatusMultiError) AllErrors() []error { return m }

// ObjectBucketStatusValidationError is the validation error returned by
// ObjectBucketStatus.Validate if the designated constraints aren't met.
type ObjectBucketStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketStatusValidationError) ErrorName() string {
	return "ObjectBucketStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketStatusValidationError{}

// Validate checks the field values on BucketSecurityGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketSecurityGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketSecurityGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketSecurityGroupMultiError, or nil if none found.
func (m *BucketSecurityGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketSecurityGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNetworkFilterAllow() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketSecurityGroupValidationError{
						field:  fmt.Sprintf("NetworkFilterAllow[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketSecurityGroupValidationError{
						field:  fmt.Sprintf("NetworkFilterAllow[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketSecurityGroupValidationError{
					field:  fmt.Sprintf("NetworkFilterAllow[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNetworkFilterDeny() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketSecurityGroupValidationError{
						field:  fmt.Sprintf("NetworkFilterDeny[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketSecurityGroupValidationError{
						field:  fmt.Sprintf("NetworkFilterDeny[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketSecurityGroupValidationError{
					field:  fmt.Sprintf("NetworkFilterDeny[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BucketSecurityGroupMultiError(errors)
	}

	return nil
}

// BucketSecurityGroupMultiError is an error wrapping multiple validation
// errors returned by BucketSecurityGroup.ValidateAll() if the designated
// constraints aren't met.
type BucketSecurityGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketSecurityGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketSecurityGroupMultiError) AllErrors() []error { return m }

// BucketSecurityGroupValidationError is the validation error returned by
// BucketSecurityGroup.Validate if the designated constraints aren't met.
type BucketSecurityGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketSecurityGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketSecurityGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketSecurityGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketSecurityGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketSecurityGroupValidationError) ErrorName() string {
	return "BucketSecurityGroupValidationError"
}

// Error satisfies the builtin error interface
func (e BucketSecurityGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketSecurityGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketSecurityGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketSecurityGroupValidationError{}

// Validate checks the field values on BucketNetworkGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketNetworkGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketNetworkGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketNetworkGroupMultiError, or nil if none found.
func (m *BucketNetworkGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketNetworkGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subnet

	// no validation rules for PrefixLength

	// no validation rules for Gateway

	if len(errors) > 0 {
		return BucketNetworkGroupMultiError(errors)
	}

	return nil
}

// BucketNetworkGroupMultiError is an error wrapping multiple validation errors
// returned by BucketNetworkGroup.ValidateAll() if the designated constraints
// aren't met.
type BucketNetworkGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketNetworkGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketNetworkGroupMultiError) AllErrors() []error { return m }

// BucketNetworkGroupValidationError is the validation error returned by
// BucketNetworkGroup.Validate if the designated constraints aren't met.
type BucketNetworkGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketNetworkGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketNetworkGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketNetworkGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketNetworkGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketNetworkGroupValidationError) ErrorName() string {
	return "BucketNetworkGroupValidationError"
}

// Error satisfies the builtin error interface
func (e BucketNetworkGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketNetworkGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketNetworkGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketNetworkGroupValidationError{}

// Validate checks the field values on ObjectBucketGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketGetRequestMultiError, or nil if none found.
func (m *ObjectBucketGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketGetRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketGetRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketGetRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectBucketGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketGetRequestMultiError) AllErrors() []error { return m }

// ObjectBucketGetRequestValidationError is the validation error returned by
// ObjectBucketGetRequest.Validate if the designated constraints aren't met.
type ObjectBucketGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketGetRequestValidationError) ErrorName() string {
	return "ObjectBucketGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketGetRequestValidationError{}

// Validate checks the field values on ObjectBucketSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketSearchRequestMultiError, or nil if none found.
func (m *ObjectBucketSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketSearchRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketSearchRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketSearchRequest.ValidateAll() if the
// designated constraints aren't met.
type ObjectBucketSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketSearchRequestMultiError) AllErrors() []error { return m }

// ObjectBucketSearchRequestValidationError is the validation error returned by
// ObjectBucketSearchRequest.Validate if the designated constraints aren't met.
type ObjectBucketSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketSearchRequestValidationError) ErrorName() string {
	return "ObjectBucketSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketSearchRequestValidationError{}

// Validate checks the field values on ObjectBucketSearchMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketSearchMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketSearchMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketSearchMetadataMultiError, or nil if none found.
func (m *ObjectBucketSearchMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketSearchMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	if len(errors) > 0 {
		return ObjectBucketSearchMetadataMultiError(errors)
	}

	return nil
}

// ObjectBucketSearchMetadataMultiError is an error wrapping multiple
// validation errors returned by ObjectBucketSearchMetadata.ValidateAll() if
// the designated constraints aren't met.
type ObjectBucketSearchMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketSearchMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketSearchMetadataMultiError) AllErrors() []error { return m }

// ObjectBucketSearchMetadataValidationError is the validation error returned
// by ObjectBucketSearchMetadata.Validate if the designated constraints aren't met.
type ObjectBucketSearchMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketSearchMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketSearchMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketSearchMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketSearchMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketSearchMetadataValidationError) ErrorName() string {
	return "ObjectBucketSearchMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketSearchMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketSearchMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketSearchMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketSearchMetadataValidationError{}

// Validate checks the field values on ObjectBucketSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketSearchResponseMultiError, or nil if none found.
func (m *ObjectBucketSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectBucketSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectBucketSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectBucketSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectBucketSearchResponseMultiError(errors)
	}

	return nil
}

// ObjectBucketSearchResponseMultiError is an error wrapping multiple
// validation errors returned by ObjectBucketSearchResponse.ValidateAll() if
// the designated constraints aren't met.
type ObjectBucketSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketSearchResponseMultiError) AllErrors() []error { return m }

// ObjectBucketSearchResponseValidationError is the validation error returned
// by ObjectBucketSearchResponse.Validate if the designated constraints aren't met.
type ObjectBucketSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketSearchResponseValidationError) ErrorName() string {
	return "ObjectBucketSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketSearchResponseValidationError{}

// Validate checks the field values on ObjectBucketDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectBucketDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectBucketDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectBucketDeleteRequestMultiError, or nil if none found.
func (m *ObjectBucketDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectBucketDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectBucketDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectBucketDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectBucketDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectBucketDeleteRequestMultiError(errors)
	}

	return nil
}

// ObjectBucketDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectBucketDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type ObjectBucketDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectBucketDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectBucketDeleteRequestMultiError) AllErrors() []error { return m }

// ObjectBucketDeleteRequestValidationError is the validation error returned by
// ObjectBucketDeleteRequest.Validate if the designated constraints aren't met.
type ObjectBucketDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectBucketDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectBucketDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectBucketDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectBucketDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectBucketDeleteRequestValidationError) ErrorName() string {
	return "ObjectBucketDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectBucketDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectBucketDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectBucketDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectBucketDeleteRequestValidationError{}

// Validate checks the field values on BucketPolicyStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketPolicyStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketPolicyStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketPolicyStatusMultiError, or nil if none found.
func (m *BucketPolicyStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketPolicyStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLifecycleRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketPolicyStatusValidationError{
						field:  fmt.Sprintf("LifecycleRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketPolicyStatusValidationError{
						field:  fmt.Sprintf("LifecycleRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketPolicyStatusValidationError{
					field:  fmt.Sprintf("LifecycleRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserAccessPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketPolicyStatusValidationError{
						field:  fmt.Sprintf("UserAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketPolicyStatusValidationError{
						field:  fmt.Sprintf("UserAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketPolicyStatusValidationError{
					field:  fmt.Sprintf("UserAccessPolicies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BucketPolicyStatusMultiError(errors)
	}

	return nil
}

// BucketPolicyStatusMultiError is an error wrapping multiple validation errors
// returned by BucketPolicyStatus.ValidateAll() if the designated constraints
// aren't met.
type BucketPolicyStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketPolicyStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketPolicyStatusMultiError) AllErrors() []error { return m }

// BucketPolicyStatusValidationError is the validation error returned by
// BucketPolicyStatus.Validate if the designated constraints aren't met.
type BucketPolicyStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketPolicyStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketPolicyStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketPolicyStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketPolicyStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketPolicyStatusValidationError) ErrorName() string {
	return "BucketPolicyStatusValidationError"
}

// Error satisfies the builtin error interface
func (e BucketPolicyStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketPolicyStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketPolicyStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketPolicyStatusValidationError{}

// Validate checks the field values on BucketLifecycleRuleCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BucketLifecycleRuleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleCreateRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleCreateRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// BucketLifecycleRuleCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleCreateRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleCreateRequestValidationError is the validation error
// returned by BucketLifecycleRuleCreateRequest.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleCreateRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleCreateRequestValidationError{}

// Validate checks the field values on BucketLifecycleRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketLifecycleRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleMultiError, or nil if none found.
func (m *BucketLifecycleRule) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleMultiError is an error wrapping multiple validation
// errors returned by BucketLifecycleRule.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleValidationError is the validation error returned by
// BucketLifecycleRule.Validate if the designated constraints aren't met.
type BucketLifecycleRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleValidationError) ErrorName() string {
	return "BucketLifecycleRuleValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleValidationError{}

// Validate checks the field values on BucketLifecycleRuleStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketLifecycleRuleStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleStatusMultiError, or nil if none found.
func (m *BucketLifecycleRuleStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	// no validation rules for Phase

	if len(errors) > 0 {
		return BucketLifecycleRuleStatusMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleStatusMultiError is an error wrapping multiple validation
// errors returned by BucketLifecycleRuleStatus.ValidateAll() if the
// designated constraints aren't met.
type BucketLifecycleRuleStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleStatusMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleStatusValidationError is the validation error returned by
// BucketLifecycleRuleStatus.Validate if the designated constraints aren't met.
type BucketLifecycleRuleStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleStatusValidationError) ErrorName() string {
	return "BucketLifecycleRuleStatusValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleStatusValidationError{}

// Validate checks the field values on BucketLifecycleRuleMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketLifecycleRuleMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleMetadataMultiError, or nil if none found.
func (m *BucketLifecycleRuleMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for RuleName

	// no validation rules for ResourceId

	// no validation rules for BucketId

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleMetadataValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleMetadataValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleMetadataValidationError{
				field:  "UpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleMetadataValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleMetadataMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleMetadataMultiError is an error wrapping multiple
// validation errors returned by BucketLifecycleRuleMetadata.ValidateAll() if
// the designated constraints aren't met.
type BucketLifecycleRuleMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleMetadataMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleMetadataValidationError is the validation error returned
// by BucketLifecycleRuleMetadata.Validate if the designated constraints
// aren't met.
type BucketLifecycleRuleMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleMetadataValidationError) ErrorName() string {
	return "BucketLifecycleRuleMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleMetadataValidationError{}

// Validate checks the field values on BucketLifecycleRuleMetadataRef with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketLifecycleRuleMetadataRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleMetadataRef with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleMetadataRefMultiError, or nil if none found.
func (m *BucketLifecycleRuleMetadataRef) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleMetadataRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for BucketId

	// no validation rules for RuleId

	if len(errors) > 0 {
		return BucketLifecycleRuleMetadataRefMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleMetadataRefMultiError is an error wrapping multiple
// validation errors returned by BucketLifecycleRuleMetadataRef.ValidateAll()
// if the designated constraints aren't met.
type BucketLifecycleRuleMetadataRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleMetadataRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleMetadataRefMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleMetadataRefValidationError is the validation error
// returned by BucketLifecycleRuleMetadataRef.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleMetadataRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleMetadataRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleMetadataRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleMetadataRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleMetadataRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleMetadataRefValidationError) ErrorName() string {
	return "BucketLifecycleRuleMetadataRefValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleMetadataRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleMetadataRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleMetadataRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleMetadataRefValidationError{}

// Validate checks the field values on BucketLifecycleRuleSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketLifecycleRuleSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleSpecMultiError, or nil if none found.
func (m *BucketLifecycleRuleSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	// no validation rules for ExpireDays

	// no validation rules for NoncurrentExpireDays

	// no validation rules for DeleteMarker

	if len(errors) > 0 {
		return BucketLifecycleRuleSpecMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleSpecMultiError is an error wrapping multiple validation
// errors returned by BucketLifecycleRuleSpec.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleSpecMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleSpecValidationError is the validation error returned by
// BucketLifecycleRuleSpec.Validate if the designated constraints aren't met.
type BucketLifecycleRuleSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleSpecValidationError) ErrorName() string {
	return "BucketLifecycleRuleSpecValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleSpecValidationError{}

// Validate checks the field values on BucketLifecycleRuleGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketLifecycleRuleGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleGetRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleGetRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleGetRequestMultiError is an error wrapping multiple
// validation errors returned by BucketLifecycleRuleGetRequest.ValidateAll()
// if the designated constraints aren't met.
type BucketLifecycleRuleGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleGetRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleGetRequestValidationError is the validation error
// returned by BucketLifecycleRuleGetRequest.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleGetRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleGetRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BucketLifecycleRuleUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleUpdateRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleUpdateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleUpdateRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// BucketLifecycleRuleUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleUpdateRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleUpdateRequestValidationError is the validation error
// returned by BucketLifecycleRuleUpdateRequest.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleUpdateRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleUpdateRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BucketLifecycleRuleDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleDeleteRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketLifecycleRuleDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketLifecycleRuleDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketLifecycleRuleDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BucketLifecycleRuleDeleteRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// BucketLifecycleRuleDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleDeleteRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleDeleteRequestValidationError is the validation error
// returned by BucketLifecycleRuleDeleteRequest.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleDeleteRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleDeleteRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleSearchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BucketLifecycleRuleSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleSearchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleSearchRequestMultiError, or nil if none found.
func (m *BucketLifecycleRuleSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for BucketId

	if len(errors) > 0 {
		return BucketLifecycleRuleSearchRequestMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleSearchRequestMultiError is an error wrapping multiple
// validation errors returned by
// BucketLifecycleRuleSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleSearchRequestMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleSearchRequestValidationError is the validation error
// returned by BucketLifecycleRuleSearchRequest.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleSearchRequestValidationError) ErrorName() string {
	return "BucketLifecycleRuleSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleSearchRequestValidationError{}

// Validate checks the field values on BucketLifecycleRuleSearchResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BucketLifecycleRuleSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketLifecycleRuleSearchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BucketLifecycleRuleSearchResponseMultiError, or nil if none found.
func (m *BucketLifecycleRuleSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketLifecycleRuleSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketLifecycleRuleSearchResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketLifecycleRuleSearchResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketLifecycleRuleSearchResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BucketLifecycleRuleSearchResponseMultiError(errors)
	}

	return nil
}

// BucketLifecycleRuleSearchResponseMultiError is an error wrapping multiple
// validation errors returned by
// BucketLifecycleRuleSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type BucketLifecycleRuleSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketLifecycleRuleSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketLifecycleRuleSearchResponseMultiError) AllErrors() []error { return m }

// BucketLifecycleRuleSearchResponseValidationError is the validation error
// returned by BucketLifecycleRuleSearchResponse.Validate if the designated
// constraints aren't met.
type BucketLifecycleRuleSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketLifecycleRuleSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketLifecycleRuleSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketLifecycleRuleSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketLifecycleRuleSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketLifecycleRuleSearchResponseValidationError) ErrorName() string {
	return "BucketLifecycleRuleSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BucketLifecycleRuleSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketLifecycleRuleSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketLifecycleRuleSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketLifecycleRuleSearchResponseValidationError{}

// Validate checks the field values on BucketUserAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BucketUserAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketUserAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketUserAccessMultiError, or nil if none found.
func (m *BucketUserAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketUserAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketUserAccessValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketUserAccessValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketUserAccessValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketUserAccessValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketUserAccessValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketUserAccessValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BucketUserAccessMultiError(errors)
	}

	return nil
}

// BucketUserAccessMultiError is an error wrapping multiple validation errors
// returned by BucketUserAccess.ValidateAll() if the designated constraints
// aren't met.
type BucketUserAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketUserAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketUserAccessMultiError) AllErrors() []error { return m }

// BucketUserAccessValidationError is the validation error returned by
// BucketUserAccess.Validate if the designated constraints aren't met.
type BucketUserAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketUserAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketUserAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketUserAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketUserAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketUserAccessValidationError) ErrorName() string { return "BucketUserAccessValidationError" }

// Error satisfies the builtin error interface
func (e BucketUserAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketUserAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketUserAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketUserAccessValidationError{}

// Validate checks the field values on CreateObjectUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateObjectUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateObjectUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateObjectUserRequestMultiError, or nil if none found.
func (m *CreateObjectUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateObjectUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateObjectUserRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateObjectUserRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateObjectUserRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateObjectUserRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateObjectUserRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateObjectUserRequestValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateObjectUserRequestMultiError(errors)
	}

	return nil
}

// CreateObjectUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateObjectUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateObjectUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateObjectUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateObjectUserRequestMultiError) AllErrors() []error { return m }

// CreateObjectUserRequestValidationError is the validation error returned by
// CreateObjectUserRequest.Validate if the designated constraints aren't met.
type CreateObjectUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectUserRequestValidationError) ErrorName() string {
	return "CreateObjectUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectUserRequestValidationError{}

// Validate checks the field values on ObjectUserPermissionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserPermissionSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserPermissionSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserPermissionSpecMultiError, or nil if none found.
func (m *ObjectUserPermissionSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserPermissionSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BucketId

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ObjectUserPermissionSpecMultiError(errors)
	}

	return nil
}

// ObjectUserPermissionSpecMultiError is an error wrapping multiple validation
// errors returned by ObjectUserPermissionSpec.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserPermissionSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserPermissionSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserPermissionSpecMultiError) AllErrors() []error { return m }

// ObjectUserPermissionSpecValidationError is the validation error returned by
// ObjectUserPermissionSpec.Validate if the designated constraints aren't met.
type ObjectUserPermissionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserPermissionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserPermissionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserPermissionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserPermissionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserPermissionSpecValidationError) ErrorName() string {
	return "ObjectUserPermissionSpecValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserPermissionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserPermissionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserPermissionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserPermissionSpecValidationError{}

// Validate checks the field values on ObjectUserPolicy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserPolicyMultiError, or nil if none found.
func (m *ObjectUserPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ObjectUserPolicyMultiError(errors)
	}

	return nil
}

// ObjectUserPolicyMultiError is an error wrapping multiple validation errors
// returned by ObjectUserPolicy.ValidateAll() if the designated constraints
// aren't met.
type ObjectUserPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserPolicyMultiError) AllErrors() []error { return m }

// ObjectUserPolicyValidationError is the validation error returned by
// ObjectUserPolicy.Validate if the designated constraints aren't met.
type ObjectUserPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserPolicyValidationError) ErrorName() string { return "ObjectUserPolicyValidationError" }

// Error satisfies the builtin error interface
func (e ObjectUserPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserPolicyValidationError{}

// Validate checks the field values on ObjectUserMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserMetadataCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserMetadataCreateMultiError, or nil if none found.
func (m *ObjectUserMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	if len(errors) > 0 {
		return ObjectUserMetadataCreateMultiError(errors)
	}

	return nil
}

// ObjectUserMetadataCreateMultiError is an error wrapping multiple validation
// errors returned by ObjectUserMetadataCreate.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserMetadataCreateMultiError) AllErrors() []error { return m }

// ObjectUserMetadataCreateValidationError is the validation error returned by
// ObjectUserMetadataCreate.Validate if the designated constraints aren't met.
type ObjectUserMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserMetadataCreateValidationError) ErrorName() string {
	return "ObjectUserMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserMetadataCreateValidationError{}

// Validate checks the field values on ObjectUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectUserMultiError, or
// nil if none found.
func (m *ObjectUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectUserValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectUserValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectUserValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserMultiError(errors)
	}

	return nil
}

// ObjectUserMultiError is an error wrapping multiple validation errors
// returned by ObjectUser.ValidateAll() if the designated constraints aren't met.
type ObjectUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserMultiError) AllErrors() []error { return m }

// ObjectUserValidationError is the validation error returned by
// ObjectUser.Validate if the designated constraints aren't met.
type ObjectUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserValidationError) ErrorName() string { return "ObjectUserValidationError" }

// Error satisfies the builtin error interface
func (e ObjectUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserValidationError{}

// Validate checks the field values on ObjectUserMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserMetadataMultiError, or nil if none found.
func (m *ObjectUserMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserMetadataValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserMetadataValidationError{
					field:  "UpdateTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserMetadataValidationError{
				field:  "UpdateTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeleteTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserMetadataValidationError{
					field:  "DeleteTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserMetadataValidationError{
					field:  "DeleteTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserMetadataValidationError{
				field:  "DeleteTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserMetadataMultiError(errors)
	}

	return nil
}

// ObjectUserMetadataMultiError is an error wrapping multiple validation errors
// returned by ObjectUserMetadata.ValidateAll() if the designated constraints
// aren't met.
type ObjectUserMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserMetadataMultiError) AllErrors() []error { return m }

// ObjectUserMetadataValidationError is the validation error returned by
// ObjectUserMetadata.Validate if the designated constraints aren't met.
type ObjectUserMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserMetadataValidationError) ErrorName() string {
	return "ObjectUserMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserMetadataValidationError{}

// Validate checks the field values on ObjectUserStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserStatusMultiError, or nil if none found.
func (m *ObjectUserStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserStatusValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserStatusValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserStatusValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserStatusMultiError(errors)
	}

	return nil
}

// ObjectUserStatusMultiError is an error wrapping multiple validation errors
// returned by ObjectUserStatus.ValidateAll() if the designated constraints
// aren't met.
type ObjectUserStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserStatusMultiError) AllErrors() []error { return m }

// ObjectUserStatusValidationError is the validation error returned by
// ObjectUserStatus.Validate if the designated constraints aren't met.
type ObjectUserStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserStatusValidationError) ErrorName() string { return "ObjectUserStatusValidationError" }

// Error satisfies the builtin error interface
func (e ObjectUserStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserStatusValidationError{}

// Validate checks the field values on AccessPrincipal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccessPrincipal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessPrincipal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessPrincipalMultiError, or nil if none found.
func (m *AccessPrincipal) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessPrincipal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessPrincipalValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessPrincipalValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessPrincipalValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessPrincipalValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessPrincipalValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessPrincipalValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AccessPrincipalMultiError(errors)
	}

	return nil
}

// AccessPrincipalMultiError is an error wrapping multiple validation errors
// returned by AccessPrincipal.ValidateAll() if the designated constraints
// aren't met.
type AccessPrincipalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessPrincipalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessPrincipalMultiError) AllErrors() []error { return m }

// AccessPrincipalValidationError is the validation error returned by
// AccessPrincipal.Validate if the designated constraints aren't met.
type AccessPrincipalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessPrincipalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessPrincipalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessPrincipalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessPrincipalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessPrincipalValidationError) ErrorName() string { return "AccessPrincipalValidationError" }

// Error satisfies the builtin error interface
func (e AccessPrincipalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessPrincipal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessPrincipalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessPrincipalValidationError{}

// Validate checks the field values on ObjectCluster with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectCluster with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectClusterMultiError, or
// nil if none found.
func (m *ObjectCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for AccessEndpoint

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return ObjectClusterMultiError(errors)
	}

	return nil
}

// ObjectClusterMultiError is an error wrapping multiple validation errors
// returned by ObjectCluster.ValidateAll() if the designated constraints
// aren't met.
type ObjectClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectClusterMultiError) AllErrors() []error { return m }

// ObjectClusterValidationError is the validation error returned by
// ObjectCluster.Validate if the designated constraints aren't met.
type ObjectClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectClusterValidationError) ErrorName() string { return "ObjectClusterValidationError" }

// Error satisfies the builtin error interface
func (e ObjectClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectClusterValidationError{}

// Validate checks the field values on ObjectAccessCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectAccessCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectAccessCredentials with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectAccessCredentialsMultiError, or nil if none found.
func (m *ObjectAccessCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectAccessCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	if len(errors) > 0 {
		return ObjectAccessCredentialsMultiError(errors)
	}

	return nil
}

// ObjectAccessCredentialsMultiError is an error wrapping multiple validation
// errors returned by ObjectAccessCredentials.ValidateAll() if the designated
// constraints aren't met.
type ObjectAccessCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectAccessCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectAccessCredentialsMultiError) AllErrors() []error { return m }

// ObjectAccessCredentialsValidationError is the validation error returned by
// ObjectAccessCredentials.Validate if the designated constraints aren't met.
type ObjectAccessCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectAccessCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectAccessCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectAccessCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectAccessCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectAccessCredentialsValidationError) ErrorName() string {
	return "ObjectAccessCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectAccessCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectAccessCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectAccessCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectAccessCredentialsValidationError{}

// Validate checks the field values on ObjectUserMetadataRef with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserMetadataRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserMetadataRef with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserMetadataRefMultiError, or nil if none found.
func (m *ObjectUserMetadataRef) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserMetadataRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	switch v := m.NameOrId.(type) {
	case *ObjectUserMetadataRef_UserName:
		if v == nil {
			err := ObjectUserMetadataRefValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UserName
	case *ObjectUserMetadataRef_UserId:
		if v == nil {
			err := ObjectUserMetadataRefValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UserId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ObjectUserMetadataRefMultiError(errors)
	}

	return nil
}

// ObjectUserMetadataRefMultiError is an error wrapping multiple validation
// errors returned by ObjectUserMetadataRef.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserMetadataRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserMetadataRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserMetadataRefMultiError) AllErrors() []error { return m }

// ObjectUserMetadataRefValidationError is the validation error returned by
// ObjectUserMetadataRef.Validate if the designated constraints aren't met.
type ObjectUserMetadataRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserMetadataRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserMetadataRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserMetadataRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserMetadataRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserMetadataRefValidationError) ErrorName() string {
	return "ObjectUserMetadataRefValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserMetadataRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserMetadataRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserMetadataRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserMetadataRefValidationError{}

// Validate checks the field values on ObjectUserGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserGetRequestMultiError, or nil if none found.
func (m *ObjectUserGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserGetRequestMultiError(errors)
	}

	return nil
}

// ObjectUserGetRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectUserGetRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserGetRequestMultiError) AllErrors() []error { return m }

// ObjectUserGetRequestValidationError is the validation error returned by
// ObjectUserGetRequest.Validate if the designated constraints aren't met.
type ObjectUserGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserGetRequestValidationError) ErrorName() string {
	return "ObjectUserGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserGetRequestValidationError{}

// Validate checks the field values on ObjectUserSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserSearchRequestMultiError, or nil if none found.
func (m *ObjectUserSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return ObjectUserSearchRequestMultiError(errors)
	}

	return nil
}

// ObjectUserSearchRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectUserSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserSearchRequestMultiError) AllErrors() []error { return m }

// ObjectUserSearchRequestValidationError is the validation error returned by
// ObjectUserSearchRequest.Validate if the designated constraints aren't met.
type ObjectUserSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserSearchRequestValidationError) ErrorName() string {
	return "ObjectUserSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserSearchRequestValidationError{}

// Validate checks the field values on ObjectUserSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserSearchResponseMultiError, or nil if none found.
func (m *ObjectUserSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectUserSearchResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectUserSearchResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectUserSearchResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectUserSearchResponseMultiError(errors)
	}

	return nil
}

// ObjectUserSearchResponseMultiError is an error wrapping multiple validation
// errors returned by ObjectUserSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserSearchResponseMultiError) AllErrors() []error { return m }

// ObjectUserSearchResponseValidationError is the validation error returned by
// ObjectUserSearchResponse.Validate if the designated constraints aren't met.
type ObjectUserSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserSearchResponseValidationError) ErrorName() string {
	return "ObjectUserSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserSearchResponseValidationError{}

// Validate checks the field values on ObjectUserDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserDeleteRequestMultiError, or nil if none found.
func (m *ObjectUserDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserDeleteRequestMultiError(errors)
	}

	return nil
}

// ObjectUserDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectUserDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserDeleteRequestMultiError) AllErrors() []error { return m }

// ObjectUserDeleteRequestValidationError is the validation error returned by
// ObjectUserDeleteRequest.Validate if the designated constraints aren't met.
type ObjectUserDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserDeleteRequestValidationError) ErrorName() string {
	return "ObjectUserDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserDeleteRequestValidationError{}

// Validate checks the field values on ObjectUserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserUpdateRequestMultiError, or nil if none found.
func (m *ObjectUserUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectUserUpdateRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectUserUpdateRequestValidationError{
						field:  fmt.Sprintf("Spec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectUserUpdateRequestValidationError{
					field:  fmt.Sprintf("Spec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectUserUpdateRequestMultiError(errors)
	}

	return nil
}

// ObjectUserUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ObjectUserUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ObjectUserUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserUpdateRequestMultiError) AllErrors() []error { return m }

// ObjectUserUpdateRequestValidationError is the validation error returned by
// ObjectUserUpdateRequest.Validate if the designated constraints aren't met.
type ObjectUserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserUpdateRequestValidationError) ErrorName() string {
	return "ObjectUserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserUpdateRequestValidationError{}

// Validate checks the field values on ObjectUserUpdateCredsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectUserUpdateCredsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectUserUpdateCredsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectUserUpdateCredsRequestMultiError, or nil if none found.
func (m *ObjectUserUpdateCredsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectUserUpdateCredsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectUserUpdateCredsRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectUserUpdateCredsRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectUserUpdateCredsRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectUserUpdateCredsRequestMultiError(errors)
	}

	return nil
}

// ObjectUserUpdateCredsRequestMultiError is an error wrapping multiple
// validation errors returned by ObjectUserUpdateCredsRequest.ValidateAll() if
// the designated constraints aren't met.
type ObjectUserUpdateCredsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectUserUpdateCredsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectUserUpdateCredsRequestMultiError) AllErrors() []error { return m }

// ObjectUserUpdateCredsRequestValidationError is the validation error returned
// by ObjectUserUpdateCredsRequest.Validate if the designated constraints
// aren't met.
type ObjectUserUpdateCredsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectUserUpdateCredsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectUserUpdateCredsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectUserUpdateCredsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectUserUpdateCredsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectUserUpdateCredsRequestValidationError) ErrorName() string {
	return "ObjectUserUpdateCredsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectUserUpdateCredsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectUserUpdateCredsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectUserUpdateCredsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectUserUpdateCredsRequestValidationError{}
