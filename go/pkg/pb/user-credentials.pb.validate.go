// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user-credentials.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserCredentialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCredentialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCredentialRequestMultiError, or nil if none found.
func (m *GetUserCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	if len(errors) > 0 {
		return GetUserCredentialRequestMultiError(errors)
	}

	return nil
}

// GetUserCredentialRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCredentialRequestMultiError) AllErrors() []error { return m }

// GetUserCredentialRequestValidationError is the validation error returned by
// GetUserCredentialRequest.Validate if the designated constraints aren't met.
type GetUserCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCredentialRequestValidationError) ErrorName() string {
	return "GetUserCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCredentialRequestValidationError{}

// Validate checks the field values on GetUserCredentialResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCredentialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCredentialResponseMultiError, or nil if none found.
func (m *GetUserCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAppClients() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserCredentialResponseValidationError{
						field:  fmt.Sprintf("AppClients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserCredentialResponseValidationError{
						field:  fmt.Sprintf("AppClients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserCredentialResponseValidationError{
					field:  fmt.Sprintf("AppClients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserCredentialResponseMultiError(errors)
	}

	return nil
}

// GetUserCredentialResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserCredentialResponse.ValidateAll() if the
// designated constraints aren't met.
type GetUserCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCredentialResponseMultiError) AllErrors() []error { return m }

// GetUserCredentialResponseValidationError is the validation error returned by
// GetUserCredentialResponse.Validate if the designated constraints aren't met.
type GetUserCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCredentialResponseValidationError) ErrorName() string {
	return "GetUserCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCredentialResponseValidationError{}

// Validate checks the field values on GetUserCredential with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserCredential) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCredential with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCredentialMultiError, or nil if none found.
func (m *GetUserCredential) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCredential) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for AppClientName

	// no validation rules for Revoked

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserCredentialValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserCredentialValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserCredentialValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserCredentialMultiError(errors)
	}

	return nil
}

// GetUserCredentialMultiError is an error wrapping multiple validation errors
// returned by GetUserCredential.ValidateAll() if the designated constraints
// aren't met.
type GetUserCredentialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCredentialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCredentialMultiError) AllErrors() []error { return m }

// GetUserCredentialValidationError is the validation error returned by
// GetUserCredential.Validate if the designated constraints aren't met.
type GetUserCredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCredentialValidationError) ErrorName() string {
	return "GetUserCredentialValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCredential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCredentialValidationError{}

// Validate checks the field values on ClientCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClientCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientCredentialsMultiError, or nil if none found.
func (m *ClientCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return ClientCredentialsMultiError(errors)
	}

	return nil
}

// ClientCredentialsMultiError is an error wrapping multiple validation errors
// returned by ClientCredentials.ValidateAll() if the designated constraints
// aren't met.
type ClientCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientCredentialsMultiError) AllErrors() []error { return m }

// ClientCredentialsValidationError is the validation error returned by
// ClientCredentials.Validate if the designated constraints aren't met.
type ClientCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientCredentialsValidationError) ErrorName() string {
	return "ClientCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e ClientCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientCredentialsValidationError{}

// Validate checks the field values on CreateUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserCredentialsRequestMultiError, or nil if none found.
func (m *CreateUserCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	// no validation rules for AppClientName

	if len(errors) > 0 {
		return CreateUserCredentialsRequestMultiError(errors)
	}

	return nil
}

// CreateUserCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserCredentialsRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUserCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserCredentialsRequestMultiError) AllErrors() []error { return m }

// CreateUserCredentialsRequestValidationError is the validation error returned
// by CreateUserCredentialsRequest.Validate if the designated constraints
// aren't met.
type CreateUserCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserCredentialsRequestValidationError) ErrorName() string {
	return "CreateUserCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserCredentialsRequestValidationError{}

// Validate checks the field values on UpdateUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserCredentialsRequestMultiError, or nil if none found.
func (m *UpdateUserCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	// no validation rules for UserEmail

	// no validation rules for ClientId

	// no validation rules for CountryCode

	// no validation rules for Revoked

	// no validation rules for Enabled

	// no validation rules for AppClientName

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserCredentialsRequestValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserCredentialsRequestValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserCredentialsRequestValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserCredentialsRequestMultiError(errors)
	}

	return nil
}

// UpdateUserCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserCredentialsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserCredentialsRequestMultiError) AllErrors() []error { return m }

// UpdateUserCredentialsRequestValidationError is the validation error returned
// by UpdateUserCredentialsRequest.Validate if the designated constraints
// aren't met.
type UpdateUserCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserCredentialsRequestValidationError) ErrorName() string {
	return "UpdateUserCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserCredentialsRequestValidationError{}

// Validate checks the field values on DeleteUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserCredentialsRequestMultiError, or nil if none found.
func (m *DeleteUserCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	// no validation rules for ClientId

	if len(errors) > 0 {
		return DeleteUserCredentialsRequestMultiError(errors)
	}

	return nil
}

// DeleteUserCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserCredentialsRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserCredentialsRequestMultiError) AllErrors() []error { return m }

// DeleteUserCredentialsRequestValidationError is the validation error returned
// by DeleteUserCredentialsRequest.Validate if the designated constraints
// aren't met.
type DeleteUserCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserCredentialsRequestValidationError) ErrorName() string {
	return "DeleteUserCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserCredentialsRequestValidationError{}

// Validate checks the field values on RevokeUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeUserCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeUserCredentialsRequestMultiError, or nil if none found.
func (m *RevokeUserCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeUserCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	// no validation rules for Revoked

	if len(errors) > 0 {
		return RevokeUserCredentialsRequestMultiError(errors)
	}

	return nil
}

// RevokeUserCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeUserCredentialsRequest.ValidateAll() if
// the designated constraints aren't met.
type RevokeUserCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeUserCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeUserCredentialsRequestMultiError) AllErrors() []error { return m }

// RevokeUserCredentialsRequestValidationError is the validation error returned
// by RevokeUserCredentialsRequest.Validate if the designated constraints
// aren't met.
type RevokeUserCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeUserCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeUserCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeUserCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeUserCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeUserCredentialsRequestValidationError) ErrorName() string {
	return "RevokeUserCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeUserCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeUserCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeUserCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeUserCredentialsRequestValidationError{}

// Validate checks the field values on RemoveMemberUserCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveMemberUserCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMemberUserCredentialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveMemberUserCredentialsRequestMultiError, or nil if none found.
func (m *RemoveMemberUserCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMemberUserCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudaccountId

	// no validation rules for Revoked

	// no validation rules for MemberEmail

	if len(errors) > 0 {
		return RemoveMemberUserCredentialsRequestMultiError(errors)
	}

	return nil
}

// RemoveMemberUserCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveMemberUserCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveMemberUserCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMemberUserCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMemberUserCredentialsRequestMultiError) AllErrors() []error { return m }

// RemoveMemberUserCredentialsRequestValidationError is the validation error
// returned by RemoveMemberUserCredentialsRequest.Validate if the designated
// constraints aren't met.
type RemoveMemberUserCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberUserCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberUserCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberUserCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberUserCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberUserCredentialsRequestValidationError) ErrorName() string {
	return "RemoveMemberUserCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberUserCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberUserCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberUserCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberUserCredentialsRequestValidationError{}
