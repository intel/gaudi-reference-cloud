// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: kfaas.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KFServiceClient is the client API for KFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KFServiceClient interface {
	GetKFStatus(ctx context.Context, in *GetKFStatusRequest, opts ...grpc.CallOption) (*GetKFStatusResponse, error)
	GetUserCredentials(ctx context.Context, in *GetUserCredentialsRequest, opts ...grpc.CallOption) (*GetUserCredentialsResponse, error)
	GetExternalIP(ctx context.Context, in *GetExternalIPRequest, opts ...grpc.CallOption) (*GetExternalIPResponse, error)
	CreateKubeFlowDeployment(ctx context.Context, in *CreateKubeFlowDeploymentRequest, opts ...grpc.CallOption) (*CreateKubeFlowDeploymentResponse, error)
	ListKubeFlowDeployment(ctx context.Context, in *ListKubeFlowDeploymentRequest, opts ...grpc.CallOption) (*ListKubeFlowDeploymentResponse, error)
	DeleteKubeFlowDeployment(ctx context.Context, in *DeleteKubeFlowDeploymentRequest, opts ...grpc.CallOption) (*DeleteKubeFlowDeploymentResponse, error)
	ExecuteKFPreCheck(ctx context.Context, in *ExecuteKFPreCheckRequest, opts ...grpc.CallOption) (*ExecuteKFPreCheckResponse, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error)
}

type kFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKFServiceClient(cc grpc.ClientConnInterface) KFServiceClient {
	return &kFServiceClient{cc}
}

func (c *kFServiceClient) GetKFStatus(ctx context.Context, in *GetKFStatusRequest, opts ...grpc.CallOption) (*GetKFStatusResponse, error) {
	out := new(GetKFStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/GetKFStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kFServiceClient) GetUserCredentials(ctx context.Context, in *GetUserCredentialsRequest, opts ...grpc.CallOption) (*GetUserCredentialsResponse, error) {
	out := new(GetUserCredentialsResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/GetUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kFServiceClient) GetExternalIP(ctx context.Context, in *GetExternalIPRequest, opts ...grpc.CallOption) (*GetExternalIPResponse, error) {
	out := new(GetExternalIPResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/GetExternalIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kFServiceClient) CreateKubeFlowDeployment(ctx context.Context, in *CreateKubeFlowDeploymentRequest, opts ...grpc.CallOption) (*CreateKubeFlowDeploymentResponse, error) {
	out := new(CreateKubeFlowDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/CreateKubeFlowDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kFServiceClient) ListKubeFlowDeployment(ctx context.Context, in *ListKubeFlowDeploymentRequest, opts ...grpc.CallOption) (*ListKubeFlowDeploymentResponse, error) {
	out := new(ListKubeFlowDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/ListKubeFlowDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kFServiceClient) DeleteKubeFlowDeployment(ctx context.Context, in *DeleteKubeFlowDeploymentRequest, opts ...grpc.CallOption) (*DeleteKubeFlowDeploymentResponse, error) {
	out := new(DeleteKubeFlowDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/DeleteKubeFlowDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kFServiceClient) ExecuteKFPreCheck(ctx context.Context, in *ExecuteKFPreCheckRequest, opts ...grpc.CallOption) (*ExecuteKFPreCheckResponse, error) {
	out := new(ExecuteKFPreCheckResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/ExecuteKFPreCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kFServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error) {
	out := new(GetJobStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.KFService/GetJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KFServiceServer is the server API for KFService service.
// All implementations must embed UnimplementedKFServiceServer
// for forward compatibility
type KFServiceServer interface {
	GetKFStatus(context.Context, *GetKFStatusRequest) (*GetKFStatusResponse, error)
	GetUserCredentials(context.Context, *GetUserCredentialsRequest) (*GetUserCredentialsResponse, error)
	GetExternalIP(context.Context, *GetExternalIPRequest) (*GetExternalIPResponse, error)
	CreateKubeFlowDeployment(context.Context, *CreateKubeFlowDeploymentRequest) (*CreateKubeFlowDeploymentResponse, error)
	ListKubeFlowDeployment(context.Context, *ListKubeFlowDeploymentRequest) (*ListKubeFlowDeploymentResponse, error)
	DeleteKubeFlowDeployment(context.Context, *DeleteKubeFlowDeploymentRequest) (*DeleteKubeFlowDeploymentResponse, error)
	ExecuteKFPreCheck(context.Context, *ExecuteKFPreCheckRequest) (*ExecuteKFPreCheckResponse, error)
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error)
	mustEmbedUnimplementedKFServiceServer()
}

// UnimplementedKFServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKFServiceServer struct {
}

func (UnimplementedKFServiceServer) GetKFStatus(context.Context, *GetKFStatusRequest) (*GetKFStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKFStatus not implemented")
}
func (UnimplementedKFServiceServer) GetUserCredentials(context.Context, *GetUserCredentialsRequest) (*GetUserCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCredentials not implemented")
}
func (UnimplementedKFServiceServer) GetExternalIP(context.Context, *GetExternalIPRequest) (*GetExternalIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalIP not implemented")
}
func (UnimplementedKFServiceServer) CreateKubeFlowDeployment(context.Context, *CreateKubeFlowDeploymentRequest) (*CreateKubeFlowDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubeFlowDeployment not implemented")
}
func (UnimplementedKFServiceServer) ListKubeFlowDeployment(context.Context, *ListKubeFlowDeploymentRequest) (*ListKubeFlowDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKubeFlowDeployment not implemented")
}
func (UnimplementedKFServiceServer) DeleteKubeFlowDeployment(context.Context, *DeleteKubeFlowDeploymentRequest) (*DeleteKubeFlowDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubeFlowDeployment not implemented")
}
func (UnimplementedKFServiceServer) ExecuteKFPreCheck(context.Context, *ExecuteKFPreCheckRequest) (*ExecuteKFPreCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteKFPreCheck not implemented")
}
func (UnimplementedKFServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedKFServiceServer) mustEmbedUnimplementedKFServiceServer() {}

// UnsafeKFServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KFServiceServer will
// result in compilation errors.
type UnsafeKFServiceServer interface {
	mustEmbedUnimplementedKFServiceServer()
}

func RegisterKFServiceServer(s grpc.ServiceRegistrar, srv KFServiceServer) {
	s.RegisterService(&KFService_ServiceDesc, srv)
}

func _KFService_GetKFStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKFStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).GetKFStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/GetKFStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).GetKFStatus(ctx, req.(*GetKFStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KFService_GetUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).GetUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/GetUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).GetUserCredentials(ctx, req.(*GetUserCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KFService_GetExternalIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).GetExternalIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/GetExternalIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).GetExternalIP(ctx, req.(*GetExternalIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KFService_CreateKubeFlowDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKubeFlowDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).CreateKubeFlowDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/CreateKubeFlowDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).CreateKubeFlowDeployment(ctx, req.(*CreateKubeFlowDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KFService_ListKubeFlowDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubeFlowDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).ListKubeFlowDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/ListKubeFlowDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).ListKubeFlowDeployment(ctx, req.(*ListKubeFlowDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KFService_DeleteKubeFlowDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubeFlowDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).DeleteKubeFlowDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/DeleteKubeFlowDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).DeleteKubeFlowDeployment(ctx, req.(*DeleteKubeFlowDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KFService_ExecuteKFPreCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteKFPreCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).ExecuteKFPreCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/ExecuteKFPreCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).ExecuteKFPreCheck(ctx, req.(*ExecuteKFPreCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KFService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KFServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KFService/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KFServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KFService_ServiceDesc is the grpc.ServiceDesc for KFService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KFService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KFService",
	HandlerType: (*KFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKFStatus",
			Handler:    _KFService_GetKFStatus_Handler,
		},
		{
			MethodName: "GetUserCredentials",
			Handler:    _KFService_GetUserCredentials_Handler,
		},
		{
			MethodName: "GetExternalIP",
			Handler:    _KFService_GetExternalIP_Handler,
		},
		{
			MethodName: "CreateKubeFlowDeployment",
			Handler:    _KFService_CreateKubeFlowDeployment_Handler,
		},
		{
			MethodName: "ListKubeFlowDeployment",
			Handler:    _KFService_ListKubeFlowDeployment_Handler,
		},
		{
			MethodName: "DeleteKubeFlowDeployment",
			Handler:    _KFService_DeleteKubeFlowDeployment_Handler,
		},
		{
			MethodName: "ExecuteKFPreCheck",
			Handler:    _KFService_ExecuteKFPreCheck_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _KFService_GetJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kfaas.proto",
}
