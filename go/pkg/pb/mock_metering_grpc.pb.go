// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/metering_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMeteringServiceClient is a mock of MeteringServiceClient interface.
type MockMeteringServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringServiceClientMockRecorder
}

// MockMeteringServiceClientMockRecorder is the mock recorder for MockMeteringServiceClient.
type MockMeteringServiceClientMockRecorder struct {
	mock *MockMeteringServiceClient
}

// NewMockMeteringServiceClient creates a new mock instance.
func NewMockMeteringServiceClient(ctrl *gomock.Controller) *MockMeteringServiceClient {
	mock := &MockMeteringServiceClient{ctrl: ctrl}
	mock.recorder = &MockMeteringServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringServiceClient) EXPECT() *MockMeteringServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMeteringServiceClient) Create(ctx context.Context, in *UsageCreate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMeteringServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMeteringServiceClient)(nil).Create), varargs...)
}

// CreateInvalidRecords mocks base method.
func (m *MockMeteringServiceClient) CreateInvalidRecords(ctx context.Context, in *CreateInvalidMeteringRecords, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvalidRecords", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvalidRecords indicates an expected call of CreateInvalidRecords.
func (mr *MockMeteringServiceClientMockRecorder) CreateInvalidRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidRecords", reflect.TypeOf((*MockMeteringServiceClient)(nil).CreateInvalidRecords), varargs...)
}

// FindPrevious mocks base method.
func (m *MockMeteringServiceClient) FindPrevious(ctx context.Context, in *UsagePrevious, opts ...grpc.CallOption) (*Usage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPrevious", varargs...)
	ret0, _ := ret[0].(*Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrevious indicates an expected call of FindPrevious.
func (mr *MockMeteringServiceClientMockRecorder) FindPrevious(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrevious", reflect.TypeOf((*MockMeteringServiceClient)(nil).FindPrevious), varargs...)
}

// IsMeteringRecordAvailable mocks base method.
func (m *MockMeteringServiceClient) IsMeteringRecordAvailable(ctx context.Context, in *MeteringAvailableFilter, opts ...grpc.CallOption) (*MeteringAvailableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsMeteringRecordAvailable", varargs...)
	ret0, _ := ret[0].(*MeteringAvailableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMeteringRecordAvailable indicates an expected call of IsMeteringRecordAvailable.
func (mr *MockMeteringServiceClientMockRecorder) IsMeteringRecordAvailable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMeteringRecordAvailable", reflect.TypeOf((*MockMeteringServiceClient)(nil).IsMeteringRecordAvailable), varargs...)
}

// Ping mocks base method.
func (m *MockMeteringServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockMeteringServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMeteringServiceClient)(nil).Ping), varargs...)
}

// Search mocks base method.
func (m *MockMeteringServiceClient) Search(ctx context.Context, in *UsageFilter, opts ...grpc.CallOption) (MeteringService_SearchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(MeteringService_SearchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMeteringServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMeteringServiceClient)(nil).Search), varargs...)
}

// SearchInvalid mocks base method.
func (m *MockMeteringServiceClient) SearchInvalid(ctx context.Context, in *InvalidMeteringRecordFilter, opts ...grpc.CallOption) (MeteringService_SearchInvalidClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchInvalid", varargs...)
	ret0, _ := ret[0].(MeteringService_SearchInvalidClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchInvalid indicates an expected call of SearchInvalid.
func (mr *MockMeteringServiceClientMockRecorder) SearchInvalid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchInvalid", reflect.TypeOf((*MockMeteringServiceClient)(nil).SearchInvalid), varargs...)
}

// SearchResourceMeteringRecords mocks base method.
func (m *MockMeteringServiceClient) SearchResourceMeteringRecords(ctx context.Context, in *MeteringFilter, opts ...grpc.CallOption) (*ResourceMeteringRecordsList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchResourceMeteringRecords", varargs...)
	ret0, _ := ret[0].(*ResourceMeteringRecordsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResourceMeteringRecords indicates an expected call of SearchResourceMeteringRecords.
func (mr *MockMeteringServiceClientMockRecorder) SearchResourceMeteringRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourceMeteringRecords", reflect.TypeOf((*MockMeteringServiceClient)(nil).SearchResourceMeteringRecords), varargs...)
}

// SearchResourceMeteringRecordsAsStream mocks base method.
func (m *MockMeteringServiceClient) SearchResourceMeteringRecordsAsStream(ctx context.Context, in *MeteringFilter, opts ...grpc.CallOption) (MeteringService_SearchResourceMeteringRecordsAsStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchResourceMeteringRecordsAsStream", varargs...)
	ret0, _ := ret[0].(MeteringService_SearchResourceMeteringRecordsAsStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResourceMeteringRecordsAsStream indicates an expected call of SearchResourceMeteringRecordsAsStream.
func (mr *MockMeteringServiceClientMockRecorder) SearchResourceMeteringRecordsAsStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourceMeteringRecordsAsStream", reflect.TypeOf((*MockMeteringServiceClient)(nil).SearchResourceMeteringRecordsAsStream), varargs...)
}

// Update mocks base method.
func (m *MockMeteringServiceClient) Update(ctx context.Context, in *UsageUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMeteringServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMeteringServiceClient)(nil).Update), varargs...)
}

// MockMeteringService_SearchClient is a mock of MeteringService_SearchClient interface.
type MockMeteringService_SearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringService_SearchClientMockRecorder
}

// MockMeteringService_SearchClientMockRecorder is the mock recorder for MockMeteringService_SearchClient.
type MockMeteringService_SearchClientMockRecorder struct {
	mock *MockMeteringService_SearchClient
}

// NewMockMeteringService_SearchClient creates a new mock instance.
func NewMockMeteringService_SearchClient(ctrl *gomock.Controller) *MockMeteringService_SearchClient {
	mock := &MockMeteringService_SearchClient{ctrl: ctrl}
	mock.recorder = &MockMeteringService_SearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringService_SearchClient) EXPECT() *MockMeteringService_SearchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMeteringService_SearchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMeteringService_SearchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMeteringService_SearchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMeteringService_SearchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeteringService_SearchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeteringService_SearchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMeteringService_SearchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMeteringService_SearchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMeteringService_SearchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMeteringService_SearchClient) Recv() (*Usage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMeteringService_SearchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMeteringService_SearchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMeteringService_SearchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeteringService_SearchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeteringService_SearchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockMeteringService_SearchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeteringService_SearchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeteringService_SearchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMeteringService_SearchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMeteringService_SearchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMeteringService_SearchClient)(nil).Trailer))
}

// MockMeteringService_SearchInvalidClient is a mock of MeteringService_SearchInvalidClient interface.
type MockMeteringService_SearchInvalidClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringService_SearchInvalidClientMockRecorder
}

// MockMeteringService_SearchInvalidClientMockRecorder is the mock recorder for MockMeteringService_SearchInvalidClient.
type MockMeteringService_SearchInvalidClientMockRecorder struct {
	mock *MockMeteringService_SearchInvalidClient
}

// NewMockMeteringService_SearchInvalidClient creates a new mock instance.
func NewMockMeteringService_SearchInvalidClient(ctrl *gomock.Controller) *MockMeteringService_SearchInvalidClient {
	mock := &MockMeteringService_SearchInvalidClient{ctrl: ctrl}
	mock.recorder = &MockMeteringService_SearchInvalidClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringService_SearchInvalidClient) EXPECT() *MockMeteringService_SearchInvalidClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMeteringService_SearchInvalidClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMeteringService_SearchInvalidClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMeteringService_SearchInvalidClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMeteringService_SearchInvalidClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeteringService_SearchInvalidClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeteringService_SearchInvalidClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMeteringService_SearchInvalidClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMeteringService_SearchInvalidClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMeteringService_SearchInvalidClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMeteringService_SearchInvalidClient) Recv() (*InvalidMeteringRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*InvalidMeteringRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMeteringService_SearchInvalidClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMeteringService_SearchInvalidClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMeteringService_SearchInvalidClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeteringService_SearchInvalidClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeteringService_SearchInvalidClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockMeteringService_SearchInvalidClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeteringService_SearchInvalidClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeteringService_SearchInvalidClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMeteringService_SearchInvalidClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMeteringService_SearchInvalidClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMeteringService_SearchInvalidClient)(nil).Trailer))
}

// MockMeteringService_SearchResourceMeteringRecordsAsStreamClient is a mock of MeteringService_SearchResourceMeteringRecordsAsStreamClient interface.
type MockMeteringService_SearchResourceMeteringRecordsAsStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder
}

// MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder is the mock recorder for MockMeteringService_SearchResourceMeteringRecordsAsStreamClient.
type MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder struct {
	mock *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient
}

// NewMockMeteringService_SearchResourceMeteringRecordsAsStreamClient creates a new mock instance.
func NewMockMeteringService_SearchResourceMeteringRecordsAsStreamClient(ctrl *gomock.Controller) *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient {
	mock := &MockMeteringService_SearchResourceMeteringRecordsAsStreamClient{ctrl: ctrl}
	mock.recorder = &MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) EXPECT() *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) Recv() (*ResourceMeteringRecordsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ResourceMeteringRecordsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamClient)(nil).Trailer))
}

// MockMeteringServiceServer is a mock of MeteringServiceServer interface.
type MockMeteringServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringServiceServerMockRecorder
}

// MockMeteringServiceServerMockRecorder is the mock recorder for MockMeteringServiceServer.
type MockMeteringServiceServerMockRecorder struct {
	mock *MockMeteringServiceServer
}

// NewMockMeteringServiceServer creates a new mock instance.
func NewMockMeteringServiceServer(ctrl *gomock.Controller) *MockMeteringServiceServer {
	mock := &MockMeteringServiceServer{ctrl: ctrl}
	mock.recorder = &MockMeteringServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringServiceServer) EXPECT() *MockMeteringServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMeteringServiceServer) Create(arg0 context.Context, arg1 *UsageCreate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMeteringServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMeteringServiceServer)(nil).Create), arg0, arg1)
}

// CreateInvalidRecords mocks base method.
func (m *MockMeteringServiceServer) CreateInvalidRecords(arg0 context.Context, arg1 *CreateInvalidMeteringRecords) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvalidRecords", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvalidRecords indicates an expected call of CreateInvalidRecords.
func (mr *MockMeteringServiceServerMockRecorder) CreateInvalidRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidRecords", reflect.TypeOf((*MockMeteringServiceServer)(nil).CreateInvalidRecords), arg0, arg1)
}

// FindPrevious mocks base method.
func (m *MockMeteringServiceServer) FindPrevious(arg0 context.Context, arg1 *UsagePrevious) (*Usage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrevious", arg0, arg1)
	ret0, _ := ret[0].(*Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrevious indicates an expected call of FindPrevious.
func (mr *MockMeteringServiceServerMockRecorder) FindPrevious(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrevious", reflect.TypeOf((*MockMeteringServiceServer)(nil).FindPrevious), arg0, arg1)
}

// IsMeteringRecordAvailable mocks base method.
func (m *MockMeteringServiceServer) IsMeteringRecordAvailable(arg0 context.Context, arg1 *MeteringAvailableFilter) (*MeteringAvailableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMeteringRecordAvailable", arg0, arg1)
	ret0, _ := ret[0].(*MeteringAvailableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMeteringRecordAvailable indicates an expected call of IsMeteringRecordAvailable.
func (mr *MockMeteringServiceServerMockRecorder) IsMeteringRecordAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMeteringRecordAvailable", reflect.TypeOf((*MockMeteringServiceServer)(nil).IsMeteringRecordAvailable), arg0, arg1)
}

// Ping mocks base method.
func (m *MockMeteringServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockMeteringServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMeteringServiceServer)(nil).Ping), arg0, arg1)
}

// Search mocks base method.
func (m *MockMeteringServiceServer) Search(arg0 *UsageFilter, arg1 MeteringService_SearchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockMeteringServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMeteringServiceServer)(nil).Search), arg0, arg1)
}

// SearchInvalid mocks base method.
func (m *MockMeteringServiceServer) SearchInvalid(arg0 *InvalidMeteringRecordFilter, arg1 MeteringService_SearchInvalidServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchInvalid", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchInvalid indicates an expected call of SearchInvalid.
func (mr *MockMeteringServiceServerMockRecorder) SearchInvalid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchInvalid", reflect.TypeOf((*MockMeteringServiceServer)(nil).SearchInvalid), arg0, arg1)
}

// SearchResourceMeteringRecords mocks base method.
func (m *MockMeteringServiceServer) SearchResourceMeteringRecords(arg0 context.Context, arg1 *MeteringFilter) (*ResourceMeteringRecordsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResourceMeteringRecords", arg0, arg1)
	ret0, _ := ret[0].(*ResourceMeteringRecordsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResourceMeteringRecords indicates an expected call of SearchResourceMeteringRecords.
func (mr *MockMeteringServiceServerMockRecorder) SearchResourceMeteringRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourceMeteringRecords", reflect.TypeOf((*MockMeteringServiceServer)(nil).SearchResourceMeteringRecords), arg0, arg1)
}

// SearchResourceMeteringRecordsAsStream mocks base method.
func (m *MockMeteringServiceServer) SearchResourceMeteringRecordsAsStream(arg0 *MeteringFilter, arg1 MeteringService_SearchResourceMeteringRecordsAsStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResourceMeteringRecordsAsStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchResourceMeteringRecordsAsStream indicates an expected call of SearchResourceMeteringRecordsAsStream.
func (mr *MockMeteringServiceServerMockRecorder) SearchResourceMeteringRecordsAsStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourceMeteringRecordsAsStream", reflect.TypeOf((*MockMeteringServiceServer)(nil).SearchResourceMeteringRecordsAsStream), arg0, arg1)
}

// Update mocks base method.
func (m *MockMeteringServiceServer) Update(arg0 context.Context, arg1 *UsageUpdate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMeteringServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMeteringServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedMeteringServiceServer mocks base method.
func (m *MockMeteringServiceServer) mustEmbedUnimplementedMeteringServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMeteringServiceServer")
}

// mustEmbedUnimplementedMeteringServiceServer indicates an expected call of mustEmbedUnimplementedMeteringServiceServer.
func (mr *MockMeteringServiceServerMockRecorder) mustEmbedUnimplementedMeteringServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMeteringServiceServer", reflect.TypeOf((*MockMeteringServiceServer)(nil).mustEmbedUnimplementedMeteringServiceServer))
}

// MockUnsafeMeteringServiceServer is a mock of UnsafeMeteringServiceServer interface.
type MockUnsafeMeteringServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMeteringServiceServerMockRecorder
}

// MockUnsafeMeteringServiceServerMockRecorder is the mock recorder for MockUnsafeMeteringServiceServer.
type MockUnsafeMeteringServiceServerMockRecorder struct {
	mock *MockUnsafeMeteringServiceServer
}

// NewMockUnsafeMeteringServiceServer creates a new mock instance.
func NewMockUnsafeMeteringServiceServer(ctrl *gomock.Controller) *MockUnsafeMeteringServiceServer {
	mock := &MockUnsafeMeteringServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMeteringServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMeteringServiceServer) EXPECT() *MockUnsafeMeteringServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMeteringServiceServer mocks base method.
func (m *MockUnsafeMeteringServiceServer) mustEmbedUnimplementedMeteringServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMeteringServiceServer")
}

// mustEmbedUnimplementedMeteringServiceServer indicates an expected call of mustEmbedUnimplementedMeteringServiceServer.
func (mr *MockUnsafeMeteringServiceServerMockRecorder) mustEmbedUnimplementedMeteringServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMeteringServiceServer", reflect.TypeOf((*MockUnsafeMeteringServiceServer)(nil).mustEmbedUnimplementedMeteringServiceServer))
}

// MockMeteringService_SearchServer is a mock of MeteringService_SearchServer interface.
type MockMeteringService_SearchServer struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringService_SearchServerMockRecorder
}

// MockMeteringService_SearchServerMockRecorder is the mock recorder for MockMeteringService_SearchServer.
type MockMeteringService_SearchServerMockRecorder struct {
	mock *MockMeteringService_SearchServer
}

// NewMockMeteringService_SearchServer creates a new mock instance.
func NewMockMeteringService_SearchServer(ctrl *gomock.Controller) *MockMeteringService_SearchServer {
	mock := &MockMeteringService_SearchServer{ctrl: ctrl}
	mock.recorder = &MockMeteringService_SearchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringService_SearchServer) EXPECT() *MockMeteringService_SearchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMeteringService_SearchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeteringService_SearchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeteringService_SearchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockMeteringService_SearchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeteringService_SearchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeteringService_SearchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMeteringService_SearchServer) Send(arg0 *Usage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMeteringService_SearchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMeteringService_SearchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMeteringService_SearchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMeteringService_SearchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMeteringService_SearchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMeteringService_SearchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeteringService_SearchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeteringService_SearchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMeteringService_SearchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMeteringService_SearchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMeteringService_SearchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMeteringService_SearchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMeteringService_SearchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMeteringService_SearchServer)(nil).SetTrailer), arg0)
}

// MockMeteringService_SearchInvalidServer is a mock of MeteringService_SearchInvalidServer interface.
type MockMeteringService_SearchInvalidServer struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringService_SearchInvalidServerMockRecorder
}

// MockMeteringService_SearchInvalidServerMockRecorder is the mock recorder for MockMeteringService_SearchInvalidServer.
type MockMeteringService_SearchInvalidServerMockRecorder struct {
	mock *MockMeteringService_SearchInvalidServer
}

// NewMockMeteringService_SearchInvalidServer creates a new mock instance.
func NewMockMeteringService_SearchInvalidServer(ctrl *gomock.Controller) *MockMeteringService_SearchInvalidServer {
	mock := &MockMeteringService_SearchInvalidServer{ctrl: ctrl}
	mock.recorder = &MockMeteringService_SearchInvalidServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringService_SearchInvalidServer) EXPECT() *MockMeteringService_SearchInvalidServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMeteringService_SearchInvalidServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeteringService_SearchInvalidServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeteringService_SearchInvalidServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockMeteringService_SearchInvalidServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeteringService_SearchInvalidServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeteringService_SearchInvalidServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMeteringService_SearchInvalidServer) Send(arg0 *InvalidMeteringRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMeteringService_SearchInvalidServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMeteringService_SearchInvalidServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMeteringService_SearchInvalidServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMeteringService_SearchInvalidServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMeteringService_SearchInvalidServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMeteringService_SearchInvalidServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeteringService_SearchInvalidServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeteringService_SearchInvalidServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMeteringService_SearchInvalidServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMeteringService_SearchInvalidServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMeteringService_SearchInvalidServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMeteringService_SearchInvalidServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMeteringService_SearchInvalidServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMeteringService_SearchInvalidServer)(nil).SetTrailer), arg0)
}

// MockMeteringService_SearchResourceMeteringRecordsAsStreamServer is a mock of MeteringService_SearchResourceMeteringRecordsAsStreamServer interface.
type MockMeteringService_SearchResourceMeteringRecordsAsStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder
}

// MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder is the mock recorder for MockMeteringService_SearchResourceMeteringRecordsAsStreamServer.
type MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder struct {
	mock *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer
}

// NewMockMeteringService_SearchResourceMeteringRecordsAsStreamServer creates a new mock instance.
func NewMockMeteringService_SearchResourceMeteringRecordsAsStreamServer(ctrl *gomock.Controller) *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer {
	mock := &MockMeteringService_SearchResourceMeteringRecordsAsStreamServer{ctrl: ctrl}
	mock.recorder = &MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) EXPECT() *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) Send(arg0 *ResourceMeteringRecordsList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMeteringService_SearchResourceMeteringRecordsAsStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMeteringService_SearchResourceMeteringRecordsAsStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMeteringService_SearchResourceMeteringRecordsAsStreamServer)(nil).SetTrailer), arg0)
}
