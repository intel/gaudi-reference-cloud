// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network_subnet_private.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubnetCreatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetCreatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetCreatePrivateRequestMultiError, or nil if none found.
func (m *SubnetCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// SubnetCreatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by SubnetCreatePrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type SubnetCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetCreatePrivateRequestMultiError) AllErrors() []error { return m }

// SubnetCreatePrivateRequestValidationError is the validation error returned
// by SubnetCreatePrivateRequest.Validate if the designated constraints aren't met.
type SubnetCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetCreatePrivateRequestValidationError) ErrorName() string {
	return "SubnetCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetCreatePrivateRequestValidationError{}

// Validate checks the field values on SubnetUpdatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetUpdatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetUpdatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetUpdatePrivateRequestMultiError, or nil if none found.
func (m *SubnetUpdatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetUpdatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetUpdatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetUpdatePrivateRequestMultiError(errors)
	}

	return nil
}

// SubnetUpdatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by SubnetUpdatePrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type SubnetUpdatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetUpdatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetUpdatePrivateRequestMultiError) AllErrors() []error { return m }

// SubnetUpdatePrivateRequestValidationError is the validation error returned
// by SubnetUpdatePrivateRequest.Validate if the designated constraints aren't met.
type SubnetUpdatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetUpdatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetUpdatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetUpdatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetUpdatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetUpdatePrivateRequestValidationError) ErrorName() string {
	return "SubnetUpdatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetUpdatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetUpdatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetUpdatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetUpdatePrivateRequestValidationError{}

// Validate checks the field values on SubnetMetadataCreatePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetMetadataCreatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetMetadataCreatePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetMetadataCreatePrivateMultiError, or nil if none found.
func (m *SubnetMetadataCreatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetMetadataCreatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Reserved1

	// no validation rules for SubnetId

	// no validation rules for VpcId

	// no validation rules for AvailabilityZone

	if len(errors) > 0 {
		return SubnetMetadataCreatePrivateMultiError(errors)
	}

	return nil
}

// SubnetMetadataCreatePrivateMultiError is an error wrapping multiple
// validation errors returned by SubnetMetadataCreatePrivate.ValidateAll() if
// the designated constraints aren't met.
type SubnetMetadataCreatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetMetadataCreatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetMetadataCreatePrivateMultiError) AllErrors() []error { return m }

// SubnetMetadataCreatePrivateValidationError is the validation error returned
// by SubnetMetadataCreatePrivate.Validate if the designated constraints
// aren't met.
type SubnetMetadataCreatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetMetadataCreatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetMetadataCreatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetMetadataCreatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetMetadataCreatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetMetadataCreatePrivateValidationError) ErrorName() string {
	return "SubnetMetadataCreatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetMetadataCreatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetMetadataCreatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetMetadataCreatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetMetadataCreatePrivateValidationError{}

// Validate checks the field values on SubnetGetPrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetGetPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetGetPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetGetPrivateRequestMultiError, or nil if none found.
func (m *SubnetGetPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetGetPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetGetPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetGetPrivateRequestMultiError(errors)
	}

	return nil
}

// SubnetGetPrivateRequestMultiError is an error wrapping multiple validation
// errors returned by SubnetGetPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type SubnetGetPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetGetPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetGetPrivateRequestMultiError) AllErrors() []error { return m }

// SubnetGetPrivateRequestValidationError is the validation error returned by
// SubnetGetPrivateRequest.Validate if the designated constraints aren't met.
type SubnetGetPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetGetPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetGetPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetGetPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetGetPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetGetPrivateRequestValidationError) ErrorName() string {
	return "SubnetGetPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetGetPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetGetPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetGetPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetGetPrivateRequestValidationError{}

// Validate checks the field values on SubnetPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubnetPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubnetPrivateMultiError, or
// nil if none found.
func (m *SubnetPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetPrivateMultiError(errors)
	}

	return nil
}

// SubnetPrivateMultiError is an error wrapping multiple validation errors
// returned by SubnetPrivate.ValidateAll() if the designated constraints
// aren't met.
type SubnetPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetPrivateMultiError) AllErrors() []error { return m }

// SubnetPrivateValidationError is the validation error returned by
// SubnetPrivate.Validate if the designated constraints aren't met.
type SubnetPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetPrivateValidationError) ErrorName() string { return "SubnetPrivateValidationError" }

// Error satisfies the builtin error interface
func (e SubnetPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetPrivateValidationError{}

// Validate checks the field values on SubnetPrivateWatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetPrivateWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetPrivateWatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetPrivateWatchResponseMultiError, or nil if none found.
func (m *SubnetPrivateWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetPrivateWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetPrivateWatchResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Spec

	// no validation rules for Status

	if len(errors) > 0 {
		return SubnetPrivateWatchResponseMultiError(errors)
	}

	return nil
}

// SubnetPrivateWatchResponseMultiError is an error wrapping multiple
// validation errors returned by SubnetPrivateWatchResponse.ValidateAll() if
// the designated constraints aren't met.
type SubnetPrivateWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetPrivateWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetPrivateWatchResponseMultiError) AllErrors() []error { return m }

// SubnetPrivateWatchResponseValidationError is the validation error returned
// by SubnetPrivateWatchResponse.Validate if the designated constraints aren't met.
type SubnetPrivateWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetPrivateWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetPrivateWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetPrivateWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetPrivateWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetPrivateWatchResponseValidationError) ErrorName() string {
	return "SubnetPrivateWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetPrivateWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetPrivateWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetPrivateWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetPrivateWatchResponseValidationError{}

// Validate checks the field values on SubnetMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetMetadataPrivateMultiError, or nil if none found.
func (m *SubnetMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetMetadataPrivateValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetMetadataPrivateMultiError(errors)
	}

	return nil
}

// SubnetMetadataPrivateMultiError is an error wrapping multiple validation
// errors returned by SubnetMetadataPrivate.ValidateAll() if the designated
// constraints aren't met.
type SubnetMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetMetadataPrivateMultiError) AllErrors() []error { return m }

// SubnetMetadataPrivateValidationError is the validation error returned by
// SubnetMetadataPrivate.Validate if the designated constraints aren't met.
type SubnetMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetMetadataPrivateValidationError) ErrorName() string {
	return "SubnetMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetMetadataPrivateValidationError{}

// Validate checks the field values on SubnetSpecPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubnetSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetSpecPrivateMultiError, or nil if none found.
func (m *SubnetSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CidrBlock

	// no validation rules for VpcId

	// no validation rules for AvailabilityZone

	// no validation rules for SubnetType

	if len(errors) > 0 {
		return SubnetSpecPrivateMultiError(errors)
	}

	return nil
}

// SubnetSpecPrivateMultiError is an error wrapping multiple validation errors
// returned by SubnetSpecPrivate.ValidateAll() if the designated constraints
// aren't met.
type SubnetSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetSpecPrivateMultiError) AllErrors() []error { return m }

// SubnetSpecPrivateValidationError is the validation error returned by
// SubnetSpecPrivate.Validate if the designated constraints aren't met.
type SubnetSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetSpecPrivateValidationError) ErrorName() string {
	return "SubnetSpecPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetSpecPrivateValidationError{}

// Validate checks the field values on SubnetStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetStatusPrivateMultiError, or nil if none found.
func (m *SubnetStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if len(errors) > 0 {
		return SubnetStatusPrivateMultiError(errors)
	}

	return nil
}

// SubnetStatusPrivateMultiError is an error wrapping multiple validation
// errors returned by SubnetStatusPrivate.ValidateAll() if the designated
// constraints aren't met.
type SubnetStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetStatusPrivateMultiError) AllErrors() []error { return m }

// SubnetStatusPrivateValidationError is the validation error returned by
// SubnetStatusPrivate.Validate if the designated constraints aren't met.
type SubnetStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetStatusPrivateValidationError) ErrorName() string {
	return "SubnetStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetStatusPrivateValidationError{}

// Validate checks the field values on SubnetSearchStreamPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubnetSearchStreamPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetSearchStreamPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubnetSearchStreamPrivateRequestMultiError, or nil if none found.
func (m *SubnetSearchStreamPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetSearchStreamPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubnetSearchStreamPrivateRequestMultiError(errors)
	}

	return nil
}

// SubnetSearchStreamPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// SubnetSearchStreamPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type SubnetSearchStreamPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetSearchStreamPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetSearchStreamPrivateRequestMultiError) AllErrors() []error { return m }

// SubnetSearchStreamPrivateRequestValidationError is the validation error
// returned by SubnetSearchStreamPrivateRequest.Validate if the designated
// constraints aren't met.
type SubnetSearchStreamPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetSearchStreamPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetSearchStreamPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetSearchStreamPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetSearchStreamPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetSearchStreamPrivateRequestValidationError) ErrorName() string {
	return "SubnetSearchStreamPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetSearchStreamPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetSearchStreamPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetSearchStreamPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetSearchStreamPrivateRequestValidationError{}

// Validate checks the field values on SubnetWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetWatchResponseMultiError, or nil if none found.
func (m *SubnetWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetWatchResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetWatchResponseMultiError(errors)
	}

	return nil
}

// SubnetWatchResponseMultiError is an error wrapping multiple validation
// errors returned by SubnetWatchResponse.ValidateAll() if the designated
// constraints aren't met.
type SubnetWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetWatchResponseMultiError) AllErrors() []error { return m }

// SubnetWatchResponseValidationError is the validation error returned by
// SubnetWatchResponse.Validate if the designated constraints aren't met.
type SubnetWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetWatchResponseValidationError) ErrorName() string {
	return "SubnetWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetWatchResponseValidationError{}

// Validate checks the field values on SubnetUpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetUpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetUpdateStatusRequestMultiError, or nil if none found.
func (m *SubnetUpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetUpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetUpdateStatusRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetUpdateStatusRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetUpdateStatusRequestMultiError(errors)
	}

	return nil
}

// SubnetUpdateStatusRequestMultiError is an error wrapping multiple validation
// errors returned by SubnetUpdateStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type SubnetUpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetUpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetUpdateStatusRequestMultiError) AllErrors() []error { return m }

// SubnetUpdateStatusRequestValidationError is the validation error returned by
// SubnetUpdateStatusRequest.Validate if the designated constraints aren't met.
type SubnetUpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetUpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetUpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetUpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetUpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetUpdateStatusRequestValidationError) ErrorName() string {
	return "SubnetUpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetUpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetUpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetUpdateStatusRequestValidationError{}

// Validate checks the field values on SubnetIdReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubnetIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetIdReferenceMultiError, or nil if none found.
func (m *SubnetIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetIdReferenceValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetIdReferenceValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetIdReferenceValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetIdReferenceMultiError(errors)
	}

	return nil
}

// SubnetIdReferenceMultiError is an error wrapping multiple validation errors
// returned by SubnetIdReference.ValidateAll() if the designated constraints
// aren't met.
type SubnetIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetIdReferenceMultiError) AllErrors() []error { return m }

// SubnetIdReferenceValidationError is the validation error returned by
// SubnetIdReference.Validate if the designated constraints aren't met.
type SubnetIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetIdReferenceValidationError) ErrorName() string {
	return "SubnetIdReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetIdReferenceValidationError{}

// Validate checks the field values on SubnetWatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetWatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetWatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetWatchRequestMultiError, or nil if none found.
func (m *SubnetWatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetWatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return SubnetWatchRequestMultiError(errors)
	}

	return nil
}

// SubnetWatchRequestMultiError is an error wrapping multiple validation errors
// returned by SubnetWatchRequest.ValidateAll() if the designated constraints
// aren't met.
type SubnetWatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetWatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetWatchRequestMultiError) AllErrors() []error { return m }

// SubnetWatchRequestValidationError is the validation error returned by
// SubnetWatchRequest.Validate if the designated constraints aren't met.
type SubnetWatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetWatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetWatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetWatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetWatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetWatchRequestValidationError) ErrorName() string {
	return "SubnetWatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetWatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetWatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetWatchRequestValidationError{}
