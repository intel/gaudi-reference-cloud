// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cloudmonitor.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Metrics with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metrics with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetricsMultiError, or nil if none found.
func (m *Metrics) ValidateAll() error {
	return m.validate(true)
}

func (m *Metrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metric

	if len(errors) > 0 {
		return MetricsMultiError(errors)
	}

	return nil
}

// MetricsMultiError is an error wrapping multiple validation errors returned
// by Metrics.ValidateAll() if the designated constraints aren't met.
type MetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsMultiError) AllErrors() []error { return m }

// MetricsValidationError is the validation error returned by Metrics.Validate
// if the designated constraints aren't met.
type MetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsValidationError) ErrorName() string { return "MetricsValidationError" }

// Error satisfies the builtin error interface
func (e MetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsValidationError{}

// Validate checks the field values on Intervals with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Intervals) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intervals with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntervalsMultiError, or nil
// if none found.
func (m *Intervals) ValidateAll() error {
	return m.validate(true)
}

func (m *Intervals) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Interval

	if len(errors) > 0 {
		return IntervalsMultiError(errors)
	}

	return nil
}

// IntervalsMultiError is an error wrapping multiple validation errors returned
// by Intervals.ValidateAll() if the designated constraints aren't met.
type IntervalsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalsMultiError) AllErrors() []error { return m }

// IntervalsValidationError is the validation error returned by
// Intervals.Validate if the designated constraints aren't met.
type IntervalsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalsValidationError) ErrorName() string { return "IntervalsValidationError" }

// Error satisfies the builtin error interface
func (e IntervalsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervals.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalsValidationError{}

// Validate checks the field values on Resourcetypes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resourcetypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resourcetypes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourcetypesMultiError, or
// nil if none found.
func (m *Resourcetypes) ValidateAll() error {
	return m.validate(true)
}

func (m *Resourcetypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resourcetypes

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return ResourcetypesMultiError(errors)
	}

	return nil
}

// ResourcetypesMultiError is an error wrapping multiple validation errors
// returned by Resourcetypes.ValidateAll() if the designated constraints
// aren't met.
type ResourcetypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcetypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcetypesMultiError) AllErrors() []error { return m }

// ResourcetypesValidationError is the validation error returned by
// Resourcetypes.Validate if the designated constraints aren't met.
type ResourcetypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcetypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcetypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcetypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcetypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcetypesValidationError) ErrorName() string { return "ResourcetypesValidationError" }

// Error satisfies the builtin error interface
func (e ResourcetypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcetypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcetypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcetypesValidationError{}

// Validate checks the field values on GetIntervalsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntervalsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntervalsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntervalsResponseMultiError, or nil if none found.
func (m *GetIntervalsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntervalsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInterval() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIntervalsResponseValidationError{
						field:  fmt.Sprintf("Interval[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIntervalsResponseValidationError{
						field:  fmt.Sprintf("Interval[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIntervalsResponseValidationError{
					field:  fmt.Sprintf("Interval[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIntervalsResponseMultiError(errors)
	}

	return nil
}

// GetIntervalsResponseMultiError is an error wrapping multiple validation
// errors returned by GetIntervalsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIntervalsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntervalsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntervalsResponseMultiError) AllErrors() []error { return m }

// GetIntervalsResponseValidationError is the validation error returned by
// GetIntervalsResponse.Validate if the designated constraints aren't met.
type GetIntervalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntervalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntervalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntervalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntervalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntervalsResponseValidationError) ErrorName() string {
	return "GetIntervalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntervalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntervalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntervalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntervalsResponseValidationError{}

// Validate checks the field values on GetMetricTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricTypesResponseMultiError, or nil if none found.
func (m *GetMetricTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetric() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetricTypesResponseValidationError{
						field:  fmt.Sprintf("Metric[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetricTypesResponseValidationError{
						field:  fmt.Sprintf("Metric[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetricTypesResponseValidationError{
					field:  fmt.Sprintf("Metric[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMetricTypesResponseMultiError(errors)
	}

	return nil
}

// GetMetricTypesResponseMultiError is an error wrapping multiple validation
// errors returned by GetMetricTypesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMetricTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricTypesResponseMultiError) AllErrors() []error { return m }

// GetMetricTypesResponseValidationError is the validation error returned by
// GetMetricTypesResponse.Validate if the designated constraints aren't met.
type GetMetricTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricTypesResponseValidationError) ErrorName() string {
	return "GetMetricTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricTypesResponseValidationError{}

// Validate checks the field values on GetResourceCategoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceCategoriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetResourceCategoriesResponseMultiError, or nil if none found.
func (m *GetResourceCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResourcetypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResourceCategoriesResponseValidationError{
						field:  fmt.Sprintf("Resourcetypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResourceCategoriesResponseValidationError{
						field:  fmt.Sprintf("Resourcetypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResourceCategoriesResponseValidationError{
					field:  fmt.Sprintf("Resourcetypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetResourceCategoriesResponseMultiError(errors)
	}

	return nil
}

// GetResourceCategoriesResponseMultiError is an error wrapping multiple
// validation errors returned by GetResourceCategoriesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetResourceCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceCategoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceCategoriesResponseMultiError) AllErrors() []error { return m }

// GetResourceCategoriesResponseValidationError is the validation error
// returned by GetResourceCategoriesResponse.Validate if the designated
// constraints aren't met.
type GetResourceCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceCategoriesResponseValidationError) ErrorName() string {
	return "GetResourceCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceCategoriesResponseValidationError{}

// Validate checks the field values on GetIntervalsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntervalsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntervalsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntervalsRequestMultiError, or nil if none found.
func (m *GetIntervalsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntervalsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	if len(errors) > 0 {
		return GetIntervalsRequestMultiError(errors)
	}

	return nil
}

// GetIntervalsRequestMultiError is an error wrapping multiple validation
// errors returned by GetIntervalsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIntervalsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntervalsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntervalsRequestMultiError) AllErrors() []error { return m }

// GetIntervalsRequestValidationError is the validation error returned by
// GetIntervalsRequest.Validate if the designated constraints aren't met.
type GetIntervalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntervalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntervalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntervalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntervalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntervalsRequestValidationError) ErrorName() string {
	return "GetIntervalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntervalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntervalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntervalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntervalsRequestValidationError{}

// Validate checks the field values on GetMetricTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricTypesRequestMultiError, or nil if none found.
func (m *GetMetricTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	if len(errors) > 0 {
		return GetMetricTypesRequestMultiError(errors)
	}

	return nil
}

// GetMetricTypesRequestMultiError is an error wrapping multiple validation
// errors returned by GetMetricTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMetricTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricTypesRequestMultiError) AllErrors() []error { return m }

// GetMetricTypesRequestValidationError is the validation error returned by
// GetMetricTypesRequest.Validate if the designated constraints aren't met.
type GetMetricTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricTypesRequestValidationError) ErrorName() string {
	return "GetMetricTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricTypesRequestValidationError{}

// Validate checks the field values on QueryResourcesMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryResourcesMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResourcesMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryResourcesMetricsRequestMultiError, or nil if none found.
func (m *QueryResourcesMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResourcesMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for Start

	// no validation rules for Step

	// no validation rules for End

	// no validation rules for Metric

	// no validation rules for Category

	// no validation rules for ResourceType

	if len(errors) > 0 {
		return QueryResourcesMetricsRequestMultiError(errors)
	}

	return nil
}

// QueryResourcesMetricsRequestMultiError is an error wrapping multiple
// validation errors returned by QueryResourcesMetricsRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryResourcesMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResourcesMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResourcesMetricsRequestMultiError) AllErrors() []error { return m }

// QueryResourcesMetricsRequestValidationError is the validation error returned
// by QueryResourcesMetricsRequest.Validate if the designated constraints
// aren't met.
type QueryResourcesMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResourcesMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResourcesMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResourcesMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResourcesMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResourcesMetricsRequestValidationError) ErrorName() string {
	return "QueryResourcesMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryResourcesMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResourcesMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResourcesMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResourcesMetricsRequestValidationError{}

// Validate checks the field values on EnableMonitorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableMonitorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableMonitorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableMonitorRequestMultiError, or nil if none found.
func (m *EnableMonitorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableMonitorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return EnableMonitorRequestMultiError(errors)
	}

	return nil
}

// EnableMonitorRequestMultiError is an error wrapping multiple validation
// errors returned by EnableMonitorRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableMonitorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableMonitorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableMonitorRequestMultiError) AllErrors() []error { return m }

// EnableMonitorRequestValidationError is the validation error returned by
// EnableMonitorRequest.Validate if the designated constraints aren't met.
type EnableMonitorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableMonitorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableMonitorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableMonitorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableMonitorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableMonitorRequestValidationError) ErrorName() string {
	return "EnableMonitorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableMonitorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableMonitorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableMonitorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableMonitorRequestValidationError{}

// Validate checks the field values on EnableMonitorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableMonitorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableMonitorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableMonitorResponseMultiError, or nil if none found.
func (m *EnableMonitorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableMonitorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Config

	if len(errors) > 0 {
		return EnableMonitorResponseMultiError(errors)
	}

	return nil
}

// EnableMonitorResponseMultiError is an error wrapping multiple validation
// errors returned by EnableMonitorResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableMonitorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableMonitorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableMonitorResponseMultiError) AllErrors() []error { return m }

// EnableMonitorResponseValidationError is the validation error returned by
// EnableMonitorResponse.Validate if the designated constraints aren't met.
type EnableMonitorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableMonitorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableMonitorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableMonitorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableMonitorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableMonitorResponseValidationError) ErrorName() string {
	return "EnableMonitorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableMonitorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableMonitorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableMonitorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableMonitorResponseValidationError{}

// Validate checks the field values on DisableMonitorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableMonitorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableMonitorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableMonitorRequestMultiError, or nil if none found.
func (m *DisableMonitorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableMonitorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DisableMonitorRequestMultiError(errors)
	}

	return nil
}

// DisableMonitorRequestMultiError is an error wrapping multiple validation
// errors returned by DisableMonitorRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableMonitorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableMonitorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableMonitorRequestMultiError) AllErrors() []error { return m }

// DisableMonitorRequestValidationError is the validation error returned by
// DisableMonitorRequest.Validate if the designated constraints aren't met.
type DisableMonitorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableMonitorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableMonitorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableMonitorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableMonitorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableMonitorRequestValidationError) ErrorName() string {
	return "DisableMonitorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableMonitorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableMonitorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableMonitorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableMonitorRequestValidationError{}

// Validate checks the field values on DisableMonitorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableMonitorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableMonitorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableMonitorResponseMultiError, or nil if none found.
func (m *DisableMonitorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableMonitorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DisableMonitorResponseMultiError(errors)
	}

	return nil
}

// DisableMonitorResponseMultiError is an error wrapping multiple validation
// errors returned by DisableMonitorResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableMonitorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableMonitorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableMonitorResponseMultiError) AllErrors() []error { return m }

// DisableMonitorResponseValidationError is the validation error returned by
// DisableMonitorResponse.Validate if the designated constraints aren't met.
type DisableMonitorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableMonitorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableMonitorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableMonitorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableMonitorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableMonitorResponseValidationError) ErrorName() string {
	return "DisableMonitorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableMonitorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableMonitorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableMonitorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableMonitorResponseValidationError{}

// Validate checks the field values on QueryResourcesMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryResourcesMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResourcesMetricsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryResourcesMetricsResponseMultiError, or nil if none found.
func (m *QueryResourcesMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResourcesMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResponse() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryResourcesMetricsResponseValidationError{
						field:  fmt.Sprintf("Response[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryResourcesMetricsResponseValidationError{
						field:  fmt.Sprintf("Response[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryResourcesMetricsResponseValidationError{
					field:  fmt.Sprintf("Response[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryResourcesMetricsResponseMultiError(errors)
	}

	return nil
}

// QueryResourcesMetricsResponseMultiError is an error wrapping multiple
// validation errors returned by QueryResourcesMetricsResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryResourcesMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResourcesMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResourcesMetricsResponseMultiError) AllErrors() []error { return m }

// QueryResourcesMetricsResponseValidationError is the validation error
// returned by QueryResourcesMetricsResponse.Validate if the designated
// constraints aren't met.
type QueryResourcesMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResourcesMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResourcesMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResourcesMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResourcesMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResourcesMetricsResponseValidationError) ErrorName() string {
	return "QueryResourcesMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryResourcesMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResourcesMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResourcesMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResourcesMetricsResponseValidationError{}

// Validate checks the field values on QueryResourcesMetricsResponseItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryResourcesMetricsResponseItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResourcesMetricsResponseItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryResourcesMetricsResponseItemMultiError, or nil if none found.
func (m *QueryResourcesMetricsResponseItem) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResourcesMetricsResponseItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQueryvalue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryResourcesMetricsResponseItemValidationError{
						field:  fmt.Sprintf("Queryvalue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryResourcesMetricsResponseItemValidationError{
						field:  fmt.Sprintf("Queryvalue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryResourcesMetricsResponseItemValidationError{
					field:  fmt.Sprintf("Queryvalue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Unit

	// no validation rules for Item

	if len(errors) > 0 {
		return QueryResourcesMetricsResponseItemMultiError(errors)
	}

	return nil
}

// QueryResourcesMetricsResponseItemMultiError is an error wrapping multiple
// validation errors returned by
// QueryResourcesMetricsResponseItem.ValidateAll() if the designated
// constraints aren't met.
type QueryResourcesMetricsResponseItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResourcesMetricsResponseItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResourcesMetricsResponseItemMultiError) AllErrors() []error { return m }

// QueryResourcesMetricsResponseItemValidationError is the validation error
// returned by QueryResourcesMetricsResponseItem.Validate if the designated
// constraints aren't met.
type QueryResourcesMetricsResponseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResourcesMetricsResponseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResourcesMetricsResponseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResourcesMetricsResponseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResourcesMetricsResponseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResourcesMetricsResponseItemValidationError) ErrorName() string {
	return "QueryResourcesMetricsResponseItemValidationError"
}

// Error satisfies the builtin error interface
func (e QueryResourcesMetricsResponseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResourcesMetricsResponseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResourcesMetricsResponseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResourcesMetricsResponseItemValidationError{}

// Validate checks the field values on Queryvalue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Queryvalue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Queryvalue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryvalueMultiError, or
// nil if none found.
func (m *Queryvalue) ValidateAll() error {
	return m.validate(true)
}

func (m *Queryvalue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Epochtime

	if len(errors) > 0 {
		return QueryvalueMultiError(errors)
	}

	return nil
}

// QueryvalueMultiError is an error wrapping multiple validation errors
// returned by Queryvalue.ValidateAll() if the designated constraints aren't met.
type QueryvalueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryvalueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryvalueMultiError) AllErrors() []error { return m }

// QueryvalueValidationError is the validation error returned by
// Queryvalue.Validate if the designated constraints aren't met.
type QueryvalueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryvalueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryvalueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryvalueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryvalueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryvalueValidationError) ErrorName() string { return "QueryvalueValidationError" }

// Error satisfies the builtin error interface
func (e QueryvalueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryvalue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryvalueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryvalueValidationError{}
