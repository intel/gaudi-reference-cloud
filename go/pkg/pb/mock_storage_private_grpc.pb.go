// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/storage_private_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockFilesystemPrivateServiceClient is a mock of FilesystemPrivateServiceClient interface.
type MockFilesystemPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemPrivateServiceClientMockRecorder
}

// MockFilesystemPrivateServiceClientMockRecorder is the mock recorder for MockFilesystemPrivateServiceClient.
type MockFilesystemPrivateServiceClientMockRecorder struct {
	mock *MockFilesystemPrivateServiceClient
}

// NewMockFilesystemPrivateServiceClient creates a new mock instance.
func NewMockFilesystemPrivateServiceClient(ctrl *gomock.Controller) *MockFilesystemPrivateServiceClient {
	mock := &MockFilesystemPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemPrivateServiceClient) EXPECT() *MockFilesystemPrivateServiceClientMockRecorder {
	return m.recorder
}

// CreatePrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) CreatePrivate(ctx context.Context, in *FilesystemCreateRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) CreatePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).CreatePrivate), varargs...)
}

// CreateorGetUserPrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) CreateorGetUserPrivate(ctx context.Context, in *FilesystemGetUserRequestPrivate, opts ...grpc.CallOption) (*FilesystemGetUserResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateorGetUserPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemGetUserResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateorGetUserPrivate indicates an expected call of CreateorGetUserPrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) CreateorGetUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateorGetUserPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).CreateorGetUserPrivate), varargs...)
}

// DeletePrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) DeletePrivate(ctx context.Context, in *FilesystemDeleteRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivate indicates an expected call of DeletePrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) DeletePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).DeletePrivate), varargs...)
}

// DeleteUserPrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) DeleteUserPrivate(ctx context.Context, in *FilesystemDeleteUserRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPrivate indicates an expected call of DeleteUserPrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) DeleteUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).DeleteUserPrivate), varargs...)
}

// GetPrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) GetPrivate(ctx context.Context, in *FilesystemGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivate indicates an expected call of GetPrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) GetPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).GetPrivate), varargs...)
}

// GetUserPrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) GetUserPrivate(ctx context.Context, in *FilesystemGetUserRequestPrivate, opts ...grpc.CallOption) (*FilesystemGetUserResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemGetUserResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivate indicates an expected call of GetUserPrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) GetUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).GetUserPrivate), varargs...)
}

// PingPrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) PingPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).PingPrivate), varargs...)
}

// RemoveFinalizer mocks base method.
func (m *MockFilesystemPrivateServiceClient) RemoveFinalizer(ctx context.Context, in *FilesystemRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFinalizer", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFinalizer indicates an expected call of RemoveFinalizer.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) RemoveFinalizer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizer", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).RemoveFinalizer), varargs...)
}

// SearchFilesystemRequests mocks base method.
func (m *MockFilesystemPrivateServiceClient) SearchFilesystemRequests(ctx context.Context, in *FilesystemSearchStreamPrivateRequest, opts ...grpc.CallOption) (FilesystemPrivateService_SearchFilesystemRequestsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchFilesystemRequests", varargs...)
	ret0, _ := ret[0].(FilesystemPrivateService_SearchFilesystemRequestsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilesystemRequests indicates an expected call of SearchFilesystemRequests.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) SearchFilesystemRequests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesystemRequests", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).SearchFilesystemRequests), varargs...)
}

// UpdatePrivate mocks base method.
func (m *MockFilesystemPrivateServiceClient) UpdatePrivate(ctx context.Context, in *FilesystemUpdateRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivate indicates an expected call of UpdatePrivate.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) UpdatePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivate", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).UpdatePrivate), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockFilesystemPrivateServiceClient) UpdateStatus(ctx context.Context, in *FilesystemUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFilesystemPrivateServiceClientMockRecorder) UpdateStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFilesystemPrivateServiceClient)(nil).UpdateStatus), varargs...)
}

// MockFilesystemPrivateService_SearchFilesystemRequestsClient is a mock of FilesystemPrivateService_SearchFilesystemRequestsClient interface.
type MockFilesystemPrivateService_SearchFilesystemRequestsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder
}

// MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder is the mock recorder for MockFilesystemPrivateService_SearchFilesystemRequestsClient.
type MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder struct {
	mock *MockFilesystemPrivateService_SearchFilesystemRequestsClient
}

// NewMockFilesystemPrivateService_SearchFilesystemRequestsClient creates a new mock instance.
func NewMockFilesystemPrivateService_SearchFilesystemRequestsClient(ctrl *gomock.Controller) *MockFilesystemPrivateService_SearchFilesystemRequestsClient {
	mock := &MockFilesystemPrivateService_SearchFilesystemRequestsClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsClient) EXPECT() *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsClient) Recv() (*FilesystemRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*FilesystemRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemPrivateService_SearchFilesystemRequestsClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemPrivateService_SearchFilesystemRequestsClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsClient)(nil).Trailer))
}

// MockFilesystemPrivateServiceServer is a mock of FilesystemPrivateServiceServer interface.
type MockFilesystemPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemPrivateServiceServerMockRecorder
}

// MockFilesystemPrivateServiceServerMockRecorder is the mock recorder for MockFilesystemPrivateServiceServer.
type MockFilesystemPrivateServiceServerMockRecorder struct {
	mock *MockFilesystemPrivateServiceServer
}

// NewMockFilesystemPrivateServiceServer creates a new mock instance.
func NewMockFilesystemPrivateServiceServer(ctrl *gomock.Controller) *MockFilesystemPrivateServiceServer {
	mock := &MockFilesystemPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemPrivateServiceServer) EXPECT() *MockFilesystemPrivateServiceServerMockRecorder {
	return m.recorder
}

// CreatePrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) CreatePrivate(arg0 context.Context, arg1 *FilesystemCreateRequestPrivate) (*FilesystemPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) CreatePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).CreatePrivate), arg0, arg1)
}

// CreateorGetUserPrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) CreateorGetUserPrivate(arg0 context.Context, arg1 *FilesystemGetUserRequestPrivate) (*FilesystemGetUserResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateorGetUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemGetUserResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateorGetUserPrivate indicates an expected call of CreateorGetUserPrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) CreateorGetUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateorGetUserPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).CreateorGetUserPrivate), arg0, arg1)
}

// DeletePrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) DeletePrivate(arg0 context.Context, arg1 *FilesystemDeleteRequestPrivate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivate indicates an expected call of DeletePrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) DeletePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).DeletePrivate), arg0, arg1)
}

// DeleteUserPrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) DeleteUserPrivate(arg0 context.Context, arg1 *FilesystemDeleteUserRequestPrivate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPrivate indicates an expected call of DeleteUserPrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) DeleteUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).DeleteUserPrivate), arg0, arg1)
}

// GetPrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) GetPrivate(arg0 context.Context, arg1 *FilesystemGetRequestPrivate) (*FilesystemPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivate indicates an expected call of GetPrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) GetPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).GetPrivate), arg0, arg1)
}

// GetUserPrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) GetUserPrivate(arg0 context.Context, arg1 *FilesystemGetUserRequestPrivate) (*FilesystemGetUserResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemGetUserResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivate indicates an expected call of GetUserPrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) GetUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).GetUserPrivate), arg0, arg1)
}

// PingPrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) PingPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) PingPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).PingPrivate), arg0, arg1)
}

// RemoveFinalizer mocks base method.
func (m *MockFilesystemPrivateServiceServer) RemoveFinalizer(arg0 context.Context, arg1 *FilesystemRemoveFinalizerRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizer", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFinalizer indicates an expected call of RemoveFinalizer.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) RemoveFinalizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizer", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).RemoveFinalizer), arg0, arg1)
}

// SearchFilesystemRequests mocks base method.
func (m *MockFilesystemPrivateServiceServer) SearchFilesystemRequests(arg0 *FilesystemSearchStreamPrivateRequest, arg1 FilesystemPrivateService_SearchFilesystemRequestsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilesystemRequests", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchFilesystemRequests indicates an expected call of SearchFilesystemRequests.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) SearchFilesystemRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesystemRequests", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).SearchFilesystemRequests), arg0, arg1)
}

// UpdatePrivate mocks base method.
func (m *MockFilesystemPrivateServiceServer) UpdatePrivate(arg0 context.Context, arg1 *FilesystemUpdateRequestPrivate) (*FilesystemPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivate indicates an expected call of UpdatePrivate.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) UpdatePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivate", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).UpdatePrivate), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockFilesystemPrivateServiceServer) UpdateStatus(arg0 context.Context, arg1 *FilesystemUpdateStatusRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).UpdateStatus), arg0, arg1)
}

// mustEmbedUnimplementedFilesystemPrivateServiceServer mocks base method.
func (m *MockFilesystemPrivateServiceServer) mustEmbedUnimplementedFilesystemPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemPrivateServiceServer.
func (mr *MockFilesystemPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemPrivateServiceServer", reflect.TypeOf((*MockFilesystemPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemPrivateServiceServer))
}

// MockUnsafeFilesystemPrivateServiceServer is a mock of UnsafeFilesystemPrivateServiceServer interface.
type MockUnsafeFilesystemPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilesystemPrivateServiceServerMockRecorder
}

// MockUnsafeFilesystemPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeFilesystemPrivateServiceServer.
type MockUnsafeFilesystemPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeFilesystemPrivateServiceServer
}

// NewMockUnsafeFilesystemPrivateServiceServer creates a new mock instance.
func NewMockUnsafeFilesystemPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeFilesystemPrivateServiceServer {
	mock := &MockUnsafeFilesystemPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilesystemPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilesystemPrivateServiceServer) EXPECT() *MockUnsafeFilesystemPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilesystemPrivateServiceServer mocks base method.
func (m *MockUnsafeFilesystemPrivateServiceServer) mustEmbedUnimplementedFilesystemPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemPrivateServiceServer.
func (mr *MockUnsafeFilesystemPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemPrivateServiceServer", reflect.TypeOf((*MockUnsafeFilesystemPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemPrivateServiceServer))
}

// MockFilesystemPrivateService_SearchFilesystemRequestsServer is a mock of FilesystemPrivateService_SearchFilesystemRequestsServer interface.
type MockFilesystemPrivateService_SearchFilesystemRequestsServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder
}

// MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder is the mock recorder for MockFilesystemPrivateService_SearchFilesystemRequestsServer.
type MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder struct {
	mock *MockFilesystemPrivateService_SearchFilesystemRequestsServer
}

// NewMockFilesystemPrivateService_SearchFilesystemRequestsServer creates a new mock instance.
func NewMockFilesystemPrivateService_SearchFilesystemRequestsServer(ctrl *gomock.Controller) *MockFilesystemPrivateService_SearchFilesystemRequestsServer {
	mock := &MockFilesystemPrivateService_SearchFilesystemRequestsServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsServer) EXPECT() *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemPrivateService_SearchFilesystemRequestsServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsServer) Send(arg0 *FilesystemRequestResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemPrivateService_SearchFilesystemRequestsServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFilesystemPrivateService_SearchFilesystemRequestsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFilesystemPrivateService_SearchFilesystemRequestsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilesystemPrivateService_SearchFilesystemRequestsServer)(nil).SetTrailer), arg0)
}

// MockFilesystemSchedulerPrivateServiceClient is a mock of FilesystemSchedulerPrivateServiceClient interface.
type MockFilesystemSchedulerPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemSchedulerPrivateServiceClientMockRecorder
}

// MockFilesystemSchedulerPrivateServiceClientMockRecorder is the mock recorder for MockFilesystemSchedulerPrivateServiceClient.
type MockFilesystemSchedulerPrivateServiceClientMockRecorder struct {
	mock *MockFilesystemSchedulerPrivateServiceClient
}

// NewMockFilesystemSchedulerPrivateServiceClient creates a new mock instance.
func NewMockFilesystemSchedulerPrivateServiceClient(ctrl *gomock.Controller) *MockFilesystemSchedulerPrivateServiceClient {
	mock := &MockFilesystemSchedulerPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemSchedulerPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemSchedulerPrivateServiceClient) EXPECT() *MockFilesystemSchedulerPrivateServiceClientMockRecorder {
	return m.recorder
}

// IsOrgExists mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceClient) IsOrgExists(ctx context.Context, in *FilesystemOrgsIsExistsRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsIsExistsResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsOrgExists", varargs...)
	ret0, _ := ret[0].(*FilesystemOrgsIsExistsResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrgExists indicates an expected call of IsOrgExists.
func (mr *MockFilesystemSchedulerPrivateServiceClientMockRecorder) IsOrgExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrgExists", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceClient)(nil).IsOrgExists), varargs...)
}

// ListClusters mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceClient) ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (FilesystemSchedulerPrivateService_ListClustersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(FilesystemSchedulerPrivateService_ListClustersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockFilesystemSchedulerPrivateServiceClientMockRecorder) ListClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceClient)(nil).ListClusters), varargs...)
}

// ListFilesystemInOrgs mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceClient) ListFilesystemInOrgs(ctx context.Context, in *FilesystemInOrgGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemsInOrgListResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFilesystemInOrgs", varargs...)
	ret0, _ := ret[0].(*FilesystemsInOrgListResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemInOrgs indicates an expected call of ListFilesystemInOrgs.
func (mr *MockFilesystemSchedulerPrivateServiceClientMockRecorder) ListFilesystemInOrgs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemInOrgs", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceClient)(nil).ListFilesystemInOrgs), varargs...)
}

// ListFilesystemOrgs mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceClient) ListFilesystemOrgs(ctx context.Context, in *FilesystemOrgsGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFilesystemOrgs", varargs...)
	ret0, _ := ret[0].(*FilesystemOrgsResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemOrgs indicates an expected call of ListFilesystemOrgs.
func (mr *MockFilesystemSchedulerPrivateServiceClientMockRecorder) ListFilesystemOrgs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemOrgs", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceClient)(nil).ListFilesystemOrgs), varargs...)
}

// PingPrivate mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockFilesystemSchedulerPrivateServiceClientMockRecorder) PingPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceClient)(nil).PingPrivate), varargs...)
}

// ScheduleBucket mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceClient) ScheduleBucket(ctx context.Context, in *BucketScheduleRequest, opts ...grpc.CallOption) (*BucketScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleBucket", varargs...)
	ret0, _ := ret[0].(*BucketScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleBucket indicates an expected call of ScheduleBucket.
func (mr *MockFilesystemSchedulerPrivateServiceClientMockRecorder) ScheduleBucket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBucket", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceClient)(nil).ScheduleBucket), varargs...)
}

// ScheduleFile mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceClient) ScheduleFile(ctx context.Context, in *FilesystemScheduleRequest, opts ...grpc.CallOption) (*FilesystemScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleFile", varargs...)
	ret0, _ := ret[0].(*FilesystemScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleFile indicates an expected call of ScheduleFile.
func (mr *MockFilesystemSchedulerPrivateServiceClientMockRecorder) ScheduleFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleFile", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceClient)(nil).ScheduleFile), varargs...)
}

// MockFilesystemSchedulerPrivateService_ListClustersClient is a mock of FilesystemSchedulerPrivateService_ListClustersClient interface.
type MockFilesystemSchedulerPrivateService_ListClustersClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder
}

// MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder is the mock recorder for MockFilesystemSchedulerPrivateService_ListClustersClient.
type MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder struct {
	mock *MockFilesystemSchedulerPrivateService_ListClustersClient
}

// NewMockFilesystemSchedulerPrivateService_ListClustersClient creates a new mock instance.
func NewMockFilesystemSchedulerPrivateService_ListClustersClient(ctrl *gomock.Controller) *MockFilesystemSchedulerPrivateService_ListClustersClient {
	mock := &MockFilesystemSchedulerPrivateService_ListClustersClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemSchedulerPrivateService_ListClustersClient) EXPECT() *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersClient) Recv() (*FilesystemStorageClusters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*FilesystemStorageClusters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemSchedulerPrivateService_ListClustersClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemSchedulerPrivateService_ListClustersClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersClient)(nil).Trailer))
}

// MockFilesystemSchedulerPrivateServiceServer is a mock of FilesystemSchedulerPrivateServiceServer interface.
type MockFilesystemSchedulerPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemSchedulerPrivateServiceServerMockRecorder
}

// MockFilesystemSchedulerPrivateServiceServerMockRecorder is the mock recorder for MockFilesystemSchedulerPrivateServiceServer.
type MockFilesystemSchedulerPrivateServiceServerMockRecorder struct {
	mock *MockFilesystemSchedulerPrivateServiceServer
}

// NewMockFilesystemSchedulerPrivateServiceServer creates a new mock instance.
func NewMockFilesystemSchedulerPrivateServiceServer(ctrl *gomock.Controller) *MockFilesystemSchedulerPrivateServiceServer {
	mock := &MockFilesystemSchedulerPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemSchedulerPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemSchedulerPrivateServiceServer) EXPECT() *MockFilesystemSchedulerPrivateServiceServerMockRecorder {
	return m.recorder
}

// IsOrgExists mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) IsOrgExists(arg0 context.Context, arg1 *FilesystemOrgsIsExistsRequestPrivate) (*FilesystemOrgsIsExistsResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrgExists", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemOrgsIsExistsResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrgExists indicates an expected call of IsOrgExists.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) IsOrgExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrgExists", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).IsOrgExists), arg0, arg1)
}

// ListClusters mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) ListClusters(arg0 *ListClusterRequest, arg1 FilesystemSchedulerPrivateService_ListClustersServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) ListClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).ListClusters), arg0, arg1)
}

// ListFilesystemInOrgs mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) ListFilesystemInOrgs(arg0 context.Context, arg1 *FilesystemInOrgGetRequestPrivate) (*FilesystemsInOrgListResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesystemInOrgs", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemsInOrgListResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemInOrgs indicates an expected call of ListFilesystemInOrgs.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) ListFilesystemInOrgs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemInOrgs", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).ListFilesystemInOrgs), arg0, arg1)
}

// ListFilesystemOrgs mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) ListFilesystemOrgs(arg0 context.Context, arg1 *FilesystemOrgsGetRequestPrivate) (*FilesystemOrgsResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesystemOrgs", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemOrgsResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemOrgs indicates an expected call of ListFilesystemOrgs.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) ListFilesystemOrgs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemOrgs", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).ListFilesystemOrgs), arg0, arg1)
}

// PingPrivate mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) PingPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) PingPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).PingPrivate), arg0, arg1)
}

// ScheduleBucket mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) ScheduleBucket(arg0 context.Context, arg1 *BucketScheduleRequest) (*BucketScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleBucket", arg0, arg1)
	ret0, _ := ret[0].(*BucketScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleBucket indicates an expected call of ScheduleBucket.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) ScheduleBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBucket", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).ScheduleBucket), arg0, arg1)
}

// ScheduleFile mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) ScheduleFile(arg0 context.Context, arg1 *FilesystemScheduleRequest) (*FilesystemScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleFile", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleFile indicates an expected call of ScheduleFile.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) ScheduleFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleFile", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).ScheduleFile), arg0, arg1)
}

// mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer mocks base method.
func (m *MockFilesystemSchedulerPrivateServiceServer) mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer.
func (mr *MockFilesystemSchedulerPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer", reflect.TypeOf((*MockFilesystemSchedulerPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer))
}

// MockUnsafeFilesystemSchedulerPrivateServiceServer is a mock of UnsafeFilesystemSchedulerPrivateServiceServer interface.
type MockUnsafeFilesystemSchedulerPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilesystemSchedulerPrivateServiceServerMockRecorder
}

// MockUnsafeFilesystemSchedulerPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeFilesystemSchedulerPrivateServiceServer.
type MockUnsafeFilesystemSchedulerPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeFilesystemSchedulerPrivateServiceServer
}

// NewMockUnsafeFilesystemSchedulerPrivateServiceServer creates a new mock instance.
func NewMockUnsafeFilesystemSchedulerPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeFilesystemSchedulerPrivateServiceServer {
	mock := &MockUnsafeFilesystemSchedulerPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilesystemSchedulerPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilesystemSchedulerPrivateServiceServer) EXPECT() *MockUnsafeFilesystemSchedulerPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer mocks base method.
func (m *MockUnsafeFilesystemSchedulerPrivateServiceServer) mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer.
func (mr *MockUnsafeFilesystemSchedulerPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer", reflect.TypeOf((*MockUnsafeFilesystemSchedulerPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer))
}

// MockFilesystemSchedulerPrivateService_ListClustersServer is a mock of FilesystemSchedulerPrivateService_ListClustersServer interface.
type MockFilesystemSchedulerPrivateService_ListClustersServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder
}

// MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder is the mock recorder for MockFilesystemSchedulerPrivateService_ListClustersServer.
type MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder struct {
	mock *MockFilesystemSchedulerPrivateService_ListClustersServer
}

// NewMockFilesystemSchedulerPrivateService_ListClustersServer creates a new mock instance.
func NewMockFilesystemSchedulerPrivateService_ListClustersServer(ctrl *gomock.Controller) *MockFilesystemSchedulerPrivateService_ListClustersServer {
	mock := &MockFilesystemSchedulerPrivateService_ListClustersServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemSchedulerPrivateService_ListClustersServer) EXPECT() *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemSchedulerPrivateService_ListClustersServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersServer) Send(arg0 *FilesystemStorageClusters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemSchedulerPrivateService_ListClustersServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFilesystemSchedulerPrivateService_ListClustersServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFilesystemSchedulerPrivateService_ListClustersServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilesystemSchedulerPrivateService_ListClustersServer)(nil).SetTrailer), arg0)
}

// MockFilesystemUserPrivateServiceClient is a mock of FilesystemUserPrivateServiceClient interface.
type MockFilesystemUserPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemUserPrivateServiceClientMockRecorder
}

// MockFilesystemUserPrivateServiceClientMockRecorder is the mock recorder for MockFilesystemUserPrivateServiceClient.
type MockFilesystemUserPrivateServiceClientMockRecorder struct {
	mock *MockFilesystemUserPrivateServiceClient
}

// NewMockFilesystemUserPrivateServiceClient creates a new mock instance.
func NewMockFilesystemUserPrivateServiceClient(ctrl *gomock.Controller) *MockFilesystemUserPrivateServiceClient {
	mock := &MockFilesystemUserPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemUserPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemUserPrivateServiceClient) EXPECT() *MockFilesystemUserPrivateServiceClientMockRecorder {
	return m.recorder
}

// CreateOrGet mocks base method.
func (m *MockFilesystemUserPrivateServiceClient) CreateOrGet(ctx context.Context, in *FilesystemUserCreateOrGetRequest, opts ...grpc.CallOption) (*FilesystemUserResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrGet", varargs...)
	ret0, _ := ret[0].(*FilesystemUserResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrGet indicates an expected call of CreateOrGet.
func (mr *MockFilesystemUserPrivateServiceClientMockRecorder) CreateOrGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrGet", reflect.TypeOf((*MockFilesystemUserPrivateServiceClient)(nil).CreateOrGet), varargs...)
}

// CreateOrUpdate mocks base method.
func (m *MockFilesystemUserPrivateServiceClient) CreateOrUpdate(ctx context.Context, in *FilesystemUserCreateOrUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockFilesystemUserPrivateServiceClientMockRecorder) CreateOrUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockFilesystemUserPrivateServiceClient)(nil).CreateOrUpdate), varargs...)
}

// Delete mocks base method.
func (m *MockFilesystemUserPrivateServiceClient) Delete(ctx context.Context, in *FilesystemDeleteUserRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFilesystemUserPrivateServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFilesystemUserPrivateServiceClient)(nil).Delete), varargs...)
}

// PingFileUserPrivate mocks base method.
func (m *MockFilesystemUserPrivateServiceClient) PingFileUserPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingFileUserPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingFileUserPrivate indicates an expected call of PingFileUserPrivate.
func (mr *MockFilesystemUserPrivateServiceClientMockRecorder) PingFileUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingFileUserPrivate", reflect.TypeOf((*MockFilesystemUserPrivateServiceClient)(nil).PingFileUserPrivate), varargs...)
}

// MockFilesystemUserPrivateServiceServer is a mock of FilesystemUserPrivateServiceServer interface.
type MockFilesystemUserPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemUserPrivateServiceServerMockRecorder
}

// MockFilesystemUserPrivateServiceServerMockRecorder is the mock recorder for MockFilesystemUserPrivateServiceServer.
type MockFilesystemUserPrivateServiceServerMockRecorder struct {
	mock *MockFilesystemUserPrivateServiceServer
}

// NewMockFilesystemUserPrivateServiceServer creates a new mock instance.
func NewMockFilesystemUserPrivateServiceServer(ctrl *gomock.Controller) *MockFilesystemUserPrivateServiceServer {
	mock := &MockFilesystemUserPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemUserPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemUserPrivateServiceServer) EXPECT() *MockFilesystemUserPrivateServiceServerMockRecorder {
	return m.recorder
}

// CreateOrGet mocks base method.
func (m *MockFilesystemUserPrivateServiceServer) CreateOrGet(arg0 context.Context, arg1 *FilesystemUserCreateOrGetRequest) (*FilesystemUserResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrGet", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemUserResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrGet indicates an expected call of CreateOrGet.
func (mr *MockFilesystemUserPrivateServiceServerMockRecorder) CreateOrGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrGet", reflect.TypeOf((*MockFilesystemUserPrivateServiceServer)(nil).CreateOrGet), arg0, arg1)
}

// CreateOrUpdate mocks base method.
func (m *MockFilesystemUserPrivateServiceServer) CreateOrUpdate(arg0 context.Context, arg1 *FilesystemUserCreateOrUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockFilesystemUserPrivateServiceServerMockRecorder) CreateOrUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockFilesystemUserPrivateServiceServer)(nil).CreateOrUpdate), arg0, arg1)
}

// Delete mocks base method.
func (m *MockFilesystemUserPrivateServiceServer) Delete(arg0 context.Context, arg1 *FilesystemDeleteUserRequestPrivate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFilesystemUserPrivateServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFilesystemUserPrivateServiceServer)(nil).Delete), arg0, arg1)
}

// PingFileUserPrivate mocks base method.
func (m *MockFilesystemUserPrivateServiceServer) PingFileUserPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingFileUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingFileUserPrivate indicates an expected call of PingFileUserPrivate.
func (mr *MockFilesystemUserPrivateServiceServerMockRecorder) PingFileUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingFileUserPrivate", reflect.TypeOf((*MockFilesystemUserPrivateServiceServer)(nil).PingFileUserPrivate), arg0, arg1)
}

// mustEmbedUnimplementedFilesystemUserPrivateServiceServer mocks base method.
func (m *MockFilesystemUserPrivateServiceServer) mustEmbedUnimplementedFilesystemUserPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemUserPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemUserPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemUserPrivateServiceServer.
func (mr *MockFilesystemUserPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemUserPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemUserPrivateServiceServer", reflect.TypeOf((*MockFilesystemUserPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemUserPrivateServiceServer))
}

// MockUnsafeFilesystemUserPrivateServiceServer is a mock of UnsafeFilesystemUserPrivateServiceServer interface.
type MockUnsafeFilesystemUserPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilesystemUserPrivateServiceServerMockRecorder
}

// MockUnsafeFilesystemUserPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeFilesystemUserPrivateServiceServer.
type MockUnsafeFilesystemUserPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeFilesystemUserPrivateServiceServer
}

// NewMockUnsafeFilesystemUserPrivateServiceServer creates a new mock instance.
func NewMockUnsafeFilesystemUserPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeFilesystemUserPrivateServiceServer {
	mock := &MockUnsafeFilesystemUserPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilesystemUserPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilesystemUserPrivateServiceServer) EXPECT() *MockUnsafeFilesystemUserPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilesystemUserPrivateServiceServer mocks base method.
func (m *MockUnsafeFilesystemUserPrivateServiceServer) mustEmbedUnimplementedFilesystemUserPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemUserPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemUserPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemUserPrivateServiceServer.
func (mr *MockUnsafeFilesystemUserPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemUserPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemUserPrivateServiceServer", reflect.TypeOf((*MockUnsafeFilesystemUserPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemUserPrivateServiceServer))
}

// MockFilesystemStorageClusterPrivateServiceClient is a mock of FilesystemStorageClusterPrivateServiceClient interface.
type MockFilesystemStorageClusterPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemStorageClusterPrivateServiceClientMockRecorder
}

// MockFilesystemStorageClusterPrivateServiceClientMockRecorder is the mock recorder for MockFilesystemStorageClusterPrivateServiceClient.
type MockFilesystemStorageClusterPrivateServiceClientMockRecorder struct {
	mock *MockFilesystemStorageClusterPrivateServiceClient
}

// NewMockFilesystemStorageClusterPrivateServiceClient creates a new mock instance.
func NewMockFilesystemStorageClusterPrivateServiceClient(ctrl *gomock.Controller) *MockFilesystemStorageClusterPrivateServiceClient {
	mock := &MockFilesystemStorageClusterPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemStorageClusterPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemStorageClusterPrivateServiceClient) EXPECT() *MockFilesystemStorageClusterPrivateServiceClientMockRecorder {
	return m.recorder
}

// DeRegisterAgent mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceClient) DeRegisterAgent(ctx context.Context, in *DeRegisterAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeRegisterAgent", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeRegisterAgent indicates an expected call of DeRegisterAgent.
func (mr *MockFilesystemStorageClusterPrivateServiceClientMockRecorder) DeRegisterAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeRegisterAgent", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceClient)(nil).DeRegisterAgent), varargs...)
}

// GetRegisteredAgent mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceClient) GetRegisteredAgent(ctx context.Context, in *GetRegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisteredAgent", varargs...)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredAgent indicates an expected call of GetRegisteredAgent.
func (mr *MockFilesystemStorageClusterPrivateServiceClientMockRecorder) GetRegisteredAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredAgent", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceClient)(nil).GetRegisteredAgent), varargs...)
}

// ListClusters mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceClient) ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (FilesystemStorageClusterPrivateService_ListClustersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(FilesystemStorageClusterPrivateService_ListClustersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockFilesystemStorageClusterPrivateServiceClientMockRecorder) ListClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceClient)(nil).ListClusters), varargs...)
}

// ListRegisteredAgents mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceClient) ListRegisteredAgents(ctx context.Context, in *ListRegisteredAgentRequest, opts ...grpc.CallOption) (FilesystemStorageClusterPrivateService_ListRegisteredAgentsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegisteredAgents", varargs...)
	ret0, _ := ret[0].(FilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredAgents indicates an expected call of ListRegisteredAgents.
func (mr *MockFilesystemStorageClusterPrivateServiceClientMockRecorder) ListRegisteredAgents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredAgents", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceClient)(nil).ListRegisteredAgents), varargs...)
}

// PingFilesystemClusterPrivate mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceClient) PingFilesystemClusterPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingFilesystemClusterPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingFilesystemClusterPrivate indicates an expected call of PingFilesystemClusterPrivate.
func (mr *MockFilesystemStorageClusterPrivateServiceClientMockRecorder) PingFilesystemClusterPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingFilesystemClusterPrivate", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceClient)(nil).PingFilesystemClusterPrivate), varargs...)
}

// RegisterAgent mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAgent", varargs...)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAgent indicates an expected call of RegisterAgent.
func (mr *MockFilesystemStorageClusterPrivateServiceClientMockRecorder) RegisterAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgent", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceClient)(nil).RegisterAgent), varargs...)
}

// MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient is a mock of FilesystemStorageClusterPrivateService_ListRegisteredAgentsClient interface.
type MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder
}

// MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder is the mock recorder for MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient.
type MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder struct {
	mock *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient
}

// NewMockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient creates a new mock instance.
func NewMockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient(ctrl *gomock.Controller) *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient {
	mock := &MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) EXPECT() *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) Recv() (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsClient)(nil).Trailer))
}

// MockFilesystemStorageClusterPrivateService_ListClustersClient is a mock of FilesystemStorageClusterPrivateService_ListClustersClient interface.
type MockFilesystemStorageClusterPrivateService_ListClustersClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder
}

// MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder is the mock recorder for MockFilesystemStorageClusterPrivateService_ListClustersClient.
type MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder struct {
	mock *MockFilesystemStorageClusterPrivateService_ListClustersClient
}

// NewMockFilesystemStorageClusterPrivateService_ListClustersClient creates a new mock instance.
func NewMockFilesystemStorageClusterPrivateService_ListClustersClient(ctrl *gomock.Controller) *MockFilesystemStorageClusterPrivateService_ListClustersClient {
	mock := &MockFilesystemStorageClusterPrivateService_ListClustersClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersClient) EXPECT() *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersClient) Recv() (*FilesystemStorageClusters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*FilesystemStorageClusters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListClustersClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListClustersClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersClient)(nil).Trailer))
}

// MockFilesystemStorageClusterPrivateServiceServer is a mock of FilesystemStorageClusterPrivateServiceServer interface.
type MockFilesystemStorageClusterPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemStorageClusterPrivateServiceServerMockRecorder
}

// MockFilesystemStorageClusterPrivateServiceServerMockRecorder is the mock recorder for MockFilesystemStorageClusterPrivateServiceServer.
type MockFilesystemStorageClusterPrivateServiceServerMockRecorder struct {
	mock *MockFilesystemStorageClusterPrivateServiceServer
}

// NewMockFilesystemStorageClusterPrivateServiceServer creates a new mock instance.
func NewMockFilesystemStorageClusterPrivateServiceServer(ctrl *gomock.Controller) *MockFilesystemStorageClusterPrivateServiceServer {
	mock := &MockFilesystemStorageClusterPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemStorageClusterPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemStorageClusterPrivateServiceServer) EXPECT() *MockFilesystemStorageClusterPrivateServiceServerMockRecorder {
	return m.recorder
}

// DeRegisterAgent mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceServer) DeRegisterAgent(arg0 context.Context, arg1 *DeRegisterAgentRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeRegisterAgent", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeRegisterAgent indicates an expected call of DeRegisterAgent.
func (mr *MockFilesystemStorageClusterPrivateServiceServerMockRecorder) DeRegisterAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeRegisterAgent", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceServer)(nil).DeRegisterAgent), arg0, arg1)
}

// GetRegisteredAgent mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceServer) GetRegisteredAgent(arg0 context.Context, arg1 *GetRegisterAgentRequest) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredAgent", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredAgent indicates an expected call of GetRegisteredAgent.
func (mr *MockFilesystemStorageClusterPrivateServiceServerMockRecorder) GetRegisteredAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredAgent", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceServer)(nil).GetRegisteredAgent), arg0, arg1)
}

// ListClusters mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceServer) ListClusters(arg0 *ListClusterRequest, arg1 FilesystemStorageClusterPrivateService_ListClustersServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockFilesystemStorageClusterPrivateServiceServerMockRecorder) ListClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceServer)(nil).ListClusters), arg0, arg1)
}

// ListRegisteredAgents mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceServer) ListRegisteredAgents(arg0 *ListRegisteredAgentRequest, arg1 FilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredAgents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegisteredAgents indicates an expected call of ListRegisteredAgents.
func (mr *MockFilesystemStorageClusterPrivateServiceServerMockRecorder) ListRegisteredAgents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredAgents", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceServer)(nil).ListRegisteredAgents), arg0, arg1)
}

// PingFilesystemClusterPrivate mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceServer) PingFilesystemClusterPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingFilesystemClusterPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingFilesystemClusterPrivate indicates an expected call of PingFilesystemClusterPrivate.
func (mr *MockFilesystemStorageClusterPrivateServiceServerMockRecorder) PingFilesystemClusterPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingFilesystemClusterPrivate", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceServer)(nil).PingFilesystemClusterPrivate), arg0, arg1)
}

// RegisterAgent mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceServer) RegisterAgent(arg0 context.Context, arg1 *RegisterAgentRequest) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgent", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAgent indicates an expected call of RegisterAgent.
func (mr *MockFilesystemStorageClusterPrivateServiceServerMockRecorder) RegisterAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgent", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceServer)(nil).RegisterAgent), arg0, arg1)
}

// mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer mocks base method.
func (m *MockFilesystemStorageClusterPrivateServiceServer) mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer.
func (mr *MockFilesystemStorageClusterPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer", reflect.TypeOf((*MockFilesystemStorageClusterPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer))
}

// MockUnsafeFilesystemStorageClusterPrivateServiceServer is a mock of UnsafeFilesystemStorageClusterPrivateServiceServer interface.
type MockUnsafeFilesystemStorageClusterPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilesystemStorageClusterPrivateServiceServerMockRecorder
}

// MockUnsafeFilesystemStorageClusterPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeFilesystemStorageClusterPrivateServiceServer.
type MockUnsafeFilesystemStorageClusterPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeFilesystemStorageClusterPrivateServiceServer
}

// NewMockUnsafeFilesystemStorageClusterPrivateServiceServer creates a new mock instance.
func NewMockUnsafeFilesystemStorageClusterPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeFilesystemStorageClusterPrivateServiceServer {
	mock := &MockUnsafeFilesystemStorageClusterPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilesystemStorageClusterPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilesystemStorageClusterPrivateServiceServer) EXPECT() *MockUnsafeFilesystemStorageClusterPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer mocks base method.
func (m *MockUnsafeFilesystemStorageClusterPrivateServiceServer) mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer.
func (mr *MockUnsafeFilesystemStorageClusterPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer", reflect.TypeOf((*MockUnsafeFilesystemStorageClusterPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer))
}

// MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer is a mock of FilesystemStorageClusterPrivateService_ListRegisteredAgentsServer interface.
type MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder
}

// MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder is the mock recorder for MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer.
type MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder struct {
	mock *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer
}

// NewMockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer creates a new mock instance.
func NewMockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer(ctrl *gomock.Controller) *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer {
	mock := &MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) EXPECT() *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) Send(arg0 *FilesystemAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListRegisteredAgentsServer)(nil).SetTrailer), arg0)
}

// MockFilesystemStorageClusterPrivateService_ListClustersServer is a mock of FilesystemStorageClusterPrivateService_ListClustersServer interface.
type MockFilesystemStorageClusterPrivateService_ListClustersServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder
}

// MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder is the mock recorder for MockFilesystemStorageClusterPrivateService_ListClustersServer.
type MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder struct {
	mock *MockFilesystemStorageClusterPrivateService_ListClustersServer
}

// NewMockFilesystemStorageClusterPrivateService_ListClustersServer creates a new mock instance.
func NewMockFilesystemStorageClusterPrivateService_ListClustersServer(ctrl *gomock.Controller) *MockFilesystemStorageClusterPrivateService_ListClustersServer {
	mock := &MockFilesystemStorageClusterPrivateService_ListClustersServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersServer) EXPECT() *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListClustersServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersServer) Send(arg0 *FilesystemStorageClusters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFilesystemStorageClusterPrivateService_ListClustersServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFilesystemStorageClusterPrivateService_ListClustersServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFilesystemStorageClusterPrivateService_ListClustersServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilesystemStorageClusterPrivateService_ListClustersServer)(nil).SetTrailer), arg0)
}

// MockWekaStatefulAgentPrivateServiceClient is a mock of WekaStatefulAgentPrivateServiceClient interface.
type MockWekaStatefulAgentPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWekaStatefulAgentPrivateServiceClientMockRecorder
}

// MockWekaStatefulAgentPrivateServiceClientMockRecorder is the mock recorder for MockWekaStatefulAgentPrivateServiceClient.
type MockWekaStatefulAgentPrivateServiceClientMockRecorder struct {
	mock *MockWekaStatefulAgentPrivateServiceClient
}

// NewMockWekaStatefulAgentPrivateServiceClient creates a new mock instance.
func NewMockWekaStatefulAgentPrivateServiceClient(ctrl *gomock.Controller) *MockWekaStatefulAgentPrivateServiceClient {
	mock := &MockWekaStatefulAgentPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockWekaStatefulAgentPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWekaStatefulAgentPrivateServiceClient) EXPECT() *MockWekaStatefulAgentPrivateServiceClientMockRecorder {
	return m.recorder
}

// DeRegisterAgent mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceClient) DeRegisterAgent(ctx context.Context, in *DeRegisterAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeRegisterAgent", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeRegisterAgent indicates an expected call of DeRegisterAgent.
func (mr *MockWekaStatefulAgentPrivateServiceClientMockRecorder) DeRegisterAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeRegisterAgent", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceClient)(nil).DeRegisterAgent), varargs...)
}

// GetRegisteredAgent mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceClient) GetRegisteredAgent(ctx context.Context, in *GetRegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisteredAgent", varargs...)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredAgent indicates an expected call of GetRegisteredAgent.
func (mr *MockWekaStatefulAgentPrivateServiceClientMockRecorder) GetRegisteredAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredAgent", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceClient)(nil).GetRegisteredAgent), varargs...)
}

// ListRegisteredAgents mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceClient) ListRegisteredAgents(ctx context.Context, in *ListRegisteredAgentRequest, opts ...grpc.CallOption) (WekaStatefulAgentPrivateService_ListRegisteredAgentsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegisteredAgents", varargs...)
	ret0, _ := ret[0].(WekaStatefulAgentPrivateService_ListRegisteredAgentsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredAgents indicates an expected call of ListRegisteredAgents.
func (mr *MockWekaStatefulAgentPrivateServiceClientMockRecorder) ListRegisteredAgents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredAgents", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceClient)(nil).ListRegisteredAgents), varargs...)
}

// PingWekaStatefulAgentPrivate mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceClient) PingWekaStatefulAgentPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingWekaStatefulAgentPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingWekaStatefulAgentPrivate indicates an expected call of PingWekaStatefulAgentPrivate.
func (mr *MockWekaStatefulAgentPrivateServiceClientMockRecorder) PingWekaStatefulAgentPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingWekaStatefulAgentPrivate", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceClient)(nil).PingWekaStatefulAgentPrivate), varargs...)
}

// RegisterAgent mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAgent", varargs...)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAgent indicates an expected call of RegisterAgent.
func (mr *MockWekaStatefulAgentPrivateServiceClientMockRecorder) RegisterAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgent", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceClient)(nil).RegisterAgent), varargs...)
}

// MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient is a mock of WekaStatefulAgentPrivateService_ListRegisteredAgentsClient interface.
type MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder
}

// MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder is the mock recorder for MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient.
type MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder struct {
	mock *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient
}

// NewMockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient creates a new mock instance.
func NewMockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient(ctrl *gomock.Controller) *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient {
	mock := &MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient{ctrl: ctrl}
	mock.recorder = &MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) EXPECT() *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) Recv() (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsClient)(nil).Trailer))
}

// MockWekaStatefulAgentPrivateServiceServer is a mock of WekaStatefulAgentPrivateServiceServer interface.
type MockWekaStatefulAgentPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWekaStatefulAgentPrivateServiceServerMockRecorder
}

// MockWekaStatefulAgentPrivateServiceServerMockRecorder is the mock recorder for MockWekaStatefulAgentPrivateServiceServer.
type MockWekaStatefulAgentPrivateServiceServerMockRecorder struct {
	mock *MockWekaStatefulAgentPrivateServiceServer
}

// NewMockWekaStatefulAgentPrivateServiceServer creates a new mock instance.
func NewMockWekaStatefulAgentPrivateServiceServer(ctrl *gomock.Controller) *MockWekaStatefulAgentPrivateServiceServer {
	mock := &MockWekaStatefulAgentPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockWekaStatefulAgentPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWekaStatefulAgentPrivateServiceServer) EXPECT() *MockWekaStatefulAgentPrivateServiceServerMockRecorder {
	return m.recorder
}

// DeRegisterAgent mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceServer) DeRegisterAgent(arg0 context.Context, arg1 *DeRegisterAgentRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeRegisterAgent", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeRegisterAgent indicates an expected call of DeRegisterAgent.
func (mr *MockWekaStatefulAgentPrivateServiceServerMockRecorder) DeRegisterAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeRegisterAgent", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceServer)(nil).DeRegisterAgent), arg0, arg1)
}

// GetRegisteredAgent mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceServer) GetRegisteredAgent(arg0 context.Context, arg1 *GetRegisterAgentRequest) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredAgent", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredAgent indicates an expected call of GetRegisteredAgent.
func (mr *MockWekaStatefulAgentPrivateServiceServerMockRecorder) GetRegisteredAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredAgent", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceServer)(nil).GetRegisteredAgent), arg0, arg1)
}

// ListRegisteredAgents mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceServer) ListRegisteredAgents(arg0 *ListRegisteredAgentRequest, arg1 WekaStatefulAgentPrivateService_ListRegisteredAgentsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredAgents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegisteredAgents indicates an expected call of ListRegisteredAgents.
func (mr *MockWekaStatefulAgentPrivateServiceServerMockRecorder) ListRegisteredAgents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredAgents", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceServer)(nil).ListRegisteredAgents), arg0, arg1)
}

// PingWekaStatefulAgentPrivate mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceServer) PingWekaStatefulAgentPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingWekaStatefulAgentPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingWekaStatefulAgentPrivate indicates an expected call of PingWekaStatefulAgentPrivate.
func (mr *MockWekaStatefulAgentPrivateServiceServerMockRecorder) PingWekaStatefulAgentPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingWekaStatefulAgentPrivate", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceServer)(nil).PingWekaStatefulAgentPrivate), arg0, arg1)
}

// RegisterAgent mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceServer) RegisterAgent(arg0 context.Context, arg1 *RegisterAgentRequest) (*FilesystemAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgent", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAgent indicates an expected call of RegisterAgent.
func (mr *MockWekaStatefulAgentPrivateServiceServerMockRecorder) RegisterAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgent", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceServer)(nil).RegisterAgent), arg0, arg1)
}

// mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer mocks base method.
func (m *MockWekaStatefulAgentPrivateServiceServer) mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer")
}

// mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer indicates an expected call of mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer.
func (mr *MockWekaStatefulAgentPrivateServiceServerMockRecorder) mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer", reflect.TypeOf((*MockWekaStatefulAgentPrivateServiceServer)(nil).mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer))
}

// MockUnsafeWekaStatefulAgentPrivateServiceServer is a mock of UnsafeWekaStatefulAgentPrivateServiceServer interface.
type MockUnsafeWekaStatefulAgentPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWekaStatefulAgentPrivateServiceServerMockRecorder
}

// MockUnsafeWekaStatefulAgentPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeWekaStatefulAgentPrivateServiceServer.
type MockUnsafeWekaStatefulAgentPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeWekaStatefulAgentPrivateServiceServer
}

// NewMockUnsafeWekaStatefulAgentPrivateServiceServer creates a new mock instance.
func NewMockUnsafeWekaStatefulAgentPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeWekaStatefulAgentPrivateServiceServer {
	mock := &MockUnsafeWekaStatefulAgentPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWekaStatefulAgentPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWekaStatefulAgentPrivateServiceServer) EXPECT() *MockUnsafeWekaStatefulAgentPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer mocks base method.
func (m *MockUnsafeWekaStatefulAgentPrivateServiceServer) mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer")
}

// mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer indicates an expected call of mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer.
func (mr *MockUnsafeWekaStatefulAgentPrivateServiceServerMockRecorder) mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer", reflect.TypeOf((*MockUnsafeWekaStatefulAgentPrivateServiceServer)(nil).mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer))
}

// MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer is a mock of WekaStatefulAgentPrivateService_ListRegisteredAgentsServer interface.
type MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer struct {
	ctrl     *gomock.Controller
	recorder *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder
}

// MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder is the mock recorder for MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer.
type MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder struct {
	mock *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer
}

// NewMockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer creates a new mock instance.
func NewMockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer(ctrl *gomock.Controller) *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer {
	mock := &MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer{ctrl: ctrl}
	mock.recorder = &MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) EXPECT() *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) Send(arg0 *FilesystemAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWekaStatefulAgentPrivateService_ListRegisteredAgentsServer)(nil).SetTrailer), arg0)
}

// MockBucketUserPrivateServiceClient is a mock of BucketUserPrivateServiceClient interface.
type MockBucketUserPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBucketUserPrivateServiceClientMockRecorder
}

// MockBucketUserPrivateServiceClientMockRecorder is the mock recorder for MockBucketUserPrivateServiceClient.
type MockBucketUserPrivateServiceClientMockRecorder struct {
	mock *MockBucketUserPrivateServiceClient
}

// NewMockBucketUserPrivateServiceClient creates a new mock instance.
func NewMockBucketUserPrivateServiceClient(ctrl *gomock.Controller) *MockBucketUserPrivateServiceClient {
	mock := &MockBucketUserPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockBucketUserPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketUserPrivateServiceClient) EXPECT() *MockBucketUserPrivateServiceClientMockRecorder {
	return m.recorder
}

// CreateBucketUser mocks base method.
func (m *MockBucketUserPrivateServiceClient) CreateBucketUser(ctx context.Context, in *CreateBucketUserParams, opts ...grpc.CallOption) (*BucketPrincipal, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucketUser", varargs...)
	ret0, _ := ret[0].(*BucketPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketUser indicates an expected call of CreateBucketUser.
func (mr *MockBucketUserPrivateServiceClientMockRecorder) CreateBucketUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketUser", reflect.TypeOf((*MockBucketUserPrivateServiceClient)(nil).CreateBucketUser), varargs...)
}

// DeleteBucketUser mocks base method.
func (m *MockBucketUserPrivateServiceClient) DeleteBucketUser(ctx context.Context, in *DeleteBucketUserParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketUser indicates an expected call of DeleteBucketUser.
func (mr *MockBucketUserPrivateServiceClientMockRecorder) DeleteBucketUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketUser", reflect.TypeOf((*MockBucketUserPrivateServiceClient)(nil).DeleteBucketUser), varargs...)
}

// GetBucketCapacity mocks base method.
func (m *MockBucketUserPrivateServiceClient) GetBucketCapacity(ctx context.Context, in *BucketFilter, opts ...grpc.CallOption) (*BucketCapacity, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketCapacity", varargs...)
	ret0, _ := ret[0].(*BucketCapacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketCapacity indicates an expected call of GetBucketCapacity.
func (mr *MockBucketUserPrivateServiceClientMockRecorder) GetBucketCapacity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketCapacity", reflect.TypeOf((*MockBucketUserPrivateServiceClient)(nil).GetBucketCapacity), varargs...)
}

// PingBucketUserPrivate mocks base method.
func (m *MockBucketUserPrivateServiceClient) PingBucketUserPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingBucketUserPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingBucketUserPrivate indicates an expected call of PingBucketUserPrivate.
func (mr *MockBucketUserPrivateServiceClientMockRecorder) PingBucketUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingBucketUserPrivate", reflect.TypeOf((*MockBucketUserPrivateServiceClient)(nil).PingBucketUserPrivate), varargs...)
}

// UpdateBucketUserCredentials mocks base method.
func (m *MockBucketUserPrivateServiceClient) UpdateBucketUserCredentials(ctx context.Context, in *UpdateBucketUserCredsParams, opts ...grpc.CallOption) (*BucketPrincipal, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBucketUserCredentials", varargs...)
	ret0, _ := ret[0].(*BucketPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketUserCredentials indicates an expected call of UpdateBucketUserCredentials.
func (mr *MockBucketUserPrivateServiceClientMockRecorder) UpdateBucketUserCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketUserCredentials", reflect.TypeOf((*MockBucketUserPrivateServiceClient)(nil).UpdateBucketUserCredentials), varargs...)
}

// UpdateBucketUserPolicy mocks base method.
func (m *MockBucketUserPrivateServiceClient) UpdateBucketUserPolicy(ctx context.Context, in *UpdateBucketUserPolicyParams, opts ...grpc.CallOption) (*BucketPrincipal, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBucketUserPolicy", varargs...)
	ret0, _ := ret[0].(*BucketPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketUserPolicy indicates an expected call of UpdateBucketUserPolicy.
func (mr *MockBucketUserPrivateServiceClientMockRecorder) UpdateBucketUserPolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketUserPolicy", reflect.TypeOf((*MockBucketUserPrivateServiceClient)(nil).UpdateBucketUserPolicy), varargs...)
}

// MockBucketUserPrivateServiceServer is a mock of BucketUserPrivateServiceServer interface.
type MockBucketUserPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBucketUserPrivateServiceServerMockRecorder
}

// MockBucketUserPrivateServiceServerMockRecorder is the mock recorder for MockBucketUserPrivateServiceServer.
type MockBucketUserPrivateServiceServerMockRecorder struct {
	mock *MockBucketUserPrivateServiceServer
}

// NewMockBucketUserPrivateServiceServer creates a new mock instance.
func NewMockBucketUserPrivateServiceServer(ctrl *gomock.Controller) *MockBucketUserPrivateServiceServer {
	mock := &MockBucketUserPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockBucketUserPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketUserPrivateServiceServer) EXPECT() *MockBucketUserPrivateServiceServerMockRecorder {
	return m.recorder
}

// CreateBucketUser mocks base method.
func (m *MockBucketUserPrivateServiceServer) CreateBucketUser(arg0 context.Context, arg1 *CreateBucketUserParams) (*BucketPrincipal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketUser", arg0, arg1)
	ret0, _ := ret[0].(*BucketPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketUser indicates an expected call of CreateBucketUser.
func (mr *MockBucketUserPrivateServiceServerMockRecorder) CreateBucketUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketUser", reflect.TypeOf((*MockBucketUserPrivateServiceServer)(nil).CreateBucketUser), arg0, arg1)
}

// DeleteBucketUser mocks base method.
func (m *MockBucketUserPrivateServiceServer) DeleteBucketUser(arg0 context.Context, arg1 *DeleteBucketUserParams) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketUser", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketUser indicates an expected call of DeleteBucketUser.
func (mr *MockBucketUserPrivateServiceServerMockRecorder) DeleteBucketUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketUser", reflect.TypeOf((*MockBucketUserPrivateServiceServer)(nil).DeleteBucketUser), arg0, arg1)
}

// GetBucketCapacity mocks base method.
func (m *MockBucketUserPrivateServiceServer) GetBucketCapacity(arg0 context.Context, arg1 *BucketFilter) (*BucketCapacity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketCapacity", arg0, arg1)
	ret0, _ := ret[0].(*BucketCapacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketCapacity indicates an expected call of GetBucketCapacity.
func (mr *MockBucketUserPrivateServiceServerMockRecorder) GetBucketCapacity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketCapacity", reflect.TypeOf((*MockBucketUserPrivateServiceServer)(nil).GetBucketCapacity), arg0, arg1)
}

// PingBucketUserPrivate mocks base method.
func (m *MockBucketUserPrivateServiceServer) PingBucketUserPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingBucketUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingBucketUserPrivate indicates an expected call of PingBucketUserPrivate.
func (mr *MockBucketUserPrivateServiceServerMockRecorder) PingBucketUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingBucketUserPrivate", reflect.TypeOf((*MockBucketUserPrivateServiceServer)(nil).PingBucketUserPrivate), arg0, arg1)
}

// UpdateBucketUserCredentials mocks base method.
func (m *MockBucketUserPrivateServiceServer) UpdateBucketUserCredentials(arg0 context.Context, arg1 *UpdateBucketUserCredsParams) (*BucketPrincipal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBucketUserCredentials", arg0, arg1)
	ret0, _ := ret[0].(*BucketPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketUserCredentials indicates an expected call of UpdateBucketUserCredentials.
func (mr *MockBucketUserPrivateServiceServerMockRecorder) UpdateBucketUserCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketUserCredentials", reflect.TypeOf((*MockBucketUserPrivateServiceServer)(nil).UpdateBucketUserCredentials), arg0, arg1)
}

// UpdateBucketUserPolicy mocks base method.
func (m *MockBucketUserPrivateServiceServer) UpdateBucketUserPolicy(arg0 context.Context, arg1 *UpdateBucketUserPolicyParams) (*BucketPrincipal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBucketUserPolicy", arg0, arg1)
	ret0, _ := ret[0].(*BucketPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketUserPolicy indicates an expected call of UpdateBucketUserPolicy.
func (mr *MockBucketUserPrivateServiceServerMockRecorder) UpdateBucketUserPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketUserPolicy", reflect.TypeOf((*MockBucketUserPrivateServiceServer)(nil).UpdateBucketUserPolicy), arg0, arg1)
}

// mustEmbedUnimplementedBucketUserPrivateServiceServer mocks base method.
func (m *MockBucketUserPrivateServiceServer) mustEmbedUnimplementedBucketUserPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBucketUserPrivateServiceServer")
}

// mustEmbedUnimplementedBucketUserPrivateServiceServer indicates an expected call of mustEmbedUnimplementedBucketUserPrivateServiceServer.
func (mr *MockBucketUserPrivateServiceServerMockRecorder) mustEmbedUnimplementedBucketUserPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBucketUserPrivateServiceServer", reflect.TypeOf((*MockBucketUserPrivateServiceServer)(nil).mustEmbedUnimplementedBucketUserPrivateServiceServer))
}

// MockUnsafeBucketUserPrivateServiceServer is a mock of UnsafeBucketUserPrivateServiceServer interface.
type MockUnsafeBucketUserPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBucketUserPrivateServiceServerMockRecorder
}

// MockUnsafeBucketUserPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeBucketUserPrivateServiceServer.
type MockUnsafeBucketUserPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeBucketUserPrivateServiceServer
}

// NewMockUnsafeBucketUserPrivateServiceServer creates a new mock instance.
func NewMockUnsafeBucketUserPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeBucketUserPrivateServiceServer {
	mock := &MockUnsafeBucketUserPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBucketUserPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBucketUserPrivateServiceServer) EXPECT() *MockUnsafeBucketUserPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBucketUserPrivateServiceServer mocks base method.
func (m *MockUnsafeBucketUserPrivateServiceServer) mustEmbedUnimplementedBucketUserPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBucketUserPrivateServiceServer")
}

// mustEmbedUnimplementedBucketUserPrivateServiceServer indicates an expected call of mustEmbedUnimplementedBucketUserPrivateServiceServer.
func (mr *MockUnsafeBucketUserPrivateServiceServerMockRecorder) mustEmbedUnimplementedBucketUserPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBucketUserPrivateServiceServer", reflect.TypeOf((*MockUnsafeBucketUserPrivateServiceServer)(nil).mustEmbedUnimplementedBucketUserPrivateServiceServer))
}

// MockFilesystemOrgPrivateServiceClient is a mock of FilesystemOrgPrivateServiceClient interface.
type MockFilesystemOrgPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemOrgPrivateServiceClientMockRecorder
}

// MockFilesystemOrgPrivateServiceClientMockRecorder is the mock recorder for MockFilesystemOrgPrivateServiceClient.
type MockFilesystemOrgPrivateServiceClientMockRecorder struct {
	mock *MockFilesystemOrgPrivateServiceClient
}

// NewMockFilesystemOrgPrivateServiceClient creates a new mock instance.
func NewMockFilesystemOrgPrivateServiceClient(ctrl *gomock.Controller) *MockFilesystemOrgPrivateServiceClient {
	mock := &MockFilesystemOrgPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockFilesystemOrgPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemOrgPrivateServiceClient) EXPECT() *MockFilesystemOrgPrivateServiceClientMockRecorder {
	return m.recorder
}

// CreateFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceClient) CreateFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgCreateRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFilesystemOrgPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemOrgPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilesystemOrgPrivate indicates an expected call of CreateFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceClientMockRecorder) CreateFilesystemOrgPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceClient)(nil).CreateFilesystemOrgPrivate), varargs...)
}

// DeleteFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceClient) DeleteFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgDeleteRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFilesystemOrgPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilesystemOrgPrivate indicates an expected call of DeleteFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceClientMockRecorder) DeleteFilesystemOrgPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceClient)(nil).DeleteFilesystemOrgPrivate), varargs...)
}

// GetFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceClient) GetFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilesystemOrgPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemOrgPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemOrgPrivate indicates an expected call of GetFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceClientMockRecorder) GetFilesystemOrgPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceClient)(nil).GetFilesystemOrgPrivate), varargs...)
}

// ListFilesystemOrgsPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceClient) ListFilesystemOrgsPrivate(ctx context.Context, in *FilesystemOrgsListRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFilesystemOrgsPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemOrgsResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemOrgsPrivate indicates an expected call of ListFilesystemOrgsPrivate.
func (mr *MockFilesystemOrgPrivateServiceClientMockRecorder) ListFilesystemOrgsPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemOrgsPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceClient)(nil).ListFilesystemOrgsPrivate), varargs...)
}

// ListFilesystemsInOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceClient) ListFilesystemsInOrgPrivate(ctx context.Context, in *FilesystemsInOrgListRequestPrivate, opts ...grpc.CallOption) (*FilesystemsInOrgListResponsePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFilesystemsInOrgPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemsInOrgListResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemsInOrgPrivate indicates an expected call of ListFilesystemsInOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceClientMockRecorder) ListFilesystemsInOrgPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemsInOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceClient)(nil).ListFilesystemsInOrgPrivate), varargs...)
}

// UpdateFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceClient) UpdateFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgUpdateRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFilesystemOrgPrivate", varargs...)
	ret0, _ := ret[0].(*FilesystemOrgPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilesystemOrgPrivate indicates an expected call of UpdateFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceClientMockRecorder) UpdateFilesystemOrgPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceClient)(nil).UpdateFilesystemOrgPrivate), varargs...)
}

// MockFilesystemOrgPrivateServiceServer is a mock of FilesystemOrgPrivateServiceServer interface.
type MockFilesystemOrgPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemOrgPrivateServiceServerMockRecorder
}

// MockFilesystemOrgPrivateServiceServerMockRecorder is the mock recorder for MockFilesystemOrgPrivateServiceServer.
type MockFilesystemOrgPrivateServiceServerMockRecorder struct {
	mock *MockFilesystemOrgPrivateServiceServer
}

// NewMockFilesystemOrgPrivateServiceServer creates a new mock instance.
func NewMockFilesystemOrgPrivateServiceServer(ctrl *gomock.Controller) *MockFilesystemOrgPrivateServiceServer {
	mock := &MockFilesystemOrgPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockFilesystemOrgPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemOrgPrivateServiceServer) EXPECT() *MockFilesystemOrgPrivateServiceServerMockRecorder {
	return m.recorder
}

// CreateFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceServer) CreateFilesystemOrgPrivate(arg0 context.Context, arg1 *FilesystemOrgCreateRequestPrivate) (*FilesystemOrgPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilesystemOrgPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemOrgPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilesystemOrgPrivate indicates an expected call of CreateFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceServerMockRecorder) CreateFilesystemOrgPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceServer)(nil).CreateFilesystemOrgPrivate), arg0, arg1)
}

// DeleteFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceServer) DeleteFilesystemOrgPrivate(arg0 context.Context, arg1 *FilesystemOrgDeleteRequestPrivate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesystemOrgPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilesystemOrgPrivate indicates an expected call of DeleteFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceServerMockRecorder) DeleteFilesystemOrgPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceServer)(nil).DeleteFilesystemOrgPrivate), arg0, arg1)
}

// GetFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceServer) GetFilesystemOrgPrivate(arg0 context.Context, arg1 *FilesystemOrgGetRequestPrivate) (*FilesystemOrgPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemOrgPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemOrgPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemOrgPrivate indicates an expected call of GetFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceServerMockRecorder) GetFilesystemOrgPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceServer)(nil).GetFilesystemOrgPrivate), arg0, arg1)
}

// ListFilesystemOrgsPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceServer) ListFilesystemOrgsPrivate(arg0 context.Context, arg1 *FilesystemOrgsListRequestPrivate) (*FilesystemOrgsResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesystemOrgsPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemOrgsResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemOrgsPrivate indicates an expected call of ListFilesystemOrgsPrivate.
func (mr *MockFilesystemOrgPrivateServiceServerMockRecorder) ListFilesystemOrgsPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemOrgsPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceServer)(nil).ListFilesystemOrgsPrivate), arg0, arg1)
}

// ListFilesystemsInOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceServer) ListFilesystemsInOrgPrivate(arg0 context.Context, arg1 *FilesystemsInOrgListRequestPrivate) (*FilesystemsInOrgListResponsePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesystemsInOrgPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemsInOrgListResponsePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemsInOrgPrivate indicates an expected call of ListFilesystemsInOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceServerMockRecorder) ListFilesystemsInOrgPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemsInOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceServer)(nil).ListFilesystemsInOrgPrivate), arg0, arg1)
}

// UpdateFilesystemOrgPrivate mocks base method.
func (m *MockFilesystemOrgPrivateServiceServer) UpdateFilesystemOrgPrivate(arg0 context.Context, arg1 *FilesystemOrgUpdateRequestPrivate) (*FilesystemOrgPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilesystemOrgPrivate", arg0, arg1)
	ret0, _ := ret[0].(*FilesystemOrgPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilesystemOrgPrivate indicates an expected call of UpdateFilesystemOrgPrivate.
func (mr *MockFilesystemOrgPrivateServiceServerMockRecorder) UpdateFilesystemOrgPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilesystemOrgPrivate", reflect.TypeOf((*MockFilesystemOrgPrivateServiceServer)(nil).UpdateFilesystemOrgPrivate), arg0, arg1)
}

// mustEmbedUnimplementedFilesystemOrgPrivateServiceServer mocks base method.
func (m *MockFilesystemOrgPrivateServiceServer) mustEmbedUnimplementedFilesystemOrgPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemOrgPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemOrgPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemOrgPrivateServiceServer.
func (mr *MockFilesystemOrgPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemOrgPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemOrgPrivateServiceServer", reflect.TypeOf((*MockFilesystemOrgPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemOrgPrivateServiceServer))
}

// MockUnsafeFilesystemOrgPrivateServiceServer is a mock of UnsafeFilesystemOrgPrivateServiceServer interface.
type MockUnsafeFilesystemOrgPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFilesystemOrgPrivateServiceServerMockRecorder
}

// MockUnsafeFilesystemOrgPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeFilesystemOrgPrivateServiceServer.
type MockUnsafeFilesystemOrgPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeFilesystemOrgPrivateServiceServer
}

// NewMockUnsafeFilesystemOrgPrivateServiceServer creates a new mock instance.
func NewMockUnsafeFilesystemOrgPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeFilesystemOrgPrivateServiceServer {
	mock := &MockUnsafeFilesystemOrgPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFilesystemOrgPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFilesystemOrgPrivateServiceServer) EXPECT() *MockUnsafeFilesystemOrgPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFilesystemOrgPrivateServiceServer mocks base method.
func (m *MockUnsafeFilesystemOrgPrivateServiceServer) mustEmbedUnimplementedFilesystemOrgPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilesystemOrgPrivateServiceServer")
}

// mustEmbedUnimplementedFilesystemOrgPrivateServiceServer indicates an expected call of mustEmbedUnimplementedFilesystemOrgPrivateServiceServer.
func (mr *MockUnsafeFilesystemOrgPrivateServiceServerMockRecorder) mustEmbedUnimplementedFilesystemOrgPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilesystemOrgPrivateServiceServer", reflect.TypeOf((*MockUnsafeFilesystemOrgPrivateServiceServer)(nil).mustEmbedUnimplementedFilesystemOrgPrivateServiceServer))
}

// MockObjectStorageServicePrivateClient is a mock of ObjectStorageServicePrivateClient interface.
type MockObjectStorageServicePrivateClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivateClientMockRecorder
}

// MockObjectStorageServicePrivateClientMockRecorder is the mock recorder for MockObjectStorageServicePrivateClient.
type MockObjectStorageServicePrivateClientMockRecorder struct {
	mock *MockObjectStorageServicePrivateClient
}

// NewMockObjectStorageServicePrivateClient creates a new mock instance.
func NewMockObjectStorageServicePrivateClient(ctrl *gomock.Controller) *MockObjectStorageServicePrivateClient {
	mock := &MockObjectStorageServicePrivateClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivateClient) EXPECT() *MockObjectStorageServicePrivateClientMockRecorder {
	return m.recorder
}

// AddBucketSubnet mocks base method.
func (m *MockObjectStorageServicePrivateClient) AddBucketSubnet(ctx context.Context, in *VNetPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBucketSubnet", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBucketSubnet indicates an expected call of AddBucketSubnet.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) AddBucketSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucketSubnet", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).AddBucketSubnet), varargs...)
}

// CreateBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) CreateBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleCreatePrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucketLifecycleRulePrivate", varargs...)
	ret0, _ := ret[0].(*BucketLifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketLifecycleRulePrivate indicates an expected call of CreateBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) CreateBucketLifecycleRulePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).CreateBucketLifecycleRulePrivate), varargs...)
}

// CreateBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) CreateBucketPrivate(ctx context.Context, in *ObjectBucketCreatePrivateRequest, opts ...grpc.CallOption) (*ObjectBucketPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucketPrivate", varargs...)
	ret0, _ := ret[0].(*ObjectBucketPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketPrivate indicates an expected call of CreateBucketPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) CreateBucketPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).CreateBucketPrivate), varargs...)
}

// CreateObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) CreateObjectUserPrivate(ctx context.Context, in *CreateObjectUserPrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateObjectUserPrivate", varargs...)
	ret0, _ := ret[0].(*ObjectUserPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectUserPrivate indicates an expected call of CreateObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) CreateObjectUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).CreateObjectUserPrivate), varargs...)
}

// DeleteBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) DeleteBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketLifecycleRulePrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketLifecycleRulePrivate indicates an expected call of DeleteBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) DeleteBucketLifecycleRulePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).DeleteBucketLifecycleRulePrivate), varargs...)
}

// DeleteBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) DeleteBucketPrivate(ctx context.Context, in *ObjectBucketDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketPrivate indicates an expected call of DeleteBucketPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) DeleteBucketPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).DeleteBucketPrivate), varargs...)
}

// DeleteObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) DeleteObjectUserPrivate(ctx context.Context, in *ObjectUserDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjectUserPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectUserPrivate indicates an expected call of DeleteObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) DeleteObjectUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).DeleteObjectUserPrivate), varargs...)
}

// GetBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) GetBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleGetPrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketLifecycleRulePrivate", varargs...)
	ret0, _ := ret[0].(*BucketLifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLifecycleRulePrivate indicates an expected call of GetBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) GetBucketLifecycleRulePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).GetBucketLifecycleRulePrivate), varargs...)
}

// GetBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) GetBucketPrivate(ctx context.Context, in *ObjectBucketGetPrivateRequest, opts ...grpc.CallOption) (*ObjectBucketPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketPrivate", varargs...)
	ret0, _ := ret[0].(*ObjectBucketPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPrivate indicates an expected call of GetBucketPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) GetBucketPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).GetBucketPrivate), varargs...)
}

// GetBucketSubnetEvent mocks base method.
func (m *MockObjectStorageServicePrivateClient) GetBucketSubnetEvent(ctx context.Context, in *SubnetEventRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_GetBucketSubnetEventClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketSubnetEvent", varargs...)
	ret0, _ := ret[0].(ObjectStorageServicePrivate_GetBucketSubnetEventClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketSubnetEvent indicates an expected call of GetBucketSubnetEvent.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) GetBucketSubnetEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketSubnetEvent", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).GetBucketSubnetEvent), varargs...)
}

// GetObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) GetObjectUserPrivate(ctx context.Context, in *ObjectUserGetPrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectUserPrivate", varargs...)
	ret0, _ := ret[0].(*ObjectUserPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectUserPrivate indicates an expected call of GetObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) GetObjectUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).GetObjectUserPrivate), varargs...)
}

// PingPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) PingPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).PingPrivate), varargs...)
}

// RemoveBucketFinalizer mocks base method.
func (m *MockObjectStorageServicePrivateClient) RemoveBucketFinalizer(ctx context.Context, in *ObjectBucketRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBucketFinalizer", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBucketFinalizer indicates an expected call of RemoveBucketFinalizer.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) RemoveBucketFinalizer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucketFinalizer", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).RemoveBucketFinalizer), varargs...)
}

// RemoveBucketSubnet mocks base method.
func (m *MockObjectStorageServicePrivateClient) RemoveBucketSubnet(ctx context.Context, in *VNetReleaseSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBucketSubnet", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBucketSubnet indicates an expected call of RemoveBucketSubnet.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) RemoveBucketSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucketSubnet", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).RemoveBucketSubnet), varargs...)
}

// RemoveObjectUserFinalizer mocks base method.
func (m *MockObjectStorageServicePrivateClient) RemoveObjectUserFinalizer(ctx context.Context, in *ObjectUserRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveObjectUserFinalizer", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveObjectUserFinalizer indicates an expected call of RemoveObjectUserFinalizer.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) RemoveObjectUserFinalizer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObjectUserFinalizer", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).RemoveObjectUserFinalizer), varargs...)
}

// SearchBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) SearchBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleSearchPrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRuleSearchPrivateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchBucketLifecycleRulePrivate", varargs...)
	ret0, _ := ret[0].(*BucketLifecycleRuleSearchPrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBucketLifecycleRulePrivate indicates an expected call of SearchBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) SearchBucketLifecycleRulePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).SearchBucketLifecycleRulePrivate), varargs...)
}

// SearchBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) SearchBucketPrivate(ctx context.Context, in *ObjectBucketSearchPrivateRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_SearchBucketPrivateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchBucketPrivate", varargs...)
	ret0, _ := ret[0].(ObjectStorageServicePrivate_SearchBucketPrivateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBucketPrivate indicates an expected call of SearchBucketPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) SearchBucketPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).SearchBucketPrivate), varargs...)
}

// SearchObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) SearchObjectUserPrivate(ctx context.Context, in *ObjectUserSearchPrivateRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_SearchObjectUserPrivateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchObjectUserPrivate", varargs...)
	ret0, _ := ret[0].(ObjectStorageServicePrivate_SearchObjectUserPrivateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchObjectUserPrivate indicates an expected call of SearchObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) SearchObjectUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).SearchObjectUserPrivate), varargs...)
}

// UpdateBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) UpdateBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleUpdatePrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBucketLifecycleRulePrivate", varargs...)
	ret0, _ := ret[0].(*BucketLifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketLifecycleRulePrivate indicates an expected call of UpdateBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) UpdateBucketLifecycleRulePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).UpdateBucketLifecycleRulePrivate), varargs...)
}

// UpdateBucketStatus mocks base method.
func (m *MockObjectStorageServicePrivateClient) UpdateBucketStatus(ctx context.Context, in *ObjectBucketStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBucketStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketStatus indicates an expected call of UpdateBucketStatus.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) UpdateBucketStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketStatus", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).UpdateBucketStatus), varargs...)
}

// UpdateBucketSubnetStatus mocks base method.
func (m *MockObjectStorageServicePrivateClient) UpdateBucketSubnetStatus(ctx context.Context, in *BucketSubnetStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBucketSubnetStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketSubnetStatus indicates an expected call of UpdateBucketSubnetStatus.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) UpdateBucketSubnetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketSubnetStatus", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).UpdateBucketSubnetStatus), varargs...)
}

// UpdateObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateClient) UpdateObjectUserPrivate(ctx context.Context, in *ObjectUserUpdatePrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateObjectUserPrivate", varargs...)
	ret0, _ := ret[0].(*ObjectUserPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectUserPrivate indicates an expected call of UpdateObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) UpdateObjectUserPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).UpdateObjectUserPrivate), varargs...)
}

// UpdateObjectUserStatus mocks base method.
func (m *MockObjectStorageServicePrivateClient) UpdateObjectUserStatus(ctx context.Context, in *ObjectUserStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateObjectUserStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectUserStatus indicates an expected call of UpdateObjectUserStatus.
func (mr *MockObjectStorageServicePrivateClientMockRecorder) UpdateObjectUserStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectUserStatus", reflect.TypeOf((*MockObjectStorageServicePrivateClient)(nil).UpdateObjectUserStatus), varargs...)
}

// MockObjectStorageServicePrivate_SearchBucketPrivateClient is a mock of ObjectStorageServicePrivate_SearchBucketPrivateClient interface.
type MockObjectStorageServicePrivate_SearchBucketPrivateClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder
}

// MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder is the mock recorder for MockObjectStorageServicePrivate_SearchBucketPrivateClient.
type MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder struct {
	mock *MockObjectStorageServicePrivate_SearchBucketPrivateClient
}

// NewMockObjectStorageServicePrivate_SearchBucketPrivateClient creates a new mock instance.
func NewMockObjectStorageServicePrivate_SearchBucketPrivateClient(ctrl *gomock.Controller) *MockObjectStorageServicePrivate_SearchBucketPrivateClient {
	mock := &MockObjectStorageServicePrivate_SearchBucketPrivateClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateClient) EXPECT() *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateClient) Recv() (*ObjectBucketSearchPrivateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ObjectBucketSearchPrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchBucketPrivateClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchBucketPrivateClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateClient)(nil).Trailer))
}

// MockObjectStorageServicePrivate_SearchObjectUserPrivateClient is a mock of ObjectStorageServicePrivate_SearchObjectUserPrivateClient interface.
type MockObjectStorageServicePrivate_SearchObjectUserPrivateClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder
}

// MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder is the mock recorder for MockObjectStorageServicePrivate_SearchObjectUserPrivateClient.
type MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder struct {
	mock *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient
}

// NewMockObjectStorageServicePrivate_SearchObjectUserPrivateClient creates a new mock instance.
func NewMockObjectStorageServicePrivate_SearchObjectUserPrivateClient(ctrl *gomock.Controller) *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient {
	mock := &MockObjectStorageServicePrivate_SearchObjectUserPrivateClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) EXPECT() *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) Recv() (*ObjectUserSearchPrivateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ObjectUserSearchPrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateClient)(nil).Trailer))
}

// MockObjectStorageServicePrivate_GetBucketSubnetEventClient is a mock of ObjectStorageServicePrivate_GetBucketSubnetEventClient interface.
type MockObjectStorageServicePrivate_GetBucketSubnetEventClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder
}

// MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder is the mock recorder for MockObjectStorageServicePrivate_GetBucketSubnetEventClient.
type MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder struct {
	mock *MockObjectStorageServicePrivate_GetBucketSubnetEventClient
}

// NewMockObjectStorageServicePrivate_GetBucketSubnetEventClient creates a new mock instance.
func NewMockObjectStorageServicePrivate_GetBucketSubnetEventClient(ctrl *gomock.Controller) *MockObjectStorageServicePrivate_GetBucketSubnetEventClient {
	mock := &MockObjectStorageServicePrivate_GetBucketSubnetEventClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) EXPECT() *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) Recv() (*BucketSubnetUpdateEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*BucketSubnetUpdateEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventClient)(nil).Trailer))
}

// MockObjectStorageServicePrivateServer is a mock of ObjectStorageServicePrivateServer interface.
type MockObjectStorageServicePrivateServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivateServerMockRecorder
}

// MockObjectStorageServicePrivateServerMockRecorder is the mock recorder for MockObjectStorageServicePrivateServer.
type MockObjectStorageServicePrivateServerMockRecorder struct {
	mock *MockObjectStorageServicePrivateServer
}

// NewMockObjectStorageServicePrivateServer creates a new mock instance.
func NewMockObjectStorageServicePrivateServer(ctrl *gomock.Controller) *MockObjectStorageServicePrivateServer {
	mock := &MockObjectStorageServicePrivateServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivateServer) EXPECT() *MockObjectStorageServicePrivateServerMockRecorder {
	return m.recorder
}

// AddBucketSubnet mocks base method.
func (m *MockObjectStorageServicePrivateServer) AddBucketSubnet(arg0 context.Context, arg1 *VNetPrivate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBucketSubnet", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBucketSubnet indicates an expected call of AddBucketSubnet.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) AddBucketSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucketSubnet", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).AddBucketSubnet), arg0, arg1)
}

// CreateBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) CreateBucketLifecycleRulePrivate(arg0 context.Context, arg1 *BucketLifecycleRuleCreatePrivateRequest) (*BucketLifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketLifecycleRulePrivate", arg0, arg1)
	ret0, _ := ret[0].(*BucketLifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketLifecycleRulePrivate indicates an expected call of CreateBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) CreateBucketLifecycleRulePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).CreateBucketLifecycleRulePrivate), arg0, arg1)
}

// CreateBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) CreateBucketPrivate(arg0 context.Context, arg1 *ObjectBucketCreatePrivateRequest) (*ObjectBucketPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketPrivate", arg0, arg1)
	ret0, _ := ret[0].(*ObjectBucketPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketPrivate indicates an expected call of CreateBucketPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) CreateBucketPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).CreateBucketPrivate), arg0, arg1)
}

// CreateObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) CreateObjectUserPrivate(arg0 context.Context, arg1 *CreateObjectUserPrivateRequest) (*ObjectUserPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*ObjectUserPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectUserPrivate indicates an expected call of CreateObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) CreateObjectUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).CreateObjectUserPrivate), arg0, arg1)
}

// DeleteBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) DeleteBucketLifecycleRulePrivate(arg0 context.Context, arg1 *BucketLifecycleRuleDeletePrivateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketLifecycleRulePrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketLifecycleRulePrivate indicates an expected call of DeleteBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) DeleteBucketLifecycleRulePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).DeleteBucketLifecycleRulePrivate), arg0, arg1)
}

// DeleteBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) DeleteBucketPrivate(arg0 context.Context, arg1 *ObjectBucketDeletePrivateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketPrivate indicates an expected call of DeleteBucketPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) DeleteBucketPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).DeleteBucketPrivate), arg0, arg1)
}

// DeleteObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) DeleteObjectUserPrivate(arg0 context.Context, arg1 *ObjectUserDeletePrivateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectUserPrivate indicates an expected call of DeleteObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) DeleteObjectUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).DeleteObjectUserPrivate), arg0, arg1)
}

// GetBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) GetBucketLifecycleRulePrivate(arg0 context.Context, arg1 *BucketLifecycleRuleGetPrivateRequest) (*BucketLifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLifecycleRulePrivate", arg0, arg1)
	ret0, _ := ret[0].(*BucketLifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLifecycleRulePrivate indicates an expected call of GetBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) GetBucketLifecycleRulePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).GetBucketLifecycleRulePrivate), arg0, arg1)
}

// GetBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) GetBucketPrivate(arg0 context.Context, arg1 *ObjectBucketGetPrivateRequest) (*ObjectBucketPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketPrivate", arg0, arg1)
	ret0, _ := ret[0].(*ObjectBucketPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPrivate indicates an expected call of GetBucketPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) GetBucketPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).GetBucketPrivate), arg0, arg1)
}

// GetBucketSubnetEvent mocks base method.
func (m *MockObjectStorageServicePrivateServer) GetBucketSubnetEvent(arg0 *SubnetEventRequest, arg1 ObjectStorageServicePrivate_GetBucketSubnetEventServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketSubnetEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBucketSubnetEvent indicates an expected call of GetBucketSubnetEvent.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) GetBucketSubnetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketSubnetEvent", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).GetBucketSubnetEvent), arg0, arg1)
}

// GetObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) GetObjectUserPrivate(arg0 context.Context, arg1 *ObjectUserGetPrivateRequest) (*ObjectUserPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*ObjectUserPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectUserPrivate indicates an expected call of GetObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) GetObjectUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).GetObjectUserPrivate), arg0, arg1)
}

// PingPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) PingPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) PingPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).PingPrivate), arg0, arg1)
}

// RemoveBucketFinalizer mocks base method.
func (m *MockObjectStorageServicePrivateServer) RemoveBucketFinalizer(arg0 context.Context, arg1 *ObjectBucketRemoveFinalizerRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBucketFinalizer", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBucketFinalizer indicates an expected call of RemoveBucketFinalizer.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) RemoveBucketFinalizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucketFinalizer", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).RemoveBucketFinalizer), arg0, arg1)
}

// RemoveBucketSubnet mocks base method.
func (m *MockObjectStorageServicePrivateServer) RemoveBucketSubnet(arg0 context.Context, arg1 *VNetReleaseSubnetRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBucketSubnet", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBucketSubnet indicates an expected call of RemoveBucketSubnet.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) RemoveBucketSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucketSubnet", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).RemoveBucketSubnet), arg0, arg1)
}

// RemoveObjectUserFinalizer mocks base method.
func (m *MockObjectStorageServicePrivateServer) RemoveObjectUserFinalizer(arg0 context.Context, arg1 *ObjectUserRemoveFinalizerRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveObjectUserFinalizer", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveObjectUserFinalizer indicates an expected call of RemoveObjectUserFinalizer.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) RemoveObjectUserFinalizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObjectUserFinalizer", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).RemoveObjectUserFinalizer), arg0, arg1)
}

// SearchBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) SearchBucketLifecycleRulePrivate(arg0 context.Context, arg1 *BucketLifecycleRuleSearchPrivateRequest) (*BucketLifecycleRuleSearchPrivateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBucketLifecycleRulePrivate", arg0, arg1)
	ret0, _ := ret[0].(*BucketLifecycleRuleSearchPrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBucketLifecycleRulePrivate indicates an expected call of SearchBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) SearchBucketLifecycleRulePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).SearchBucketLifecycleRulePrivate), arg0, arg1)
}

// SearchBucketPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) SearchBucketPrivate(arg0 *ObjectBucketSearchPrivateRequest, arg1 ObjectStorageServicePrivate_SearchBucketPrivateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBucketPrivate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchBucketPrivate indicates an expected call of SearchBucketPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) SearchBucketPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBucketPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).SearchBucketPrivate), arg0, arg1)
}

// SearchObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) SearchObjectUserPrivate(arg0 *ObjectUserSearchPrivateRequest, arg1 ObjectStorageServicePrivate_SearchObjectUserPrivateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchObjectUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchObjectUserPrivate indicates an expected call of SearchObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) SearchObjectUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).SearchObjectUserPrivate), arg0, arg1)
}

// UpdateBucketLifecycleRulePrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) UpdateBucketLifecycleRulePrivate(arg0 context.Context, arg1 *BucketLifecycleRuleUpdatePrivateRequest) (*BucketLifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBucketLifecycleRulePrivate", arg0, arg1)
	ret0, _ := ret[0].(*BucketLifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketLifecycleRulePrivate indicates an expected call of UpdateBucketLifecycleRulePrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) UpdateBucketLifecycleRulePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketLifecycleRulePrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).UpdateBucketLifecycleRulePrivate), arg0, arg1)
}

// UpdateBucketStatus mocks base method.
func (m *MockObjectStorageServicePrivateServer) UpdateBucketStatus(arg0 context.Context, arg1 *ObjectBucketStatusUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBucketStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketStatus indicates an expected call of UpdateBucketStatus.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) UpdateBucketStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketStatus", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).UpdateBucketStatus), arg0, arg1)
}

// UpdateBucketSubnetStatus mocks base method.
func (m *MockObjectStorageServicePrivateServer) UpdateBucketSubnetStatus(arg0 context.Context, arg1 *BucketSubnetStatusUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBucketSubnetStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucketSubnetStatus indicates an expected call of UpdateBucketSubnetStatus.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) UpdateBucketSubnetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucketSubnetStatus", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).UpdateBucketSubnetStatus), arg0, arg1)
}

// UpdateObjectUserPrivate mocks base method.
func (m *MockObjectStorageServicePrivateServer) UpdateObjectUserPrivate(arg0 context.Context, arg1 *ObjectUserUpdatePrivateRequest) (*ObjectUserPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectUserPrivate", arg0, arg1)
	ret0, _ := ret[0].(*ObjectUserPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectUserPrivate indicates an expected call of UpdateObjectUserPrivate.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) UpdateObjectUserPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectUserPrivate", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).UpdateObjectUserPrivate), arg0, arg1)
}

// UpdateObjectUserStatus mocks base method.
func (m *MockObjectStorageServicePrivateServer) UpdateObjectUserStatus(arg0 context.Context, arg1 *ObjectUserStatusUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectUserStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectUserStatus indicates an expected call of UpdateObjectUserStatus.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) UpdateObjectUserStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectUserStatus", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).UpdateObjectUserStatus), arg0, arg1)
}

// mustEmbedUnimplementedObjectStorageServicePrivateServer mocks base method.
func (m *MockObjectStorageServicePrivateServer) mustEmbedUnimplementedObjectStorageServicePrivateServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedObjectStorageServicePrivateServer")
}

// mustEmbedUnimplementedObjectStorageServicePrivateServer indicates an expected call of mustEmbedUnimplementedObjectStorageServicePrivateServer.
func (mr *MockObjectStorageServicePrivateServerMockRecorder) mustEmbedUnimplementedObjectStorageServicePrivateServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedObjectStorageServicePrivateServer", reflect.TypeOf((*MockObjectStorageServicePrivateServer)(nil).mustEmbedUnimplementedObjectStorageServicePrivateServer))
}

// MockUnsafeObjectStorageServicePrivateServer is a mock of UnsafeObjectStorageServicePrivateServer interface.
type MockUnsafeObjectStorageServicePrivateServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeObjectStorageServicePrivateServerMockRecorder
}

// MockUnsafeObjectStorageServicePrivateServerMockRecorder is the mock recorder for MockUnsafeObjectStorageServicePrivateServer.
type MockUnsafeObjectStorageServicePrivateServerMockRecorder struct {
	mock *MockUnsafeObjectStorageServicePrivateServer
}

// NewMockUnsafeObjectStorageServicePrivateServer creates a new mock instance.
func NewMockUnsafeObjectStorageServicePrivateServer(ctrl *gomock.Controller) *MockUnsafeObjectStorageServicePrivateServer {
	mock := &MockUnsafeObjectStorageServicePrivateServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeObjectStorageServicePrivateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeObjectStorageServicePrivateServer) EXPECT() *MockUnsafeObjectStorageServicePrivateServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedObjectStorageServicePrivateServer mocks base method.
func (m *MockUnsafeObjectStorageServicePrivateServer) mustEmbedUnimplementedObjectStorageServicePrivateServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedObjectStorageServicePrivateServer")
}

// mustEmbedUnimplementedObjectStorageServicePrivateServer indicates an expected call of mustEmbedUnimplementedObjectStorageServicePrivateServer.
func (mr *MockUnsafeObjectStorageServicePrivateServerMockRecorder) mustEmbedUnimplementedObjectStorageServicePrivateServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedObjectStorageServicePrivateServer", reflect.TypeOf((*MockUnsafeObjectStorageServicePrivateServer)(nil).mustEmbedUnimplementedObjectStorageServicePrivateServer))
}

// MockObjectStorageServicePrivate_SearchBucketPrivateServer is a mock of ObjectStorageServicePrivate_SearchBucketPrivateServer interface.
type MockObjectStorageServicePrivate_SearchBucketPrivateServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder
}

// MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder is the mock recorder for MockObjectStorageServicePrivate_SearchBucketPrivateServer.
type MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder struct {
	mock *MockObjectStorageServicePrivate_SearchBucketPrivateServer
}

// NewMockObjectStorageServicePrivate_SearchBucketPrivateServer creates a new mock instance.
func NewMockObjectStorageServicePrivate_SearchBucketPrivateServer(ctrl *gomock.Controller) *MockObjectStorageServicePrivate_SearchBucketPrivateServer {
	mock := &MockObjectStorageServicePrivate_SearchBucketPrivateServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateServer) EXPECT() *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchBucketPrivateServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateServer) Send(arg0 *ObjectBucketSearchPrivateResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchBucketPrivateServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockObjectStorageServicePrivate_SearchBucketPrivateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockObjectStorageServicePrivate_SearchBucketPrivateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchBucketPrivateServer)(nil).SetTrailer), arg0)
}

// MockObjectStorageServicePrivate_SearchObjectUserPrivateServer is a mock of ObjectStorageServicePrivate_SearchObjectUserPrivateServer interface.
type MockObjectStorageServicePrivate_SearchObjectUserPrivateServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder
}

// MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder is the mock recorder for MockObjectStorageServicePrivate_SearchObjectUserPrivateServer.
type MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder struct {
	mock *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer
}

// NewMockObjectStorageServicePrivate_SearchObjectUserPrivateServer creates a new mock instance.
func NewMockObjectStorageServicePrivate_SearchObjectUserPrivateServer(ctrl *gomock.Controller) *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer {
	mock := &MockObjectStorageServicePrivate_SearchObjectUserPrivateServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) EXPECT() *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) Send(arg0 *ObjectUserSearchPrivateResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockObjectStorageServicePrivate_SearchObjectUserPrivateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockObjectStorageServicePrivate_SearchObjectUserPrivateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockObjectStorageServicePrivate_SearchObjectUserPrivateServer)(nil).SetTrailer), arg0)
}

// MockObjectStorageServicePrivate_GetBucketSubnetEventServer is a mock of ObjectStorageServicePrivate_GetBucketSubnetEventServer interface.
type MockObjectStorageServicePrivate_GetBucketSubnetEventServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder
}

// MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder is the mock recorder for MockObjectStorageServicePrivate_GetBucketSubnetEventServer.
type MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder struct {
	mock *MockObjectStorageServicePrivate_GetBucketSubnetEventServer
}

// NewMockObjectStorageServicePrivate_GetBucketSubnetEventServer creates a new mock instance.
func NewMockObjectStorageServicePrivate_GetBucketSubnetEventServer(ctrl *gomock.Controller) *MockObjectStorageServicePrivate_GetBucketSubnetEventServer {
	mock := &MockObjectStorageServicePrivate_GetBucketSubnetEventServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) EXPECT() *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) Send(arg0 *BucketSubnetUpdateEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockObjectStorageServicePrivate_GetBucketSubnetEventServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockObjectStorageServicePrivate_GetBucketSubnetEventServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockObjectStorageServicePrivate_GetBucketSubnetEventServer)(nil).SetTrailer), arg0)
}

// MockBucketLifecyclePrivateServiceClient is a mock of BucketLifecyclePrivateServiceClient interface.
type MockBucketLifecyclePrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBucketLifecyclePrivateServiceClientMockRecorder
}

// MockBucketLifecyclePrivateServiceClientMockRecorder is the mock recorder for MockBucketLifecyclePrivateServiceClient.
type MockBucketLifecyclePrivateServiceClientMockRecorder struct {
	mock *MockBucketLifecyclePrivateServiceClient
}

// NewMockBucketLifecyclePrivateServiceClient creates a new mock instance.
func NewMockBucketLifecyclePrivateServiceClient(ctrl *gomock.Controller) *MockBucketLifecyclePrivateServiceClient {
	mock := &MockBucketLifecyclePrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockBucketLifecyclePrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketLifecyclePrivateServiceClient) EXPECT() *MockBucketLifecyclePrivateServiceClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateLifecycleRule mocks base method.
func (m *MockBucketLifecyclePrivateServiceClient) CreateOrUpdateLifecycleRule(ctx context.Context, in *CreateOrUpdateLifecycleRuleRequest, opts ...grpc.CallOption) (*LifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateLifecycleRule", varargs...)
	ret0, _ := ret[0].(*LifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateLifecycleRule indicates an expected call of CreateOrUpdateLifecycleRule.
func (mr *MockBucketLifecyclePrivateServiceClientMockRecorder) CreateOrUpdateLifecycleRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateLifecycleRule", reflect.TypeOf((*MockBucketLifecyclePrivateServiceClient)(nil).CreateOrUpdateLifecycleRule), varargs...)
}

// DeleteLifecycleRule mocks base method.
func (m *MockBucketLifecyclePrivateServiceClient) DeleteLifecycleRule(ctx context.Context, in *DeleteLifecycleRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLifecycleRule", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLifecycleRule indicates an expected call of DeleteLifecycleRule.
func (mr *MockBucketLifecyclePrivateServiceClientMockRecorder) DeleteLifecycleRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifecycleRule", reflect.TypeOf((*MockBucketLifecyclePrivateServiceClient)(nil).DeleteLifecycleRule), varargs...)
}

// PingBucketLifecyclePrivate mocks base method.
func (m *MockBucketLifecyclePrivateServiceClient) PingBucketLifecyclePrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingBucketLifecyclePrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingBucketLifecyclePrivate indicates an expected call of PingBucketLifecyclePrivate.
func (mr *MockBucketLifecyclePrivateServiceClientMockRecorder) PingBucketLifecyclePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingBucketLifecyclePrivate", reflect.TypeOf((*MockBucketLifecyclePrivateServiceClient)(nil).PingBucketLifecyclePrivate), varargs...)
}

// MockBucketLifecyclePrivateServiceServer is a mock of BucketLifecyclePrivateServiceServer interface.
type MockBucketLifecyclePrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBucketLifecyclePrivateServiceServerMockRecorder
}

// MockBucketLifecyclePrivateServiceServerMockRecorder is the mock recorder for MockBucketLifecyclePrivateServiceServer.
type MockBucketLifecyclePrivateServiceServerMockRecorder struct {
	mock *MockBucketLifecyclePrivateServiceServer
}

// NewMockBucketLifecyclePrivateServiceServer creates a new mock instance.
func NewMockBucketLifecyclePrivateServiceServer(ctrl *gomock.Controller) *MockBucketLifecyclePrivateServiceServer {
	mock := &MockBucketLifecyclePrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockBucketLifecyclePrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketLifecyclePrivateServiceServer) EXPECT() *MockBucketLifecyclePrivateServiceServerMockRecorder {
	return m.recorder
}

// CreateOrUpdateLifecycleRule mocks base method.
func (m *MockBucketLifecyclePrivateServiceServer) CreateOrUpdateLifecycleRule(arg0 context.Context, arg1 *CreateOrUpdateLifecycleRuleRequest) (*LifecycleRulePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateLifecycleRule", arg0, arg1)
	ret0, _ := ret[0].(*LifecycleRulePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateLifecycleRule indicates an expected call of CreateOrUpdateLifecycleRule.
func (mr *MockBucketLifecyclePrivateServiceServerMockRecorder) CreateOrUpdateLifecycleRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateLifecycleRule", reflect.TypeOf((*MockBucketLifecyclePrivateServiceServer)(nil).CreateOrUpdateLifecycleRule), arg0, arg1)
}

// DeleteLifecycleRule mocks base method.
func (m *MockBucketLifecyclePrivateServiceServer) DeleteLifecycleRule(arg0 context.Context, arg1 *DeleteLifecycleRuleRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLifecycleRule", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLifecycleRule indicates an expected call of DeleteLifecycleRule.
func (mr *MockBucketLifecyclePrivateServiceServerMockRecorder) DeleteLifecycleRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifecycleRule", reflect.TypeOf((*MockBucketLifecyclePrivateServiceServer)(nil).DeleteLifecycleRule), arg0, arg1)
}

// PingBucketLifecyclePrivate mocks base method.
func (m *MockBucketLifecyclePrivateServiceServer) PingBucketLifecyclePrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingBucketLifecyclePrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingBucketLifecyclePrivate indicates an expected call of PingBucketLifecyclePrivate.
func (mr *MockBucketLifecyclePrivateServiceServerMockRecorder) PingBucketLifecyclePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingBucketLifecyclePrivate", reflect.TypeOf((*MockBucketLifecyclePrivateServiceServer)(nil).PingBucketLifecyclePrivate), arg0, arg1)
}

// mustEmbedUnimplementedBucketLifecyclePrivateServiceServer mocks base method.
func (m *MockBucketLifecyclePrivateServiceServer) mustEmbedUnimplementedBucketLifecyclePrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBucketLifecyclePrivateServiceServer")
}

// mustEmbedUnimplementedBucketLifecyclePrivateServiceServer indicates an expected call of mustEmbedUnimplementedBucketLifecyclePrivateServiceServer.
func (mr *MockBucketLifecyclePrivateServiceServerMockRecorder) mustEmbedUnimplementedBucketLifecyclePrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBucketLifecyclePrivateServiceServer", reflect.TypeOf((*MockBucketLifecyclePrivateServiceServer)(nil).mustEmbedUnimplementedBucketLifecyclePrivateServiceServer))
}

// MockUnsafeBucketLifecyclePrivateServiceServer is a mock of UnsafeBucketLifecyclePrivateServiceServer interface.
type MockUnsafeBucketLifecyclePrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBucketLifecyclePrivateServiceServerMockRecorder
}

// MockUnsafeBucketLifecyclePrivateServiceServerMockRecorder is the mock recorder for MockUnsafeBucketLifecyclePrivateServiceServer.
type MockUnsafeBucketLifecyclePrivateServiceServerMockRecorder struct {
	mock *MockUnsafeBucketLifecyclePrivateServiceServer
}

// NewMockUnsafeBucketLifecyclePrivateServiceServer creates a new mock instance.
func NewMockUnsafeBucketLifecyclePrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeBucketLifecyclePrivateServiceServer {
	mock := &MockUnsafeBucketLifecyclePrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBucketLifecyclePrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBucketLifecyclePrivateServiceServer) EXPECT() *MockUnsafeBucketLifecyclePrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBucketLifecyclePrivateServiceServer mocks base method.
func (m *MockUnsafeBucketLifecyclePrivateServiceServer) mustEmbedUnimplementedBucketLifecyclePrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBucketLifecyclePrivateServiceServer")
}

// mustEmbedUnimplementedBucketLifecyclePrivateServiceServer indicates an expected call of mustEmbedUnimplementedBucketLifecyclePrivateServiceServer.
func (mr *MockUnsafeBucketLifecyclePrivateServiceServerMockRecorder) mustEmbedUnimplementedBucketLifecyclePrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBucketLifecyclePrivateServiceServer", reflect.TypeOf((*MockUnsafeBucketLifecyclePrivateServiceServer)(nil).mustEmbedUnimplementedBucketLifecyclePrivateServiceServer))
}
