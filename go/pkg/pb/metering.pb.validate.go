// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metering.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UsageCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsageCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsageCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsageCreateMultiError, or
// nil if none found.
func (m *UsageCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *UsageCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for ResourceId

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UsageCreateValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UsageCreateValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsageCreateValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return UsageCreateMultiError(errors)
	}

	return nil
}

// UsageCreateMultiError is an error wrapping multiple validation errors
// returned by UsageCreate.ValidateAll() if the designated constraints aren't met.
type UsageCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsageCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsageCreateMultiError) AllErrors() []error { return m }

// UsageCreateValidationError is the validation error returned by
// UsageCreate.Validate if the designated constraints aren't met.
type UsageCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageCreateValidationError) ErrorName() string { return "UsageCreateValidationError" }

// Error satisfies the builtin error interface
func (e UsageCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsageCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageCreateValidationError{}

// Validate checks the field values on UsageFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsageFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsageFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsageFilterMultiError, or
// nil if none found.
func (m *UsageFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *UsageFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.TransactionId != nil {
		// no validation rules for TransactionId
	}

	if m.ResourceId != nil {
		// no validation rules for ResourceId
	}

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsageFilterValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsageFilterValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsageFilterValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsageFilterValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsageFilterValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsageFilterValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Reported != nil {
		// no validation rules for Reported
	}

	if len(errors) > 0 {
		return UsageFilterMultiError(errors)
	}

	return nil
}

// UsageFilterMultiError is an error wrapping multiple validation errors
// returned by UsageFilter.ValidateAll() if the designated constraints aren't met.
type UsageFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsageFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsageFilterMultiError) AllErrors() []error { return m }

// UsageFilterValidationError is the validation error returned by
// UsageFilter.Validate if the designated constraints aren't met.
type UsageFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageFilterValidationError) ErrorName() string { return "UsageFilterValidationError" }

// Error satisfies the builtin error interface
func (e UsageFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsageFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageFilterValidationError{}

// Validate checks the field values on Usage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Usage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Usage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UsageMultiError, or nil if none found.
func (m *Usage) ValidateAll() error {
	return m.validate(true)
}

func (m *Usage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TransactionId

	// no validation rules for ResourceId

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UsageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UsageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsageValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Properties

	// no validation rules for Reported

	if len(errors) > 0 {
		return UsageMultiError(errors)
	}

	return nil
}

// UsageMultiError is an error wrapping multiple validation errors returned by
// Usage.ValidateAll() if the designated constraints aren't met.
type UsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsageMultiError) AllErrors() []error { return m }

// UsageValidationError is the validation error returned by Usage.Validate if
// the designated constraints aren't met.
type UsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageValidationError) ErrorName() string { return "UsageValidationError" }

// Error satisfies the builtin error interface
func (e UsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageValidationError{}

// Validate checks the field values on MeteringRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeteringRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeteringRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeteringRecordMultiError,
// or nil if none found.
func (m *MeteringRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *MeteringRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TransactionId

	// no validation rules for ResourceId

	// no validation rules for ResourceName

	// no validation rules for CloudAccountId

	// no validation rules for Region

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeteringRecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeteringRecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeteringRecordValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Properties

	// no validation rules for Reported

	if len(errors) > 0 {
		return MeteringRecordMultiError(errors)
	}

	return nil
}

// MeteringRecordMultiError is an error wrapping multiple validation errors
// returned by MeteringRecord.ValidateAll() if the designated constraints
// aren't met.
type MeteringRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeteringRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeteringRecordMultiError) AllErrors() []error { return m }

// MeteringRecordValidationError is the validation error returned by
// MeteringRecord.Validate if the designated constraints aren't met.
type MeteringRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeteringRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeteringRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeteringRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeteringRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeteringRecordValidationError) ErrorName() string { return "MeteringRecordValidationError" }

// Error satisfies the builtin error interface
func (e MeteringRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeteringRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeteringRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeteringRecordValidationError{}

// Validate checks the field values on InvalidMeteringRecordFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidMeteringRecordFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidMeteringRecordFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidMeteringRecordFilterMultiError, or nil if none found.
func (m *InvalidMeteringRecordFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidMeteringRecordFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.RecordId != nil {
		// no validation rules for RecordId
	}

	if m.TransactionId != nil {
		// no validation rules for TransactionId
	}

	if m.ResourceId != nil {
		// no validation rules for ResourceId
	}

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.Region != nil {
		// no validation rules for Region
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InvalidMeteringRecordFilterValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InvalidMeteringRecordFilterValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidMeteringRecordFilterValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InvalidMeteringRecordFilterValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InvalidMeteringRecordFilterValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidMeteringRecordFilterValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InvalidMeteringRecordFilterMultiError(errors)
	}

	return nil
}

// InvalidMeteringRecordFilterMultiError is an error wrapping multiple
// validation errors returned by InvalidMeteringRecordFilter.ValidateAll() if
// the designated constraints aren't met.
type InvalidMeteringRecordFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidMeteringRecordFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidMeteringRecordFilterMultiError) AllErrors() []error { return m }

// InvalidMeteringRecordFilterValidationError is the validation error returned
// by InvalidMeteringRecordFilter.Validate if the designated constraints
// aren't met.
type InvalidMeteringRecordFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidMeteringRecordFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidMeteringRecordFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidMeteringRecordFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidMeteringRecordFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidMeteringRecordFilterValidationError) ErrorName() string {
	return "InvalidMeteringRecordFilterValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidMeteringRecordFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidMeteringRecordFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidMeteringRecordFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidMeteringRecordFilterValidationError{}

// Validate checks the field values on CreateInvalidMeteringRecords with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInvalidMeteringRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInvalidMeteringRecords with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInvalidMeteringRecordsMultiError, or nil if none found.
func (m *CreateInvalidMeteringRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInvalidMeteringRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreateInvalidMeteringRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateInvalidMeteringRecordsValidationError{
						field:  fmt.Sprintf("CreateInvalidMeteringRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateInvalidMeteringRecordsValidationError{
						field:  fmt.Sprintf("CreateInvalidMeteringRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateInvalidMeteringRecordsValidationError{
					field:  fmt.Sprintf("CreateInvalidMeteringRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateInvalidMeteringRecordsMultiError(errors)
	}

	return nil
}

// CreateInvalidMeteringRecordsMultiError is an error wrapping multiple
// validation errors returned by CreateInvalidMeteringRecords.ValidateAll() if
// the designated constraints aren't met.
type CreateInvalidMeteringRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInvalidMeteringRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInvalidMeteringRecordsMultiError) AllErrors() []error { return m }

// CreateInvalidMeteringRecordsValidationError is the validation error returned
// by CreateInvalidMeteringRecords.Validate if the designated constraints
// aren't met.
type CreateInvalidMeteringRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInvalidMeteringRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInvalidMeteringRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInvalidMeteringRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInvalidMeteringRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInvalidMeteringRecordsValidationError) ErrorName() string {
	return "CreateInvalidMeteringRecordsValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInvalidMeteringRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInvalidMeteringRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInvalidMeteringRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInvalidMeteringRecordsValidationError{}

// Validate checks the field values on InvalidMeteringRecordCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidMeteringRecordCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidMeteringRecordCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidMeteringRecordCreateMultiError, or nil if none found.
func (m *InvalidMeteringRecordCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidMeteringRecordCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordId

	// no validation rules for TransactionId

	// no validation rules for ResourceId

	// no validation rules for ResourceName

	// no validation rules for CloudAccountId

	// no validation rules for Region

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvalidMeteringRecordCreateValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvalidMeteringRecordCreateValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidMeteringRecordCreateValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Properties

	// no validation rules for MeteringRecordInvalidityReason

	if len(errors) > 0 {
		return InvalidMeteringRecordCreateMultiError(errors)
	}

	return nil
}

// InvalidMeteringRecordCreateMultiError is an error wrapping multiple
// validation errors returned by InvalidMeteringRecordCreate.ValidateAll() if
// the designated constraints aren't met.
type InvalidMeteringRecordCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidMeteringRecordCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidMeteringRecordCreateMultiError) AllErrors() []error { return m }

// InvalidMeteringRecordCreateValidationError is the validation error returned
// by InvalidMeteringRecordCreate.Validate if the designated constraints
// aren't met.
type InvalidMeteringRecordCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidMeteringRecordCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidMeteringRecordCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidMeteringRecordCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidMeteringRecordCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidMeteringRecordCreateValidationError) ErrorName() string {
	return "InvalidMeteringRecordCreateValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidMeteringRecordCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidMeteringRecordCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidMeteringRecordCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidMeteringRecordCreateValidationError{}

// Validate checks the field values on InvalidMeteringRecords with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidMeteringRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidMeteringRecords with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidMeteringRecordsMultiError, or nil if none found.
func (m *InvalidMeteringRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidMeteringRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvalidMeteringRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InvalidMeteringRecordsValidationError{
						field:  fmt.Sprintf("InvalidMeteringRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InvalidMeteringRecordsValidationError{
						field:  fmt.Sprintf("InvalidMeteringRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidMeteringRecordsValidationError{
					field:  fmt.Sprintf("InvalidMeteringRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InvalidMeteringRecordsMultiError(errors)
	}

	return nil
}

// InvalidMeteringRecordsMultiError is an error wrapping multiple validation
// errors returned by InvalidMeteringRecords.ValidateAll() if the designated
// constraints aren't met.
type InvalidMeteringRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidMeteringRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidMeteringRecordsMultiError) AllErrors() []error { return m }

// InvalidMeteringRecordsValidationError is the validation error returned by
// InvalidMeteringRecords.Validate if the designated constraints aren't met.
type InvalidMeteringRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidMeteringRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidMeteringRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidMeteringRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidMeteringRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidMeteringRecordsValidationError) ErrorName() string {
	return "InvalidMeteringRecordsValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidMeteringRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidMeteringRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidMeteringRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidMeteringRecordsValidationError{}

// Validate checks the field values on InvalidMeteringRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidMeteringRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidMeteringRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidMeteringRecordMultiError, or nil if none found.
func (m *InvalidMeteringRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidMeteringRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RecordId

	// no validation rules for TransactionId

	// no validation rules for ResourceId

	// no validation rules for ResourceName

	// no validation rules for CloudAccountId

	// no validation rules for Region

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvalidMeteringRecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvalidMeteringRecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidMeteringRecordValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Properties

	// no validation rules for MeteringRecordInvalidityReason

	if len(errors) > 0 {
		return InvalidMeteringRecordMultiError(errors)
	}

	return nil
}

// InvalidMeteringRecordMultiError is an error wrapping multiple validation
// errors returned by InvalidMeteringRecord.ValidateAll() if the designated
// constraints aren't met.
type InvalidMeteringRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidMeteringRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidMeteringRecordMultiError) AllErrors() []error { return m }

// InvalidMeteringRecordValidationError is the validation error returned by
// InvalidMeteringRecord.Validate if the designated constraints aren't met.
type InvalidMeteringRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidMeteringRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidMeteringRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidMeteringRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidMeteringRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidMeteringRecordValidationError) ErrorName() string {
	return "InvalidMeteringRecordValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidMeteringRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidMeteringRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidMeteringRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidMeteringRecordValidationError{}

// Validate checks the field values on MeteringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeteringFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeteringFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeteringFilterMultiError,
// or nil if none found.
func (m *MeteringFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *MeteringFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.Reported != nil {
		// no validation rules for Reported
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MeteringFilterValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MeteringFilterValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeteringFilterValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MeteringFilterValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MeteringFilterValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeteringFilterValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MeteringFilterMultiError(errors)
	}

	return nil
}

// MeteringFilterMultiError is an error wrapping multiple validation errors
// returned by MeteringFilter.ValidateAll() if the designated constraints
// aren't met.
type MeteringFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeteringFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeteringFilterMultiError) AllErrors() []error { return m }

// MeteringFilterValidationError is the validation error returned by
// MeteringFilter.Validate if the designated constraints aren't met.
type MeteringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeteringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeteringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeteringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeteringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeteringFilterValidationError) ErrorName() string { return "MeteringFilterValidationError" }

// Error satisfies the builtin error interface
func (e MeteringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeteringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeteringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeteringFilterValidationError{}

// Validate checks the field values on MeteringAvailableFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeteringAvailableFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeteringAvailableFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeteringAvailableFilterMultiError, or nil if none found.
func (m *MeteringAvailableFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *MeteringAvailableFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for MeteringDuration

	if len(errors) > 0 {
		return MeteringAvailableFilterMultiError(errors)
	}

	return nil
}

// MeteringAvailableFilterMultiError is an error wrapping multiple validation
// errors returned by MeteringAvailableFilter.ValidateAll() if the designated
// constraints aren't met.
type MeteringAvailableFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeteringAvailableFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeteringAvailableFilterMultiError) AllErrors() []error { return m }

// MeteringAvailableFilterValidationError is the validation error returned by
// MeteringAvailableFilter.Validate if the designated constraints aren't met.
type MeteringAvailableFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeteringAvailableFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeteringAvailableFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeteringAvailableFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeteringAvailableFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeteringAvailableFilterValidationError) ErrorName() string {
	return "MeteringAvailableFilterValidationError"
}

// Error satisfies the builtin error interface
func (e MeteringAvailableFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeteringAvailableFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeteringAvailableFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeteringAvailableFilterValidationError{}

// Validate checks the field values on MeteringAvailableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeteringAvailableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeteringAvailableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeteringAvailableResponseMultiError, or nil if none found.
func (m *MeteringAvailableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MeteringAvailableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeteringDataAvailable

	if len(errors) > 0 {
		return MeteringAvailableResponseMultiError(errors)
	}

	return nil
}

// MeteringAvailableResponseMultiError is an error wrapping multiple validation
// errors returned by MeteringAvailableResponse.ValidateAll() if the
// designated constraints aren't met.
type MeteringAvailableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeteringAvailableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeteringAvailableResponseMultiError) AllErrors() []error { return m }

// MeteringAvailableResponseValidationError is the validation error returned by
// MeteringAvailableResponse.Validate if the designated constraints aren't met.
type MeteringAvailableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeteringAvailableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeteringAvailableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeteringAvailableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeteringAvailableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeteringAvailableResponseValidationError) ErrorName() string {
	return "MeteringAvailableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MeteringAvailableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeteringAvailableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeteringAvailableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeteringAvailableResponseValidationError{}

// Validate checks the field values on ResourceMeteringRecords with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceMeteringRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMeteringRecords with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMeteringRecordsMultiError, or nil if none found.
func (m *ResourceMeteringRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMeteringRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for CloudAccountId

	// no validation rules for ResourceName

	// no validation rules for Region

	for idx, item := range m.GetMeteringRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceMeteringRecordsValidationError{
						field:  fmt.Sprintf("MeteringRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceMeteringRecordsValidationError{
						field:  fmt.Sprintf("MeteringRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceMeteringRecordsValidationError{
					field:  fmt.Sprintf("MeteringRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceMeteringRecordsMultiError(errors)
	}

	return nil
}

// ResourceMeteringRecordsMultiError is an error wrapping multiple validation
// errors returned by ResourceMeteringRecords.ValidateAll() if the designated
// constraints aren't met.
type ResourceMeteringRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMeteringRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMeteringRecordsMultiError) AllErrors() []error { return m }

// ResourceMeteringRecordsValidationError is the validation error returned by
// ResourceMeteringRecords.Validate if the designated constraints aren't met.
type ResourceMeteringRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMeteringRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMeteringRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMeteringRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMeteringRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMeteringRecordsValidationError) ErrorName() string {
	return "ResourceMeteringRecordsValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceMeteringRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMeteringRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMeteringRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMeteringRecordsValidationError{}

// Validate checks the field values on ResourceMeteringRecordsList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceMeteringRecordsList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMeteringRecordsList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMeteringRecordsListMultiError, or nil if none found.
func (m *ResourceMeteringRecordsList) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMeteringRecordsList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResourceMeteringRecordsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceMeteringRecordsListValidationError{
						field:  fmt.Sprintf("ResourceMeteringRecordsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceMeteringRecordsListValidationError{
						field:  fmt.Sprintf("ResourceMeteringRecordsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceMeteringRecordsListValidationError{
					field:  fmt.Sprintf("ResourceMeteringRecordsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceMeteringRecordsListMultiError(errors)
	}

	return nil
}

// ResourceMeteringRecordsListMultiError is an error wrapping multiple
// validation errors returned by ResourceMeteringRecordsList.ValidateAll() if
// the designated constraints aren't met.
type ResourceMeteringRecordsListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMeteringRecordsListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMeteringRecordsListMultiError) AllErrors() []error { return m }

// ResourceMeteringRecordsListValidationError is the validation error returned
// by ResourceMeteringRecordsList.Validate if the designated constraints
// aren't met.
type ResourceMeteringRecordsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMeteringRecordsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMeteringRecordsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMeteringRecordsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMeteringRecordsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMeteringRecordsListValidationError) ErrorName() string {
	return "ResourceMeteringRecordsListValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceMeteringRecordsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMeteringRecordsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMeteringRecordsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMeteringRecordsListValidationError{}

// Validate checks the field values on UsagePrevious with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsagePrevious) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsagePrevious with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsagePreviousMultiError, or
// nil if none found.
func (m *UsagePrevious) ValidateAll() error {
	return m.validate(true)
}

func (m *UsagePrevious) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return UsagePreviousMultiError(errors)
	}

	return nil
}

// UsagePreviousMultiError is an error wrapping multiple validation errors
// returned by UsagePrevious.ValidateAll() if the designated constraints
// aren't met.
type UsagePreviousMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsagePreviousMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsagePreviousMultiError) AllErrors() []error { return m }

// UsagePreviousValidationError is the validation error returned by
// UsagePrevious.Validate if the designated constraints aren't met.
type UsagePreviousValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsagePreviousValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsagePreviousValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsagePreviousValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsagePreviousValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsagePreviousValidationError) ErrorName() string { return "UsagePreviousValidationError" }

// Error satisfies the builtin error interface
func (e UsagePreviousValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsagePrevious.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsagePreviousValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsagePreviousValidationError{}

// Validate checks the field values on UsageUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsageUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsageUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsageUpdateMultiError, or
// nil if none found.
func (m *UsageUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *UsageUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reported

	if len(errors) > 0 {
		return UsageUpdateMultiError(errors)
	}

	return nil
}

// UsageUpdateMultiError is an error wrapping multiple validation errors
// returned by UsageUpdate.ValidateAll() if the designated constraints aren't met.
type UsageUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsageUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsageUpdateMultiError) AllErrors() []error { return m }

// UsageUpdateValidationError is the validation error returned by
// UsageUpdate.Validate if the designated constraints aren't met.
type UsageUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageUpdateValidationError) ErrorName() string { return "UsageUpdateValidationError" }

// Error satisfies the builtin error interface
func (e UsageUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsageUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageUpdateValidationError{}
