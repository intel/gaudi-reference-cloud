// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network_subnet.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubnetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetCreateRequestMultiError, or nil if none found.
func (m *SubnetCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetCreateRequestMultiError(errors)
	}

	return nil
}

// SubnetCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SubnetCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SubnetCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetCreateRequestMultiError) AllErrors() []error { return m }

// SubnetCreateRequestValidationError is the validation error returned by
// SubnetCreateRequest.Validate if the designated constraints aren't met.
type SubnetCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetCreateRequestValidationError) ErrorName() string {
	return "SubnetCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetCreateRequestValidationError{}

// Validate checks the field values on SubnetUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetUpdateRequestMultiError, or nil if none found.
func (m *SubnetUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetUpdateRequestMultiError(errors)
	}

	return nil
}

// SubnetUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by SubnetUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type SubnetUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetUpdateRequestMultiError) AllErrors() []error { return m }

// SubnetUpdateRequestValidationError is the validation error returned by
// SubnetUpdateRequest.Validate if the designated constraints aren't met.
type SubnetUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetUpdateRequestValidationError) ErrorName() string {
	return "SubnetUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetUpdateRequestValidationError{}

// Validate checks the field values on SubnetGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubnetGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetGetRequestMultiError, or nil if none found.
func (m *SubnetGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetGetRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetGetRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetGetRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetGetRequestMultiError(errors)
	}

	return nil
}

// SubnetGetRequestMultiError is an error wrapping multiple validation errors
// returned by SubnetGetRequest.ValidateAll() if the designated constraints
// aren't met.
type SubnetGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetGetRequestMultiError) AllErrors() []error { return m }

// SubnetGetRequestValidationError is the validation error returned by
// SubnetGetRequest.Validate if the designated constraints aren't met.
type SubnetGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetGetRequestValidationError) ErrorName() string { return "SubnetGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubnetGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetGetRequestValidationError{}

// Validate checks the field values on SubnetSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetSearchRequestMultiError, or nil if none found.
func (m *SubnetSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetSearchRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetSearchRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetSearchRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetSearchRequestMultiError(errors)
	}

	return nil
}

// SubnetSearchRequestMultiError is an error wrapping multiple validation
// errors returned by SubnetSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type SubnetSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetSearchRequestMultiError) AllErrors() []error { return m }

// SubnetSearchRequestValidationError is the validation error returned by
// SubnetSearchRequest.Validate if the designated constraints aren't met.
type SubnetSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetSearchRequestValidationError) ErrorName() string {
	return "SubnetSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetSearchRequestValidationError{}

// Validate checks the field values on SubnetMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetMetadataSearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetMetadataSearchMultiError, or nil if none found.
func (m *SubnetMetadataSearch) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetMetadataSearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return SubnetMetadataSearchMultiError(errors)
	}

	return nil
}

// SubnetMetadataSearchMultiError is an error wrapping multiple validation
// errors returned by SubnetMetadataSearch.ValidateAll() if the designated
// constraints aren't met.
type SubnetMetadataSearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetMetadataSearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetMetadataSearchMultiError) AllErrors() []error { return m }

// SubnetMetadataSearchValidationError is the validation error returned by
// SubnetMetadataSearch.Validate if the designated constraints aren't met.
type SubnetMetadataSearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetMetadataSearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetMetadataSearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetMetadataSearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetMetadataSearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetMetadataSearchValidationError) ErrorName() string {
	return "SubnetMetadataSearchValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetMetadataSearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetMetadataSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetMetadataSearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetMetadataSearchValidationError{}

// Validate checks the field values on SubnetSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetSearchResponseMultiError, or nil if none found.
func (m *SubnetSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubnetSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubnetSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubnetSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubnetSearchResponseMultiError(errors)
	}

	return nil
}

// SubnetSearchResponseMultiError is an error wrapping multiple validation
// errors returned by SubnetSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type SubnetSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetSearchResponseMultiError) AllErrors() []error { return m }

// SubnetSearchResponseValidationError is the validation error returned by
// SubnetSearchResponse.Validate if the designated constraints aren't met.
type SubnetSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetSearchResponseValidationError) ErrorName() string {
	return "SubnetSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetSearchResponseValidationError{}

// Validate checks the field values on SubnetMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetMetadataCreateMultiError, or nil if none found.
func (m *SubnetMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return SubnetMetadataCreateMultiError(errors)
	}

	return nil
}

// SubnetMetadataCreateMultiError is an error wrapping multiple validation
// errors returned by SubnetMetadataCreate.ValidateAll() if the designated
// constraints aren't met.
type SubnetMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetMetadataCreateMultiError) AllErrors() []error { return m }

// SubnetMetadataCreateValidationError is the validation error returned by
// SubnetMetadataCreate.Validate if the designated constraints aren't met.
type SubnetMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetMetadataCreateValidationError) ErrorName() string {
	return "SubnetMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetMetadataCreateValidationError{}

// Validate checks the field values on VPCSubnet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCSubnet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCSubnet with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VPCSubnetMultiError, or nil
// if none found.
func (m *VPCSubnet) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCSubnet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCSubnetValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCSubnetValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCSubnetValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCSubnetValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCSubnetValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCSubnetValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCSubnetValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCSubnetValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCSubnetValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCSubnetMultiError(errors)
	}

	return nil
}

// VPCSubnetMultiError is an error wrapping multiple validation errors returned
// by VPCSubnet.ValidateAll() if the designated constraints aren't met.
type VPCSubnetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCSubnetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCSubnetMultiError) AllErrors() []error { return m }

// VPCSubnetValidationError is the validation error returned by
// VPCSubnet.Validate if the designated constraints aren't met.
type VPCSubnetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCSubnetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCSubnetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCSubnetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCSubnetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCSubnetValidationError) ErrorName() string { return "VPCSubnetValidationError" }

// Error satisfies the builtin error interface
func (e VPCSubnetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCSubnet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCSubnetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCSubnetValidationError{}

// Validate checks the field values on SubnetMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubnetMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubnetMetadataMultiError,
// or nil if none found.
func (m *SubnetMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetMetadataValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetMetadataMultiError(errors)
	}

	return nil
}

// SubnetMetadataMultiError is an error wrapping multiple validation errors
// returned by SubnetMetadata.ValidateAll() if the designated constraints
// aren't met.
type SubnetMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetMetadataMultiError) AllErrors() []error { return m }

// SubnetMetadataValidationError is the validation error returned by
// SubnetMetadata.Validate if the designated constraints aren't met.
type SubnetMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetMetadataValidationError) ErrorName() string { return "SubnetMetadataValidationError" }

// Error satisfies the builtin error interface
func (e SubnetMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetMetadataValidationError{}

// Validate checks the field values on SubnetSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubnetSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubnetSpecMultiError, or
// nil if none found.
func (m *SubnetSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CidrBlock

	// no validation rules for VpcId

	// no validation rules for AvailabilityZone

	if len(errors) > 0 {
		return SubnetSpecMultiError(errors)
	}

	return nil
}

// SubnetSpecMultiError is an error wrapping multiple validation errors
// returned by SubnetSpec.ValidateAll() if the designated constraints aren't met.
type SubnetSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetSpecMultiError) AllErrors() []error { return m }

// SubnetSpecValidationError is the validation error returned by
// SubnetSpec.Validate if the designated constraints aren't met.
type SubnetSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetSpecValidationError) ErrorName() string { return "SubnetSpecValidationError" }

// Error satisfies the builtin error interface
func (e SubnetSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetSpecValidationError{}

// Validate checks the field values on SubnetStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubnetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubnetStatusMultiError, or
// nil if none found.
func (m *SubnetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if len(errors) > 0 {
		return SubnetStatusMultiError(errors)
	}

	return nil
}

// SubnetStatusMultiError is an error wrapping multiple validation errors
// returned by SubnetStatus.ValidateAll() if the designated constraints aren't met.
type SubnetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetStatusMultiError) AllErrors() []error { return m }

// SubnetStatusValidationError is the validation error returned by
// SubnetStatus.Validate if the designated constraints aren't met.
type SubnetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetStatusValidationError) ErrorName() string { return "SubnetStatusValidationError" }

// Error satisfies the builtin error interface
func (e SubnetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetStatusValidationError{}

// Validate checks the field values on SubnetDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetDeleteRequestMultiError, or nil if none found.
func (m *SubnetDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubnetDeleteRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubnetDeleteRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetDeleteRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubnetDeleteRequestMultiError(errors)
	}

	return nil
}

// SubnetDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SubnetDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SubnetDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetDeleteRequestMultiError) AllErrors() []error { return m }

// SubnetDeleteRequestValidationError is the validation error returned by
// SubnetDeleteRequest.Validate if the designated constraints aren't met.
type SubnetDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetDeleteRequestValidationError) ErrorName() string {
	return "SubnetDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetDeleteRequestValidationError{}

// Validate checks the field values on SubnetMetadataReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetMetadataReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetMetadataReferenceMultiError, or nil if none found.
func (m *SubnetMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Reserved1

	switch v := m.NameOrId.(type) {
	case *SubnetMetadataReference_ResourceId:
		if v == nil {
			err := SubnetMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SubnetMetadataReferenceMultiError(errors)
	}

	return nil
}

// SubnetMetadataReferenceMultiError is an error wrapping multiple validation
// errors returned by SubnetMetadataReference.ValidateAll() if the designated
// constraints aren't met.
type SubnetMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetMetadataReferenceMultiError) AllErrors() []error { return m }

// SubnetMetadataReferenceValidationError is the validation error returned by
// SubnetMetadataReference.Validate if the designated constraints aren't met.
type SubnetMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetMetadataReferenceValidationError) ErrorName() string {
	return "SubnetMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetMetadataReferenceValidationError{}
