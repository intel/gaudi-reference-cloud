// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: storage.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileStorageServiceClient is the client API for FileStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageServiceClient interface {
	// Provision a new filesystem volume
	Create(ctx context.Context, in *FilesystemCreateRequest, opts ...grpc.CallOption) (*Filesystem, error)
	// Get the status of an filesystem.
	Get(ctx context.Context, in *FilesystemGetRequest, opts ...grpc.CallOption) (*Filesystem, error)
	// List filesystems.
	Search(ctx context.Context, in *FilesystemSearchRequest, opts ...grpc.CallOption) (*FilesystemSearchResponse, error)
	// Update the specification of an filesystem.
	Update(ctx context.Context, in *FilesystemUpdateRequest, opts ...grpc.CallOption) (*Filesystem, error)
	// Request deletion of an filesystem.
	Delete(ctx context.Context, in *FilesystemDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Request user cedentials for a filesystem.
	GetUser(ctx context.Context, in *FilesystemGetUserRequest, opts ...grpc.CallOption) (*FilesystemGetUserResponse, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fileStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageServiceClient(cc grpc.ClientConnInterface) FileStorageServiceClient {
	return &fileStorageServiceClient{cc}
}

func (c *fileStorageServiceClient) Create(ctx context.Context, in *FilesystemCreateRequest, opts ...grpc.CallOption) (*Filesystem, error) {
	out := new(Filesystem)
	err := c.cc.Invoke(ctx, "/proto.FileStorageService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) Get(ctx context.Context, in *FilesystemGetRequest, opts ...grpc.CallOption) (*Filesystem, error) {
	out := new(Filesystem)
	err := c.cc.Invoke(ctx, "/proto.FileStorageService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) Search(ctx context.Context, in *FilesystemSearchRequest, opts ...grpc.CallOption) (*FilesystemSearchResponse, error) {
	out := new(FilesystemSearchResponse)
	err := c.cc.Invoke(ctx, "/proto.FileStorageService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) Update(ctx context.Context, in *FilesystemUpdateRequest, opts ...grpc.CallOption) (*Filesystem, error) {
	out := new(Filesystem)
	err := c.cc.Invoke(ctx, "/proto.FileStorageService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) Delete(ctx context.Context, in *FilesystemDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FileStorageService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) GetUser(ctx context.Context, in *FilesystemGetUserRequest, opts ...grpc.CallOption) (*FilesystemGetUserResponse, error) {
	out := new(FilesystemGetUserResponse)
	err := c.cc.Invoke(ctx, "/proto.FileStorageService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FileStorageService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStorageServiceServer is the server API for FileStorageService service.
// All implementations must embed UnimplementedFileStorageServiceServer
// for forward compatibility
type FileStorageServiceServer interface {
	// Provision a new filesystem volume
	Create(context.Context, *FilesystemCreateRequest) (*Filesystem, error)
	// Get the status of an filesystem.
	Get(context.Context, *FilesystemGetRequest) (*Filesystem, error)
	// List filesystems.
	Search(context.Context, *FilesystemSearchRequest) (*FilesystemSearchResponse, error)
	// Update the specification of an filesystem.
	Update(context.Context, *FilesystemUpdateRequest) (*Filesystem, error)
	// Request deletion of an filesystem.
	Delete(context.Context, *FilesystemDeleteRequest) (*emptypb.Empty, error)
	// Request user cedentials for a filesystem.
	GetUser(context.Context, *FilesystemGetUserRequest) (*FilesystemGetUserResponse, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedFileStorageServiceServer()
}

// UnimplementedFileStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileStorageServiceServer struct {
}

func (UnimplementedFileStorageServiceServer) Create(context.Context, *FilesystemCreateRequest) (*Filesystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFileStorageServiceServer) Get(context.Context, *FilesystemGetRequest) (*Filesystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFileStorageServiceServer) Search(context.Context, *FilesystemSearchRequest) (*FilesystemSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFileStorageServiceServer) Update(context.Context, *FilesystemUpdateRequest) (*Filesystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFileStorageServiceServer) Delete(context.Context, *FilesystemDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileStorageServiceServer) GetUser(context.Context, *FilesystemGetUserRequest) (*FilesystemGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFileStorageServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileStorageServiceServer) mustEmbedUnimplementedFileStorageServiceServer() {}

// UnsafeFileStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServiceServer will
// result in compilation errors.
type UnsafeFileStorageServiceServer interface {
	mustEmbedUnimplementedFileStorageServiceServer()
}

func RegisterFileStorageServiceServer(s grpc.ServiceRegistrar, srv FileStorageServiceServer) {
	s.RegisterService(&FileStorageService_ServiceDesc, srv)
}

func _FileStorageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileStorageService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Create(ctx, req.(*FilesystemCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileStorageService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Get(ctx, req.(*FilesystemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileStorageService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Search(ctx, req.(*FilesystemSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileStorageService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Update(ctx, req.(*FilesystemUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileStorageService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Delete(ctx, req.(*FilesystemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileStorageService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).GetUser(ctx, req.(*FilesystemGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorageService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileStorageService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStorageService_ServiceDesc is the grpc.ServiceDesc for FileStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileStorageService",
	HandlerType: (*FileStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FileStorageService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FileStorageService_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _FileStorageService_Search_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FileStorageService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileStorageService_Delete_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _FileStorageService_GetUser_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FileStorageService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

// ObjectStorageServiceClient is the client API for ObjectStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectStorageServiceClient interface {
	// Provision a new s3 bucket
	CreateBucket(ctx context.Context, in *ObjectBucketCreateRequest, opts ...grpc.CallOption) (*ObjectBucket, error)
	// Get the status of an s3 bucket.
	GetBucket(ctx context.Context, in *ObjectBucketGetRequest, opts ...grpc.CallOption) (*ObjectBucket, error)
	// List buckets.
	SearchBucket(ctx context.Context, in *ObjectBucketSearchRequest, opts ...grpc.CallOption) (*ObjectBucketSearchResponse, error)
	// Request deletion of a bucket.
	DeleteBucket(ctx context.Context, in *ObjectBucketDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Request bucket lifecycle policy
	CreateBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleCreateRequest, opts ...grpc.CallOption) (*BucketLifecycleRule, error)
	// Get bucket lifecycle policy
	GetBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleGetRequest, opts ...grpc.CallOption) (*BucketLifecycleRule, error)
	// List bucket lifecycle policy
	SearchBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleSearchRequest, opts ...grpc.CallOption) (*BucketLifecycleRuleSearchResponse, error)
	// Update bucket lifecycle policy
	UpdateBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleUpdateRequest, opts ...grpc.CallOption) (*BucketLifecycleRule, error)
	// Delete bucket lifecycle policy
	DeleteBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create object service user
	CreateObjectUser(ctx context.Context, in *CreateObjectUserRequest, opts ...grpc.CallOption) (*ObjectUser, error)
	// Get object service user
	GetObjectUser(ctx context.Context, in *ObjectUserGetRequest, opts ...grpc.CallOption) (*ObjectUser, error)
	// List all object service user
	SearchObjectUser(ctx context.Context, in *ObjectUserSearchRequest, opts ...grpc.CallOption) (*ObjectUserSearchResponse, error)
	// Delete object service user
	DeleteObjectUser(ctx context.Context, in *ObjectUserDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update policies for object service user
	UpdateObjectUserPolicy(ctx context.Context, in *ObjectUserUpdateRequest, opts ...grpc.CallOption) (*ObjectUser, error)
	// Update credentials for object service user
	UpdateObjectUserCredentials(ctx context.Context, in *ObjectUserUpdateCredsRequest, opts ...grpc.CallOption) (*ObjectUser, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type objectStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectStorageServiceClient(cc grpc.ClientConnInterface) ObjectStorageServiceClient {
	return &objectStorageServiceClient{cc}
}

func (c *objectStorageServiceClient) CreateBucket(ctx context.Context, in *ObjectBucketCreateRequest, opts ...grpc.CallOption) (*ObjectBucket, error) {
	out := new(ObjectBucket)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetBucket(ctx context.Context, in *ObjectBucketGetRequest, opts ...grpc.CallOption) (*ObjectBucket, error) {
	out := new(ObjectBucket)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/GetBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) SearchBucket(ctx context.Context, in *ObjectBucketSearchRequest, opts ...grpc.CallOption) (*ObjectBucketSearchResponse, error) {
	out := new(ObjectBucketSearchResponse)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/SearchBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteBucket(ctx context.Context, in *ObjectBucketDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CreateBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleCreateRequest, opts ...grpc.CallOption) (*BucketLifecycleRule, error) {
	out := new(BucketLifecycleRule)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/CreateBucketLifecycleRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleGetRequest, opts ...grpc.CallOption) (*BucketLifecycleRule, error) {
	out := new(BucketLifecycleRule)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/GetBucketLifecycleRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) SearchBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleSearchRequest, opts ...grpc.CallOption) (*BucketLifecycleRuleSearchResponse, error) {
	out := new(BucketLifecycleRuleSearchResponse)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/SearchBucketLifecycleRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UpdateBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleUpdateRequest, opts ...grpc.CallOption) (*BucketLifecycleRule, error) {
	out := new(BucketLifecycleRule)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/UpdateBucketLifecycleRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteBucketLifecycleRule(ctx context.Context, in *BucketLifecycleRuleDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/DeleteBucketLifecycleRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CreateObjectUser(ctx context.Context, in *CreateObjectUserRequest, opts ...grpc.CallOption) (*ObjectUser, error) {
	out := new(ObjectUser)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/CreateObjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetObjectUser(ctx context.Context, in *ObjectUserGetRequest, opts ...grpc.CallOption) (*ObjectUser, error) {
	out := new(ObjectUser)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/GetObjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) SearchObjectUser(ctx context.Context, in *ObjectUserSearchRequest, opts ...grpc.CallOption) (*ObjectUserSearchResponse, error) {
	out := new(ObjectUserSearchResponse)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/SearchObjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteObjectUser(ctx context.Context, in *ObjectUserDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/DeleteObjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UpdateObjectUserPolicy(ctx context.Context, in *ObjectUserUpdateRequest, opts ...grpc.CallOption) (*ObjectUser, error) {
	out := new(ObjectUser)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/UpdateObjectUserPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UpdateObjectUserCredentials(ctx context.Context, in *ObjectUserUpdateCredsRequest, opts ...grpc.CallOption) (*ObjectUser, error) {
	out := new(ObjectUser)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/UpdateObjectUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectStorageServiceServer is the server API for ObjectStorageService service.
// All implementations must embed UnimplementedObjectStorageServiceServer
// for forward compatibility
type ObjectStorageServiceServer interface {
	// Provision a new s3 bucket
	CreateBucket(context.Context, *ObjectBucketCreateRequest) (*ObjectBucket, error)
	// Get the status of an s3 bucket.
	GetBucket(context.Context, *ObjectBucketGetRequest) (*ObjectBucket, error)
	// List buckets.
	SearchBucket(context.Context, *ObjectBucketSearchRequest) (*ObjectBucketSearchResponse, error)
	// Request deletion of a bucket.
	DeleteBucket(context.Context, *ObjectBucketDeleteRequest) (*emptypb.Empty, error)
	// Request bucket lifecycle policy
	CreateBucketLifecycleRule(context.Context, *BucketLifecycleRuleCreateRequest) (*BucketLifecycleRule, error)
	// Get bucket lifecycle policy
	GetBucketLifecycleRule(context.Context, *BucketLifecycleRuleGetRequest) (*BucketLifecycleRule, error)
	// List bucket lifecycle policy
	SearchBucketLifecycleRule(context.Context, *BucketLifecycleRuleSearchRequest) (*BucketLifecycleRuleSearchResponse, error)
	// Update bucket lifecycle policy
	UpdateBucketLifecycleRule(context.Context, *BucketLifecycleRuleUpdateRequest) (*BucketLifecycleRule, error)
	// Delete bucket lifecycle policy
	DeleteBucketLifecycleRule(context.Context, *BucketLifecycleRuleDeleteRequest) (*emptypb.Empty, error)
	// Create object service user
	CreateObjectUser(context.Context, *CreateObjectUserRequest) (*ObjectUser, error)
	// Get object service user
	GetObjectUser(context.Context, *ObjectUserGetRequest) (*ObjectUser, error)
	// List all object service user
	SearchObjectUser(context.Context, *ObjectUserSearchRequest) (*ObjectUserSearchResponse, error)
	// Delete object service user
	DeleteObjectUser(context.Context, *ObjectUserDeleteRequest) (*emptypb.Empty, error)
	// Update policies for object service user
	UpdateObjectUserPolicy(context.Context, *ObjectUserUpdateRequest) (*ObjectUser, error)
	// Update credentials for object service user
	UpdateObjectUserCredentials(context.Context, *ObjectUserUpdateCredsRequest) (*ObjectUser, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedObjectStorageServiceServer()
}

// UnimplementedObjectStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectStorageServiceServer struct {
}

func (UnimplementedObjectStorageServiceServer) CreateBucket(context.Context, *ObjectBucketCreateRequest) (*ObjectBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetBucket(context.Context, *ObjectBucketGetRequest) (*ObjectBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucket not implemented")
}
func (UnimplementedObjectStorageServiceServer) SearchBucket(context.Context, *ObjectBucketSearchRequest) (*ObjectBucketSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBucket not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteBucket(context.Context, *ObjectBucketDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedObjectStorageServiceServer) CreateBucketLifecycleRule(context.Context, *BucketLifecycleRuleCreateRequest) (*BucketLifecycleRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketLifecycleRule not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetBucketLifecycleRule(context.Context, *BucketLifecycleRuleGetRequest) (*BucketLifecycleRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketLifecycleRule not implemented")
}
func (UnimplementedObjectStorageServiceServer) SearchBucketLifecycleRule(context.Context, *BucketLifecycleRuleSearchRequest) (*BucketLifecycleRuleSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBucketLifecycleRule not implemented")
}
func (UnimplementedObjectStorageServiceServer) UpdateBucketLifecycleRule(context.Context, *BucketLifecycleRuleUpdateRequest) (*BucketLifecycleRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketLifecycleRule not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteBucketLifecycleRule(context.Context, *BucketLifecycleRuleDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketLifecycleRule not implemented")
}
func (UnimplementedObjectStorageServiceServer) CreateObjectUser(context.Context, *CreateObjectUserRequest) (*ObjectUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectUser not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObjectUser(context.Context, *ObjectUserGetRequest) (*ObjectUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectUser not implemented")
}
func (UnimplementedObjectStorageServiceServer) SearchObjectUser(context.Context, *ObjectUserSearchRequest) (*ObjectUserSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchObjectUser not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObjectUser(context.Context, *ObjectUserDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectUser not implemented")
}
func (UnimplementedObjectStorageServiceServer) UpdateObjectUserPolicy(context.Context, *ObjectUserUpdateRequest) (*ObjectUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectUserPolicy not implemented")
}
func (UnimplementedObjectStorageServiceServer) UpdateObjectUserCredentials(context.Context, *ObjectUserUpdateCredsRequest) (*ObjectUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectUserCredentials not implemented")
}
func (UnimplementedObjectStorageServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedObjectStorageServiceServer) mustEmbedUnimplementedObjectStorageServiceServer() {}

// UnsafeObjectStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectStorageServiceServer will
// result in compilation errors.
type UnsafeObjectStorageServiceServer interface {
	mustEmbedUnimplementedObjectStorageServiceServer()
}

func RegisterObjectStorageServiceServer(s grpc.ServiceRegistrar, srv ObjectStorageServiceServer) {
	s.RegisterService(&ObjectStorageService_ServiceDesc, srv)
}

func _ObjectStorageService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CreateBucket(ctx, req.(*ObjectBucketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/GetBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetBucket(ctx, req.(*ObjectBucketGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_SearchBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).SearchBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/SearchBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).SearchBucket(ctx, req.(*ObjectBucketSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteBucket(ctx, req.(*ObjectBucketDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CreateBucketLifecycleRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CreateBucketLifecycleRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/CreateBucketLifecycleRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CreateBucketLifecycleRule(ctx, req.(*BucketLifecycleRuleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetBucketLifecycleRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetBucketLifecycleRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/GetBucketLifecycleRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetBucketLifecycleRule(ctx, req.(*BucketLifecycleRuleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_SearchBucketLifecycleRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).SearchBucketLifecycleRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/SearchBucketLifecycleRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).SearchBucketLifecycleRule(ctx, req.(*BucketLifecycleRuleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UpdateBucketLifecycleRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UpdateBucketLifecycleRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/UpdateBucketLifecycleRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UpdateBucketLifecycleRule(ctx, req.(*BucketLifecycleRuleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteBucketLifecycleRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteBucketLifecycleRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/DeleteBucketLifecycleRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteBucketLifecycleRule(ctx, req.(*BucketLifecycleRuleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CreateObjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CreateObjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/CreateObjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CreateObjectUser(ctx, req.(*CreateObjectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetObjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetObjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/GetObjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetObjectUser(ctx, req.(*ObjectUserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_SearchObjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).SearchObjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/SearchObjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).SearchObjectUser(ctx, req.(*ObjectUserSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteObjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/DeleteObjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObjectUser(ctx, req.(*ObjectUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UpdateObjectUserPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UpdateObjectUserPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/UpdateObjectUserPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UpdateObjectUserPolicy(ctx, req.(*ObjectUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UpdateObjectUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserUpdateCredsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UpdateObjectUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/UpdateObjectUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UpdateObjectUserCredentials(ctx, req.(*ObjectUserUpdateCredsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectStorageService_ServiceDesc is the grpc.ServiceDesc for ObjectStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ObjectStorageService",
	HandlerType: (*ObjectStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _ObjectStorageService_CreateBucket_Handler,
		},
		{
			MethodName: "GetBucket",
			Handler:    _ObjectStorageService_GetBucket_Handler,
		},
		{
			MethodName: "SearchBucket",
			Handler:    _ObjectStorageService_SearchBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _ObjectStorageService_DeleteBucket_Handler,
		},
		{
			MethodName: "CreateBucketLifecycleRule",
			Handler:    _ObjectStorageService_CreateBucketLifecycleRule_Handler,
		},
		{
			MethodName: "GetBucketLifecycleRule",
			Handler:    _ObjectStorageService_GetBucketLifecycleRule_Handler,
		},
		{
			MethodName: "SearchBucketLifecycleRule",
			Handler:    _ObjectStorageService_SearchBucketLifecycleRule_Handler,
		},
		{
			MethodName: "UpdateBucketLifecycleRule",
			Handler:    _ObjectStorageService_UpdateBucketLifecycleRule_Handler,
		},
		{
			MethodName: "DeleteBucketLifecycleRule",
			Handler:    _ObjectStorageService_DeleteBucketLifecycleRule_Handler,
		},
		{
			MethodName: "CreateObjectUser",
			Handler:    _ObjectStorageService_CreateObjectUser_Handler,
		},
		{
			MethodName: "GetObjectUser",
			Handler:    _ObjectStorageService_GetObjectUser_Handler,
		},
		{
			MethodName: "SearchObjectUser",
			Handler:    _ObjectStorageService_SearchObjectUser_Handler,
		},
		{
			MethodName: "DeleteObjectUser",
			Handler:    _ObjectStorageService_DeleteObjectUser_Handler,
		},
		{
			MethodName: "UpdateObjectUserPolicy",
			Handler:    _ObjectStorageService_UpdateObjectUserPolicy_Handler,
		},
		{
			MethodName: "UpdateObjectUserCredentials",
			Handler:    _ObjectStorageService_UpdateObjectUserCredentials_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ObjectStorageService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
