// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: network_subnet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubnetServiceClient is the client API for SubnetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubnetServiceClient interface {
	// Create a Subnet.
	Create(ctx context.Context, in *SubnetCreateRequest, opts ...grpc.CallOption) (*VPCSubnet, error)
	// Update a Subnet.
	Update(ctx context.Context, in *SubnetUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a subnet record from DB
	Get(ctx context.Context, in *SubnetGetRequest, opts ...grpc.CallOption) (*VPCSubnet, error)
	// Get a list of stored Subnets.
	Search(ctx context.Context, in *SubnetSearchRequest, opts ...grpc.CallOption) (*SubnetSearchResponse, error)
	// Delete a Subnet from the DB.
	// Returns FailedPrecondition if Subnet has any resources associated like routers, subnets, ports or security groups.
	Delete(ctx context.Context, in *SubnetDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type subnetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubnetServiceClient(cc grpc.ClientConnInterface) SubnetServiceClient {
	return &subnetServiceClient{cc}
}

func (c *subnetServiceClient) Create(ctx context.Context, in *SubnetCreateRequest, opts ...grpc.CallOption) (*VPCSubnet, error) {
	out := new(VPCSubnet)
	err := c.cc.Invoke(ctx, "/proto.SubnetService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) Update(ctx context.Context, in *SubnetUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SubnetService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) Get(ctx context.Context, in *SubnetGetRequest, opts ...grpc.CallOption) (*VPCSubnet, error) {
	out := new(VPCSubnet)
	err := c.cc.Invoke(ctx, "/proto.SubnetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) Search(ctx context.Context, in *SubnetSearchRequest, opts ...grpc.CallOption) (*SubnetSearchResponse, error) {
	out := new(SubnetSearchResponse)
	err := c.cc.Invoke(ctx, "/proto.SubnetService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) Delete(ctx context.Context, in *SubnetDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SubnetService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SubnetService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubnetServiceServer is the server API for SubnetService service.
// All implementations must embed UnimplementedSubnetServiceServer
// for forward compatibility
type SubnetServiceServer interface {
	// Create a Subnet.
	Create(context.Context, *SubnetCreateRequest) (*VPCSubnet, error)
	// Update a Subnet.
	Update(context.Context, *SubnetUpdateRequest) (*emptypb.Empty, error)
	// Retrieve a subnet record from DB
	Get(context.Context, *SubnetGetRequest) (*VPCSubnet, error)
	// Get a list of stored Subnets.
	Search(context.Context, *SubnetSearchRequest) (*SubnetSearchResponse, error)
	// Delete a Subnet from the DB.
	// Returns FailedPrecondition if Subnet has any resources associated like routers, subnets, ports or security groups.
	Delete(context.Context, *SubnetDeleteRequest) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedSubnetServiceServer()
}

// UnimplementedSubnetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubnetServiceServer struct {
}

func (UnimplementedSubnetServiceServer) Create(context.Context, *SubnetCreateRequest) (*VPCSubnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubnetServiceServer) Update(context.Context, *SubnetUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubnetServiceServer) Get(context.Context, *SubnetGetRequest) (*VPCSubnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSubnetServiceServer) Search(context.Context, *SubnetSearchRequest) (*SubnetSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSubnetServiceServer) Delete(context.Context, *SubnetDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSubnetServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSubnetServiceServer) mustEmbedUnimplementedSubnetServiceServer() {}

// UnsafeSubnetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubnetServiceServer will
// result in compilation errors.
type UnsafeSubnetServiceServer interface {
	mustEmbedUnimplementedSubnetServiceServer()
}

func RegisterSubnetServiceServer(s grpc.ServiceRegistrar, srv SubnetServiceServer) {
	s.RegisterService(&SubnetService_ServiceDesc, srv)
}

func _SubnetService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).Create(ctx, req.(*SubnetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).Update(ctx, req.(*SubnetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).Get(ctx, req.(*SubnetGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).Search(ctx, req.(*SubnetSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).Delete(ctx, req.(*SubnetDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SubnetService_ServiceDesc is the grpc.ServiceDesc for SubnetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubnetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SubnetService",
	HandlerType: (*SubnetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SubnetService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubnetService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SubnetService_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _SubnetService_Search_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubnetService_Delete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SubnetService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_subnet.proto",
}
