// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: authz.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthzServiceClient is the client API for AuthzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthzServiceClient interface {
	// Verifies if the user, based on the provided token, and http request information, has the necessary authorization to perform the specified action.
	Check(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	// Internal verification call to determine if a specific user has the required authorization to execute the given action. This is intended for use by internal clients.
	CheckInternal(ctx context.Context, in *AuthorizationRequestInternal, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	// Check if the user has the necessary authorization to perform the specified action given multiple resource IDs.
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	// Internal verification call if a specific user has the necessary authorization to perform the specified action given multiple resource IDs. This is intended for use by internal clients.
	LookupInternal(ctx context.Context, in *LookupRequestInternal, opts ...grpc.CallOption) (*LookupResponse, error)
	// Retrieves the actions that a user can perform on a resource. Requires a user token for authorization.
	Actions(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*ActionsResponse, error)
	CreateCloudAccountRole(ctx context.Context, in *CloudAccountRole, opts ...grpc.CallOption) (*CloudAccountRole, error)
	QueryCloudAccountRoles(ctx context.Context, in *CloudAccountRoleQuery, opts ...grpc.CallOption) (*CloudAccountRoles, error)
	GetCloudAccountRole(ctx context.Context, in *CloudAccountRoleId, opts ...grpc.CallOption) (*CloudAccountRole, error)
	UpdateCloudAccountRole(ctx context.Context, in *CloudAccountRoleUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveCloudAccountRole(ctx context.Context, in *CloudAccountRoleId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddUserToCloudAccountRole(ctx context.Context, in *CloudAccountRoleUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCloudAccountRolesToUser(ctx context.Context, in *CloudAccountRolesUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveCloudAccountRolesFromUser(ctx context.Context, in *CloudAccountRolesUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveResourceFromCloudAccountRole(ctx context.Context, in *CloudAccountRoleResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUserFromCloudAccountRole(ctx context.Context, in *CloudAccountRoleUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddPermissionToCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePermissionCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemovePermissionFromCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssignSystemRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnassignSystemRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SystemRoleExists(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*SystemRoleExistResponse, error)
	RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListResourceDefinition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResourceDefinitions, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserDetailed, error)
	ListUsersByCloudAccount(ctx context.Context, in *ListUsersByCloudAccountRequest, opts ...grpc.CallOption) (*ListUsersByCloudAccountResponse, error)
	// Internal method called only by cloudaccount-enroll
	DefaultCloudAccountRoleAssigned(ctx context.Context, in *DefaultCloudAccountRoleAssignedRequest, opts ...grpc.CallOption) (*DefaultCloudAccountRoleAssignedResponse, error)
	// Internal method called only by cloudaccount-enroll
	AssignDefaultCloudAccountRole(ctx context.Context, in *AssignDefaultCloudAccountRoleRequest, opts ...grpc.CallOption) (*CloudAccountRole, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthzServiceClient(cc grpc.ClientConnInterface) AuthzServiceClient {
	return &authzServiceClient{cc}
}

func (c *authzServiceClient) Check(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) CheckInternal(ctx context.Context, in *AuthorizationRequestInternal, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/CheckInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) LookupInternal(ctx context.Context, in *LookupRequestInternal, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/LookupInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) Actions(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*ActionsResponse, error) {
	out := new(ActionsResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/Actions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) CreateCloudAccountRole(ctx context.Context, in *CloudAccountRole, opts ...grpc.CallOption) (*CloudAccountRole, error) {
	out := new(CloudAccountRole)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/CreateCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) QueryCloudAccountRoles(ctx context.Context, in *CloudAccountRoleQuery, opts ...grpc.CallOption) (*CloudAccountRoles, error) {
	out := new(CloudAccountRoles)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/QueryCloudAccountRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) GetCloudAccountRole(ctx context.Context, in *CloudAccountRoleId, opts ...grpc.CallOption) (*CloudAccountRole, error) {
	out := new(CloudAccountRole)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/GetCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) UpdateCloudAccountRole(ctx context.Context, in *CloudAccountRoleUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/UpdateCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) RemoveCloudAccountRole(ctx context.Context, in *CloudAccountRoleId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/RemoveCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) AddUserToCloudAccountRole(ctx context.Context, in *CloudAccountRoleUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/AddUserToCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) AddCloudAccountRolesToUser(ctx context.Context, in *CloudAccountRolesUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/AddCloudAccountRolesToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) RemoveCloudAccountRolesFromUser(ctx context.Context, in *CloudAccountRolesUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/RemoveCloudAccountRolesFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) RemoveResourceFromCloudAccountRole(ctx context.Context, in *CloudAccountRoleResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/RemoveResourceFromCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) RemoveUserFromCloudAccountRole(ctx context.Context, in *CloudAccountRoleUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/RemoveUserFromCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) AddPermissionToCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/AddPermissionToCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) UpdatePermissionCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/UpdatePermissionCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) RemovePermissionFromCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/RemovePermissionFromCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) AssignSystemRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/AssignSystemRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) UnassignSystemRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/UnassignSystemRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) SystemRoleExists(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*SystemRoleExistResponse, error) {
	out := new(SystemRoleExistResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/SystemRoleExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) CreatePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) ListResourceDefinition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResourceDefinitions, error) {
	out := new(ResourceDefinitions)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/ListResourceDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserDetailed, error) {
	out := new(UserDetailed)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) ListUsersByCloudAccount(ctx context.Context, in *ListUsersByCloudAccountRequest, opts ...grpc.CallOption) (*ListUsersByCloudAccountResponse, error) {
	out := new(ListUsersByCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/ListUsersByCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) DefaultCloudAccountRoleAssigned(ctx context.Context, in *DefaultCloudAccountRoleAssignedRequest, opts ...grpc.CallOption) (*DefaultCloudAccountRoleAssignedResponse, error) {
	out := new(DefaultCloudAccountRoleAssignedResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/DefaultCloudAccountRoleAssigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) AssignDefaultCloudAccountRole(ctx context.Context, in *AssignDefaultCloudAccountRoleRequest, opts ...grpc.CallOption) (*CloudAccountRole, error) {
	out := new(CloudAccountRole)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/AssignDefaultCloudAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthzService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthzServiceServer is the server API for AuthzService service.
// All implementations must embed UnimplementedAuthzServiceServer
// for forward compatibility
type AuthzServiceServer interface {
	// Verifies if the user, based on the provided token, and http request information, has the necessary authorization to perform the specified action.
	Check(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	// Internal verification call to determine if a specific user has the required authorization to execute the given action. This is intended for use by internal clients.
	CheckInternal(context.Context, *AuthorizationRequestInternal) (*AuthorizationResponse, error)
	// Check if the user has the necessary authorization to perform the specified action given multiple resource IDs.
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	// Internal verification call if a specific user has the necessary authorization to perform the specified action given multiple resource IDs. This is intended for use by internal clients.
	LookupInternal(context.Context, *LookupRequestInternal) (*LookupResponse, error)
	// Retrieves the actions that a user can perform on a resource. Requires a user token for authorization.
	Actions(context.Context, *ActionsRequest) (*ActionsResponse, error)
	CreateCloudAccountRole(context.Context, *CloudAccountRole) (*CloudAccountRole, error)
	QueryCloudAccountRoles(context.Context, *CloudAccountRoleQuery) (*CloudAccountRoles, error)
	GetCloudAccountRole(context.Context, *CloudAccountRoleId) (*CloudAccountRole, error)
	UpdateCloudAccountRole(context.Context, *CloudAccountRoleUpdate) (*emptypb.Empty, error)
	RemoveCloudAccountRole(context.Context, *CloudAccountRoleId) (*emptypb.Empty, error)
	AddUserToCloudAccountRole(context.Context, *CloudAccountRoleUserRequest) (*emptypb.Empty, error)
	AddCloudAccountRolesToUser(context.Context, *CloudAccountRolesUserRequest) (*emptypb.Empty, error)
	RemoveCloudAccountRolesFromUser(context.Context, *CloudAccountRolesUserRequest) (*emptypb.Empty, error)
	RemoveResourceFromCloudAccountRole(context.Context, *CloudAccountRoleResourceRequest) (*emptypb.Empty, error)
	RemoveUserFromCloudAccountRole(context.Context, *CloudAccountRoleUserRequest) (*emptypb.Empty, error)
	AddPermissionToCloudAccountRole(context.Context, *CloudAccountRolePermissionRequest) (*emptypb.Empty, error)
	UpdatePermissionCloudAccountRole(context.Context, *CloudAccountRolePermissionRequest) (*emptypb.Empty, error)
	RemovePermissionFromCloudAccountRole(context.Context, *CloudAccountRolePermissionId) (*emptypb.Empty, error)
	AssignSystemRole(context.Context, *RoleRequest) (*emptypb.Empty, error)
	UnassignSystemRole(context.Context, *RoleRequest) (*emptypb.Empty, error)
	SystemRoleExists(context.Context, *RoleRequest) (*SystemRoleExistResponse, error)
	RemovePolicy(context.Context, *PolicyRequest) (*emptypb.Empty, error)
	CreatePolicy(context.Context, *PolicyRequest) (*emptypb.Empty, error)
	ListResourceDefinition(context.Context, *emptypb.Empty) (*ResourceDefinitions, error)
	GetUser(context.Context, *GetUserRequest) (*UserDetailed, error)
	ListUsersByCloudAccount(context.Context, *ListUsersByCloudAccountRequest) (*ListUsersByCloudAccountResponse, error)
	// Internal method called only by cloudaccount-enroll
	DefaultCloudAccountRoleAssigned(context.Context, *DefaultCloudAccountRoleAssignedRequest) (*DefaultCloudAccountRoleAssignedResponse, error)
	// Internal method called only by cloudaccount-enroll
	AssignDefaultCloudAccountRole(context.Context, *AssignDefaultCloudAccountRoleRequest) (*CloudAccountRole, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthzServiceServer()
}

// UnimplementedAuthzServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthzServiceServer struct {
}

func (UnimplementedAuthzServiceServer) Check(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedAuthzServiceServer) CheckInternal(context.Context, *AuthorizationRequestInternal) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInternal not implemented")
}
func (UnimplementedAuthzServiceServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedAuthzServiceServer) LookupInternal(context.Context, *LookupRequestInternal) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupInternal not implemented")
}
func (UnimplementedAuthzServiceServer) Actions(context.Context, *ActionsRequest) (*ActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actions not implemented")
}
func (UnimplementedAuthzServiceServer) CreateCloudAccountRole(context.Context, *CloudAccountRole) (*CloudAccountRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) QueryCloudAccountRoles(context.Context, *CloudAccountRoleQuery) (*CloudAccountRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCloudAccountRoles not implemented")
}
func (UnimplementedAuthzServiceServer) GetCloudAccountRole(context.Context, *CloudAccountRoleId) (*CloudAccountRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) UpdateCloudAccountRole(context.Context, *CloudAccountRoleUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) RemoveCloudAccountRole(context.Context, *CloudAccountRoleId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) AddUserToCloudAccountRole(context.Context, *CloudAccountRoleUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) AddCloudAccountRolesToUser(context.Context, *CloudAccountRolesUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCloudAccountRolesToUser not implemented")
}
func (UnimplementedAuthzServiceServer) RemoveCloudAccountRolesFromUser(context.Context, *CloudAccountRolesUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCloudAccountRolesFromUser not implemented")
}
func (UnimplementedAuthzServiceServer) RemoveResourceFromCloudAccountRole(context.Context, *CloudAccountRoleResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResourceFromCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) RemoveUserFromCloudAccountRole(context.Context, *CloudAccountRoleUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) AddPermissionToCloudAccountRole(context.Context, *CloudAccountRolePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionToCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) UpdatePermissionCloudAccountRole(context.Context, *CloudAccountRolePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissionCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) RemovePermissionFromCloudAccountRole(context.Context, *CloudAccountRolePermissionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionFromCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) AssignSystemRole(context.Context, *RoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignSystemRole not implemented")
}
func (UnimplementedAuthzServiceServer) UnassignSystemRole(context.Context, *RoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignSystemRole not implemented")
}
func (UnimplementedAuthzServiceServer) SystemRoleExists(context.Context, *RoleRequest) (*SystemRoleExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemRoleExists not implemented")
}
func (UnimplementedAuthzServiceServer) RemovePolicy(context.Context, *PolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedAuthzServiceServer) CreatePolicy(context.Context, *PolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedAuthzServiceServer) ListResourceDefinition(context.Context, *emptypb.Empty) (*ResourceDefinitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceDefinition not implemented")
}
func (UnimplementedAuthzServiceServer) GetUser(context.Context, *GetUserRequest) (*UserDetailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthzServiceServer) ListUsersByCloudAccount(context.Context, *ListUsersByCloudAccountRequest) (*ListUsersByCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersByCloudAccount not implemented")
}
func (UnimplementedAuthzServiceServer) DefaultCloudAccountRoleAssigned(context.Context, *DefaultCloudAccountRoleAssignedRequest) (*DefaultCloudAccountRoleAssignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultCloudAccountRoleAssigned not implemented")
}
func (UnimplementedAuthzServiceServer) AssignDefaultCloudAccountRole(context.Context, *AssignDefaultCloudAccountRoleRequest) (*CloudAccountRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDefaultCloudAccountRole not implemented")
}
func (UnimplementedAuthzServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAuthzServiceServer) mustEmbedUnimplementedAuthzServiceServer() {}

// UnsafeAuthzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthzServiceServer will
// result in compilation errors.
type UnsafeAuthzServiceServer interface {
	mustEmbedUnimplementedAuthzServiceServer()
}

func RegisterAuthzServiceServer(s grpc.ServiceRegistrar, srv AuthzServiceServer) {
	s.RegisterService(&AuthzService_ServiceDesc, srv)
}

func _AuthzService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).Check(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_CheckInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequestInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).CheckInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/CheckInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).CheckInternal(ctx, req.(*AuthorizationRequestInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_LookupInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequestInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).LookupInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/LookupInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).LookupInternal(ctx, req.(*LookupRequestInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_Actions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).Actions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/Actions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).Actions(ctx, req.(*ActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_CreateCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).CreateCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/CreateCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).CreateCloudAccountRole(ctx, req.(*CloudAccountRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_QueryCloudAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRoleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).QueryCloudAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/QueryCloudAccountRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).QueryCloudAccountRoles(ctx, req.(*CloudAccountRoleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_GetCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).GetCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/GetCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).GetCloudAccountRole(ctx, req.(*CloudAccountRoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_UpdateCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRoleUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).UpdateCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/UpdateCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).UpdateCloudAccountRole(ctx, req.(*CloudAccountRoleUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_RemoveCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).RemoveCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/RemoveCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).RemoveCloudAccountRole(ctx, req.(*CloudAccountRoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_AddUserToCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).AddUserToCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/AddUserToCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).AddUserToCloudAccountRole(ctx, req.(*CloudAccountRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_AddCloudAccountRolesToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRolesUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).AddCloudAccountRolesToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/AddCloudAccountRolesToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).AddCloudAccountRolesToUser(ctx, req.(*CloudAccountRolesUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_RemoveCloudAccountRolesFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRolesUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).RemoveCloudAccountRolesFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/RemoveCloudAccountRolesFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).RemoveCloudAccountRolesFromUser(ctx, req.(*CloudAccountRolesUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_RemoveResourceFromCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRoleResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).RemoveResourceFromCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/RemoveResourceFromCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).RemoveResourceFromCloudAccountRole(ctx, req.(*CloudAccountRoleResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_RemoveUserFromCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).RemoveUserFromCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/RemoveUserFromCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).RemoveUserFromCloudAccountRole(ctx, req.(*CloudAccountRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_AddPermissionToCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).AddPermissionToCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/AddPermissionToCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).AddPermissionToCloudAccountRole(ctx, req.(*CloudAccountRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_UpdatePermissionCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).UpdatePermissionCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/UpdatePermissionCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).UpdatePermissionCloudAccountRole(ctx, req.(*CloudAccountRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_RemovePermissionFromCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountRolePermissionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).RemovePermissionFromCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/RemovePermissionFromCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).RemovePermissionFromCloudAccountRole(ctx, req.(*CloudAccountRolePermissionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_AssignSystemRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).AssignSystemRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/AssignSystemRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).AssignSystemRole(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_UnassignSystemRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).UnassignSystemRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/UnassignSystemRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).UnassignSystemRole(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_SystemRoleExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).SystemRoleExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/SystemRoleExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).SystemRoleExists(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).RemovePolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).CreatePolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_ListResourceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).ListResourceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/ListResourceDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).ListResourceDefinition(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_ListUsersByCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersByCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).ListUsersByCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/ListUsersByCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).ListUsersByCloudAccount(ctx, req.(*ListUsersByCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_DefaultCloudAccountRoleAssigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultCloudAccountRoleAssignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).DefaultCloudAccountRoleAssigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/DefaultCloudAccountRoleAssigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).DefaultCloudAccountRoleAssigned(ctx, req.(*DefaultCloudAccountRoleAssignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_AssignDefaultCloudAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDefaultCloudAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).AssignDefaultCloudAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/AssignDefaultCloudAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).AssignDefaultCloudAccountRole(ctx, req.(*AssignDefaultCloudAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthzService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthzService_ServiceDesc is the grpc.ServiceDesc for AuthzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthzService",
	HandlerType: (*AuthzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _AuthzService_Check_Handler,
		},
		{
			MethodName: "CheckInternal",
			Handler:    _AuthzService_CheckInternal_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _AuthzService_Lookup_Handler,
		},
		{
			MethodName: "LookupInternal",
			Handler:    _AuthzService_LookupInternal_Handler,
		},
		{
			MethodName: "Actions",
			Handler:    _AuthzService_Actions_Handler,
		},
		{
			MethodName: "CreateCloudAccountRole",
			Handler:    _AuthzService_CreateCloudAccountRole_Handler,
		},
		{
			MethodName: "QueryCloudAccountRoles",
			Handler:    _AuthzService_QueryCloudAccountRoles_Handler,
		},
		{
			MethodName: "GetCloudAccountRole",
			Handler:    _AuthzService_GetCloudAccountRole_Handler,
		},
		{
			MethodName: "UpdateCloudAccountRole",
			Handler:    _AuthzService_UpdateCloudAccountRole_Handler,
		},
		{
			MethodName: "RemoveCloudAccountRole",
			Handler:    _AuthzService_RemoveCloudAccountRole_Handler,
		},
		{
			MethodName: "AddUserToCloudAccountRole",
			Handler:    _AuthzService_AddUserToCloudAccountRole_Handler,
		},
		{
			MethodName: "AddCloudAccountRolesToUser",
			Handler:    _AuthzService_AddCloudAccountRolesToUser_Handler,
		},
		{
			MethodName: "RemoveCloudAccountRolesFromUser",
			Handler:    _AuthzService_RemoveCloudAccountRolesFromUser_Handler,
		},
		{
			MethodName: "RemoveResourceFromCloudAccountRole",
			Handler:    _AuthzService_RemoveResourceFromCloudAccountRole_Handler,
		},
		{
			MethodName: "RemoveUserFromCloudAccountRole",
			Handler:    _AuthzService_RemoveUserFromCloudAccountRole_Handler,
		},
		{
			MethodName: "AddPermissionToCloudAccountRole",
			Handler:    _AuthzService_AddPermissionToCloudAccountRole_Handler,
		},
		{
			MethodName: "UpdatePermissionCloudAccountRole",
			Handler:    _AuthzService_UpdatePermissionCloudAccountRole_Handler,
		},
		{
			MethodName: "RemovePermissionFromCloudAccountRole",
			Handler:    _AuthzService_RemovePermissionFromCloudAccountRole_Handler,
		},
		{
			MethodName: "AssignSystemRole",
			Handler:    _AuthzService_AssignSystemRole_Handler,
		},
		{
			MethodName: "UnassignSystemRole",
			Handler:    _AuthzService_UnassignSystemRole_Handler,
		},
		{
			MethodName: "SystemRoleExists",
			Handler:    _AuthzService_SystemRoleExists_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _AuthzService_RemovePolicy_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _AuthzService_CreatePolicy_Handler,
		},
		{
			MethodName: "ListResourceDefinition",
			Handler:    _AuthzService_ListResourceDefinition_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthzService_GetUser_Handler,
		},
		{
			MethodName: "ListUsersByCloudAccount",
			Handler:    _AuthzService_ListUsersByCloudAccount_Handler,
		},
		{
			MethodName: "DefaultCloudAccountRoleAssigned",
			Handler:    _AuthzService_DefaultCloudAccountRoleAssigned_Handler,
		},
		{
			MethodName: "AssignDefaultCloudAccountRole",
			Handler:    _AuthzService_AssignDefaultCloudAccountRole_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AuthzService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authz.proto",
}
