// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/productcatalog_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockProductVendorServiceClient is a mock of ProductVendorServiceClient interface.
type MockProductVendorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductVendorServiceClientMockRecorder
}

// MockProductVendorServiceClientMockRecorder is the mock recorder for MockProductVendorServiceClient.
type MockProductVendorServiceClientMockRecorder struct {
	mock *MockProductVendorServiceClient
}

// NewMockProductVendorServiceClient creates a new mock instance.
func NewMockProductVendorServiceClient(ctrl *gomock.Controller) *MockProductVendorServiceClient {
	mock := &MockProductVendorServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductVendorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductVendorServiceClient) EXPECT() *MockProductVendorServiceClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockProductVendorServiceClient) Read(ctx context.Context, in *VendorFilter, opts ...grpc.CallOption) (*VendorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*VendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockProductVendorServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProductVendorServiceClient)(nil).Read), varargs...)
}

// MockProductVendorServiceServer is a mock of ProductVendorServiceServer interface.
type MockProductVendorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductVendorServiceServerMockRecorder
}

// MockProductVendorServiceServerMockRecorder is the mock recorder for MockProductVendorServiceServer.
type MockProductVendorServiceServerMockRecorder struct {
	mock *MockProductVendorServiceServer
}

// NewMockProductVendorServiceServer creates a new mock instance.
func NewMockProductVendorServiceServer(ctrl *gomock.Controller) *MockProductVendorServiceServer {
	mock := &MockProductVendorServiceServer{ctrl: ctrl}
	mock.recorder = &MockProductVendorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductVendorServiceServer) EXPECT() *MockProductVendorServiceServerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockProductVendorServiceServer) Read(arg0 context.Context, arg1 *VendorFilter) (*VendorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*VendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockProductVendorServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProductVendorServiceServer)(nil).Read), arg0, arg1)
}

// mustEmbedUnimplementedProductVendorServiceServer mocks base method.
func (m *MockProductVendorServiceServer) mustEmbedUnimplementedProductVendorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductVendorServiceServer")
}

// mustEmbedUnimplementedProductVendorServiceServer indicates an expected call of mustEmbedUnimplementedProductVendorServiceServer.
func (mr *MockProductVendorServiceServerMockRecorder) mustEmbedUnimplementedProductVendorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductVendorServiceServer", reflect.TypeOf((*MockProductVendorServiceServer)(nil).mustEmbedUnimplementedProductVendorServiceServer))
}

// MockUnsafeProductVendorServiceServer is a mock of UnsafeProductVendorServiceServer interface.
type MockUnsafeProductVendorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductVendorServiceServerMockRecorder
}

// MockUnsafeProductVendorServiceServerMockRecorder is the mock recorder for MockUnsafeProductVendorServiceServer.
type MockUnsafeProductVendorServiceServerMockRecorder struct {
	mock *MockUnsafeProductVendorServiceServer
}

// NewMockUnsafeProductVendorServiceServer creates a new mock instance.
func NewMockUnsafeProductVendorServiceServer(ctrl *gomock.Controller) *MockUnsafeProductVendorServiceServer {
	mock := &MockUnsafeProductVendorServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductVendorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductVendorServiceServer) EXPECT() *MockUnsafeProductVendorServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductVendorServiceServer mocks base method.
func (m *MockUnsafeProductVendorServiceServer) mustEmbedUnimplementedProductVendorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductVendorServiceServer")
}

// mustEmbedUnimplementedProductVendorServiceServer indicates an expected call of mustEmbedUnimplementedProductVendorServiceServer.
func (mr *MockUnsafeProductVendorServiceServerMockRecorder) mustEmbedUnimplementedProductVendorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductVendorServiceServer", reflect.TypeOf((*MockUnsafeProductVendorServiceServer)(nil).mustEmbedUnimplementedProductVendorServiceServer))
}

// MockProductCatalogServiceClient is a mock of ProductCatalogServiceClient interface.
type MockProductCatalogServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductCatalogServiceClientMockRecorder
}

// MockProductCatalogServiceClientMockRecorder is the mock recorder for MockProductCatalogServiceClient.
type MockProductCatalogServiceClientMockRecorder struct {
	mock *MockProductCatalogServiceClient
}

// NewMockProductCatalogServiceClient creates a new mock instance.
func NewMockProductCatalogServiceClient(ctrl *gomock.Controller) *MockProductCatalogServiceClient {
	mock := &MockProductCatalogServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductCatalogServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCatalogServiceClient) EXPECT() *MockProductCatalogServiceClientMockRecorder {
	return m.recorder
}

// AdminRead mocks base method.
func (m *MockProductCatalogServiceClient) AdminRead(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminRead", varargs...)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRead indicates an expected call of AdminRead.
func (mr *MockProductCatalogServiceClientMockRecorder) AdminRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRead", reflect.TypeOf((*MockProductCatalogServiceClient)(nil).AdminRead), varargs...)
}

// Ping mocks base method.
func (m *MockProductCatalogServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockProductCatalogServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockProductCatalogServiceClient)(nil).Ping), varargs...)
}

// SetStatus mocks base method.
func (m *MockProductCatalogServiceClient) SetStatus(ctx context.Context, in *SetProductStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockProductCatalogServiceClientMockRecorder) SetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockProductCatalogServiceClient)(nil).SetStatus), varargs...)
}

// UserRead mocks base method.
func (m *MockProductCatalogServiceClient) UserRead(ctx context.Context, in *ProductUserFilter, opts ...grpc.CallOption) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserRead", varargs...)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRead indicates an expected call of UserRead.
func (mr *MockProductCatalogServiceClientMockRecorder) UserRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRead", reflect.TypeOf((*MockProductCatalogServiceClient)(nil).UserRead), varargs...)
}

// UserReadExternal mocks base method.
func (m *MockProductCatalogServiceClient) UserReadExternal(ctx context.Context, in *ProductUserFilter, opts ...grpc.CallOption) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserReadExternal", varargs...)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserReadExternal indicates an expected call of UserReadExternal.
func (mr *MockProductCatalogServiceClientMockRecorder) UserReadExternal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserReadExternal", reflect.TypeOf((*MockProductCatalogServiceClient)(nil).UserReadExternal), varargs...)
}

// MockProductCatalogServiceServer is a mock of ProductCatalogServiceServer interface.
type MockProductCatalogServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductCatalogServiceServerMockRecorder
}

// MockProductCatalogServiceServerMockRecorder is the mock recorder for MockProductCatalogServiceServer.
type MockProductCatalogServiceServerMockRecorder struct {
	mock *MockProductCatalogServiceServer
}

// NewMockProductCatalogServiceServer creates a new mock instance.
func NewMockProductCatalogServiceServer(ctrl *gomock.Controller) *MockProductCatalogServiceServer {
	mock := &MockProductCatalogServiceServer{ctrl: ctrl}
	mock.recorder = &MockProductCatalogServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCatalogServiceServer) EXPECT() *MockProductCatalogServiceServerMockRecorder {
	return m.recorder
}

// AdminRead mocks base method.
func (m *MockProductCatalogServiceServer) AdminRead(arg0 context.Context, arg1 *ProductFilter) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRead", arg0, arg1)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRead indicates an expected call of AdminRead.
func (mr *MockProductCatalogServiceServerMockRecorder) AdminRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRead", reflect.TypeOf((*MockProductCatalogServiceServer)(nil).AdminRead), arg0, arg1)
}

// Ping mocks base method.
func (m *MockProductCatalogServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockProductCatalogServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockProductCatalogServiceServer)(nil).Ping), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockProductCatalogServiceServer) SetStatus(arg0 context.Context, arg1 *SetProductStatusRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockProductCatalogServiceServerMockRecorder) SetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockProductCatalogServiceServer)(nil).SetStatus), arg0, arg1)
}

// UserRead mocks base method.
func (m *MockProductCatalogServiceServer) UserRead(arg0 context.Context, arg1 *ProductUserFilter) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRead", arg0, arg1)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRead indicates an expected call of UserRead.
func (mr *MockProductCatalogServiceServerMockRecorder) UserRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRead", reflect.TypeOf((*MockProductCatalogServiceServer)(nil).UserRead), arg0, arg1)
}

// UserReadExternal mocks base method.
func (m *MockProductCatalogServiceServer) UserReadExternal(arg0 context.Context, arg1 *ProductUserFilter) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserReadExternal", arg0, arg1)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserReadExternal indicates an expected call of UserReadExternal.
func (mr *MockProductCatalogServiceServerMockRecorder) UserReadExternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserReadExternal", reflect.TypeOf((*MockProductCatalogServiceServer)(nil).UserReadExternal), arg0, arg1)
}

// mustEmbedUnimplementedProductCatalogServiceServer mocks base method.
func (m *MockProductCatalogServiceServer) mustEmbedUnimplementedProductCatalogServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductCatalogServiceServer")
}

// mustEmbedUnimplementedProductCatalogServiceServer indicates an expected call of mustEmbedUnimplementedProductCatalogServiceServer.
func (mr *MockProductCatalogServiceServerMockRecorder) mustEmbedUnimplementedProductCatalogServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductCatalogServiceServer", reflect.TypeOf((*MockProductCatalogServiceServer)(nil).mustEmbedUnimplementedProductCatalogServiceServer))
}

// MockUnsafeProductCatalogServiceServer is a mock of UnsafeProductCatalogServiceServer interface.
type MockUnsafeProductCatalogServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductCatalogServiceServerMockRecorder
}

// MockUnsafeProductCatalogServiceServerMockRecorder is the mock recorder for MockUnsafeProductCatalogServiceServer.
type MockUnsafeProductCatalogServiceServerMockRecorder struct {
	mock *MockUnsafeProductCatalogServiceServer
}

// NewMockUnsafeProductCatalogServiceServer creates a new mock instance.
func NewMockUnsafeProductCatalogServiceServer(ctrl *gomock.Controller) *MockUnsafeProductCatalogServiceServer {
	mock := &MockUnsafeProductCatalogServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductCatalogServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductCatalogServiceServer) EXPECT() *MockUnsafeProductCatalogServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductCatalogServiceServer mocks base method.
func (m *MockUnsafeProductCatalogServiceServer) mustEmbedUnimplementedProductCatalogServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductCatalogServiceServer")
}

// mustEmbedUnimplementedProductCatalogServiceServer indicates an expected call of mustEmbedUnimplementedProductCatalogServiceServer.
func (mr *MockUnsafeProductCatalogServiceServerMockRecorder) mustEmbedUnimplementedProductCatalogServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductCatalogServiceServer", reflect.TypeOf((*MockUnsafeProductCatalogServiceServer)(nil).mustEmbedUnimplementedProductCatalogServiceServer))
}

// MockProductAccessServiceClient is a mock of ProductAccessServiceClient interface.
type MockProductAccessServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductAccessServiceClientMockRecorder
}

// MockProductAccessServiceClientMockRecorder is the mock recorder for MockProductAccessServiceClient.
type MockProductAccessServiceClientMockRecorder struct {
	mock *MockProductAccessServiceClient
}

// NewMockProductAccessServiceClient creates a new mock instance.
func NewMockProductAccessServiceClient(ctrl *gomock.Controller) *MockProductAccessServiceClient {
	mock := &MockProductAccessServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductAccessServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductAccessServiceClient) EXPECT() *MockProductAccessServiceClientMockRecorder {
	return m.recorder
}

// AddAccess mocks base method.
func (m *MockProductAccessServiceClient) AddAccess(ctx context.Context, in *ProductAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAccess", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccess indicates an expected call of AddAccess.
func (mr *MockProductAccessServiceClientMockRecorder) AddAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccess", reflect.TypeOf((*MockProductAccessServiceClient)(nil).AddAccess), varargs...)
}

// CheckProductAccess mocks base method.
func (m *MockProductAccessServiceClient) CheckProductAccess(ctx context.Context, in *ProductAccessCheckRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckProductAccess", varargs...)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductAccess indicates an expected call of CheckProductAccess.
func (mr *MockProductAccessServiceClientMockRecorder) CheckProductAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductAccess", reflect.TypeOf((*MockProductAccessServiceClient)(nil).CheckProductAccess), varargs...)
}

// ReadAccess mocks base method.
func (m *MockProductAccessServiceClient) ReadAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*GetAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadAccess", varargs...)
	ret0, _ := ret[0].(*GetAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccess indicates an expected call of ReadAccess.
func (mr *MockProductAccessServiceClientMockRecorder) ReadAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccess", reflect.TypeOf((*MockProductAccessServiceClient)(nil).ReadAccess), varargs...)
}

// RemoveAccess mocks base method.
func (m *MockProductAccessServiceClient) RemoveAccess(ctx context.Context, in *DeleteAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccess", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockProductAccessServiceClientMockRecorder) RemoveAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockProductAccessServiceClient)(nil).RemoveAccess), varargs...)
}

// MockProductAccessServiceServer is a mock of ProductAccessServiceServer interface.
type MockProductAccessServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductAccessServiceServerMockRecorder
}

// MockProductAccessServiceServerMockRecorder is the mock recorder for MockProductAccessServiceServer.
type MockProductAccessServiceServerMockRecorder struct {
	mock *MockProductAccessServiceServer
}

// NewMockProductAccessServiceServer creates a new mock instance.
func NewMockProductAccessServiceServer(ctrl *gomock.Controller) *MockProductAccessServiceServer {
	mock := &MockProductAccessServiceServer{ctrl: ctrl}
	mock.recorder = &MockProductAccessServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductAccessServiceServer) EXPECT() *MockProductAccessServiceServerMockRecorder {
	return m.recorder
}

// AddAccess mocks base method.
func (m *MockProductAccessServiceServer) AddAccess(arg0 context.Context, arg1 *ProductAccessRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccess", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccess indicates an expected call of AddAccess.
func (mr *MockProductAccessServiceServerMockRecorder) AddAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccess", reflect.TypeOf((*MockProductAccessServiceServer)(nil).AddAccess), arg0, arg1)
}

// CheckProductAccess mocks base method.
func (m *MockProductAccessServiceServer) CheckProductAccess(arg0 context.Context, arg1 *ProductAccessCheckRequest) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductAccess", arg0, arg1)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductAccess indicates an expected call of CheckProductAccess.
func (mr *MockProductAccessServiceServerMockRecorder) CheckProductAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductAccess", reflect.TypeOf((*MockProductAccessServiceServer)(nil).CheckProductAccess), arg0, arg1)
}

// ReadAccess mocks base method.
func (m *MockProductAccessServiceServer) ReadAccess(arg0 context.Context, arg1 *GetAccessRequest) (*GetAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccess", arg0, arg1)
	ret0, _ := ret[0].(*GetAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccess indicates an expected call of ReadAccess.
func (mr *MockProductAccessServiceServerMockRecorder) ReadAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccess", reflect.TypeOf((*MockProductAccessServiceServer)(nil).ReadAccess), arg0, arg1)
}

// RemoveAccess mocks base method.
func (m *MockProductAccessServiceServer) RemoveAccess(arg0 context.Context, arg1 *DeleteAccessRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccess", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockProductAccessServiceServerMockRecorder) RemoveAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockProductAccessServiceServer)(nil).RemoveAccess), arg0, arg1)
}

// mustEmbedUnimplementedProductAccessServiceServer mocks base method.
func (m *MockProductAccessServiceServer) mustEmbedUnimplementedProductAccessServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductAccessServiceServer")
}

// mustEmbedUnimplementedProductAccessServiceServer indicates an expected call of mustEmbedUnimplementedProductAccessServiceServer.
func (mr *MockProductAccessServiceServerMockRecorder) mustEmbedUnimplementedProductAccessServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductAccessServiceServer", reflect.TypeOf((*MockProductAccessServiceServer)(nil).mustEmbedUnimplementedProductAccessServiceServer))
}

// MockUnsafeProductAccessServiceServer is a mock of UnsafeProductAccessServiceServer interface.
type MockUnsafeProductAccessServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductAccessServiceServerMockRecorder
}

// MockUnsafeProductAccessServiceServerMockRecorder is the mock recorder for MockUnsafeProductAccessServiceServer.
type MockUnsafeProductAccessServiceServerMockRecorder struct {
	mock *MockUnsafeProductAccessServiceServer
}

// NewMockUnsafeProductAccessServiceServer creates a new mock instance.
func NewMockUnsafeProductAccessServiceServer(ctrl *gomock.Controller) *MockUnsafeProductAccessServiceServer {
	mock := &MockUnsafeProductAccessServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductAccessServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductAccessServiceServer) EXPECT() *MockUnsafeProductAccessServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductAccessServiceServer mocks base method.
func (m *MockUnsafeProductAccessServiceServer) mustEmbedUnimplementedProductAccessServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductAccessServiceServer")
}

// mustEmbedUnimplementedProductAccessServiceServer indicates an expected call of mustEmbedUnimplementedProductAccessServiceServer.
func (mr *MockUnsafeProductAccessServiceServerMockRecorder) mustEmbedUnimplementedProductAccessServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductAccessServiceServer", reflect.TypeOf((*MockUnsafeProductAccessServiceServer)(nil).mustEmbedUnimplementedProductAccessServiceServer))
}

// MockRegionServiceClient is a mock of RegionServiceClient interface.
type MockRegionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegionServiceClientMockRecorder
}

// MockRegionServiceClientMockRecorder is the mock recorder for MockRegionServiceClient.
type MockRegionServiceClientMockRecorder struct {
	mock *MockRegionServiceClient
}

// NewMockRegionServiceClient creates a new mock instance.
func NewMockRegionServiceClient(ctrl *gomock.Controller) *MockRegionServiceClient {
	mock := &MockRegionServiceClient{ctrl: ctrl}
	mock.recorder = &MockRegionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionServiceClient) EXPECT() *MockRegionServiceClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRegionServiceClient) Add(ctx context.Context, in *AddRegionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRegionServiceClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRegionServiceClient)(nil).Add), varargs...)
}

// AdminRead mocks base method.
func (m *MockRegionServiceClient) AdminRead(ctx context.Context, in *RegionFilter, opts ...grpc.CallOption) (*RegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminRead", varargs...)
	ret0, _ := ret[0].(*RegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRead indicates an expected call of AdminRead.
func (mr *MockRegionServiceClientMockRecorder) AdminRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRead", reflect.TypeOf((*MockRegionServiceClient)(nil).AdminRead), varargs...)
}

// Delete mocks base method.
func (m *MockRegionServiceClient) Delete(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRegionServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegionServiceClient)(nil).Delete), varargs...)
}

// Update mocks base method.
func (m *MockRegionServiceClient) Update(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRegionServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRegionServiceClient)(nil).Update), varargs...)
}

// UserRead mocks base method.
func (m *MockRegionServiceClient) UserRead(ctx context.Context, in *RegionUserFilter, opts ...grpc.CallOption) (*RegionUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserRead", varargs...)
	ret0, _ := ret[0].(*RegionUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRead indicates an expected call of UserRead.
func (mr *MockRegionServiceClientMockRecorder) UserRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRead", reflect.TypeOf((*MockRegionServiceClient)(nil).UserRead), varargs...)
}

// MockRegionServiceServer is a mock of RegionServiceServer interface.
type MockRegionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRegionServiceServerMockRecorder
}

// MockRegionServiceServerMockRecorder is the mock recorder for MockRegionServiceServer.
type MockRegionServiceServerMockRecorder struct {
	mock *MockRegionServiceServer
}

// NewMockRegionServiceServer creates a new mock instance.
func NewMockRegionServiceServer(ctrl *gomock.Controller) *MockRegionServiceServer {
	mock := &MockRegionServiceServer{ctrl: ctrl}
	mock.recorder = &MockRegionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionServiceServer) EXPECT() *MockRegionServiceServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRegionServiceServer) Add(arg0 context.Context, arg1 *AddRegionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRegionServiceServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRegionServiceServer)(nil).Add), arg0, arg1)
}

// AdminRead mocks base method.
func (m *MockRegionServiceServer) AdminRead(arg0 context.Context, arg1 *RegionFilter) (*RegionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRead", arg0, arg1)
	ret0, _ := ret[0].(*RegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRead indicates an expected call of AdminRead.
func (mr *MockRegionServiceServerMockRecorder) AdminRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRead", reflect.TypeOf((*MockRegionServiceServer)(nil).AdminRead), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRegionServiceServer) Delete(arg0 context.Context, arg1 *DeleteRegionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRegionServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegionServiceServer)(nil).Delete), arg0, arg1)
}

// Update mocks base method.
func (m *MockRegionServiceServer) Update(arg0 context.Context, arg1 *UpdateRegionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRegionServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRegionServiceServer)(nil).Update), arg0, arg1)
}

// UserRead mocks base method.
func (m *MockRegionServiceServer) UserRead(arg0 context.Context, arg1 *RegionUserFilter) (*RegionUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRead", arg0, arg1)
	ret0, _ := ret[0].(*RegionUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRead indicates an expected call of UserRead.
func (mr *MockRegionServiceServerMockRecorder) UserRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRead", reflect.TypeOf((*MockRegionServiceServer)(nil).UserRead), arg0, arg1)
}

// mustEmbedUnimplementedRegionServiceServer mocks base method.
func (m *MockRegionServiceServer) mustEmbedUnimplementedRegionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegionServiceServer")
}

// mustEmbedUnimplementedRegionServiceServer indicates an expected call of mustEmbedUnimplementedRegionServiceServer.
func (mr *MockRegionServiceServerMockRecorder) mustEmbedUnimplementedRegionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegionServiceServer", reflect.TypeOf((*MockRegionServiceServer)(nil).mustEmbedUnimplementedRegionServiceServer))
}

// MockUnsafeRegionServiceServer is a mock of UnsafeRegionServiceServer interface.
type MockUnsafeRegionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRegionServiceServerMockRecorder
}

// MockUnsafeRegionServiceServerMockRecorder is the mock recorder for MockUnsafeRegionServiceServer.
type MockUnsafeRegionServiceServerMockRecorder struct {
	mock *MockUnsafeRegionServiceServer
}

// NewMockUnsafeRegionServiceServer creates a new mock instance.
func NewMockUnsafeRegionServiceServer(ctrl *gomock.Controller) *MockUnsafeRegionServiceServer {
	mock := &MockUnsafeRegionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRegionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRegionServiceServer) EXPECT() *MockUnsafeRegionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRegionServiceServer mocks base method.
func (m *MockUnsafeRegionServiceServer) mustEmbedUnimplementedRegionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegionServiceServer")
}

// mustEmbedUnimplementedRegionServiceServer indicates an expected call of mustEmbedUnimplementedRegionServiceServer.
func (mr *MockUnsafeRegionServiceServerMockRecorder) mustEmbedUnimplementedRegionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegionServiceServer", reflect.TypeOf((*MockUnsafeRegionServiceServer)(nil).mustEmbedUnimplementedRegionServiceServer))
}

// MockRegionAccessServiceClient is a mock of RegionAccessServiceClient interface.
type MockRegionAccessServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegionAccessServiceClientMockRecorder
}

// MockRegionAccessServiceClientMockRecorder is the mock recorder for MockRegionAccessServiceClient.
type MockRegionAccessServiceClientMockRecorder struct {
	mock *MockRegionAccessServiceClient
}

// NewMockRegionAccessServiceClient creates a new mock instance.
func NewMockRegionAccessServiceClient(ctrl *gomock.Controller) *MockRegionAccessServiceClient {
	mock := &MockRegionAccessServiceClient{ctrl: ctrl}
	mock.recorder = &MockRegionAccessServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionAccessServiceClient) EXPECT() *MockRegionAccessServiceClientMockRecorder {
	return m.recorder
}

// AddAccess mocks base method.
func (m *MockRegionAccessServiceClient) AddAccess(ctx context.Context, in *RegionAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAccess", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccess indicates an expected call of AddAccess.
func (mr *MockRegionAccessServiceClientMockRecorder) AddAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccess", reflect.TypeOf((*MockRegionAccessServiceClient)(nil).AddAccess), varargs...)
}

// CheckRegionAccess mocks base method.
func (m *MockRegionAccessServiceClient) CheckRegionAccess(ctx context.Context, in *RegionAccessCheckRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckRegionAccess", varargs...)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRegionAccess indicates an expected call of CheckRegionAccess.
func (mr *MockRegionAccessServiceClientMockRecorder) CheckRegionAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRegionAccess", reflect.TypeOf((*MockRegionAccessServiceClient)(nil).CheckRegionAccess), varargs...)
}

// ReadAccess mocks base method.
func (m *MockRegionAccessServiceClient) ReadAccess(ctx context.Context, in *GetRegionAccessRequest, opts ...grpc.CallOption) (*GetRegionAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadAccess", varargs...)
	ret0, _ := ret[0].(*GetRegionAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccess indicates an expected call of ReadAccess.
func (mr *MockRegionAccessServiceClientMockRecorder) ReadAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccess", reflect.TypeOf((*MockRegionAccessServiceClient)(nil).ReadAccess), varargs...)
}

// RemoveAccess mocks base method.
func (m *MockRegionAccessServiceClient) RemoveAccess(ctx context.Context, in *DeleteRegionAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccess", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockRegionAccessServiceClientMockRecorder) RemoveAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockRegionAccessServiceClient)(nil).RemoveAccess), varargs...)
}

// MockRegionAccessServiceServer is a mock of RegionAccessServiceServer interface.
type MockRegionAccessServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRegionAccessServiceServerMockRecorder
}

// MockRegionAccessServiceServerMockRecorder is the mock recorder for MockRegionAccessServiceServer.
type MockRegionAccessServiceServerMockRecorder struct {
	mock *MockRegionAccessServiceServer
}

// NewMockRegionAccessServiceServer creates a new mock instance.
func NewMockRegionAccessServiceServer(ctrl *gomock.Controller) *MockRegionAccessServiceServer {
	mock := &MockRegionAccessServiceServer{ctrl: ctrl}
	mock.recorder = &MockRegionAccessServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionAccessServiceServer) EXPECT() *MockRegionAccessServiceServerMockRecorder {
	return m.recorder
}

// AddAccess mocks base method.
func (m *MockRegionAccessServiceServer) AddAccess(arg0 context.Context, arg1 *RegionAccessRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccess", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccess indicates an expected call of AddAccess.
func (mr *MockRegionAccessServiceServerMockRecorder) AddAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccess", reflect.TypeOf((*MockRegionAccessServiceServer)(nil).AddAccess), arg0, arg1)
}

// CheckRegionAccess mocks base method.
func (m *MockRegionAccessServiceServer) CheckRegionAccess(arg0 context.Context, arg1 *RegionAccessCheckRequest) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRegionAccess", arg0, arg1)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRegionAccess indicates an expected call of CheckRegionAccess.
func (mr *MockRegionAccessServiceServerMockRecorder) CheckRegionAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRegionAccess", reflect.TypeOf((*MockRegionAccessServiceServer)(nil).CheckRegionAccess), arg0, arg1)
}

// ReadAccess mocks base method.
func (m *MockRegionAccessServiceServer) ReadAccess(arg0 context.Context, arg1 *GetRegionAccessRequest) (*GetRegionAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccess", arg0, arg1)
	ret0, _ := ret[0].(*GetRegionAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccess indicates an expected call of ReadAccess.
func (mr *MockRegionAccessServiceServerMockRecorder) ReadAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccess", reflect.TypeOf((*MockRegionAccessServiceServer)(nil).ReadAccess), arg0, arg1)
}

// RemoveAccess mocks base method.
func (m *MockRegionAccessServiceServer) RemoveAccess(arg0 context.Context, arg1 *DeleteRegionAccessRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccess", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockRegionAccessServiceServerMockRecorder) RemoveAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockRegionAccessServiceServer)(nil).RemoveAccess), arg0, arg1)
}

// mustEmbedUnimplementedRegionAccessServiceServer mocks base method.
func (m *MockRegionAccessServiceServer) mustEmbedUnimplementedRegionAccessServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegionAccessServiceServer")
}

// mustEmbedUnimplementedRegionAccessServiceServer indicates an expected call of mustEmbedUnimplementedRegionAccessServiceServer.
func (mr *MockRegionAccessServiceServerMockRecorder) mustEmbedUnimplementedRegionAccessServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegionAccessServiceServer", reflect.TypeOf((*MockRegionAccessServiceServer)(nil).mustEmbedUnimplementedRegionAccessServiceServer))
}

// MockUnsafeRegionAccessServiceServer is a mock of UnsafeRegionAccessServiceServer interface.
type MockUnsafeRegionAccessServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRegionAccessServiceServerMockRecorder
}

// MockUnsafeRegionAccessServiceServerMockRecorder is the mock recorder for MockUnsafeRegionAccessServiceServer.
type MockUnsafeRegionAccessServiceServerMockRecorder struct {
	mock *MockUnsafeRegionAccessServiceServer
}

// NewMockUnsafeRegionAccessServiceServer creates a new mock instance.
func NewMockUnsafeRegionAccessServiceServer(ctrl *gomock.Controller) *MockUnsafeRegionAccessServiceServer {
	mock := &MockUnsafeRegionAccessServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRegionAccessServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRegionAccessServiceServer) EXPECT() *MockUnsafeRegionAccessServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRegionAccessServiceServer mocks base method.
func (m *MockUnsafeRegionAccessServiceServer) mustEmbedUnimplementedRegionAccessServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegionAccessServiceServer")
}

// mustEmbedUnimplementedRegionAccessServiceServer indicates an expected call of mustEmbedUnimplementedRegionAccessServiceServer.
func (mr *MockUnsafeRegionAccessServiceServerMockRecorder) mustEmbedUnimplementedRegionAccessServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegionAccessServiceServer", reflect.TypeOf((*MockUnsafeRegionAccessServiceServer)(nil).mustEmbedUnimplementedRegionAccessServiceServer))
}

// MockProductSyncServiceClient is a mock of ProductSyncServiceClient interface.
type MockProductSyncServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductSyncServiceClientMockRecorder
}

// MockProductSyncServiceClientMockRecorder is the mock recorder for MockProductSyncServiceClient.
type MockProductSyncServiceClientMockRecorder struct {
	mock *MockProductSyncServiceClient
}

// NewMockProductSyncServiceClient creates a new mock instance.
func NewMockProductSyncServiceClient(ctrl *gomock.Controller) *MockProductSyncServiceClient {
	mock := &MockProductSyncServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductSyncServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductSyncServiceClient) EXPECT() *MockProductSyncServiceClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProductSyncServiceClient) Delete(ctx context.Context, in *DefaultProductDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProductSyncServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductSyncServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockProductSyncServiceClient) Get(ctx context.Context, in *DefaultProductGetRequest, opts ...grpc.CallOption) (*DefaultProduct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*DefaultProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductSyncServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductSyncServiceClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockProductSyncServiceClient) Put(ctx context.Context, in *DefaultProduct, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockProductSyncServiceClientMockRecorder) Put(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockProductSyncServiceClient)(nil).Put), varargs...)
}

// SearchStream mocks base method.
func (m *MockProductSyncServiceClient) SearchStream(ctx context.Context, in *DefaultProductSearchRequest, opts ...grpc.CallOption) (ProductSyncService_SearchStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStream", varargs...)
	ret0, _ := ret[0].(ProductSyncService_SearchStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockProductSyncServiceClientMockRecorder) SearchStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockProductSyncServiceClient)(nil).SearchStream), varargs...)
}

// MockProductSyncService_SearchStreamClient is a mock of ProductSyncService_SearchStreamClient interface.
type MockProductSyncService_SearchStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductSyncService_SearchStreamClientMockRecorder
}

// MockProductSyncService_SearchStreamClientMockRecorder is the mock recorder for MockProductSyncService_SearchStreamClient.
type MockProductSyncService_SearchStreamClientMockRecorder struct {
	mock *MockProductSyncService_SearchStreamClient
}

// NewMockProductSyncService_SearchStreamClient creates a new mock instance.
func NewMockProductSyncService_SearchStreamClient(ctrl *gomock.Controller) *MockProductSyncService_SearchStreamClient {
	mock := &MockProductSyncService_SearchStreamClient{ctrl: ctrl}
	mock.recorder = &MockProductSyncService_SearchStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductSyncService_SearchStreamClient) EXPECT() *MockProductSyncService_SearchStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockProductSyncService_SearchStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockProductSyncService_SearchStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockProductSyncService_SearchStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockProductSyncService_SearchStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProductSyncService_SearchStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProductSyncService_SearchStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockProductSyncService_SearchStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockProductSyncService_SearchStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockProductSyncService_SearchStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockProductSyncService_SearchStreamClient) Recv() (*DefaultProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*DefaultProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockProductSyncService_SearchStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProductSyncService_SearchStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockProductSyncService_SearchStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProductSyncService_SearchStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProductSyncService_SearchStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockProductSyncService_SearchStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProductSyncService_SearchStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProductSyncService_SearchStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockProductSyncService_SearchStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockProductSyncService_SearchStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockProductSyncService_SearchStreamClient)(nil).Trailer))
}

// MockProductSyncServiceServer is a mock of ProductSyncServiceServer interface.
type MockProductSyncServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductSyncServiceServerMockRecorder
}

// MockProductSyncServiceServerMockRecorder is the mock recorder for MockProductSyncServiceServer.
type MockProductSyncServiceServerMockRecorder struct {
	mock *MockProductSyncServiceServer
}

// NewMockProductSyncServiceServer creates a new mock instance.
func NewMockProductSyncServiceServer(ctrl *gomock.Controller) *MockProductSyncServiceServer {
	mock := &MockProductSyncServiceServer{ctrl: ctrl}
	mock.recorder = &MockProductSyncServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductSyncServiceServer) EXPECT() *MockProductSyncServiceServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProductSyncServiceServer) Delete(arg0 context.Context, arg1 *DefaultProductDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProductSyncServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductSyncServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockProductSyncServiceServer) Get(arg0 context.Context, arg1 *DefaultProductGetRequest) (*DefaultProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*DefaultProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductSyncServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductSyncServiceServer)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockProductSyncServiceServer) Put(arg0 context.Context, arg1 *DefaultProduct) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockProductSyncServiceServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockProductSyncServiceServer)(nil).Put), arg0, arg1)
}

// SearchStream mocks base method.
func (m *MockProductSyncServiceServer) SearchStream(arg0 *DefaultProductSearchRequest, arg1 ProductSyncService_SearchStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockProductSyncServiceServerMockRecorder) SearchStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockProductSyncServiceServer)(nil).SearchStream), arg0, arg1)
}

// mustEmbedUnimplementedProductSyncServiceServer mocks base method.
func (m *MockProductSyncServiceServer) mustEmbedUnimplementedProductSyncServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductSyncServiceServer")
}

// mustEmbedUnimplementedProductSyncServiceServer indicates an expected call of mustEmbedUnimplementedProductSyncServiceServer.
func (mr *MockProductSyncServiceServerMockRecorder) mustEmbedUnimplementedProductSyncServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductSyncServiceServer", reflect.TypeOf((*MockProductSyncServiceServer)(nil).mustEmbedUnimplementedProductSyncServiceServer))
}

// MockUnsafeProductSyncServiceServer is a mock of UnsafeProductSyncServiceServer interface.
type MockUnsafeProductSyncServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductSyncServiceServerMockRecorder
}

// MockUnsafeProductSyncServiceServerMockRecorder is the mock recorder for MockUnsafeProductSyncServiceServer.
type MockUnsafeProductSyncServiceServerMockRecorder struct {
	mock *MockUnsafeProductSyncServiceServer
}

// NewMockUnsafeProductSyncServiceServer creates a new mock instance.
func NewMockUnsafeProductSyncServiceServer(ctrl *gomock.Controller) *MockUnsafeProductSyncServiceServer {
	mock := &MockUnsafeProductSyncServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductSyncServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductSyncServiceServer) EXPECT() *MockUnsafeProductSyncServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductSyncServiceServer mocks base method.
func (m *MockUnsafeProductSyncServiceServer) mustEmbedUnimplementedProductSyncServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductSyncServiceServer")
}

// mustEmbedUnimplementedProductSyncServiceServer indicates an expected call of mustEmbedUnimplementedProductSyncServiceServer.
func (mr *MockUnsafeProductSyncServiceServerMockRecorder) mustEmbedUnimplementedProductSyncServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductSyncServiceServer", reflect.TypeOf((*MockUnsafeProductSyncServiceServer)(nil).mustEmbedUnimplementedProductSyncServiceServer))
}

// MockProductSyncService_SearchStreamServer is a mock of ProductSyncService_SearchStreamServer interface.
type MockProductSyncService_SearchStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductSyncService_SearchStreamServerMockRecorder
}

// MockProductSyncService_SearchStreamServerMockRecorder is the mock recorder for MockProductSyncService_SearchStreamServer.
type MockProductSyncService_SearchStreamServerMockRecorder struct {
	mock *MockProductSyncService_SearchStreamServer
}

// NewMockProductSyncService_SearchStreamServer creates a new mock instance.
func NewMockProductSyncService_SearchStreamServer(ctrl *gomock.Controller) *MockProductSyncService_SearchStreamServer {
	mock := &MockProductSyncService_SearchStreamServer{ctrl: ctrl}
	mock.recorder = &MockProductSyncService_SearchStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductSyncService_SearchStreamServer) EXPECT() *MockProductSyncService_SearchStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockProductSyncService_SearchStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProductSyncService_SearchStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProductSyncService_SearchStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockProductSyncService_SearchStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProductSyncService_SearchStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProductSyncService_SearchStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockProductSyncService_SearchStreamServer) Send(arg0 *DefaultProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProductSyncService_SearchStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProductSyncService_SearchStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockProductSyncService_SearchStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockProductSyncService_SearchStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockProductSyncService_SearchStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockProductSyncService_SearchStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProductSyncService_SearchStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProductSyncService_SearchStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockProductSyncService_SearchStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockProductSyncService_SearchStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockProductSyncService_SearchStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockProductSyncService_SearchStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockProductSyncService_SearchStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockProductSyncService_SearchStreamServer)(nil).SetTrailer), arg0)
}

// MockVendorSyncServiceClient is a mock of VendorSyncServiceClient interface.
type MockVendorSyncServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVendorSyncServiceClientMockRecorder
}

// MockVendorSyncServiceClientMockRecorder is the mock recorder for MockVendorSyncServiceClient.
type MockVendorSyncServiceClientMockRecorder struct {
	mock *MockVendorSyncServiceClient
}

// NewMockVendorSyncServiceClient creates a new mock instance.
func NewMockVendorSyncServiceClient(ctrl *gomock.Controller) *MockVendorSyncServiceClient {
	mock := &MockVendorSyncServiceClient{ctrl: ctrl}
	mock.recorder = &MockVendorSyncServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorSyncServiceClient) EXPECT() *MockVendorSyncServiceClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVendorSyncServiceClient) Delete(ctx context.Context, in *DefaultVendortDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVendorSyncServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVendorSyncServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockVendorSyncServiceClient) Get(ctx context.Context, in *DefaultVendorGetRequest, opts ...grpc.CallOption) (*DefaultVendor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*DefaultVendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVendorSyncServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVendorSyncServiceClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockVendorSyncServiceClient) Put(ctx context.Context, in *DefaultVendor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockVendorSyncServiceClientMockRecorder) Put(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockVendorSyncServiceClient)(nil).Put), varargs...)
}

// SearchStream mocks base method.
func (m *MockVendorSyncServiceClient) SearchStream(ctx context.Context, in *DefaultVendorSearchRequest, opts ...grpc.CallOption) (VendorSyncService_SearchStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStream", varargs...)
	ret0, _ := ret[0].(VendorSyncService_SearchStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockVendorSyncServiceClientMockRecorder) SearchStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockVendorSyncServiceClient)(nil).SearchStream), varargs...)
}

// MockVendorSyncService_SearchStreamClient is a mock of VendorSyncService_SearchStreamClient interface.
type MockVendorSyncService_SearchStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockVendorSyncService_SearchStreamClientMockRecorder
}

// MockVendorSyncService_SearchStreamClientMockRecorder is the mock recorder for MockVendorSyncService_SearchStreamClient.
type MockVendorSyncService_SearchStreamClientMockRecorder struct {
	mock *MockVendorSyncService_SearchStreamClient
}

// NewMockVendorSyncService_SearchStreamClient creates a new mock instance.
func NewMockVendorSyncService_SearchStreamClient(ctrl *gomock.Controller) *MockVendorSyncService_SearchStreamClient {
	mock := &MockVendorSyncService_SearchStreamClient{ctrl: ctrl}
	mock.recorder = &MockVendorSyncService_SearchStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorSyncService_SearchStreamClient) EXPECT() *MockVendorSyncService_SearchStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockVendorSyncService_SearchStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockVendorSyncService_SearchStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockVendorSyncService_SearchStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockVendorSyncService_SearchStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockVendorSyncService_SearchStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVendorSyncService_SearchStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockVendorSyncService_SearchStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockVendorSyncService_SearchStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockVendorSyncService_SearchStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockVendorSyncService_SearchStreamClient) Recv() (*DefaultVendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*DefaultVendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockVendorSyncService_SearchStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVendorSyncService_SearchStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockVendorSyncService_SearchStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockVendorSyncService_SearchStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVendorSyncService_SearchStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockVendorSyncService_SearchStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockVendorSyncService_SearchStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVendorSyncService_SearchStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockVendorSyncService_SearchStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockVendorSyncService_SearchStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockVendorSyncService_SearchStreamClient)(nil).Trailer))
}

// MockVendorSyncServiceServer is a mock of VendorSyncServiceServer interface.
type MockVendorSyncServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVendorSyncServiceServerMockRecorder
}

// MockVendorSyncServiceServerMockRecorder is the mock recorder for MockVendorSyncServiceServer.
type MockVendorSyncServiceServerMockRecorder struct {
	mock *MockVendorSyncServiceServer
}

// NewMockVendorSyncServiceServer creates a new mock instance.
func NewMockVendorSyncServiceServer(ctrl *gomock.Controller) *MockVendorSyncServiceServer {
	mock := &MockVendorSyncServiceServer{ctrl: ctrl}
	mock.recorder = &MockVendorSyncServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorSyncServiceServer) EXPECT() *MockVendorSyncServiceServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVendorSyncServiceServer) Delete(arg0 context.Context, arg1 *DefaultVendortDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVendorSyncServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVendorSyncServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockVendorSyncServiceServer) Get(arg0 context.Context, arg1 *DefaultVendorGetRequest) (*DefaultVendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*DefaultVendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVendorSyncServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVendorSyncServiceServer)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockVendorSyncServiceServer) Put(arg0 context.Context, arg1 *DefaultVendor) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockVendorSyncServiceServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockVendorSyncServiceServer)(nil).Put), arg0, arg1)
}

// SearchStream mocks base method.
func (m *MockVendorSyncServiceServer) SearchStream(arg0 *DefaultVendorSearchRequest, arg1 VendorSyncService_SearchStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockVendorSyncServiceServerMockRecorder) SearchStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockVendorSyncServiceServer)(nil).SearchStream), arg0, arg1)
}

// mustEmbedUnimplementedVendorSyncServiceServer mocks base method.
func (m *MockVendorSyncServiceServer) mustEmbedUnimplementedVendorSyncServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVendorSyncServiceServer")
}

// mustEmbedUnimplementedVendorSyncServiceServer indicates an expected call of mustEmbedUnimplementedVendorSyncServiceServer.
func (mr *MockVendorSyncServiceServerMockRecorder) mustEmbedUnimplementedVendorSyncServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVendorSyncServiceServer", reflect.TypeOf((*MockVendorSyncServiceServer)(nil).mustEmbedUnimplementedVendorSyncServiceServer))
}

// MockUnsafeVendorSyncServiceServer is a mock of UnsafeVendorSyncServiceServer interface.
type MockUnsafeVendorSyncServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVendorSyncServiceServerMockRecorder
}

// MockUnsafeVendorSyncServiceServerMockRecorder is the mock recorder for MockUnsafeVendorSyncServiceServer.
type MockUnsafeVendorSyncServiceServerMockRecorder struct {
	mock *MockUnsafeVendorSyncServiceServer
}

// NewMockUnsafeVendorSyncServiceServer creates a new mock instance.
func NewMockUnsafeVendorSyncServiceServer(ctrl *gomock.Controller) *MockUnsafeVendorSyncServiceServer {
	mock := &MockUnsafeVendorSyncServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVendorSyncServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVendorSyncServiceServer) EXPECT() *MockUnsafeVendorSyncServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVendorSyncServiceServer mocks base method.
func (m *MockUnsafeVendorSyncServiceServer) mustEmbedUnimplementedVendorSyncServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVendorSyncServiceServer")
}

// mustEmbedUnimplementedVendorSyncServiceServer indicates an expected call of mustEmbedUnimplementedVendorSyncServiceServer.
func (mr *MockUnsafeVendorSyncServiceServerMockRecorder) mustEmbedUnimplementedVendorSyncServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVendorSyncServiceServer", reflect.TypeOf((*MockUnsafeVendorSyncServiceServer)(nil).mustEmbedUnimplementedVendorSyncServiceServer))
}

// MockVendorSyncService_SearchStreamServer is a mock of VendorSyncService_SearchStreamServer interface.
type MockVendorSyncService_SearchStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockVendorSyncService_SearchStreamServerMockRecorder
}

// MockVendorSyncService_SearchStreamServerMockRecorder is the mock recorder for MockVendorSyncService_SearchStreamServer.
type MockVendorSyncService_SearchStreamServerMockRecorder struct {
	mock *MockVendorSyncService_SearchStreamServer
}

// NewMockVendorSyncService_SearchStreamServer creates a new mock instance.
func NewMockVendorSyncService_SearchStreamServer(ctrl *gomock.Controller) *MockVendorSyncService_SearchStreamServer {
	mock := &MockVendorSyncService_SearchStreamServer{ctrl: ctrl}
	mock.recorder = &MockVendorSyncService_SearchStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorSyncService_SearchStreamServer) EXPECT() *MockVendorSyncService_SearchStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockVendorSyncService_SearchStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockVendorSyncService_SearchStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVendorSyncService_SearchStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockVendorSyncService_SearchStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockVendorSyncService_SearchStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVendorSyncService_SearchStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockVendorSyncService_SearchStreamServer) Send(arg0 *DefaultVendor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockVendorSyncService_SearchStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockVendorSyncService_SearchStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockVendorSyncService_SearchStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockVendorSyncService_SearchStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockVendorSyncService_SearchStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockVendorSyncService_SearchStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockVendorSyncService_SearchStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVendorSyncService_SearchStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockVendorSyncService_SearchStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockVendorSyncService_SearchStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockVendorSyncService_SearchStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockVendorSyncService_SearchStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockVendorSyncService_SearchStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockVendorSyncService_SearchStreamServer)(nil).SetTrailer), arg0)
}

// MockFamilyServiceClient is a mock of FamilyServiceClient interface.
type MockFamilyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFamilyServiceClientMockRecorder
}

// MockFamilyServiceClientMockRecorder is the mock recorder for MockFamilyServiceClient.
type MockFamilyServiceClientMockRecorder struct {
	mock *MockFamilyServiceClient
}

// NewMockFamilyServiceClient creates a new mock instance.
func NewMockFamilyServiceClient(ctrl *gomock.Controller) *MockFamilyServiceClient {
	mock := &MockFamilyServiceClient{ctrl: ctrl}
	mock.recorder = &MockFamilyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFamilyServiceClient) EXPECT() *MockFamilyServiceClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFamilyServiceClient) Add(ctx context.Context, in *FamilyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockFamilyServiceClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFamilyServiceClient)(nil).Add), varargs...)
}

// GetById mocks base method.
func (m *MockFamilyServiceClient) GetById(ctx context.Context, in *FamilyFilter, opts ...grpc.CallOption) (*FamilyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetById", varargs...)
	ret0, _ := ret[0].(*FamilyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockFamilyServiceClientMockRecorder) GetById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockFamilyServiceClient)(nil).GetById), varargs...)
}

// Read mocks base method.
func (m *MockFamilyServiceClient) Read(ctx context.Context, in *FamilyRequest, opts ...grpc.CallOption) (*FamilyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*FamilyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFamilyServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFamilyServiceClient)(nil).Read), varargs...)
}

// Update mocks base method.
func (m *MockFamilyServiceClient) Update(ctx context.Context, in *FamilyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFamilyServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFamilyServiceClient)(nil).Update), varargs...)
}

// MockFamilyServiceServer is a mock of FamilyServiceServer interface.
type MockFamilyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFamilyServiceServerMockRecorder
}

// MockFamilyServiceServerMockRecorder is the mock recorder for MockFamilyServiceServer.
type MockFamilyServiceServerMockRecorder struct {
	mock *MockFamilyServiceServer
}

// NewMockFamilyServiceServer creates a new mock instance.
func NewMockFamilyServiceServer(ctrl *gomock.Controller) *MockFamilyServiceServer {
	mock := &MockFamilyServiceServer{ctrl: ctrl}
	mock.recorder = &MockFamilyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFamilyServiceServer) EXPECT() *MockFamilyServiceServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFamilyServiceServer) Add(arg0 context.Context, arg1 *FamilyRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockFamilyServiceServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFamilyServiceServer)(nil).Add), arg0, arg1)
}

// GetById mocks base method.
func (m *MockFamilyServiceServer) GetById(arg0 context.Context, arg1 *FamilyFilter) (*FamilyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*FamilyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockFamilyServiceServerMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockFamilyServiceServer)(nil).GetById), arg0, arg1)
}

// Read mocks base method.
func (m *MockFamilyServiceServer) Read(arg0 context.Context, arg1 *FamilyRequest) (*FamilyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*FamilyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFamilyServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFamilyServiceServer)(nil).Read), arg0, arg1)
}

// Update mocks base method.
func (m *MockFamilyServiceServer) Update(arg0 context.Context, arg1 *FamilyRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFamilyServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFamilyServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedFamilyServiceServer mocks base method.
func (m *MockFamilyServiceServer) mustEmbedUnimplementedFamilyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFamilyServiceServer")
}

// mustEmbedUnimplementedFamilyServiceServer indicates an expected call of mustEmbedUnimplementedFamilyServiceServer.
func (mr *MockFamilyServiceServerMockRecorder) mustEmbedUnimplementedFamilyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFamilyServiceServer", reflect.TypeOf((*MockFamilyServiceServer)(nil).mustEmbedUnimplementedFamilyServiceServer))
}

// MockUnsafeFamilyServiceServer is a mock of UnsafeFamilyServiceServer interface.
type MockUnsafeFamilyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFamilyServiceServerMockRecorder
}

// MockUnsafeFamilyServiceServerMockRecorder is the mock recorder for MockUnsafeFamilyServiceServer.
type MockUnsafeFamilyServiceServerMockRecorder struct {
	mock *MockUnsafeFamilyServiceServer
}

// NewMockUnsafeFamilyServiceServer creates a new mock instance.
func NewMockUnsafeFamilyServiceServer(ctrl *gomock.Controller) *MockUnsafeFamilyServiceServer {
	mock := &MockUnsafeFamilyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFamilyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFamilyServiceServer) EXPECT() *MockUnsafeFamilyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFamilyServiceServer mocks base method.
func (m *MockUnsafeFamilyServiceServer) mustEmbedUnimplementedFamilyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFamilyServiceServer")
}

// mustEmbedUnimplementedFamilyServiceServer indicates an expected call of mustEmbedUnimplementedFamilyServiceServer.
func (mr *MockUnsafeFamilyServiceServerMockRecorder) mustEmbedUnimplementedFamilyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFamilyServiceServer", reflect.TypeOf((*MockUnsafeFamilyServiceServer)(nil).mustEmbedUnimplementedFamilyServiceServer))
}

// MockVendorServiceClient is a mock of VendorServiceClient interface.
type MockVendorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVendorServiceClientMockRecorder
}

// MockVendorServiceClientMockRecorder is the mock recorder for MockVendorServiceClient.
type MockVendorServiceClientMockRecorder struct {
	mock *MockVendorServiceClient
}

// NewMockVendorServiceClient creates a new mock instance.
func NewMockVendorServiceClient(ctrl *gomock.Controller) *MockVendorServiceClient {
	mock := &MockVendorServiceClient{ctrl: ctrl}
	mock.recorder = &MockVendorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorServiceClient) EXPECT() *MockVendorServiceClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockVendorServiceClient) Add(ctx context.Context, in *VendorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockVendorServiceClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockVendorServiceClient)(nil).Add), varargs...)
}

// GetById mocks base method.
func (m *MockVendorServiceClient) GetById(ctx context.Context, in *VendorId, opts ...grpc.CallOption) (*VendorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetById", varargs...)
	ret0, _ := ret[0].(*VendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockVendorServiceClientMockRecorder) GetById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockVendorServiceClient)(nil).GetById), varargs...)
}

// Read mocks base method.
func (m *MockVendorServiceClient) Read(ctx context.Context, in *VendorFilter, opts ...grpc.CallOption) (*VendorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*VendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockVendorServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockVendorServiceClient)(nil).Read), varargs...)
}

// Update mocks base method.
func (m *MockVendorServiceClient) Update(ctx context.Context, in *VendorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVendorServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVendorServiceClient)(nil).Update), varargs...)
}

// MockVendorServiceServer is a mock of VendorServiceServer interface.
type MockVendorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVendorServiceServerMockRecorder
}

// MockVendorServiceServerMockRecorder is the mock recorder for MockVendorServiceServer.
type MockVendorServiceServerMockRecorder struct {
	mock *MockVendorServiceServer
}

// NewMockVendorServiceServer creates a new mock instance.
func NewMockVendorServiceServer(ctrl *gomock.Controller) *MockVendorServiceServer {
	mock := &MockVendorServiceServer{ctrl: ctrl}
	mock.recorder = &MockVendorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorServiceServer) EXPECT() *MockVendorServiceServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockVendorServiceServer) Add(arg0 context.Context, arg1 *VendorRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockVendorServiceServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockVendorServiceServer)(nil).Add), arg0, arg1)
}

// GetById mocks base method.
func (m *MockVendorServiceServer) GetById(arg0 context.Context, arg1 *VendorId) (*VendorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*VendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockVendorServiceServerMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockVendorServiceServer)(nil).GetById), arg0, arg1)
}

// Read mocks base method.
func (m *MockVendorServiceServer) Read(arg0 context.Context, arg1 *VendorFilter) (*VendorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*VendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockVendorServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockVendorServiceServer)(nil).Read), arg0, arg1)
}

// Update mocks base method.
func (m *MockVendorServiceServer) Update(arg0 context.Context, arg1 *VendorRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVendorServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVendorServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedVendorServiceServer mocks base method.
func (m *MockVendorServiceServer) mustEmbedUnimplementedVendorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVendorServiceServer")
}

// mustEmbedUnimplementedVendorServiceServer indicates an expected call of mustEmbedUnimplementedVendorServiceServer.
func (mr *MockVendorServiceServerMockRecorder) mustEmbedUnimplementedVendorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVendorServiceServer", reflect.TypeOf((*MockVendorServiceServer)(nil).mustEmbedUnimplementedVendorServiceServer))
}

// MockUnsafeVendorServiceServer is a mock of UnsafeVendorServiceServer interface.
type MockUnsafeVendorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVendorServiceServerMockRecorder
}

// MockUnsafeVendorServiceServerMockRecorder is the mock recorder for MockUnsafeVendorServiceServer.
type MockUnsafeVendorServiceServerMockRecorder struct {
	mock *MockUnsafeVendorServiceServer
}

// NewMockUnsafeVendorServiceServer creates a new mock instance.
func NewMockUnsafeVendorServiceServer(ctrl *gomock.Controller) *MockUnsafeVendorServiceServer {
	mock := &MockUnsafeVendorServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVendorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVendorServiceServer) EXPECT() *MockUnsafeVendorServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVendorServiceServer mocks base method.
func (m *MockUnsafeVendorServiceServer) mustEmbedUnimplementedVendorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVendorServiceServer")
}

// mustEmbedUnimplementedVendorServiceServer indicates an expected call of mustEmbedUnimplementedVendorServiceServer.
func (mr *MockUnsafeVendorServiceServerMockRecorder) mustEmbedUnimplementedVendorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVendorServiceServer", reflect.TypeOf((*MockUnsafeVendorServiceServer)(nil).mustEmbedUnimplementedVendorServiceServer))
}

// MockProductCatalogServiceV2Client is a mock of ProductCatalogServiceV2Client interface.
type MockProductCatalogServiceV2Client struct {
	ctrl     *gomock.Controller
	recorder *MockProductCatalogServiceV2ClientMockRecorder
}

// MockProductCatalogServiceV2ClientMockRecorder is the mock recorder for MockProductCatalogServiceV2Client.
type MockProductCatalogServiceV2ClientMockRecorder struct {
	mock *MockProductCatalogServiceV2Client
}

// NewMockProductCatalogServiceV2Client creates a new mock instance.
func NewMockProductCatalogServiceV2Client(ctrl *gomock.Controller) *MockProductCatalogServiceV2Client {
	mock := &MockProductCatalogServiceV2Client{ctrl: ctrl}
	mock.recorder = &MockProductCatalogServiceV2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCatalogServiceV2Client) EXPECT() *MockProductCatalogServiceV2ClientMockRecorder {
	return m.recorder
}

// AdminRead mocks base method.
func (m *MockProductCatalogServiceV2Client) AdminRead(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminRead", varargs...)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRead indicates an expected call of AdminRead.
func (mr *MockProductCatalogServiceV2ClientMockRecorder) AdminRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRead", reflect.TypeOf((*MockProductCatalogServiceV2Client)(nil).AdminRead), varargs...)
}

// Ping mocks base method.
func (m *MockProductCatalogServiceV2Client) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockProductCatalogServiceV2ClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockProductCatalogServiceV2Client)(nil).Ping), varargs...)
}

// SetStatus mocks base method.
func (m *MockProductCatalogServiceV2Client) SetStatus(ctx context.Context, in *SetProductStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockProductCatalogServiceV2ClientMockRecorder) SetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockProductCatalogServiceV2Client)(nil).SetStatus), varargs...)
}

// UserRead mocks base method.
func (m *MockProductCatalogServiceV2Client) UserRead(ctx context.Context, in *ProductUserFilter, opts ...grpc.CallOption) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserRead", varargs...)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRead indicates an expected call of UserRead.
func (mr *MockProductCatalogServiceV2ClientMockRecorder) UserRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRead", reflect.TypeOf((*MockProductCatalogServiceV2Client)(nil).UserRead), varargs...)
}

// UserReadExternal mocks base method.
func (m *MockProductCatalogServiceV2Client) UserReadExternal(ctx context.Context, in *ProductUserFilter, opts ...grpc.CallOption) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserReadExternal", varargs...)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserReadExternal indicates an expected call of UserReadExternal.
func (mr *MockProductCatalogServiceV2ClientMockRecorder) UserReadExternal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserReadExternal", reflect.TypeOf((*MockProductCatalogServiceV2Client)(nil).UserReadExternal), varargs...)
}

// MockProductCatalogServiceV2Server is a mock of ProductCatalogServiceV2Server interface.
type MockProductCatalogServiceV2Server struct {
	ctrl     *gomock.Controller
	recorder *MockProductCatalogServiceV2ServerMockRecorder
}

// MockProductCatalogServiceV2ServerMockRecorder is the mock recorder for MockProductCatalogServiceV2Server.
type MockProductCatalogServiceV2ServerMockRecorder struct {
	mock *MockProductCatalogServiceV2Server
}

// NewMockProductCatalogServiceV2Server creates a new mock instance.
func NewMockProductCatalogServiceV2Server(ctrl *gomock.Controller) *MockProductCatalogServiceV2Server {
	mock := &MockProductCatalogServiceV2Server{ctrl: ctrl}
	mock.recorder = &MockProductCatalogServiceV2ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCatalogServiceV2Server) EXPECT() *MockProductCatalogServiceV2ServerMockRecorder {
	return m.recorder
}

// AdminRead mocks base method.
func (m *MockProductCatalogServiceV2Server) AdminRead(arg0 context.Context, arg1 *ProductFilter) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRead", arg0, arg1)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRead indicates an expected call of AdminRead.
func (mr *MockProductCatalogServiceV2ServerMockRecorder) AdminRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRead", reflect.TypeOf((*MockProductCatalogServiceV2Server)(nil).AdminRead), arg0, arg1)
}

// Ping mocks base method.
func (m *MockProductCatalogServiceV2Server) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockProductCatalogServiceV2ServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockProductCatalogServiceV2Server)(nil).Ping), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockProductCatalogServiceV2Server) SetStatus(arg0 context.Context, arg1 *SetProductStatusRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockProductCatalogServiceV2ServerMockRecorder) SetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockProductCatalogServiceV2Server)(nil).SetStatus), arg0, arg1)
}

// UserRead mocks base method.
func (m *MockProductCatalogServiceV2Server) UserRead(arg0 context.Context, arg1 *ProductUserFilter) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRead", arg0, arg1)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRead indicates an expected call of UserRead.
func (mr *MockProductCatalogServiceV2ServerMockRecorder) UserRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRead", reflect.TypeOf((*MockProductCatalogServiceV2Server)(nil).UserRead), arg0, arg1)
}

// UserReadExternal mocks base method.
func (m *MockProductCatalogServiceV2Server) UserReadExternal(arg0 context.Context, arg1 *ProductUserFilter) (*ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserReadExternal", arg0, arg1)
	ret0, _ := ret[0].(*ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserReadExternal indicates an expected call of UserReadExternal.
func (mr *MockProductCatalogServiceV2ServerMockRecorder) UserReadExternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserReadExternal", reflect.TypeOf((*MockProductCatalogServiceV2Server)(nil).UserReadExternal), arg0, arg1)
}

// mustEmbedUnimplementedProductCatalogServiceV2Server mocks base method.
func (m *MockProductCatalogServiceV2Server) mustEmbedUnimplementedProductCatalogServiceV2Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductCatalogServiceV2Server")
}

// mustEmbedUnimplementedProductCatalogServiceV2Server indicates an expected call of mustEmbedUnimplementedProductCatalogServiceV2Server.
func (mr *MockProductCatalogServiceV2ServerMockRecorder) mustEmbedUnimplementedProductCatalogServiceV2Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductCatalogServiceV2Server", reflect.TypeOf((*MockProductCatalogServiceV2Server)(nil).mustEmbedUnimplementedProductCatalogServiceV2Server))
}

// MockUnsafeProductCatalogServiceV2Server is a mock of UnsafeProductCatalogServiceV2Server interface.
type MockUnsafeProductCatalogServiceV2Server struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductCatalogServiceV2ServerMockRecorder
}

// MockUnsafeProductCatalogServiceV2ServerMockRecorder is the mock recorder for MockUnsafeProductCatalogServiceV2Server.
type MockUnsafeProductCatalogServiceV2ServerMockRecorder struct {
	mock *MockUnsafeProductCatalogServiceV2Server
}

// NewMockUnsafeProductCatalogServiceV2Server creates a new mock instance.
func NewMockUnsafeProductCatalogServiceV2Server(ctrl *gomock.Controller) *MockUnsafeProductCatalogServiceV2Server {
	mock := &MockUnsafeProductCatalogServiceV2Server{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductCatalogServiceV2ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductCatalogServiceV2Server) EXPECT() *MockUnsafeProductCatalogServiceV2ServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductCatalogServiceV2Server mocks base method.
func (m *MockUnsafeProductCatalogServiceV2Server) mustEmbedUnimplementedProductCatalogServiceV2Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductCatalogServiceV2Server")
}

// mustEmbedUnimplementedProductCatalogServiceV2Server indicates an expected call of mustEmbedUnimplementedProductCatalogServiceV2Server.
func (mr *MockUnsafeProductCatalogServiceV2ServerMockRecorder) mustEmbedUnimplementedProductCatalogServiceV2Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductCatalogServiceV2Server", reflect.TypeOf((*MockUnsafeProductCatalogServiceV2Server)(nil).mustEmbedUnimplementedProductCatalogServiceV2Server))
}

// MockAccessServiceClient is a mock of AccessServiceClient interface.
type MockAccessServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceClientMockRecorder
}

// MockAccessServiceClientMockRecorder is the mock recorder for MockAccessServiceClient.
type MockAccessServiceClientMockRecorder struct {
	mock *MockAccessServiceClient
}

// NewMockAccessServiceClient creates a new mock instance.
func NewMockAccessServiceClient(ctrl *gomock.Controller) *MockAccessServiceClient {
	mock := &MockAccessServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccessServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessServiceClient) EXPECT() *MockAccessServiceClientMockRecorder {
	return m.recorder
}

// AddAccess mocks base method.
func (m *MockAccessServiceClient) AddAccess(ctx context.Context, in *ProductAccessRequestV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAccess", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccess indicates an expected call of AddAccess.
func (mr *MockAccessServiceClientMockRecorder) AddAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccess", reflect.TypeOf((*MockAccessServiceClient)(nil).AddAccess), varargs...)
}

// ReadAccess mocks base method.
func (m *MockAccessServiceClient) ReadAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*GetAccessResponseV2, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadAccess", varargs...)
	ret0, _ := ret[0].(*GetAccessResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccess indicates an expected call of ReadAccess.
func (mr *MockAccessServiceClientMockRecorder) ReadAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccess", reflect.TypeOf((*MockAccessServiceClient)(nil).ReadAccess), varargs...)
}

// RemoveAccess mocks base method.
func (m *MockAccessServiceClient) RemoveAccess(ctx context.Context, in *DeleteAccessRequestV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccess", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockAccessServiceClientMockRecorder) RemoveAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockAccessServiceClient)(nil).RemoveAccess), varargs...)
}

// MockAccessServiceServer is a mock of AccessServiceServer interface.
type MockAccessServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceServerMockRecorder
}

// MockAccessServiceServerMockRecorder is the mock recorder for MockAccessServiceServer.
type MockAccessServiceServerMockRecorder struct {
	mock *MockAccessServiceServer
}

// NewMockAccessServiceServer creates a new mock instance.
func NewMockAccessServiceServer(ctrl *gomock.Controller) *MockAccessServiceServer {
	mock := &MockAccessServiceServer{ctrl: ctrl}
	mock.recorder = &MockAccessServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessServiceServer) EXPECT() *MockAccessServiceServerMockRecorder {
	return m.recorder
}

// AddAccess mocks base method.
func (m *MockAccessServiceServer) AddAccess(arg0 context.Context, arg1 *ProductAccessRequestV2) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccess", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccess indicates an expected call of AddAccess.
func (mr *MockAccessServiceServerMockRecorder) AddAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccess", reflect.TypeOf((*MockAccessServiceServer)(nil).AddAccess), arg0, arg1)
}

// ReadAccess mocks base method.
func (m *MockAccessServiceServer) ReadAccess(arg0 context.Context, arg1 *GetAccessRequest) (*GetAccessResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccess", arg0, arg1)
	ret0, _ := ret[0].(*GetAccessResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccess indicates an expected call of ReadAccess.
func (mr *MockAccessServiceServerMockRecorder) ReadAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccess", reflect.TypeOf((*MockAccessServiceServer)(nil).ReadAccess), arg0, arg1)
}

// RemoveAccess mocks base method.
func (m *MockAccessServiceServer) RemoveAccess(arg0 context.Context, arg1 *DeleteAccessRequestV2) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccess", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockAccessServiceServerMockRecorder) RemoveAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockAccessServiceServer)(nil).RemoveAccess), arg0, arg1)
}

// mustEmbedUnimplementedAccessServiceServer mocks base method.
func (m *MockAccessServiceServer) mustEmbedUnimplementedAccessServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccessServiceServer")
}

// mustEmbedUnimplementedAccessServiceServer indicates an expected call of mustEmbedUnimplementedAccessServiceServer.
func (mr *MockAccessServiceServerMockRecorder) mustEmbedUnimplementedAccessServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccessServiceServer", reflect.TypeOf((*MockAccessServiceServer)(nil).mustEmbedUnimplementedAccessServiceServer))
}

// MockUnsafeAccessServiceServer is a mock of UnsafeAccessServiceServer interface.
type MockUnsafeAccessServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAccessServiceServerMockRecorder
}

// MockUnsafeAccessServiceServerMockRecorder is the mock recorder for MockUnsafeAccessServiceServer.
type MockUnsafeAccessServiceServerMockRecorder struct {
	mock *MockUnsafeAccessServiceServer
}

// NewMockUnsafeAccessServiceServer creates a new mock instance.
func NewMockUnsafeAccessServiceServer(ctrl *gomock.Controller) *MockUnsafeAccessServiceServer {
	mock := &MockUnsafeAccessServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAccessServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAccessServiceServer) EXPECT() *MockUnsafeAccessServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAccessServiceServer mocks base method.
func (m *MockUnsafeAccessServiceServer) mustEmbedUnimplementedAccessServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccessServiceServer")
}

// mustEmbedUnimplementedAccessServiceServer indicates an expected call of mustEmbedUnimplementedAccessServiceServer.
func (mr *MockUnsafeAccessServiceServerMockRecorder) mustEmbedUnimplementedAccessServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccessServiceServer", reflect.TypeOf((*MockUnsafeAccessServiceServer)(nil).mustEmbedUnimplementedAccessServiceServer))
}

// MockProductChangeRequestServiceClient is a mock of ProductChangeRequestServiceClient interface.
type MockProductChangeRequestServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductChangeRequestServiceClientMockRecorder
}

// MockProductChangeRequestServiceClientMockRecorder is the mock recorder for MockProductChangeRequestServiceClient.
type MockProductChangeRequestServiceClientMockRecorder struct {
	mock *MockProductChangeRequestServiceClient
}

// NewMockProductChangeRequestServiceClient creates a new mock instance.
func NewMockProductChangeRequestServiceClient(ctrl *gomock.Controller) *MockProductChangeRequestServiceClient {
	mock := &MockProductChangeRequestServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductChangeRequestServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductChangeRequestServiceClient) EXPECT() *MockProductChangeRequestServiceClientMockRecorder {
	return m.recorder
}

// AddProductDataInChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceClient) AddProductDataInChangeRequest(ctx context.Context, in *ProposedData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProductDataInChangeRequest", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductDataInChangeRequest indicates an expected call of AddProductDataInChangeRequest.
func (mr *MockProductChangeRequestServiceClientMockRecorder) AddProductDataInChangeRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductDataInChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceClient)(nil).AddProductDataInChangeRequest), varargs...)
}

// EnableProductInChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceClient) EnableProductInChangeRequest(ctx context.Context, in *EnableProductFilter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableProductInChangeRequest", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableProductInChangeRequest indicates an expected call of EnableProductInChangeRequest.
func (mr *MockProductChangeRequestServiceClientMockRecorder) EnableProductInChangeRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProductInChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceClient)(nil).EnableProductInChangeRequest), varargs...)
}

// ReadProductChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceClient) ReadProductChangeRequest(ctx context.Context, in *ProductChangeRequestFilter, opts ...grpc.CallOption) (*ProductChangeRequestResponseList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadProductChangeRequest", varargs...)
	ret0, _ := ret[0].(*ProductChangeRequestResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductChangeRequest indicates an expected call of ReadProductChangeRequest.
func (mr *MockProductChangeRequestServiceClientMockRecorder) ReadProductChangeRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceClient)(nil).ReadProductChangeRequest), varargs...)
}

// ReviewProductChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceClient) ReviewProductChangeRequest(ctx context.Context, in *ReviewProductChangeRequestFilter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReviewProductChangeRequest", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviewProductChangeRequest indicates an expected call of ReviewProductChangeRequest.
func (mr *MockProductChangeRequestServiceClientMockRecorder) ReviewProductChangeRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewProductChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceClient)(nil).ReviewProductChangeRequest), varargs...)
}

// UpdateProductDataInChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceClient) UpdateProductDataInChangeRequest(ctx context.Context, in *ProposedData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProductDataInChangeRequest", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductDataInChangeRequest indicates an expected call of UpdateProductDataInChangeRequest.
func (mr *MockProductChangeRequestServiceClientMockRecorder) UpdateProductDataInChangeRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductDataInChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceClient)(nil).UpdateProductDataInChangeRequest), varargs...)
}

// MockProductChangeRequestServiceServer is a mock of ProductChangeRequestServiceServer interface.
type MockProductChangeRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductChangeRequestServiceServerMockRecorder
}

// MockProductChangeRequestServiceServerMockRecorder is the mock recorder for MockProductChangeRequestServiceServer.
type MockProductChangeRequestServiceServerMockRecorder struct {
	mock *MockProductChangeRequestServiceServer
}

// NewMockProductChangeRequestServiceServer creates a new mock instance.
func NewMockProductChangeRequestServiceServer(ctrl *gomock.Controller) *MockProductChangeRequestServiceServer {
	mock := &MockProductChangeRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockProductChangeRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductChangeRequestServiceServer) EXPECT() *MockProductChangeRequestServiceServerMockRecorder {
	return m.recorder
}

// AddProductDataInChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceServer) AddProductDataInChangeRequest(arg0 context.Context, arg1 *ProposedData) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductDataInChangeRequest", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductDataInChangeRequest indicates an expected call of AddProductDataInChangeRequest.
func (mr *MockProductChangeRequestServiceServerMockRecorder) AddProductDataInChangeRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductDataInChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceServer)(nil).AddProductDataInChangeRequest), arg0, arg1)
}

// EnableProductInChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceServer) EnableProductInChangeRequest(arg0 context.Context, arg1 *EnableProductFilter) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableProductInChangeRequest", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableProductInChangeRequest indicates an expected call of EnableProductInChangeRequest.
func (mr *MockProductChangeRequestServiceServerMockRecorder) EnableProductInChangeRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProductInChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceServer)(nil).EnableProductInChangeRequest), arg0, arg1)
}

// ReadProductChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceServer) ReadProductChangeRequest(arg0 context.Context, arg1 *ProductChangeRequestFilter) (*ProductChangeRequestResponseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductChangeRequest", arg0, arg1)
	ret0, _ := ret[0].(*ProductChangeRequestResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductChangeRequest indicates an expected call of ReadProductChangeRequest.
func (mr *MockProductChangeRequestServiceServerMockRecorder) ReadProductChangeRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceServer)(nil).ReadProductChangeRequest), arg0, arg1)
}

// ReviewProductChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceServer) ReviewProductChangeRequest(arg0 context.Context, arg1 *ReviewProductChangeRequestFilter) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewProductChangeRequest", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviewProductChangeRequest indicates an expected call of ReviewProductChangeRequest.
func (mr *MockProductChangeRequestServiceServerMockRecorder) ReviewProductChangeRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewProductChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceServer)(nil).ReviewProductChangeRequest), arg0, arg1)
}

// UpdateProductDataInChangeRequest mocks base method.
func (m *MockProductChangeRequestServiceServer) UpdateProductDataInChangeRequest(arg0 context.Context, arg1 *ProposedData) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductDataInChangeRequest", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductDataInChangeRequest indicates an expected call of UpdateProductDataInChangeRequest.
func (mr *MockProductChangeRequestServiceServerMockRecorder) UpdateProductDataInChangeRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductDataInChangeRequest", reflect.TypeOf((*MockProductChangeRequestServiceServer)(nil).UpdateProductDataInChangeRequest), arg0, arg1)
}

// mustEmbedUnimplementedProductChangeRequestServiceServer mocks base method.
func (m *MockProductChangeRequestServiceServer) mustEmbedUnimplementedProductChangeRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductChangeRequestServiceServer")
}

// mustEmbedUnimplementedProductChangeRequestServiceServer indicates an expected call of mustEmbedUnimplementedProductChangeRequestServiceServer.
func (mr *MockProductChangeRequestServiceServerMockRecorder) mustEmbedUnimplementedProductChangeRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductChangeRequestServiceServer", reflect.TypeOf((*MockProductChangeRequestServiceServer)(nil).mustEmbedUnimplementedProductChangeRequestServiceServer))
}

// MockUnsafeProductChangeRequestServiceServer is a mock of UnsafeProductChangeRequestServiceServer interface.
type MockUnsafeProductChangeRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductChangeRequestServiceServerMockRecorder
}

// MockUnsafeProductChangeRequestServiceServerMockRecorder is the mock recorder for MockUnsafeProductChangeRequestServiceServer.
type MockUnsafeProductChangeRequestServiceServerMockRecorder struct {
	mock *MockUnsafeProductChangeRequestServiceServer
}

// NewMockUnsafeProductChangeRequestServiceServer creates a new mock instance.
func NewMockUnsafeProductChangeRequestServiceServer(ctrl *gomock.Controller) *MockUnsafeProductChangeRequestServiceServer {
	mock := &MockUnsafeProductChangeRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductChangeRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductChangeRequestServiceServer) EXPECT() *MockUnsafeProductChangeRequestServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductChangeRequestServiceServer mocks base method.
func (m *MockUnsafeProductChangeRequestServiceServer) mustEmbedUnimplementedProductChangeRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductChangeRequestServiceServer")
}

// mustEmbedUnimplementedProductChangeRequestServiceServer indicates an expected call of mustEmbedUnimplementedProductChangeRequestServiceServer.
func (mr *MockUnsafeProductChangeRequestServiceServerMockRecorder) mustEmbedUnimplementedProductChangeRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductChangeRequestServiceServer", reflect.TypeOf((*MockUnsafeProductChangeRequestServiceServer)(nil).mustEmbedUnimplementedProductChangeRequestServiceServer))
}

// MockProductInterestServiceClient is a mock of ProductInterestServiceClient interface.
type MockProductInterestServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductInterestServiceClientMockRecorder
}

// MockProductInterestServiceClientMockRecorder is the mock recorder for MockProductInterestServiceClient.
type MockProductInterestServiceClientMockRecorder struct {
	mock *MockProductInterestServiceClient
}

// NewMockProductInterestServiceClient creates a new mock instance.
func NewMockProductInterestServiceClient(ctrl *gomock.Controller) *MockProductInterestServiceClient {
	mock := &MockProductInterestServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductInterestServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInterestServiceClient) EXPECT() *MockProductInterestServiceClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProductInterestServiceClient) Add(ctx context.Context, in *ProductInterestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockProductInterestServiceClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProductInterestServiceClient)(nil).Add), varargs...)
}

// Read mocks base method.
func (m *MockProductInterestServiceClient) Read(ctx context.Context, in *ProductInterestFilter, opts ...grpc.CallOption) (*ProductInterestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*ProductInterestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockProductInterestServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProductInterestServiceClient)(nil).Read), varargs...)
}

// MockProductInterestServiceServer is a mock of ProductInterestServiceServer interface.
type MockProductInterestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductInterestServiceServerMockRecorder
}

// MockProductInterestServiceServerMockRecorder is the mock recorder for MockProductInterestServiceServer.
type MockProductInterestServiceServerMockRecorder struct {
	mock *MockProductInterestServiceServer
}

// NewMockProductInterestServiceServer creates a new mock instance.
func NewMockProductInterestServiceServer(ctrl *gomock.Controller) *MockProductInterestServiceServer {
	mock := &MockProductInterestServiceServer{ctrl: ctrl}
	mock.recorder = &MockProductInterestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInterestServiceServer) EXPECT() *MockProductInterestServiceServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProductInterestServiceServer) Add(arg0 context.Context, arg1 *ProductInterestRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockProductInterestServiceServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProductInterestServiceServer)(nil).Add), arg0, arg1)
}

// Read mocks base method.
func (m *MockProductInterestServiceServer) Read(arg0 context.Context, arg1 *ProductInterestFilter) (*ProductInterestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*ProductInterestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockProductInterestServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProductInterestServiceServer)(nil).Read), arg0, arg1)
}

// mustEmbedUnimplementedProductInterestServiceServer mocks base method.
func (m *MockProductInterestServiceServer) mustEmbedUnimplementedProductInterestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductInterestServiceServer")
}

// mustEmbedUnimplementedProductInterestServiceServer indicates an expected call of mustEmbedUnimplementedProductInterestServiceServer.
func (mr *MockProductInterestServiceServerMockRecorder) mustEmbedUnimplementedProductInterestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductInterestServiceServer", reflect.TypeOf((*MockProductInterestServiceServer)(nil).mustEmbedUnimplementedProductInterestServiceServer))
}

// MockUnsafeProductInterestServiceServer is a mock of UnsafeProductInterestServiceServer interface.
type MockUnsafeProductInterestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductInterestServiceServerMockRecorder
}

// MockUnsafeProductInterestServiceServerMockRecorder is the mock recorder for MockUnsafeProductInterestServiceServer.
type MockUnsafeProductInterestServiceServerMockRecorder struct {
	mock *MockUnsafeProductInterestServiceServer
}

// NewMockUnsafeProductInterestServiceServer creates a new mock instance.
func NewMockUnsafeProductInterestServiceServer(ctrl *gomock.Controller) *MockUnsafeProductInterestServiceServer {
	mock := &MockUnsafeProductInterestServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductInterestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductInterestServiceServer) EXPECT() *MockUnsafeProductInterestServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductInterestServiceServer mocks base method.
func (m *MockUnsafeProductInterestServiceServer) mustEmbedUnimplementedProductInterestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductInterestServiceServer")
}

// mustEmbedUnimplementedProductInterestServiceServer indicates an expected call of mustEmbedUnimplementedProductInterestServiceServer.
func (mr *MockUnsafeProductInterestServiceServerMockRecorder) mustEmbedUnimplementedProductInterestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductInterestServiceServer", reflect.TypeOf((*MockUnsafeProductInterestServiceServer)(nil).mustEmbedUnimplementedProductInterestServiceServer))
}
