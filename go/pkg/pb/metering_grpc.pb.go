// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: metering.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeteringServiceClient is the client API for MeteringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeteringServiceClient interface {
	CreateInvalidRecords(ctx context.Context, in *CreateInvalidMeteringRecords, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Create(ctx context.Context, in *UsageCreate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Search(ctx context.Context, in *UsageFilter, opts ...grpc.CallOption) (MeteringService_SearchClient, error)
	SearchInvalid(ctx context.Context, in *InvalidMeteringRecordFilter, opts ...grpc.CallOption) (MeteringService_SearchInvalidClient, error)
	// this API is only for internal use, please DO NOT expose as a external API as it is not RESTful
	SearchResourceMeteringRecordsAsStream(ctx context.Context, in *MeteringFilter, opts ...grpc.CallOption) (MeteringService_SearchResourceMeteringRecordsAsStreamClient, error)
	// this API is only for internal use, please DO NOT expose as a external API as it is not RESTful
	SearchResourceMeteringRecords(ctx context.Context, in *MeteringFilter, opts ...grpc.CallOption) (*ResourceMeteringRecordsList, error)
	FindPrevious(ctx context.Context, in *UsagePrevious, opts ...grpc.CallOption) (*Usage, error)
	IsMeteringRecordAvailable(ctx context.Context, in *MeteringAvailableFilter, opts ...grpc.CallOption) (*MeteringAvailableResponse, error)
	Update(ctx context.Context, in *UsageUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type meteringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeteringServiceClient(cc grpc.ClientConnInterface) MeteringServiceClient {
	return &meteringServiceClient{cc}
}

func (c *meteringServiceClient) CreateInvalidRecords(ctx context.Context, in *CreateInvalidMeteringRecords, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.MeteringService/CreateInvalidRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) Create(ctx context.Context, in *UsageCreate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.MeteringService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) Search(ctx context.Context, in *UsageFilter, opts ...grpc.CallOption) (MeteringService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeteringService_ServiceDesc.Streams[0], "/proto.MeteringService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &meteringServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeteringService_SearchClient interface {
	Recv() (*Usage, error)
	grpc.ClientStream
}

type meteringServiceSearchClient struct {
	grpc.ClientStream
}

func (x *meteringServiceSearchClient) Recv() (*Usage, error) {
	m := new(Usage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meteringServiceClient) SearchInvalid(ctx context.Context, in *InvalidMeteringRecordFilter, opts ...grpc.CallOption) (MeteringService_SearchInvalidClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeteringService_ServiceDesc.Streams[1], "/proto.MeteringService/SearchInvalid", opts...)
	if err != nil {
		return nil, err
	}
	x := &meteringServiceSearchInvalidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeteringService_SearchInvalidClient interface {
	Recv() (*InvalidMeteringRecord, error)
	grpc.ClientStream
}

type meteringServiceSearchInvalidClient struct {
	grpc.ClientStream
}

func (x *meteringServiceSearchInvalidClient) Recv() (*InvalidMeteringRecord, error) {
	m := new(InvalidMeteringRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meteringServiceClient) SearchResourceMeteringRecordsAsStream(ctx context.Context, in *MeteringFilter, opts ...grpc.CallOption) (MeteringService_SearchResourceMeteringRecordsAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeteringService_ServiceDesc.Streams[2], "/proto.MeteringService/SearchResourceMeteringRecordsAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &meteringServiceSearchResourceMeteringRecordsAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeteringService_SearchResourceMeteringRecordsAsStreamClient interface {
	Recv() (*ResourceMeteringRecordsList, error)
	grpc.ClientStream
}

type meteringServiceSearchResourceMeteringRecordsAsStreamClient struct {
	grpc.ClientStream
}

func (x *meteringServiceSearchResourceMeteringRecordsAsStreamClient) Recv() (*ResourceMeteringRecordsList, error) {
	m := new(ResourceMeteringRecordsList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meteringServiceClient) SearchResourceMeteringRecords(ctx context.Context, in *MeteringFilter, opts ...grpc.CallOption) (*ResourceMeteringRecordsList, error) {
	out := new(ResourceMeteringRecordsList)
	err := c.cc.Invoke(ctx, "/proto.MeteringService/SearchResourceMeteringRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) FindPrevious(ctx context.Context, in *UsagePrevious, opts ...grpc.CallOption) (*Usage, error) {
	out := new(Usage)
	err := c.cc.Invoke(ctx, "/proto.MeteringService/FindPrevious", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) IsMeteringRecordAvailable(ctx context.Context, in *MeteringAvailableFilter, opts ...grpc.CallOption) (*MeteringAvailableResponse, error) {
	out := new(MeteringAvailableResponse)
	err := c.cc.Invoke(ctx, "/proto.MeteringService/IsMeteringRecordAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) Update(ctx context.Context, in *UsageUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.MeteringService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.MeteringService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeteringServiceServer is the server API for MeteringService service.
// All implementations must embed UnimplementedMeteringServiceServer
// for forward compatibility
type MeteringServiceServer interface {
	CreateInvalidRecords(context.Context, *CreateInvalidMeteringRecords) (*emptypb.Empty, error)
	Create(context.Context, *UsageCreate) (*emptypb.Empty, error)
	Search(*UsageFilter, MeteringService_SearchServer) error
	SearchInvalid(*InvalidMeteringRecordFilter, MeteringService_SearchInvalidServer) error
	// this API is only for internal use, please DO NOT expose as a external API as it is not RESTful
	SearchResourceMeteringRecordsAsStream(*MeteringFilter, MeteringService_SearchResourceMeteringRecordsAsStreamServer) error
	// this API is only for internal use, please DO NOT expose as a external API as it is not RESTful
	SearchResourceMeteringRecords(context.Context, *MeteringFilter) (*ResourceMeteringRecordsList, error)
	FindPrevious(context.Context, *UsagePrevious) (*Usage, error)
	IsMeteringRecordAvailable(context.Context, *MeteringAvailableFilter) (*MeteringAvailableResponse, error)
	Update(context.Context, *UsageUpdate) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedMeteringServiceServer()
}

// UnimplementedMeteringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeteringServiceServer struct {
}

func (UnimplementedMeteringServiceServer) CreateInvalidRecords(context.Context, *CreateInvalidMeteringRecords) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvalidRecords not implemented")
}
func (UnimplementedMeteringServiceServer) Create(context.Context, *UsageCreate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMeteringServiceServer) Search(*UsageFilter, MeteringService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMeteringServiceServer) SearchInvalid(*InvalidMeteringRecordFilter, MeteringService_SearchInvalidServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchInvalid not implemented")
}
func (UnimplementedMeteringServiceServer) SearchResourceMeteringRecordsAsStream(*MeteringFilter, MeteringService_SearchResourceMeteringRecordsAsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchResourceMeteringRecordsAsStream not implemented")
}
func (UnimplementedMeteringServiceServer) SearchResourceMeteringRecords(context.Context, *MeteringFilter) (*ResourceMeteringRecordsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchResourceMeteringRecords not implemented")
}
func (UnimplementedMeteringServiceServer) FindPrevious(context.Context, *UsagePrevious) (*Usage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPrevious not implemented")
}
func (UnimplementedMeteringServiceServer) IsMeteringRecordAvailable(context.Context, *MeteringAvailableFilter) (*MeteringAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMeteringRecordAvailable not implemented")
}
func (UnimplementedMeteringServiceServer) Update(context.Context, *UsageUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMeteringServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMeteringServiceServer) mustEmbedUnimplementedMeteringServiceServer() {}

// UnsafeMeteringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeteringServiceServer will
// result in compilation errors.
type UnsafeMeteringServiceServer interface {
	mustEmbedUnimplementedMeteringServiceServer()
}

func RegisterMeteringServiceServer(s grpc.ServiceRegistrar, srv MeteringServiceServer) {
	s.RegisterService(&MeteringService_ServiceDesc, srv)
}

func _MeteringService_CreateInvalidRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvalidMeteringRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).CreateInvalidRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/CreateInvalidRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).CreateInvalidRecords(ctx, req.(*CreateInvalidMeteringRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).Create(ctx, req.(*UsageCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UsageFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeteringServiceServer).Search(m, &meteringServiceSearchServer{stream})
}

type MeteringService_SearchServer interface {
	Send(*Usage) error
	grpc.ServerStream
}

type meteringServiceSearchServer struct {
	grpc.ServerStream
}

func (x *meteringServiceSearchServer) Send(m *Usage) error {
	return x.ServerStream.SendMsg(m)
}

func _MeteringService_SearchInvalid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InvalidMeteringRecordFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeteringServiceServer).SearchInvalid(m, &meteringServiceSearchInvalidServer{stream})
}

type MeteringService_SearchInvalidServer interface {
	Send(*InvalidMeteringRecord) error
	grpc.ServerStream
}

type meteringServiceSearchInvalidServer struct {
	grpc.ServerStream
}

func (x *meteringServiceSearchInvalidServer) Send(m *InvalidMeteringRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _MeteringService_SearchResourceMeteringRecordsAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MeteringFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeteringServiceServer).SearchResourceMeteringRecordsAsStream(m, &meteringServiceSearchResourceMeteringRecordsAsStreamServer{stream})
}

type MeteringService_SearchResourceMeteringRecordsAsStreamServer interface {
	Send(*ResourceMeteringRecordsList) error
	grpc.ServerStream
}

type meteringServiceSearchResourceMeteringRecordsAsStreamServer struct {
	grpc.ServerStream
}

func (x *meteringServiceSearchResourceMeteringRecordsAsStreamServer) Send(m *ResourceMeteringRecordsList) error {
	return x.ServerStream.SendMsg(m)
}

func _MeteringService_SearchResourceMeteringRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeteringFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).SearchResourceMeteringRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/SearchResourceMeteringRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).SearchResourceMeteringRecords(ctx, req.(*MeteringFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_FindPrevious_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsagePrevious)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).FindPrevious(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/FindPrevious",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).FindPrevious(ctx, req.(*UsagePrevious))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_IsMeteringRecordAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeteringAvailableFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).IsMeteringRecordAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/IsMeteringRecordAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).IsMeteringRecordAvailable(ctx, req.(*MeteringAvailableFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).Update(ctx, req.(*UsageUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MeteringService_ServiceDesc is the grpc.ServiceDesc for MeteringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeteringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MeteringService",
	HandlerType: (*MeteringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvalidRecords",
			Handler:    _MeteringService_CreateInvalidRecords_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MeteringService_Create_Handler,
		},
		{
			MethodName: "SearchResourceMeteringRecords",
			Handler:    _MeteringService_SearchResourceMeteringRecords_Handler,
		},
		{
			MethodName: "FindPrevious",
			Handler:    _MeteringService_FindPrevious_Handler,
		},
		{
			MethodName: "IsMeteringRecordAvailable",
			Handler:    _MeteringService_IsMeteringRecordAvailable_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MeteringService_Update_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MeteringService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _MeteringService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchInvalid",
			Handler:       _MeteringService_SearchInvalid_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchResourceMeteringRecordsAsStream",
			Handler:       _MeteringService_SearchResourceMeteringRecordsAsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metering.proto",
}
