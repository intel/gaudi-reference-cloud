// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: cloudaccount.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudAccountServiceClient is the client API for CloudAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountServiceClient interface {
	Create(ctx context.Context, in *CloudAccountCreate, opts ...grpc.CallOption) (*CloudAccountId, error)
	Ensure(ctx context.Context, in *CloudAccountCreate, opts ...grpc.CallOption) (*CloudAccount, error)
	GetById(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error)
	GetByOid(ctx context.Context, in *CloudAccountOid, opts ...grpc.CallOption) (*CloudAccount, error)
	GetByName(ctx context.Context, in *CloudAccountName, opts ...grpc.CallOption) (*CloudAccount, error)
	GetByPersonId(ctx context.Context, in *CloudAccountPersonId, opts ...grpc.CallOption) (*CloudAccount, error)
	Search(ctx context.Context, in *CloudAccountFilter, opts ...grpc.CallOption) (CloudAccountService_SearchClient, error)
	Update(ctx context.Context, in *CloudAccountUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckCloudAccountExists(ctx context.Context, in *CloudAccountName, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Delete(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountServiceClient(cc grpc.ClientConnInterface) CloudAccountServiceClient {
	return &cloudAccountServiceClient{cc}
}

func (c *cloudAccountServiceClient) Create(ctx context.Context, in *CloudAccountCreate, opts ...grpc.CallOption) (*CloudAccountId, error) {
	out := new(CloudAccountId)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) Ensure(ctx context.Context, in *CloudAccountCreate, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/Ensure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) GetById(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) GetByOid(ctx context.Context, in *CloudAccountOid, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/GetByOid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) GetByName(ctx context.Context, in *CloudAccountName, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) GetByPersonId(ctx context.Context, in *CloudAccountPersonId, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/GetByPersonId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) Search(ctx context.Context, in *CloudAccountFilter, opts ...grpc.CallOption) (CloudAccountService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudAccountService_ServiceDesc.Streams[0], "/proto.CloudAccountService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudAccountServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudAccountService_SearchClient interface {
	Recv() (*CloudAccount, error)
	grpc.ClientStream
}

type cloudAccountServiceSearchClient struct {
	grpc.ClientStream
}

func (x *cloudAccountServiceSearchClient) Recv() (*CloudAccount, error) {
	m := new(CloudAccount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudAccountServiceClient) Update(ctx context.Context, in *CloudAccountUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) CheckCloudAccountExists(ctx context.Context, in *CloudAccountName, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/CheckCloudAccountExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) Delete(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountServiceServer is the server API for CloudAccountService service.
// All implementations must embed UnimplementedCloudAccountServiceServer
// for forward compatibility
type CloudAccountServiceServer interface {
	Create(context.Context, *CloudAccountCreate) (*CloudAccountId, error)
	Ensure(context.Context, *CloudAccountCreate) (*CloudAccount, error)
	GetById(context.Context, *CloudAccountId) (*CloudAccount, error)
	GetByOid(context.Context, *CloudAccountOid) (*CloudAccount, error)
	GetByName(context.Context, *CloudAccountName) (*CloudAccount, error)
	GetByPersonId(context.Context, *CloudAccountPersonId) (*CloudAccount, error)
	Search(*CloudAccountFilter, CloudAccountService_SearchServer) error
	Update(context.Context, *CloudAccountUpdate) (*emptypb.Empty, error)
	CheckCloudAccountExists(context.Context, *CloudAccountName) (*wrapperspb.BoolValue, error)
	Delete(context.Context, *CloudAccountId) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudAccountServiceServer()
}

// UnimplementedCloudAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudAccountServiceServer struct {
}

func (UnimplementedCloudAccountServiceServer) Create(context.Context, *CloudAccountCreate) (*CloudAccountId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCloudAccountServiceServer) Ensure(context.Context, *CloudAccountCreate) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ensure not implemented")
}
func (UnimplementedCloudAccountServiceServer) GetById(context.Context, *CloudAccountId) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCloudAccountServiceServer) GetByOid(context.Context, *CloudAccountOid) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOid not implemented")
}
func (UnimplementedCloudAccountServiceServer) GetByName(context.Context, *CloudAccountName) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedCloudAccountServiceServer) GetByPersonId(context.Context, *CloudAccountPersonId) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPersonId not implemented")
}
func (UnimplementedCloudAccountServiceServer) Search(*CloudAccountFilter, CloudAccountService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedCloudAccountServiceServer) Update(context.Context, *CloudAccountUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCloudAccountServiceServer) CheckCloudAccountExists(context.Context, *CloudAccountName) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCloudAccountExists not implemented")
}
func (UnimplementedCloudAccountServiceServer) Delete(context.Context, *CloudAccountId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCloudAccountServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCloudAccountServiceServer) mustEmbedUnimplementedCloudAccountServiceServer() {}

// UnsafeCloudAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountServiceServer will
// result in compilation errors.
type UnsafeCloudAccountServiceServer interface {
	mustEmbedUnimplementedCloudAccountServiceServer()
}

func RegisterCloudAccountServiceServer(s grpc.ServiceRegistrar, srv CloudAccountServiceServer) {
	s.RegisterService(&CloudAccountService_ServiceDesc, srv)
}

func _CloudAccountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).Create(ctx, req.(*CloudAccountCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_Ensure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).Ensure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/Ensure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).Ensure(ctx, req.(*CloudAccountCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).GetById(ctx, req.(*CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_GetByOid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountOid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).GetByOid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/GetByOid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).GetByOid(ctx, req.(*CloudAccountOid))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).GetByName(ctx, req.(*CloudAccountName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_GetByPersonId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountPersonId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).GetByPersonId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/GetByPersonId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).GetByPersonId(ctx, req.(*CloudAccountPersonId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudAccountFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudAccountServiceServer).Search(m, &cloudAccountServiceSearchServer{stream})
}

type CloudAccountService_SearchServer interface {
	Send(*CloudAccount) error
	grpc.ServerStream
}

type cloudAccountServiceSearchServer struct {
	grpc.ServerStream
}

func (x *cloudAccountServiceSearchServer) Send(m *CloudAccount) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudAccountService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).Update(ctx, req.(*CloudAccountUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_CheckCloudAccountExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).CheckCloudAccountExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/CheckCloudAccountExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).CheckCloudAccountExists(ctx, req.(*CloudAccountName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).Delete(ctx, req.(*CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountService_ServiceDesc is the grpc.ServiceDesc for CloudAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudAccountService",
	HandlerType: (*CloudAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CloudAccountService_Create_Handler,
		},
		{
			MethodName: "Ensure",
			Handler:    _CloudAccountService_Ensure_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CloudAccountService_GetById_Handler,
		},
		{
			MethodName: "GetByOid",
			Handler:    _CloudAccountService_GetByOid_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _CloudAccountService_GetByName_Handler,
		},
		{
			MethodName: "GetByPersonId",
			Handler:    _CloudAccountService_GetByPersonId_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CloudAccountService_Update_Handler,
		},
		{
			MethodName: "CheckCloudAccountExists",
			Handler:    _CloudAccountService_CheckCloudAccountExists_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CloudAccountService_Delete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CloudAccountService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _CloudAccountService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudaccount.proto",
}

// CloudAccountMemberServiceClient is the client API for CloudAccountMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountMemberServiceClient interface {
	ReadMembers(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccountMembers, error)
	// Retrieve all active members who have accepted invites of a cloud account, excluding the cloud account owner
	ReadActiveMembers(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccountMembers, error)
	AddMembers(ctx context.Context, in *CloudAccountMembers, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveMembers(ctx context.Context, in *CloudAccountMembers, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadUserCloudAccounts(ctx context.Context, in *CloudAccountUser, opts ...grpc.CallOption) (*MemberAccount, error)
	// Called internally by OPA only
	GetCloudAccountsForOpa(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*RelatedAccounts, error)
	// Called internally by cloudaccount-enroll only
	UpdatePersonId(ctx context.Context, in *MemberPersonId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Called internally by OPA only
	GetMemberPersonId(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*AccountPerson, error)
}

type cloudAccountMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountMemberServiceClient(cc grpc.ClientConnInterface) CloudAccountMemberServiceClient {
	return &cloudAccountMemberServiceClient{cc}
}

func (c *cloudAccountMemberServiceClient) ReadMembers(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccountMembers, error) {
	out := new(CloudAccountMembers)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/ReadMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountMemberServiceClient) ReadActiveMembers(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccountMembers, error) {
	out := new(CloudAccountMembers)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/ReadActiveMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountMemberServiceClient) AddMembers(ctx context.Context, in *CloudAccountMembers, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/AddMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountMemberServiceClient) RemoveMembers(ctx context.Context, in *CloudAccountMembers, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/RemoveMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountMemberServiceClient) ReadUserCloudAccounts(ctx context.Context, in *CloudAccountUser, opts ...grpc.CallOption) (*MemberAccount, error) {
	out := new(MemberAccount)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/ReadUserCloudAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountMemberServiceClient) GetCloudAccountsForOpa(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*RelatedAccounts, error) {
	out := new(RelatedAccounts)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/GetCloudAccountsForOpa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountMemberServiceClient) UpdatePersonId(ctx context.Context, in *MemberPersonId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/UpdatePersonId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountMemberServiceClient) GetMemberPersonId(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*AccountPerson, error) {
	out := new(AccountPerson)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountMemberService/GetMemberPersonId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountMemberServiceServer is the server API for CloudAccountMemberService service.
// All implementations must embed UnimplementedCloudAccountMemberServiceServer
// for forward compatibility
type CloudAccountMemberServiceServer interface {
	ReadMembers(context.Context, *CloudAccountId) (*CloudAccountMembers, error)
	// Retrieve all active members who have accepted invites of a cloud account, excluding the cloud account owner
	ReadActiveMembers(context.Context, *CloudAccountId) (*CloudAccountMembers, error)
	AddMembers(context.Context, *CloudAccountMembers) (*emptypb.Empty, error)
	RemoveMembers(context.Context, *CloudAccountMembers) (*emptypb.Empty, error)
	ReadUserCloudAccounts(context.Context, *CloudAccountUser) (*MemberAccount, error)
	// Called internally by OPA only
	GetCloudAccountsForOpa(context.Context, *AccountUser) (*RelatedAccounts, error)
	// Called internally by cloudaccount-enroll only
	UpdatePersonId(context.Context, *MemberPersonId) (*emptypb.Empty, error)
	// Called internally by OPA only
	GetMemberPersonId(context.Context, *AccountUser) (*AccountPerson, error)
	mustEmbedUnimplementedCloudAccountMemberServiceServer()
}

// UnimplementedCloudAccountMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudAccountMemberServiceServer struct {
}

func (UnimplementedCloudAccountMemberServiceServer) ReadMembers(context.Context, *CloudAccountId) (*CloudAccountMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMembers not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) ReadActiveMembers(context.Context, *CloudAccountId) (*CloudAccountMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadActiveMembers not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) AddMembers(context.Context, *CloudAccountMembers) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMembers not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) RemoveMembers(context.Context, *CloudAccountMembers) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMembers not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) ReadUserCloudAccounts(context.Context, *CloudAccountUser) (*MemberAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserCloudAccounts not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) GetCloudAccountsForOpa(context.Context, *AccountUser) (*RelatedAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudAccountsForOpa not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) UpdatePersonId(context.Context, *MemberPersonId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonId not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) GetMemberPersonId(context.Context, *AccountUser) (*AccountPerson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberPersonId not implemented")
}
func (UnimplementedCloudAccountMemberServiceServer) mustEmbedUnimplementedCloudAccountMemberServiceServer() {
}

// UnsafeCloudAccountMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountMemberServiceServer will
// result in compilation errors.
type UnsafeCloudAccountMemberServiceServer interface {
	mustEmbedUnimplementedCloudAccountMemberServiceServer()
}

func RegisterCloudAccountMemberServiceServer(s grpc.ServiceRegistrar, srv CloudAccountMemberServiceServer) {
	s.RegisterService(&CloudAccountMemberService_ServiceDesc, srv)
}

func _CloudAccountMemberService_ReadMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).ReadMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/ReadMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).ReadMembers(ctx, req.(*CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountMemberService_ReadActiveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).ReadActiveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/ReadActiveMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).ReadActiveMembers(ctx, req.(*CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountMemberService_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/AddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).AddMembers(ctx, req.(*CloudAccountMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountMemberService_RemoveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).RemoveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/RemoveMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).RemoveMembers(ctx, req.(*CloudAccountMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountMemberService_ReadUserCloudAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).ReadUserCloudAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/ReadUserCloudAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).ReadUserCloudAccounts(ctx, req.(*CloudAccountUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountMemberService_GetCloudAccountsForOpa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).GetCloudAccountsForOpa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/GetCloudAccountsForOpa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).GetCloudAccountsForOpa(ctx, req.(*AccountUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountMemberService_UpdatePersonId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPersonId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).UpdatePersonId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/UpdatePersonId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).UpdatePersonId(ctx, req.(*MemberPersonId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountMemberService_GetMemberPersonId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountMemberServiceServer).GetMemberPersonId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountMemberService/GetMemberPersonId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountMemberServiceServer).GetMemberPersonId(ctx, req.(*AccountUser))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountMemberService_ServiceDesc is the grpc.ServiceDesc for CloudAccountMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudAccountMemberService",
	HandlerType: (*CloudAccountMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadMembers",
			Handler:    _CloudAccountMemberService_ReadMembers_Handler,
		},
		{
			MethodName: "ReadActiveMembers",
			Handler:    _CloudAccountMemberService_ReadActiveMembers_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _CloudAccountMemberService_AddMembers_Handler,
		},
		{
			MethodName: "RemoveMembers",
			Handler:    _CloudAccountMemberService_RemoveMembers_Handler,
		},
		{
			MethodName: "ReadUserCloudAccounts",
			Handler:    _CloudAccountMemberService_ReadUserCloudAccounts_Handler,
		},
		{
			MethodName: "GetCloudAccountsForOpa",
			Handler:    _CloudAccountMemberService_GetCloudAccountsForOpa_Handler,
		},
		{
			MethodName: "UpdatePersonId",
			Handler:    _CloudAccountMemberService_UpdatePersonId_Handler,
		},
		{
			MethodName: "GetMemberPersonId",
			Handler:    _CloudAccountMemberService_GetMemberPersonId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudaccount.proto",
}

// CloudAccountAppClientServiceClient is the client API for CloudAccountAppClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountAppClientServiceClient interface {
	// Called internally by OPA only - name and countryCode overwritten for member
	GetAppClientCloudAccount(ctx context.Context, in *AccountClient, opts ...grpc.CallOption) (*CloudAccount, error)
}

type cloudAccountAppClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountAppClientServiceClient(cc grpc.ClientConnInterface) CloudAccountAppClientServiceClient {
	return &cloudAccountAppClientServiceClient{cc}
}

func (c *cloudAccountAppClientServiceClient) GetAppClientCloudAccount(ctx context.Context, in *AccountClient, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountAppClientService/GetAppClientCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountAppClientServiceServer is the server API for CloudAccountAppClientService service.
// All implementations must embed UnimplementedCloudAccountAppClientServiceServer
// for forward compatibility
type CloudAccountAppClientServiceServer interface {
	// Called internally by OPA only - name and countryCode overwritten for member
	GetAppClientCloudAccount(context.Context, *AccountClient) (*CloudAccount, error)
	mustEmbedUnimplementedCloudAccountAppClientServiceServer()
}

// UnimplementedCloudAccountAppClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudAccountAppClientServiceServer struct {
}

func (UnimplementedCloudAccountAppClientServiceServer) GetAppClientCloudAccount(context.Context, *AccountClient) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppClientCloudAccount not implemented")
}
func (UnimplementedCloudAccountAppClientServiceServer) mustEmbedUnimplementedCloudAccountAppClientServiceServer() {
}

// UnsafeCloudAccountAppClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountAppClientServiceServer will
// result in compilation errors.
type UnsafeCloudAccountAppClientServiceServer interface {
	mustEmbedUnimplementedCloudAccountAppClientServiceServer()
}

func RegisterCloudAccountAppClientServiceServer(s grpc.ServiceRegistrar, srv CloudAccountAppClientServiceServer) {
	s.RegisterService(&CloudAccountAppClientService_ServiceDesc, srv)
}

func _CloudAccountAppClientService_GetAppClientCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountAppClientServiceServer).GetAppClientCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountAppClientService/GetAppClientCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountAppClientServiceServer).GetAppClientCloudAccount(ctx, req.(*AccountClient))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountAppClientService_ServiceDesc is the grpc.ServiceDesc for CloudAccountAppClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountAppClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudAccountAppClientService",
	HandlerType: (*CloudAccountAppClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppClientCloudAccount",
			Handler:    _CloudAccountAppClientService_GetAppClientCloudAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudaccount.proto",
}

// OtpServiceClient is the client API for OtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtpServiceClient interface {
	CreateOtp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyOtp(ctx context.Context, in *VerifyOtpRequest, opts ...grpc.CallOption) (*VerifyOtpResponse, error)
	ResendOtp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type otpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOtpServiceClient(cc grpc.ClientConnInterface) OtpServiceClient {
	return &otpServiceClient{cc}
}

func (c *otpServiceClient) CreateOtp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.OtpService/CreateOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otpServiceClient) VerifyOtp(ctx context.Context, in *VerifyOtpRequest, opts ...grpc.CallOption) (*VerifyOtpResponse, error) {
	out := new(VerifyOtpResponse)
	err := c.cc.Invoke(ctx, "/proto.OtpService/VerifyOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otpServiceClient) ResendOtp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.OtpService/ResendOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtpServiceServer is the server API for OtpService service.
// All implementations must embed UnimplementedOtpServiceServer
// for forward compatibility
type OtpServiceServer interface {
	CreateOtp(context.Context, *OtpRequest) (*emptypb.Empty, error)
	VerifyOtp(context.Context, *VerifyOtpRequest) (*VerifyOtpResponse, error)
	ResendOtp(context.Context, *OtpRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOtpServiceServer()
}

// UnimplementedOtpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOtpServiceServer struct {
}

func (UnimplementedOtpServiceServer) CreateOtp(context.Context, *OtpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOtp not implemented")
}
func (UnimplementedOtpServiceServer) VerifyOtp(context.Context, *VerifyOtpRequest) (*VerifyOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtp not implemented")
}
func (UnimplementedOtpServiceServer) ResendOtp(context.Context, *OtpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOtp not implemented")
}
func (UnimplementedOtpServiceServer) mustEmbedUnimplementedOtpServiceServer() {}

// UnsafeOtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtpServiceServer will
// result in compilation errors.
type UnsafeOtpServiceServer interface {
	mustEmbedUnimplementedOtpServiceServer()
}

func RegisterOtpServiceServer(s grpc.ServiceRegistrar, srv OtpServiceServer) {
	s.RegisterService(&OtpService_ServiceDesc, srv)
}

func _OtpService_CreateOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServiceServer).CreateOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OtpService/CreateOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServiceServer).CreateOtp(ctx, req.(*OtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtpService_VerifyOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServiceServer).VerifyOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OtpService/VerifyOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServiceServer).VerifyOtp(ctx, req.(*VerifyOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtpService_ResendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServiceServer).ResendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OtpService/ResendOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServiceServer).ResendOtp(ctx, req.(*OtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OtpService_ServiceDesc is the grpc.ServiceDesc for OtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OtpService",
	HandlerType: (*OtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOtp",
			Handler:    _OtpService_CreateOtp_Handler,
		},
		{
			MethodName: "VerifyOtp",
			Handler:    _OtpService_VerifyOtp_Handler,
		},
		{
			MethodName: "ResendOtp",
			Handler:    _OtpService_ResendOtp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudaccount.proto",
}

// CloudAccountInvitationServiceClient is the client API for CloudAccountInvitationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountInvitationServiceClient interface {
	CreateInvite(ctx context.Context, in *InviteRequestList, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadInvite(ctx context.Context, in *InviteFilter, opts ...grpc.CallOption) (*InviteList, error)
	ResendInvite(ctx context.Context, in *InviteResendRequest, opts ...grpc.CallOption) (*InviteResendResponse, error)
	RevokeInvite(ctx context.Context, in *InviteRevokeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateInviteCode(ctx context.Context, in *ValidateInviteCodeRequest, opts ...grpc.CallOption) (*ValidateInviteCodeResponse, error)
	SendInviteCode(ctx context.Context, in *SendInviteCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveInvite(ctx context.Context, in *InviteUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudAccountInvitationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountInvitationServiceClient(cc grpc.ClientConnInterface) CloudAccountInvitationServiceClient {
	return &cloudAccountInvitationServiceClient{cc}
}

func (c *cloudAccountInvitationServiceClient) CreateInvite(ctx context.Context, in *InviteRequestList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationService/CreateInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountInvitationServiceClient) ReadInvite(ctx context.Context, in *InviteFilter, opts ...grpc.CallOption) (*InviteList, error) {
	out := new(InviteList)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationService/ReadInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountInvitationServiceClient) ResendInvite(ctx context.Context, in *InviteResendRequest, opts ...grpc.CallOption) (*InviteResendResponse, error) {
	out := new(InviteResendResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationService/ResendInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountInvitationServiceClient) RevokeInvite(ctx context.Context, in *InviteRevokeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationService/RevokeInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountInvitationServiceClient) ValidateInviteCode(ctx context.Context, in *ValidateInviteCodeRequest, opts ...grpc.CallOption) (*ValidateInviteCodeResponse, error) {
	out := new(ValidateInviteCodeResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationService/ValidateInviteCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountInvitationServiceClient) SendInviteCode(ctx context.Context, in *SendInviteCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationService/SendInviteCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountInvitationServiceClient) RemoveInvite(ctx context.Context, in *InviteUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationService/RemoveInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountInvitationServiceServer is the server API for CloudAccountInvitationService service.
// All implementations must embed UnimplementedCloudAccountInvitationServiceServer
// for forward compatibility
type CloudAccountInvitationServiceServer interface {
	CreateInvite(context.Context, *InviteRequestList) (*emptypb.Empty, error)
	ReadInvite(context.Context, *InviteFilter) (*InviteList, error)
	ResendInvite(context.Context, *InviteResendRequest) (*InviteResendResponse, error)
	RevokeInvite(context.Context, *InviteRevokeRequest) (*emptypb.Empty, error)
	ValidateInviteCode(context.Context, *ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error)
	SendInviteCode(context.Context, *SendInviteCodeRequest) (*emptypb.Empty, error)
	RemoveInvite(context.Context, *InviteUpdateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudAccountInvitationServiceServer()
}

// UnimplementedCloudAccountInvitationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudAccountInvitationServiceServer struct {
}

func (UnimplementedCloudAccountInvitationServiceServer) CreateInvite(context.Context, *InviteRequestList) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvite not implemented")
}
func (UnimplementedCloudAccountInvitationServiceServer) ReadInvite(context.Context, *InviteFilter) (*InviteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadInvite not implemented")
}
func (UnimplementedCloudAccountInvitationServiceServer) ResendInvite(context.Context, *InviteResendRequest) (*InviteResendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendInvite not implemented")
}
func (UnimplementedCloudAccountInvitationServiceServer) RevokeInvite(context.Context, *InviteRevokeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvite not implemented")
}
func (UnimplementedCloudAccountInvitationServiceServer) ValidateInviteCode(context.Context, *ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInviteCode not implemented")
}
func (UnimplementedCloudAccountInvitationServiceServer) SendInviteCode(context.Context, *SendInviteCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInviteCode not implemented")
}
func (UnimplementedCloudAccountInvitationServiceServer) RemoveInvite(context.Context, *InviteUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInvite not implemented")
}
func (UnimplementedCloudAccountInvitationServiceServer) mustEmbedUnimplementedCloudAccountInvitationServiceServer() {
}

// UnsafeCloudAccountInvitationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountInvitationServiceServer will
// result in compilation errors.
type UnsafeCloudAccountInvitationServiceServer interface {
	mustEmbedUnimplementedCloudAccountInvitationServiceServer()
}

func RegisterCloudAccountInvitationServiceServer(s grpc.ServiceRegistrar, srv CloudAccountInvitationServiceServer) {
	s.RegisterService(&CloudAccountInvitationService_ServiceDesc, srv)
}

func _CloudAccountInvitationService_CreateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationServiceServer).CreateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationService/CreateInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationServiceServer).CreateInvite(ctx, req.(*InviteRequestList))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountInvitationService_ReadInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationServiceServer).ReadInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationService/ReadInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationServiceServer).ReadInvite(ctx, req.(*InviteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountInvitationService_ResendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteResendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationServiceServer).ResendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationService/ResendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationServiceServer).ResendInvite(ctx, req.(*InviteResendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountInvitationService_RevokeInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationServiceServer).RevokeInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationService/RevokeInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationServiceServer).RevokeInvite(ctx, req.(*InviteRevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountInvitationService_ValidateInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationServiceServer).ValidateInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationService/ValidateInviteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationServiceServer).ValidateInviteCode(ctx, req.(*ValidateInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountInvitationService_SendInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationServiceServer).SendInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationService/SendInviteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationServiceServer).SendInviteCode(ctx, req.(*SendInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountInvitationService_RemoveInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationServiceServer).RemoveInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationService/RemoveInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationServiceServer).RemoveInvite(ctx, req.(*InviteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountInvitationService_ServiceDesc is the grpc.ServiceDesc for CloudAccountInvitationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountInvitationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudAccountInvitationService",
	HandlerType: (*CloudAccountInvitationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvite",
			Handler:    _CloudAccountInvitationService_CreateInvite_Handler,
		},
		{
			MethodName: "ReadInvite",
			Handler:    _CloudAccountInvitationService_ReadInvite_Handler,
		},
		{
			MethodName: "ResendInvite",
			Handler:    _CloudAccountInvitationService_ResendInvite_Handler,
		},
		{
			MethodName: "RevokeInvite",
			Handler:    _CloudAccountInvitationService_RevokeInvite_Handler,
		},
		{
			MethodName: "ValidateInviteCode",
			Handler:    _CloudAccountInvitationService_ValidateInviteCode_Handler,
		},
		{
			MethodName: "SendInviteCode",
			Handler:    _CloudAccountInvitationService_SendInviteCode_Handler,
		},
		{
			MethodName: "RemoveInvite",
			Handler:    _CloudAccountInvitationService_RemoveInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudaccount.proto",
}

// CloudAccountInvitationMemberServiceClient is the client API for CloudAccountInvitationMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountInvitationMemberServiceClient interface {
	RejectInvite(ctx context.Context, in *InviteUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudAccountInvitationMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountInvitationMemberServiceClient(cc grpc.ClientConnInterface) CloudAccountInvitationMemberServiceClient {
	return &cloudAccountInvitationMemberServiceClient{cc}
}

func (c *cloudAccountInvitationMemberServiceClient) RejectInvite(ctx context.Context, in *InviteUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountInvitationMemberService/RejectInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountInvitationMemberServiceServer is the server API for CloudAccountInvitationMemberService service.
// All implementations must embed UnimplementedCloudAccountInvitationMemberServiceServer
// for forward compatibility
type CloudAccountInvitationMemberServiceServer interface {
	RejectInvite(context.Context, *InviteUpdateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer()
}

// UnimplementedCloudAccountInvitationMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudAccountInvitationMemberServiceServer struct {
}

func (UnimplementedCloudAccountInvitationMemberServiceServer) RejectInvite(context.Context, *InviteUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectInvite not implemented")
}
func (UnimplementedCloudAccountInvitationMemberServiceServer) mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer() {
}

// UnsafeCloudAccountInvitationMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountInvitationMemberServiceServer will
// result in compilation errors.
type UnsafeCloudAccountInvitationMemberServiceServer interface {
	mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer()
}

func RegisterCloudAccountInvitationMemberServiceServer(s grpc.ServiceRegistrar, srv CloudAccountInvitationMemberServiceServer) {
	s.RegisterService(&CloudAccountInvitationMemberService_ServiceDesc, srv)
}

func _CloudAccountInvitationMemberService_RejectInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountInvitationMemberServiceServer).RejectInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountInvitationMemberService/RejectInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountInvitationMemberServiceServer).RejectInvite(ctx, req.(*InviteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountInvitationMemberService_ServiceDesc is the grpc.ServiceDesc for CloudAccountInvitationMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountInvitationMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudAccountInvitationMemberService",
	HandlerType: (*CloudAccountInvitationMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RejectInvite",
			Handler:    _CloudAccountInvitationMemberService_RejectInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudaccount.proto",
}
