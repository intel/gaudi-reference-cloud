// After updating this file, run "make generate".
//
// See:
//  - https://developers.google.com/protocol-buffers/docs/proto3
//  - https://github.com/googleapis/googleapis/blob/master/google/api/http.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: compute.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunStrategy int32

const (
	// Instance will initially be running. It will be restarted if a failure occurs.
	// If the instance powers itself off, it will not be restarted.
	// Default.
	RunStrategy_RerunOnFailure RunStrategy = 0
	// Instance should never be running.
	RunStrategy_Halted RunStrategy = 1
	// Instance should always be running.
	RunStrategy_Always RunStrategy = 2
)

// Enum value maps for RunStrategy.
var (
	RunStrategy_name = map[int32]string{
		0: "RerunOnFailure",
		1: "Halted",
		2: "Always",
	}
	RunStrategy_value = map[string]int32{
		"RerunOnFailure": 0,
		"Halted":         1,
		"Always":         2,
	}
)

func (x RunStrategy) Enum() *RunStrategy {
	p := new(RunStrategy)
	*p = x
	return p
}

func (x RunStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[0].Descriptor()
}

func (RunStrategy) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[0]
}

func (x RunStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunStrategy.Descriptor instead.
func (RunStrategy) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{0}
}

type TriState int32

const (
	TriState_Undefined TriState = 0
	TriState_True      TriState = 1
	TriState_False     TriState = 2
)

// Enum value maps for TriState.
var (
	TriState_name = map[int32]string{
		0: "Undefined",
		1: "True",
		2: "False",
	}
	TriState_value = map[string]int32{
		"Undefined": 0,
		"True":      1,
		"False":     2,
	}
)

func (x TriState) Enum() *TriState {
	p := new(TriState)
	*p = x
	return p
}

func (x TriState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[1].Descriptor()
}

func (TriState) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[1]
}

func (x TriState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriState.Descriptor instead.
func (TriState) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{1}
}

type InstancePhase int32

const (
	// The system is creating and starting the instance.
	// Default.
	InstancePhase_Provisioning InstancePhase = 0
	// The instance is running and has completed the running startup process.
	InstancePhase_Ready InstancePhase = 1
	// The instance is in the process of being stopped.
	InstancePhase_Stopping InstancePhase = 2
	// The instance is stopped.
	InstancePhase_Stopped InstancePhase = 3
	// The instance and its associated resources are in the process of being deleted.
	InstancePhase_Terminating InstancePhase = 4
	// The instance crashed, failed, or is otherwise unavailable.
	InstancePhase_Failed InstancePhase = 5
	// The instance is in the process of startup.
	InstancePhase_Starting InstancePhase = 6
	// The instance has completed startup and is available to use.
	InstancePhase_Started InstancePhase = 7
)

// Enum value maps for InstancePhase.
var (
	InstancePhase_name = map[int32]string{
		0: "Provisioning",
		1: "Ready",
		2: "Stopping",
		3: "Stopped",
		4: "Terminating",
		5: "Failed",
		6: "Starting",
		7: "Started",
	}
	InstancePhase_value = map[string]int32{
		"Provisioning": 0,
		"Ready":        1,
		"Stopping":     2,
		"Stopped":      3,
		"Terminating":  4,
		"Failed":       5,
		"Starting":     6,
		"Started":      7,
	}
)

func (x InstancePhase) Enum() *InstancePhase {
	p := new(InstancePhase)
	*p = x
	return p
}

func (x InstancePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstancePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[2].Descriptor()
}

func (InstancePhase) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[2]
}

func (x InstancePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstancePhase.Descriptor instead.
func (InstancePhase) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{2}
}

type SearchFilterCriteria int32

const (
	// Use the default behavior, which is described in the specific SearchFilterCriteria field.
	SearchFilterCriteria_Default SearchFilterCriteria = 0
	// Return records with any value in this field (including empty).
	SearchFilterCriteria_Any SearchFilterCriteria = 1
	// Return records with an empty value in this field
	SearchFilterCriteria_Empty SearchFilterCriteria = 2
	// Return records with a non-empty value in this field
	SearchFilterCriteria_NonEmpty SearchFilterCriteria = 3
	// Return records with an exact value in this field
	SearchFilterCriteria_ExactValue SearchFilterCriteria = 4
)

// Enum value maps for SearchFilterCriteria.
var (
	SearchFilterCriteria_name = map[int32]string{
		0: "Default",
		1: "Any",
		2: "Empty",
		3: "NonEmpty",
		4: "ExactValue",
	}
	SearchFilterCriteria_value = map[string]int32{
		"Default":    0,
		"Any":        1,
		"Empty":      2,
		"NonEmpty":   3,
		"ExactValue": 4,
	}
)

func (x SearchFilterCriteria) Enum() *SearchFilterCriteria {
	p := new(SearchFilterCriteria)
	*p = x
	return p
}

func (x SearchFilterCriteria) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchFilterCriteria) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[3].Descriptor()
}

func (SearchFilterCriteria) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[3]
}

func (x SearchFilterCriteria) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchFilterCriteria.Descriptor instead.
func (SearchFilterCriteria) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{3}
}

type InstanceCategory int32

const (
	InstanceCategory_VirtualMachine InstanceCategory = 0
	InstanceCategory_BareMetalHost  InstanceCategory = 1
)

// Enum value maps for InstanceCategory.
var (
	InstanceCategory_name = map[int32]string{
		0: "VirtualMachine",
		1: "BareMetalHost",
	}
	InstanceCategory_value = map[string]int32{
		"VirtualMachine": 0,
		"BareMetalHost":  1,
	}
)

func (x InstanceCategory) Enum() *InstanceCategory {
	p := new(InstanceCategory)
	*p = x
	return p
}

func (x InstanceCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[4].Descriptor()
}

func (InstanceCategory) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[4]
}

func (x InstanceCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceCategory.Descriptor instead.
func (InstanceCategory) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{4}
}

type LoadBalancerMonitorType int32

const (
	// Healthcheck monitoring type utilizing TCP checks.
	// Default.
	LoadBalancerMonitorType_tcp LoadBalancerMonitorType = 0
	// HTTP monitoring type expecting a "200 OK" HTTP Response.
	LoadBalancerMonitorType_http LoadBalancerMonitorType = 1
	// HTTPS monitoring type expecting a "200 OK" HTTP Response.
	LoadBalancerMonitorType_https LoadBalancerMonitorType = 2
)

// Enum value maps for LoadBalancerMonitorType.
var (
	LoadBalancerMonitorType_name = map[int32]string{
		0: "tcp",
		1: "http",
		2: "https",
	}
	LoadBalancerMonitorType_value = map[string]int32{
		"tcp":   0,
		"http":  1,
		"https": 2,
	}
)

func (x LoadBalancerMonitorType) Enum() *LoadBalancerMonitorType {
	p := new(LoadBalancerMonitorType)
	*p = x
	return p
}

func (x LoadBalancerMonitorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancerMonitorType) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[5].Descriptor()
}

func (LoadBalancerMonitorType) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[5]
}

func (x LoadBalancerMonitorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancerMonitorType.Descriptor instead.
func (LoadBalancerMonitorType) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{5}
}

type LoadBalancingMode int32

const (
	// Default.
	LoadBalancingMode_roundRobin             LoadBalancingMode = 0
	LoadBalancingMode_leastConnectionsMember LoadBalancingMode = 1
)

// Enum value maps for LoadBalancingMode.
var (
	LoadBalancingMode_name = map[int32]string{
		0: "roundRobin",
		1: "leastConnectionsMember",
	}
	LoadBalancingMode_value = map[string]int32{
		"roundRobin":             0,
		"leastConnectionsMember": 1,
	}
)

func (x LoadBalancingMode) Enum() *LoadBalancingMode {
	p := new(LoadBalancingMode)
	*p = x
	return p
}

func (x LoadBalancingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[6].Descriptor()
}

func (LoadBalancingMode) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[6]
}

func (x LoadBalancingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancingMode.Descriptor instead.
func (LoadBalancingMode) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{6}
}

type LoadBalancerInstanceType int32

const (
	// External load balancer type which will provision an external VIP.
	// Default.
	LoadBalancerInstanceType_public LoadBalancerInstanceType = 0
	// Internal load balancer type which will provision an internal VIP.
	LoadBalancerInstanceType_private LoadBalancerInstanceType = 1
)

// Enum value maps for LoadBalancerInstanceType.
var (
	LoadBalancerInstanceType_name = map[int32]string{
		0: "public",
		1: "private",
	}
	LoadBalancerInstanceType_value = map[string]int32{
		"public":  0,
		"private": 1,
	}
)

func (x LoadBalancerInstanceType) Enum() *LoadBalancerInstanceType {
	p := new(LoadBalancerInstanceType)
	*p = x
	return p
}

func (x LoadBalancerInstanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancerInstanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[7].Descriptor()
}

func (LoadBalancerInstanceType) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[7]
}

func (x LoadBalancerInstanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancerInstanceType.Descriptor instead.
func (LoadBalancerInstanceType) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{7}
}

type LoadBalancerState int32

const (
	// The system is creating and starting the load balancer.
	// Default.
	LoadBalancerState_Pending LoadBalancerState = 0
	// The load balancer is running and has completed the running startup process.
	LoadBalancerState_Active LoadBalancerState = 1
	// The load balancer is in the process of being stopped.
	LoadBalancerState_Deleting LoadBalancerState = 2
)

// Enum value maps for LoadBalancerState.
var (
	LoadBalancerState_name = map[int32]string{
		0: "Pending",
		1: "Active",
		2: "Deleting",
	}
	LoadBalancerState_value = map[string]int32{
		"Pending":  0,
		"Active":   1,
		"Deleting": 2,
	}
)

func (x LoadBalancerState) Enum() *LoadBalancerState {
	p := new(LoadBalancerState)
	*p = x
	return p
}

func (x LoadBalancerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancerState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[8].Descriptor()
}

func (LoadBalancerState) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[8]
}

func (x LoadBalancerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancerState.Descriptor instead.
func (LoadBalancerState) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{8}
}

type SshPublicKeyCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResourceMetadataCreate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *SshPublicKeySpec       `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *SshPublicKeyCreateRequest) Reset() {
	*x = SshPublicKeyCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKeyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKeyCreateRequest) ProtoMessage() {}

func (x *SshPublicKeyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKeyCreateRequest.ProtoReflect.Descriptor instead.
func (*SshPublicKeyCreateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{0}
}

func (x *SshPublicKeyCreateRequest) GetMetadata() *ResourceMetadataCreate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SshPublicKeyCreateRequest) GetSpec() *SshPublicKeySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type SshPublicKeyGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResourceMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SshPublicKeyGetRequest) Reset() {
	*x = SshPublicKeyGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKeyGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKeyGetRequest) ProtoMessage() {}

func (x *SshPublicKeyGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKeyGetRequest.ProtoReflect.Descriptor instead.
func (*SshPublicKeyGetRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{1}
}

func (x *SshPublicKeyGetRequest) GetMetadata() *ResourceMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SshPublicKeySearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResourceMetadataSearch `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SshPublicKeySearchRequest) Reset() {
	*x = SshPublicKeySearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKeySearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKeySearchRequest) ProtoMessage() {}

func (x *SshPublicKeySearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKeySearchRequest.ProtoReflect.Descriptor instead.
func (*SshPublicKeySearchRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{2}
}

func (x *SshPublicKeySearchRequest) GetMetadata() *ResourceMetadataSearch {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SshPublicKeySearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SshPublicKey `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SshPublicKeySearchResponse) Reset() {
	*x = SshPublicKeySearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKeySearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKeySearchResponse) ProtoMessage() {}

func (x *SshPublicKeySearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKeySearchResponse.ProtoReflect.Descriptor instead.
func (*SshPublicKeySearchResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{3}
}

func (x *SshPublicKeySearchResponse) GetItems() []*SshPublicKey {
	if x != nil {
		return x.Items
	}
	return nil
}

type SshPublicKeyUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResourceMetadataUpdate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The entire spec will be replaced.
	Spec *SshPublicKeySpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *SshPublicKeyUpdateRequest) Reset() {
	*x = SshPublicKeyUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKeyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKeyUpdateRequest) ProtoMessage() {}

func (x *SshPublicKeyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKeyUpdateRequest.ProtoReflect.Descriptor instead.
func (*SshPublicKeyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{4}
}

func (x *SshPublicKeyUpdateRequest) GetMetadata() *ResourceMetadataUpdate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SshPublicKeyUpdateRequest) GetSpec() *SshPublicKeySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type SshPublicKeyDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResourceMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SshPublicKeyDeleteRequest) Reset() {
	*x = SshPublicKeyDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKeyDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKeyDeleteRequest) ProtoMessage() {}

func (x *SshPublicKeyDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKeyDeleteRequest.ProtoReflect.Descriptor instead.
func (*SshPublicKeyDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{5}
}

func (x *SshPublicKeyDeleteRequest) GetMetadata() *ResourceMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SshPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *SshPublicKeySpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *SshPublicKey) Reset() {
	*x = SshPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKey) ProtoMessage() {}

func (x *SshPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKey.ProtoReflect.Descriptor instead.
func (*SshPublicKey) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{6}
}

func (x *SshPublicKey) GetMetadata() *ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SshPublicKey) GetSpec() *SshPublicKeySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type SshPublicKeySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SSH public key in authorized_keys format "ssh-rsa ... comment".
	SshPublicKey string `protobuf:"bytes,1,opt,name=sshPublicKey,proto3" json:"sshPublicKey,omitempty"`
	OwnerEmail   string `protobuf:"bytes,2,opt,name=ownerEmail,proto3" json:"ownerEmail,omitempty"`
}

func (x *SshPublicKeySpec) Reset() {
	*x = SshPublicKeySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshPublicKeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshPublicKeySpec) ProtoMessage() {}

func (x *SshPublicKeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshPublicKeySpec.ProtoReflect.Descriptor instead.
func (*SshPublicKeySpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{7}
}

func (x *SshPublicKeySpec) GetSshPublicKey() string {
	if x != nil {
		return x.SshPublicKey
	}
	return ""
}

func (x *SshPublicKeySpec) GetOwnerEmail() string {
	if x != nil {
		return x.OwnerEmail
	}
	return ""
}

type ResourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A globally unique UUID.
	ResourceId        string                 `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Labels            map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	AllowDelete       bool                   `protobuf:"varint,6,opt,name=allowDelete,proto3" json:"allowDelete,omitempty"`
}

func (x *ResourceMetadata) Reset() {
	*x = ResourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadata) ProtoMessage() {}

func (x *ResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadata.ProtoReflect.Descriptor instead.
func (*ResourceMetadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ResourceMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceMetadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ResourceMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *ResourceMetadata) GetAllowDelete() bool {
	if x != nil {
		return x.AllowDelete
	}
	return false
}

type ResourceMetadataCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// If Name is not empty, it must be unique within the cloudAccountId.
	// It will be generated if empty.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Not implemented.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceMetadataCreate) Reset() {
	*x = ResourceMetadataCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetadataCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadataCreate) ProtoMessage() {}

func (x *ResourceMetadataCreate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadataCreate.ProtoReflect.Descriptor instead.
func (*ResourceMetadataCreate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceMetadataCreate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ResourceMetadataCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceMetadataCreate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResourceMetadataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*ResourceMetadataUpdate_Name
	//	*ResourceMetadataUpdate_ResourceId
	NameOrId isResourceMetadataUpdate_NameOrId `protobuf_oneof:"nameOrId"`
	// The entire set of labels will be replaced with these labels.
	// Not implemented.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceMetadataUpdate) Reset() {
	*x = ResourceMetadataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetadataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadataUpdate) ProtoMessage() {}

func (x *ResourceMetadataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadataUpdate.ProtoReflect.Descriptor instead.
func (*ResourceMetadataUpdate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{10}
}

func (x *ResourceMetadataUpdate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *ResourceMetadataUpdate) GetNameOrId() isResourceMetadataUpdate_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *ResourceMetadataUpdate) GetName() string {
	if x, ok := x.GetNameOrId().(*ResourceMetadataUpdate_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ResourceMetadataUpdate) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*ResourceMetadataUpdate_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

func (x *ResourceMetadataUpdate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isResourceMetadataUpdate_NameOrId interface {
	isResourceMetadataUpdate_NameOrId()
}

type ResourceMetadataUpdate_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type ResourceMetadataUpdate_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*ResourceMetadataUpdate_Name) isResourceMetadataUpdate_NameOrId() {}

func (*ResourceMetadataUpdate_ResourceId) isResourceMetadataUpdate_NameOrId() {}

// A reference to a single resource.
type ResourceMetadataReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*ResourceMetadataReference_Name
	//	*ResourceMetadataReference_ResourceId
	NameOrId isResourceMetadataReference_NameOrId `protobuf_oneof:"nameOrId"`
}

func (x *ResourceMetadataReference) Reset() {
	*x = ResourceMetadataReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetadataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadataReference) ProtoMessage() {}

func (x *ResourceMetadataReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadataReference.ProtoReflect.Descriptor instead.
func (*ResourceMetadataReference) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{11}
}

func (x *ResourceMetadataReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *ResourceMetadataReference) GetNameOrId() isResourceMetadataReference_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *ResourceMetadataReference) GetName() string {
	if x, ok := x.GetNameOrId().(*ResourceMetadataReference_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ResourceMetadataReference) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*ResourceMetadataReference_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

type isResourceMetadataReference_NameOrId interface {
	isResourceMetadataReference_NameOrId()
}

type ResourceMetadataReference_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type ResourceMetadataReference_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*ResourceMetadataReference_Name) isResourceMetadataReference_NameOrId() {}

func (*ResourceMetadataReference_ResourceId) isResourceMetadataReference_NameOrId() {}

type ResourceMetadataSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string            `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Labels         map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceMetadataSearch) Reset() {
	*x = ResourceMetadataSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetadataSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadataSearch) ProtoMessage() {}

func (x *ResourceMetadataSearch) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadataSearch.ProtoReflect.Descriptor instead.
func (*ResourceMetadataSearch) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{12}
}

func (x *ResourceMetadataSearch) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ResourceMetadataSearch) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type InstanceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataCreate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceSpec           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceCreateRequest) Reset() {
	*x = InstanceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceCreateRequest) ProtoMessage() {}

func (x *InstanceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceCreateRequest.ProtoReflect.Descriptor instead.
func (*InstanceCreateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{13}
}

func (x *InstanceCreateRequest) GetMetadata() *InstanceMetadataCreate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceCreateRequest) GetSpec() *InstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceGetRequest) Reset() {
	*x = InstanceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGetRequest) ProtoMessage() {}

func (x *InstanceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGetRequest.ProtoReflect.Descriptor instead.
func (*InstanceGetRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{14}
}

func (x *InstanceGetRequest) GetMetadata() *InstanceMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataSearch `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceSearchRequest) Reset() {
	*x = InstanceSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSearchRequest) ProtoMessage() {}

func (x *InstanceSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSearchRequest.ProtoReflect.Descriptor instead.
func (*InstanceSearchRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{15}
}

func (x *InstanceSearchRequest) GetMetadata() *InstanceMetadataSearch {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Instance `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *InstanceSearchResponse) Reset() {
	*x = InstanceSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSearchResponse) ProtoMessage() {}

func (x *InstanceSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSearchResponse.ProtoReflect.Descriptor instead.
func (*InstanceSearchResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{16}
}

func (x *InstanceSearchResponse) GetItems() []*Instance {
	if x != nil {
		return x.Items
	}
	return nil
}

type InstanceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataUpdate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The entire spec will be replaced.
	Spec *InstanceSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceUpdateRequest) Reset() {
	*x = InstanceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceUpdateRequest) ProtoMessage() {}

func (x *InstanceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceUpdateRequest.ProtoReflect.Descriptor instead.
func (*InstanceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceUpdateRequest) GetMetadata() *InstanceMetadataUpdate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceUpdateRequest) GetSpec() *InstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceDeleteRequest) Reset() {
	*x = InstanceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceDeleteRequest) ProtoMessage() {}

func (x *InstanceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceDeleteRequest.ProtoReflect.Descriptor instead.
func (*InstanceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceDeleteRequest) GetMetadata() *InstanceMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *InstanceStatus   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{19}
}

func (x *Instance) GetMetadata() *InstanceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Instance) GetSpec() *InstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Instance) GetStatus() *InstanceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the network interface as known by the operating system.
	// Not implemented.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the VNet that the network interface connects to.
	VNet string `protobuf:"bytes,2,opt,name=vNet,proto3" json:"vNet,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetVNet() string {
	if x != nil {
		return x.VNet
	}
	return ""
}

type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=matchLabels,proto3" json:"matchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{21}
}

func (x *LabelSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

type TopologySpreadConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelSelector *LabelSelector `protobuf:"bytes,1,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
}

func (x *TopologySpreadConstraints) Reset() {
	*x = TopologySpreadConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologySpreadConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologySpreadConstraints) ProtoMessage() {}

func (x *TopologySpreadConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologySpreadConstraints.ProtoReflect.Descriptor instead.
func (*TopologySpreadConstraints) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{22}
}

func (x *TopologySpreadConstraints) GetLabelSelector() *LabelSelector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

type InstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented.
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The name of an InstanceType.
	InstanceType string `protobuf:"bytes,2,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// The name of a MachineImage.
	// Not implemented.
	MachineImage string `protobuf:"bytes,3,opt,name=machineImage,proto3" json:"machineImage,omitempty"`
	// Controls the instance power state.
	RunStrategy RunStrategy `protobuf:"varint,4,opt,name=runStrategy,proto3,enum=proto.RunStrategy" json:"runStrategy,omitempty"`
	// The name of a previously stored SSH public key.
	// Users can use the corresponding SSH private key to SSH to this instance.
	SshPublicKeyNames []string `protobuf:"bytes,5,rep,name=sshPublicKeyNames,proto3" json:"sshPublicKeyNames,omitempty"`
	// Not implemented.
	Interfaces []*NetworkInterface `protobuf:"bytes,6,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// This controls how instances are spread across the failure domains within the availability zone.
	// This can help to achieve high availability.
	// If this contains at least one key/value pair in matchLabels, then instances that have all of these key/value pairs
	// will be placed evenly across failure domains.
	TopologySpreadConstraints []*TopologySpreadConstraints `protobuf:"bytes,15,rep,name=topologySpreadConstraints,proto3" json:"topologySpreadConstraints,omitempty"`
	// The cloud-config for this instance
	UserData string `protobuf:"bytes,17,opt,name=userData,proto3" json:"userData,omitempty"`
	// If not empty, this instance is part of the named instance group.
	InstanceGroup string `protobuf:"bytes,18,opt,name=instanceGroup,proto3" json:"instanceGroup,omitempty"`
	// If True, Quick Connect will be enabled.
	// If False, Quick Connect will be disabled.
	// If Undefined during instance creation, Quick Connect will be disabled.
	// If Undefined during instance update, the Quick Connect state will be unchanged.
	QuickConnectEnabled TriState `protobuf:"varint,22,opt,name=quickConnectEnabled,proto3,enum=proto.TriState" json:"quickConnectEnabled,omitempty"`
}

func (x *InstanceSpec) Reset() {
	*x = InstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSpec) ProtoMessage() {}

func (x *InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSpec.ProtoReflect.Descriptor instead.
func (*InstanceSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{23}
}

func (x *InstanceSpec) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *InstanceSpec) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *InstanceSpec) GetMachineImage() string {
	if x != nil {
		return x.MachineImage
	}
	return ""
}

func (x *InstanceSpec) GetRunStrategy() RunStrategy {
	if x != nil {
		return x.RunStrategy
	}
	return RunStrategy_RerunOnFailure
}

func (x *InstanceSpec) GetSshPublicKeyNames() []string {
	if x != nil {
		return x.SshPublicKeyNames
	}
	return nil
}

func (x *InstanceSpec) GetInterfaces() []*NetworkInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *InstanceSpec) GetTopologySpreadConstraints() []*TopologySpreadConstraints {
	if x != nil {
		return x.TopologySpreadConstraints
	}
	return nil
}

func (x *InstanceSpec) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *InstanceSpec) GetInstanceGroup() string {
	if x != nil {
		return x.InstanceGroup
	}
	return ""
}

func (x *InstanceSpec) GetQuickConnectEnabled() TriState {
	if x != nil {
		return x.QuickConnectEnabled
	}
	return TriState_Undefined
}

type InstanceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	// This is also used by TopologySpreadConstraints.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Not implemented.
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
}

func (x *InstanceMetadata) Reset() {
	*x = InstanceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadata) ProtoMessage() {}

func (x *InstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadata.ProtoReflect.Descriptor instead.
func (*InstanceMetadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{24}
}

func (x *InstanceMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceMetadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceMetadata) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *InstanceMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InstanceMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *InstanceMetadata) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

type InstanceMetadataCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name will be generated if empty.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	// This is also used by TopologySpreadConstraints.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,4,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
	ProductId string `protobuf:"bytes,5,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *InstanceMetadataCreate) Reset() {
	*x = InstanceMetadataCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMetadataCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadataCreate) ProtoMessage() {}

func (x *InstanceMetadataCreate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadataCreate.ProtoReflect.Descriptor instead.
func (*InstanceMetadataCreate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{25}
}

func (x *InstanceMetadataCreate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceMetadataCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceMetadataCreate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *InstanceMetadataCreate) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

func (x *InstanceMetadataCreate) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type InstanceMetadataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*InstanceMetadataUpdate_Name
	//	*InstanceMetadataUpdate_ResourceId
	NameOrId isInstanceMetadataUpdate_NameOrId `protobuf_oneof:"nameOrId"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The entire set of labels will be replaced with these labels.
	// Not implemented.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,6,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
}

func (x *InstanceMetadataUpdate) Reset() {
	*x = InstanceMetadataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMetadataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadataUpdate) ProtoMessage() {}

func (x *InstanceMetadataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadataUpdate.ProtoReflect.Descriptor instead.
func (*InstanceMetadataUpdate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{26}
}

func (x *InstanceMetadataUpdate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *InstanceMetadataUpdate) GetNameOrId() isInstanceMetadataUpdate_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *InstanceMetadataUpdate) GetName() string {
	if x, ok := x.GetNameOrId().(*InstanceMetadataUpdate_Name); ok {
		return x.Name
	}
	return ""
}

func (x *InstanceMetadataUpdate) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*InstanceMetadataUpdate_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceMetadataUpdate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *InstanceMetadataUpdate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *InstanceMetadataUpdate) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

type isInstanceMetadataUpdate_NameOrId interface {
	isInstanceMetadataUpdate_NameOrId()
}

type InstanceMetadataUpdate_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type InstanceMetadataUpdate_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*InstanceMetadataUpdate_Name) isInstanceMetadataUpdate_NameOrId() {}

func (*InstanceMetadataUpdate_ResourceId) isInstanceMetadataUpdate_NameOrId() {}

// A reference to a single instance.
type InstanceMetadataReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*InstanceMetadataReference_Name
	//	*InstanceMetadataReference_ResourceId
	NameOrId isInstanceMetadataReference_NameOrId `protobuf_oneof:"nameOrId"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,5,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
}

func (x *InstanceMetadataReference) Reset() {
	*x = InstanceMetadataReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMetadataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadataReference) ProtoMessage() {}

func (x *InstanceMetadataReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadataReference.ProtoReflect.Descriptor instead.
func (*InstanceMetadataReference) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{27}
}

func (x *InstanceMetadataReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *InstanceMetadataReference) GetNameOrId() isInstanceMetadataReference_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *InstanceMetadataReference) GetName() string {
	if x, ok := x.GetNameOrId().(*InstanceMetadataReference_Name); ok {
		return x.Name
	}
	return ""
}

func (x *InstanceMetadataReference) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*InstanceMetadataReference_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceMetadataReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

// Deprecated: Do not use.
func (x *InstanceMetadataReference) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

type isInstanceMetadataReference_NameOrId interface {
	isInstanceMetadataReference_NameOrId()
}

type InstanceMetadataReference_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type InstanceMetadataReference_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*InstanceMetadataReference_Name) isInstanceMetadataReference_NameOrId() {}

func (*InstanceMetadataReference_ResourceId) isInstanceMetadataReference_NameOrId() {}

type InstanceMetadataSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// If not empty, only return instances that have these key/value pairs.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,3,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
	// If instanceGroupFilter is ExactValue, return instances in this instance group.
	// Otherwise, this field is ignored
	InstanceGroup string `protobuf:"bytes,4,opt,name=instanceGroup,proto3" json:"instanceGroup,omitempty"`
	// Filter instances by instance group.
	// If Default, this behaves like Empty and returns instances that are not in any instance group.
	InstanceGroupFilter SearchFilterCriteria `protobuf:"varint,5,opt,name=instanceGroupFilter,proto3,enum=proto.SearchFilterCriteria" json:"instanceGroupFilter,omitempty"`
}

func (x *InstanceMetadataSearch) Reset() {
	*x = InstanceMetadataSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMetadataSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadataSearch) ProtoMessage() {}

func (x *InstanceMetadataSearch) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadataSearch.ProtoReflect.Descriptor instead.
func (*InstanceMetadataSearch) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{28}
}

func (x *InstanceMetadataSearch) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceMetadataSearch) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *InstanceMetadataSearch) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

func (x *InstanceMetadataSearch) GetInstanceGroup() string {
	if x != nil {
		return x.InstanceGroup
	}
	return ""
}

func (x *InstanceMetadataSearch) GetInstanceGroupFilter() SearchFilterCriteria {
	if x != nil {
		return x.InstanceGroupFilter
	}
	return SearchFilterCriteria_Default
}

type InstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance phase.
	Phase InstancePhase `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.InstancePhase" json:"phase,omitempty"`
	// Additional details about the state or any error conditions.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A list of network interfaces, along with the private IP address assigned to the interface.
	Interfaces []*InstanceInterfaceStatus `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Parameters required to connect to the SSH proxy.
	SshProxy *SshProxyTunnelStatus `protobuf:"bytes,4,opt,name=sshProxy,proto3" json:"sshProxy,omitempty"`
	// The user name that should be used to SSH into the instance.
	UserName string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *InstanceStatus) Reset() {
	*x = InstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatus) ProtoMessage() {}

func (x *InstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatus.ProtoReflect.Descriptor instead.
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{29}
}

func (x *InstanceStatus) GetPhase() InstancePhase {
	if x != nil {
		return x.Phase
	}
	return InstancePhase_Provisioning
}

func (x *InstanceStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstanceStatus) GetInterfaces() []*InstanceInterfaceStatus {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *InstanceStatus) GetSshProxy() *SshProxyTunnelStatus {
	if x != nil {
		return x.SshProxy
	}
	return nil
}

func (x *InstanceStatus) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type InstanceInterfaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Not implemented.
	VNet string `protobuf:"bytes,2,opt,name=vNet,proto3" json:"vNet,omitempty"`
	// Fully qualified domain name (FQDN) of interface.
	DnsName string `protobuf:"bytes,3,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	// Subnet prefix length.
	PrefixLength int32 `protobuf:"varint,4,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	// List of IP addresses.
	Addresses []string `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Subnet IP address in format "1.2.3.4".
	Subnet string `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// Gateway IP address.
	Gateway string `protobuf:"bytes,7,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *InstanceInterfaceStatus) Reset() {
	*x = InstanceInterfaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInterfaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInterfaceStatus) ProtoMessage() {}

func (x *InstanceInterfaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInterfaceStatus.ProtoReflect.Descriptor instead.
func (*InstanceInterfaceStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{30}
}

func (x *InstanceInterfaceStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceInterfaceStatus) GetVNet() string {
	if x != nil {
		return x.VNet
	}
	return ""
}

func (x *InstanceInterfaceStatus) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *InstanceInterfaceStatus) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *InstanceInterfaceStatus) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *InstanceInterfaceStatus) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *InstanceInterfaceStatus) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type SshProxyTunnelStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username required to connect to the SSH proxy.
	ProxyUser string `protobuf:"bytes,1,opt,name=proxyUser,proto3" json:"proxyUser,omitempty"`
	// The IP address or FQDN of the SSH proxy.
	ProxyAddress string `protobuf:"bytes,2,opt,name=proxyAddress,proto3" json:"proxyAddress,omitempty"`
	// The TCP port for the SSH proxy.
	ProxyPort int32 `protobuf:"varint,3,opt,name=proxyPort,proto3" json:"proxyPort,omitempty"`
}

func (x *SshProxyTunnelStatus) Reset() {
	*x = SshProxyTunnelStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshProxyTunnelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshProxyTunnelStatus) ProtoMessage() {}

func (x *SshProxyTunnelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshProxyTunnelStatus.ProtoReflect.Descriptor instead.
func (*SshProxyTunnelStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{31}
}

func (x *SshProxyTunnelStatus) GetProxyUser() string {
	if x != nil {
		return x.ProxyUser
	}
	return ""
}

func (x *SshProxyTunnelStatus) GetProxyAddress() string {
	if x != nil {
		return x.ProxyAddress
	}
	return ""
}

func (x *SshProxyTunnelStatus) GetProxyPort() int32 {
	if x != nil {
		return x.ProxyPort
	}
	return 0
}

type InstanceGroupCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadataCreate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceGroupSpec           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceGroupCreateRequest) Reset() {
	*x = InstanceGroupCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupCreateRequest) ProtoMessage() {}

func (x *InstanceGroupCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupCreateRequest.ProtoReflect.Descriptor instead.
func (*InstanceGroupCreateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{32}
}

func (x *InstanceGroupCreateRequest) GetMetadata() *InstanceGroupMetadataCreate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceGroupCreateRequest) GetSpec() *InstanceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceGroupUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadataUpdate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceGroupSpec           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceGroupUpdateRequest) Reset() {
	*x = InstanceGroupUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupUpdateRequest) ProtoMessage() {}

func (x *InstanceGroupUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupUpdateRequest.ProtoReflect.Descriptor instead.
func (*InstanceGroupUpdateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{33}
}

func (x *InstanceGroupUpdateRequest) GetMetadata() *InstanceGroupMetadataUpdate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceGroupUpdateRequest) GetSpec() *InstanceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceGroupMemberDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to InstanceNameOrId:
	//
	//	*InstanceGroupMemberDeleteRequest_InstanceName
	//	*InstanceGroupMemberDeleteRequest_InstanceResourceId
	InstanceNameOrId isInstanceGroupMemberDeleteRequest_InstanceNameOrId `protobuf_oneof:"instanceNameOrId"`
}

func (x *InstanceGroupMemberDeleteRequest) Reset() {
	*x = InstanceGroupMemberDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupMemberDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupMemberDeleteRequest) ProtoMessage() {}

func (x *InstanceGroupMemberDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupMemberDeleteRequest.ProtoReflect.Descriptor instead.
func (*InstanceGroupMemberDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{34}
}

func (x *InstanceGroupMemberDeleteRequest) GetMetadata() *InstanceGroupMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *InstanceGroupMemberDeleteRequest) GetInstanceNameOrId() isInstanceGroupMemberDeleteRequest_InstanceNameOrId {
	if m != nil {
		return m.InstanceNameOrId
	}
	return nil
}

func (x *InstanceGroupMemberDeleteRequest) GetInstanceName() string {
	if x, ok := x.GetInstanceNameOrId().(*InstanceGroupMemberDeleteRequest_InstanceName); ok {
		return x.InstanceName
	}
	return ""
}

func (x *InstanceGroupMemberDeleteRequest) GetInstanceResourceId() string {
	if x, ok := x.GetInstanceNameOrId().(*InstanceGroupMemberDeleteRequest_InstanceResourceId); ok {
		return x.InstanceResourceId
	}
	return ""
}

type isInstanceGroupMemberDeleteRequest_InstanceNameOrId interface {
	isInstanceGroupMemberDeleteRequest_InstanceNameOrId()
}

type InstanceGroupMemberDeleteRequest_InstanceName struct {
	InstanceName string `protobuf:"bytes,2,opt,name=instanceName,proto3,oneof"`
}

type InstanceGroupMemberDeleteRequest_InstanceResourceId struct {
	InstanceResourceId string `protobuf:"bytes,3,opt,name=instanceResourceId,proto3,oneof"`
}

func (*InstanceGroupMemberDeleteRequest_InstanceName) isInstanceGroupMemberDeleteRequest_InstanceNameOrId() {
}

func (*InstanceGroupMemberDeleteRequest_InstanceResourceId) isInstanceGroupMemberDeleteRequest_InstanceNameOrId() {
}

type InstanceGroupScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceGroupSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceGroupScaleRequest) Reset() {
	*x = InstanceGroupScaleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupScaleRequest) ProtoMessage() {}

func (x *InstanceGroupScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupScaleRequest.ProtoReflect.Descriptor instead.
func (*InstanceGroupScaleRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{35}
}

func (x *InstanceGroupScaleRequest) GetMetadata() *InstanceGroupMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceGroupScaleRequest) GetSpec() *InstanceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceGroupScaleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadata    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *InstanceGroupScaleStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InstanceGroupScaleResponse) Reset() {
	*x = InstanceGroupScaleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupScaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupScaleResponse) ProtoMessage() {}

func (x *InstanceGroupScaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupScaleResponse.ProtoReflect.Descriptor instead.
func (*InstanceGroupScaleResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{36}
}

func (x *InstanceGroupScaleResponse) GetMetadata() *InstanceGroupMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceGroupScaleResponse) GetStatus() *InstanceGroupScaleStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type InstanceGroupScaleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the number of instances created in the instanceGroup
	CurrentCount int32 `protobuf:"varint,1,opt,name=currentCount,proto3" json:"currentCount,omitempty"`
	// the number of instances expected in the instanceGroup
	DesiredCount int32 `protobuf:"varint,2,opt,name=desiredCount,proto3" json:"desiredCount,omitempty"`
	// The number of instances with a phase of Ready.
	ReadyCount int32 `protobuf:"varint,3,opt,name=readyCount,proto3" json:"readyCount,omitempty"`
	// The names of existing and non-deleting instances in the instanceGroup.
	CurrentMembers []string `protobuf:"bytes,4,rep,name=currentMembers,proto3" json:"currentMembers,omitempty"`
	// The names of newly created instances in the instanceGroup.
	NewMembers []string `protobuf:"bytes,5,rep,name=newMembers,proto3" json:"newMembers,omitempty"`
	// The names of instances with a phase of Ready.
	ReadyMembers []string `protobuf:"bytes,6,rep,name=readyMembers,proto3" json:"readyMembers,omitempty"`
}

func (x *InstanceGroupScaleStatus) Reset() {
	*x = InstanceGroupScaleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupScaleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupScaleStatus) ProtoMessage() {}

func (x *InstanceGroupScaleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupScaleStatus.ProtoReflect.Descriptor instead.
func (*InstanceGroupScaleStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{37}
}

func (x *InstanceGroupScaleStatus) GetCurrentCount() int32 {
	if x != nil {
		return x.CurrentCount
	}
	return 0
}

func (x *InstanceGroupScaleStatus) GetDesiredCount() int32 {
	if x != nil {
		return x.DesiredCount
	}
	return 0
}

func (x *InstanceGroupScaleStatus) GetReadyCount() int32 {
	if x != nil {
		return x.ReadyCount
	}
	return 0
}

func (x *InstanceGroupScaleStatus) GetCurrentMembers() []string {
	if x != nil {
		return x.CurrentMembers
	}
	return nil
}

func (x *InstanceGroupScaleStatus) GetNewMembers() []string {
	if x != nil {
		return x.NewMembers
	}
	return nil
}

func (x *InstanceGroupScaleStatus) GetReadyMembers() []string {
	if x != nil {
		return x.ReadyMembers
	}
	return nil
}

type InstanceGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceSpec  *InstanceSpec `protobuf:"bytes,1,opt,name=instanceSpec,proto3" json:"instanceSpec,omitempty"`
	InstanceCount int32         `protobuf:"varint,2,opt,name=instanceCount,proto3" json:"instanceCount,omitempty"`
}

func (x *InstanceGroupSpec) Reset() {
	*x = InstanceGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupSpec) ProtoMessage() {}

func (x *InstanceGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupSpec.ProtoReflect.Descriptor instead.
func (*InstanceGroupSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{38}
}

func (x *InstanceGroupSpec) GetInstanceSpec() *InstanceSpec {
	if x != nil {
		return x.InstanceSpec
	}
	return nil
}

func (x *InstanceGroupSpec) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

type InstanceGroupSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadataSearch `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceGroupSearchRequest) Reset() {
	*x = InstanceGroupSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupSearchRequest) ProtoMessage() {}

func (x *InstanceGroupSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupSearchRequest.ProtoReflect.Descriptor instead.
func (*InstanceGroupSearchRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{39}
}

func (x *InstanceGroupSearchRequest) GetMetadata() *InstanceGroupMetadataSearch {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceGroupSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*InstanceGroup `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *InstanceGroupSearchResponse) Reset() {
	*x = InstanceGroupSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupSearchResponse) ProtoMessage() {}

func (x *InstanceGroupSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupSearchResponse.ProtoReflect.Descriptor instead.
func (*InstanceGroupSearchResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{40}
}

func (x *InstanceGroupSearchResponse) GetItems() []*InstanceGroup {
	if x != nil {
		return x.Items
	}
	return nil
}

type InstanceGroupDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceGroupDeleteRequest) Reset() {
	*x = InstanceGroupDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupDeleteRequest) ProtoMessage() {}

func (x *InstanceGroupDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupDeleteRequest.ProtoReflect.Descriptor instead.
func (*InstanceGroupDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{41}
}

func (x *InstanceGroupDeleteRequest) GetMetadata() *InstanceGroupMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceGroupMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceGroupSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *InstanceGroupStatus   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InstanceGroup) Reset() {
	*x = InstanceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroup) ProtoMessage() {}

func (x *InstanceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroup.ProtoReflect.Descriptor instead.
func (*InstanceGroup) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{42}
}

func (x *InstanceGroup) GetMetadata() *InstanceGroupMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceGroup) GetSpec() *InstanceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *InstanceGroup) GetStatus() *InstanceGroupStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type InstanceGroupMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved2 string `protobuf:"bytes,100,opt,name=reserved2,proto3" json:"reserved2,omitempty"`
}

func (x *InstanceGroupMetadata) Reset() {
	*x = InstanceGroupMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupMetadata) ProtoMessage() {}

func (x *InstanceGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupMetadata.ProtoReflect.Descriptor instead.
func (*InstanceGroupMetadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{43}
}

func (x *InstanceGroupMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceGroupMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *InstanceGroupMetadata) GetReserved2() string {
	if x != nil {
		return x.Reserved2
	}
	return ""
}

type InstanceGroupMetadataCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	ProductId string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	// Deprecated: Do not use.
	Reserved3 string `protobuf:"bytes,101,opt,name=reserved3,proto3" json:"reserved3,omitempty"`
}

func (x *InstanceGroupMetadataCreate) Reset() {
	*x = InstanceGroupMetadataCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupMetadataCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupMetadataCreate) ProtoMessage() {}

func (x *InstanceGroupMetadataCreate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupMetadataCreate.ProtoReflect.Descriptor instead.
func (*InstanceGroupMetadataCreate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{44}
}

func (x *InstanceGroupMetadataCreate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceGroupMetadataCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceGroupMetadataCreate) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// Deprecated: Do not use.
func (x *InstanceGroupMetadataCreate) GetReserved3() string {
	if x != nil {
		return x.Reserved3
	}
	return ""
}

type InstanceGroupMetadataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved3 string `protobuf:"bytes,102,opt,name=reserved3,proto3" json:"reserved3,omitempty"`
}

func (x *InstanceGroupMetadataUpdate) Reset() {
	*x = InstanceGroupMetadataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupMetadataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupMetadataUpdate) ProtoMessage() {}

func (x *InstanceGroupMetadataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupMetadataUpdate.ProtoReflect.Descriptor instead.
func (*InstanceGroupMetadataUpdate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{45}
}

func (x *InstanceGroupMetadataUpdate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InstanceGroupMetadataUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *InstanceGroupMetadataUpdate) GetReserved3() string {
	if x != nil {
		return x.Reserved3
	}
	return ""
}

// A reference to a single instance group.
type InstanceGroupMetadataReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*InstanceGroupMetadataReference_Name
	NameOrId isInstanceGroupMetadataReference_NameOrId `protobuf_oneof:"nameOrId"`
}

func (x *InstanceGroupMetadataReference) Reset() {
	*x = InstanceGroupMetadataReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupMetadataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupMetadataReference) ProtoMessage() {}

func (x *InstanceGroupMetadataReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupMetadataReference.ProtoReflect.Descriptor instead.
func (*InstanceGroupMetadataReference) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{46}
}

func (x *InstanceGroupMetadataReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *InstanceGroupMetadataReference) GetNameOrId() isInstanceGroupMetadataReference_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *InstanceGroupMetadataReference) GetName() string {
	if x, ok := x.GetNameOrId().(*InstanceGroupMetadataReference_Name); ok {
		return x.Name
	}
	return ""
}

type isInstanceGroupMetadataReference_NameOrId interface {
	isInstanceGroupMetadataReference_NameOrId()
}

type InstanceGroupMetadataReference_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*InstanceGroupMetadataReference_Name) isInstanceGroupMetadataReference_NameOrId() {}

type InstanceGroupMetadataSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *InstanceGroupMetadataSearch) Reset() {
	*x = InstanceGroupMetadataSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupMetadataSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupMetadataSearch) ProtoMessage() {}

func (x *InstanceGroupMetadataSearch) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupMetadataSearch.ProtoReflect.Descriptor instead.
func (*InstanceGroupMetadataSearch) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{47}
}

func (x *InstanceGroupMetadataSearch) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type InstanceGroupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of instances with a phase of Ready.
	// The instance group is Ready when this equals InstanceGroupSpec.instanceCount.
	ReadyCount int32 `protobuf:"varint,1,opt,name=readyCount,proto3" json:"readyCount,omitempty"`
}

func (x *InstanceGroupStatus) Reset() {
	*x = InstanceGroupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupStatus) ProtoMessage() {}

func (x *InstanceGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupStatus.ProtoReflect.Descriptor instead.
func (*InstanceGroupStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{48}
}

func (x *InstanceGroupStatus) GetReadyCount() int32 {
	if x != nil {
		return x.ReadyCount
	}
	return 0
}

type InstanceTypeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceTypeDeleteRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceTypeDeleteRequest) Reset() {
	*x = InstanceTypeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeDeleteRequest) ProtoMessage() {}

func (x *InstanceTypeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeDeleteRequest.ProtoReflect.Descriptor instead.
func (*InstanceTypeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{49}
}

func (x *InstanceTypeDeleteRequest) GetMetadata() *InstanceTypeDeleteRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceTypeGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceTypeGetRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InstanceTypeGetRequest) Reset() {
	*x = InstanceTypeGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeGetRequest) ProtoMessage() {}

func (x *InstanceTypeGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeGetRequest.ProtoReflect.Descriptor instead.
func (*InstanceTypeGetRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{50}
}

func (x *InstanceTypeGetRequest) GetMetadata() *InstanceTypeGetRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InstanceTypeSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstanceTypeSearchRequest) Reset() {
	*x = InstanceTypeSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeSearchRequest) ProtoMessage() {}

func (x *InstanceTypeSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeSearchRequest.ProtoReflect.Descriptor instead.
func (*InstanceTypeSearchRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{51}
}

type InstanceTypeSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*InstanceType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *InstanceTypeSearchResponse) Reset() {
	*x = InstanceTypeSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeSearchResponse) ProtoMessage() {}

func (x *InstanceTypeSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeSearchResponse.ProtoReflect.Descriptor instead.
func (*InstanceTypeSearchResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{52}
}

func (x *InstanceTypeSearchResponse) GetItems() []*InstanceType {
	if x != nil {
		return x.Items
	}
	return nil
}

type InstanceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *InstanceType_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceTypeSpec      `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *InstanceType) Reset() {
	*x = InstanceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceType) ProtoMessage() {}

func (x *InstanceType) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceType.ProtoReflect.Descriptor instead.
func (*InstanceType) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{53}
}

func (x *InstanceType) GetMetadata() *InstanceType_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceType) GetSpec() *InstanceTypeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type InstanceTypeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName      string           `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description      string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	InstanceCategory InstanceCategory `protobuf:"varint,4,opt,name=instanceCategory,proto3,enum=proto.InstanceCategory" json:"instanceCategory,omitempty"`
	Cpu              *CpuSpec         `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           *MemorySpec      `protobuf:"bytes,6,opt,name=memory,proto3" json:"memory,omitempty"`
	Disks            []*DiskSpec      `protobuf:"bytes,7,rep,name=disks,proto3" json:"disks,omitempty"`
	Gpu              *GpuSpec         `protobuf:"bytes,8,opt,name=gpu,proto3" json:"gpu,omitempty"`
	HbmMode          string           `protobuf:"bytes,9,opt,name=hbmMode,proto3" json:"hbmMode,omitempty"`
}

func (x *InstanceTypeSpec) Reset() {
	*x = InstanceTypeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeSpec) ProtoMessage() {}

func (x *InstanceTypeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeSpec.ProtoReflect.Descriptor instead.
func (*InstanceTypeSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{54}
}

func (x *InstanceTypeSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceTypeSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *InstanceTypeSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstanceTypeSpec) GetInstanceCategory() InstanceCategory {
	if x != nil {
		return x.InstanceCategory
	}
	return InstanceCategory_VirtualMachine
}

func (x *InstanceTypeSpec) GetCpu() *CpuSpec {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *InstanceTypeSpec) GetMemory() *MemorySpec {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *InstanceTypeSpec) GetDisks() []*DiskSpec {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *InstanceTypeSpec) GetGpu() *GpuSpec {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *InstanceTypeSpec) GetHbmMode() string {
	if x != nil {
		return x.HbmMode
	}
	return ""
}

type CpuSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cores     int32  `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ModelName string `protobuf:"bytes,3,opt,name=modelName,proto3" json:"modelName,omitempty"`
	Sockets   int32  `protobuf:"varint,4,opt,name=sockets,proto3" json:"sockets,omitempty"`
	Threads   int32  `protobuf:"varint,5,opt,name=threads,proto3" json:"threads,omitempty"`
}

func (x *CpuSpec) Reset() {
	*x = CpuSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuSpec) ProtoMessage() {}

func (x *CpuSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuSpec.ProtoReflect.Descriptor instead.
func (*CpuSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{55}
}

func (x *CpuSpec) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CpuSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CpuSpec) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CpuSpec) GetSockets() int32 {
	if x != nil {
		return x.Sockets
	}
	return 0
}

func (x *CpuSpec) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

type GpuSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName string `protobuf:"bytes,1,opt,name=modelName,proto3" json:"modelName,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GpuSpec) Reset() {
	*x = GpuSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuSpec) ProtoMessage() {}

func (x *GpuSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuSpec.ProtoReflect.Descriptor instead.
func (*GpuSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{56}
}

func (x *GpuSpec) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *GpuSpec) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MemorySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size      string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	DimmSize  string `protobuf:"bytes,2,opt,name=dimmSize,proto3" json:"dimmSize,omitempty"`
	DimmCount int32  `protobuf:"varint,3,opt,name=dimmCount,proto3" json:"dimmCount,omitempty"`
	Speed     int32  `protobuf:"varint,4,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *MemorySpec) Reset() {
	*x = MemorySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemorySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemorySpec) ProtoMessage() {}

func (x *MemorySpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemorySpec.ProtoReflect.Descriptor instead.
func (*MemorySpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{57}
}

func (x *MemorySpec) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *MemorySpec) GetDimmSize() string {
	if x != nil {
		return x.DimmSize
	}
	return ""
}

func (x *MemorySpec) GetDimmCount() int32 {
	if x != nil {
		return x.DimmCount
	}
	return 0
}

func (x *MemorySpec) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type DiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *DiskSpec) Reset() {
	*x = DiskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskSpec) ProtoMessage() {}

func (x *DiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskSpec.ProtoReflect.Descriptor instead.
func (*DiskSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{58}
}

func (x *DiskSpec) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type MachineImageDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *MachineImageDeleteRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MachineImageDeleteRequest) Reset() {
	*x = MachineImageDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageDeleteRequest) ProtoMessage() {}

func (x *MachineImageDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageDeleteRequest.ProtoReflect.Descriptor instead.
func (*MachineImageDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{59}
}

func (x *MachineImageDeleteRequest) GetMetadata() *MachineImageDeleteRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MachineImageGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *MachineImageGetRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MachineImageGetRequest) Reset() {
	*x = MachineImageGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageGetRequest) ProtoMessage() {}

func (x *MachineImageGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageGetRequest.ProtoReflect.Descriptor instead.
func (*MachineImageGetRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{60}
}

func (x *MachineImageGetRequest) GetMetadata() *MachineImageGetRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MachineImageSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *MachineImageSearchRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MachineImageSearchRequest) Reset() {
	*x = MachineImageSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageSearchRequest) ProtoMessage() {}

func (x *MachineImageSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageSearchRequest.ProtoReflect.Descriptor instead.
func (*MachineImageSearchRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{61}
}

func (x *MachineImageSearchRequest) GetMetadata() *MachineImageSearchRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MachineImageSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*MachineImage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MachineImageSearchResponse) Reset() {
	*x = MachineImageSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageSearchResponse) ProtoMessage() {}

func (x *MachineImageSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageSearchResponse.ProtoReflect.Descriptor instead.
func (*MachineImageSearchResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{62}
}

func (x *MachineImageSearchResponse) GetItems() []*MachineImage {
	if x != nil {
		return x.Items
	}
	return nil
}

type MachineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *MachineImage_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *MachineImageSpec      `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *MachineImage) Reset() {
	*x = MachineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImage) ProtoMessage() {}

func (x *MachineImage) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImage.ProtoReflect.Descriptor instead.
func (*MachineImage) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{63}
}

func (x *MachineImage) GetMetadata() *MachineImage_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MachineImage) GetSpec() *MachineImageSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type MachineImageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UserName    string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// If not empty, this machine image is only compatible with the specified instance categories.
	InstanceCategories []InstanceCategory `protobuf:"varint,5,rep,packed,name=instanceCategories,proto3,enum=proto.InstanceCategory" json:"instanceCategories,omitempty"`
	// If not empty, this machine image is only compatible with the specified instance types.
	InstanceTypes   []string                 `protobuf:"bytes,6,rep,name=instanceTypes,proto3" json:"instanceTypes,omitempty"`
	Md5Sum          string                   `protobuf:"bytes,7,opt,name=md5sum,proto3" json:"md5sum,omitempty"`
	Sha256Sum       string                   `protobuf:"bytes,8,opt,name=sha256sum,proto3" json:"sha256sum,omitempty"`
	Sha512Sum       string                   `protobuf:"bytes,12,opt,name=sha512sum,proto3" json:"sha512sum,omitempty"`
	Labels          map[string]string        `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ImageCategories []string                 `protobuf:"bytes,10,rep,name=imageCategories,proto3" json:"imageCategories,omitempty"`
	Components      []*MachineImageComponent `protobuf:"bytes,11,rep,name=components,proto3" json:"components,omitempty"`
	// If true, this machine image will not be returned by the MachineImageService.Search method but it can still be used to launch instances.
	Hidden bool `protobuf:"varint,13,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// The virtual image size (size of the disk in the guest). This can be determined with qemu-img info:
	//
	//	$ qemu-img info ubuntu-2204-jammy-v20250107.qcow2
	//	virtual size: 10 GiB (10737418240 bytes)
	VirtualSizeBytes uint64 `protobuf:"varint,14,opt,name=virtualSizeBytes,proto3" json:"virtualSizeBytes,omitempty"`
}

func (x *MachineImageSpec) Reset() {
	*x = MachineImageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageSpec) ProtoMessage() {}

func (x *MachineImageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageSpec.ProtoReflect.Descriptor instead.
func (*MachineImageSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{64}
}

func (x *MachineImageSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MachineImageSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineImageSpec) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *MachineImageSpec) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MachineImageSpec) GetInstanceCategories() []InstanceCategory {
	if x != nil {
		return x.InstanceCategories
	}
	return nil
}

func (x *MachineImageSpec) GetInstanceTypes() []string {
	if x != nil {
		return x.InstanceTypes
	}
	return nil
}

func (x *MachineImageSpec) GetMd5Sum() string {
	if x != nil {
		return x.Md5Sum
	}
	return ""
}

func (x *MachineImageSpec) GetSha256Sum() string {
	if x != nil {
		return x.Sha256Sum
	}
	return ""
}

func (x *MachineImageSpec) GetSha512Sum() string {
	if x != nil {
		return x.Sha512Sum
	}
	return ""
}

func (x *MachineImageSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MachineImageSpec) GetImageCategories() []string {
	if x != nil {
		return x.ImageCategories
	}
	return nil
}

func (x *MachineImageSpec) GetComponents() []*MachineImageComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *MachineImageSpec) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *MachineImageSpec) GetVirtualSizeBytes() uint64 {
	if x != nil {
		return x.VirtualSizeBytes
	}
	return 0
}

type MachineImageComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	InfoUrl     string `protobuf:"bytes,5,opt,name=infoUrl,proto3" json:"infoUrl,omitempty"`
	ImageUrl    string `protobuf:"bytes,6,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
}

func (x *MachineImageComponent) Reset() {
	*x = MachineImageComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageComponent) ProtoMessage() {}

func (x *MachineImageComponent) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageComponent.ProtoReflect.Descriptor instead.
func (*MachineImageComponent) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{65}
}

func (x *MachineImageComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineImageComponent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MachineImageComponent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MachineImageComponent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineImageComponent) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

func (x *MachineImageComponent) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type VNetPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *VNetPutRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *VNetSpec                `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *VNetPutRequest) Reset() {
	*x = VNetPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetPutRequest) ProtoMessage() {}

func (x *VNetPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetPutRequest.ProtoReflect.Descriptor instead.
func (*VNetPutRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{66}
}

func (x *VNetPutRequest) GetMetadata() *VNetPutRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VNetPutRequest) GetSpec() *VNetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type VNetGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *VNetGetRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *VNetGetRequest) Reset() {
	*x = VNetGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetGetRequest) ProtoMessage() {}

func (x *VNetGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetGetRequest.ProtoReflect.Descriptor instead.
func (*VNetGetRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{67}
}

func (x *VNetGetRequest) GetMetadata() *VNetGetRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type VNetSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *VNetSearchRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *VNetSearchRequest) Reset() {
	*x = VNetSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetSearchRequest) ProtoMessage() {}

func (x *VNetSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetSearchRequest.ProtoReflect.Descriptor instead.
func (*VNetSearchRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{68}
}

func (x *VNetSearchRequest) GetMetadata() *VNetSearchRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type VNetSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*VNet `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VNetSearchResponse) Reset() {
	*x = VNetSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetSearchResponse) ProtoMessage() {}

func (x *VNetSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetSearchResponse.ProtoReflect.Descriptor instead.
func (*VNetSearchResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{69}
}

func (x *VNetSearchResponse) GetItems() []*VNet {
	if x != nil {
		return x.Items
	}
	return nil
}

type VNetDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *VNetDeleteRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *VNetDeleteRequest) Reset() {
	*x = VNetDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetDeleteRequest) ProtoMessage() {}

func (x *VNetDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetDeleteRequest.ProtoReflect.Descriptor instead.
func (*VNetDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{70}
}

func (x *VNetDeleteRequest) GetMetadata() *VNetDeleteRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type VNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *VNet_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *VNetSpec      `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *VNet) Reset() {
	*x = VNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNet) ProtoMessage() {}

func (x *VNet) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNet.ProtoReflect.Descriptor instead.
func (*VNet) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{71}
}

func (x *VNet) GetMetadata() *VNet_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VNet) GetSpec() *VNetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type VNetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region           string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The reserved subnet will have a prefix length with this value or less.
	PrefixLength int32 `protobuf:"varint,4,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
}

func (x *VNetSpec) Reset() {
	*x = VNetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetSpec) ProtoMessage() {}

func (x *VNetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetSpec.ProtoReflect.Descriptor instead.
func (*VNetSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{72}
}

func (x *VNetSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VNetSpec) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *VNetSpec) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type LoadBalancerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataCreate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *LoadBalancerSpec           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *LoadBalancerCreateRequest) Reset() {
	*x = LoadBalancerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerCreateRequest) ProtoMessage() {}

func (x *LoadBalancerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerCreateRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerCreateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{73}
}

func (x *LoadBalancerCreateRequest) GetMetadata() *LoadBalancerMetadataCreate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoadBalancerCreateRequest) GetSpec() *LoadBalancerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type LoadBalancerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LoadBalancerGetRequest) Reset() {
	*x = LoadBalancerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerGetRequest) ProtoMessage() {}

func (x *LoadBalancerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerGetRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerGetRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{74}
}

func (x *LoadBalancerGetRequest) GetMetadata() *LoadBalancerMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type LoadBalancerSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataSearch `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LoadBalancerSearchRequest) Reset() {
	*x = LoadBalancerSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSearchRequest) ProtoMessage() {}

func (x *LoadBalancerSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSearchRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerSearchRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{75}
}

func (x *LoadBalancerSearchRequest) GetMetadata() *LoadBalancerMetadataSearch {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type LoadBalancerSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*LoadBalancer `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *LoadBalancerSearchResponse) Reset() {
	*x = LoadBalancerSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSearchResponse) ProtoMessage() {}

func (x *LoadBalancerSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSearchResponse.ProtoReflect.Descriptor instead.
func (*LoadBalancerSearchResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{76}
}

func (x *LoadBalancerSearchResponse) GetItems() []*LoadBalancer {
	if x != nil {
		return x.Items
	}
	return nil
}

type LoadBalancerUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataUpdate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The entire spec will be replaced.
	Spec *LoadBalancerSpecUpdate `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *LoadBalancerUpdateRequest) Reset() {
	*x = LoadBalancerUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerUpdateRequest) ProtoMessage() {}

func (x *LoadBalancerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerUpdateRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{77}
}

func (x *LoadBalancerUpdateRequest) GetMetadata() *LoadBalancerMetadataUpdate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoadBalancerUpdateRequest) GetSpec() *LoadBalancerSpecUpdate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type LoadBalancerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LoadBalancerDeleteRequest) Reset() {
	*x = LoadBalancerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerDeleteRequest) ProtoMessage() {}

func (x *LoadBalancerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerDeleteRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{78}
}

func (x *LoadBalancerDeleteRequest) GetMetadata() *LoadBalancerMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *LoadBalancerMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *LoadBalancerSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *LoadBalancerStatus   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{79}
}

func (x *LoadBalancer) GetMetadata() *LoadBalancerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoadBalancer) GetSpec() *LoadBalancerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *LoadBalancer) GetStatus() *LoadBalancerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type LoadBalancerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*LoadBalancerListener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
	// Security options which apply to the load balancer.
	Security *LoadBalancerSecurity `protobuf:"bytes,2,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *LoadBalancerSpec) Reset() {
	*x = LoadBalancerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSpec) ProtoMessage() {}

func (x *LoadBalancerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSpec.ProtoReflect.Descriptor instead.
func (*LoadBalancerSpec) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{80}
}

func (x *LoadBalancerSpec) GetListeners() []*LoadBalancerListener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *LoadBalancerSpec) GetSecurity() *LoadBalancerSecurity {
	if x != nil {
		return x.Security
	}
	return nil
}

type LoadBalancerListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public port of the load balancer.
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Pool defines the targets to load balance traffic.
	Pool *LoadBalancerPool `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *LoadBalancerListener) Reset() {
	*x = LoadBalancerListener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerListener) ProtoMessage() {}

func (x *LoadBalancerListener) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerListener.ProtoReflect.Descriptor instead.
func (*LoadBalancerListener) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{81}
}

func (x *LoadBalancerListener) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LoadBalancerListener) GetPool() *LoadBalancerPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type LoadBalancerPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The port to route traffic to each instance.
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Health check monitor type.
	// TCP (simple service port check),
	// HTTP (HTTP request to / expecting a “200 OK” HTTP response),
	// HTTPS (HTTPS request to / with expecting a “200 OK” HTTP response).
	Monitor LoadBalancerMonitorType `protobuf:"varint,2,opt,name=monitor,proto3,enum=proto.LoadBalancerMonitorType" json:"monitor,omitempty"`
	// Load Balacing mode across members of the pool.
	LoadBalancingMode LoadBalancingMode `protobuf:"varint,3,opt,name=loadBalancingMode,proto3,enum=proto.LoadBalancingMode" json:"loadBalancingMode,omitempty"`
	// (Optional) Map of string keys and values that controls how the lb pool members are selected.
	//
	//	One of instances or instanceSelectors is valid.
	InstanceSelectors map[string]string `protobuf:"bytes,4,rep,name=instanceSelectors,proto3" json:"instanceSelectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Optional) Set of Instances to make up the members of the pool.
	// One of instances or instanceSelectors is valid.
	InstanceResourceIds []string `protobuf:"bytes,5,rep,name=instanceResourceIds,proto3" json:"instanceResourceIds,omitempty"`
}

func (x *LoadBalancerPool) Reset() {
	*x = LoadBalancerPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerPool) ProtoMessage() {}

func (x *LoadBalancerPool) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerPool.ProtoReflect.Descriptor instead.
func (*LoadBalancerPool) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{82}
}

func (x *LoadBalancerPool) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LoadBalancerPool) GetMonitor() LoadBalancerMonitorType {
	if x != nil {
		return x.Monitor
	}
	return LoadBalancerMonitorType_tcp
}

func (x *LoadBalancerPool) GetLoadBalancingMode() LoadBalancingMode {
	if x != nil {
		return x.LoadBalancingMode
	}
	return LoadBalancingMode_roundRobin
}

func (x *LoadBalancerPool) GetInstanceSelectors() map[string]string {
	if x != nil {
		return x.InstanceSelectors
	}
	return nil
}

func (x *LoadBalancerPool) GetInstanceResourceIds() []string {
	if x != nil {
		return x.InstanceResourceIds
	}
	return nil
}

type LoadBalancerSpecUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*LoadBalancerListener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
	// Security options which apply to the load balancer.
	Security *LoadBalancerSecurity `protobuf:"bytes,2,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *LoadBalancerSpecUpdate) Reset() {
	*x = LoadBalancerSpecUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSpecUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSpecUpdate) ProtoMessage() {}

func (x *LoadBalancerSpecUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSpecUpdate.ProtoReflect.Descriptor instead.
func (*LoadBalancerSpecUpdate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{83}
}

func (x *LoadBalancerSpecUpdate) GetListeners() []*LoadBalancerListener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *LoadBalancerSpecUpdate) GetSecurity() *LoadBalancerSecurity {
	if x != nil {
		return x.Security
	}
	return nil
}

type LoadBalancerMetadataCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name will be generated if empty.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Map of string keys and values that can be used to organize and categorize load balancers.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,4,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
}

func (x *LoadBalancerMetadataCreate) Reset() {
	*x = LoadBalancerMetadataCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerMetadataCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerMetadataCreate) ProtoMessage() {}

func (x *LoadBalancerMetadataCreate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerMetadataCreate.ProtoReflect.Descriptor instead.
func (*LoadBalancerMetadataCreate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{84}
}

func (x *LoadBalancerMetadataCreate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *LoadBalancerMetadataCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancerMetadataCreate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *LoadBalancerMetadataCreate) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

type LoadBalancerMetadataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*LoadBalancerMetadataUpdate_Name
	//	*LoadBalancerMetadataUpdate_ResourceId
	NameOrId isLoadBalancerMetadataUpdate_NameOrId `protobuf_oneof:"nameOrId"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Map of string keys and values that can be used to organize and categorize load balancers.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,6,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
}

func (x *LoadBalancerMetadataUpdate) Reset() {
	*x = LoadBalancerMetadataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerMetadataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerMetadataUpdate) ProtoMessage() {}

func (x *LoadBalancerMetadataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerMetadataUpdate.ProtoReflect.Descriptor instead.
func (*LoadBalancerMetadataUpdate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{85}
}

func (x *LoadBalancerMetadataUpdate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *LoadBalancerMetadataUpdate) GetNameOrId() isLoadBalancerMetadataUpdate_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *LoadBalancerMetadataUpdate) GetName() string {
	if x, ok := x.GetNameOrId().(*LoadBalancerMetadataUpdate_Name); ok {
		return x.Name
	}
	return ""
}

func (x *LoadBalancerMetadataUpdate) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*LoadBalancerMetadataUpdate_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

func (x *LoadBalancerMetadataUpdate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *LoadBalancerMetadataUpdate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *LoadBalancerMetadataUpdate) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

type isLoadBalancerMetadataUpdate_NameOrId interface {
	isLoadBalancerMetadataUpdate_NameOrId()
}

type LoadBalancerMetadataUpdate_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type LoadBalancerMetadataUpdate_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*LoadBalancerMetadataUpdate_Name) isLoadBalancerMetadataUpdate_NameOrId() {}

func (*LoadBalancerMetadataUpdate_ResourceId) isLoadBalancerMetadataUpdate_NameOrId() {}

type LoadBalancerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Map of string keys and values that can be used to organize and categorize load balancers.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Not implemented.
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,8,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
}

func (x *LoadBalancerMetadata) Reset() {
	*x = LoadBalancerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerMetadata) ProtoMessage() {}

func (x *LoadBalancerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerMetadata.ProtoReflect.Descriptor instead.
func (*LoadBalancerMetadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{86}
}

func (x *LoadBalancerMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *LoadBalancerMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancerMetadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *LoadBalancerMetadata) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *LoadBalancerMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoadBalancerMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *LoadBalancerMetadata) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

// Deprecated: Do not use.
func (x *LoadBalancerMetadata) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

// A reference to a single load balancer.
type LoadBalancerMetadataReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*LoadBalancerMetadataReference_Name
	//	*LoadBalancerMetadataReference_ResourceId
	NameOrId isLoadBalancerMetadataReference_NameOrId `protobuf_oneof:"nameOrId"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,5,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
}

func (x *LoadBalancerMetadataReference) Reset() {
	*x = LoadBalancerMetadataReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerMetadataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerMetadataReference) ProtoMessage() {}

func (x *LoadBalancerMetadataReference) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerMetadataReference.ProtoReflect.Descriptor instead.
func (*LoadBalancerMetadataReference) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{87}
}

func (x *LoadBalancerMetadataReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *LoadBalancerMetadataReference) GetNameOrId() isLoadBalancerMetadataReference_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *LoadBalancerMetadataReference) GetName() string {
	if x, ok := x.GetNameOrId().(*LoadBalancerMetadataReference_Name); ok {
		return x.Name
	}
	return ""
}

func (x *LoadBalancerMetadataReference) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*LoadBalancerMetadataReference_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

func (x *LoadBalancerMetadataReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

// Deprecated: Do not use.
func (x *LoadBalancerMetadataReference) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

type isLoadBalancerMetadataReference_NameOrId interface {
	isLoadBalancerMetadataReference_NameOrId()
}

type LoadBalancerMetadataReference_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type LoadBalancerMetadataReference_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*LoadBalancerMetadataReference_Name) isLoadBalancerMetadataReference_NameOrId() {}

func (*LoadBalancerMetadataReference_ResourceId) isLoadBalancerMetadataReference_NameOrId() {}

type LoadBalancerMetadataSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// If not empty, only return load balancers that have these key/value pairs.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1 string `protobuf:"bytes,3,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
}

func (x *LoadBalancerMetadataSearch) Reset() {
	*x = LoadBalancerMetadataSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerMetadataSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerMetadataSearch) ProtoMessage() {}

func (x *LoadBalancerMetadataSearch) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerMetadataSearch.ProtoReflect.Descriptor instead.
func (*LoadBalancerMetadataSearch) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{88}
}

func (x *LoadBalancerMetadataSearch) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *LoadBalancerMetadataSearch) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *LoadBalancerMetadataSearch) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

type LoadBalancerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions *LoadBalancerConditionsStatus `protobuf:"bytes,1,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Listeners  []*LoadBalancerListenerStatus `protobuf:"bytes,2,rep,name=listeners,proto3" json:"listeners,omitempty"`
	State      string                        `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Vip        string                        `protobuf:"bytes,4,opt,name=vip,proto3" json:"vip,omitempty"`
	Message    string                        `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LoadBalancerStatus) Reset() {
	*x = LoadBalancerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerStatus) ProtoMessage() {}

func (x *LoadBalancerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerStatus.ProtoReflect.Descriptor instead.
func (*LoadBalancerStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{89}
}

func (x *LoadBalancerStatus) GetConditions() *LoadBalancerConditionsStatus {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *LoadBalancerStatus) GetListeners() []*LoadBalancerListenerStatus {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *LoadBalancerStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LoadBalancerStatus) GetVip() string {
	if x != nil {
		return x.Vip
	}
	return ""
}

func (x *LoadBalancerStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LoadBalancerSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sourceips []string `protobuf:"bytes,1,rep,name=sourceips,proto3" json:"sourceips,omitempty"`
}

func (x *LoadBalancerSecurity) Reset() {
	*x = LoadBalancerSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSecurity) ProtoMessage() {}

func (x *LoadBalancerSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSecurity.ProtoReflect.Descriptor instead.
func (*LoadBalancerSecurity) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{90}
}

func (x *LoadBalancerSecurity) GetSourceips() []string {
	if x != nil {
		return x.Sourceips
	}
	return nil
}

type LoadBalancerListenerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VipID       int32                           `protobuf:"varint,2,opt,name=vipID,proto3" json:"vipID,omitempty"`
	Message     string                          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	PoolMembers []*LoadBalancerPoolStatusMember `protobuf:"bytes,4,rep,name=poolMembers,proto3" json:"poolMembers,omitempty"`
	PoolID      int32                           `protobuf:"varint,5,opt,name=poolID,proto3" json:"poolID,omitempty"`
	State       string                          `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Port        int32                           `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *LoadBalancerListenerStatus) Reset() {
	*x = LoadBalancerListenerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerListenerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerListenerStatus) ProtoMessage() {}

func (x *LoadBalancerListenerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerListenerStatus.ProtoReflect.Descriptor instead.
func (*LoadBalancerListenerStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{91}
}

func (x *LoadBalancerListenerStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancerListenerStatus) GetVipID() int32 {
	if x != nil {
		return x.VipID
	}
	return 0
}

func (x *LoadBalancerListenerStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoadBalancerListenerStatus) GetPoolMembers() []*LoadBalancerPoolStatusMember {
	if x != nil {
		return x.PoolMembers
	}
	return nil
}

func (x *LoadBalancerListenerStatus) GetPoolID() int32 {
	if x != nil {
		return x.PoolID
	}
	return 0
}

func (x *LoadBalancerListenerStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LoadBalancerListenerStatus) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type LoadBalancerPoolStatusMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceRef string `protobuf:"bytes,1,opt,name=instanceRef,proto3" json:"instanceRef,omitempty"`
	Ip          string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *LoadBalancerPoolStatusMember) Reset() {
	*x = LoadBalancerPoolStatusMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerPoolStatusMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerPoolStatusMember) ProtoMessage() {}

func (x *LoadBalancerPoolStatusMember) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerPoolStatusMember.ProtoReflect.Descriptor instead.
func (*LoadBalancerPoolStatusMember) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{92}
}

func (x *LoadBalancerPoolStatusMember) GetInstanceRef() string {
	if x != nil {
		return x.InstanceRef
	}
	return ""
}

func (x *LoadBalancerPoolStatusMember) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type LoadBalancerConditionsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners           []*LoadBalancerConditionsListenerStatus `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
	FirewallRuleCreated bool                                    `protobuf:"varint,2,opt,name=firewallRuleCreated,proto3" json:"firewallRuleCreated,omitempty"`
}

func (x *LoadBalancerConditionsStatus) Reset() {
	*x = LoadBalancerConditionsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerConditionsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerConditionsStatus) ProtoMessage() {}

func (x *LoadBalancerConditionsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerConditionsStatus.ProtoReflect.Descriptor instead.
func (*LoadBalancerConditionsStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{93}
}

func (x *LoadBalancerConditionsStatus) GetListeners() []*LoadBalancerConditionsListenerStatus {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *LoadBalancerConditionsStatus) GetFirewallRuleCreated() bool {
	if x != nil {
		return x.FirewallRuleCreated
	}
	return false
}

type LoadBalancerConditionsListenerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	PoolCreated   bool  `protobuf:"varint,2,opt,name=poolCreated,proto3" json:"poolCreated,omitempty"`
	VipCreated    bool  `protobuf:"varint,3,opt,name=vipCreated,proto3" json:"vipCreated,omitempty"`
	VipPoolLinked bool  `protobuf:"varint,4,opt,name=vipPoolLinked,proto3" json:"vipPoolLinked,omitempty"`
}

func (x *LoadBalancerConditionsListenerStatus) Reset() {
	*x = LoadBalancerConditionsListenerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerConditionsListenerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerConditionsListenerStatus) ProtoMessage() {}

func (x *LoadBalancerConditionsListenerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerConditionsListenerStatus.ProtoReflect.Descriptor instead.
func (*LoadBalancerConditionsListenerStatus) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{94}
}

func (x *LoadBalancerConditionsListenerStatus) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LoadBalancerConditionsListenerStatus) GetPoolCreated() bool {
	if x != nil {
		return x.PoolCreated
	}
	return false
}

func (x *LoadBalancerConditionsListenerStatus) GetVipCreated() bool {
	if x != nil {
		return x.VipCreated
	}
	return false
}

func (x *LoadBalancerConditionsListenerStatus) GetVipPoolLinked() bool {
	if x != nil {
		return x.VipPoolLinked
	}
	return false
}

type InstanceTypeDeleteRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the instance type.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InstanceTypeDeleteRequest_Metadata) Reset() {
	*x = InstanceTypeDeleteRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeDeleteRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeDeleteRequest_Metadata) ProtoMessage() {}

func (x *InstanceTypeDeleteRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeDeleteRequest_Metadata.ProtoReflect.Descriptor instead.
func (*InstanceTypeDeleteRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{49, 0}
}

func (x *InstanceTypeDeleteRequest_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InstanceTypeGetRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the instance type.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InstanceTypeGetRequest_Metadata) Reset() {
	*x = InstanceTypeGetRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeGetRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeGetRequest_Metadata) ProtoMessage() {}

func (x *InstanceTypeGetRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeGetRequest_Metadata.ProtoReflect.Descriptor instead.
func (*InstanceTypeGetRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{50, 0}
}

func (x *InstanceTypeGetRequest_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InstanceType_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the instance type.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InstanceType_Metadata) Reset() {
	*x = InstanceType_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceType_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceType_Metadata) ProtoMessage() {}

func (x *InstanceType_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceType_Metadata.ProtoReflect.Descriptor instead.
func (*InstanceType_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{53, 0}
}

func (x *InstanceType_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MachineImageDeleteRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the machine image.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MachineImageDeleteRequest_Metadata) Reset() {
	*x = MachineImageDeleteRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageDeleteRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageDeleteRequest_Metadata) ProtoMessage() {}

func (x *MachineImageDeleteRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageDeleteRequest_Metadata.ProtoReflect.Descriptor instead.
func (*MachineImageDeleteRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{59, 0}
}

func (x *MachineImageDeleteRequest_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MachineImageGetRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the machine image.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MachineImageGetRequest_Metadata) Reset() {
	*x = MachineImageGetRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageGetRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageGetRequest_Metadata) ProtoMessage() {}

func (x *MachineImageGetRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageGetRequest_Metadata.ProtoReflect.Descriptor instead.
func (*MachineImageGetRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{60, 0}
}

func (x *MachineImageGetRequest_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MachineImageSearchRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *MachineImageSearchRequest_Metadata) Reset() {
	*x = MachineImageSearchRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImageSearchRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImageSearchRequest_Metadata) ProtoMessage() {}

func (x *MachineImageSearchRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImageSearchRequest_Metadata.ProtoReflect.Descriptor instead.
func (*MachineImageSearchRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{61, 0}
}

func (x *MachineImageSearchRequest_Metadata) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type MachineImage_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the machine image.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MachineImage_Metadata) Reset() {
	*x = MachineImage_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineImage_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineImage_Metadata) ProtoMessage() {}

func (x *MachineImage_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineImage_Metadata.ProtoReflect.Descriptor instead.
func (*MachineImage_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{63, 0}
}

func (x *MachineImage_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VNetPutRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VNetPutRequest_Metadata) Reset() {
	*x = VNetPutRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetPutRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetPutRequest_Metadata) ProtoMessage() {}

func (x *VNetPutRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetPutRequest_Metadata.ProtoReflect.Descriptor instead.
func (*VNetPutRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{66, 0}
}

func (x *VNetPutRequest_Metadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *VNetPutRequest_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VNetGetRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*VNetGetRequest_Metadata_Name
	//	*VNetGetRequest_Metadata_ResourceId
	NameOrId isVNetGetRequest_Metadata_NameOrId `protobuf_oneof:"nameOrId"`
}

func (x *VNetGetRequest_Metadata) Reset() {
	*x = VNetGetRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetGetRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetGetRequest_Metadata) ProtoMessage() {}

func (x *VNetGetRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetGetRequest_Metadata.ProtoReflect.Descriptor instead.
func (*VNetGetRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{67, 0}
}

func (x *VNetGetRequest_Metadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *VNetGetRequest_Metadata) GetNameOrId() isVNetGetRequest_Metadata_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *VNetGetRequest_Metadata) GetName() string {
	if x, ok := x.GetNameOrId().(*VNetGetRequest_Metadata_Name); ok {
		return x.Name
	}
	return ""
}

func (x *VNetGetRequest_Metadata) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*VNetGetRequest_Metadata_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

type isVNetGetRequest_Metadata_NameOrId interface {
	isVNetGetRequest_Metadata_NameOrId()
}

type VNetGetRequest_Metadata_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type VNetGetRequest_Metadata_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*VNetGetRequest_Metadata_Name) isVNetGetRequest_Metadata_NameOrId() {}

func (*VNetGetRequest_Metadata_ResourceId) isVNetGetRequest_Metadata_NameOrId() {}

type VNetSearchRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *VNetSearchRequest_Metadata) Reset() {
	*x = VNetSearchRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetSearchRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetSearchRequest_Metadata) ProtoMessage() {}

func (x *VNetSearchRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetSearchRequest_Metadata.ProtoReflect.Descriptor instead.
func (*VNetSearchRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{68, 0}
}

func (x *VNetSearchRequest_Metadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type VNetDeleteRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*VNetDeleteRequest_Metadata_Name
	//	*VNetDeleteRequest_Metadata_ResourceId
	NameOrId isVNetDeleteRequest_Metadata_NameOrId `protobuf_oneof:"nameOrId"`
}

func (x *VNetDeleteRequest_Metadata) Reset() {
	*x = VNetDeleteRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNetDeleteRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNetDeleteRequest_Metadata) ProtoMessage() {}

func (x *VNetDeleteRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNetDeleteRequest_Metadata.ProtoReflect.Descriptor instead.
func (*VNetDeleteRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{70, 0}
}

func (x *VNetDeleteRequest_Metadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *VNetDeleteRequest_Metadata) GetNameOrId() isVNetDeleteRequest_Metadata_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *VNetDeleteRequest_Metadata) GetName() string {
	if x, ok := x.GetNameOrId().(*VNetDeleteRequest_Metadata_Name); ok {
		return x.Name
	}
	return ""
}

func (x *VNetDeleteRequest_Metadata) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*VNetDeleteRequest_Metadata_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

type isVNetDeleteRequest_Metadata_NameOrId interface {
	isVNetDeleteRequest_Metadata_NameOrId()
}

type VNetDeleteRequest_Metadata_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type VNetDeleteRequest_Metadata_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*VNetDeleteRequest_Metadata_Name) isVNetDeleteRequest_Metadata_NameOrId() {}

func (*VNetDeleteRequest_Metadata_ResourceId) isVNetDeleteRequest_Metadata_NameOrId() {}

type VNet_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
}

func (x *VNet_Metadata) Reset() {
	*x = VNet_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNet_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNet_Metadata) ProtoMessage() {}

func (x *VNet_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNet_Metadata.ProtoReflect.Descriptor instead.
func (*VNet_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{71, 0}
}

func (x *VNet_Metadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *VNet_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VNet_Metadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

var File_compute_proto protoreflect.FileDescriptor

var file_compute_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83,
	0x01, 0x0a, 0x19, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73,
	0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x22, 0x56, 0x0a, 0x16, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x19,
	0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x1a, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x19, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x22, 0x59, 0x0a, 0x19, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70,
	0x0a, 0x0c, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x56, 0x0a, 0x10, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x73, 0x68, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22,
	0x8f, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49,
	0x64, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x15, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x52, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x15, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3f, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x7b, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x55, 0x0a,
	0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c,
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x4e, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x4e, 0x65, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x47,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x19, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xee, 0x05, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x18,
	0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0b, 0x72, 0x75,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x73, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x5e, 0x0a, 0x19, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x19, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x41, 0x0a, 0x13, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10,
	0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08,
	0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a,
	0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x15, 0x10,
	0x16, 0x4a, 0x04, 0x08, 0x17, 0x10, 0x18, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x73, 0x73, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0xac, 0x03, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa2, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x31, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x30, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0xdb,
	0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31,
	0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a,
	0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x4d, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x13, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x17, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x4e,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x4e, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x06, 0x76, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x14, 0x53, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xc8, 0x01, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49,
	0x64, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x18, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x11, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x37, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c,
	0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x1b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5f, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x32, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd,
	0x1b, 0x02, 0x30, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x33, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x33, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x33, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x33, 0x22, 0x72, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x13, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x47, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x1a, 0x1e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x29, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x70,
	0x75, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x62,
	0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x62, 0x6d,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x07, 0x43, 0x70, 0x75, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x07, 0x47, 0x70, 0x75, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x6d,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x6d,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x1e, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1e,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c,
	0x0a, 0x16, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x19, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x2e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x47, 0x0a, 0x1a, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x1a, 0x1e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x64,
	0x35, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x73,
	0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x73, 0x75, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x73, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x73, 0x75, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x73, 0x75, 0x6d, 0x12, 0x3b,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x56, 0x4e, 0x65, 0x74, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x4e, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x56,
	0x4e, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x7e, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x56, 0x4e,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3a,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x12, 0x56, 0x4e,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x56, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x76, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64,
	0x22, 0xc5, 0x01, 0x0a, 0x04, 0x56, 0x4e, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x1a, 0x66, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x08, 0x56, 0x4e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x87, 0x01, 0x0a,
	0x19, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x5a, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5a, 0x0a, 0x19, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47,
	0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x5d, 0x0a, 0x19, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x14, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22,
	0xfe, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8c, 0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x84, 0x02, 0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x02, 0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x03, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x31, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xdf, 0x01, 0x0a, 0x1d, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72,
	0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x69, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69,
	0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x50, 0x0a, 0x1c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x24, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x70, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x69,
	0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x2a, 0x39, 0x0a, 0x0b, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x08, 0x54, 0x72, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x75, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x61, 0x6c, 0x73, 0x65, 0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x55, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x6e, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x78, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x04, 0x2a, 0x39,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x01, 0x2a, 0x37, 0x0a, 0x17, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6c, 0x65, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x01, 0x2a, 0x33, 0x0a, 0x18, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x01, 0x2a, 0x3a, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x32, 0xe6, 0x07, 0x0a, 0x13, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x54,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x7d, 0x2f, 0x73, 0x73, 0x68, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79,
	0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x50, 0x01, 0x12, 0xf9, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa6, 0x01, 0x12, 0x52, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x73, 0x68, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a, 0x50,
	0x12, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x73,
	0x68, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01,
	0x12, 0xa0, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x73, 0x68, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b,
	0x65, 0x79, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x50, 0x01, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73,
	0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x82,
	0x02, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa6, 0x01, 0x2a, 0x52, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x73, 0x68, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x7d, 0x5a, 0x50, 0x2a, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d,
	0x2f, 0x73, 0x73, 0x68, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x50, 0x01, 0x12, 0x48, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x32, 0xa6, 0x09,
	0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18, 0x01, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x40, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x28, 0x01, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xe9, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x9e, 0x01, 0x12, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x7d, 0x5a, 0x4c, 0x12, 0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50,
	0x01, 0x12, 0xd8, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x7a, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5a, 0x41, 0x22, 0x3c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xf4, 0x01, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb3, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa4, 0x01, 0x1a, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x4f, 0x1a, 0x4a, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0x12, 0xf6, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9e, 0x01, 0x2a, 0x4e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a, 0x4c,
	0x2a, 0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x38, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xee, 0x09, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xa8, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3a, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x40, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x12, 0xa7, 0x01, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x1a, 0x4f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0x12, 0xa4, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51,
	0x2a, 0x4f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xc3, 0x02, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xf1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xe2, 0x01, 0x2a, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x69, 0x64, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a, 0x6e, 0x2a, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12,
	0xbb, 0x01, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5d, 0x32, 0x58, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d,
	0x75, 0x70, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x38, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xcc, 0x03, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0x12, 0x78, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x50, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x08, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x10, 0x01, 0x30, 0x01, 0x32, 0xcc, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0x12, 0x78, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x50, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x08, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x10, 0x01, 0x30, 0x01, 0x32, 0xbf, 0x06, 0x0a, 0x0b, 0x56, 0x4e, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74,
	0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xd1,
	0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x4e, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x96, 0x01, 0x12, 0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x7d, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d,
	0x5a, 0x48, 0x12, 0x46, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x76, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x4e, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x73, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x39, 0x0a,
	0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x4e, 0x65, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0xe2, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96, 0x01, 0x2a,
	0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x6e, 0x65,
	0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a, 0x48, 0x2a, 0x46, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x6e, 0x65, 0x74, 0x73,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x38, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xc7, 0x09, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x9d, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x12,
	0xf1, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x22, 0xb5, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xa6, 0x01, 0x12, 0x52, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73,
	0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a, 0x50, 0x12, 0x4e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0x12, 0xe1, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x12, 0x39, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x5a, 0x45, 0x22, 0x40, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x80, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xbb, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xac, 0x01, 0x1a, 0x52, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x53, 0x1a,
	0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f,
	0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a,
	0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xfa, 0x01, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa6, 0x01, 0x2a, 0x52, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a, 0x50, 0x2a,
	0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f,
	0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x6d, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b, 0x14, 0x12, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_compute_proto_rawDescOnce sync.Once
	file_compute_proto_rawDescData = file_compute_proto_rawDesc
)

func file_compute_proto_rawDescGZIP() []byte {
	file_compute_proto_rawDescOnce.Do(func() {
		file_compute_proto_rawDescData = protoimpl.X.CompressGZIP(file_compute_proto_rawDescData)
	})
	return file_compute_proto_rawDescData
}

var file_compute_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_compute_proto_msgTypes = make([]protoimpl.MessageInfo, 122)
var file_compute_proto_goTypes = []interface{}{
	(RunStrategy)(0),                             // 0: proto.RunStrategy
	(TriState)(0),                                // 1: proto.TriState
	(InstancePhase)(0),                           // 2: proto.InstancePhase
	(SearchFilterCriteria)(0),                    // 3: proto.SearchFilterCriteria
	(InstanceCategory)(0),                        // 4: proto.InstanceCategory
	(LoadBalancerMonitorType)(0),                 // 5: proto.LoadBalancerMonitorType
	(LoadBalancingMode)(0),                       // 6: proto.LoadBalancingMode
	(LoadBalancerInstanceType)(0),                // 7: proto.LoadBalancerInstanceType
	(LoadBalancerState)(0),                       // 8: proto.LoadBalancerState
	(*SshPublicKeyCreateRequest)(nil),            // 9: proto.SshPublicKeyCreateRequest
	(*SshPublicKeyGetRequest)(nil),               // 10: proto.SshPublicKeyGetRequest
	(*SshPublicKeySearchRequest)(nil),            // 11: proto.SshPublicKeySearchRequest
	(*SshPublicKeySearchResponse)(nil),           // 12: proto.SshPublicKeySearchResponse
	(*SshPublicKeyUpdateRequest)(nil),            // 13: proto.SshPublicKeyUpdateRequest
	(*SshPublicKeyDeleteRequest)(nil),            // 14: proto.SshPublicKeyDeleteRequest
	(*SshPublicKey)(nil),                         // 15: proto.SshPublicKey
	(*SshPublicKeySpec)(nil),                     // 16: proto.SshPublicKeySpec
	(*ResourceMetadata)(nil),                     // 17: proto.ResourceMetadata
	(*ResourceMetadataCreate)(nil),               // 18: proto.ResourceMetadataCreate
	(*ResourceMetadataUpdate)(nil),               // 19: proto.ResourceMetadataUpdate
	(*ResourceMetadataReference)(nil),            // 20: proto.ResourceMetadataReference
	(*ResourceMetadataSearch)(nil),               // 21: proto.ResourceMetadataSearch
	(*InstanceCreateRequest)(nil),                // 22: proto.InstanceCreateRequest
	(*InstanceGetRequest)(nil),                   // 23: proto.InstanceGetRequest
	(*InstanceSearchRequest)(nil),                // 24: proto.InstanceSearchRequest
	(*InstanceSearchResponse)(nil),               // 25: proto.InstanceSearchResponse
	(*InstanceUpdateRequest)(nil),                // 26: proto.InstanceUpdateRequest
	(*InstanceDeleteRequest)(nil),                // 27: proto.InstanceDeleteRequest
	(*Instance)(nil),                             // 28: proto.Instance
	(*NetworkInterface)(nil),                     // 29: proto.NetworkInterface
	(*LabelSelector)(nil),                        // 30: proto.LabelSelector
	(*TopologySpreadConstraints)(nil),            // 31: proto.TopologySpreadConstraints
	(*InstanceSpec)(nil),                         // 32: proto.InstanceSpec
	(*InstanceMetadata)(nil),                     // 33: proto.InstanceMetadata
	(*InstanceMetadataCreate)(nil),               // 34: proto.InstanceMetadataCreate
	(*InstanceMetadataUpdate)(nil),               // 35: proto.InstanceMetadataUpdate
	(*InstanceMetadataReference)(nil),            // 36: proto.InstanceMetadataReference
	(*InstanceMetadataSearch)(nil),               // 37: proto.InstanceMetadataSearch
	(*InstanceStatus)(nil),                       // 38: proto.InstanceStatus
	(*InstanceInterfaceStatus)(nil),              // 39: proto.InstanceInterfaceStatus
	(*SshProxyTunnelStatus)(nil),                 // 40: proto.SshProxyTunnelStatus
	(*InstanceGroupCreateRequest)(nil),           // 41: proto.InstanceGroupCreateRequest
	(*InstanceGroupUpdateRequest)(nil),           // 42: proto.InstanceGroupUpdateRequest
	(*InstanceGroupMemberDeleteRequest)(nil),     // 43: proto.InstanceGroupMemberDeleteRequest
	(*InstanceGroupScaleRequest)(nil),            // 44: proto.InstanceGroupScaleRequest
	(*InstanceGroupScaleResponse)(nil),           // 45: proto.InstanceGroupScaleResponse
	(*InstanceGroupScaleStatus)(nil),             // 46: proto.InstanceGroupScaleStatus
	(*InstanceGroupSpec)(nil),                    // 47: proto.InstanceGroupSpec
	(*InstanceGroupSearchRequest)(nil),           // 48: proto.InstanceGroupSearchRequest
	(*InstanceGroupSearchResponse)(nil),          // 49: proto.InstanceGroupSearchResponse
	(*InstanceGroupDeleteRequest)(nil),           // 50: proto.InstanceGroupDeleteRequest
	(*InstanceGroup)(nil),                        // 51: proto.InstanceGroup
	(*InstanceGroupMetadata)(nil),                // 52: proto.InstanceGroupMetadata
	(*InstanceGroupMetadataCreate)(nil),          // 53: proto.InstanceGroupMetadataCreate
	(*InstanceGroupMetadataUpdate)(nil),          // 54: proto.InstanceGroupMetadataUpdate
	(*InstanceGroupMetadataReference)(nil),       // 55: proto.InstanceGroupMetadataReference
	(*InstanceGroupMetadataSearch)(nil),          // 56: proto.InstanceGroupMetadataSearch
	(*InstanceGroupStatus)(nil),                  // 57: proto.InstanceGroupStatus
	(*InstanceTypeDeleteRequest)(nil),            // 58: proto.InstanceTypeDeleteRequest
	(*InstanceTypeGetRequest)(nil),               // 59: proto.InstanceTypeGetRequest
	(*InstanceTypeSearchRequest)(nil),            // 60: proto.InstanceTypeSearchRequest
	(*InstanceTypeSearchResponse)(nil),           // 61: proto.InstanceTypeSearchResponse
	(*InstanceType)(nil),                         // 62: proto.InstanceType
	(*InstanceTypeSpec)(nil),                     // 63: proto.InstanceTypeSpec
	(*CpuSpec)(nil),                              // 64: proto.CpuSpec
	(*GpuSpec)(nil),                              // 65: proto.GpuSpec
	(*MemorySpec)(nil),                           // 66: proto.MemorySpec
	(*DiskSpec)(nil),                             // 67: proto.DiskSpec
	(*MachineImageDeleteRequest)(nil),            // 68: proto.MachineImageDeleteRequest
	(*MachineImageGetRequest)(nil),               // 69: proto.MachineImageGetRequest
	(*MachineImageSearchRequest)(nil),            // 70: proto.MachineImageSearchRequest
	(*MachineImageSearchResponse)(nil),           // 71: proto.MachineImageSearchResponse
	(*MachineImage)(nil),                         // 72: proto.MachineImage
	(*MachineImageSpec)(nil),                     // 73: proto.MachineImageSpec
	(*MachineImageComponent)(nil),                // 74: proto.MachineImageComponent
	(*VNetPutRequest)(nil),                       // 75: proto.VNetPutRequest
	(*VNetGetRequest)(nil),                       // 76: proto.VNetGetRequest
	(*VNetSearchRequest)(nil),                    // 77: proto.VNetSearchRequest
	(*VNetSearchResponse)(nil),                   // 78: proto.VNetSearchResponse
	(*VNetDeleteRequest)(nil),                    // 79: proto.VNetDeleteRequest
	(*VNet)(nil),                                 // 80: proto.VNet
	(*VNetSpec)(nil),                             // 81: proto.VNetSpec
	(*LoadBalancerCreateRequest)(nil),            // 82: proto.LoadBalancerCreateRequest
	(*LoadBalancerGetRequest)(nil),               // 83: proto.LoadBalancerGetRequest
	(*LoadBalancerSearchRequest)(nil),            // 84: proto.LoadBalancerSearchRequest
	(*LoadBalancerSearchResponse)(nil),           // 85: proto.LoadBalancerSearchResponse
	(*LoadBalancerUpdateRequest)(nil),            // 86: proto.LoadBalancerUpdateRequest
	(*LoadBalancerDeleteRequest)(nil),            // 87: proto.LoadBalancerDeleteRequest
	(*LoadBalancer)(nil),                         // 88: proto.LoadBalancer
	(*LoadBalancerSpec)(nil),                     // 89: proto.LoadBalancerSpec
	(*LoadBalancerListener)(nil),                 // 90: proto.LoadBalancerListener
	(*LoadBalancerPool)(nil),                     // 91: proto.LoadBalancerPool
	(*LoadBalancerSpecUpdate)(nil),               // 92: proto.LoadBalancerSpecUpdate
	(*LoadBalancerMetadataCreate)(nil),           // 93: proto.LoadBalancerMetadataCreate
	(*LoadBalancerMetadataUpdate)(nil),           // 94: proto.LoadBalancerMetadataUpdate
	(*LoadBalancerMetadata)(nil),                 // 95: proto.LoadBalancerMetadata
	(*LoadBalancerMetadataReference)(nil),        // 96: proto.LoadBalancerMetadataReference
	(*LoadBalancerMetadataSearch)(nil),           // 97: proto.LoadBalancerMetadataSearch
	(*LoadBalancerStatus)(nil),                   // 98: proto.LoadBalancerStatus
	(*LoadBalancerSecurity)(nil),                 // 99: proto.LoadBalancerSecurity
	(*LoadBalancerListenerStatus)(nil),           // 100: proto.LoadBalancerListenerStatus
	(*LoadBalancerPoolStatusMember)(nil),         // 101: proto.LoadBalancerPoolStatusMember
	(*LoadBalancerConditionsStatus)(nil),         // 102: proto.LoadBalancerConditionsStatus
	(*LoadBalancerConditionsListenerStatus)(nil), // 103: proto.LoadBalancerConditionsListenerStatus
	nil, // 104: proto.ResourceMetadata.LabelsEntry
	nil, // 105: proto.ResourceMetadataCreate.LabelsEntry
	nil, // 106: proto.ResourceMetadataUpdate.LabelsEntry
	nil, // 107: proto.ResourceMetadataSearch.LabelsEntry
	nil, // 108: proto.LabelSelector.MatchLabelsEntry
	nil, // 109: proto.InstanceMetadata.LabelsEntry
	nil, // 110: proto.InstanceMetadataCreate.LabelsEntry
	nil, // 111: proto.InstanceMetadataUpdate.LabelsEntry
	nil, // 112: proto.InstanceMetadataSearch.LabelsEntry
	(*InstanceTypeDeleteRequest_Metadata)(nil), // 113: proto.InstanceTypeDeleteRequest.Metadata
	(*InstanceTypeGetRequest_Metadata)(nil),    // 114: proto.InstanceTypeGetRequest.Metadata
	(*InstanceType_Metadata)(nil),              // 115: proto.InstanceType.Metadata
	(*MachineImageDeleteRequest_Metadata)(nil), // 116: proto.MachineImageDeleteRequest.Metadata
	(*MachineImageGetRequest_Metadata)(nil),    // 117: proto.MachineImageGetRequest.Metadata
	(*MachineImageSearchRequest_Metadata)(nil), // 118: proto.MachineImageSearchRequest.Metadata
	(*MachineImage_Metadata)(nil),              // 119: proto.MachineImage.Metadata
	nil,                                        // 120: proto.MachineImageSpec.LabelsEntry
	(*VNetPutRequest_Metadata)(nil),            // 121: proto.VNetPutRequest.Metadata
	(*VNetGetRequest_Metadata)(nil),            // 122: proto.VNetGetRequest.Metadata
	(*VNetSearchRequest_Metadata)(nil),         // 123: proto.VNetSearchRequest.Metadata
	(*VNetDeleteRequest_Metadata)(nil),         // 124: proto.VNetDeleteRequest.Metadata
	(*VNet_Metadata)(nil),                      // 125: proto.VNet.Metadata
	nil,                                        // 126: proto.LoadBalancerPool.InstanceSelectorsEntry
	nil,                                        // 127: proto.LoadBalancerMetadataCreate.LabelsEntry
	nil,                                        // 128: proto.LoadBalancerMetadataUpdate.LabelsEntry
	nil,                                        // 129: proto.LoadBalancerMetadata.LabelsEntry
	nil,                                        // 130: proto.LoadBalancerMetadataSearch.LabelsEntry
	(*timestamppb.Timestamp)(nil),              // 131: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                      // 132: google.protobuf.Empty
}
var file_compute_proto_depIdxs = []int32{
	18,  // 0: proto.SshPublicKeyCreateRequest.metadata:type_name -> proto.ResourceMetadataCreate
	16,  // 1: proto.SshPublicKeyCreateRequest.spec:type_name -> proto.SshPublicKeySpec
	20,  // 2: proto.SshPublicKeyGetRequest.metadata:type_name -> proto.ResourceMetadataReference
	21,  // 3: proto.SshPublicKeySearchRequest.metadata:type_name -> proto.ResourceMetadataSearch
	15,  // 4: proto.SshPublicKeySearchResponse.items:type_name -> proto.SshPublicKey
	19,  // 5: proto.SshPublicKeyUpdateRequest.metadata:type_name -> proto.ResourceMetadataUpdate
	16,  // 6: proto.SshPublicKeyUpdateRequest.spec:type_name -> proto.SshPublicKeySpec
	20,  // 7: proto.SshPublicKeyDeleteRequest.metadata:type_name -> proto.ResourceMetadataReference
	17,  // 8: proto.SshPublicKey.metadata:type_name -> proto.ResourceMetadata
	16,  // 9: proto.SshPublicKey.spec:type_name -> proto.SshPublicKeySpec
	104, // 10: proto.ResourceMetadata.labels:type_name -> proto.ResourceMetadata.LabelsEntry
	131, // 11: proto.ResourceMetadata.creationTimestamp:type_name -> google.protobuf.Timestamp
	105, // 12: proto.ResourceMetadataCreate.labels:type_name -> proto.ResourceMetadataCreate.LabelsEntry
	106, // 13: proto.ResourceMetadataUpdate.labels:type_name -> proto.ResourceMetadataUpdate.LabelsEntry
	107, // 14: proto.ResourceMetadataSearch.labels:type_name -> proto.ResourceMetadataSearch.LabelsEntry
	34,  // 15: proto.InstanceCreateRequest.metadata:type_name -> proto.InstanceMetadataCreate
	32,  // 16: proto.InstanceCreateRequest.spec:type_name -> proto.InstanceSpec
	36,  // 17: proto.InstanceGetRequest.metadata:type_name -> proto.InstanceMetadataReference
	37,  // 18: proto.InstanceSearchRequest.metadata:type_name -> proto.InstanceMetadataSearch
	28,  // 19: proto.InstanceSearchResponse.items:type_name -> proto.Instance
	35,  // 20: proto.InstanceUpdateRequest.metadata:type_name -> proto.InstanceMetadataUpdate
	32,  // 21: proto.InstanceUpdateRequest.spec:type_name -> proto.InstanceSpec
	36,  // 22: proto.InstanceDeleteRequest.metadata:type_name -> proto.InstanceMetadataReference
	33,  // 23: proto.Instance.metadata:type_name -> proto.InstanceMetadata
	32,  // 24: proto.Instance.spec:type_name -> proto.InstanceSpec
	38,  // 25: proto.Instance.status:type_name -> proto.InstanceStatus
	108, // 26: proto.LabelSelector.matchLabels:type_name -> proto.LabelSelector.MatchLabelsEntry
	30,  // 27: proto.TopologySpreadConstraints.labelSelector:type_name -> proto.LabelSelector
	0,   // 28: proto.InstanceSpec.runStrategy:type_name -> proto.RunStrategy
	29,  // 29: proto.InstanceSpec.interfaces:type_name -> proto.NetworkInterface
	31,  // 30: proto.InstanceSpec.topologySpreadConstraints:type_name -> proto.TopologySpreadConstraints
	1,   // 31: proto.InstanceSpec.quickConnectEnabled:type_name -> proto.TriState
	109, // 32: proto.InstanceMetadata.labels:type_name -> proto.InstanceMetadata.LabelsEntry
	131, // 33: proto.InstanceMetadata.creationTimestamp:type_name -> google.protobuf.Timestamp
	131, // 34: proto.InstanceMetadata.deletionTimestamp:type_name -> google.protobuf.Timestamp
	110, // 35: proto.InstanceMetadataCreate.labels:type_name -> proto.InstanceMetadataCreate.LabelsEntry
	111, // 36: proto.InstanceMetadataUpdate.labels:type_name -> proto.InstanceMetadataUpdate.LabelsEntry
	112, // 37: proto.InstanceMetadataSearch.labels:type_name -> proto.InstanceMetadataSearch.LabelsEntry
	3,   // 38: proto.InstanceMetadataSearch.instanceGroupFilter:type_name -> proto.SearchFilterCriteria
	2,   // 39: proto.InstanceStatus.phase:type_name -> proto.InstancePhase
	39,  // 40: proto.InstanceStatus.interfaces:type_name -> proto.InstanceInterfaceStatus
	40,  // 41: proto.InstanceStatus.sshProxy:type_name -> proto.SshProxyTunnelStatus
	53,  // 42: proto.InstanceGroupCreateRequest.metadata:type_name -> proto.InstanceGroupMetadataCreate
	47,  // 43: proto.InstanceGroupCreateRequest.spec:type_name -> proto.InstanceGroupSpec
	54,  // 44: proto.InstanceGroupUpdateRequest.metadata:type_name -> proto.InstanceGroupMetadataUpdate
	47,  // 45: proto.InstanceGroupUpdateRequest.spec:type_name -> proto.InstanceGroupSpec
	52,  // 46: proto.InstanceGroupMemberDeleteRequest.metadata:type_name -> proto.InstanceGroupMetadata
	52,  // 47: proto.InstanceGroupScaleRequest.metadata:type_name -> proto.InstanceGroupMetadata
	47,  // 48: proto.InstanceGroupScaleRequest.spec:type_name -> proto.InstanceGroupSpec
	52,  // 49: proto.InstanceGroupScaleResponse.metadata:type_name -> proto.InstanceGroupMetadata
	46,  // 50: proto.InstanceGroupScaleResponse.status:type_name -> proto.InstanceGroupScaleStatus
	32,  // 51: proto.InstanceGroupSpec.instanceSpec:type_name -> proto.InstanceSpec
	56,  // 52: proto.InstanceGroupSearchRequest.metadata:type_name -> proto.InstanceGroupMetadataSearch
	51,  // 53: proto.InstanceGroupSearchResponse.items:type_name -> proto.InstanceGroup
	55,  // 54: proto.InstanceGroupDeleteRequest.metadata:type_name -> proto.InstanceGroupMetadataReference
	52,  // 55: proto.InstanceGroup.metadata:type_name -> proto.InstanceGroupMetadata
	47,  // 56: proto.InstanceGroup.spec:type_name -> proto.InstanceGroupSpec
	57,  // 57: proto.InstanceGroup.status:type_name -> proto.InstanceGroupStatus
	113, // 58: proto.InstanceTypeDeleteRequest.metadata:type_name -> proto.InstanceTypeDeleteRequest.Metadata
	114, // 59: proto.InstanceTypeGetRequest.metadata:type_name -> proto.InstanceTypeGetRequest.Metadata
	62,  // 60: proto.InstanceTypeSearchResponse.items:type_name -> proto.InstanceType
	115, // 61: proto.InstanceType.metadata:type_name -> proto.InstanceType.Metadata
	63,  // 62: proto.InstanceType.spec:type_name -> proto.InstanceTypeSpec
	4,   // 63: proto.InstanceTypeSpec.instanceCategory:type_name -> proto.InstanceCategory
	64,  // 64: proto.InstanceTypeSpec.cpu:type_name -> proto.CpuSpec
	66,  // 65: proto.InstanceTypeSpec.memory:type_name -> proto.MemorySpec
	67,  // 66: proto.InstanceTypeSpec.disks:type_name -> proto.DiskSpec
	65,  // 67: proto.InstanceTypeSpec.gpu:type_name -> proto.GpuSpec
	116, // 68: proto.MachineImageDeleteRequest.metadata:type_name -> proto.MachineImageDeleteRequest.Metadata
	117, // 69: proto.MachineImageGetRequest.metadata:type_name -> proto.MachineImageGetRequest.Metadata
	118, // 70: proto.MachineImageSearchRequest.metadata:type_name -> proto.MachineImageSearchRequest.Metadata
	72,  // 71: proto.MachineImageSearchResponse.items:type_name -> proto.MachineImage
	119, // 72: proto.MachineImage.metadata:type_name -> proto.MachineImage.Metadata
	73,  // 73: proto.MachineImage.spec:type_name -> proto.MachineImageSpec
	4,   // 74: proto.MachineImageSpec.instanceCategories:type_name -> proto.InstanceCategory
	120, // 75: proto.MachineImageSpec.labels:type_name -> proto.MachineImageSpec.LabelsEntry
	74,  // 76: proto.MachineImageSpec.components:type_name -> proto.MachineImageComponent
	121, // 77: proto.VNetPutRequest.metadata:type_name -> proto.VNetPutRequest.Metadata
	81,  // 78: proto.VNetPutRequest.spec:type_name -> proto.VNetSpec
	122, // 79: proto.VNetGetRequest.metadata:type_name -> proto.VNetGetRequest.Metadata
	123, // 80: proto.VNetSearchRequest.metadata:type_name -> proto.VNetSearchRequest.Metadata
	80,  // 81: proto.VNetSearchResponse.items:type_name -> proto.VNet
	124, // 82: proto.VNetDeleteRequest.metadata:type_name -> proto.VNetDeleteRequest.Metadata
	125, // 83: proto.VNet.metadata:type_name -> proto.VNet.Metadata
	81,  // 84: proto.VNet.spec:type_name -> proto.VNetSpec
	93,  // 85: proto.LoadBalancerCreateRequest.metadata:type_name -> proto.LoadBalancerMetadataCreate
	89,  // 86: proto.LoadBalancerCreateRequest.spec:type_name -> proto.LoadBalancerSpec
	96,  // 87: proto.LoadBalancerGetRequest.metadata:type_name -> proto.LoadBalancerMetadataReference
	97,  // 88: proto.LoadBalancerSearchRequest.metadata:type_name -> proto.LoadBalancerMetadataSearch
	88,  // 89: proto.LoadBalancerSearchResponse.items:type_name -> proto.LoadBalancer
	94,  // 90: proto.LoadBalancerUpdateRequest.metadata:type_name -> proto.LoadBalancerMetadataUpdate
	92,  // 91: proto.LoadBalancerUpdateRequest.spec:type_name -> proto.LoadBalancerSpecUpdate
	96,  // 92: proto.LoadBalancerDeleteRequest.metadata:type_name -> proto.LoadBalancerMetadataReference
	95,  // 93: proto.LoadBalancer.metadata:type_name -> proto.LoadBalancerMetadata
	89,  // 94: proto.LoadBalancer.spec:type_name -> proto.LoadBalancerSpec
	98,  // 95: proto.LoadBalancer.status:type_name -> proto.LoadBalancerStatus
	90,  // 96: proto.LoadBalancerSpec.listeners:type_name -> proto.LoadBalancerListener
	99,  // 97: proto.LoadBalancerSpec.security:type_name -> proto.LoadBalancerSecurity
	91,  // 98: proto.LoadBalancerListener.pool:type_name -> proto.LoadBalancerPool
	5,   // 99: proto.LoadBalancerPool.monitor:type_name -> proto.LoadBalancerMonitorType
	6,   // 100: proto.LoadBalancerPool.loadBalancingMode:type_name -> proto.LoadBalancingMode
	126, // 101: proto.LoadBalancerPool.instanceSelectors:type_name -> proto.LoadBalancerPool.InstanceSelectorsEntry
	90,  // 102: proto.LoadBalancerSpecUpdate.listeners:type_name -> proto.LoadBalancerListener
	99,  // 103: proto.LoadBalancerSpecUpdate.security:type_name -> proto.LoadBalancerSecurity
	127, // 104: proto.LoadBalancerMetadataCreate.labels:type_name -> proto.LoadBalancerMetadataCreate.LabelsEntry
	128, // 105: proto.LoadBalancerMetadataUpdate.labels:type_name -> proto.LoadBalancerMetadataUpdate.LabelsEntry
	129, // 106: proto.LoadBalancerMetadata.labels:type_name -> proto.LoadBalancerMetadata.LabelsEntry
	131, // 107: proto.LoadBalancerMetadata.creationTimestamp:type_name -> google.protobuf.Timestamp
	131, // 108: proto.LoadBalancerMetadata.deletionTimestamp:type_name -> google.protobuf.Timestamp
	130, // 109: proto.LoadBalancerMetadataSearch.labels:type_name -> proto.LoadBalancerMetadataSearch.LabelsEntry
	102, // 110: proto.LoadBalancerStatus.conditions:type_name -> proto.LoadBalancerConditionsStatus
	100, // 111: proto.LoadBalancerStatus.listeners:type_name -> proto.LoadBalancerListenerStatus
	101, // 112: proto.LoadBalancerListenerStatus.poolMembers:type_name -> proto.LoadBalancerPoolStatusMember
	103, // 113: proto.LoadBalancerConditionsStatus.listeners:type_name -> proto.LoadBalancerConditionsListenerStatus
	9,   // 114: proto.SshPublicKeyService.Create:input_type -> proto.SshPublicKeyCreateRequest
	10,  // 115: proto.SshPublicKeyService.Get:input_type -> proto.SshPublicKeyGetRequest
	11,  // 116: proto.SshPublicKeyService.Search:input_type -> proto.SshPublicKeySearchRequest
	11,  // 117: proto.SshPublicKeyService.SearchStream:input_type -> proto.SshPublicKeySearchRequest
	14,  // 118: proto.SshPublicKeyService.Delete:input_type -> proto.SshPublicKeyDeleteRequest
	132, // 119: proto.SshPublicKeyService.Ping:input_type -> google.protobuf.Empty
	22,  // 120: proto.InstanceService.Create:input_type -> proto.InstanceCreateRequest
	23,  // 121: proto.InstanceService.Get:input_type -> proto.InstanceGetRequest
	24,  // 122: proto.InstanceService.Search:input_type -> proto.InstanceSearchRequest
	26,  // 123: proto.InstanceService.Update:input_type -> proto.InstanceUpdateRequest
	27,  // 124: proto.InstanceService.Delete:input_type -> proto.InstanceDeleteRequest
	132, // 125: proto.InstanceService.Ping:input_type -> google.protobuf.Empty
	41,  // 126: proto.InstanceGroupService.Create:input_type -> proto.InstanceGroupCreateRequest
	42,  // 127: proto.InstanceGroupService.Update:input_type -> proto.InstanceGroupUpdateRequest
	48,  // 128: proto.InstanceGroupService.Search:input_type -> proto.InstanceGroupSearchRequest
	50,  // 129: proto.InstanceGroupService.Delete:input_type -> proto.InstanceGroupDeleteRequest
	43,  // 130: proto.InstanceGroupService.DeleteMember:input_type -> proto.InstanceGroupMemberDeleteRequest
	44,  // 131: proto.InstanceGroupService.ScaleUp:input_type -> proto.InstanceGroupScaleRequest
	132, // 132: proto.InstanceGroupService.Ping:input_type -> google.protobuf.Empty
	62,  // 133: proto.InstanceTypeService.Put:input_type -> proto.InstanceType
	58,  // 134: proto.InstanceTypeService.Delete:input_type -> proto.InstanceTypeDeleteRequest
	59,  // 135: proto.InstanceTypeService.Get:input_type -> proto.InstanceTypeGetRequest
	60,  // 136: proto.InstanceTypeService.Search:input_type -> proto.InstanceTypeSearchRequest
	60,  // 137: proto.InstanceTypeService.SearchStream:input_type -> proto.InstanceTypeSearchRequest
	72,  // 138: proto.MachineImageService.Put:input_type -> proto.MachineImage
	68,  // 139: proto.MachineImageService.Delete:input_type -> proto.MachineImageDeleteRequest
	69,  // 140: proto.MachineImageService.Get:input_type -> proto.MachineImageGetRequest
	70,  // 141: proto.MachineImageService.Search:input_type -> proto.MachineImageSearchRequest
	70,  // 142: proto.MachineImageService.SearchStream:input_type -> proto.MachineImageSearchRequest
	75,  // 143: proto.VNetService.Put:input_type -> proto.VNetPutRequest
	76,  // 144: proto.VNetService.Get:input_type -> proto.VNetGetRequest
	77,  // 145: proto.VNetService.Search:input_type -> proto.VNetSearchRequest
	77,  // 146: proto.VNetService.SearchStream:input_type -> proto.VNetSearchRequest
	79,  // 147: proto.VNetService.Delete:input_type -> proto.VNetDeleteRequest
	132, // 148: proto.VNetService.Ping:input_type -> google.protobuf.Empty
	82,  // 149: proto.LoadBalancerService.Create:input_type -> proto.LoadBalancerCreateRequest
	83,  // 150: proto.LoadBalancerService.Get:input_type -> proto.LoadBalancerGetRequest
	84,  // 151: proto.LoadBalancerService.Search:input_type -> proto.LoadBalancerSearchRequest
	86,  // 152: proto.LoadBalancerService.Update:input_type -> proto.LoadBalancerUpdateRequest
	87,  // 153: proto.LoadBalancerService.Delete:input_type -> proto.LoadBalancerDeleteRequest
	132, // 154: proto.LoadBalancerService.Ping:input_type -> google.protobuf.Empty
	15,  // 155: proto.SshPublicKeyService.Create:output_type -> proto.SshPublicKey
	15,  // 156: proto.SshPublicKeyService.Get:output_type -> proto.SshPublicKey
	12,  // 157: proto.SshPublicKeyService.Search:output_type -> proto.SshPublicKeySearchResponse
	15,  // 158: proto.SshPublicKeyService.SearchStream:output_type -> proto.SshPublicKey
	132, // 159: proto.SshPublicKeyService.Delete:output_type -> google.protobuf.Empty
	132, // 160: proto.SshPublicKeyService.Ping:output_type -> google.protobuf.Empty
	28,  // 161: proto.InstanceService.Create:output_type -> proto.Instance
	28,  // 162: proto.InstanceService.Get:output_type -> proto.Instance
	25,  // 163: proto.InstanceService.Search:output_type -> proto.InstanceSearchResponse
	132, // 164: proto.InstanceService.Update:output_type -> google.protobuf.Empty
	132, // 165: proto.InstanceService.Delete:output_type -> google.protobuf.Empty
	132, // 166: proto.InstanceService.Ping:output_type -> google.protobuf.Empty
	51,  // 167: proto.InstanceGroupService.Create:output_type -> proto.InstanceGroup
	132, // 168: proto.InstanceGroupService.Update:output_type -> google.protobuf.Empty
	49,  // 169: proto.InstanceGroupService.Search:output_type -> proto.InstanceGroupSearchResponse
	132, // 170: proto.InstanceGroupService.Delete:output_type -> google.protobuf.Empty
	132, // 171: proto.InstanceGroupService.DeleteMember:output_type -> google.protobuf.Empty
	45,  // 172: proto.InstanceGroupService.ScaleUp:output_type -> proto.InstanceGroupScaleResponse
	132, // 173: proto.InstanceGroupService.Ping:output_type -> google.protobuf.Empty
	132, // 174: proto.InstanceTypeService.Put:output_type -> google.protobuf.Empty
	132, // 175: proto.InstanceTypeService.Delete:output_type -> google.protobuf.Empty
	62,  // 176: proto.InstanceTypeService.Get:output_type -> proto.InstanceType
	61,  // 177: proto.InstanceTypeService.Search:output_type -> proto.InstanceTypeSearchResponse
	62,  // 178: proto.InstanceTypeService.SearchStream:output_type -> proto.InstanceType
	132, // 179: proto.MachineImageService.Put:output_type -> google.protobuf.Empty
	132, // 180: proto.MachineImageService.Delete:output_type -> google.protobuf.Empty
	72,  // 181: proto.MachineImageService.Get:output_type -> proto.MachineImage
	71,  // 182: proto.MachineImageService.Search:output_type -> proto.MachineImageSearchResponse
	72,  // 183: proto.MachineImageService.SearchStream:output_type -> proto.MachineImage
	80,  // 184: proto.VNetService.Put:output_type -> proto.VNet
	80,  // 185: proto.VNetService.Get:output_type -> proto.VNet
	78,  // 186: proto.VNetService.Search:output_type -> proto.VNetSearchResponse
	80,  // 187: proto.VNetService.SearchStream:output_type -> proto.VNet
	132, // 188: proto.VNetService.Delete:output_type -> google.protobuf.Empty
	132, // 189: proto.VNetService.Ping:output_type -> google.protobuf.Empty
	88,  // 190: proto.LoadBalancerService.Create:output_type -> proto.LoadBalancer
	88,  // 191: proto.LoadBalancerService.Get:output_type -> proto.LoadBalancer
	85,  // 192: proto.LoadBalancerService.Search:output_type -> proto.LoadBalancerSearchResponse
	132, // 193: proto.LoadBalancerService.Update:output_type -> google.protobuf.Empty
	132, // 194: proto.LoadBalancerService.Delete:output_type -> google.protobuf.Empty
	132, // 195: proto.LoadBalancerService.Ping:output_type -> google.protobuf.Empty
	155, // [155:196] is the sub-list for method output_type
	114, // [114:155] is the sub-list for method input_type
	114, // [114:114] is the sub-list for extension type_name
	114, // [114:114] is the sub-list for extension extendee
	0,   // [0:114] is the sub-list for field type_name
}

func init() { file_compute_proto_init() }
func file_compute_proto_init() {
	if File_compute_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_compute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKeyCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKeyGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKeySearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKeySearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKeyUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKeyDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshPublicKeySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetadataCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetadataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetadataReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetadataSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologySpreadConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMetadataCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMetadataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMetadataReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMetadataSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInterfaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshProxyTunnelStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupMemberDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupScaleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupScaleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupScaleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupMetadataCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupMetadataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupMetadataReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupMetadataSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemorySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSpecUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerMetadataCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerMetadataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerMetadataReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerMetadataSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerListenerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerPoolStatusMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerConditionsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerConditionsListenerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeDeleteRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeGetRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceType_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageDeleteRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageGetRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImageSearchRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineImage_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetPutRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetGetRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetSearchRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNetDeleteRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNet_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_compute_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ResourceMetadataUpdate_Name)(nil),
		(*ResourceMetadataUpdate_ResourceId)(nil),
	}
	file_compute_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ResourceMetadataReference_Name)(nil),
		(*ResourceMetadataReference_ResourceId)(nil),
	}
	file_compute_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*InstanceMetadataUpdate_Name)(nil),
		(*InstanceMetadataUpdate_ResourceId)(nil),
	}
	file_compute_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*InstanceMetadataReference_Name)(nil),
		(*InstanceMetadataReference_ResourceId)(nil),
	}
	file_compute_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*InstanceGroupMemberDeleteRequest_InstanceName)(nil),
		(*InstanceGroupMemberDeleteRequest_InstanceResourceId)(nil),
	}
	file_compute_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*InstanceGroupMetadataReference_Name)(nil),
	}
	file_compute_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*LoadBalancerMetadataUpdate_Name)(nil),
		(*LoadBalancerMetadataUpdate_ResourceId)(nil),
	}
	file_compute_proto_msgTypes[87].OneofWrappers = []interface{}{
		(*LoadBalancerMetadataReference_Name)(nil),
		(*LoadBalancerMetadataReference_ResourceId)(nil),
	}
	file_compute_proto_msgTypes[113].OneofWrappers = []interface{}{
		(*VNetGetRequest_Metadata_Name)(nil),
		(*VNetGetRequest_Metadata_ResourceId)(nil),
	}
	file_compute_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*VNetDeleteRequest_Metadata_Name)(nil),
		(*VNetDeleteRequest_Metadata_ResourceId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compute_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   122,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_compute_proto_goTypes,
		DependencyIndexes: file_compute_proto_depIdxs,
		EnumInfos:         file_compute_proto_enumTypes,
		MessageInfos:      file_compute_proto_msgTypes,
	}.Build()
	File_compute_proto = out.File
	file_compute_proto_rawDesc = nil
	file_compute_proto_goTypes = nil
	file_compute_proto_depIdxs = nil
}
