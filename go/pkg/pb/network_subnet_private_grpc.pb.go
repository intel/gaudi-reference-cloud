// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: network_subnet_private.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubnetPrivateServiceClient is the client API for SubnetPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubnetPrivateServiceClient interface {
	// Create a Subnet.
	CreatePrivate(ctx context.Context, in *SubnetCreatePrivateRequest, opts ...grpc.CallOption) (*SubnetPrivate, error)
	// Update a Subnet.
	UpdatePrivate(ctx context.Context, in *SubnetUpdatePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a VPC record from DB
	GetPrivate(ctx context.Context, in *SubnetGetPrivateRequest, opts ...grpc.CallOption) (*SubnetPrivate, error)
	// List Subnets as a stream.
	// This returns all non-deleted vpcs as messages with WatchDeltaType=Updated,
	// followed by a single WatchDeltaType=Bookmark with the last-seen resourceVersion.
	SearchStreamPrivate(ctx context.Context, in *SubnetSearchStreamPrivateRequest, opts ...grpc.CallOption) (SubnetPrivateService_SearchStreamPrivateClient, error)
	// Return a stream of changes to vpcs using messages with WatchDeltaType=Updated or Deleted.
	// Messages with WatchDeltaType=Bookmark and the last-seen resourceVersion will be sent periodically.
	Watch(ctx context.Context, in *SubnetWatchRequest, opts ...grpc.CallOption) (SubnetPrivateService_WatchClient, error)
	// Update the resource status.
	UpdateStatus(ctx context.Context, in *SubnetUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PingPrivate always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type subnetPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubnetPrivateServiceClient(cc grpc.ClientConnInterface) SubnetPrivateServiceClient {
	return &subnetPrivateServiceClient{cc}
}

func (c *subnetPrivateServiceClient) CreatePrivate(ctx context.Context, in *SubnetCreatePrivateRequest, opts ...grpc.CallOption) (*SubnetPrivate, error) {
	out := new(SubnetPrivate)
	err := c.cc.Invoke(ctx, "/proto.SubnetPrivateService/CreatePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetPrivateServiceClient) UpdatePrivate(ctx context.Context, in *SubnetUpdatePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SubnetPrivateService/UpdatePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetPrivateServiceClient) GetPrivate(ctx context.Context, in *SubnetGetPrivateRequest, opts ...grpc.CallOption) (*SubnetPrivate, error) {
	out := new(SubnetPrivate)
	err := c.cc.Invoke(ctx, "/proto.SubnetPrivateService/GetPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetPrivateServiceClient) SearchStreamPrivate(ctx context.Context, in *SubnetSearchStreamPrivateRequest, opts ...grpc.CallOption) (SubnetPrivateService_SearchStreamPrivateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubnetPrivateService_ServiceDesc.Streams[0], "/proto.SubnetPrivateService/SearchStreamPrivate", opts...)
	if err != nil {
		return nil, err
	}
	x := &subnetPrivateServiceSearchStreamPrivateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubnetPrivateService_SearchStreamPrivateClient interface {
	Recv() (*SubnetWatchResponse, error)
	grpc.ClientStream
}

type subnetPrivateServiceSearchStreamPrivateClient struct {
	grpc.ClientStream
}

func (x *subnetPrivateServiceSearchStreamPrivateClient) Recv() (*SubnetWatchResponse, error) {
	m := new(SubnetWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subnetPrivateServiceClient) Watch(ctx context.Context, in *SubnetWatchRequest, opts ...grpc.CallOption) (SubnetPrivateService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubnetPrivateService_ServiceDesc.Streams[1], "/proto.SubnetPrivateService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &subnetPrivateServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubnetPrivateService_WatchClient interface {
	Recv() (*SubnetWatchResponse, error)
	grpc.ClientStream
}

type subnetPrivateServiceWatchClient struct {
	grpc.ClientStream
}

func (x *subnetPrivateServiceWatchClient) Recv() (*SubnetWatchResponse, error) {
	m := new(SubnetWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subnetPrivateServiceClient) UpdateStatus(ctx context.Context, in *SubnetUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SubnetPrivateService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SubnetPrivateService/PingPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubnetPrivateServiceServer is the server API for SubnetPrivateService service.
// All implementations must embed UnimplementedSubnetPrivateServiceServer
// for forward compatibility
type SubnetPrivateServiceServer interface {
	// Create a Subnet.
	CreatePrivate(context.Context, *SubnetCreatePrivateRequest) (*SubnetPrivate, error)
	// Update a Subnet.
	UpdatePrivate(context.Context, *SubnetUpdatePrivateRequest) (*emptypb.Empty, error)
	// Retrieve a VPC record from DB
	GetPrivate(context.Context, *SubnetGetPrivateRequest) (*SubnetPrivate, error)
	// List Subnets as a stream.
	// This returns all non-deleted vpcs as messages with WatchDeltaType=Updated,
	// followed by a single WatchDeltaType=Bookmark with the last-seen resourceVersion.
	SearchStreamPrivate(*SubnetSearchStreamPrivateRequest, SubnetPrivateService_SearchStreamPrivateServer) error
	// Return a stream of changes to vpcs using messages with WatchDeltaType=Updated or Deleted.
	// Messages with WatchDeltaType=Bookmark and the last-seen resourceVersion will be sent periodically.
	Watch(*SubnetWatchRequest, SubnetPrivateService_WatchServer) error
	// Update the resource status.
	UpdateStatus(context.Context, *SubnetUpdateStatusRequest) (*emptypb.Empty, error)
	// PingPrivate always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedSubnetPrivateServiceServer()
}

// UnimplementedSubnetPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubnetPrivateServiceServer struct {
}

func (UnimplementedSubnetPrivateServiceServer) CreatePrivate(context.Context, *SubnetCreatePrivateRequest) (*SubnetPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivate not implemented")
}
func (UnimplementedSubnetPrivateServiceServer) UpdatePrivate(context.Context, *SubnetUpdatePrivateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivate not implemented")
}
func (UnimplementedSubnetPrivateServiceServer) GetPrivate(context.Context, *SubnetGetPrivateRequest) (*SubnetPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivate not implemented")
}
func (UnimplementedSubnetPrivateServiceServer) SearchStreamPrivate(*SubnetSearchStreamPrivateRequest, SubnetPrivateService_SearchStreamPrivateServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchStreamPrivate not implemented")
}
func (UnimplementedSubnetPrivateServiceServer) Watch(*SubnetWatchRequest, SubnetPrivateService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedSubnetPrivateServiceServer) UpdateStatus(context.Context, *SubnetUpdateStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedSubnetPrivateServiceServer) PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPrivate not implemented")
}
func (UnimplementedSubnetPrivateServiceServer) mustEmbedUnimplementedSubnetPrivateServiceServer() {}

// UnsafeSubnetPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubnetPrivateServiceServer will
// result in compilation errors.
type UnsafeSubnetPrivateServiceServer interface {
	mustEmbedUnimplementedSubnetPrivateServiceServer()
}

func RegisterSubnetPrivateServiceServer(s grpc.ServiceRegistrar, srv SubnetPrivateServiceServer) {
	s.RegisterService(&SubnetPrivateService_ServiceDesc, srv)
}

func _SubnetPrivateService_CreatePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetCreatePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetPrivateServiceServer).CreatePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetPrivateService/CreatePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetPrivateServiceServer).CreatePrivate(ctx, req.(*SubnetCreatePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetPrivateService_UpdatePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetUpdatePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetPrivateServiceServer).UpdatePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetPrivateService/UpdatePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetPrivateServiceServer).UpdatePrivate(ctx, req.(*SubnetUpdatePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetPrivateService_GetPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetGetPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetPrivateServiceServer).GetPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetPrivateService/GetPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetPrivateServiceServer).GetPrivate(ctx, req.(*SubnetGetPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetPrivateService_SearchStreamPrivate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubnetSearchStreamPrivateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubnetPrivateServiceServer).SearchStreamPrivate(m, &subnetPrivateServiceSearchStreamPrivateServer{stream})
}

type SubnetPrivateService_SearchStreamPrivateServer interface {
	Send(*SubnetWatchResponse) error
	grpc.ServerStream
}

type subnetPrivateServiceSearchStreamPrivateServer struct {
	grpc.ServerStream
}

func (x *subnetPrivateServiceSearchStreamPrivateServer) Send(m *SubnetWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubnetPrivateService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubnetWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubnetPrivateServiceServer).Watch(m, &subnetPrivateServiceWatchServer{stream})
}

type SubnetPrivateService_WatchServer interface {
	Send(*SubnetWatchResponse) error
	grpc.ServerStream
}

type subnetPrivateServiceWatchServer struct {
	grpc.ServerStream
}

func (x *subnetPrivateServiceWatchServer) Send(m *SubnetWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubnetPrivateService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetPrivateServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetPrivateService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetPrivateServiceServer).UpdateStatus(ctx, req.(*SubnetUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetPrivateService_PingPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetPrivateServiceServer).PingPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubnetPrivateService/PingPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetPrivateServiceServer).PingPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SubnetPrivateService_ServiceDesc is the grpc.ServiceDesc for SubnetPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubnetPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SubnetPrivateService",
	HandlerType: (*SubnetPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrivate",
			Handler:    _SubnetPrivateService_CreatePrivate_Handler,
		},
		{
			MethodName: "UpdatePrivate",
			Handler:    _SubnetPrivateService_UpdatePrivate_Handler,
		},
		{
			MethodName: "GetPrivate",
			Handler:    _SubnetPrivateService_GetPrivate_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _SubnetPrivateService_UpdateStatus_Handler,
		},
		{
			MethodName: "PingPrivate",
			Handler:    _SubnetPrivateService_PingPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchStreamPrivate",
			Handler:       _SubnetPrivateService_SearchStreamPrivate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _SubnetPrivateService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network_subnet_private.proto",
}
