// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: storage_private.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesystemPrivateServiceClient is the client API for FilesystemPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemPrivateServiceClient interface {
	// Provision a new filesystem volume
	CreatePrivate(ctx context.Context, in *FilesystemCreateRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error)
	// Get the status of an filesystem.
	GetPrivate(ctx context.Context, in *FilesystemGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error)
	// Update the status of an filesystem.
	UpdatePrivate(ctx context.Context, in *FilesystemUpdateRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error)
	// Request deletion of an filesystem.
	DeletePrivate(ctx context.Context, in *FilesystemDeleteRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update the resource status.
	GetUserPrivate(ctx context.Context, in *FilesystemGetUserRequestPrivate, opts ...grpc.CallOption) (*FilesystemGetUserResponsePrivate, error)
	// Request user cedentials for a filesystem.
	CreateorGetUserPrivate(ctx context.Context, in *FilesystemGetUserRequestPrivate, opts ...grpc.CallOption) (*FilesystemGetUserResponsePrivate, error)
	// Delete vast user cedentials for a filesystem.
	DeleteUserPrivate(ctx context.Context, in *FilesystemDeleteUserRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// update Status
	UpdateStatus(ctx context.Context, in *FilesystemUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List Filesystem as a stream.
	// This returns all filesystem requests that are pending.
	SearchFilesystemRequests(ctx context.Context, in *FilesystemSearchStreamPrivateRequest, opts ...grpc.CallOption) (FilesystemPrivateService_SearchFilesystemRequestsClient, error)
	// Remove finalizer from an filesystem that was previously requested to be deleted.
	// After this returns, the record will no longer be visible to users or controllers.
	// Used by Filesystem Replicator.
	RemoveFinalizer(ctx context.Context, in *FilesystemRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type filesystemPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemPrivateServiceClient(cc grpc.ClientConnInterface) FilesystemPrivateServiceClient {
	return &filesystemPrivateServiceClient{cc}
}

func (c *filesystemPrivateServiceClient) CreatePrivate(ctx context.Context, in *FilesystemCreateRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error) {
	out := new(FilesystemPrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/CreatePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) GetPrivate(ctx context.Context, in *FilesystemGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error) {
	out := new(FilesystemPrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/GetPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) UpdatePrivate(ctx context.Context, in *FilesystemUpdateRequestPrivate, opts ...grpc.CallOption) (*FilesystemPrivate, error) {
	out := new(FilesystemPrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/UpdatePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) DeletePrivate(ctx context.Context, in *FilesystemDeleteRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/DeletePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) GetUserPrivate(ctx context.Context, in *FilesystemGetUserRequestPrivate, opts ...grpc.CallOption) (*FilesystemGetUserResponsePrivate, error) {
	out := new(FilesystemGetUserResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/GetUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) CreateorGetUserPrivate(ctx context.Context, in *FilesystemGetUserRequestPrivate, opts ...grpc.CallOption) (*FilesystemGetUserResponsePrivate, error) {
	out := new(FilesystemGetUserResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/CreateorGetUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) DeleteUserPrivate(ctx context.Context, in *FilesystemDeleteUserRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/DeleteUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) UpdateStatus(ctx context.Context, in *FilesystemUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) SearchFilesystemRequests(ctx context.Context, in *FilesystemSearchStreamPrivateRequest, opts ...grpc.CallOption) (FilesystemPrivateService_SearchFilesystemRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesystemPrivateService_ServiceDesc.Streams[0], "/proto.FilesystemPrivateService/SearchFilesystemRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemPrivateServiceSearchFilesystemRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesystemPrivateService_SearchFilesystemRequestsClient interface {
	Recv() (*FilesystemRequestResponse, error)
	grpc.ClientStream
}

type filesystemPrivateServiceSearchFilesystemRequestsClient struct {
	grpc.ClientStream
}

func (x *filesystemPrivateServiceSearchFilesystemRequestsClient) Recv() (*FilesystemRequestResponse, error) {
	m := new(FilesystemRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemPrivateServiceClient) RemoveFinalizer(ctx context.Context, in *FilesystemRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/RemoveFinalizer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemPrivateService/PingPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemPrivateServiceServer is the server API for FilesystemPrivateService service.
// All implementations must embed UnimplementedFilesystemPrivateServiceServer
// for forward compatibility
type FilesystemPrivateServiceServer interface {
	// Provision a new filesystem volume
	CreatePrivate(context.Context, *FilesystemCreateRequestPrivate) (*FilesystemPrivate, error)
	// Get the status of an filesystem.
	GetPrivate(context.Context, *FilesystemGetRequestPrivate) (*FilesystemPrivate, error)
	// Update the status of an filesystem.
	UpdatePrivate(context.Context, *FilesystemUpdateRequestPrivate) (*FilesystemPrivate, error)
	// Request deletion of an filesystem.
	DeletePrivate(context.Context, *FilesystemDeleteRequestPrivate) (*emptypb.Empty, error)
	// Update the resource status.
	GetUserPrivate(context.Context, *FilesystemGetUserRequestPrivate) (*FilesystemGetUserResponsePrivate, error)
	// Request user cedentials for a filesystem.
	CreateorGetUserPrivate(context.Context, *FilesystemGetUserRequestPrivate) (*FilesystemGetUserResponsePrivate, error)
	// Delete vast user cedentials for a filesystem.
	DeleteUserPrivate(context.Context, *FilesystemDeleteUserRequestPrivate) (*emptypb.Empty, error)
	// update Status
	UpdateStatus(context.Context, *FilesystemUpdateStatusRequest) (*emptypb.Empty, error)
	// List Filesystem as a stream.
	// This returns all filesystem requests that are pending.
	SearchFilesystemRequests(*FilesystemSearchStreamPrivateRequest, FilesystemPrivateService_SearchFilesystemRequestsServer) error
	// Remove finalizer from an filesystem that was previously requested to be deleted.
	// After this returns, the record will no longer be visible to users or controllers.
	// Used by Filesystem Replicator.
	RemoveFinalizer(context.Context, *FilesystemRemoveFinalizerRequest) (*emptypb.Empty, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedFilesystemPrivateServiceServer()
}

// UnimplementedFilesystemPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemPrivateServiceServer struct {
}

func (UnimplementedFilesystemPrivateServiceServer) CreatePrivate(context.Context, *FilesystemCreateRequestPrivate) (*FilesystemPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) GetPrivate(context.Context, *FilesystemGetRequestPrivate) (*FilesystemPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) UpdatePrivate(context.Context, *FilesystemUpdateRequestPrivate) (*FilesystemPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) DeletePrivate(context.Context, *FilesystemDeleteRequestPrivate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) GetUserPrivate(context.Context, *FilesystemGetUserRequestPrivate) (*FilesystemGetUserResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) CreateorGetUserPrivate(context.Context, *FilesystemGetUserRequestPrivate) (*FilesystemGetUserResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateorGetUserPrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) DeleteUserPrivate(context.Context, *FilesystemDeleteUserRequestPrivate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) UpdateStatus(context.Context, *FilesystemUpdateStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) SearchFilesystemRequests(*FilesystemSearchStreamPrivateRequest, FilesystemPrivateService_SearchFilesystemRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchFilesystemRequests not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) RemoveFinalizer(context.Context, *FilesystemRemoveFinalizerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFinalizer not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPrivate not implemented")
}
func (UnimplementedFilesystemPrivateServiceServer) mustEmbedUnimplementedFilesystemPrivateServiceServer() {
}

// UnsafeFilesystemPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemPrivateServiceServer will
// result in compilation errors.
type UnsafeFilesystemPrivateServiceServer interface {
	mustEmbedUnimplementedFilesystemPrivateServiceServer()
}

func RegisterFilesystemPrivateServiceServer(s grpc.ServiceRegistrar, srv FilesystemPrivateServiceServer) {
	s.RegisterService(&FilesystemPrivateService_ServiceDesc, srv)
}

func _FilesystemPrivateService_CreatePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemCreateRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).CreatePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/CreatePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).CreatePrivate(ctx, req.(*FilesystemCreateRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_GetPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemGetRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).GetPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/GetPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).GetPrivate(ctx, req.(*FilesystemGetRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_UpdatePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemUpdateRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).UpdatePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/UpdatePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).UpdatePrivate(ctx, req.(*FilesystemUpdateRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_DeletePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemDeleteRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).DeletePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/DeletePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).DeletePrivate(ctx, req.(*FilesystemDeleteRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_GetUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemGetUserRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).GetUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/GetUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).GetUserPrivate(ctx, req.(*FilesystemGetUserRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_CreateorGetUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemGetUserRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).CreateorGetUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/CreateorGetUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).CreateorGetUserPrivate(ctx, req.(*FilesystemGetUserRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_DeleteUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemDeleteUserRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).DeleteUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/DeleteUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).DeleteUserPrivate(ctx, req.(*FilesystemDeleteUserRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).UpdateStatus(ctx, req.(*FilesystemUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_SearchFilesystemRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilesystemSearchStreamPrivateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemPrivateServiceServer).SearchFilesystemRequests(m, &filesystemPrivateServiceSearchFilesystemRequestsServer{stream})
}

type FilesystemPrivateService_SearchFilesystemRequestsServer interface {
	Send(*FilesystemRequestResponse) error
	grpc.ServerStream
}

type filesystemPrivateServiceSearchFilesystemRequestsServer struct {
	grpc.ServerStream
}

func (x *filesystemPrivateServiceSearchFilesystemRequestsServer) Send(m *FilesystemRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesystemPrivateService_RemoveFinalizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemRemoveFinalizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).RemoveFinalizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/RemoveFinalizer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).RemoveFinalizer(ctx, req.(*FilesystemRemoveFinalizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemPrivateService_PingPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemPrivateServiceServer).PingPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemPrivateService/PingPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemPrivateServiceServer).PingPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesystemPrivateService_ServiceDesc is the grpc.ServiceDesc for FilesystemPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesystemPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilesystemPrivateService",
	HandlerType: (*FilesystemPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrivate",
			Handler:    _FilesystemPrivateService_CreatePrivate_Handler,
		},
		{
			MethodName: "GetPrivate",
			Handler:    _FilesystemPrivateService_GetPrivate_Handler,
		},
		{
			MethodName: "UpdatePrivate",
			Handler:    _FilesystemPrivateService_UpdatePrivate_Handler,
		},
		{
			MethodName: "DeletePrivate",
			Handler:    _FilesystemPrivateService_DeletePrivate_Handler,
		},
		{
			MethodName: "GetUserPrivate",
			Handler:    _FilesystemPrivateService_GetUserPrivate_Handler,
		},
		{
			MethodName: "CreateorGetUserPrivate",
			Handler:    _FilesystemPrivateService_CreateorGetUserPrivate_Handler,
		},
		{
			MethodName: "DeleteUserPrivate",
			Handler:    _FilesystemPrivateService_DeleteUserPrivate_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _FilesystemPrivateService_UpdateStatus_Handler,
		},
		{
			MethodName: "RemoveFinalizer",
			Handler:    _FilesystemPrivateService_RemoveFinalizer_Handler,
		},
		{
			MethodName: "PingPrivate",
			Handler:    _FilesystemPrivateService_PingPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchFilesystemRequests",
			Handler:       _FilesystemPrivateService_SearchFilesystemRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage_private.proto",
}

// FilesystemSchedulerPrivateServiceClient is the client API for FilesystemSchedulerPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemSchedulerPrivateServiceClient interface {
	// Schedule filesystem to a cluster
	ScheduleFile(ctx context.Context, in *FilesystemScheduleRequest, opts ...grpc.CallOption) (*FilesystemScheduleResponse, error)
	// Schedule filesystem to a cluster
	ScheduleBucket(ctx context.Context, in *BucketScheduleRequest, opts ...grpc.CallOption) (*BucketScheduleResponse, error)
	ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (FilesystemSchedulerPrivateService_ListClustersClient, error)
	// List Filesystems in Org
	ListFilesystemInOrgs(ctx context.Context, in *FilesystemInOrgGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemsInOrgListResponsePrivate, error)
	ListFilesystemOrgs(ctx context.Context, in *FilesystemOrgsGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsResponsePrivate, error)
	IsOrgExists(ctx context.Context, in *FilesystemOrgsIsExistsRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsIsExistsResponsePrivate, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type filesystemSchedulerPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemSchedulerPrivateServiceClient(cc grpc.ClientConnInterface) FilesystemSchedulerPrivateServiceClient {
	return &filesystemSchedulerPrivateServiceClient{cc}
}

func (c *filesystemSchedulerPrivateServiceClient) ScheduleFile(ctx context.Context, in *FilesystemScheduleRequest, opts ...grpc.CallOption) (*FilesystemScheduleResponse, error) {
	out := new(FilesystemScheduleResponse)
	err := c.cc.Invoke(ctx, "/proto.FilesystemSchedulerPrivateService/ScheduleFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemSchedulerPrivateServiceClient) ScheduleBucket(ctx context.Context, in *BucketScheduleRequest, opts ...grpc.CallOption) (*BucketScheduleResponse, error) {
	out := new(BucketScheduleResponse)
	err := c.cc.Invoke(ctx, "/proto.FilesystemSchedulerPrivateService/ScheduleBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemSchedulerPrivateServiceClient) ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (FilesystemSchedulerPrivateService_ListClustersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesystemSchedulerPrivateService_ServiceDesc.Streams[0], "/proto.FilesystemSchedulerPrivateService/ListClusters", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemSchedulerPrivateServiceListClustersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesystemSchedulerPrivateService_ListClustersClient interface {
	Recv() (*FilesystemStorageClusters, error)
	grpc.ClientStream
}

type filesystemSchedulerPrivateServiceListClustersClient struct {
	grpc.ClientStream
}

func (x *filesystemSchedulerPrivateServiceListClustersClient) Recv() (*FilesystemStorageClusters, error) {
	m := new(FilesystemStorageClusters)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemSchedulerPrivateServiceClient) ListFilesystemInOrgs(ctx context.Context, in *FilesystemInOrgGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemsInOrgListResponsePrivate, error) {
	out := new(FilesystemsInOrgListResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemSchedulerPrivateService/ListFilesystemInOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemSchedulerPrivateServiceClient) ListFilesystemOrgs(ctx context.Context, in *FilesystemOrgsGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsResponsePrivate, error) {
	out := new(FilesystemOrgsResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemSchedulerPrivateService/ListFilesystemOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemSchedulerPrivateServiceClient) IsOrgExists(ctx context.Context, in *FilesystemOrgsIsExistsRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsIsExistsResponsePrivate, error) {
	out := new(FilesystemOrgsIsExistsResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemSchedulerPrivateService/IsOrgExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemSchedulerPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemSchedulerPrivateService/PingPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemSchedulerPrivateServiceServer is the server API for FilesystemSchedulerPrivateService service.
// All implementations must embed UnimplementedFilesystemSchedulerPrivateServiceServer
// for forward compatibility
type FilesystemSchedulerPrivateServiceServer interface {
	// Schedule filesystem to a cluster
	ScheduleFile(context.Context, *FilesystemScheduleRequest) (*FilesystemScheduleResponse, error)
	// Schedule filesystem to a cluster
	ScheduleBucket(context.Context, *BucketScheduleRequest) (*BucketScheduleResponse, error)
	ListClusters(*ListClusterRequest, FilesystemSchedulerPrivateService_ListClustersServer) error
	// List Filesystems in Org
	ListFilesystemInOrgs(context.Context, *FilesystemInOrgGetRequestPrivate) (*FilesystemsInOrgListResponsePrivate, error)
	ListFilesystemOrgs(context.Context, *FilesystemOrgsGetRequestPrivate) (*FilesystemOrgsResponsePrivate, error)
	IsOrgExists(context.Context, *FilesystemOrgsIsExistsRequestPrivate) (*FilesystemOrgsIsExistsResponsePrivate, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer()
}

// UnimplementedFilesystemSchedulerPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemSchedulerPrivateServiceServer struct {
}

func (UnimplementedFilesystemSchedulerPrivateServiceServer) ScheduleFile(context.Context, *FilesystemScheduleRequest) (*FilesystemScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleFile not implemented")
}
func (UnimplementedFilesystemSchedulerPrivateServiceServer) ScheduleBucket(context.Context, *BucketScheduleRequest) (*BucketScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleBucket not implemented")
}
func (UnimplementedFilesystemSchedulerPrivateServiceServer) ListClusters(*ListClusterRequest, FilesystemSchedulerPrivateService_ListClustersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedFilesystemSchedulerPrivateServiceServer) ListFilesystemInOrgs(context.Context, *FilesystemInOrgGetRequestPrivate) (*FilesystemsInOrgListResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesystemInOrgs not implemented")
}
func (UnimplementedFilesystemSchedulerPrivateServiceServer) ListFilesystemOrgs(context.Context, *FilesystemOrgsGetRequestPrivate) (*FilesystemOrgsResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesystemOrgs not implemented")
}
func (UnimplementedFilesystemSchedulerPrivateServiceServer) IsOrgExists(context.Context, *FilesystemOrgsIsExistsRequestPrivate) (*FilesystemOrgsIsExistsResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOrgExists not implemented")
}
func (UnimplementedFilesystemSchedulerPrivateServiceServer) PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPrivate not implemented")
}
func (UnimplementedFilesystemSchedulerPrivateServiceServer) mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer() {
}

// UnsafeFilesystemSchedulerPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemSchedulerPrivateServiceServer will
// result in compilation errors.
type UnsafeFilesystemSchedulerPrivateServiceServer interface {
	mustEmbedUnimplementedFilesystemSchedulerPrivateServiceServer()
}

func RegisterFilesystemSchedulerPrivateServiceServer(s grpc.ServiceRegistrar, srv FilesystemSchedulerPrivateServiceServer) {
	s.RegisterService(&FilesystemSchedulerPrivateService_ServiceDesc, srv)
}

func _FilesystemSchedulerPrivateService_ScheduleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemSchedulerPrivateServiceServer).ScheduleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemSchedulerPrivateService/ScheduleFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemSchedulerPrivateServiceServer).ScheduleFile(ctx, req.(*FilesystemScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemSchedulerPrivateService_ScheduleBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemSchedulerPrivateServiceServer).ScheduleBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemSchedulerPrivateService/ScheduleBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemSchedulerPrivateServiceServer).ScheduleBucket(ctx, req.(*BucketScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemSchedulerPrivateService_ListClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListClusterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemSchedulerPrivateServiceServer).ListClusters(m, &filesystemSchedulerPrivateServiceListClustersServer{stream})
}

type FilesystemSchedulerPrivateService_ListClustersServer interface {
	Send(*FilesystemStorageClusters) error
	grpc.ServerStream
}

type filesystemSchedulerPrivateServiceListClustersServer struct {
	grpc.ServerStream
}

func (x *filesystemSchedulerPrivateServiceListClustersServer) Send(m *FilesystemStorageClusters) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesystemSchedulerPrivateService_ListFilesystemInOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemInOrgGetRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemSchedulerPrivateServiceServer).ListFilesystemInOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemSchedulerPrivateService/ListFilesystemInOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemSchedulerPrivateServiceServer).ListFilesystemInOrgs(ctx, req.(*FilesystemInOrgGetRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemSchedulerPrivateService_ListFilesystemOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemOrgsGetRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemSchedulerPrivateServiceServer).ListFilesystemOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemSchedulerPrivateService/ListFilesystemOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemSchedulerPrivateServiceServer).ListFilesystemOrgs(ctx, req.(*FilesystemOrgsGetRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemSchedulerPrivateService_IsOrgExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemOrgsIsExistsRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemSchedulerPrivateServiceServer).IsOrgExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemSchedulerPrivateService/IsOrgExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemSchedulerPrivateServiceServer).IsOrgExists(ctx, req.(*FilesystemOrgsIsExistsRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemSchedulerPrivateService_PingPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemSchedulerPrivateServiceServer).PingPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemSchedulerPrivateService/PingPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemSchedulerPrivateServiceServer).PingPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesystemSchedulerPrivateService_ServiceDesc is the grpc.ServiceDesc for FilesystemSchedulerPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesystemSchedulerPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilesystemSchedulerPrivateService",
	HandlerType: (*FilesystemSchedulerPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleFile",
			Handler:    _FilesystemSchedulerPrivateService_ScheduleFile_Handler,
		},
		{
			MethodName: "ScheduleBucket",
			Handler:    _FilesystemSchedulerPrivateService_ScheduleBucket_Handler,
		},
		{
			MethodName: "ListFilesystemInOrgs",
			Handler:    _FilesystemSchedulerPrivateService_ListFilesystemInOrgs_Handler,
		},
		{
			MethodName: "ListFilesystemOrgs",
			Handler:    _FilesystemSchedulerPrivateService_ListFilesystemOrgs_Handler,
		},
		{
			MethodName: "IsOrgExists",
			Handler:    _FilesystemSchedulerPrivateService_IsOrgExists_Handler,
		},
		{
			MethodName: "PingPrivate",
			Handler:    _FilesystemSchedulerPrivateService_PingPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListClusters",
			Handler:       _FilesystemSchedulerPrivateService_ListClusters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage_private.proto",
}

// FilesystemUserPrivateServiceClient is the client API for FilesystemUserPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemUserPrivateServiceClient interface {
	// Create or Update filesystem user creds
	CreateOrUpdate(ctx context.Context, in *FilesystemUserCreateOrUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingFileUserPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateOrGet(ctx context.Context, in *FilesystemUserCreateOrGetRequest, opts ...grpc.CallOption) (*FilesystemUserResponsePrivate, error)
	Delete(ctx context.Context, in *FilesystemDeleteUserRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type filesystemUserPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemUserPrivateServiceClient(cc grpc.ClientConnInterface) FilesystemUserPrivateServiceClient {
	return &filesystemUserPrivateServiceClient{cc}
}

func (c *filesystemUserPrivateServiceClient) CreateOrUpdate(ctx context.Context, in *FilesystemUserCreateOrUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemUserPrivateService/CreateOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemUserPrivateServiceClient) PingFileUserPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemUserPrivateService/PingFileUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemUserPrivateServiceClient) CreateOrGet(ctx context.Context, in *FilesystemUserCreateOrGetRequest, opts ...grpc.CallOption) (*FilesystemUserResponsePrivate, error) {
	out := new(FilesystemUserResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemUserPrivateService/CreateOrGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemUserPrivateServiceClient) Delete(ctx context.Context, in *FilesystemDeleteUserRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemUserPrivateService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemUserPrivateServiceServer is the server API for FilesystemUserPrivateService service.
// All implementations must embed UnimplementedFilesystemUserPrivateServiceServer
// for forward compatibility
type FilesystemUserPrivateServiceServer interface {
	// Create or Update filesystem user creds
	CreateOrUpdate(context.Context, *FilesystemUserCreateOrUpdateRequest) (*emptypb.Empty, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingFileUserPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateOrGet(context.Context, *FilesystemUserCreateOrGetRequest) (*FilesystemUserResponsePrivate, error)
	Delete(context.Context, *FilesystemDeleteUserRequestPrivate) (*emptypb.Empty, error)
	mustEmbedUnimplementedFilesystemUserPrivateServiceServer()
}

// UnimplementedFilesystemUserPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemUserPrivateServiceServer struct {
}

func (UnimplementedFilesystemUserPrivateServiceServer) CreateOrUpdate(context.Context, *FilesystemUserCreateOrUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdate not implemented")
}
func (UnimplementedFilesystemUserPrivateServiceServer) PingFileUserPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingFileUserPrivate not implemented")
}
func (UnimplementedFilesystemUserPrivateServiceServer) CreateOrGet(context.Context, *FilesystemUserCreateOrGetRequest) (*FilesystemUserResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrGet not implemented")
}
func (UnimplementedFilesystemUserPrivateServiceServer) Delete(context.Context, *FilesystemDeleteUserRequestPrivate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFilesystemUserPrivateServiceServer) mustEmbedUnimplementedFilesystemUserPrivateServiceServer() {
}

// UnsafeFilesystemUserPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemUserPrivateServiceServer will
// result in compilation errors.
type UnsafeFilesystemUserPrivateServiceServer interface {
	mustEmbedUnimplementedFilesystemUserPrivateServiceServer()
}

func RegisterFilesystemUserPrivateServiceServer(s grpc.ServiceRegistrar, srv FilesystemUserPrivateServiceServer) {
	s.RegisterService(&FilesystemUserPrivateService_ServiceDesc, srv)
}

func _FilesystemUserPrivateService_CreateOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemUserCreateOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemUserPrivateServiceServer).CreateOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemUserPrivateService/CreateOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemUserPrivateServiceServer).CreateOrUpdate(ctx, req.(*FilesystemUserCreateOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemUserPrivateService_PingFileUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemUserPrivateServiceServer).PingFileUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemUserPrivateService/PingFileUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemUserPrivateServiceServer).PingFileUserPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemUserPrivateService_CreateOrGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemUserCreateOrGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemUserPrivateServiceServer).CreateOrGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemUserPrivateService/CreateOrGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemUserPrivateServiceServer).CreateOrGet(ctx, req.(*FilesystemUserCreateOrGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemUserPrivateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemDeleteUserRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemUserPrivateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemUserPrivateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemUserPrivateServiceServer).Delete(ctx, req.(*FilesystemDeleteUserRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesystemUserPrivateService_ServiceDesc is the grpc.ServiceDesc for FilesystemUserPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesystemUserPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilesystemUserPrivateService",
	HandlerType: (*FilesystemUserPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdate",
			Handler:    _FilesystemUserPrivateService_CreateOrUpdate_Handler,
		},
		{
			MethodName: "PingFileUserPrivate",
			Handler:    _FilesystemUserPrivateService_PingFileUserPrivate_Handler,
		},
		{
			MethodName: "CreateOrGet",
			Handler:    _FilesystemUserPrivateService_CreateOrGet_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FilesystemUserPrivateService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_private.proto",
}

// FilesystemStorageClusterPrivateServiceClient is the client API for FilesystemStorageClusterPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemStorageClusterPrivateServiceClient interface {
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error)
	DeRegisterAgent(ctx context.Context, in *DeRegisterAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegisteredAgent(ctx context.Context, in *GetRegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error)
	ListRegisteredAgents(ctx context.Context, in *ListRegisteredAgentRequest, opts ...grpc.CallOption) (FilesystemStorageClusterPrivateService_ListRegisteredAgentsClient, error)
	ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (FilesystemStorageClusterPrivateService_ListClustersClient, error)
	PingFilesystemClusterPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type filesystemStorageClusterPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemStorageClusterPrivateServiceClient(cc grpc.ClientConnInterface) FilesystemStorageClusterPrivateServiceClient {
	return &filesystemStorageClusterPrivateServiceClient{cc}
}

func (c *filesystemStorageClusterPrivateServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	out := new(FilesystemAgent)
	err := c.cc.Invoke(ctx, "/proto.FilesystemStorageClusterPrivateService/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemStorageClusterPrivateServiceClient) DeRegisterAgent(ctx context.Context, in *DeRegisterAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemStorageClusterPrivateService/DeRegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemStorageClusterPrivateServiceClient) GetRegisteredAgent(ctx context.Context, in *GetRegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	out := new(FilesystemAgent)
	err := c.cc.Invoke(ctx, "/proto.FilesystemStorageClusterPrivateService/GetRegisteredAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemStorageClusterPrivateServiceClient) ListRegisteredAgents(ctx context.Context, in *ListRegisteredAgentRequest, opts ...grpc.CallOption) (FilesystemStorageClusterPrivateService_ListRegisteredAgentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesystemStorageClusterPrivateService_ServiceDesc.Streams[0], "/proto.FilesystemStorageClusterPrivateService/ListRegisteredAgents", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemStorageClusterPrivateServiceListRegisteredAgentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesystemStorageClusterPrivateService_ListRegisteredAgentsClient interface {
	Recv() (*FilesystemAgent, error)
	grpc.ClientStream
}

type filesystemStorageClusterPrivateServiceListRegisteredAgentsClient struct {
	grpc.ClientStream
}

func (x *filesystemStorageClusterPrivateServiceListRegisteredAgentsClient) Recv() (*FilesystemAgent, error) {
	m := new(FilesystemAgent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemStorageClusterPrivateServiceClient) ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (FilesystemStorageClusterPrivateService_ListClustersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesystemStorageClusterPrivateService_ServiceDesc.Streams[1], "/proto.FilesystemStorageClusterPrivateService/ListClusters", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemStorageClusterPrivateServiceListClustersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesystemStorageClusterPrivateService_ListClustersClient interface {
	Recv() (*FilesystemStorageClusters, error)
	grpc.ClientStream
}

type filesystemStorageClusterPrivateServiceListClustersClient struct {
	grpc.ClientStream
}

func (x *filesystemStorageClusterPrivateServiceListClustersClient) Recv() (*FilesystemStorageClusters, error) {
	m := new(FilesystemStorageClusters)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemStorageClusterPrivateServiceClient) PingFilesystemClusterPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemStorageClusterPrivateService/PingFilesystemClusterPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemStorageClusterPrivateServiceServer is the server API for FilesystemStorageClusterPrivateService service.
// All implementations must embed UnimplementedFilesystemStorageClusterPrivateServiceServer
// for forward compatibility
type FilesystemStorageClusterPrivateServiceServer interface {
	RegisterAgent(context.Context, *RegisterAgentRequest) (*FilesystemAgent, error)
	DeRegisterAgent(context.Context, *DeRegisterAgentRequest) (*emptypb.Empty, error)
	GetRegisteredAgent(context.Context, *GetRegisterAgentRequest) (*FilesystemAgent, error)
	ListRegisteredAgents(*ListRegisteredAgentRequest, FilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) error
	ListClusters(*ListClusterRequest, FilesystemStorageClusterPrivateService_ListClustersServer) error
	PingFilesystemClusterPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer()
}

// UnimplementedFilesystemStorageClusterPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemStorageClusterPrivateServiceServer struct {
}

func (UnimplementedFilesystemStorageClusterPrivateServiceServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*FilesystemAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedFilesystemStorageClusterPrivateServiceServer) DeRegisterAgent(context.Context, *DeRegisterAgentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterAgent not implemented")
}
func (UnimplementedFilesystemStorageClusterPrivateServiceServer) GetRegisteredAgent(context.Context, *GetRegisterAgentRequest) (*FilesystemAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredAgent not implemented")
}
func (UnimplementedFilesystemStorageClusterPrivateServiceServer) ListRegisteredAgents(*ListRegisteredAgentRequest, FilesystemStorageClusterPrivateService_ListRegisteredAgentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRegisteredAgents not implemented")
}
func (UnimplementedFilesystemStorageClusterPrivateServiceServer) ListClusters(*ListClusterRequest, FilesystemStorageClusterPrivateService_ListClustersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedFilesystemStorageClusterPrivateServiceServer) PingFilesystemClusterPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingFilesystemClusterPrivate not implemented")
}
func (UnimplementedFilesystemStorageClusterPrivateServiceServer) mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer() {
}

// UnsafeFilesystemStorageClusterPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemStorageClusterPrivateServiceServer will
// result in compilation errors.
type UnsafeFilesystemStorageClusterPrivateServiceServer interface {
	mustEmbedUnimplementedFilesystemStorageClusterPrivateServiceServer()
}

func RegisterFilesystemStorageClusterPrivateServiceServer(s grpc.ServiceRegistrar, srv FilesystemStorageClusterPrivateServiceServer) {
	s.RegisterService(&FilesystemStorageClusterPrivateService_ServiceDesc, srv)
}

func _FilesystemStorageClusterPrivateService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemStorageClusterPrivateServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemStorageClusterPrivateService/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemStorageClusterPrivateServiceServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemStorageClusterPrivateService_DeRegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemStorageClusterPrivateServiceServer).DeRegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemStorageClusterPrivateService/DeRegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemStorageClusterPrivateServiceServer).DeRegisterAgent(ctx, req.(*DeRegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemStorageClusterPrivateService_GetRegisteredAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemStorageClusterPrivateServiceServer).GetRegisteredAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemStorageClusterPrivateService/GetRegisteredAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemStorageClusterPrivateServiceServer).GetRegisteredAgent(ctx, req.(*GetRegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemStorageClusterPrivateService_ListRegisteredAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRegisteredAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemStorageClusterPrivateServiceServer).ListRegisteredAgents(m, &filesystemStorageClusterPrivateServiceListRegisteredAgentsServer{stream})
}

type FilesystemStorageClusterPrivateService_ListRegisteredAgentsServer interface {
	Send(*FilesystemAgent) error
	grpc.ServerStream
}

type filesystemStorageClusterPrivateServiceListRegisteredAgentsServer struct {
	grpc.ServerStream
}

func (x *filesystemStorageClusterPrivateServiceListRegisteredAgentsServer) Send(m *FilesystemAgent) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesystemStorageClusterPrivateService_ListClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListClusterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemStorageClusterPrivateServiceServer).ListClusters(m, &filesystemStorageClusterPrivateServiceListClustersServer{stream})
}

type FilesystemStorageClusterPrivateService_ListClustersServer interface {
	Send(*FilesystemStorageClusters) error
	grpc.ServerStream
}

type filesystemStorageClusterPrivateServiceListClustersServer struct {
	grpc.ServerStream
}

func (x *filesystemStorageClusterPrivateServiceListClustersServer) Send(m *FilesystemStorageClusters) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesystemStorageClusterPrivateService_PingFilesystemClusterPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemStorageClusterPrivateServiceServer).PingFilesystemClusterPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemStorageClusterPrivateService/PingFilesystemClusterPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemStorageClusterPrivateServiceServer).PingFilesystemClusterPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesystemStorageClusterPrivateService_ServiceDesc is the grpc.ServiceDesc for FilesystemStorageClusterPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesystemStorageClusterPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilesystemStorageClusterPrivateService",
	HandlerType: (*FilesystemStorageClusterPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _FilesystemStorageClusterPrivateService_RegisterAgent_Handler,
		},
		{
			MethodName: "DeRegisterAgent",
			Handler:    _FilesystemStorageClusterPrivateService_DeRegisterAgent_Handler,
		},
		{
			MethodName: "GetRegisteredAgent",
			Handler:    _FilesystemStorageClusterPrivateService_GetRegisteredAgent_Handler,
		},
		{
			MethodName: "PingFilesystemClusterPrivate",
			Handler:    _FilesystemStorageClusterPrivateService_PingFilesystemClusterPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRegisteredAgents",
			Handler:       _FilesystemStorageClusterPrivateService_ListRegisteredAgents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListClusters",
			Handler:       _FilesystemStorageClusterPrivateService_ListClusters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage_private.proto",
}

// WekaStatefulAgentPrivateServiceClient is the client API for WekaStatefulAgentPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WekaStatefulAgentPrivateServiceClient interface {
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error)
	DeRegisterAgent(ctx context.Context, in *DeRegisterAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegisteredAgent(ctx context.Context, in *GetRegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error)
	ListRegisteredAgents(ctx context.Context, in *ListRegisteredAgentRequest, opts ...grpc.CallOption) (WekaStatefulAgentPrivateService_ListRegisteredAgentsClient, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingWekaStatefulAgentPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type wekaStatefulAgentPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWekaStatefulAgentPrivateServiceClient(cc grpc.ClientConnInterface) WekaStatefulAgentPrivateServiceClient {
	return &wekaStatefulAgentPrivateServiceClient{cc}
}

func (c *wekaStatefulAgentPrivateServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	out := new(FilesystemAgent)
	err := c.cc.Invoke(ctx, "/proto.WekaStatefulAgentPrivateService/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wekaStatefulAgentPrivateServiceClient) DeRegisterAgent(ctx context.Context, in *DeRegisterAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.WekaStatefulAgentPrivateService/DeRegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wekaStatefulAgentPrivateServiceClient) GetRegisteredAgent(ctx context.Context, in *GetRegisterAgentRequest, opts ...grpc.CallOption) (*FilesystemAgent, error) {
	out := new(FilesystemAgent)
	err := c.cc.Invoke(ctx, "/proto.WekaStatefulAgentPrivateService/GetRegisteredAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wekaStatefulAgentPrivateServiceClient) ListRegisteredAgents(ctx context.Context, in *ListRegisteredAgentRequest, opts ...grpc.CallOption) (WekaStatefulAgentPrivateService_ListRegisteredAgentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WekaStatefulAgentPrivateService_ServiceDesc.Streams[0], "/proto.WekaStatefulAgentPrivateService/ListRegisteredAgents", opts...)
	if err != nil {
		return nil, err
	}
	x := &wekaStatefulAgentPrivateServiceListRegisteredAgentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WekaStatefulAgentPrivateService_ListRegisteredAgentsClient interface {
	Recv() (*FilesystemAgent, error)
	grpc.ClientStream
}

type wekaStatefulAgentPrivateServiceListRegisteredAgentsClient struct {
	grpc.ClientStream
}

func (x *wekaStatefulAgentPrivateServiceListRegisteredAgentsClient) Recv() (*FilesystemAgent, error) {
	m := new(FilesystemAgent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wekaStatefulAgentPrivateServiceClient) PingWekaStatefulAgentPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.WekaStatefulAgentPrivateService/PingWekaStatefulAgentPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WekaStatefulAgentPrivateServiceServer is the server API for WekaStatefulAgentPrivateService service.
// All implementations must embed UnimplementedWekaStatefulAgentPrivateServiceServer
// for forward compatibility
type WekaStatefulAgentPrivateServiceServer interface {
	RegisterAgent(context.Context, *RegisterAgentRequest) (*FilesystemAgent, error)
	DeRegisterAgent(context.Context, *DeRegisterAgentRequest) (*emptypb.Empty, error)
	GetRegisteredAgent(context.Context, *GetRegisterAgentRequest) (*FilesystemAgent, error)
	ListRegisteredAgents(*ListRegisteredAgentRequest, WekaStatefulAgentPrivateService_ListRegisteredAgentsServer) error
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingWekaStatefulAgentPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer()
}

// UnimplementedWekaStatefulAgentPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWekaStatefulAgentPrivateServiceServer struct {
}

func (UnimplementedWekaStatefulAgentPrivateServiceServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*FilesystemAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedWekaStatefulAgentPrivateServiceServer) DeRegisterAgent(context.Context, *DeRegisterAgentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterAgent not implemented")
}
func (UnimplementedWekaStatefulAgentPrivateServiceServer) GetRegisteredAgent(context.Context, *GetRegisterAgentRequest) (*FilesystemAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredAgent not implemented")
}
func (UnimplementedWekaStatefulAgentPrivateServiceServer) ListRegisteredAgents(*ListRegisteredAgentRequest, WekaStatefulAgentPrivateService_ListRegisteredAgentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRegisteredAgents not implemented")
}
func (UnimplementedWekaStatefulAgentPrivateServiceServer) PingWekaStatefulAgentPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingWekaStatefulAgentPrivate not implemented")
}
func (UnimplementedWekaStatefulAgentPrivateServiceServer) mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer() {
}

// UnsafeWekaStatefulAgentPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WekaStatefulAgentPrivateServiceServer will
// result in compilation errors.
type UnsafeWekaStatefulAgentPrivateServiceServer interface {
	mustEmbedUnimplementedWekaStatefulAgentPrivateServiceServer()
}

func RegisterWekaStatefulAgentPrivateServiceServer(s grpc.ServiceRegistrar, srv WekaStatefulAgentPrivateServiceServer) {
	s.RegisterService(&WekaStatefulAgentPrivateService_ServiceDesc, srv)
}

func _WekaStatefulAgentPrivateService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WekaStatefulAgentPrivateServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WekaStatefulAgentPrivateService/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WekaStatefulAgentPrivateServiceServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WekaStatefulAgentPrivateService_DeRegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WekaStatefulAgentPrivateServiceServer).DeRegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WekaStatefulAgentPrivateService/DeRegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WekaStatefulAgentPrivateServiceServer).DeRegisterAgent(ctx, req.(*DeRegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WekaStatefulAgentPrivateService_GetRegisteredAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WekaStatefulAgentPrivateServiceServer).GetRegisteredAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WekaStatefulAgentPrivateService/GetRegisteredAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WekaStatefulAgentPrivateServiceServer).GetRegisteredAgent(ctx, req.(*GetRegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WekaStatefulAgentPrivateService_ListRegisteredAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRegisteredAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WekaStatefulAgentPrivateServiceServer).ListRegisteredAgents(m, &wekaStatefulAgentPrivateServiceListRegisteredAgentsServer{stream})
}

type WekaStatefulAgentPrivateService_ListRegisteredAgentsServer interface {
	Send(*FilesystemAgent) error
	grpc.ServerStream
}

type wekaStatefulAgentPrivateServiceListRegisteredAgentsServer struct {
	grpc.ServerStream
}

func (x *wekaStatefulAgentPrivateServiceListRegisteredAgentsServer) Send(m *FilesystemAgent) error {
	return x.ServerStream.SendMsg(m)
}

func _WekaStatefulAgentPrivateService_PingWekaStatefulAgentPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WekaStatefulAgentPrivateServiceServer).PingWekaStatefulAgentPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WekaStatefulAgentPrivateService/PingWekaStatefulAgentPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WekaStatefulAgentPrivateServiceServer).PingWekaStatefulAgentPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WekaStatefulAgentPrivateService_ServiceDesc is the grpc.ServiceDesc for WekaStatefulAgentPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WekaStatefulAgentPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WekaStatefulAgentPrivateService",
	HandlerType: (*WekaStatefulAgentPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _WekaStatefulAgentPrivateService_RegisterAgent_Handler,
		},
		{
			MethodName: "DeRegisterAgent",
			Handler:    _WekaStatefulAgentPrivateService_DeRegisterAgent_Handler,
		},
		{
			MethodName: "GetRegisteredAgent",
			Handler:    _WekaStatefulAgentPrivateService_GetRegisteredAgent_Handler,
		},
		{
			MethodName: "PingWekaStatefulAgentPrivate",
			Handler:    _WekaStatefulAgentPrivateService_PingWekaStatefulAgentPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRegisteredAgents",
			Handler:       _WekaStatefulAgentPrivateService_ListRegisteredAgents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage_private.proto",
}

// BucketUserPrivateServiceClient is the client API for BucketUserPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketUserPrivateServiceClient interface {
	CreateBucketUser(ctx context.Context, in *CreateBucketUserParams, opts ...grpc.CallOption) (*BucketPrincipal, error)
	UpdateBucketUserPolicy(ctx context.Context, in *UpdateBucketUserPolicyParams, opts ...grpc.CallOption) (*BucketPrincipal, error)
	UpdateBucketUserCredentials(ctx context.Context, in *UpdateBucketUserCredsParams, opts ...grpc.CallOption) (*BucketPrincipal, error)
	DeleteBucketUser(ctx context.Context, in *DeleteBucketUserParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBucketCapacity(ctx context.Context, in *BucketFilter, opts ...grpc.CallOption) (*BucketCapacity, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingBucketUserPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bucketUserPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketUserPrivateServiceClient(cc grpc.ClientConnInterface) BucketUserPrivateServiceClient {
	return &bucketUserPrivateServiceClient{cc}
}

func (c *bucketUserPrivateServiceClient) CreateBucketUser(ctx context.Context, in *CreateBucketUserParams, opts ...grpc.CallOption) (*BucketPrincipal, error) {
	out := new(BucketPrincipal)
	err := c.cc.Invoke(ctx, "/proto.BucketUserPrivateService/CreateBucketUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketUserPrivateServiceClient) UpdateBucketUserPolicy(ctx context.Context, in *UpdateBucketUserPolicyParams, opts ...grpc.CallOption) (*BucketPrincipal, error) {
	out := new(BucketPrincipal)
	err := c.cc.Invoke(ctx, "/proto.BucketUserPrivateService/UpdateBucketUserPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketUserPrivateServiceClient) UpdateBucketUserCredentials(ctx context.Context, in *UpdateBucketUserCredsParams, opts ...grpc.CallOption) (*BucketPrincipal, error) {
	out := new(BucketPrincipal)
	err := c.cc.Invoke(ctx, "/proto.BucketUserPrivateService/UpdateBucketUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketUserPrivateServiceClient) DeleteBucketUser(ctx context.Context, in *DeleteBucketUserParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BucketUserPrivateService/DeleteBucketUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketUserPrivateServiceClient) GetBucketCapacity(ctx context.Context, in *BucketFilter, opts ...grpc.CallOption) (*BucketCapacity, error) {
	out := new(BucketCapacity)
	err := c.cc.Invoke(ctx, "/proto.BucketUserPrivateService/GetBucketCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketUserPrivateServiceClient) PingBucketUserPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BucketUserPrivateService/PingBucketUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketUserPrivateServiceServer is the server API for BucketUserPrivateService service.
// All implementations must embed UnimplementedBucketUserPrivateServiceServer
// for forward compatibility
type BucketUserPrivateServiceServer interface {
	CreateBucketUser(context.Context, *CreateBucketUserParams) (*BucketPrincipal, error)
	UpdateBucketUserPolicy(context.Context, *UpdateBucketUserPolicyParams) (*BucketPrincipal, error)
	UpdateBucketUserCredentials(context.Context, *UpdateBucketUserCredsParams) (*BucketPrincipal, error)
	DeleteBucketUser(context.Context, *DeleteBucketUserParams) (*emptypb.Empty, error)
	GetBucketCapacity(context.Context, *BucketFilter) (*BucketCapacity, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingBucketUserPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBucketUserPrivateServiceServer()
}

// UnimplementedBucketUserPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBucketUserPrivateServiceServer struct {
}

func (UnimplementedBucketUserPrivateServiceServer) CreateBucketUser(context.Context, *CreateBucketUserParams) (*BucketPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketUser not implemented")
}
func (UnimplementedBucketUserPrivateServiceServer) UpdateBucketUserPolicy(context.Context, *UpdateBucketUserPolicyParams) (*BucketPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketUserPolicy not implemented")
}
func (UnimplementedBucketUserPrivateServiceServer) UpdateBucketUserCredentials(context.Context, *UpdateBucketUserCredsParams) (*BucketPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketUserCredentials not implemented")
}
func (UnimplementedBucketUserPrivateServiceServer) DeleteBucketUser(context.Context, *DeleteBucketUserParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketUser not implemented")
}
func (UnimplementedBucketUserPrivateServiceServer) GetBucketCapacity(context.Context, *BucketFilter) (*BucketCapacity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketCapacity not implemented")
}
func (UnimplementedBucketUserPrivateServiceServer) PingBucketUserPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingBucketUserPrivate not implemented")
}
func (UnimplementedBucketUserPrivateServiceServer) mustEmbedUnimplementedBucketUserPrivateServiceServer() {
}

// UnsafeBucketUserPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketUserPrivateServiceServer will
// result in compilation errors.
type UnsafeBucketUserPrivateServiceServer interface {
	mustEmbedUnimplementedBucketUserPrivateServiceServer()
}

func RegisterBucketUserPrivateServiceServer(s grpc.ServiceRegistrar, srv BucketUserPrivateServiceServer) {
	s.RegisterService(&BucketUserPrivateService_ServiceDesc, srv)
}

func _BucketUserPrivateService_CreateBucketUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketUserPrivateServiceServer).CreateBucketUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketUserPrivateService/CreateBucketUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketUserPrivateServiceServer).CreateBucketUser(ctx, req.(*CreateBucketUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketUserPrivateService_UpdateBucketUserPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketUserPolicyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketUserPrivateServiceServer).UpdateBucketUserPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketUserPrivateService/UpdateBucketUserPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketUserPrivateServiceServer).UpdateBucketUserPolicy(ctx, req.(*UpdateBucketUserPolicyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketUserPrivateService_UpdateBucketUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketUserCredsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketUserPrivateServiceServer).UpdateBucketUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketUserPrivateService/UpdateBucketUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketUserPrivateServiceServer).UpdateBucketUserCredentials(ctx, req.(*UpdateBucketUserCredsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketUserPrivateService_DeleteBucketUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketUserPrivateServiceServer).DeleteBucketUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketUserPrivateService/DeleteBucketUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketUserPrivateServiceServer).DeleteBucketUser(ctx, req.(*DeleteBucketUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketUserPrivateService_GetBucketCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketUserPrivateServiceServer).GetBucketCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketUserPrivateService/GetBucketCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketUserPrivateServiceServer).GetBucketCapacity(ctx, req.(*BucketFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketUserPrivateService_PingBucketUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketUserPrivateServiceServer).PingBucketUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketUserPrivateService/PingBucketUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketUserPrivateServiceServer).PingBucketUserPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketUserPrivateService_ServiceDesc is the grpc.ServiceDesc for BucketUserPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketUserPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BucketUserPrivateService",
	HandlerType: (*BucketUserPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucketUser",
			Handler:    _BucketUserPrivateService_CreateBucketUser_Handler,
		},
		{
			MethodName: "UpdateBucketUserPolicy",
			Handler:    _BucketUserPrivateService_UpdateBucketUserPolicy_Handler,
		},
		{
			MethodName: "UpdateBucketUserCredentials",
			Handler:    _BucketUserPrivateService_UpdateBucketUserCredentials_Handler,
		},
		{
			MethodName: "DeleteBucketUser",
			Handler:    _BucketUserPrivateService_DeleteBucketUser_Handler,
		},
		{
			MethodName: "GetBucketCapacity",
			Handler:    _BucketUserPrivateService_GetBucketCapacity_Handler,
		},
		{
			MethodName: "PingBucketUserPrivate",
			Handler:    _BucketUserPrivateService_PingBucketUserPrivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_private.proto",
}

// FilesystemOrgPrivateServiceClient is the client API for FilesystemOrgPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemOrgPrivateServiceClient interface {
	// Provision a new filesystem organization
	CreateFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgCreateRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error)
	// Get the status of an filesystem.
	GetFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error)
	// Update the status of an filesystem.
	UpdateFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgUpdateRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error)
	// Request deletion of an filesystem organization.
	DeleteFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgDeleteRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Request listing of filesystems in the org.
	ListFilesystemsInOrgPrivate(ctx context.Context, in *FilesystemsInOrgListRequestPrivate, opts ...grpc.CallOption) (*FilesystemsInOrgListResponsePrivate, error)
	// Request listing of filesystems orgs.
	ListFilesystemOrgsPrivate(ctx context.Context, in *FilesystemOrgsListRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsResponsePrivate, error)
}

type filesystemOrgPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemOrgPrivateServiceClient(cc grpc.ClientConnInterface) FilesystemOrgPrivateServiceClient {
	return &filesystemOrgPrivateServiceClient{cc}
}

func (c *filesystemOrgPrivateServiceClient) CreateFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgCreateRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error) {
	out := new(FilesystemOrgPrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemOrgPrivateService/CreateFilesystemOrgPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemOrgPrivateServiceClient) GetFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgGetRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error) {
	out := new(FilesystemOrgPrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemOrgPrivateService/GetFilesystemOrgPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemOrgPrivateServiceClient) UpdateFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgUpdateRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgPrivate, error) {
	out := new(FilesystemOrgPrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemOrgPrivateService/UpdateFilesystemOrgPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemOrgPrivateServiceClient) DeleteFilesystemOrgPrivate(ctx context.Context, in *FilesystemOrgDeleteRequestPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FilesystemOrgPrivateService/DeleteFilesystemOrgPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemOrgPrivateServiceClient) ListFilesystemsInOrgPrivate(ctx context.Context, in *FilesystemsInOrgListRequestPrivate, opts ...grpc.CallOption) (*FilesystemsInOrgListResponsePrivate, error) {
	out := new(FilesystemsInOrgListResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemOrgPrivateService/ListFilesystemsInOrgPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemOrgPrivateServiceClient) ListFilesystemOrgsPrivate(ctx context.Context, in *FilesystemOrgsListRequestPrivate, opts ...grpc.CallOption) (*FilesystemOrgsResponsePrivate, error) {
	out := new(FilesystemOrgsResponsePrivate)
	err := c.cc.Invoke(ctx, "/proto.FilesystemOrgPrivateService/ListFilesystemOrgsPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemOrgPrivateServiceServer is the server API for FilesystemOrgPrivateService service.
// All implementations must embed UnimplementedFilesystemOrgPrivateServiceServer
// for forward compatibility
type FilesystemOrgPrivateServiceServer interface {
	// Provision a new filesystem organization
	CreateFilesystemOrgPrivate(context.Context, *FilesystemOrgCreateRequestPrivate) (*FilesystemOrgPrivate, error)
	// Get the status of an filesystem.
	GetFilesystemOrgPrivate(context.Context, *FilesystemOrgGetRequestPrivate) (*FilesystemOrgPrivate, error)
	// Update the status of an filesystem.
	UpdateFilesystemOrgPrivate(context.Context, *FilesystemOrgUpdateRequestPrivate) (*FilesystemOrgPrivate, error)
	// Request deletion of an filesystem organization.
	DeleteFilesystemOrgPrivate(context.Context, *FilesystemOrgDeleteRequestPrivate) (*emptypb.Empty, error)
	// Request listing of filesystems in the org.
	ListFilesystemsInOrgPrivate(context.Context, *FilesystemsInOrgListRequestPrivate) (*FilesystemsInOrgListResponsePrivate, error)
	// Request listing of filesystems orgs.
	ListFilesystemOrgsPrivate(context.Context, *FilesystemOrgsListRequestPrivate) (*FilesystemOrgsResponsePrivate, error)
	mustEmbedUnimplementedFilesystemOrgPrivateServiceServer()
}

// UnimplementedFilesystemOrgPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemOrgPrivateServiceServer struct {
}

func (UnimplementedFilesystemOrgPrivateServiceServer) CreateFilesystemOrgPrivate(context.Context, *FilesystemOrgCreateRequestPrivate) (*FilesystemOrgPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilesystemOrgPrivate not implemented")
}
func (UnimplementedFilesystemOrgPrivateServiceServer) GetFilesystemOrgPrivate(context.Context, *FilesystemOrgGetRequestPrivate) (*FilesystemOrgPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesystemOrgPrivate not implemented")
}
func (UnimplementedFilesystemOrgPrivateServiceServer) UpdateFilesystemOrgPrivate(context.Context, *FilesystemOrgUpdateRequestPrivate) (*FilesystemOrgPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilesystemOrgPrivate not implemented")
}
func (UnimplementedFilesystemOrgPrivateServiceServer) DeleteFilesystemOrgPrivate(context.Context, *FilesystemOrgDeleteRequestPrivate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilesystemOrgPrivate not implemented")
}
func (UnimplementedFilesystemOrgPrivateServiceServer) ListFilesystemsInOrgPrivate(context.Context, *FilesystemsInOrgListRequestPrivate) (*FilesystemsInOrgListResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesystemsInOrgPrivate not implemented")
}
func (UnimplementedFilesystemOrgPrivateServiceServer) ListFilesystemOrgsPrivate(context.Context, *FilesystemOrgsListRequestPrivate) (*FilesystemOrgsResponsePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesystemOrgsPrivate not implemented")
}
func (UnimplementedFilesystemOrgPrivateServiceServer) mustEmbedUnimplementedFilesystemOrgPrivateServiceServer() {
}

// UnsafeFilesystemOrgPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemOrgPrivateServiceServer will
// result in compilation errors.
type UnsafeFilesystemOrgPrivateServiceServer interface {
	mustEmbedUnimplementedFilesystemOrgPrivateServiceServer()
}

func RegisterFilesystemOrgPrivateServiceServer(s grpc.ServiceRegistrar, srv FilesystemOrgPrivateServiceServer) {
	s.RegisterService(&FilesystemOrgPrivateService_ServiceDesc, srv)
}

func _FilesystemOrgPrivateService_CreateFilesystemOrgPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemOrgCreateRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemOrgPrivateServiceServer).CreateFilesystemOrgPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemOrgPrivateService/CreateFilesystemOrgPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemOrgPrivateServiceServer).CreateFilesystemOrgPrivate(ctx, req.(*FilesystemOrgCreateRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemOrgPrivateService_GetFilesystemOrgPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemOrgGetRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemOrgPrivateServiceServer).GetFilesystemOrgPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemOrgPrivateService/GetFilesystemOrgPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemOrgPrivateServiceServer).GetFilesystemOrgPrivate(ctx, req.(*FilesystemOrgGetRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemOrgPrivateService_UpdateFilesystemOrgPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemOrgUpdateRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemOrgPrivateServiceServer).UpdateFilesystemOrgPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemOrgPrivateService/UpdateFilesystemOrgPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemOrgPrivateServiceServer).UpdateFilesystemOrgPrivate(ctx, req.(*FilesystemOrgUpdateRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemOrgPrivateService_DeleteFilesystemOrgPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemOrgDeleteRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemOrgPrivateServiceServer).DeleteFilesystemOrgPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemOrgPrivateService/DeleteFilesystemOrgPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemOrgPrivateServiceServer).DeleteFilesystemOrgPrivate(ctx, req.(*FilesystemOrgDeleteRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemOrgPrivateService_ListFilesystemsInOrgPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemsInOrgListRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemOrgPrivateServiceServer).ListFilesystemsInOrgPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemOrgPrivateService/ListFilesystemsInOrgPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemOrgPrivateServiceServer).ListFilesystemsInOrgPrivate(ctx, req.(*FilesystemsInOrgListRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemOrgPrivateService_ListFilesystemOrgsPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemOrgsListRequestPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemOrgPrivateServiceServer).ListFilesystemOrgsPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilesystemOrgPrivateService/ListFilesystemOrgsPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemOrgPrivateServiceServer).ListFilesystemOrgsPrivate(ctx, req.(*FilesystemOrgsListRequestPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesystemOrgPrivateService_ServiceDesc is the grpc.ServiceDesc for FilesystemOrgPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesystemOrgPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilesystemOrgPrivateService",
	HandlerType: (*FilesystemOrgPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFilesystemOrgPrivate",
			Handler:    _FilesystemOrgPrivateService_CreateFilesystemOrgPrivate_Handler,
		},
		{
			MethodName: "GetFilesystemOrgPrivate",
			Handler:    _FilesystemOrgPrivateService_GetFilesystemOrgPrivate_Handler,
		},
		{
			MethodName: "UpdateFilesystemOrgPrivate",
			Handler:    _FilesystemOrgPrivateService_UpdateFilesystemOrgPrivate_Handler,
		},
		{
			MethodName: "DeleteFilesystemOrgPrivate",
			Handler:    _FilesystemOrgPrivateService_DeleteFilesystemOrgPrivate_Handler,
		},
		{
			MethodName: "ListFilesystemsInOrgPrivate",
			Handler:    _FilesystemOrgPrivateService_ListFilesystemsInOrgPrivate_Handler,
		},
		{
			MethodName: "ListFilesystemOrgsPrivate",
			Handler:    _FilesystemOrgPrivateService_ListFilesystemOrgsPrivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_private.proto",
}

// ObjectStorageServicePrivateClient is the client API for ObjectStorageServicePrivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectStorageServicePrivateClient interface {
	CreateBucketPrivate(ctx context.Context, in *ObjectBucketCreatePrivateRequest, opts ...grpc.CallOption) (*ObjectBucketPrivate, error)
	GetBucketPrivate(ctx context.Context, in *ObjectBucketGetPrivateRequest, opts ...grpc.CallOption) (*ObjectBucketPrivate, error)
	// List Filesystem as a stream.
	// This returns all bucket requests that are pending.
	SearchBucketPrivate(ctx context.Context, in *ObjectBucketSearchPrivateRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_SearchBucketPrivateClient, error)
	DeleteBucketPrivate(ctx context.Context, in *ObjectBucketDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleCreatePrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error)
	GetBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleGetPrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error)
	SearchBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleSearchPrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRuleSearchPrivateResponse, error)
	UpdateBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleUpdatePrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error)
	DeleteBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateObjectUserPrivate(ctx context.Context, in *CreateObjectUserPrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error)
	GetObjectUserPrivate(ctx context.Context, in *ObjectUserGetPrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error)
	SearchObjectUserPrivate(ctx context.Context, in *ObjectUserSearchPrivateRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_SearchObjectUserPrivateClient, error)
	DeleteObjectUserPrivate(ctx context.Context, in *ObjectUserDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateObjectUserPrivate(ctx context.Context, in *ObjectUserUpdatePrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error)
	// APIs not mapped to public gRPC
	UpdateBucketStatus(ctx context.Context, in *ObjectBucketStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove finalizer from an bucket that was previously requested to be deleted.
	// After this returns, the record will no longer be visible to users or controllers.
	// Used by object bucket Replicator.
	RemoveBucketFinalizer(ctx context.Context, in *ObjectBucketRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateObjectUserStatus(ctx context.Context, in *ObjectUserStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove finalizer from an object user that was previously requested to be deleted.
	// After this returns, the record will no longer be visible to users or controllers.
	// Used by storage user service.
	RemoveObjectUserFinalizer(ctx context.Context, in *ObjectUserRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddBucketSubnet(ctx context.Context, in *VNetPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveBucketSubnet(ctx context.Context, in *VNetReleaseSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBucketSubnetEvent(ctx context.Context, in *SubnetEventRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_GetBucketSubnetEventClient, error)
	UpdateBucketSubnetStatus(ctx context.Context, in *BucketSubnetStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type objectStorageServicePrivateClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectStorageServicePrivateClient(cc grpc.ClientConnInterface) ObjectStorageServicePrivateClient {
	return &objectStorageServicePrivateClient{cc}
}

func (c *objectStorageServicePrivateClient) CreateBucketPrivate(ctx context.Context, in *ObjectBucketCreatePrivateRequest, opts ...grpc.CallOption) (*ObjectBucketPrivate, error) {
	out := new(ObjectBucketPrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/CreateBucketPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) GetBucketPrivate(ctx context.Context, in *ObjectBucketGetPrivateRequest, opts ...grpc.CallOption) (*ObjectBucketPrivate, error) {
	out := new(ObjectBucketPrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/GetBucketPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) SearchBucketPrivate(ctx context.Context, in *ObjectBucketSearchPrivateRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_SearchBucketPrivateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageServicePrivate_ServiceDesc.Streams[0], "/proto.ObjectStorageServicePrivate/SearchBucketPrivate", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServicePrivateSearchBucketPrivateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectStorageServicePrivate_SearchBucketPrivateClient interface {
	Recv() (*ObjectBucketSearchPrivateResponse, error)
	grpc.ClientStream
}

type objectStorageServicePrivateSearchBucketPrivateClient struct {
	grpc.ClientStream
}

func (x *objectStorageServicePrivateSearchBucketPrivateClient) Recv() (*ObjectBucketSearchPrivateResponse, error) {
	m := new(ObjectBucketSearchPrivateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServicePrivateClient) DeleteBucketPrivate(ctx context.Context, in *ObjectBucketDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/DeleteBucketPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) CreateBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleCreatePrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error) {
	out := new(BucketLifecycleRulePrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/CreateBucketLifecycleRulePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) GetBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleGetPrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error) {
	out := new(BucketLifecycleRulePrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/GetBucketLifecycleRulePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) SearchBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleSearchPrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRuleSearchPrivateResponse, error) {
	out := new(BucketLifecycleRuleSearchPrivateResponse)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/SearchBucketLifecycleRulePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) UpdateBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleUpdatePrivateRequest, opts ...grpc.CallOption) (*BucketLifecycleRulePrivate, error) {
	out := new(BucketLifecycleRulePrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/UpdateBucketLifecycleRulePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) DeleteBucketLifecycleRulePrivate(ctx context.Context, in *BucketLifecycleRuleDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/DeleteBucketLifecycleRulePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) CreateObjectUserPrivate(ctx context.Context, in *CreateObjectUserPrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error) {
	out := new(ObjectUserPrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/CreateObjectUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) GetObjectUserPrivate(ctx context.Context, in *ObjectUserGetPrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error) {
	out := new(ObjectUserPrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/GetObjectUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) SearchObjectUserPrivate(ctx context.Context, in *ObjectUserSearchPrivateRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_SearchObjectUserPrivateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageServicePrivate_ServiceDesc.Streams[1], "/proto.ObjectStorageServicePrivate/SearchObjectUserPrivate", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServicePrivateSearchObjectUserPrivateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectStorageServicePrivate_SearchObjectUserPrivateClient interface {
	Recv() (*ObjectUserSearchPrivateResponse, error)
	grpc.ClientStream
}

type objectStorageServicePrivateSearchObjectUserPrivateClient struct {
	grpc.ClientStream
}

func (x *objectStorageServicePrivateSearchObjectUserPrivateClient) Recv() (*ObjectUserSearchPrivateResponse, error) {
	m := new(ObjectUserSearchPrivateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServicePrivateClient) DeleteObjectUserPrivate(ctx context.Context, in *ObjectUserDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/DeleteObjectUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) UpdateObjectUserPrivate(ctx context.Context, in *ObjectUserUpdatePrivateRequest, opts ...grpc.CallOption) (*ObjectUserPrivate, error) {
	out := new(ObjectUserPrivate)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/UpdateObjectUserPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) UpdateBucketStatus(ctx context.Context, in *ObjectBucketStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/UpdateBucketStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) RemoveBucketFinalizer(ctx context.Context, in *ObjectBucketRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/RemoveBucketFinalizer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) UpdateObjectUserStatus(ctx context.Context, in *ObjectUserStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/UpdateObjectUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) RemoveObjectUserFinalizer(ctx context.Context, in *ObjectUserRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/RemoveObjectUserFinalizer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) AddBucketSubnet(ctx context.Context, in *VNetPrivate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/AddBucketSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) RemoveBucketSubnet(ctx context.Context, in *VNetReleaseSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/RemoveBucketSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) GetBucketSubnetEvent(ctx context.Context, in *SubnetEventRequest, opts ...grpc.CallOption) (ObjectStorageServicePrivate_GetBucketSubnetEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageServicePrivate_ServiceDesc.Streams[2], "/proto.ObjectStorageServicePrivate/GetBucketSubnetEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServicePrivateGetBucketSubnetEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectStorageServicePrivate_GetBucketSubnetEventClient interface {
	Recv() (*BucketSubnetUpdateEvent, error)
	grpc.ClientStream
}

type objectStorageServicePrivateGetBucketSubnetEventClient struct {
	grpc.ClientStream
}

func (x *objectStorageServicePrivateGetBucketSubnetEventClient) Recv() (*BucketSubnetUpdateEvent, error) {
	m := new(BucketSubnetUpdateEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServicePrivateClient) UpdateBucketSubnetStatus(ctx context.Context, in *BucketSubnetStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/UpdateBucketSubnetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServicePrivateClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ObjectStorageServicePrivate/PingPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectStorageServicePrivateServer is the server API for ObjectStorageServicePrivate service.
// All implementations must embed UnimplementedObjectStorageServicePrivateServer
// for forward compatibility
type ObjectStorageServicePrivateServer interface {
	CreateBucketPrivate(context.Context, *ObjectBucketCreatePrivateRequest) (*ObjectBucketPrivate, error)
	GetBucketPrivate(context.Context, *ObjectBucketGetPrivateRequest) (*ObjectBucketPrivate, error)
	// List Filesystem as a stream.
	// This returns all bucket requests that are pending.
	SearchBucketPrivate(*ObjectBucketSearchPrivateRequest, ObjectStorageServicePrivate_SearchBucketPrivateServer) error
	DeleteBucketPrivate(context.Context, *ObjectBucketDeletePrivateRequest) (*emptypb.Empty, error)
	CreateBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleCreatePrivateRequest) (*BucketLifecycleRulePrivate, error)
	GetBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleGetPrivateRequest) (*BucketLifecycleRulePrivate, error)
	SearchBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleSearchPrivateRequest) (*BucketLifecycleRuleSearchPrivateResponse, error)
	UpdateBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleUpdatePrivateRequest) (*BucketLifecycleRulePrivate, error)
	DeleteBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleDeletePrivateRequest) (*emptypb.Empty, error)
	CreateObjectUserPrivate(context.Context, *CreateObjectUserPrivateRequest) (*ObjectUserPrivate, error)
	GetObjectUserPrivate(context.Context, *ObjectUserGetPrivateRequest) (*ObjectUserPrivate, error)
	SearchObjectUserPrivate(*ObjectUserSearchPrivateRequest, ObjectStorageServicePrivate_SearchObjectUserPrivateServer) error
	DeleteObjectUserPrivate(context.Context, *ObjectUserDeletePrivateRequest) (*emptypb.Empty, error)
	UpdateObjectUserPrivate(context.Context, *ObjectUserUpdatePrivateRequest) (*ObjectUserPrivate, error)
	// APIs not mapped to public gRPC
	UpdateBucketStatus(context.Context, *ObjectBucketStatusUpdateRequest) (*emptypb.Empty, error)
	// Remove finalizer from an bucket that was previously requested to be deleted.
	// After this returns, the record will no longer be visible to users or controllers.
	// Used by object bucket Replicator.
	RemoveBucketFinalizer(context.Context, *ObjectBucketRemoveFinalizerRequest) (*emptypb.Empty, error)
	UpdateObjectUserStatus(context.Context, *ObjectUserStatusUpdateRequest) (*emptypb.Empty, error)
	// Remove finalizer from an object user that was previously requested to be deleted.
	// After this returns, the record will no longer be visible to users or controllers.
	// Used by storage user service.
	RemoveObjectUserFinalizer(context.Context, *ObjectUserRemoveFinalizerRequest) (*emptypb.Empty, error)
	AddBucketSubnet(context.Context, *VNetPrivate) (*emptypb.Empty, error)
	RemoveBucketSubnet(context.Context, *VNetReleaseSubnetRequest) (*emptypb.Empty, error)
	GetBucketSubnetEvent(*SubnetEventRequest, ObjectStorageServicePrivate_GetBucketSubnetEventServer) error
	UpdateBucketSubnetStatus(context.Context, *BucketSubnetStatusUpdateRequest) (*emptypb.Empty, error)
	PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedObjectStorageServicePrivateServer()
}

// UnimplementedObjectStorageServicePrivateServer must be embedded to have forward compatible implementations.
type UnimplementedObjectStorageServicePrivateServer struct {
}

func (UnimplementedObjectStorageServicePrivateServer) CreateBucketPrivate(context.Context, *ObjectBucketCreatePrivateRequest) (*ObjectBucketPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) GetBucketPrivate(context.Context, *ObjectBucketGetPrivateRequest) (*ObjectBucketPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) SearchBucketPrivate(*ObjectBucketSearchPrivateRequest, ObjectStorageServicePrivate_SearchBucketPrivateServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchBucketPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) DeleteBucketPrivate(context.Context, *ObjectBucketDeletePrivateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) CreateBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleCreatePrivateRequest) (*BucketLifecycleRulePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketLifecycleRulePrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) GetBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleGetPrivateRequest) (*BucketLifecycleRulePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketLifecycleRulePrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) SearchBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleSearchPrivateRequest) (*BucketLifecycleRuleSearchPrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBucketLifecycleRulePrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) UpdateBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleUpdatePrivateRequest) (*BucketLifecycleRulePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketLifecycleRulePrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) DeleteBucketLifecycleRulePrivate(context.Context, *BucketLifecycleRuleDeletePrivateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketLifecycleRulePrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) CreateObjectUserPrivate(context.Context, *CreateObjectUserPrivateRequest) (*ObjectUserPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectUserPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) GetObjectUserPrivate(context.Context, *ObjectUserGetPrivateRequest) (*ObjectUserPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectUserPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) SearchObjectUserPrivate(*ObjectUserSearchPrivateRequest, ObjectStorageServicePrivate_SearchObjectUserPrivateServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchObjectUserPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) DeleteObjectUserPrivate(context.Context, *ObjectUserDeletePrivateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectUserPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) UpdateObjectUserPrivate(context.Context, *ObjectUserUpdatePrivateRequest) (*ObjectUserPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectUserPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) UpdateBucketStatus(context.Context, *ObjectBucketStatusUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketStatus not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) RemoveBucketFinalizer(context.Context, *ObjectBucketRemoveFinalizerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBucketFinalizer not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) UpdateObjectUserStatus(context.Context, *ObjectUserStatusUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectUserStatus not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) RemoveObjectUserFinalizer(context.Context, *ObjectUserRemoveFinalizerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObjectUserFinalizer not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) AddBucketSubnet(context.Context, *VNetPrivate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBucketSubnet not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) RemoveBucketSubnet(context.Context, *VNetReleaseSubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBucketSubnet not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) GetBucketSubnetEvent(*SubnetEventRequest, ObjectStorageServicePrivate_GetBucketSubnetEventServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBucketSubnetEvent not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) UpdateBucketSubnetStatus(context.Context, *BucketSubnetStatusUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketSubnetStatus not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPrivate not implemented")
}
func (UnimplementedObjectStorageServicePrivateServer) mustEmbedUnimplementedObjectStorageServicePrivateServer() {
}

// UnsafeObjectStorageServicePrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectStorageServicePrivateServer will
// result in compilation errors.
type UnsafeObjectStorageServicePrivateServer interface {
	mustEmbedUnimplementedObjectStorageServicePrivateServer()
}

func RegisterObjectStorageServicePrivateServer(s grpc.ServiceRegistrar, srv ObjectStorageServicePrivateServer) {
	s.RegisterService(&ObjectStorageServicePrivate_ServiceDesc, srv)
}

func _ObjectStorageServicePrivate_CreateBucketPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketCreatePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).CreateBucketPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/CreateBucketPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).CreateBucketPrivate(ctx, req.(*ObjectBucketCreatePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_GetBucketPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketGetPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).GetBucketPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/GetBucketPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).GetBucketPrivate(ctx, req.(*ObjectBucketGetPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_SearchBucketPrivate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectBucketSearchPrivateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStorageServicePrivateServer).SearchBucketPrivate(m, &objectStorageServicePrivateSearchBucketPrivateServer{stream})
}

type ObjectStorageServicePrivate_SearchBucketPrivateServer interface {
	Send(*ObjectBucketSearchPrivateResponse) error
	grpc.ServerStream
}

type objectStorageServicePrivateSearchBucketPrivateServer struct {
	grpc.ServerStream
}

func (x *objectStorageServicePrivateSearchBucketPrivateServer) Send(m *ObjectBucketSearchPrivateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectStorageServicePrivate_DeleteBucketPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketDeletePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).DeleteBucketPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/DeleteBucketPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).DeleteBucketPrivate(ctx, req.(*ObjectBucketDeletePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_CreateBucketLifecycleRulePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleCreatePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).CreateBucketLifecycleRulePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/CreateBucketLifecycleRulePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).CreateBucketLifecycleRulePrivate(ctx, req.(*BucketLifecycleRuleCreatePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_GetBucketLifecycleRulePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleGetPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).GetBucketLifecycleRulePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/GetBucketLifecycleRulePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).GetBucketLifecycleRulePrivate(ctx, req.(*BucketLifecycleRuleGetPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_SearchBucketLifecycleRulePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleSearchPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).SearchBucketLifecycleRulePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/SearchBucketLifecycleRulePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).SearchBucketLifecycleRulePrivate(ctx, req.(*BucketLifecycleRuleSearchPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_UpdateBucketLifecycleRulePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleUpdatePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).UpdateBucketLifecycleRulePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/UpdateBucketLifecycleRulePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).UpdateBucketLifecycleRulePrivate(ctx, req.(*BucketLifecycleRuleUpdatePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_DeleteBucketLifecycleRulePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLifecycleRuleDeletePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).DeleteBucketLifecycleRulePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/DeleteBucketLifecycleRulePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).DeleteBucketLifecycleRulePrivate(ctx, req.(*BucketLifecycleRuleDeletePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_CreateObjectUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectUserPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).CreateObjectUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/CreateObjectUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).CreateObjectUserPrivate(ctx, req.(*CreateObjectUserPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_GetObjectUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserGetPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).GetObjectUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/GetObjectUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).GetObjectUserPrivate(ctx, req.(*ObjectUserGetPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_SearchObjectUserPrivate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectUserSearchPrivateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStorageServicePrivateServer).SearchObjectUserPrivate(m, &objectStorageServicePrivateSearchObjectUserPrivateServer{stream})
}

type ObjectStorageServicePrivate_SearchObjectUserPrivateServer interface {
	Send(*ObjectUserSearchPrivateResponse) error
	grpc.ServerStream
}

type objectStorageServicePrivateSearchObjectUserPrivateServer struct {
	grpc.ServerStream
}

func (x *objectStorageServicePrivateSearchObjectUserPrivateServer) Send(m *ObjectUserSearchPrivateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectStorageServicePrivate_DeleteObjectUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserDeletePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).DeleteObjectUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/DeleteObjectUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).DeleteObjectUserPrivate(ctx, req.(*ObjectUserDeletePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_UpdateObjectUserPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserUpdatePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).UpdateObjectUserPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/UpdateObjectUserPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).UpdateObjectUserPrivate(ctx, req.(*ObjectUserUpdatePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_UpdateBucketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).UpdateBucketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/UpdateBucketStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).UpdateBucketStatus(ctx, req.(*ObjectBucketStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_RemoveBucketFinalizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectBucketRemoveFinalizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).RemoveBucketFinalizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/RemoveBucketFinalizer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).RemoveBucketFinalizer(ctx, req.(*ObjectBucketRemoveFinalizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_UpdateObjectUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).UpdateObjectUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/UpdateObjectUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).UpdateObjectUserStatus(ctx, req.(*ObjectUserStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_RemoveObjectUserFinalizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUserRemoveFinalizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).RemoveObjectUserFinalizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/RemoveObjectUserFinalizer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).RemoveObjectUserFinalizer(ctx, req.(*ObjectUserRemoveFinalizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_AddBucketSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNetPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).AddBucketSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/AddBucketSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).AddBucketSubnet(ctx, req.(*VNetPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_RemoveBucketSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNetReleaseSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).RemoveBucketSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/RemoveBucketSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).RemoveBucketSubnet(ctx, req.(*VNetReleaseSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_GetBucketSubnetEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubnetEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStorageServicePrivateServer).GetBucketSubnetEvent(m, &objectStorageServicePrivateGetBucketSubnetEventServer{stream})
}

type ObjectStorageServicePrivate_GetBucketSubnetEventServer interface {
	Send(*BucketSubnetUpdateEvent) error
	grpc.ServerStream
}

type objectStorageServicePrivateGetBucketSubnetEventServer struct {
	grpc.ServerStream
}

func (x *objectStorageServicePrivateGetBucketSubnetEventServer) Send(m *BucketSubnetUpdateEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectStorageServicePrivate_UpdateBucketSubnetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketSubnetStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).UpdateBucketSubnetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/UpdateBucketSubnetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).UpdateBucketSubnetStatus(ctx, req.(*BucketSubnetStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageServicePrivate_PingPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServicePrivateServer).PingPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ObjectStorageServicePrivate/PingPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServicePrivateServer).PingPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectStorageServicePrivate_ServiceDesc is the grpc.ServiceDesc for ObjectStorageServicePrivate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectStorageServicePrivate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ObjectStorageServicePrivate",
	HandlerType: (*ObjectStorageServicePrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucketPrivate",
			Handler:    _ObjectStorageServicePrivate_CreateBucketPrivate_Handler,
		},
		{
			MethodName: "GetBucketPrivate",
			Handler:    _ObjectStorageServicePrivate_GetBucketPrivate_Handler,
		},
		{
			MethodName: "DeleteBucketPrivate",
			Handler:    _ObjectStorageServicePrivate_DeleteBucketPrivate_Handler,
		},
		{
			MethodName: "CreateBucketLifecycleRulePrivate",
			Handler:    _ObjectStorageServicePrivate_CreateBucketLifecycleRulePrivate_Handler,
		},
		{
			MethodName: "GetBucketLifecycleRulePrivate",
			Handler:    _ObjectStorageServicePrivate_GetBucketLifecycleRulePrivate_Handler,
		},
		{
			MethodName: "SearchBucketLifecycleRulePrivate",
			Handler:    _ObjectStorageServicePrivate_SearchBucketLifecycleRulePrivate_Handler,
		},
		{
			MethodName: "UpdateBucketLifecycleRulePrivate",
			Handler:    _ObjectStorageServicePrivate_UpdateBucketLifecycleRulePrivate_Handler,
		},
		{
			MethodName: "DeleteBucketLifecycleRulePrivate",
			Handler:    _ObjectStorageServicePrivate_DeleteBucketLifecycleRulePrivate_Handler,
		},
		{
			MethodName: "CreateObjectUserPrivate",
			Handler:    _ObjectStorageServicePrivate_CreateObjectUserPrivate_Handler,
		},
		{
			MethodName: "GetObjectUserPrivate",
			Handler:    _ObjectStorageServicePrivate_GetObjectUserPrivate_Handler,
		},
		{
			MethodName: "DeleteObjectUserPrivate",
			Handler:    _ObjectStorageServicePrivate_DeleteObjectUserPrivate_Handler,
		},
		{
			MethodName: "UpdateObjectUserPrivate",
			Handler:    _ObjectStorageServicePrivate_UpdateObjectUserPrivate_Handler,
		},
		{
			MethodName: "UpdateBucketStatus",
			Handler:    _ObjectStorageServicePrivate_UpdateBucketStatus_Handler,
		},
		{
			MethodName: "RemoveBucketFinalizer",
			Handler:    _ObjectStorageServicePrivate_RemoveBucketFinalizer_Handler,
		},
		{
			MethodName: "UpdateObjectUserStatus",
			Handler:    _ObjectStorageServicePrivate_UpdateObjectUserStatus_Handler,
		},
		{
			MethodName: "RemoveObjectUserFinalizer",
			Handler:    _ObjectStorageServicePrivate_RemoveObjectUserFinalizer_Handler,
		},
		{
			MethodName: "AddBucketSubnet",
			Handler:    _ObjectStorageServicePrivate_AddBucketSubnet_Handler,
		},
		{
			MethodName: "RemoveBucketSubnet",
			Handler:    _ObjectStorageServicePrivate_RemoveBucketSubnet_Handler,
		},
		{
			MethodName: "UpdateBucketSubnetStatus",
			Handler:    _ObjectStorageServicePrivate_UpdateBucketSubnetStatus_Handler,
		},
		{
			MethodName: "PingPrivate",
			Handler:    _ObjectStorageServicePrivate_PingPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchBucketPrivate",
			Handler:       _ObjectStorageServicePrivate_SearchBucketPrivate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchObjectUserPrivate",
			Handler:       _ObjectStorageServicePrivate_SearchObjectUserPrivate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBucketSubnetEvent",
			Handler:       _ObjectStorageServicePrivate_GetBucketSubnetEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage_private.proto",
}

// BucketLifecyclePrivateServiceClient is the client API for BucketLifecyclePrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketLifecyclePrivateServiceClient interface {
	CreateOrUpdateLifecycleRule(ctx context.Context, in *CreateOrUpdateLifecycleRuleRequest, opts ...grpc.CallOption) (*LifecycleRulePrivate, error)
	DeleteLifecycleRule(ctx context.Context, in *DeleteLifecycleRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PingBucketLifecyclePrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingBucketLifecyclePrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bucketLifecyclePrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketLifecyclePrivateServiceClient(cc grpc.ClientConnInterface) BucketLifecyclePrivateServiceClient {
	return &bucketLifecyclePrivateServiceClient{cc}
}

func (c *bucketLifecyclePrivateServiceClient) CreateOrUpdateLifecycleRule(ctx context.Context, in *CreateOrUpdateLifecycleRuleRequest, opts ...grpc.CallOption) (*LifecycleRulePrivate, error) {
	out := new(LifecycleRulePrivate)
	err := c.cc.Invoke(ctx, "/proto.BucketLifecyclePrivateService/CreateOrUpdateLifecycleRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLifecyclePrivateServiceClient) DeleteLifecycleRule(ctx context.Context, in *DeleteLifecycleRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BucketLifecyclePrivateService/DeleteLifecycleRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLifecyclePrivateServiceClient) PingBucketLifecyclePrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BucketLifecyclePrivateService/PingBucketLifecyclePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketLifecyclePrivateServiceServer is the server API for BucketLifecyclePrivateService service.
// All implementations must embed UnimplementedBucketLifecyclePrivateServiceServer
// for forward compatibility
type BucketLifecyclePrivateServiceServer interface {
	CreateOrUpdateLifecycleRule(context.Context, *CreateOrUpdateLifecycleRuleRequest) (*LifecycleRulePrivate, error)
	DeleteLifecycleRule(context.Context, *DeleteLifecycleRuleRequest) (*emptypb.Empty, error)
	// PingBucketLifecyclePrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingBucketLifecyclePrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBucketLifecyclePrivateServiceServer()
}

// UnimplementedBucketLifecyclePrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBucketLifecyclePrivateServiceServer struct {
}

func (UnimplementedBucketLifecyclePrivateServiceServer) CreateOrUpdateLifecycleRule(context.Context, *CreateOrUpdateLifecycleRuleRequest) (*LifecycleRulePrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateLifecycleRule not implemented")
}
func (UnimplementedBucketLifecyclePrivateServiceServer) DeleteLifecycleRule(context.Context, *DeleteLifecycleRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLifecycleRule not implemented")
}
func (UnimplementedBucketLifecyclePrivateServiceServer) PingBucketLifecyclePrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingBucketLifecyclePrivate not implemented")
}
func (UnimplementedBucketLifecyclePrivateServiceServer) mustEmbedUnimplementedBucketLifecyclePrivateServiceServer() {
}

// UnsafeBucketLifecyclePrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketLifecyclePrivateServiceServer will
// result in compilation errors.
type UnsafeBucketLifecyclePrivateServiceServer interface {
	mustEmbedUnimplementedBucketLifecyclePrivateServiceServer()
}

func RegisterBucketLifecyclePrivateServiceServer(s grpc.ServiceRegistrar, srv BucketLifecyclePrivateServiceServer) {
	s.RegisterService(&BucketLifecyclePrivateService_ServiceDesc, srv)
}

func _BucketLifecyclePrivateService_CreateOrUpdateLifecycleRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateLifecycleRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLifecyclePrivateServiceServer).CreateOrUpdateLifecycleRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketLifecyclePrivateService/CreateOrUpdateLifecycleRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLifecyclePrivateServiceServer).CreateOrUpdateLifecycleRule(ctx, req.(*CreateOrUpdateLifecycleRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLifecyclePrivateService_DeleteLifecycleRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLifecycleRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLifecyclePrivateServiceServer).DeleteLifecycleRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketLifecyclePrivateService/DeleteLifecycleRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLifecyclePrivateServiceServer).DeleteLifecycleRule(ctx, req.(*DeleteLifecycleRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLifecyclePrivateService_PingBucketLifecyclePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLifecyclePrivateServiceServer).PingBucketLifecyclePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BucketLifecyclePrivateService/PingBucketLifecyclePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLifecyclePrivateServiceServer).PingBucketLifecyclePrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketLifecyclePrivateService_ServiceDesc is the grpc.ServiceDesc for BucketLifecyclePrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketLifecyclePrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BucketLifecyclePrivateService",
	HandlerType: (*BucketLifecyclePrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateLifecycleRule",
			Handler:    _BucketLifecyclePrivateService_CreateOrUpdateLifecycleRule_Handler,
		},
		{
			MethodName: "DeleteLifecycleRule",
			Handler:    _BucketLifecyclePrivateService_DeleteLifecycleRule_Handler,
		},
		{
			MethodName: "PingBucketLifecyclePrivate",
			Handler:    _BucketLifecyclePrivateService_PingBucketLifecyclePrivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_private.proto",
}
