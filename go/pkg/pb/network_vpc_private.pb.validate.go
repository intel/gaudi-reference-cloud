// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network_vpc_private.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VPCCreatePrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCCreatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCCreatePrivateRequestMultiError, or nil if none found.
func (m *VPCCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// VPCCreatePrivateRequestMultiError is an error wrapping multiple validation
// errors returned by VPCCreatePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type VPCCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCCreatePrivateRequestMultiError) AllErrors() []error { return m }

// VPCCreatePrivateRequestValidationError is the validation error returned by
// VPCCreatePrivateRequest.Validate if the designated constraints aren't met.
type VPCCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCCreatePrivateRequestValidationError) ErrorName() string {
	return "VPCCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VPCCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCCreatePrivateRequestValidationError{}

// Validate checks the field values on VPCMetadataCreatePrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCMetadataCreatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCMetadataCreatePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCMetadataCreatePrivateMultiError, or nil if none found.
func (m *VPCMetadataCreatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCMetadataCreatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return VPCMetadataCreatePrivateMultiError(errors)
	}

	return nil
}

// VPCMetadataCreatePrivateMultiError is an error wrapping multiple validation
// errors returned by VPCMetadataCreatePrivate.ValidateAll() if the designated
// constraints aren't met.
type VPCMetadataCreatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMetadataCreatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMetadataCreatePrivateMultiError) AllErrors() []error { return m }

// VPCMetadataCreatePrivateValidationError is the validation error returned by
// VPCMetadataCreatePrivate.Validate if the designated constraints aren't met.
type VPCMetadataCreatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCMetadataCreatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCMetadataCreatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCMetadataCreatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCMetadataCreatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCMetadataCreatePrivateValidationError) ErrorName() string {
	return "VPCMetadataCreatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e VPCMetadataCreatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCMetadataCreatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCMetadataCreatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCMetadataCreatePrivateValidationError{}

// Validate checks the field values on VPCGetPrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCGetPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCGetPrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCGetPrivateRequestMultiError, or nil if none found.
func (m *VPCGetPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCGetPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCGetPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCGetPrivateRequestMultiError(errors)
	}

	return nil
}

// VPCGetPrivateRequestMultiError is an error wrapping multiple validation
// errors returned by VPCGetPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type VPCGetPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCGetPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCGetPrivateRequestMultiError) AllErrors() []error { return m }

// VPCGetPrivateRequestValidationError is the validation error returned by
// VPCGetPrivateRequest.Validate if the designated constraints aren't met.
type VPCGetPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCGetPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCGetPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCGetPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCGetPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCGetPrivateRequestValidationError) ErrorName() string {
	return "VPCGetPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VPCGetPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCGetPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCGetPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCGetPrivateRequestValidationError{}

// Validate checks the field values on VPCPrivate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VPCPrivateMultiError, or
// nil if none found.
func (m *VPCPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCPrivateMultiError(errors)
	}

	return nil
}

// VPCPrivateMultiError is an error wrapping multiple validation errors
// returned by VPCPrivate.ValidateAll() if the designated constraints aren't met.
type VPCPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCPrivateMultiError) AllErrors() []error { return m }

// VPCPrivateValidationError is the validation error returned by
// VPCPrivate.Validate if the designated constraints aren't met.
type VPCPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCPrivateValidationError) ErrorName() string { return "VPCPrivateValidationError" }

// Error satisfies the builtin error interface
func (e VPCPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCPrivateValidationError{}

// Validate checks the field values on VPCPrivateWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCPrivateWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCPrivateWatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCPrivateWatchResponseMultiError, or nil if none found.
func (m *VPCPrivateWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCPrivateWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCPrivateWatchResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Spec

	// no validation rules for Status

	if len(errors) > 0 {
		return VPCPrivateWatchResponseMultiError(errors)
	}

	return nil
}

// VPCPrivateWatchResponseMultiError is an error wrapping multiple validation
// errors returned by VPCPrivateWatchResponse.ValidateAll() if the designated
// constraints aren't met.
type VPCPrivateWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCPrivateWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCPrivateWatchResponseMultiError) AllErrors() []error { return m }

// VPCPrivateWatchResponseValidationError is the validation error returned by
// VPCPrivateWatchResponse.Validate if the designated constraints aren't met.
type VPCPrivateWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCPrivateWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCPrivateWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCPrivateWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCPrivateWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCPrivateWatchResponseValidationError) ErrorName() string {
	return "VPCPrivateWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VPCPrivateWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCPrivateWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCPrivateWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCPrivateWatchResponseValidationError{}

// Validate checks the field values on VPCUpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCUpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCUpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCUpdateStatusRequestMultiError, or nil if none found.
func (m *VPCUpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCUpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCUpdateStatusRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCUpdateStatusRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCUpdateStatusRequestMultiError(errors)
	}

	return nil
}

// VPCUpdateStatusRequestMultiError is an error wrapping multiple validation
// errors returned by VPCUpdateStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type VPCUpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCUpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCUpdateStatusRequestMultiError) AllErrors() []error { return m }

// VPCUpdateStatusRequestValidationError is the validation error returned by
// VPCUpdateStatusRequest.Validate if the designated constraints aren't met.
type VPCUpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCUpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCUpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCUpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCUpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCUpdateStatusRequestValidationError) ErrorName() string {
	return "VPCUpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VPCUpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCUpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCUpdateStatusRequestValidationError{}

// Validate checks the field values on VPCIdReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCIdReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VPCIdReferenceMultiError,
// or nil if none found.
func (m *VPCIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return VPCIdReferenceMultiError(errors)
	}

	return nil
}

// VPCIdReferenceMultiError is an error wrapping multiple validation errors
// returned by VPCIdReference.ValidateAll() if the designated constraints
// aren't met.
type VPCIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCIdReferenceMultiError) AllErrors() []error { return m }

// VPCIdReferenceValidationError is the validation error returned by
// VPCIdReference.Validate if the designated constraints aren't met.
type VPCIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCIdReferenceValidationError) ErrorName() string { return "VPCIdReferenceValidationError" }

// Error satisfies the builtin error interface
func (e VPCIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCIdReferenceValidationError{}

// Validate checks the field values on VPCMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCMetadataPrivateMultiError, or nil if none found.
func (m *VPCMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCMetadataPrivateValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCMetadataPrivateMultiError(errors)
	}

	return nil
}

// VPCMetadataPrivateMultiError is an error wrapping multiple validation errors
// returned by VPCMetadataPrivate.ValidateAll() if the designated constraints
// aren't met.
type VPCMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMetadataPrivateMultiError) AllErrors() []error { return m }

// VPCMetadataPrivateValidationError is the validation error returned by
// VPCMetadataPrivate.Validate if the designated constraints aren't met.
type VPCMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCMetadataPrivateValidationError) ErrorName() string {
	return "VPCMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e VPCMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCMetadataPrivateValidationError{}

// Validate checks the field values on VPCSpecPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCSpecPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VPCSpecPrivateMultiError,
// or nil if none found.
func (m *VPCSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CidrBlock

	if len(errors) > 0 {
		return VPCSpecPrivateMultiError(errors)
	}

	return nil
}

// VPCSpecPrivateMultiError is an error wrapping multiple validation errors
// returned by VPCSpecPrivate.ValidateAll() if the designated constraints
// aren't met.
type VPCSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCSpecPrivateMultiError) AllErrors() []error { return m }

// VPCSpecPrivateValidationError is the validation error returned by
// VPCSpecPrivate.Validate if the designated constraints aren't met.
type VPCSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCSpecPrivateValidationError) ErrorName() string { return "VPCSpecPrivateValidationError" }

// Error satisfies the builtin error interface
func (e VPCSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCSpecPrivateValidationError{}

// Validate checks the field values on VPCStatusPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCStatusPrivateMultiError, or nil if none found.
func (m *VPCStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if len(errors) > 0 {
		return VPCStatusPrivateMultiError(errors)
	}

	return nil
}

// VPCStatusPrivateMultiError is an error wrapping multiple validation errors
// returned by VPCStatusPrivate.ValidateAll() if the designated constraints
// aren't met.
type VPCStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCStatusPrivateMultiError) AllErrors() []error { return m }

// VPCStatusPrivateValidationError is the validation error returned by
// VPCStatusPrivate.Validate if the designated constraints aren't met.
type VPCStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCStatusPrivateValidationError) ErrorName() string { return "VPCStatusPrivateValidationError" }

// Error satisfies the builtin error interface
func (e VPCStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCStatusPrivateValidationError{}

// Validate checks the field values on VPCSearchStreamPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCSearchStreamPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCSearchStreamPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VPCSearchStreamPrivateRequestMultiError, or nil if none found.
func (m *VPCSearchStreamPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCSearchStreamPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VPCSearchStreamPrivateRequestMultiError(errors)
	}

	return nil
}

// VPCSearchStreamPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by VPCSearchStreamPrivateRequest.ValidateAll()
// if the designated constraints aren't met.
type VPCSearchStreamPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCSearchStreamPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCSearchStreamPrivateRequestMultiError) AllErrors() []error { return m }

// VPCSearchStreamPrivateRequestValidationError is the validation error
// returned by VPCSearchStreamPrivateRequest.Validate if the designated
// constraints aren't met.
type VPCSearchStreamPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCSearchStreamPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCSearchStreamPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCSearchStreamPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCSearchStreamPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCSearchStreamPrivateRequestValidationError) ErrorName() string {
	return "VPCSearchStreamPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VPCSearchStreamPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCSearchStreamPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCSearchStreamPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCSearchStreamPrivateRequestValidationError{}

// Validate checks the field values on VPCWatchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCWatchResponseMultiError, or nil if none found.
func (m *VPCWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCWatchResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCWatchResponseMultiError(errors)
	}

	return nil
}

// VPCWatchResponseMultiError is an error wrapping multiple validation errors
// returned by VPCWatchResponse.ValidateAll() if the designated constraints
// aren't met.
type VPCWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCWatchResponseMultiError) AllErrors() []error { return m }

// VPCWatchResponseValidationError is the validation error returned by
// VPCWatchResponse.Validate if the designated constraints aren't met.
type VPCWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCWatchResponseValidationError) ErrorName() string { return "VPCWatchResponseValidationError" }

// Error satisfies the builtin error interface
func (e VPCWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCWatchResponseValidationError{}

// Validate checks the field values on VPCWatchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCWatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCWatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCWatchRequestMultiError, or nil if none found.
func (m *VPCWatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCWatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return VPCWatchRequestMultiError(errors)
	}

	return nil
}

// VPCWatchRequestMultiError is an error wrapping multiple validation errors
// returned by VPCWatchRequest.ValidateAll() if the designated constraints
// aren't met.
type VPCWatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCWatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCWatchRequestMultiError) AllErrors() []error { return m }

// VPCWatchRequestValidationError is the validation error returned by
// VPCWatchRequest.Validate if the designated constraints aren't met.
type VPCWatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCWatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCWatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCWatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCWatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCWatchRequestValidationError) ErrorName() string { return "VPCWatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e VPCWatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCWatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCWatchRequestValidationError{}
