// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: storage_kms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageKMSPrivateServiceClient is the client API for StorageKMSPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageKMSPrivateServiceClient interface {
	// Store the secrets
	Put(ctx context.Context, in *StoreSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the secrets
	Get(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type storageKMSPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageKMSPrivateServiceClient(cc grpc.ClientConnInterface) StorageKMSPrivateServiceClient {
	return &storageKMSPrivateServiceClient{cc}
}

func (c *storageKMSPrivateServiceClient) Put(ctx context.Context, in *StoreSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.StorageKMSPrivateService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageKMSPrivateServiceClient) Get(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, "/proto.StorageKMSPrivateService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageKMSPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.StorageKMSPrivateService/PingPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageKMSPrivateServiceClient) Delete(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.StorageKMSPrivateService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageKMSPrivateServiceServer is the server API for StorageKMSPrivateService service.
// All implementations must embed UnimplementedStorageKMSPrivateServiceServer
// for forward compatibility
type StorageKMSPrivateServiceServer interface {
	// Store the secrets
	Put(context.Context, *StoreSecretRequest) (*emptypb.Empty, error)
	// Get the secrets
	Get(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	// PingPrivate returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStorageKMSPrivateServiceServer()
}

// UnimplementedStorageKMSPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageKMSPrivateServiceServer struct {
}

func (UnimplementedStorageKMSPrivateServiceServer) Put(context.Context, *StoreSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedStorageKMSPrivateServiceServer) Get(context.Context, *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStorageKMSPrivateServiceServer) PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPrivate not implemented")
}
func (UnimplementedStorageKMSPrivateServiceServer) Delete(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStorageKMSPrivateServiceServer) mustEmbedUnimplementedStorageKMSPrivateServiceServer() {
}

// UnsafeStorageKMSPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageKMSPrivateServiceServer will
// result in compilation errors.
type UnsafeStorageKMSPrivateServiceServer interface {
	mustEmbedUnimplementedStorageKMSPrivateServiceServer()
}

func RegisterStorageKMSPrivateServiceServer(s grpc.ServiceRegistrar, srv StorageKMSPrivateServiceServer) {
	s.RegisterService(&StorageKMSPrivateService_ServiceDesc, srv)
}

func _StorageKMSPrivateService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageKMSPrivateServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageKMSPrivateService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageKMSPrivateServiceServer).Put(ctx, req.(*StoreSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageKMSPrivateService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageKMSPrivateServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageKMSPrivateService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageKMSPrivateServiceServer).Get(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageKMSPrivateService_PingPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageKMSPrivateServiceServer).PingPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageKMSPrivateService/PingPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageKMSPrivateServiceServer).PingPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageKMSPrivateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageKMSPrivateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageKMSPrivateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageKMSPrivateServiceServer).Delete(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageKMSPrivateService_ServiceDesc is the grpc.ServiceDesc for StorageKMSPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageKMSPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StorageKMSPrivateService",
	HandlerType: (*StorageKMSPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _StorageKMSPrivateService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StorageKMSPrivateService_Get_Handler,
		},
		{
			MethodName: "PingPrivate",
			Handler:    _StorageKMSPrivateService_PingPrivate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StorageKMSPrivateService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_kms.proto",
}
