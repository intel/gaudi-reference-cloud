// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: fleet_admin_ui_server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FleetAdminUIServiceClient is the client API for FleetAdminUIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetAdminUIServiceClient interface {
	// Add a CloudAccount to a ComputeNode Pool that the CloudAccount is allowed to launch instances in.
	AddCloudAccountToComputeNodePool(ctx context.Context, in *AddCloudAccountToComputeNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a CloudAccount from the compute node pool
	DeleteCloudAccountFromComputeNodePool(ctx context.Context, in *DeleteCloudAccountFromComputeNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the list of compute nodes
	SearchNodes(ctx context.Context, in *SearchNodesRequest, opts ...grpc.CallOption) (*SearchNodesResponse, error)
	// Update the compute node
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the list of compute node pools
	SearchComputeNodePoolsForNodeAdmin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchComputeNodePoolsForNodeAdminResponse, error)
	// Update the pool
	PutComputeNodePool(ctx context.Context, in *PutComputeNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the list of compute node pools that are allowed to be managed by current user's AGS entitlement.
	SearchComputeNodePoolsForPoolAccountManager(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchComputeNodePoolsForPoolAccountManagerResponse, error)
	// Get the list of cloudaccounts
	SearchCloudAccountsForComputeNodePool(ctx context.Context, in *SearchCloudAccountsForComputeNodePoolRequest, opts ...grpc.CallOption) (*SearchCloudAccountsForComputeNodePoolResponse, error)
	// Get the InstanceType Stats for Node(s)
	SearchInstanceTypeStatsForNode(ctx context.Context, in *SearchInstanceTypeStatsForNodeRequest, opts ...grpc.CallOption) (*SearchInstanceTypeStatsForNodeResponse, error)
}

type fleetAdminUIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetAdminUIServiceClient(cc grpc.ClientConnInterface) FleetAdminUIServiceClient {
	return &fleetAdminUIServiceClient{cc}
}

func (c *fleetAdminUIServiceClient) AddCloudAccountToComputeNodePool(ctx context.Context, in *AddCloudAccountToComputeNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/AddCloudAccountToComputeNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) DeleteCloudAccountFromComputeNodePool(ctx context.Context, in *DeleteCloudAccountFromComputeNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/DeleteCloudAccountFromComputeNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) SearchNodes(ctx context.Context, in *SearchNodesRequest, opts ...grpc.CallOption) (*SearchNodesResponse, error) {
	out := new(SearchNodesResponse)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) SearchComputeNodePoolsForNodeAdmin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchComputeNodePoolsForNodeAdminResponse, error) {
	out := new(SearchComputeNodePoolsForNodeAdminResponse)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/SearchComputeNodePoolsForNodeAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) PutComputeNodePool(ctx context.Context, in *PutComputeNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/PutComputeNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) SearchComputeNodePoolsForPoolAccountManager(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchComputeNodePoolsForPoolAccountManagerResponse, error) {
	out := new(SearchComputeNodePoolsForPoolAccountManagerResponse)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/SearchComputeNodePoolsForPoolAccountManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) SearchCloudAccountsForComputeNodePool(ctx context.Context, in *SearchCloudAccountsForComputeNodePoolRequest, opts ...grpc.CallOption) (*SearchCloudAccountsForComputeNodePoolResponse, error) {
	out := new(SearchCloudAccountsForComputeNodePoolResponse)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/SearchCloudAccountsForComputeNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminUIServiceClient) SearchInstanceTypeStatsForNode(ctx context.Context, in *SearchInstanceTypeStatsForNodeRequest, opts ...grpc.CallOption) (*SearchInstanceTypeStatsForNodeResponse, error) {
	out := new(SearchInstanceTypeStatsForNodeResponse)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminUIService/SearchInstanceTypeStatsForNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetAdminUIServiceServer is the server API for FleetAdminUIService service.
// All implementations must embed UnimplementedFleetAdminUIServiceServer
// for forward compatibility
type FleetAdminUIServiceServer interface {
	// Add a CloudAccount to a ComputeNode Pool that the CloudAccount is allowed to launch instances in.
	AddCloudAccountToComputeNodePool(context.Context, *AddCloudAccountToComputeNodePoolRequest) (*emptypb.Empty, error)
	// Delete a CloudAccount from the compute node pool
	DeleteCloudAccountFromComputeNodePool(context.Context, *DeleteCloudAccountFromComputeNodePoolRequest) (*emptypb.Empty, error)
	// Ping returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Get the list of compute nodes
	SearchNodes(context.Context, *SearchNodesRequest) (*SearchNodesResponse, error)
	// Update the compute node
	UpdateNode(context.Context, *UpdateNodeRequest) (*emptypb.Empty, error)
	// Get the list of compute node pools
	SearchComputeNodePoolsForNodeAdmin(context.Context, *emptypb.Empty) (*SearchComputeNodePoolsForNodeAdminResponse, error)
	// Update the pool
	PutComputeNodePool(context.Context, *PutComputeNodePoolRequest) (*emptypb.Empty, error)
	// Get the list of compute node pools that are allowed to be managed by current user's AGS entitlement.
	SearchComputeNodePoolsForPoolAccountManager(context.Context, *emptypb.Empty) (*SearchComputeNodePoolsForPoolAccountManagerResponse, error)
	// Get the list of cloudaccounts
	SearchCloudAccountsForComputeNodePool(context.Context, *SearchCloudAccountsForComputeNodePoolRequest) (*SearchCloudAccountsForComputeNodePoolResponse, error)
	// Get the InstanceType Stats for Node(s)
	SearchInstanceTypeStatsForNode(context.Context, *SearchInstanceTypeStatsForNodeRequest) (*SearchInstanceTypeStatsForNodeResponse, error)
	mustEmbedUnimplementedFleetAdminUIServiceServer()
}

// UnimplementedFleetAdminUIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFleetAdminUIServiceServer struct {
}

func (UnimplementedFleetAdminUIServiceServer) AddCloudAccountToComputeNodePool(context.Context, *AddCloudAccountToComputeNodePoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCloudAccountToComputeNodePool not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) DeleteCloudAccountFromComputeNodePool(context.Context, *DeleteCloudAccountFromComputeNodePoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudAccountFromComputeNodePool not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) SearchNodes(context.Context, *SearchNodesRequest) (*SearchNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodes not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) UpdateNode(context.Context, *UpdateNodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) SearchComputeNodePoolsForNodeAdmin(context.Context, *emptypb.Empty) (*SearchComputeNodePoolsForNodeAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchComputeNodePoolsForNodeAdmin not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) PutComputeNodePool(context.Context, *PutComputeNodePoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutComputeNodePool not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) SearchComputeNodePoolsForPoolAccountManager(context.Context, *emptypb.Empty) (*SearchComputeNodePoolsForPoolAccountManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchComputeNodePoolsForPoolAccountManager not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) SearchCloudAccountsForComputeNodePool(context.Context, *SearchCloudAccountsForComputeNodePoolRequest) (*SearchCloudAccountsForComputeNodePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCloudAccountsForComputeNodePool not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) SearchInstanceTypeStatsForNode(context.Context, *SearchInstanceTypeStatsForNodeRequest) (*SearchInstanceTypeStatsForNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInstanceTypeStatsForNode not implemented")
}
func (UnimplementedFleetAdminUIServiceServer) mustEmbedUnimplementedFleetAdminUIServiceServer() {}

// UnsafeFleetAdminUIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetAdminUIServiceServer will
// result in compilation errors.
type UnsafeFleetAdminUIServiceServer interface {
	mustEmbedUnimplementedFleetAdminUIServiceServer()
}

func RegisterFleetAdminUIServiceServer(s grpc.ServiceRegistrar, srv FleetAdminUIServiceServer) {
	s.RegisterService(&FleetAdminUIService_ServiceDesc, srv)
}

func _FleetAdminUIService_AddCloudAccountToComputeNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCloudAccountToComputeNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).AddCloudAccountToComputeNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/AddCloudAccountToComputeNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).AddCloudAccountToComputeNodePool(ctx, req.(*AddCloudAccountToComputeNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_DeleteCloudAccountFromComputeNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudAccountFromComputeNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).DeleteCloudAccountFromComputeNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/DeleteCloudAccountFromComputeNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).DeleteCloudAccountFromComputeNodePool(ctx, req.(*DeleteCloudAccountFromComputeNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).SearchNodes(ctx, req.(*SearchNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_SearchComputeNodePoolsForNodeAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).SearchComputeNodePoolsForNodeAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/SearchComputeNodePoolsForNodeAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).SearchComputeNodePoolsForNodeAdmin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_PutComputeNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutComputeNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).PutComputeNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/PutComputeNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).PutComputeNodePool(ctx, req.(*PutComputeNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_SearchComputeNodePoolsForPoolAccountManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).SearchComputeNodePoolsForPoolAccountManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/SearchComputeNodePoolsForPoolAccountManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).SearchComputeNodePoolsForPoolAccountManager(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_SearchCloudAccountsForComputeNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCloudAccountsForComputeNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).SearchCloudAccountsForComputeNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/SearchCloudAccountsForComputeNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).SearchCloudAccountsForComputeNodePool(ctx, req.(*SearchCloudAccountsForComputeNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminUIService_SearchInstanceTypeStatsForNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInstanceTypeStatsForNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminUIServiceServer).SearchInstanceTypeStatsForNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminUIService/SearchInstanceTypeStatsForNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminUIServiceServer).SearchInstanceTypeStatsForNode(ctx, req.(*SearchInstanceTypeStatsForNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetAdminUIService_ServiceDesc is the grpc.ServiceDesc for FleetAdminUIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetAdminUIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FleetAdminUIService",
	HandlerType: (*FleetAdminUIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCloudAccountToComputeNodePool",
			Handler:    _FleetAdminUIService_AddCloudAccountToComputeNodePool_Handler,
		},
		{
			MethodName: "DeleteCloudAccountFromComputeNodePool",
			Handler:    _FleetAdminUIService_DeleteCloudAccountFromComputeNodePool_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FleetAdminUIService_Ping_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _FleetAdminUIService_SearchNodes_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _FleetAdminUIService_UpdateNode_Handler,
		},
		{
			MethodName: "SearchComputeNodePoolsForNodeAdmin",
			Handler:    _FleetAdminUIService_SearchComputeNodePoolsForNodeAdmin_Handler,
		},
		{
			MethodName: "PutComputeNodePool",
			Handler:    _FleetAdminUIService_PutComputeNodePool_Handler,
		},
		{
			MethodName: "SearchComputeNodePoolsForPoolAccountManager",
			Handler:    _FleetAdminUIService_SearchComputeNodePoolsForPoolAccountManager_Handler,
		},
		{
			MethodName: "SearchCloudAccountsForComputeNodePool",
			Handler:    _FleetAdminUIService_SearchCloudAccountsForComputeNodePool_Handler,
		},
		{
			MethodName: "SearchInstanceTypeStatsForNode",
			Handler:    _FleetAdminUIService_SearchInstanceTypeStatsForNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleet_admin_ui_server.proto",
}
