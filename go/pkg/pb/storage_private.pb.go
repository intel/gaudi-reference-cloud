// This file contains PRIVATE services that are intended for IDC infrastructure (controllers)
// and trusted parties. It is not a part of the public API.
//
// After updating this file, run "make generate".
//
// See:
//  - https://protobuf.dev/programming-guides/proto3/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: storage_private.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type APIClientTypes int32

const (
	// called from private apis from trusted services
	APIClientTypes_Private APIClientTypes = 0
	// called from public apis
	APIClientTypes_Public APIClientTypes = 1
)

// Enum value maps for APIClientTypes.
var (
	APIClientTypes_name = map[int32]string{
		0: "Private",
		1: "Public",
	}
	APIClientTypes_value = map[string]int32{
		"Private": 0,
		"Public":  1,
	}
)

func (x APIClientTypes) Enum() *APIClientTypes {
	p := new(APIClientTypes)
	*p = x
	return p
}

func (x APIClientTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIClientTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_private_proto_enumTypes[0].Descriptor()
}

func (APIClientTypes) Type() protoreflect.EnumType {
	return &file_storage_private_proto_enumTypes[0]
}

func (x APIClientTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APIClientTypes.Descriptor instead.
func (APIClientTypes) EnumDescriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{0}
}

type StorageClusterHealth int32

const (
	StorageClusterHealth_StorageClusterStatusUnspecified StorageClusterHealth = 0
	StorageClusterHealth_StorageClusterStatusHealthy     StorageClusterHealth = 1
	StorageClusterHealth_StorageClusterStatusDegraded    StorageClusterHealth = 2
	StorageClusterHealth_StorageClusterStatusUnHealthy   StorageClusterHealth = 3
)

// Enum value maps for StorageClusterHealth.
var (
	StorageClusterHealth_name = map[int32]string{
		0: "StorageClusterStatusUnspecified",
		1: "StorageClusterStatusHealthy",
		2: "StorageClusterStatusDegraded",
		3: "StorageClusterStatusUnHealthy",
	}
	StorageClusterHealth_value = map[string]int32{
		"StorageClusterStatusUnspecified": 0,
		"StorageClusterStatusHealthy":     1,
		"StorageClusterStatusDegraded":    2,
		"StorageClusterStatusUnHealthy":   3,
	}
)

func (x StorageClusterHealth) Enum() *StorageClusterHealth {
	p := new(StorageClusterHealth)
	*p = x
	return p
}

func (x StorageClusterHealth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageClusterHealth) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_private_proto_enumTypes[1].Descriptor()
}

func (StorageClusterHealth) Type() protoreflect.EnumType {
	return &file_storage_private_proto_enumTypes[1]
}

func (x StorageClusterHealth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageClusterHealth.Descriptor instead.
func (StorageClusterHealth) EnumDescriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{1}
}

type BucketSubnetEventStatus int32

const (
	BucketSubnetEventStatus_E_UNSPECIFIED BucketSubnetEventStatus = 0
	BucketSubnetEventStatus_E_ADDING      BucketSubnetEventStatus = 1
	BucketSubnetEventStatus_E_ADDED       BucketSubnetEventStatus = 2
	BucketSubnetEventStatus_E_DELETING    BucketSubnetEventStatus = 3
	BucketSubnetEventStatus_E_DELETED     BucketSubnetEventStatus = 4
	BucketSubnetEventStatus_E_FAILED      BucketSubnetEventStatus = 5
)

// Enum value maps for BucketSubnetEventStatus.
var (
	BucketSubnetEventStatus_name = map[int32]string{
		0: "E_UNSPECIFIED",
		1: "E_ADDING",
		2: "E_ADDED",
		3: "E_DELETING",
		4: "E_DELETED",
		5: "E_FAILED",
	}
	BucketSubnetEventStatus_value = map[string]int32{
		"E_UNSPECIFIED": 0,
		"E_ADDING":      1,
		"E_ADDED":       2,
		"E_DELETING":    3,
		"E_DELETED":     4,
		"E_FAILED":      5,
	}
)

func (x BucketSubnetEventStatus) Enum() *BucketSubnetEventStatus {
	p := new(BucketSubnetEventStatus)
	*p = x
	return p
}

func (x BucketSubnetEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketSubnetEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_private_proto_enumTypes[2].Descriptor()
}

func (BucketSubnetEventStatus) Type() protoreflect.EnumType {
	return &file_storage_private_proto_enumTypes[2]
}

func (x BucketSubnetEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketSubnetEventStatus.Descriptor instead.
func (BucketSubnetEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{2}
}

type FilesystemUpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemIdReference   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *FilesystemStatusPrivate `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FilesystemUpdateStatusRequest) Reset() {
	*x = FilesystemUpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemUpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemUpdateStatusRequest) ProtoMessage() {}

func (x *FilesystemUpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemUpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*FilesystemUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{0}
}

func (x *FilesystemUpdateStatusRequest) GetMetadata() *FilesystemIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemUpdateStatusRequest) GetStatus() *FilesystemStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type FilesystemRemoveFinalizerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemIdReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemRemoveFinalizerRequest) Reset() {
	*x = FilesystemRemoveFinalizerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemRemoveFinalizerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemRemoveFinalizerRequest) ProtoMessage() {}

func (x *FilesystemRemoveFinalizerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemRemoveFinalizerRequest.ProtoReflect.Descriptor instead.
func (*FilesystemRemoveFinalizerRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{1}
}

func (x *FilesystemRemoveFinalizerRequest) GetMetadata() *FilesystemIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FilesystemSearchStreamPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Properties used to filter response
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// resource version is use as a bookmark to indicate
	// sending all requests greater than this version.
	// If not provided, API should return all non-deleted requests
	ResourceVersion string `protobuf:"bytes,2,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *FilesystemSearchStreamPrivateRequest) Reset() {
	*x = FilesystemSearchStreamPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSearchStreamPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSearchStreamPrivateRequest) ProtoMessage() {}

func (x *FilesystemSearchStreamPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSearchStreamPrivateRequest.ProtoReflect.Descriptor instead.
func (*FilesystemSearchStreamPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{2}
}

func (x *FilesystemSearchStreamPrivateRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *FilesystemSearchStreamPrivateRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type FilesystemDeleteUserRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	ClusterId      string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	UserName       string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *FilesystemDeleteUserRequestPrivate) Reset() {
	*x = FilesystemDeleteUserRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDeleteUserRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDeleteUserRequestPrivate) ProtoMessage() {}

func (x *FilesystemDeleteUserRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDeleteUserRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemDeleteUserRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{3}
}

func (x *FilesystemDeleteUserRequestPrivate) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *FilesystemDeleteUserRequestPrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemDeleteUserRequestPrivate) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type FilesystemGetUserRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemGetUserRequestPrivate) Reset() {
	*x = FilesystemGetUserRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemGetUserRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemGetUserRequestPrivate) ProtoMessage() {}

func (x *FilesystemGetUserRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemGetUserRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemGetUserRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{4}
}

func (x *FilesystemGetUserRequestPrivate) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FilesystemRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filesystem *FilesystemPrivate `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
}

func (x *FilesystemRequestResponse) Reset() {
	*x = FilesystemRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemRequestResponse) ProtoMessage() {}

func (x *FilesystemRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemRequestResponse.ProtoReflect.Descriptor instead.
func (*FilesystemRequestResponse) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{5}
}

func (x *FilesystemRequestResponse) GetFilesystem() *FilesystemPrivate {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type FilesystemStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filesystem phase.
	Phase FilesystemPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.FilesystemPhase" json:"phase,omitempty"`
	// Additional details about the state or any error conditions.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A mount interface with backend server
	Mount *FilesystemMountStatusPrivate `protobuf:"bytes,3,opt,name=mount,proto3" json:"mount,omitempty"`
	// A filesystem namespace status
	Namespace *FilesystemNamespaceStatusPrivate `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// User parameters required to login to storage server.
	User *FilesystemUserStatusPrivate `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Volume identifiers from the cluster
	VolumeIdentifiers *VolumeIdentifiers `protobuf:"bytes,6,opt,name=volumeIdentifiers,proto3" json:"volumeIdentifiers,omitempty"`
	ClusterInfo       map[string]string  `protobuf:"bytes,7,rep,name=clusterInfo,proto3" json:"clusterInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FilesystemStatusPrivate) Reset() {
	*x = FilesystemStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemStatusPrivate) ProtoMessage() {}

func (x *FilesystemStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemStatusPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemStatusPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{6}
}

func (x *FilesystemStatusPrivate) GetPhase() FilesystemPhase {
	if x != nil {
		return x.Phase
	}
	return FilesystemPhase_FSProvisioning
}

func (x *FilesystemStatusPrivate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FilesystemStatusPrivate) GetMount() *FilesystemMountStatusPrivate {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *FilesystemStatusPrivate) GetNamespace() *FilesystemNamespaceStatusPrivate {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *FilesystemStatusPrivate) GetUser() *FilesystemUserStatusPrivate {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *FilesystemStatusPrivate) GetVolumeIdentifiers() *VolumeIdentifiers {
	if x != nil {
		return x.VolumeIdentifiers
	}
	return nil
}

func (x *FilesystemStatusPrivate) GetClusterInfo() map[string]string {
	if x != nil {
		return x.ClusterInfo
	}
	return nil
}

type VolumeIdentifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size         string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	TenantId     int64  `protobuf:"varint,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	FilesystemId int64  `protobuf:"varint,3,opt,name=filesystemId,proto3" json:"filesystemId,omitempty"`
}

func (x *VolumeIdentifiers) Reset() {
	*x = VolumeIdentifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeIdentifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeIdentifiers) ProtoMessage() {}

func (x *VolumeIdentifiers) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeIdentifiers.ProtoReflect.Descriptor instead.
func (*VolumeIdentifiers) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{7}
}

func (x *VolumeIdentifiers) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *VolumeIdentifiers) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *VolumeIdentifiers) GetFilesystemId() int64 {
	if x != nil {
		return x.FilesystemId
	}
	return 0
}

type FilesystemGetUserResponsePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filesystem user name
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Filesystem user password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FilesystemGetUserResponsePrivate) Reset() {
	*x = FilesystemGetUserResponsePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemGetUserResponsePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemGetUserResponsePrivate) ProtoMessage() {}

func (x *FilesystemGetUserResponsePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemGetUserResponsePrivate.ProtoReflect.Descriptor instead.
func (*FilesystemGetUserResponsePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{8}
}

func (x *FilesystemGetUserResponsePrivate) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FilesystemGetUserResponsePrivate) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FilesystemUpdateRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *FilesystemUpdateRequestPrivate) Reset() {
	*x = FilesystemUpdateRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemUpdateRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemUpdateRequestPrivate) ProtoMessage() {}

func (x *FilesystemUpdateRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemUpdateRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemUpdateRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{9}
}

func (x *FilesystemUpdateRequestPrivate) GetMetadata() *FilesystemMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemUpdateRequestPrivate) GetSpec() *FilesystemSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FilesystemUserStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filesystem user
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Filesystem password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FilesystemUserStatusPrivate) Reset() {
	*x = FilesystemUserStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemUserStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemUserStatusPrivate) ProtoMessage() {}

func (x *FilesystemUserStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemUserStatusPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemUserStatusPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{10}
}

func (x *FilesystemUserStatusPrivate) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FilesystemUserStatusPrivate) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FilesystemIdReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ResourceId     string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *FilesystemIdReference) Reset() {
	*x = FilesystemIdReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemIdReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemIdReference) ProtoMessage() {}

func (x *FilesystemIdReference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemIdReference.ProtoReflect.Descriptor instead.
func (*FilesystemIdReference) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{11}
}

func (x *FilesystemIdReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *FilesystemIdReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *FilesystemIdReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type FilesystemPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *FilesystemStatusPrivate   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FilesystemPrivate) Reset() {
	*x = FilesystemPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemPrivate) ProtoMessage() {}

func (x *FilesystemPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{12}
}

func (x *FilesystemPrivate) GetMetadata() *FilesystemMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemPrivate) GetSpec() *FilesystemSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *FilesystemPrivate) GetStatus() *FilesystemStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type FilesystemMetadataPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	Description     string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	Labels            map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
	// skip flag to skip quota check
	// If true, quota check will be skipped
	SkipQuotaCheck bool `protobuf:"varint,10,opt,name=skipQuotaCheck,proto3" json:"skipQuotaCheck,omitempty"`
	// skip flag to skip product catalog  check
	// If true, product check will be skipped
	SkipProductCheck bool `protobuf:"varint,11,opt,name=skipProductCheck,proto3" json:"skipProductCheck,omitempty"`
	// calling api client type
	ClientType APIClientTypes `protobuf:"varint,12,opt,name=clientType,proto3,enum=proto.APIClientTypes" json:"clientType,omitempty"`
}

func (x *FilesystemMetadataPrivate) Reset() {
	*x = FilesystemMetadataPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMetadataPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMetadataPrivate) ProtoMessage() {}

func (x *FilesystemMetadataPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMetadataPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemMetadataPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{13}
}

func (x *FilesystemMetadataPrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *FilesystemMetadataPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemMetadataPrivate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *FilesystemMetadataPrivate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *FilesystemMetadataPrivate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FilesystemMetadataPrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FilesystemMetadataPrivate) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *FilesystemMetadataPrivate) GetUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTimestamp
	}
	return nil
}

func (x *FilesystemMetadataPrivate) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

func (x *FilesystemMetadataPrivate) GetSkipQuotaCheck() bool {
	if x != nil {
		return x.SkipQuotaCheck
	}
	return false
}

func (x *FilesystemMetadataPrivate) GetSkipProductCheck() bool {
	if x != nil {
		return x.SkipProductCheck
	}
	return false
}

func (x *FilesystemMetadataPrivate) GetClientType() APIClientTypes {
	if x != nil {
		return x.ClientType
	}
	return APIClientTypes_Private
}

type FilesystemSpecPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented.
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// Requested size in GB
	Request *FilesystemCapacity `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// storage class - Not Implemented
	StorageClass FilesystemStorageClass `protobuf:"varint,3,opt,name=storageClass,proto3,enum=proto.FilesystemStorageClass" json:"storageClass,omitempty"`
	// Filesystem type - GeneralCompute (VM, BM) or K8s
	FilesystemType FilesystemType `protobuf:"varint,4,opt,name=filesystemType,proto3,enum=proto.FilesystemType" json:"filesystemType,omitempty"`
	// Access mode - Not Implemented
	AccessModes FilesystemAccessModes `protobuf:"varint,5,opt,name=accessModes,proto3,enum=proto.FilesystemAccessModes" json:"accessModes,omitempty"`
	// Mount protocols -- Currently supports only weka
	MountProtocol FilesystemMountProtocols `protobuf:"varint,6,opt,name=mountProtocol,proto3,enum=proto.FilesystemMountProtocols" json:"mountProtocol,omitempty"`
	// Encryption flag
	Encrypted bool `protobuf:"varint,7,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// Provider specs indicating scheduling decision
	Scheduler *FilesystemSchedule `protobuf:"bytes,8,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// optional volume path for general purpose VAST storage
	VolumePath string `protobuf:"bytes,9,opt,name=volumePath,proto3" json:"volumePath,omitempty"`
	// Volume security group
	SecurityGroup *VolumeSecurityGroup `protobuf:"bytes,10,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
	// The name of the Instance type
	InstanceType string `protobuf:"bytes,11,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Prefix       string `protobuf:"bytes,12,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *FilesystemSpecPrivate) Reset() {
	*x = FilesystemSpecPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSpecPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSpecPrivate) ProtoMessage() {}

func (x *FilesystemSpecPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSpecPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemSpecPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{14}
}

func (x *FilesystemSpecPrivate) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *FilesystemSpecPrivate) GetRequest() *FilesystemCapacity {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FilesystemSpecPrivate) GetStorageClass() FilesystemStorageClass {
	if x != nil {
		return x.StorageClass
	}
	return FilesystemStorageClass_GeneralPurpose
}

func (x *FilesystemSpecPrivate) GetFilesystemType() FilesystemType {
	if x != nil {
		return x.FilesystemType
	}
	return FilesystemType_Unspecified
}

func (x *FilesystemSpecPrivate) GetAccessModes() FilesystemAccessModes {
	if x != nil {
		return x.AccessModes
	}
	return FilesystemAccessModes_ReadWrite
}

func (x *FilesystemSpecPrivate) GetMountProtocol() FilesystemMountProtocols {
	if x != nil {
		return x.MountProtocol
	}
	return FilesystemMountProtocols_Weka
}

func (x *FilesystemSpecPrivate) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *FilesystemSpecPrivate) GetScheduler() *FilesystemSchedule {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *FilesystemSpecPrivate) GetVolumePath() string {
	if x != nil {
		return x.VolumePath
	}
	return ""
}

func (x *FilesystemSpecPrivate) GetSecurityGroup() *VolumeSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *FilesystemSpecPrivate) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *FilesystemSpecPrivate) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type FilesystemSpecUpdatePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested size in GB
	Request *FilesystemCapacity `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *FilesystemSpecUpdatePrivate) Reset() {
	*x = FilesystemSpecUpdatePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSpecUpdatePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSpecUpdatePrivate) ProtoMessage() {}

func (x *FilesystemSpecUpdatePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSpecUpdatePrivate.ProtoReflect.Descriptor instead.
func (*FilesystemSpecUpdatePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{15}
}

func (x *FilesystemSpecUpdatePrivate) GetRequest() *FilesystemCapacity {
	if x != nil {
		return x.Request
	}
	return nil
}

type FilesystemSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the filesyste volume
	FilesystemName string             `protobuf:"bytes,1,opt,name=filesystemName,proto3" json:"filesystemName,omitempty"`
	Cluster        *AssignedCluster   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace      *AssignedNamespace `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *FilesystemSchedule) Reset() {
	*x = FilesystemSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSchedule) ProtoMessage() {}

func (x *FilesystemSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSchedule.ProtoReflect.Descriptor instead.
func (*FilesystemSchedule) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{16}
}

func (x *FilesystemSchedule) GetFilesystemName() string {
	if x != nil {
		return x.FilesystemName
	}
	return ""
}

func (x *FilesystemSchedule) GetCluster() *AssignedCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *FilesystemSchedule) GetNamespace() *AssignedNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type AssignedCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// cluster address
	ClusterAddr string `protobuf:"bytes,2,opt,name=clusterAddr,proto3" json:"clusterAddr,omitempty"`
	// cluster UUID
	ClusterUUID string `protobuf:"bytes,3,opt,name=clusterUUID,proto3" json:"clusterUUID,omitempty"`
	// cluster version when available
	ClusterVersion *string `protobuf:"bytes,4,opt,name=clusterVersion,proto3,oneof" json:"clusterVersion,omitempty"`
	// cluster endpoint
	AccessEndpoint string `protobuf:"bytes,5,opt,name=accessEndpoint,proto3" json:"accessEndpoint,omitempty"`
}

func (x *AssignedCluster) Reset() {
	*x = AssignedCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedCluster) ProtoMessage() {}

func (x *AssignedCluster) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedCluster.ProtoReflect.Descriptor instead.
func (*AssignedCluster) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{17}
}

func (x *AssignedCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AssignedCluster) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *AssignedCluster) GetClusterUUID() string {
	if x != nil {
		return x.ClusterUUID
	}
	return ""
}

func (x *AssignedCluster) GetClusterVersion() string {
	if x != nil && x.ClusterVersion != nil {
		return *x.ClusterVersion
	}
	return ""
}

func (x *AssignedCluster) GetAccessEndpoint() string {
	if x != nil {
		return x.AccessEndpoint
	}
	return ""
}

type AssignedNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// path to the kms key
	CredentialsPath string `protobuf:"bytes,2,opt,name=credentialsPath,proto3" json:"credentialsPath,omitempty"`
}

func (x *AssignedNamespace) Reset() {
	*x = AssignedNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedNamespace) ProtoMessage() {}

func (x *AssignedNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedNamespace.ProtoReflect.Descriptor instead.
func (*AssignedNamespace) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{18}
}

func (x *AssignedNamespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssignedNamespace) GetCredentialsPath() string {
	if x != nil {
		return x.CredentialsPath
	}
	return ""
}

type FilesystemMountStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clusterName
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// clusterAddr
	ClusterAddr string `protobuf:"bytes,2,opt,name=clusterAddr,proto3" json:"clusterAddr,omitempty"`
	// cluster version when available
	ClusterVersion *string `protobuf:"bytes,3,opt,name=clusterVersion,proto3,oneof" json:"clusterVersion,omitempty"`
	// Name of the filesyste organization
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Username for this filesystem
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Name of the filesyste volume
	FilesystemName string `protobuf:"bytes,6,opt,name=filesystemName,proto3" json:"filesystemName,omitempty"`
}

func (x *FilesystemMountStatusPrivate) Reset() {
	*x = FilesystemMountStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMountStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMountStatusPrivate) ProtoMessage() {}

func (x *FilesystemMountStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMountStatusPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemMountStatusPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{19}
}

func (x *FilesystemMountStatusPrivate) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *FilesystemMountStatusPrivate) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *FilesystemMountStatusPrivate) GetClusterVersion() string {
	if x != nil && x.ClusterVersion != nil {
		return *x.ClusterVersion
	}
	return ""
}

func (x *FilesystemMountStatusPrivate) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FilesystemMountStatusPrivate) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FilesystemMountStatusPrivate) GetFilesystemName() string {
	if x != nil {
		return x.FilesystemName
	}
	return ""
}

type FilesystemNamespaceStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace basic auth -user
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// namespace basic auth -password
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FilesystemNamespaceStatusPrivate) Reset() {
	*x = FilesystemNamespaceStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemNamespaceStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemNamespaceStatusPrivate) ProtoMessage() {}

func (x *FilesystemNamespaceStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemNamespaceStatusPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemNamespaceStatusPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{20}
}

func (x *FilesystemNamespaceStatusPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemNamespaceStatusPrivate) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FilesystemNamespaceStatusPrivate) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FilesystemDeleteRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemDeleteRequestPrivate) Reset() {
	*x = FilesystemDeleteRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDeleteRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDeleteRequestPrivate) ProtoMessage() {}

func (x *FilesystemDeleteRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDeleteRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemDeleteRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{21}
}

func (x *FilesystemDeleteRequestPrivate) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FilesystemCreateRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *FilesystemCreateRequestPrivate) Reset() {
	*x = FilesystemCreateRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemCreateRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemCreateRequestPrivate) ProtoMessage() {}

func (x *FilesystemCreateRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemCreateRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemCreateRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{22}
}

func (x *FilesystemCreateRequestPrivate) GetMetadata() *FilesystemMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemCreateRequestPrivate) GetSpec() *FilesystemSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FilesystemGetRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemGetRequestPrivate) Reset() {
	*x = FilesystemGetRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemGetRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemGetRequestPrivate) ProtoMessage() {}

func (x *FilesystemGetRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemGetRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemGetRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{23}
}

func (x *FilesystemGetRequestPrivate) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FilesystemInOrgGetRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId     string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId          string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	NamespaceCredsPath string `protobuf:"bytes,4,opt,name=namespaceCredsPath,proto3" json:"namespaceCredsPath,omitempty"`
}

func (x *FilesystemInOrgGetRequestPrivate) Reset() {
	*x = FilesystemInOrgGetRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemInOrgGetRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemInOrgGetRequestPrivate) ProtoMessage() {}

func (x *FilesystemInOrgGetRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemInOrgGetRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemInOrgGetRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{24}
}

func (x *FilesystemInOrgGetRequestPrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *FilesystemInOrgGetRequestPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemInOrgGetRequestPrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemInOrgGetRequestPrivate) GetNamespaceCredsPath() string {
	if x != nil {
		return x.NamespaceCredsPath
	}
	return ""
}

type FilesystemOrgsIsExistsResponsePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *FilesystemOrgsIsExistsResponsePrivate) Reset() {
	*x = FilesystemOrgsIsExistsResponsePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgsIsExistsResponsePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgsIsExistsResponsePrivate) ProtoMessage() {}

func (x *FilesystemOrgsIsExistsResponsePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgsIsExistsResponsePrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgsIsExistsResponsePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{25}
}

func (x *FilesystemOrgsIsExistsResponsePrivate) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type FilesystemScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	// current resource assignments
	Assignments []*ResourceSchedule `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	// Filesystem request : read from public spec
	RequestSpec *FilesystemSpecPrivate `protobuf:"bytes,3,opt,name=requestSpec,proto3" json:"requestSpec,omitempty"`
}

func (x *FilesystemScheduleRequest) Reset() {
	*x = FilesystemScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemScheduleRequest) ProtoMessage() {}

func (x *FilesystemScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemScheduleRequest.ProtoReflect.Descriptor instead.
func (*FilesystemScheduleRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{26}
}

func (x *FilesystemScheduleRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *FilesystemScheduleRequest) GetAssignments() []*ResourceSchedule {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *FilesystemScheduleRequest) GetRequestSpec() *FilesystemSpecPrivate {
	if x != nil {
		return x.RequestSpec
	}
	return nil
}

type BucketScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ObjectBucket Spec
	RequestSpec *ObjectBucketSpecPrivate `protobuf:"bytes,1,opt,name=requestSpec,proto3" json:"requestSpec,omitempty"`
	// add any labels
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BucketScheduleRequest) Reset() {
	*x = BucketScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketScheduleRequest) ProtoMessage() {}

func (x *BucketScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketScheduleRequest.ProtoReflect.Descriptor instead.
func (*BucketScheduleRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{27}
}

func (x *BucketScheduleRequest) GetRequestSpec() *ObjectBucketSpecPrivate {
	if x != nil {
		return x.RequestSpec
	}
	return nil
}

func (x *BucketScheduleRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type BucketScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailabilityZone string            `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	Schedule         *BucketSchedule   `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Labels           map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BucketScheduleResponse) Reset() {
	*x = BucketScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketScheduleResponse) ProtoMessage() {}

func (x *BucketScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketScheduleResponse.ProtoReflect.Descriptor instead.
func (*BucketScheduleResponse) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{28}
}

func (x *BucketScheduleResponse) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *BucketScheduleResponse) GetSchedule() *BucketSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *BucketScheduleResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResourceSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// weka cluster id for the resource
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// cluster address
	ClusterAddr string `protobuf:"bytes,2,opt,name=clusterAddr,proto3" json:"clusterAddr,omitempty"`
	// cluster UUID
	ClusterUUID string `protobuf:"bytes,3,opt,name=clusterUUID,proto3" json:"clusterUUID,omitempty"`
	// cluster version
	ClusterVersion string `protobuf:"bytes,4,opt,name=clusterVersion,proto3" json:"clusterVersion,omitempty"`
	// weka namespace for the the resource
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ResourceSchedule) Reset() {
	*x = ResourceSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSchedule) ProtoMessage() {}

func (x *ResourceSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSchedule.ProtoReflect.Descriptor instead.
func (*ResourceSchedule) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{29}
}

func (x *ResourceSchedule) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ResourceSchedule) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *ResourceSchedule) GetClusterUUID() string {
	if x != nil {
		return x.ClusterUUID
	}
	return ""
}

func (x *ResourceSchedule) GetClusterVersion() string {
	if x != nil {
		return x.ClusterVersion
	}
	return ""
}

func (x *ResourceSchedule) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type FilesystemScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string            `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	Schedule       *ResourceSchedule `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// if the recommended schedule contains a new cluster or namespace,
	// then this flag should be true
	NewSchedule bool `protobuf:"varint,3,opt,name=newSchedule,proto3" json:"newSchedule,omitempty"`
}

func (x *FilesystemScheduleResponse) Reset() {
	*x = FilesystemScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemScheduleResponse) ProtoMessage() {}

func (x *FilesystemScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemScheduleResponse.ProtoReflect.Descriptor instead.
func (*FilesystemScheduleResponse) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{30}
}

func (x *FilesystemScheduleResponse) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *FilesystemScheduleResponse) GetSchedule() *ResourceSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *FilesystemScheduleResponse) GetNewSchedule() bool {
	if x != nil {
		return x.NewSchedule
	}
	return false
}

type RegisterAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IpAddr    string `protobuf:"bytes,3,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
}

func (x *RegisterAgentRequest) Reset() {
	*x = RegisterAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAgentRequest) ProtoMessage() {}

func (x *RegisterAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAgentRequest.ProtoReflect.Descriptor instead.
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{31}
}

func (x *RegisterAgentRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RegisterAgentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterAgentRequest) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

type FilesystemOrgsGetRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Prefix    string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *FilesystemOrgsGetRequestPrivate) Reset() {
	*x = FilesystemOrgsGetRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgsGetRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgsGetRequestPrivate) ProtoMessage() {}

func (x *FilesystemOrgsGetRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgsGetRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgsGetRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{32}
}

func (x *FilesystemOrgsGetRequestPrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemOrgsGetRequestPrivate) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type FilesystemOrgsIsExistsRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Prefix    string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *FilesystemOrgsIsExistsRequestPrivate) Reset() {
	*x = FilesystemOrgsIsExistsRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgsIsExistsRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgsIsExistsRequestPrivate) ProtoMessage() {}

func (x *FilesystemOrgsIsExistsRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgsIsExistsRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgsIsExistsRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{33}
}

func (x *FilesystemOrgsIsExistsRequestPrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemOrgsIsExistsRequestPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemOrgsIsExistsRequestPrivate) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type FilesystemOrgsListRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ClusterId string                       `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Prefix    string                       `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *FilesystemOrgsListRequestPrivate) Reset() {
	*x = FilesystemOrgsListRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgsListRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgsListRequestPrivate) ProtoMessage() {}

func (x *FilesystemOrgsListRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgsListRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgsListRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{34}
}

func (x *FilesystemOrgsListRequestPrivate) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemOrgsListRequestPrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemOrgsListRequestPrivate) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type FilesystemUserCreateOrGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterUUID   string `protobuf:"bytes,1,opt,name=clusterUUID,proto3" json:"clusterUUID,omitempty"`
	NamespaceName string `protobuf:"bytes,2,opt,name=namespaceName,proto3" json:"namespaceName,omitempty"`
	UserCredsPath string `protobuf:"bytes,3,opt,name=userCredsPath,proto3" json:"userCredsPath,omitempty"`
	UserName      string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Password      string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	NamespaceId   string `protobuf:"bytes,6,opt,name=namespaceId,proto3" json:"namespaceId,omitempty"`
}

func (x *FilesystemUserCreateOrGetRequest) Reset() {
	*x = FilesystemUserCreateOrGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemUserCreateOrGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemUserCreateOrGetRequest) ProtoMessage() {}

func (x *FilesystemUserCreateOrGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemUserCreateOrGetRequest.ProtoReflect.Descriptor instead.
func (*FilesystemUserCreateOrGetRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{35}
}

func (x *FilesystemUserCreateOrGetRequest) GetClusterUUID() string {
	if x != nil {
		return x.ClusterUUID
	}
	return ""
}

func (x *FilesystemUserCreateOrGetRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *FilesystemUserCreateOrGetRequest) GetUserCredsPath() string {
	if x != nil {
		return x.UserCredsPath
	}
	return ""
}

func (x *FilesystemUserCreateOrGetRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *FilesystemUserCreateOrGetRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *FilesystemUserCreateOrGetRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

type FilesystemUserResponsePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vast Filesystem user name
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// vast Filesystem user password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FilesystemUserResponsePrivate) Reset() {
	*x = FilesystemUserResponsePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemUserResponsePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemUserResponsePrivate) ProtoMessage() {}

func (x *FilesystemUserResponsePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemUserResponsePrivate.ProtoReflect.Descriptor instead.
func (*FilesystemUserResponsePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{36}
}

func (x *FilesystemUserResponsePrivate) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FilesystemUserResponsePrivate) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FilesystemOrgsResponsePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org []*FilesystemOrgsPrivate `protobuf:"bytes,1,rep,name=org,proto3" json:"org,omitempty"`
}

func (x *FilesystemOrgsResponsePrivate) Reset() {
	*x = FilesystemOrgsResponsePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgsResponsePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgsResponsePrivate) ProtoMessage() {}

func (x *FilesystemOrgsResponsePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgsResponsePrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgsResponsePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{37}
}

func (x *FilesystemOrgsResponsePrivate) GetOrg() []*FilesystemOrgsPrivate {
	if x != nil {
		return x.Org
	}
	return nil
}

type FilesystemOrgsPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FilesystemOrgsPrivate) Reset() {
	*x = FilesystemOrgsPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgsPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgsPrivate) ProtoMessage() {}

func (x *FilesystemOrgsPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgsPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgsPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{38}
}

func (x *FilesystemOrgsPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FilesystemAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClientId         string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CustomStatus     string `protobuf:"bytes,4,opt,name=customStatus,proto3" json:"customStatus,omitempty"`
	PredefinedStatus string `protobuf:"bytes,5,opt,name=predefinedStatus,proto3" json:"predefinedStatus,omitempty"`
}

func (x *FilesystemAgent) Reset() {
	*x = FilesystemAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemAgent) ProtoMessage() {}

func (x *FilesystemAgent) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemAgent.ProtoReflect.Descriptor instead.
func (*FilesystemAgent) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{39}
}

func (x *FilesystemAgent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemAgent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilesystemAgent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemAgent) GetCustomStatus() string {
	if x != nil {
		return x.CustomStatus
	}
	return ""
}

func (x *FilesystemAgent) GetPredefinedStatus() string {
	if x != nil {
		return x.PredefinedStatus
	}
	return ""
}

type DeRegisterAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClientId  string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *DeRegisterAgentRequest) Reset() {
	*x = DeRegisterAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeRegisterAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeRegisterAgentRequest) ProtoMessage() {}

func (x *DeRegisterAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeRegisterAgentRequest.ProtoReflect.Descriptor instead.
func (*DeRegisterAgentRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{40}
}

func (x *DeRegisterAgentRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeRegisterAgentRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type GetRegisterAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClientId  string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *GetRegisterAgentRequest) Reset() {
	*x = GetRegisterAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisterAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisterAgentRequest) ProtoMessage() {}

func (x *GetRegisterAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisterAgentRequest.ProtoReflect.Descriptor instead.
func (*GetRegisterAgentRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{41}
}

func (x *GetRegisterAgentRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetRegisterAgentRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type ListRegisteredAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Names     []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ListRegisteredAgentRequest) Reset() {
	*x = ListRegisteredAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegisteredAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegisteredAgentRequest) ProtoMessage() {}

func (x *ListRegisteredAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegisteredAgentRequest.ProtoReflect.Descriptor instead.
func (*ListRegisteredAgentRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{42}
}

func (x *ListRegisteredAgentRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListRegisteredAgentRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type ListClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []string `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListClusterRequest) Reset() {
	*x = ListClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterRequest) ProtoMessage() {}

func (x *ListClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterRequest.ProtoReflect.Descriptor instead.
func (*ListClusterRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{43}
}

func (x *ListClusterRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type FilesystemStorageClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string                  `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name       string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location   string                  `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	VendorType string                  `protobuf:"bytes,4,opt,name=vendorType,proto3" json:"vendorType,omitempty"`
	Labels     map[string]string       `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Capacity   *StorageClusterCapacity `protobuf:"bytes,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Health     string                  `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *FilesystemStorageClusters) Reset() {
	*x = FilesystemStorageClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemStorageClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemStorageClusters) ProtoMessage() {}

func (x *FilesystemStorageClusters) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemStorageClusters.ProtoReflect.Descriptor instead.
func (*FilesystemStorageClusters) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{44}
}

func (x *FilesystemStorageClusters) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemStorageClusters) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemStorageClusters) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *FilesystemStorageClusters) GetVendorType() string {
	if x != nil {
		return x.VendorType
	}
	return ""
}

func (x *FilesystemStorageClusters) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FilesystemStorageClusters) GetCapacity() *StorageClusterCapacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *FilesystemStorageClusters) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

type StorageClusterCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytes     uint64 `protobuf:"varint,1,opt,name=totalBytes,proto3" json:"totalBytes,omitempty"`
	AvailableBytes uint64 `protobuf:"varint,2,opt,name=availableBytes,proto3" json:"availableBytes,omitempty"`
}

func (x *StorageClusterCapacity) Reset() {
	*x = StorageClusterCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageClusterCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClusterCapacity) ProtoMessage() {}

func (x *StorageClusterCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClusterCapacity.ProtoReflect.Descriptor instead.
func (*StorageClusterCapacity) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{45}
}

func (x *StorageClusterCapacity) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *StorageClusterCapacity) GetAvailableBytes() uint64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

type BucketFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BucketId  string `protobuf:"bytes,2,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
}

func (x *BucketFilter) Reset() {
	*x = BucketFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketFilter) ProtoMessage() {}

func (x *BucketFilter) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketFilter.ProtoReflect.Descriptor instead.
func (*BucketFilter) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{46}
}

func (x *BucketFilter) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BucketFilter) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

type BucketCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Bucket capacity
	Capacity *Capacity `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *BucketCapacity) Reset() {
	*x = BucketCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketCapacity) ProtoMessage() {}

func (x *BucketCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketCapacity.ProtoReflect.Descriptor instead.
func (*BucketCapacity) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{47}
}

func (x *BucketCapacity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BucketCapacity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BucketCapacity) GetCapacity() *Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

type Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total amount of allocated bytes for the bucket (quota)
	TotalBytes uint64 `protobuf:"varint,1,opt,name=totalBytes,proto3" json:"totalBytes,omitempty"`
	// Bytes available in the `Bucket` to be used
	AvailableBytes uint64 `protobuf:"varint,2,opt,name=availableBytes,proto3" json:"availableBytes,omitempty"`
}

func (x *Capacity) Reset() {
	*x = Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity) ProtoMessage() {}

func (x *Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity.ProtoReflect.Descriptor instead.
func (*Capacity) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{48}
}

func (x *Capacity) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *Capacity) GetAvailableBytes() uint64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

type CreateBucketUserParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string            `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	CreateParams   *BucketUserParams `protobuf:"bytes,2,opt,name=createParams,proto3" json:"createParams,omitempty"`
}

func (x *CreateBucketUserParams) Reset() {
	*x = CreateBucketUserParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketUserParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketUserParams) ProtoMessage() {}

func (x *CreateBucketUserParams) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketUserParams.ProtoReflect.Descriptor instead.
func (*CreateBucketUserParams) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{49}
}

func (x *CreateBucketUserParams) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CreateBucketUserParams) GetCreateParams() *BucketUserParams {
	if x != nil {
		return x.CreateParams
	}
	return nil
}

type BucketUserParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterUUID    string                      `protobuf:"bytes,2,opt,name=clusterUUID,proto3" json:"clusterUUID,omitempty"`
	UserId         string                      `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Password       string                      `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Spec           []*ObjectUserPermissionSpec `protobuf:"bytes,5,rep,name=spec,proto3" json:"spec,omitempty"`
	SecurityGroup  *BucketSecurityGroup        `protobuf:"bytes,6,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
	ClusterName    string                      `protobuf:"bytes,7,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AccessEndpoint string                      `protobuf:"bytes,8,opt,name=accessEndpoint,proto3" json:"accessEndpoint,omitempty"`
}

func (x *BucketUserParams) Reset() {
	*x = BucketUserParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketUserParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketUserParams) ProtoMessage() {}

func (x *BucketUserParams) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketUserParams.ProtoReflect.Descriptor instead.
func (*BucketUserParams) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{50}
}

func (x *BucketUserParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BucketUserParams) GetClusterUUID() string {
	if x != nil {
		return x.ClusterUUID
	}
	return ""
}

func (x *BucketUserParams) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BucketUserParams) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BucketUserParams) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BucketUserParams) GetSecurityGroup() *BucketSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *BucketUserParams) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *BucketUserParams) GetAccessEndpoint() string {
	if x != nil {
		return x.AccessEndpoint
	}
	return ""
}

type BucketUpdateUserPolicyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalId    string                      `protobuf:"bytes,1,opt,name=principalId,proto3" json:"principalId,omitempty"`
	ClusterUUID    string                      `protobuf:"bytes,2,opt,name=clusterUUID,proto3" json:"clusterUUID,omitempty"`
	Spec           []*ObjectUserPermissionSpec `protobuf:"bytes,3,rep,name=spec,proto3" json:"spec,omitempty"`
	SecurityGroup  *BucketSecurityGroup        `protobuf:"bytes,4,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
	ClusterName    string                      `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AccessEndpoint string                      `protobuf:"bytes,6,opt,name=accessEndpoint,proto3" json:"accessEndpoint,omitempty"`
}

func (x *BucketUpdateUserPolicyParams) Reset() {
	*x = BucketUpdateUserPolicyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketUpdateUserPolicyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketUpdateUserPolicyParams) ProtoMessage() {}

func (x *BucketUpdateUserPolicyParams) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketUpdateUserPolicyParams.ProtoReflect.Descriptor instead.
func (*BucketUpdateUserPolicyParams) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{51}
}

func (x *BucketUpdateUserPolicyParams) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *BucketUpdateUserPolicyParams) GetClusterUUID() string {
	if x != nil {
		return x.ClusterUUID
	}
	return ""
}

func (x *BucketUpdateUserPolicyParams) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BucketUpdateUserPolicyParams) GetSecurityGroup() *BucketSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *BucketUpdateUserPolicyParams) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *BucketUpdateUserPolicyParams) GetAccessEndpoint() string {
	if x != nil {
		return x.AccessEndpoint
	}
	return ""
}

type UpdateBucketUserPolicyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string                        `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	UpdateParams   *BucketUpdateUserPolicyParams `protobuf:"bytes,2,opt,name=updateParams,proto3" json:"updateParams,omitempty"`
}

func (x *UpdateBucketUserPolicyParams) Reset() {
	*x = UpdateBucketUserPolicyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBucketUserPolicyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBucketUserPolicyParams) ProtoMessage() {}

func (x *UpdateBucketUserPolicyParams) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBucketUserPolicyParams.ProtoReflect.Descriptor instead.
func (*UpdateBucketUserPolicyParams) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateBucketUserPolicyParams) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UpdateBucketUserPolicyParams) GetUpdateParams() *BucketUpdateUserPolicyParams {
	if x != nil {
		return x.UpdateParams
	}
	return nil
}

type BucketUpdateUserCredsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalId string `protobuf:"bytes,1,opt,name=principalId,proto3" json:"principalId,omitempty"`
	ClusterUUID string `protobuf:"bytes,2,opt,name=clusterUUID,proto3" json:"clusterUUID,omitempty"`
	UserId      string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Password    string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *BucketUpdateUserCredsParams) Reset() {
	*x = BucketUpdateUserCredsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketUpdateUserCredsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketUpdateUserCredsParams) ProtoMessage() {}

func (x *BucketUpdateUserCredsParams) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketUpdateUserCredsParams.ProtoReflect.Descriptor instead.
func (*BucketUpdateUserCredsParams) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{53}
}

func (x *BucketUpdateUserCredsParams) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *BucketUpdateUserCredsParams) GetClusterUUID() string {
	if x != nil {
		return x.ClusterUUID
	}
	return ""
}

func (x *BucketUpdateUserCredsParams) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BucketUpdateUserCredsParams) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UpdateBucketUserCredsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string                       `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	UpdateParams   *BucketUpdateUserCredsParams `protobuf:"bytes,2,opt,name=updateParams,proto3" json:"updateParams,omitempty"`
}

func (x *UpdateBucketUserCredsParams) Reset() {
	*x = UpdateBucketUserCredsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBucketUserCredsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBucketUserCredsParams) ProtoMessage() {}

func (x *UpdateBucketUserCredsParams) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBucketUserCredsParams.ProtoReflect.Descriptor instead.
func (*UpdateBucketUserCredsParams) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{54}
}

func (x *UpdateBucketUserCredsParams) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UpdateBucketUserCredsParams) GetUpdateParams() *BucketUpdateUserCredsParams {
	if x != nil {
		return x.UpdateParams
	}
	return nil
}

type DeleteBucketUserParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ClusterId      string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	PrincipalId    string `protobuf:"bytes,3,opt,name=principalId,proto3" json:"principalId,omitempty"`
}

func (x *DeleteBucketUserParams) Reset() {
	*x = DeleteBucketUserParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketUserParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketUserParams) ProtoMessage() {}

func (x *DeleteBucketUserParams) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketUserParams.ProtoReflect.Descriptor instead.
func (*DeleteBucketUserParams) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteBucketUserParams) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DeleteBucketUserParams) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteBucketUserParams) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

type BucketPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string                      `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	PrincipalId    string                      `protobuf:"bytes,2,opt,name=principalId,proto3" json:"principalId,omitempty"`
	AccessEndpoint string                      `protobuf:"bytes,3,opt,name=accessEndpoint,proto3" json:"accessEndpoint,omitempty"`
	Spec           []*ObjectUserPermissionSpec `protobuf:"bytes,4,rep,name=spec,proto3" json:"spec,omitempty"`
	ClusterName    string                      `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *BucketPrincipal) Reset() {
	*x = BucketPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketPrincipal) ProtoMessage() {}

func (x *BucketPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketPrincipal.ProtoReflect.Descriptor instead.
func (*BucketPrincipal) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{56}
}

func (x *BucketPrincipal) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BucketPrincipal) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *BucketPrincipal) GetAccessEndpoint() string {
	if x != nil {
		return x.AccessEndpoint
	}
	return ""
}

func (x *BucketPrincipal) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BucketPrincipal) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type FilesystemUserCreateOrUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterUUID        string `protobuf:"bytes,1,opt,name=clusterUUID,proto3" json:"clusterUUID,omitempty"`
	NamespaceName      string `protobuf:"bytes,2,opt,name=namespaceName,proto3" json:"namespaceName,omitempty"`
	NamespaceCredsPath string `protobuf:"bytes,3,opt,name=namespaceCredsPath,proto3" json:"namespaceCredsPath,omitempty"`
	UserName           string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	NewUserPassword    string `protobuf:"bytes,5,opt,name=newUserPassword,proto3" json:"newUserPassword,omitempty"`
}

func (x *FilesystemUserCreateOrUpdateRequest) Reset() {
	*x = FilesystemUserCreateOrUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemUserCreateOrUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemUserCreateOrUpdateRequest) ProtoMessage() {}

func (x *FilesystemUserCreateOrUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemUserCreateOrUpdateRequest.ProtoReflect.Descriptor instead.
func (*FilesystemUserCreateOrUpdateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{57}
}

func (x *FilesystemUserCreateOrUpdateRequest) GetClusterUUID() string {
	if x != nil {
		return x.ClusterUUID
	}
	return ""
}

func (x *FilesystemUserCreateOrUpdateRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *FilesystemUserCreateOrUpdateRequest) GetNamespaceCredsPath() string {
	if x != nil {
		return x.NamespaceCredsPath
	}
	return ""
}

func (x *FilesystemUserCreateOrUpdateRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *FilesystemUserCreateOrUpdateRequest) GetNewUserPassword() string {
	if x != nil {
		return x.NewUserPassword
	}
	return ""
}

type FilesystemOrgCreateRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *FilesystemOrgCreateRequestPrivate) Reset() {
	*x = FilesystemOrgCreateRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgCreateRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgCreateRequestPrivate) ProtoMessage() {}

func (x *FilesystemOrgCreateRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgCreateRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgCreateRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{58}
}

func (x *FilesystemOrgCreateRequestPrivate) GetMetadata() *FilesystemMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemOrgCreateRequestPrivate) GetSpec() *FilesystemSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FilesystemOrgUpdateRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *FilesystemOrgUpdateRequestPrivate) Reset() {
	*x = FilesystemOrgUpdateRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgUpdateRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgUpdateRequestPrivate) ProtoMessage() {}

func (x *FilesystemOrgUpdateRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgUpdateRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgUpdateRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{59}
}

func (x *FilesystemOrgUpdateRequestPrivate) GetMetadata() *FilesystemMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemOrgUpdateRequestPrivate) GetSpec() *FilesystemSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FilesystemOrgPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *FilesystemStatusPrivate   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FilesystemOrgPrivate) Reset() {
	*x = FilesystemOrgPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgPrivate) ProtoMessage() {}

func (x *FilesystemOrgPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{60}
}

func (x *FilesystemOrgPrivate) GetMetadata() *FilesystemMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemOrgPrivate) GetSpec() *FilesystemSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *FilesystemOrgPrivate) GetStatus() *FilesystemStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type FilesystemOrgGetRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Prefix   string                       `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *FilesystemOrgGetRequestPrivate) Reset() {
	*x = FilesystemOrgGetRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgGetRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgGetRequestPrivate) ProtoMessage() {}

func (x *FilesystemOrgGetRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgGetRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgGetRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{61}
}

func (x *FilesystemOrgGetRequestPrivate) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemOrgGetRequestPrivate) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type FilesystemOrgDeleteRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Prefix   string                       `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *FilesystemOrgDeleteRequestPrivate) Reset() {
	*x = FilesystemOrgDeleteRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgDeleteRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgDeleteRequestPrivate) ProtoMessage() {}

func (x *FilesystemOrgDeleteRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgDeleteRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgDeleteRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{62}
}

func (x *FilesystemOrgDeleteRequestPrivate) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemOrgDeleteRequestPrivate) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type FilesystemsInOrgListRequestPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ClusterId string                       `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Prefix    string                       `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *FilesystemsInOrgListRequestPrivate) Reset() {
	*x = FilesystemsInOrgListRequestPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemsInOrgListRequestPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemsInOrgListRequestPrivate) ProtoMessage() {}

func (x *FilesystemsInOrgListRequestPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemsInOrgListRequestPrivate.ProtoReflect.Descriptor instead.
func (*FilesystemsInOrgListRequestPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{63}
}

func (x *FilesystemsInOrgListRequestPrivate) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemsInOrgListRequestPrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FilesystemsInOrgListRequestPrivate) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type FilesystemsInOrgListResponsePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*FilesystemPrivate `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FilesystemsInOrgListResponsePrivate) Reset() {
	*x = FilesystemsInOrgListResponsePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemsInOrgListResponsePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemsInOrgListResponsePrivate) ProtoMessage() {}

func (x *FilesystemsInOrgListResponsePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemsInOrgListResponsePrivate.ProtoReflect.Descriptor instead.
func (*FilesystemsInOrgListResponsePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{64}
}

func (x *FilesystemsInOrgListResponsePrivate) GetItems() []*FilesystemPrivate {
	if x != nil {
		return x.Items
	}
	return nil
}

type FilesystemOrgResponsePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*FilesystemOrgPrivate `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FilesystemOrgResponsePrivate) Reset() {
	*x = FilesystemOrgResponsePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOrgResponsePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOrgResponsePrivate) ProtoMessage() {}

func (x *FilesystemOrgResponsePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOrgResponsePrivate.ProtoReflect.Descriptor instead.
func (*FilesystemOrgResponsePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{65}
}

func (x *FilesystemOrgResponsePrivate) GetItems() []*FilesystemOrgPrivate {
	if x != nil {
		return x.Items
	}
	return nil
}

type FilesystemAccountMetadataReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string  `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Prefix         *string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *FilesystemAccountMetadataReference) Reset() {
	*x = FilesystemAccountMetadataReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemAccountMetadataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemAccountMetadataReference) ProtoMessage() {}

func (x *FilesystemAccountMetadataReference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemAccountMetadataReference.ProtoReflect.Descriptor instead.
func (*FilesystemAccountMetadataReference) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{66}
}

func (x *FilesystemAccountMetadataReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *FilesystemAccountMetadataReference) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

// ------------------------------------------------
//
//	S3 Bucket subnet event structs
//
// ------------------------------------------------
type SubnetEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubnetEventRequest) Reset() {
	*x = SubnetEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetEventRequest) ProtoMessage() {}

func (x *SubnetEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetEventRequest.ProtoReflect.Descriptor instead.
func (*SubnetEventRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{67}
}

type BucketSubnetUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType  BucketSubnetEventStatus `protobuf:"varint,1,opt,name=eventType,proto3,enum=proto.BucketSubnetEventStatus" json:"eventType,omitempty"`
	Principals []*BucketPrincipal      `protobuf:"bytes,2,rep,name=principals,proto3" json:"principals,omitempty"`
	Vnet       *VNetPrivate            `protobuf:"bytes,3,opt,name=vnet,proto3" json:"vnet,omitempty"`
}

func (x *BucketSubnetUpdateEvent) Reset() {
	*x = BucketSubnetUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketSubnetUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketSubnetUpdateEvent) ProtoMessage() {}

func (x *BucketSubnetUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketSubnetUpdateEvent.ProtoReflect.Descriptor instead.
func (*BucketSubnetUpdateEvent) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{68}
}

func (x *BucketSubnetUpdateEvent) GetEventType() BucketSubnetEventStatus {
	if x != nil {
		return x.EventType
	}
	return BucketSubnetEventStatus_E_UNSPECIFIED
}

func (x *BucketSubnetUpdateEvent) GetPrincipals() []*BucketPrincipal {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *BucketSubnetUpdateEvent) GetVnet() *VNetPrivate {
	if x != nil {
		return x.Vnet
	}
	return nil
}

type BucketSubnetStatusUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId      string                  `protobuf:"bytes,1,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	CloudacccountId string                  `protobuf:"bytes,2,opt,name=cloudacccountId,proto3" json:"cloudacccountId,omitempty"`
	VNetName        string                  `protobuf:"bytes,3,opt,name=vNetName,proto3" json:"vNetName,omitempty"`
	Status          BucketSubnetEventStatus `protobuf:"varint,4,opt,name=status,proto3,enum=proto.BucketSubnetEventStatus" json:"status,omitempty"`
}

func (x *BucketSubnetStatusUpdateRequest) Reset() {
	*x = BucketSubnetStatusUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketSubnetStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketSubnetStatusUpdateRequest) ProtoMessage() {}

func (x *BucketSubnetStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketSubnetStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*BucketSubnetStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{69}
}

func (x *BucketSubnetStatusUpdateRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *BucketSubnetStatusUpdateRequest) GetCloudacccountId() string {
	if x != nil {
		return x.CloudacccountId
	}
	return ""
}

func (x *BucketSubnetStatusUpdateRequest) GetVNetName() string {
	if x != nil {
		return x.VNetName
	}
	return ""
}

func (x *BucketSubnetStatusUpdateRequest) GetStatus() BucketSubnetEventStatus {
	if x != nil {
		return x.Status
	}
	return BucketSubnetEventStatus_E_UNSPECIFIED
}

// ------------------------------------------------
//
//	S3 Object Bucket structs
//
// ------------------------------------------------
type ObjectBucketCreatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *ObjectBucketSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ObjectBucketCreatePrivateRequest) Reset() {
	*x = ObjectBucketCreatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketCreatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketCreatePrivateRequest) ProtoMessage() {}

func (x *ObjectBucketCreatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketCreatePrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketCreatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{70}
}

func (x *ObjectBucketCreatePrivateRequest) GetMetadata() *ObjectBucketMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectBucketCreatePrivateRequest) GetSpec() *ObjectBucketSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ObjectBucketMetadataPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	BucketId       string `protobuf:"bytes,4,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,5,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	Description     string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	Labels            map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
	// skip flag to skip quota check
	// If true, quota check will be skipped
	SkipQuotaCheck bool `protobuf:"varint,10,opt,name=skipQuotaCheck,proto3" json:"skipQuotaCheck,omitempty"`
	// skip flag to skip product catalog  check
	// If true, product check will be skipped
	SkipProductCheck bool `protobuf:"varint,11,opt,name=skipProductCheck,proto3" json:"skipProductCheck,omitempty"`
	// calling api client type
	ClientType APIClientTypes `protobuf:"varint,12,opt,name=clientType,proto3,enum=proto.APIClientTypes" json:"clientType,omitempty"`
}

func (x *ObjectBucketMetadataPrivate) Reset() {
	*x = ObjectBucketMetadataPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketMetadataPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketMetadataPrivate) ProtoMessage() {}

func (x *ObjectBucketMetadataPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketMetadataPrivate.ProtoReflect.Descriptor instead.
func (*ObjectBucketMetadataPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{71}
}

func (x *ObjectBucketMetadataPrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectBucketMetadataPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectBucketMetadataPrivate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ObjectBucketMetadataPrivate) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *ObjectBucketMetadataPrivate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ObjectBucketMetadataPrivate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectBucketMetadataPrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectBucketMetadataPrivate) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *ObjectBucketMetadataPrivate) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

func (x *ObjectBucketMetadataPrivate) GetSkipQuotaCheck() bool {
	if x != nil {
		return x.SkipQuotaCheck
	}
	return false
}

func (x *ObjectBucketMetadataPrivate) GetSkipProductCheck() bool {
	if x != nil {
		return x.SkipProductCheck
	}
	return false
}

func (x *ObjectBucketMetadataPrivate) GetClientType() APIClientTypes {
	if x != nil {
		return x.ClientType
	}
	return APIClientTypes_Private
}

type ObjectBucketSpecPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not used at the momemt.
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// Requested size in GB
	Request *StorageCapacityRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// Is bucket should be versioned, cannot be changed later
	Versioned bool `protobuf:"varint,3,opt,name=versioned,proto3" json:"versioned,omitempty"`
	// Default access policy for the bucket
	AccessPolicy BucketAccessPolicy `protobuf:"varint,4,opt,name=accessPolicy,proto3,enum=proto.BucketAccessPolicy" json:"accessPolicy,omitempty"`
	Schedule     *BucketSchedule    `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The name of the Instance type
	InstanceType string `protobuf:"bytes,6,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *ObjectBucketSpecPrivate) Reset() {
	*x = ObjectBucketSpecPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketSpecPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketSpecPrivate) ProtoMessage() {}

func (x *ObjectBucketSpecPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketSpecPrivate.ProtoReflect.Descriptor instead.
func (*ObjectBucketSpecPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{72}
}

func (x *ObjectBucketSpecPrivate) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *ObjectBucketSpecPrivate) GetRequest() *StorageCapacityRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ObjectBucketSpecPrivate) GetVersioned() bool {
	if x != nil {
		return x.Versioned
	}
	return false
}

func (x *ObjectBucketSpecPrivate) GetAccessPolicy() BucketAccessPolicy {
	if x != nil {
		return x.AccessPolicy
	}
	return BucketAccessPolicy_UNSPECIFIED
}

func (x *ObjectBucketSpecPrivate) GetSchedule() *BucketSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ObjectBucketSpecPrivate) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type BucketSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *AssignedCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *BucketSchedule) Reset() {
	*x = BucketSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketSchedule) ProtoMessage() {}

func (x *BucketSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketSchedule.ProtoReflect.Descriptor instead.
func (*BucketSchedule) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{73}
}

func (x *BucketSchedule) GetCluster() *AssignedCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type ObjectBucketPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *ObjectBucketSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *ObjectBucketStatus          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ObjectBucketPrivate) Reset() {
	*x = ObjectBucketPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketPrivate) ProtoMessage() {}

func (x *ObjectBucketPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketPrivate.ProtoReflect.Descriptor instead.
func (*ObjectBucketPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{74}
}

func (x *ObjectBucketPrivate) GetMetadata() *ObjectBucketMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectBucketPrivate) GetSpec() *ObjectBucketSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ObjectBucketPrivate) GetStatus() *ObjectBucketStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ObjectBucketGetPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectBucketGetPrivateRequest) Reset() {
	*x = ObjectBucketGetPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketGetPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketGetPrivateRequest) ProtoMessage() {}

func (x *ObjectBucketGetPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketGetPrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketGetPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{75}
}

func (x *ObjectBucketGetPrivateRequest) GetMetadata() *ObjectBucketMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectBucketSearchPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Properties used to filter response
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// resource version is use as a bookmark to indicate
	// sending all requests greater than this version.
	// If not provided, API should return all non-deleted requests
	ResourceVersion string `protobuf:"bytes,2,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *ObjectBucketSearchPrivateRequest) Reset() {
	*x = ObjectBucketSearchPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketSearchPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketSearchPrivateRequest) ProtoMessage() {}

func (x *ObjectBucketSearchPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketSearchPrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketSearchPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{76}
}

func (x *ObjectBucketSearchPrivateRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *ObjectBucketSearchPrivateRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type ObjectBucketSearchPrivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket *ObjectBucketPrivate `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *ObjectBucketSearchPrivateResponse) Reset() {
	*x = ObjectBucketSearchPrivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketSearchPrivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketSearchPrivateResponse) ProtoMessage() {}

func (x *ObjectBucketSearchPrivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketSearchPrivateResponse.ProtoReflect.Descriptor instead.
func (*ObjectBucketSearchPrivateResponse) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{77}
}

func (x *ObjectBucketSearchPrivateResponse) GetBucket() *ObjectBucketPrivate {
	if x != nil {
		return x.Bucket
	}
	return nil
}

type ObjectBucketDeletePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectBucketDeletePrivateRequest) Reset() {
	*x = ObjectBucketDeletePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketDeletePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketDeletePrivateRequest) ProtoMessage() {}

func (x *ObjectBucketDeletePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketDeletePrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketDeletePrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{78}
}

func (x *ObjectBucketDeletePrivateRequest) GetMetadata() *ObjectBucketMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ------------------------------------------------
//
//	S3 Bucket Lifecycle structs
//
// ------------------------------------------------
type BucketLifecycleRuleCreatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *BucketLifecycleRuleSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *BucketLifecycleRuleCreatePrivateRequest) Reset() {
	*x = BucketLifecycleRuleCreatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleCreatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleCreatePrivateRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleCreatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleCreatePrivateRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleCreatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{79}
}

func (x *BucketLifecycleRuleCreatePrivateRequest) GetMetadata() *BucketLifecycleRuleMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketLifecycleRuleCreatePrivateRequest) GetSpec() *BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type BucketLifecycleRulePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *BucketLifecycleRuleSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *BucketLifecycleRuleStatus   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BucketLifecycleRulePrivate) Reset() {
	*x = BucketLifecycleRulePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRulePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRulePrivate) ProtoMessage() {}

func (x *BucketLifecycleRulePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRulePrivate.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRulePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{80}
}

func (x *BucketLifecycleRulePrivate) GetMetadata() *BucketLifecycleRuleMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketLifecycleRulePrivate) GetSpec() *BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BucketLifecycleRulePrivate) GetStatus() *BucketLifecycleRuleStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type BucketLifecycleRuleGetPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BucketLifecycleRuleGetPrivateRequest) Reset() {
	*x = BucketLifecycleRuleGetPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleGetPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleGetPrivateRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleGetPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleGetPrivateRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleGetPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{81}
}

func (x *BucketLifecycleRuleGetPrivateRequest) GetMetadata() *BucketLifecycleRuleMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BucketLifecycleRuleSearchPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	BucketId       string `protobuf:"bytes,2,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
}

func (x *BucketLifecycleRuleSearchPrivateRequest) Reset() {
	*x = BucketLifecycleRuleSearchPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleSearchPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleSearchPrivateRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleSearchPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleSearchPrivateRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleSearchPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{82}
}

func (x *BucketLifecycleRuleSearchPrivateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *BucketLifecycleRuleSearchPrivateRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

type BucketLifecycleRuleSearchPrivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleRule *BucketLifecycleRulePrivate `protobuf:"bytes,1,opt,name=lifecycleRule,proto3" json:"lifecycleRule,omitempty"`
}

func (x *BucketLifecycleRuleSearchPrivateResponse) Reset() {
	*x = BucketLifecycleRuleSearchPrivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleSearchPrivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleSearchPrivateResponse) ProtoMessage() {}

func (x *BucketLifecycleRuleSearchPrivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleSearchPrivateResponse.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleSearchPrivateResponse) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{83}
}

func (x *BucketLifecycleRuleSearchPrivateResponse) GetLifecycleRule() *BucketLifecycleRulePrivate {
	if x != nil {
		return x.LifecycleRule
	}
	return nil
}

type BucketLifecycleRuleUpdatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *BucketLifecycleRuleSpec        `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *BucketLifecycleRuleUpdatePrivateRequest) Reset() {
	*x = BucketLifecycleRuleUpdatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleUpdatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleUpdatePrivateRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleUpdatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleUpdatePrivateRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleUpdatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{84}
}

func (x *BucketLifecycleRuleUpdatePrivateRequest) GetMetadata() *BucketLifecycleRuleMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketLifecycleRuleUpdatePrivateRequest) GetSpec() *BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type BucketLifecycleRuleDeletePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BucketLifecycleRuleDeletePrivateRequest) Reset() {
	*x = BucketLifecycleRuleDeletePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleDeletePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleDeletePrivateRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleDeletePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleDeletePrivateRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleDeletePrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{85}
}

func (x *BucketLifecycleRuleDeletePrivateRequest) GetMetadata() *BucketLifecycleRuleMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateObjectUserPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataCreate   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     []*ObjectUserPermissionSpec `protobuf:"bytes,2,rep,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateObjectUserPrivateRequest) Reset() {
	*x = CreateObjectUserPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObjectUserPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectUserPrivateRequest) ProtoMessage() {}

func (x *CreateObjectUserPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectUserPrivateRequest.ProtoReflect.Descriptor instead.
func (*CreateObjectUserPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{86}
}

func (x *CreateObjectUserPrivateRequest) GetMetadata() *ObjectUserMetadataCreate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateObjectUserPrivateRequest) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ObjectUserPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataPrivate  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     []*ObjectUserPermissionSpec `protobuf:"bytes,2,rep,name=spec,proto3" json:"spec,omitempty"`
	Status   *ObjectUserStatusPrivate    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ObjectUserPrivate) Reset() {
	*x = ObjectUserPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserPrivate) ProtoMessage() {}

func (x *ObjectUserPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserPrivate.ProtoReflect.Descriptor instead.
func (*ObjectUserPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{87}
}

func (x *ObjectUserPrivate) GetMetadata() *ObjectUserMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectUserPrivate) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ObjectUserPrivate) GetStatus() *ObjectUserStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type ObjectUserMetadataPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId    string                 `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserId            string                 `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Labels            map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	DeleteTimestamp   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleteTimestamp,proto3" json:"deleteTimestamp,omitempty"`
}

func (x *ObjectUserMetadataPrivate) Reset() {
	*x = ObjectUserMetadataPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserMetadataPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserMetadataPrivate) ProtoMessage() {}

func (x *ObjectUserMetadataPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserMetadataPrivate.ProtoReflect.Descriptor instead.
func (*ObjectUserMetadataPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{88}
}

func (x *ObjectUserMetadataPrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectUserMetadataPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectUserMetadataPrivate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ObjectUserMetadataPrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectUserMetadataPrivate) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *ObjectUserMetadataPrivate) GetUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTimestamp
	}
	return nil
}

func (x *ObjectUserMetadataPrivate) GetDeleteTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTimestamp
	}
	return nil
}

type ObjectUserStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase     ObjectUserPhase         `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.ObjectUserPhase" json:"phase,omitempty"`
	Principal *AccessPrincipalPrivate `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
}

func (x *ObjectUserStatusPrivate) Reset() {
	*x = ObjectUserStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserStatusPrivate) ProtoMessage() {}

func (x *ObjectUserStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserStatusPrivate.ProtoReflect.Descriptor instead.
func (*ObjectUserStatusPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{89}
}

func (x *ObjectUserStatusPrivate) GetPhase() ObjectUserPhase {
	if x != nil {
		return x.Phase
	}
	return ObjectUserPhase_ObjectUserProvisioning
}

func (x *ObjectUserStatusPrivate) GetPrincipal() *AccessPrincipalPrivate {
	if x != nil {
		return x.Principal
	}
	return nil
}

type AccessPrincipalPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster     *ObjectCluster           `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Credentials *ObjectAccessCredentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	PrincipalId string                   `protobuf:"bytes,3,opt,name=principalId,proto3" json:"principalId,omitempty"`
}

func (x *AccessPrincipalPrivate) Reset() {
	*x = AccessPrincipalPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPrincipalPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPrincipalPrivate) ProtoMessage() {}

func (x *AccessPrincipalPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPrincipalPrivate.ProtoReflect.Descriptor instead.
func (*AccessPrincipalPrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{90}
}

func (x *AccessPrincipalPrivate) GetCluster() *ObjectCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *AccessPrincipalPrivate) GetCredentials() *ObjectAccessCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *AccessPrincipalPrivate) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

type ObjectUserGetPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectUserGetPrivateRequest) Reset() {
	*x = ObjectUserGetPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserGetPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserGetPrivateRequest) ProtoMessage() {}

func (x *ObjectUserGetPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserGetPrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserGetPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{91}
}

func (x *ObjectUserGetPrivateRequest) GetMetadata() *ObjectUserMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectUserUpdatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataRef      `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     []*ObjectUserPermissionSpec `protobuf:"bytes,2,rep,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ObjectUserUpdatePrivateRequest) Reset() {
	*x = ObjectUserUpdatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserUpdatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserUpdatePrivateRequest) ProtoMessage() {}

func (x *ObjectUserUpdatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserUpdatePrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserUpdatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{92}
}

func (x *ObjectUserUpdatePrivateRequest) GetMetadata() *ObjectUserMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectUserUpdatePrivateRequest) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ObjectUserDeletePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectUserDeletePrivateRequest) Reset() {
	*x = ObjectUserDeletePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserDeletePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserDeletePrivateRequest) ProtoMessage() {}

func (x *ObjectUserDeletePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserDeletePrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserDeletePrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{93}
}

func (x *ObjectUserDeletePrivateRequest) GetMetadata() *ObjectUserMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectUserSearchPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Properties used to filter response
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// resource version is use as a bookmark to indicate
	// sending all requests greater than this version.
	// If not provided, API should return all non-deleted requests
	ResourceVersion string `protobuf:"bytes,2,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *ObjectUserSearchPrivateRequest) Reset() {
	*x = ObjectUserSearchPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserSearchPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserSearchPrivateRequest) ProtoMessage() {}

func (x *ObjectUserSearchPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserSearchPrivateRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserSearchPrivateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{94}
}

func (x *ObjectUserSearchPrivateRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *ObjectUserSearchPrivateRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type ObjectUserSearchPrivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *ObjectUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ObjectUserSearchPrivateResponse) Reset() {
	*x = ObjectUserSearchPrivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserSearchPrivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserSearchPrivateResponse) ProtoMessage() {}

func (x *ObjectUserSearchPrivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserSearchPrivateResponse.ProtoReflect.Descriptor instead.
func (*ObjectUserSearchPrivateResponse) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{95}
}

func (x *ObjectUserSearchPrivateResponse) GetUser() *ObjectUser {
	if x != nil {
		return x.User
	}
	return nil
}

type ObjectBucketStatusUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketIdReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *ObjectBucketStatus      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ObjectBucketStatusUpdateRequest) Reset() {
	*x = ObjectBucketStatusUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketStatusUpdateRequest) ProtoMessage() {}

func (x *ObjectBucketStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{96}
}

func (x *ObjectBucketStatusUpdateRequest) GetMetadata() *ObjectBucketIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectBucketStatusUpdateRequest) GetStatus() *ObjectBucketStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ObjectBucketRemoveFinalizerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketIdReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectBucketRemoveFinalizerRequest) Reset() {
	*x = ObjectBucketRemoveFinalizerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketRemoveFinalizerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketRemoveFinalizerRequest) ProtoMessage() {}

func (x *ObjectBucketRemoveFinalizerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketRemoveFinalizerRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketRemoveFinalizerRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{97}
}

func (x *ObjectBucketRemoveFinalizerRequest) GetMetadata() *ObjectBucketIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectUserStatusUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserIdReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *ObjectUserStatus      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ObjectUserStatusUpdateRequest) Reset() {
	*x = ObjectUserStatusUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserStatusUpdateRequest) ProtoMessage() {}

func (x *ObjectUserStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{98}
}

func (x *ObjectUserStatusUpdateRequest) GetMetadata() *ObjectUserIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectUserStatusUpdateRequest) GetStatus() *ObjectUserStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ObjectUserRemoveFinalizerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserIdReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectUserRemoveFinalizerRequest) Reset() {
	*x = ObjectUserRemoveFinalizerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserRemoveFinalizerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserRemoveFinalizerRequest) ProtoMessage() {}

func (x *ObjectUserRemoveFinalizerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserRemoveFinalizerRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserRemoveFinalizerRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{99}
}

func (x *ObjectUserRemoveFinalizerRequest) GetMetadata() *ObjectUserIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectBucketIdReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ResourceId     string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *ObjectBucketIdReference) Reset() {
	*x = ObjectBucketIdReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketIdReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketIdReference) ProtoMessage() {}

func (x *ObjectBucketIdReference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketIdReference.ProtoReflect.Descriptor instead.
func (*ObjectBucketIdReference) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{100}
}

func (x *ObjectBucketIdReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectBucketIdReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ObjectBucketIdReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type ObjectUserIdReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ResourceId     string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *ObjectUserIdReference) Reset() {
	*x = ObjectUserIdReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserIdReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserIdReference) ProtoMessage() {}

func (x *ObjectUserIdReference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserIdReference.ProtoReflect.Descriptor instead.
func (*ObjectUserIdReference) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{101}
}

func (x *ObjectUserIdReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectUserIdReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ObjectUserIdReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type CreateOrUpdateLifecycleRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string                     `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ClusterId      string                     `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BucketId       string                     `protobuf:"bytes,3,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	Spec           []*BucketLifecycleRuleSpec `protobuf:"bytes,4,rep,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateOrUpdateLifecycleRuleRequest) Reset() {
	*x = CreateOrUpdateLifecycleRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateLifecycleRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateLifecycleRuleRequest) ProtoMessage() {}

func (x *CreateOrUpdateLifecycleRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateLifecycleRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateLifecycleRuleRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{102}
}

func (x *CreateOrUpdateLifecycleRuleRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CreateOrUpdateLifecycleRuleRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateOrUpdateLifecycleRuleRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *CreateOrUpdateLifecycleRuleRequest) GetSpec() []*BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type LifecycleRulePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                     `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BucketId  string                     `protobuf:"bytes,2,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	Spec      []*BucketLifecycleRuleSpec `protobuf:"bytes,3,rep,name=spec,proto3" json:"spec,omitempty"`
}

func (x *LifecycleRulePrivate) Reset() {
	*x = LifecycleRulePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifecycleRulePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleRulePrivate) ProtoMessage() {}

func (x *LifecycleRulePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleRulePrivate.ProtoReflect.Descriptor instead.
func (*LifecycleRulePrivate) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{103}
}

func (x *LifecycleRulePrivate) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *LifecycleRulePrivate) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *LifecycleRulePrivate) GetSpec() []*BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type DeleteLifecycleRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ClusterId      string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BucketId       string `protobuf:"bytes,3,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	RuleId         string `protobuf:"bytes,4,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
}

func (x *DeleteLifecycleRuleRequest) Reset() {
	*x = DeleteLifecycleRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_private_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLifecycleRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLifecycleRuleRequest) ProtoMessage() {}

func (x *DeleteLifecycleRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_private_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLifecycleRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteLifecycleRuleRequest) Descriptor() ([]byte, []int) {
	return file_storage_private_proto_rawDescGZIP(), []int{104}
}

func (x *DeleteLifecycleRuleRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DeleteLifecycleRuleRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteLifecycleRuleRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *DeleteLifecycleRuleRequest) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

var File_storage_private_proto protoreflect.FileDescriptor

var file_storage_private_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x20, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x24, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61,
	0x0a, 0x1f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x55, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xf6, 0x03, 0x0a, 0x17, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x05,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x11, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x51,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x67, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x20, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x90,
	0x01, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0x4d, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x89, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a,
	0x11, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x05, 0x0a, 0x19, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48,
	0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84,
	0x05, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x52, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x84, 0x02, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2b, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66,
	0x0a, 0x20, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x60, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x5d, 0x0a, 0x1b, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x20, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3f, 0x0a, 0x25, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x49, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x22, 0xd6, 0x01, 0x0a, 0x15,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x9b, 0x01,
	0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x22, 0x57, 0x0a,
	0x1f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x70, 0x0a, 0x24, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x98, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x22, 0xea, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x4f, 0x0a, 0x1d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f,
	0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x22, 0x2b, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4f, 0x72, 0x67, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xdd, 0x02, 0x0a,
	0x19, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x16,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x48,
	0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x0e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x08, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x85, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x1c, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x97, 0x01,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x95, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x23, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x21,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0x7b, 0x0a, 0x21, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4f, 0x72, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22,
	0x9a, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x49,
	0x6e, 0x4f, 0x72, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x55, 0x0a, 0x23,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x4f, 0x72, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x51, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7c, 0x0a, 0x22, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x04,
	0x76, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x76, 0x6e, 0x65, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x4e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x4e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22,
	0x8b, 0x05, 0x0a, 0x1b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x02,
	0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x02,
	0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x42, 0x0a, 0x0e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x1d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x78, 0x0a, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x21, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x27, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x69, 0x0a, 0x24, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x27, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x73, 0x0a, 0x28, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x27, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x6c, 0x0a, 0x27, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xbe, 0x01,
	0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce,
	0x03, 0x0a, 0x19, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44,
	0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x84, 0x01, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f,
	0x01, 0x0a, 0x1e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x5a, 0x0a, 0x1e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x1e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x1f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x90,
	0x01, 0x0a, 0x1f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x60, 0x0a, 0x22, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x5c, 0x0a, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b,
	0x01, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a,
	0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x84, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b,
	0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x2a, 0x29, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x01,
	0x2a, 0xa1, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x10, 0x03, 0x2a, 0x74, 0x0a, 0x17, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x32, 0xe4, 0x07, 0x0a, 0x18, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6f, 0x72,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x32, 0x9e, 0x05, 0x0a, 0x21, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x6d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x4f, 0x72, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x49, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x32, 0xee, 0x02, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x50,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x32, 0x86, 0x04, 0x0a, 0x26, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46,
	0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x1c, 0x50, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xae, 0x03, 0x0a,
	0x1f, 0x57, 0x65, 0x6b, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x1c, 0x50,
	0x69, 0x6e, 0x67, 0x57, 0x65, 0x6b, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xf8, 0x03,
	0x0a, 0x18, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x15, 0x50, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x94, 0x05, 0x0a, 0x1b, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4f, 0x72, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x4f, 0x72,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4f, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x32,
	0xcc, 0x11, 0x0a, 0x1b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x5c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x77, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x20, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x5c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xac,
	0x02, 0x0a, 0x1d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x67, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x1a, 0x50, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x6d, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b, 0x14, 0x12, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_private_proto_rawDescOnce sync.Once
	file_storage_private_proto_rawDescData = file_storage_private_proto_rawDesc
)

func file_storage_private_proto_rawDescGZIP() []byte {
	file_storage_private_proto_rawDescOnce.Do(func() {
		file_storage_private_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_private_proto_rawDescData)
	})
	return file_storage_private_proto_rawDescData
}

var file_storage_private_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_storage_private_proto_msgTypes = make([]protoimpl.MessageInfo, 112)
var file_storage_private_proto_goTypes = []interface{}{
	(APIClientTypes)(0),                              // 0: proto.APIClientTypes
	(StorageClusterHealth)(0),                        // 1: proto.StorageClusterHealth
	(BucketSubnetEventStatus)(0),                     // 2: proto.BucketSubnetEventStatus
	(*FilesystemUpdateStatusRequest)(nil),            // 3: proto.FilesystemUpdateStatusRequest
	(*FilesystemRemoveFinalizerRequest)(nil),         // 4: proto.FilesystemRemoveFinalizerRequest
	(*FilesystemSearchStreamPrivateRequest)(nil),     // 5: proto.FilesystemSearchStreamPrivateRequest
	(*FilesystemDeleteUserRequestPrivate)(nil),       // 6: proto.FilesystemDeleteUserRequestPrivate
	(*FilesystemGetUserRequestPrivate)(nil),          // 7: proto.FilesystemGetUserRequestPrivate
	(*FilesystemRequestResponse)(nil),                // 8: proto.FilesystemRequestResponse
	(*FilesystemStatusPrivate)(nil),                  // 9: proto.FilesystemStatusPrivate
	(*VolumeIdentifiers)(nil),                        // 10: proto.VolumeIdentifiers
	(*FilesystemGetUserResponsePrivate)(nil),         // 11: proto.FilesystemGetUserResponsePrivate
	(*FilesystemUpdateRequestPrivate)(nil),           // 12: proto.FilesystemUpdateRequestPrivate
	(*FilesystemUserStatusPrivate)(nil),              // 13: proto.FilesystemUserStatusPrivate
	(*FilesystemIdReference)(nil),                    // 14: proto.FilesystemIdReference
	(*FilesystemPrivate)(nil),                        // 15: proto.FilesystemPrivate
	(*FilesystemMetadataPrivate)(nil),                // 16: proto.FilesystemMetadataPrivate
	(*FilesystemSpecPrivate)(nil),                    // 17: proto.FilesystemSpecPrivate
	(*FilesystemSpecUpdatePrivate)(nil),              // 18: proto.FilesystemSpecUpdatePrivate
	(*FilesystemSchedule)(nil),                       // 19: proto.FilesystemSchedule
	(*AssignedCluster)(nil),                          // 20: proto.AssignedCluster
	(*AssignedNamespace)(nil),                        // 21: proto.AssignedNamespace
	(*FilesystemMountStatusPrivate)(nil),             // 22: proto.FilesystemMountStatusPrivate
	(*FilesystemNamespaceStatusPrivate)(nil),         // 23: proto.FilesystemNamespaceStatusPrivate
	(*FilesystemDeleteRequestPrivate)(nil),           // 24: proto.FilesystemDeleteRequestPrivate
	(*FilesystemCreateRequestPrivate)(nil),           // 25: proto.FilesystemCreateRequestPrivate
	(*FilesystemGetRequestPrivate)(nil),              // 26: proto.FilesystemGetRequestPrivate
	(*FilesystemInOrgGetRequestPrivate)(nil),         // 27: proto.FilesystemInOrgGetRequestPrivate
	(*FilesystemOrgsIsExistsResponsePrivate)(nil),    // 28: proto.FilesystemOrgsIsExistsResponsePrivate
	(*FilesystemScheduleRequest)(nil),                // 29: proto.FilesystemScheduleRequest
	(*BucketScheduleRequest)(nil),                    // 30: proto.BucketScheduleRequest
	(*BucketScheduleResponse)(nil),                   // 31: proto.BucketScheduleResponse
	(*ResourceSchedule)(nil),                         // 32: proto.ResourceSchedule
	(*FilesystemScheduleResponse)(nil),               // 33: proto.FilesystemScheduleResponse
	(*RegisterAgentRequest)(nil),                     // 34: proto.RegisterAgentRequest
	(*FilesystemOrgsGetRequestPrivate)(nil),          // 35: proto.FilesystemOrgsGetRequestPrivate
	(*FilesystemOrgsIsExistsRequestPrivate)(nil),     // 36: proto.FilesystemOrgsIsExistsRequestPrivate
	(*FilesystemOrgsListRequestPrivate)(nil),         // 37: proto.FilesystemOrgsListRequestPrivate
	(*FilesystemUserCreateOrGetRequest)(nil),         // 38: proto.FilesystemUserCreateOrGetRequest
	(*FilesystemUserResponsePrivate)(nil),            // 39: proto.FilesystemUserResponsePrivate
	(*FilesystemOrgsResponsePrivate)(nil),            // 40: proto.FilesystemOrgsResponsePrivate
	(*FilesystemOrgsPrivate)(nil),                    // 41: proto.FilesystemOrgsPrivate
	(*FilesystemAgent)(nil),                          // 42: proto.FilesystemAgent
	(*DeRegisterAgentRequest)(nil),                   // 43: proto.DeRegisterAgentRequest
	(*GetRegisterAgentRequest)(nil),                  // 44: proto.GetRegisterAgentRequest
	(*ListRegisteredAgentRequest)(nil),               // 45: proto.ListRegisteredAgentRequest
	(*ListClusterRequest)(nil),                       // 46: proto.ListClusterRequest
	(*FilesystemStorageClusters)(nil),                // 47: proto.FilesystemStorageClusters
	(*StorageClusterCapacity)(nil),                   // 48: proto.StorageClusterCapacity
	(*BucketFilter)(nil),                             // 49: proto.BucketFilter
	(*BucketCapacity)(nil),                           // 50: proto.BucketCapacity
	(*Capacity)(nil),                                 // 51: proto.Capacity
	(*CreateBucketUserParams)(nil),                   // 52: proto.CreateBucketUserParams
	(*BucketUserParams)(nil),                         // 53: proto.BucketUserParams
	(*BucketUpdateUserPolicyParams)(nil),             // 54: proto.BucketUpdateUserPolicyParams
	(*UpdateBucketUserPolicyParams)(nil),             // 55: proto.UpdateBucketUserPolicyParams
	(*BucketUpdateUserCredsParams)(nil),              // 56: proto.BucketUpdateUserCredsParams
	(*UpdateBucketUserCredsParams)(nil),              // 57: proto.UpdateBucketUserCredsParams
	(*DeleteBucketUserParams)(nil),                   // 58: proto.DeleteBucketUserParams
	(*BucketPrincipal)(nil),                          // 59: proto.BucketPrincipal
	(*FilesystemUserCreateOrUpdateRequest)(nil),      // 60: proto.FilesystemUserCreateOrUpdateRequest
	(*FilesystemOrgCreateRequestPrivate)(nil),        // 61: proto.FilesystemOrgCreateRequestPrivate
	(*FilesystemOrgUpdateRequestPrivate)(nil),        // 62: proto.FilesystemOrgUpdateRequestPrivate
	(*FilesystemOrgPrivate)(nil),                     // 63: proto.FilesystemOrgPrivate
	(*FilesystemOrgGetRequestPrivate)(nil),           // 64: proto.FilesystemOrgGetRequestPrivate
	(*FilesystemOrgDeleteRequestPrivate)(nil),        // 65: proto.FilesystemOrgDeleteRequestPrivate
	(*FilesystemsInOrgListRequestPrivate)(nil),       // 66: proto.FilesystemsInOrgListRequestPrivate
	(*FilesystemsInOrgListResponsePrivate)(nil),      // 67: proto.FilesystemsInOrgListResponsePrivate
	(*FilesystemOrgResponsePrivate)(nil),             // 68: proto.FilesystemOrgResponsePrivate
	(*FilesystemAccountMetadataReference)(nil),       // 69: proto.FilesystemAccountMetadataReference
	(*SubnetEventRequest)(nil),                       // 70: proto.SubnetEventRequest
	(*BucketSubnetUpdateEvent)(nil),                  // 71: proto.BucketSubnetUpdateEvent
	(*BucketSubnetStatusUpdateRequest)(nil),          // 72: proto.BucketSubnetStatusUpdateRequest
	(*ObjectBucketCreatePrivateRequest)(nil),         // 73: proto.ObjectBucketCreatePrivateRequest
	(*ObjectBucketMetadataPrivate)(nil),              // 74: proto.ObjectBucketMetadataPrivate
	(*ObjectBucketSpecPrivate)(nil),                  // 75: proto.ObjectBucketSpecPrivate
	(*BucketSchedule)(nil),                           // 76: proto.BucketSchedule
	(*ObjectBucketPrivate)(nil),                      // 77: proto.ObjectBucketPrivate
	(*ObjectBucketGetPrivateRequest)(nil),            // 78: proto.ObjectBucketGetPrivateRequest
	(*ObjectBucketSearchPrivateRequest)(nil),         // 79: proto.ObjectBucketSearchPrivateRequest
	(*ObjectBucketSearchPrivateResponse)(nil),        // 80: proto.ObjectBucketSearchPrivateResponse
	(*ObjectBucketDeletePrivateRequest)(nil),         // 81: proto.ObjectBucketDeletePrivateRequest
	(*BucketLifecycleRuleCreatePrivateRequest)(nil),  // 82: proto.BucketLifecycleRuleCreatePrivateRequest
	(*BucketLifecycleRulePrivate)(nil),               // 83: proto.BucketLifecycleRulePrivate
	(*BucketLifecycleRuleGetPrivateRequest)(nil),     // 84: proto.BucketLifecycleRuleGetPrivateRequest
	(*BucketLifecycleRuleSearchPrivateRequest)(nil),  // 85: proto.BucketLifecycleRuleSearchPrivateRequest
	(*BucketLifecycleRuleSearchPrivateResponse)(nil), // 86: proto.BucketLifecycleRuleSearchPrivateResponse
	(*BucketLifecycleRuleUpdatePrivateRequest)(nil),  // 87: proto.BucketLifecycleRuleUpdatePrivateRequest
	(*BucketLifecycleRuleDeletePrivateRequest)(nil),  // 88: proto.BucketLifecycleRuleDeletePrivateRequest
	(*CreateObjectUserPrivateRequest)(nil),           // 89: proto.CreateObjectUserPrivateRequest
	(*ObjectUserPrivate)(nil),                        // 90: proto.ObjectUserPrivate
	(*ObjectUserMetadataPrivate)(nil),                // 91: proto.ObjectUserMetadataPrivate
	(*ObjectUserStatusPrivate)(nil),                  // 92: proto.ObjectUserStatusPrivate
	(*AccessPrincipalPrivate)(nil),                   // 93: proto.AccessPrincipalPrivate
	(*ObjectUserGetPrivateRequest)(nil),              // 94: proto.ObjectUserGetPrivateRequest
	(*ObjectUserUpdatePrivateRequest)(nil),           // 95: proto.ObjectUserUpdatePrivateRequest
	(*ObjectUserDeletePrivateRequest)(nil),           // 96: proto.ObjectUserDeletePrivateRequest
	(*ObjectUserSearchPrivateRequest)(nil),           // 97: proto.ObjectUserSearchPrivateRequest
	(*ObjectUserSearchPrivateResponse)(nil),          // 98: proto.ObjectUserSearchPrivateResponse
	(*ObjectBucketStatusUpdateRequest)(nil),          // 99: proto.ObjectBucketStatusUpdateRequest
	(*ObjectBucketRemoveFinalizerRequest)(nil),       // 100: proto.ObjectBucketRemoveFinalizerRequest
	(*ObjectUserStatusUpdateRequest)(nil),            // 101: proto.ObjectUserStatusUpdateRequest
	(*ObjectUserRemoveFinalizerRequest)(nil),         // 102: proto.ObjectUserRemoveFinalizerRequest
	(*ObjectBucketIdReference)(nil),                  // 103: proto.ObjectBucketIdReference
	(*ObjectUserIdReference)(nil),                    // 104: proto.ObjectUserIdReference
	(*CreateOrUpdateLifecycleRuleRequest)(nil),       // 105: proto.CreateOrUpdateLifecycleRuleRequest
	(*LifecycleRulePrivate)(nil),                     // 106: proto.LifecycleRulePrivate
	(*DeleteLifecycleRuleRequest)(nil),               // 107: proto.DeleteLifecycleRuleRequest
	nil,                                              // 108: proto.FilesystemStatusPrivate.ClusterInfoEntry
	nil,                                              // 109: proto.FilesystemMetadataPrivate.LabelsEntry
	nil,                                              // 110: proto.BucketScheduleRequest.LabelsEntry
	nil,                                              // 111: proto.BucketScheduleResponse.LabelsEntry
	nil,                                              // 112: proto.FilesystemStorageClusters.LabelsEntry
	nil,                                              // 113: proto.ObjectBucketMetadataPrivate.LabelsEntry
	nil,                                              // 114: proto.ObjectUserMetadataPrivate.LabelsEntry
	(*FilesystemMetadataReference)(nil),              // 115: proto.FilesystemMetadataReference
	(FilesystemPhase)(0),                             // 116: proto.FilesystemPhase
	(*timestamppb.Timestamp)(nil),                    // 117: google.protobuf.Timestamp
	(*FilesystemCapacity)(nil),                       // 118: proto.FilesystemCapacity
	(FilesystemStorageClass)(0),                      // 119: proto.FilesystemStorageClass
	(FilesystemType)(0),                              // 120: proto.FilesystemType
	(FilesystemAccessModes)(0),                       // 121: proto.FilesystemAccessModes
	(FilesystemMountProtocols)(0),                    // 122: proto.FilesystemMountProtocols
	(*VolumeSecurityGroup)(nil),                      // 123: proto.VolumeSecurityGroup
	(*ObjectUserPermissionSpec)(nil),                 // 124: proto.ObjectUserPermissionSpec
	(*BucketSecurityGroup)(nil),                      // 125: proto.BucketSecurityGroup
	(*VNetPrivate)(nil),                              // 126: proto.VNetPrivate
	(*StorageCapacityRequest)(nil),                   // 127: proto.StorageCapacityRequest
	(BucketAccessPolicy)(0),                          // 128: proto.BucketAccessPolicy
	(*ObjectBucketStatus)(nil),                       // 129: proto.ObjectBucketStatus
	(*ObjectBucketMetadataRef)(nil),                  // 130: proto.ObjectBucketMetadataRef
	(*BucketLifecycleRuleMetadata)(nil),              // 131: proto.BucketLifecycleRuleMetadata
	(*BucketLifecycleRuleSpec)(nil),                  // 132: proto.BucketLifecycleRuleSpec
	(*BucketLifecycleRuleStatus)(nil),                // 133: proto.BucketLifecycleRuleStatus
	(*BucketLifecycleRuleMetadataRef)(nil),           // 134: proto.BucketLifecycleRuleMetadataRef
	(*ObjectUserMetadataCreate)(nil),                 // 135: proto.ObjectUserMetadataCreate
	(ObjectUserPhase)(0),                             // 136: proto.ObjectUserPhase
	(*ObjectCluster)(nil),                            // 137: proto.ObjectCluster
	(*ObjectAccessCredentials)(nil),                  // 138: proto.ObjectAccessCredentials
	(*ObjectUserMetadataRef)(nil),                    // 139: proto.ObjectUserMetadataRef
	(*ObjectUser)(nil),                               // 140: proto.ObjectUser
	(*ObjectUserStatus)(nil),                         // 141: proto.ObjectUserStatus
	(*emptypb.Empty)(nil),                            // 142: google.protobuf.Empty
	(*VNetReleaseSubnetRequest)(nil),                 // 143: proto.VNetReleaseSubnetRequest
}
var file_storage_private_proto_depIdxs = []int32{
	14,  // 0: proto.FilesystemUpdateStatusRequest.metadata:type_name -> proto.FilesystemIdReference
	9,   // 1: proto.FilesystemUpdateStatusRequest.status:type_name -> proto.FilesystemStatusPrivate
	14,  // 2: proto.FilesystemRemoveFinalizerRequest.metadata:type_name -> proto.FilesystemIdReference
	115, // 3: proto.FilesystemGetUserRequestPrivate.metadata:type_name -> proto.FilesystemMetadataReference
	15,  // 4: proto.FilesystemRequestResponse.filesystem:type_name -> proto.FilesystemPrivate
	116, // 5: proto.FilesystemStatusPrivate.phase:type_name -> proto.FilesystemPhase
	22,  // 6: proto.FilesystemStatusPrivate.mount:type_name -> proto.FilesystemMountStatusPrivate
	23,  // 7: proto.FilesystemStatusPrivate.namespace:type_name -> proto.FilesystemNamespaceStatusPrivate
	13,  // 8: proto.FilesystemStatusPrivate.user:type_name -> proto.FilesystemUserStatusPrivate
	10,  // 9: proto.FilesystemStatusPrivate.volumeIdentifiers:type_name -> proto.VolumeIdentifiers
	108, // 10: proto.FilesystemStatusPrivate.clusterInfo:type_name -> proto.FilesystemStatusPrivate.ClusterInfoEntry
	16,  // 11: proto.FilesystemUpdateRequestPrivate.metadata:type_name -> proto.FilesystemMetadataPrivate
	17,  // 12: proto.FilesystemUpdateRequestPrivate.spec:type_name -> proto.FilesystemSpecPrivate
	16,  // 13: proto.FilesystemPrivate.metadata:type_name -> proto.FilesystemMetadataPrivate
	17,  // 14: proto.FilesystemPrivate.spec:type_name -> proto.FilesystemSpecPrivate
	9,   // 15: proto.FilesystemPrivate.status:type_name -> proto.FilesystemStatusPrivate
	109, // 16: proto.FilesystemMetadataPrivate.labels:type_name -> proto.FilesystemMetadataPrivate.LabelsEntry
	117, // 17: proto.FilesystemMetadataPrivate.creationTimestamp:type_name -> google.protobuf.Timestamp
	117, // 18: proto.FilesystemMetadataPrivate.updateTimestamp:type_name -> google.protobuf.Timestamp
	117, // 19: proto.FilesystemMetadataPrivate.deletionTimestamp:type_name -> google.protobuf.Timestamp
	0,   // 20: proto.FilesystemMetadataPrivate.clientType:type_name -> proto.APIClientTypes
	118, // 21: proto.FilesystemSpecPrivate.request:type_name -> proto.FilesystemCapacity
	119, // 22: proto.FilesystemSpecPrivate.storageClass:type_name -> proto.FilesystemStorageClass
	120, // 23: proto.FilesystemSpecPrivate.filesystemType:type_name -> proto.FilesystemType
	121, // 24: proto.FilesystemSpecPrivate.accessModes:type_name -> proto.FilesystemAccessModes
	122, // 25: proto.FilesystemSpecPrivate.mountProtocol:type_name -> proto.FilesystemMountProtocols
	19,  // 26: proto.FilesystemSpecPrivate.scheduler:type_name -> proto.FilesystemSchedule
	123, // 27: proto.FilesystemSpecPrivate.securityGroup:type_name -> proto.VolumeSecurityGroup
	118, // 28: proto.FilesystemSpecUpdatePrivate.request:type_name -> proto.FilesystemCapacity
	20,  // 29: proto.FilesystemSchedule.cluster:type_name -> proto.AssignedCluster
	21,  // 30: proto.FilesystemSchedule.namespace:type_name -> proto.AssignedNamespace
	115, // 31: proto.FilesystemDeleteRequestPrivate.metadata:type_name -> proto.FilesystemMetadataReference
	16,  // 32: proto.FilesystemCreateRequestPrivate.metadata:type_name -> proto.FilesystemMetadataPrivate
	17,  // 33: proto.FilesystemCreateRequestPrivate.spec:type_name -> proto.FilesystemSpecPrivate
	115, // 34: proto.FilesystemGetRequestPrivate.metadata:type_name -> proto.FilesystemMetadataReference
	32,  // 35: proto.FilesystemScheduleRequest.assignments:type_name -> proto.ResourceSchedule
	17,  // 36: proto.FilesystemScheduleRequest.requestSpec:type_name -> proto.FilesystemSpecPrivate
	75,  // 37: proto.BucketScheduleRequest.requestSpec:type_name -> proto.ObjectBucketSpecPrivate
	110, // 38: proto.BucketScheduleRequest.labels:type_name -> proto.BucketScheduleRequest.LabelsEntry
	76,  // 39: proto.BucketScheduleResponse.schedule:type_name -> proto.BucketSchedule
	111, // 40: proto.BucketScheduleResponse.labels:type_name -> proto.BucketScheduleResponse.LabelsEntry
	32,  // 41: proto.FilesystemScheduleResponse.schedule:type_name -> proto.ResourceSchedule
	115, // 42: proto.FilesystemOrgsListRequestPrivate.metadata:type_name -> proto.FilesystemMetadataReference
	41,  // 43: proto.FilesystemOrgsResponsePrivate.org:type_name -> proto.FilesystemOrgsPrivate
	112, // 44: proto.FilesystemStorageClusters.labels:type_name -> proto.FilesystemStorageClusters.LabelsEntry
	48,  // 45: proto.FilesystemStorageClusters.capacity:type_name -> proto.StorageClusterCapacity
	51,  // 46: proto.BucketCapacity.capacity:type_name -> proto.Capacity
	53,  // 47: proto.CreateBucketUserParams.createParams:type_name -> proto.BucketUserParams
	124, // 48: proto.BucketUserParams.spec:type_name -> proto.ObjectUserPermissionSpec
	125, // 49: proto.BucketUserParams.securityGroup:type_name -> proto.BucketSecurityGroup
	124, // 50: proto.BucketUpdateUserPolicyParams.spec:type_name -> proto.ObjectUserPermissionSpec
	125, // 51: proto.BucketUpdateUserPolicyParams.securityGroup:type_name -> proto.BucketSecurityGroup
	54,  // 52: proto.UpdateBucketUserPolicyParams.updateParams:type_name -> proto.BucketUpdateUserPolicyParams
	56,  // 53: proto.UpdateBucketUserCredsParams.updateParams:type_name -> proto.BucketUpdateUserCredsParams
	124, // 54: proto.BucketPrincipal.spec:type_name -> proto.ObjectUserPermissionSpec
	16,  // 55: proto.FilesystemOrgCreateRequestPrivate.metadata:type_name -> proto.FilesystemMetadataPrivate
	17,  // 56: proto.FilesystemOrgCreateRequestPrivate.spec:type_name -> proto.FilesystemSpecPrivate
	16,  // 57: proto.FilesystemOrgUpdateRequestPrivate.metadata:type_name -> proto.FilesystemMetadataPrivate
	17,  // 58: proto.FilesystemOrgUpdateRequestPrivate.spec:type_name -> proto.FilesystemSpecPrivate
	16,  // 59: proto.FilesystemOrgPrivate.metadata:type_name -> proto.FilesystemMetadataPrivate
	17,  // 60: proto.FilesystemOrgPrivate.spec:type_name -> proto.FilesystemSpecPrivate
	9,   // 61: proto.FilesystemOrgPrivate.status:type_name -> proto.FilesystemStatusPrivate
	115, // 62: proto.FilesystemOrgGetRequestPrivate.metadata:type_name -> proto.FilesystemMetadataReference
	115, // 63: proto.FilesystemOrgDeleteRequestPrivate.metadata:type_name -> proto.FilesystemMetadataReference
	115, // 64: proto.FilesystemsInOrgListRequestPrivate.metadata:type_name -> proto.FilesystemMetadataReference
	15,  // 65: proto.FilesystemsInOrgListResponsePrivate.items:type_name -> proto.FilesystemPrivate
	63,  // 66: proto.FilesystemOrgResponsePrivate.items:type_name -> proto.FilesystemOrgPrivate
	2,   // 67: proto.BucketSubnetUpdateEvent.eventType:type_name -> proto.BucketSubnetEventStatus
	59,  // 68: proto.BucketSubnetUpdateEvent.principals:type_name -> proto.BucketPrincipal
	126, // 69: proto.BucketSubnetUpdateEvent.vnet:type_name -> proto.VNetPrivate
	2,   // 70: proto.BucketSubnetStatusUpdateRequest.status:type_name -> proto.BucketSubnetEventStatus
	74,  // 71: proto.ObjectBucketCreatePrivateRequest.metadata:type_name -> proto.ObjectBucketMetadataPrivate
	75,  // 72: proto.ObjectBucketCreatePrivateRequest.spec:type_name -> proto.ObjectBucketSpecPrivate
	113, // 73: proto.ObjectBucketMetadataPrivate.labels:type_name -> proto.ObjectBucketMetadataPrivate.LabelsEntry
	117, // 74: proto.ObjectBucketMetadataPrivate.creationTimestamp:type_name -> google.protobuf.Timestamp
	117, // 75: proto.ObjectBucketMetadataPrivate.deletionTimestamp:type_name -> google.protobuf.Timestamp
	0,   // 76: proto.ObjectBucketMetadataPrivate.clientType:type_name -> proto.APIClientTypes
	127, // 77: proto.ObjectBucketSpecPrivate.request:type_name -> proto.StorageCapacityRequest
	128, // 78: proto.ObjectBucketSpecPrivate.accessPolicy:type_name -> proto.BucketAccessPolicy
	76,  // 79: proto.ObjectBucketSpecPrivate.schedule:type_name -> proto.BucketSchedule
	20,  // 80: proto.BucketSchedule.cluster:type_name -> proto.AssignedCluster
	74,  // 81: proto.ObjectBucketPrivate.metadata:type_name -> proto.ObjectBucketMetadataPrivate
	75,  // 82: proto.ObjectBucketPrivate.spec:type_name -> proto.ObjectBucketSpecPrivate
	129, // 83: proto.ObjectBucketPrivate.status:type_name -> proto.ObjectBucketStatus
	130, // 84: proto.ObjectBucketGetPrivateRequest.metadata:type_name -> proto.ObjectBucketMetadataRef
	77,  // 85: proto.ObjectBucketSearchPrivateResponse.bucket:type_name -> proto.ObjectBucketPrivate
	130, // 86: proto.ObjectBucketDeletePrivateRequest.metadata:type_name -> proto.ObjectBucketMetadataRef
	131, // 87: proto.BucketLifecycleRuleCreatePrivateRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadata
	132, // 88: proto.BucketLifecycleRuleCreatePrivateRequest.spec:type_name -> proto.BucketLifecycleRuleSpec
	131, // 89: proto.BucketLifecycleRulePrivate.metadata:type_name -> proto.BucketLifecycleRuleMetadata
	132, // 90: proto.BucketLifecycleRulePrivate.spec:type_name -> proto.BucketLifecycleRuleSpec
	133, // 91: proto.BucketLifecycleRulePrivate.status:type_name -> proto.BucketLifecycleRuleStatus
	134, // 92: proto.BucketLifecycleRuleGetPrivateRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadataRef
	83,  // 93: proto.BucketLifecycleRuleSearchPrivateResponse.lifecycleRule:type_name -> proto.BucketLifecycleRulePrivate
	134, // 94: proto.BucketLifecycleRuleUpdatePrivateRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadataRef
	132, // 95: proto.BucketLifecycleRuleUpdatePrivateRequest.spec:type_name -> proto.BucketLifecycleRuleSpec
	134, // 96: proto.BucketLifecycleRuleDeletePrivateRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadataRef
	135, // 97: proto.CreateObjectUserPrivateRequest.metadata:type_name -> proto.ObjectUserMetadataCreate
	124, // 98: proto.CreateObjectUserPrivateRequest.spec:type_name -> proto.ObjectUserPermissionSpec
	91,  // 99: proto.ObjectUserPrivate.metadata:type_name -> proto.ObjectUserMetadataPrivate
	124, // 100: proto.ObjectUserPrivate.spec:type_name -> proto.ObjectUserPermissionSpec
	92,  // 101: proto.ObjectUserPrivate.status:type_name -> proto.ObjectUserStatusPrivate
	114, // 102: proto.ObjectUserMetadataPrivate.labels:type_name -> proto.ObjectUserMetadataPrivate.LabelsEntry
	117, // 103: proto.ObjectUserMetadataPrivate.creationTimestamp:type_name -> google.protobuf.Timestamp
	117, // 104: proto.ObjectUserMetadataPrivate.updateTimestamp:type_name -> google.protobuf.Timestamp
	117, // 105: proto.ObjectUserMetadataPrivate.deleteTimestamp:type_name -> google.protobuf.Timestamp
	136, // 106: proto.ObjectUserStatusPrivate.phase:type_name -> proto.ObjectUserPhase
	93,  // 107: proto.ObjectUserStatusPrivate.principal:type_name -> proto.AccessPrincipalPrivate
	137, // 108: proto.AccessPrincipalPrivate.cluster:type_name -> proto.ObjectCluster
	138, // 109: proto.AccessPrincipalPrivate.credentials:type_name -> proto.ObjectAccessCredentials
	139, // 110: proto.ObjectUserGetPrivateRequest.metadata:type_name -> proto.ObjectUserMetadataRef
	139, // 111: proto.ObjectUserUpdatePrivateRequest.metadata:type_name -> proto.ObjectUserMetadataRef
	124, // 112: proto.ObjectUserUpdatePrivateRequest.spec:type_name -> proto.ObjectUserPermissionSpec
	139, // 113: proto.ObjectUserDeletePrivateRequest.metadata:type_name -> proto.ObjectUserMetadataRef
	140, // 114: proto.ObjectUserSearchPrivateResponse.user:type_name -> proto.ObjectUser
	103, // 115: proto.ObjectBucketStatusUpdateRequest.metadata:type_name -> proto.ObjectBucketIdReference
	129, // 116: proto.ObjectBucketStatusUpdateRequest.status:type_name -> proto.ObjectBucketStatus
	103, // 117: proto.ObjectBucketRemoveFinalizerRequest.metadata:type_name -> proto.ObjectBucketIdReference
	104, // 118: proto.ObjectUserStatusUpdateRequest.metadata:type_name -> proto.ObjectUserIdReference
	141, // 119: proto.ObjectUserStatusUpdateRequest.status:type_name -> proto.ObjectUserStatus
	104, // 120: proto.ObjectUserRemoveFinalizerRequest.metadata:type_name -> proto.ObjectUserIdReference
	132, // 121: proto.CreateOrUpdateLifecycleRuleRequest.spec:type_name -> proto.BucketLifecycleRuleSpec
	132, // 122: proto.LifecycleRulePrivate.spec:type_name -> proto.BucketLifecycleRuleSpec
	25,  // 123: proto.FilesystemPrivateService.CreatePrivate:input_type -> proto.FilesystemCreateRequestPrivate
	26,  // 124: proto.FilesystemPrivateService.GetPrivate:input_type -> proto.FilesystemGetRequestPrivate
	12,  // 125: proto.FilesystemPrivateService.UpdatePrivate:input_type -> proto.FilesystemUpdateRequestPrivate
	24,  // 126: proto.FilesystemPrivateService.DeletePrivate:input_type -> proto.FilesystemDeleteRequestPrivate
	7,   // 127: proto.FilesystemPrivateService.GetUserPrivate:input_type -> proto.FilesystemGetUserRequestPrivate
	7,   // 128: proto.FilesystemPrivateService.CreateorGetUserPrivate:input_type -> proto.FilesystemGetUserRequestPrivate
	6,   // 129: proto.FilesystemPrivateService.DeleteUserPrivate:input_type -> proto.FilesystemDeleteUserRequestPrivate
	3,   // 130: proto.FilesystemPrivateService.UpdateStatus:input_type -> proto.FilesystemUpdateStatusRequest
	5,   // 131: proto.FilesystemPrivateService.SearchFilesystemRequests:input_type -> proto.FilesystemSearchStreamPrivateRequest
	4,   // 132: proto.FilesystemPrivateService.RemoveFinalizer:input_type -> proto.FilesystemRemoveFinalizerRequest
	142, // 133: proto.FilesystemPrivateService.PingPrivate:input_type -> google.protobuf.Empty
	29,  // 134: proto.FilesystemSchedulerPrivateService.ScheduleFile:input_type -> proto.FilesystemScheduleRequest
	30,  // 135: proto.FilesystemSchedulerPrivateService.ScheduleBucket:input_type -> proto.BucketScheduleRequest
	46,  // 136: proto.FilesystemSchedulerPrivateService.ListClusters:input_type -> proto.ListClusterRequest
	27,  // 137: proto.FilesystemSchedulerPrivateService.ListFilesystemInOrgs:input_type -> proto.FilesystemInOrgGetRequestPrivate
	35,  // 138: proto.FilesystemSchedulerPrivateService.ListFilesystemOrgs:input_type -> proto.FilesystemOrgsGetRequestPrivate
	36,  // 139: proto.FilesystemSchedulerPrivateService.IsOrgExists:input_type -> proto.FilesystemOrgsIsExistsRequestPrivate
	142, // 140: proto.FilesystemSchedulerPrivateService.PingPrivate:input_type -> google.protobuf.Empty
	60,  // 141: proto.FilesystemUserPrivateService.CreateOrUpdate:input_type -> proto.FilesystemUserCreateOrUpdateRequest
	142, // 142: proto.FilesystemUserPrivateService.PingFileUserPrivate:input_type -> google.protobuf.Empty
	38,  // 143: proto.FilesystemUserPrivateService.CreateOrGet:input_type -> proto.FilesystemUserCreateOrGetRequest
	6,   // 144: proto.FilesystemUserPrivateService.Delete:input_type -> proto.FilesystemDeleteUserRequestPrivate
	34,  // 145: proto.FilesystemStorageClusterPrivateService.RegisterAgent:input_type -> proto.RegisterAgentRequest
	43,  // 146: proto.FilesystemStorageClusterPrivateService.DeRegisterAgent:input_type -> proto.DeRegisterAgentRequest
	44,  // 147: proto.FilesystemStorageClusterPrivateService.GetRegisteredAgent:input_type -> proto.GetRegisterAgentRequest
	45,  // 148: proto.FilesystemStorageClusterPrivateService.ListRegisteredAgents:input_type -> proto.ListRegisteredAgentRequest
	46,  // 149: proto.FilesystemStorageClusterPrivateService.ListClusters:input_type -> proto.ListClusterRequest
	142, // 150: proto.FilesystemStorageClusterPrivateService.PingFilesystemClusterPrivate:input_type -> google.protobuf.Empty
	34,  // 151: proto.WekaStatefulAgentPrivateService.RegisterAgent:input_type -> proto.RegisterAgentRequest
	43,  // 152: proto.WekaStatefulAgentPrivateService.DeRegisterAgent:input_type -> proto.DeRegisterAgentRequest
	44,  // 153: proto.WekaStatefulAgentPrivateService.GetRegisteredAgent:input_type -> proto.GetRegisterAgentRequest
	45,  // 154: proto.WekaStatefulAgentPrivateService.ListRegisteredAgents:input_type -> proto.ListRegisteredAgentRequest
	142, // 155: proto.WekaStatefulAgentPrivateService.PingWekaStatefulAgentPrivate:input_type -> google.protobuf.Empty
	52,  // 156: proto.BucketUserPrivateService.CreateBucketUser:input_type -> proto.CreateBucketUserParams
	55,  // 157: proto.BucketUserPrivateService.UpdateBucketUserPolicy:input_type -> proto.UpdateBucketUserPolicyParams
	57,  // 158: proto.BucketUserPrivateService.UpdateBucketUserCredentials:input_type -> proto.UpdateBucketUserCredsParams
	58,  // 159: proto.BucketUserPrivateService.DeleteBucketUser:input_type -> proto.DeleteBucketUserParams
	49,  // 160: proto.BucketUserPrivateService.GetBucketCapacity:input_type -> proto.BucketFilter
	142, // 161: proto.BucketUserPrivateService.PingBucketUserPrivate:input_type -> google.protobuf.Empty
	61,  // 162: proto.FilesystemOrgPrivateService.CreateFilesystemOrgPrivate:input_type -> proto.FilesystemOrgCreateRequestPrivate
	64,  // 163: proto.FilesystemOrgPrivateService.GetFilesystemOrgPrivate:input_type -> proto.FilesystemOrgGetRequestPrivate
	62,  // 164: proto.FilesystemOrgPrivateService.UpdateFilesystemOrgPrivate:input_type -> proto.FilesystemOrgUpdateRequestPrivate
	65,  // 165: proto.FilesystemOrgPrivateService.DeleteFilesystemOrgPrivate:input_type -> proto.FilesystemOrgDeleteRequestPrivate
	66,  // 166: proto.FilesystemOrgPrivateService.ListFilesystemsInOrgPrivate:input_type -> proto.FilesystemsInOrgListRequestPrivate
	37,  // 167: proto.FilesystemOrgPrivateService.ListFilesystemOrgsPrivate:input_type -> proto.FilesystemOrgsListRequestPrivate
	73,  // 168: proto.ObjectStorageServicePrivate.CreateBucketPrivate:input_type -> proto.ObjectBucketCreatePrivateRequest
	78,  // 169: proto.ObjectStorageServicePrivate.GetBucketPrivate:input_type -> proto.ObjectBucketGetPrivateRequest
	79,  // 170: proto.ObjectStorageServicePrivate.SearchBucketPrivate:input_type -> proto.ObjectBucketSearchPrivateRequest
	81,  // 171: proto.ObjectStorageServicePrivate.DeleteBucketPrivate:input_type -> proto.ObjectBucketDeletePrivateRequest
	82,  // 172: proto.ObjectStorageServicePrivate.CreateBucketLifecycleRulePrivate:input_type -> proto.BucketLifecycleRuleCreatePrivateRequest
	84,  // 173: proto.ObjectStorageServicePrivate.GetBucketLifecycleRulePrivate:input_type -> proto.BucketLifecycleRuleGetPrivateRequest
	85,  // 174: proto.ObjectStorageServicePrivate.SearchBucketLifecycleRulePrivate:input_type -> proto.BucketLifecycleRuleSearchPrivateRequest
	87,  // 175: proto.ObjectStorageServicePrivate.UpdateBucketLifecycleRulePrivate:input_type -> proto.BucketLifecycleRuleUpdatePrivateRequest
	88,  // 176: proto.ObjectStorageServicePrivate.DeleteBucketLifecycleRulePrivate:input_type -> proto.BucketLifecycleRuleDeletePrivateRequest
	89,  // 177: proto.ObjectStorageServicePrivate.CreateObjectUserPrivate:input_type -> proto.CreateObjectUserPrivateRequest
	94,  // 178: proto.ObjectStorageServicePrivate.GetObjectUserPrivate:input_type -> proto.ObjectUserGetPrivateRequest
	97,  // 179: proto.ObjectStorageServicePrivate.SearchObjectUserPrivate:input_type -> proto.ObjectUserSearchPrivateRequest
	96,  // 180: proto.ObjectStorageServicePrivate.DeleteObjectUserPrivate:input_type -> proto.ObjectUserDeletePrivateRequest
	95,  // 181: proto.ObjectStorageServicePrivate.UpdateObjectUserPrivate:input_type -> proto.ObjectUserUpdatePrivateRequest
	99,  // 182: proto.ObjectStorageServicePrivate.UpdateBucketStatus:input_type -> proto.ObjectBucketStatusUpdateRequest
	100, // 183: proto.ObjectStorageServicePrivate.RemoveBucketFinalizer:input_type -> proto.ObjectBucketRemoveFinalizerRequest
	101, // 184: proto.ObjectStorageServicePrivate.UpdateObjectUserStatus:input_type -> proto.ObjectUserStatusUpdateRequest
	102, // 185: proto.ObjectStorageServicePrivate.RemoveObjectUserFinalizer:input_type -> proto.ObjectUserRemoveFinalizerRequest
	126, // 186: proto.ObjectStorageServicePrivate.AddBucketSubnet:input_type -> proto.VNetPrivate
	143, // 187: proto.ObjectStorageServicePrivate.RemoveBucketSubnet:input_type -> proto.VNetReleaseSubnetRequest
	70,  // 188: proto.ObjectStorageServicePrivate.GetBucketSubnetEvent:input_type -> proto.SubnetEventRequest
	72,  // 189: proto.ObjectStorageServicePrivate.UpdateBucketSubnetStatus:input_type -> proto.BucketSubnetStatusUpdateRequest
	142, // 190: proto.ObjectStorageServicePrivate.PingPrivate:input_type -> google.protobuf.Empty
	105, // 191: proto.BucketLifecyclePrivateService.CreateOrUpdateLifecycleRule:input_type -> proto.CreateOrUpdateLifecycleRuleRequest
	107, // 192: proto.BucketLifecyclePrivateService.DeleteLifecycleRule:input_type -> proto.DeleteLifecycleRuleRequest
	142, // 193: proto.BucketLifecyclePrivateService.PingBucketLifecyclePrivate:input_type -> google.protobuf.Empty
	15,  // 194: proto.FilesystemPrivateService.CreatePrivate:output_type -> proto.FilesystemPrivate
	15,  // 195: proto.FilesystemPrivateService.GetPrivate:output_type -> proto.FilesystemPrivate
	15,  // 196: proto.FilesystemPrivateService.UpdatePrivate:output_type -> proto.FilesystemPrivate
	142, // 197: proto.FilesystemPrivateService.DeletePrivate:output_type -> google.protobuf.Empty
	11,  // 198: proto.FilesystemPrivateService.GetUserPrivate:output_type -> proto.FilesystemGetUserResponsePrivate
	11,  // 199: proto.FilesystemPrivateService.CreateorGetUserPrivate:output_type -> proto.FilesystemGetUserResponsePrivate
	142, // 200: proto.FilesystemPrivateService.DeleteUserPrivate:output_type -> google.protobuf.Empty
	142, // 201: proto.FilesystemPrivateService.UpdateStatus:output_type -> google.protobuf.Empty
	8,   // 202: proto.FilesystemPrivateService.SearchFilesystemRequests:output_type -> proto.FilesystemRequestResponse
	142, // 203: proto.FilesystemPrivateService.RemoveFinalizer:output_type -> google.protobuf.Empty
	142, // 204: proto.FilesystemPrivateService.PingPrivate:output_type -> google.protobuf.Empty
	33,  // 205: proto.FilesystemSchedulerPrivateService.ScheduleFile:output_type -> proto.FilesystemScheduleResponse
	31,  // 206: proto.FilesystemSchedulerPrivateService.ScheduleBucket:output_type -> proto.BucketScheduleResponse
	47,  // 207: proto.FilesystemSchedulerPrivateService.ListClusters:output_type -> proto.FilesystemStorageClusters
	67,  // 208: proto.FilesystemSchedulerPrivateService.ListFilesystemInOrgs:output_type -> proto.FilesystemsInOrgListResponsePrivate
	40,  // 209: proto.FilesystemSchedulerPrivateService.ListFilesystemOrgs:output_type -> proto.FilesystemOrgsResponsePrivate
	28,  // 210: proto.FilesystemSchedulerPrivateService.IsOrgExists:output_type -> proto.FilesystemOrgsIsExistsResponsePrivate
	142, // 211: proto.FilesystemSchedulerPrivateService.PingPrivate:output_type -> google.protobuf.Empty
	142, // 212: proto.FilesystemUserPrivateService.CreateOrUpdate:output_type -> google.protobuf.Empty
	142, // 213: proto.FilesystemUserPrivateService.PingFileUserPrivate:output_type -> google.protobuf.Empty
	39,  // 214: proto.FilesystemUserPrivateService.CreateOrGet:output_type -> proto.FilesystemUserResponsePrivate
	142, // 215: proto.FilesystemUserPrivateService.Delete:output_type -> google.protobuf.Empty
	42,  // 216: proto.FilesystemStorageClusterPrivateService.RegisterAgent:output_type -> proto.FilesystemAgent
	142, // 217: proto.FilesystemStorageClusterPrivateService.DeRegisterAgent:output_type -> google.protobuf.Empty
	42,  // 218: proto.FilesystemStorageClusterPrivateService.GetRegisteredAgent:output_type -> proto.FilesystemAgent
	42,  // 219: proto.FilesystemStorageClusterPrivateService.ListRegisteredAgents:output_type -> proto.FilesystemAgent
	47,  // 220: proto.FilesystemStorageClusterPrivateService.ListClusters:output_type -> proto.FilesystemStorageClusters
	142, // 221: proto.FilesystemStorageClusterPrivateService.PingFilesystemClusterPrivate:output_type -> google.protobuf.Empty
	42,  // 222: proto.WekaStatefulAgentPrivateService.RegisterAgent:output_type -> proto.FilesystemAgent
	142, // 223: proto.WekaStatefulAgentPrivateService.DeRegisterAgent:output_type -> google.protobuf.Empty
	42,  // 224: proto.WekaStatefulAgentPrivateService.GetRegisteredAgent:output_type -> proto.FilesystemAgent
	42,  // 225: proto.WekaStatefulAgentPrivateService.ListRegisteredAgents:output_type -> proto.FilesystemAgent
	142, // 226: proto.WekaStatefulAgentPrivateService.PingWekaStatefulAgentPrivate:output_type -> google.protobuf.Empty
	59,  // 227: proto.BucketUserPrivateService.CreateBucketUser:output_type -> proto.BucketPrincipal
	59,  // 228: proto.BucketUserPrivateService.UpdateBucketUserPolicy:output_type -> proto.BucketPrincipal
	59,  // 229: proto.BucketUserPrivateService.UpdateBucketUserCredentials:output_type -> proto.BucketPrincipal
	142, // 230: proto.BucketUserPrivateService.DeleteBucketUser:output_type -> google.protobuf.Empty
	50,  // 231: proto.BucketUserPrivateService.GetBucketCapacity:output_type -> proto.BucketCapacity
	142, // 232: proto.BucketUserPrivateService.PingBucketUserPrivate:output_type -> google.protobuf.Empty
	63,  // 233: proto.FilesystemOrgPrivateService.CreateFilesystemOrgPrivate:output_type -> proto.FilesystemOrgPrivate
	63,  // 234: proto.FilesystemOrgPrivateService.GetFilesystemOrgPrivate:output_type -> proto.FilesystemOrgPrivate
	63,  // 235: proto.FilesystemOrgPrivateService.UpdateFilesystemOrgPrivate:output_type -> proto.FilesystemOrgPrivate
	142, // 236: proto.FilesystemOrgPrivateService.DeleteFilesystemOrgPrivate:output_type -> google.protobuf.Empty
	67,  // 237: proto.FilesystemOrgPrivateService.ListFilesystemsInOrgPrivate:output_type -> proto.FilesystemsInOrgListResponsePrivate
	40,  // 238: proto.FilesystemOrgPrivateService.ListFilesystemOrgsPrivate:output_type -> proto.FilesystemOrgsResponsePrivate
	77,  // 239: proto.ObjectStorageServicePrivate.CreateBucketPrivate:output_type -> proto.ObjectBucketPrivate
	77,  // 240: proto.ObjectStorageServicePrivate.GetBucketPrivate:output_type -> proto.ObjectBucketPrivate
	80,  // 241: proto.ObjectStorageServicePrivate.SearchBucketPrivate:output_type -> proto.ObjectBucketSearchPrivateResponse
	142, // 242: proto.ObjectStorageServicePrivate.DeleteBucketPrivate:output_type -> google.protobuf.Empty
	83,  // 243: proto.ObjectStorageServicePrivate.CreateBucketLifecycleRulePrivate:output_type -> proto.BucketLifecycleRulePrivate
	83,  // 244: proto.ObjectStorageServicePrivate.GetBucketLifecycleRulePrivate:output_type -> proto.BucketLifecycleRulePrivate
	86,  // 245: proto.ObjectStorageServicePrivate.SearchBucketLifecycleRulePrivate:output_type -> proto.BucketLifecycleRuleSearchPrivateResponse
	83,  // 246: proto.ObjectStorageServicePrivate.UpdateBucketLifecycleRulePrivate:output_type -> proto.BucketLifecycleRulePrivate
	142, // 247: proto.ObjectStorageServicePrivate.DeleteBucketLifecycleRulePrivate:output_type -> google.protobuf.Empty
	90,  // 248: proto.ObjectStorageServicePrivate.CreateObjectUserPrivate:output_type -> proto.ObjectUserPrivate
	90,  // 249: proto.ObjectStorageServicePrivate.GetObjectUserPrivate:output_type -> proto.ObjectUserPrivate
	98,  // 250: proto.ObjectStorageServicePrivate.SearchObjectUserPrivate:output_type -> proto.ObjectUserSearchPrivateResponse
	142, // 251: proto.ObjectStorageServicePrivate.DeleteObjectUserPrivate:output_type -> google.protobuf.Empty
	90,  // 252: proto.ObjectStorageServicePrivate.UpdateObjectUserPrivate:output_type -> proto.ObjectUserPrivate
	142, // 253: proto.ObjectStorageServicePrivate.UpdateBucketStatus:output_type -> google.protobuf.Empty
	142, // 254: proto.ObjectStorageServicePrivate.RemoveBucketFinalizer:output_type -> google.protobuf.Empty
	142, // 255: proto.ObjectStorageServicePrivate.UpdateObjectUserStatus:output_type -> google.protobuf.Empty
	142, // 256: proto.ObjectStorageServicePrivate.RemoveObjectUserFinalizer:output_type -> google.protobuf.Empty
	142, // 257: proto.ObjectStorageServicePrivate.AddBucketSubnet:output_type -> google.protobuf.Empty
	142, // 258: proto.ObjectStorageServicePrivate.RemoveBucketSubnet:output_type -> google.protobuf.Empty
	71,  // 259: proto.ObjectStorageServicePrivate.GetBucketSubnetEvent:output_type -> proto.BucketSubnetUpdateEvent
	142, // 260: proto.ObjectStorageServicePrivate.UpdateBucketSubnetStatus:output_type -> google.protobuf.Empty
	142, // 261: proto.ObjectStorageServicePrivate.PingPrivate:output_type -> google.protobuf.Empty
	106, // 262: proto.BucketLifecyclePrivateService.CreateOrUpdateLifecycleRule:output_type -> proto.LifecycleRulePrivate
	142, // 263: proto.BucketLifecyclePrivateService.DeleteLifecycleRule:output_type -> google.protobuf.Empty
	142, // 264: proto.BucketLifecyclePrivateService.PingBucketLifecyclePrivate:output_type -> google.protobuf.Empty
	194, // [194:265] is the sub-list for method output_type
	123, // [123:194] is the sub-list for method input_type
	123, // [123:123] is the sub-list for extension type_name
	123, // [123:123] is the sub-list for extension extendee
	0,   // [0:123] is the sub-list for field type_name
}

func init() { file_storage_private_proto_init() }
func file_storage_private_proto_init() {
	if File_storage_private_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_storage_proto_init()
	file_compute_private_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_private_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemUpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemRemoveFinalizerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSearchStreamPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDeleteUserRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemGetUserRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeIdentifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemGetUserResponsePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemUpdateRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemUserStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemIdReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMetadataPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSpecPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSpecUpdatePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMountStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemNamespaceStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDeleteRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemCreateRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemGetRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemInOrgGetRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgsIsExistsResponsePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgsGetRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgsIsExistsRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgsListRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemUserCreateOrGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemUserResponsePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgsResponsePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgsPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeRegisterAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisterAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegisteredAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemStorageClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageClusterCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketUserParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketUserParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketUpdateUserPolicyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBucketUserPolicyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketUpdateUserCredsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBucketUserCredsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketUserParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemUserCreateOrUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgCreateRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgUpdateRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgGetRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgDeleteRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemsInOrgListRequestPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemsInOrgListResponsePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOrgResponsePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemAccountMetadataReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketSubnetUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketSubnetStatusUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketCreatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketMetadataPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketSpecPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketGetPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketSearchPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketSearchPrivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketDeletePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleCreatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRulePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleGetPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleSearchPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleSearchPrivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleUpdatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleDeletePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObjectUserPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserMetadataPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPrincipalPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserGetPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserUpdatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserDeletePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserSearchPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserSearchPrivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketStatusUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketRemoveFinalizerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserStatusUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserRemoveFinalizerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketIdReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserIdReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateLifecycleRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifecycleRulePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_private_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLifecycleRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_private_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_storage_private_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_storage_private_proto_msgTypes[66].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_private_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   112,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_storage_private_proto_goTypes,
		DependencyIndexes: file_storage_private_proto_depIdxs,
		EnumInfos:         file_storage_private_proto_enumTypes,
		MessageInfos:      file_storage_private_proto_msgTypes,
	}.Build()
	File_storage_private_proto = out.File
	file_storage_private_proto_rawDesc = nil
	file_storage_private_proto_goTypes = nil
	file_storage_private_proto_depIdxs = nil
}
