// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: training.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageMountType int32

const (
	StorageMountType_STORAGE_WEKA          StorageMountType = 0
	StorageMountType_STORAGE_MOUNT_UNKNOWN StorageMountType = 1
)

// Enum value maps for StorageMountType.
var (
	StorageMountType_name = map[int32]string{
		0: "STORAGE_WEKA",
		1: "STORAGE_MOUNT_UNKNOWN",
	}
	StorageMountType_value = map[string]int32{
		"STORAGE_WEKA":          0,
		"STORAGE_MOUNT_UNKNOWN": 1,
	}
)

func (x StorageMountType) Enum() *StorageMountType {
	p := new(StorageMountType)
	*p = x
	return p
}

func (x StorageMountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageMountType) Descriptor() protoreflect.EnumDescriptor {
	return file_training_proto_enumTypes[0].Descriptor()
}

func (StorageMountType) Type() protoreflect.EnumType {
	return &file_training_proto_enumTypes[0]
}

func (x StorageMountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageMountType.Descriptor instead.
func (StorageMountType) EnumDescriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{0}
}

type StorageAccessModeType int32

const (
	StorageAccessModeType_STORAGE_READ_WRITE      StorageAccessModeType = 0
	StorageAccessModeType_STORAGE_READ_ONLY       StorageAccessModeType = 1
	StorageAccessModeType_STORAGE_READ_WRITE_ONCE StorageAccessModeType = 2
	StorageAccessModeType_STORAGE_ACCESS_UNKNOWN  StorageAccessModeType = 3
)

// Enum value maps for StorageAccessModeType.
var (
	StorageAccessModeType_name = map[int32]string{
		0: "STORAGE_READ_WRITE",
		1: "STORAGE_READ_ONLY",
		2: "STORAGE_READ_WRITE_ONCE",
		3: "STORAGE_ACCESS_UNKNOWN",
	}
	StorageAccessModeType_value = map[string]int32{
		"STORAGE_READ_WRITE":      0,
		"STORAGE_READ_ONLY":       1,
		"STORAGE_READ_WRITE_ONCE": 2,
		"STORAGE_ACCESS_UNKNOWN":  3,
	}
)

func (x StorageAccessModeType) Enum() *StorageAccessModeType {
	p := new(StorageAccessModeType)
	*p = x
	return p
}

func (x StorageAccessModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageAccessModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_training_proto_enumTypes[1].Descriptor()
}

func (StorageAccessModeType) Type() protoreflect.EnumType {
	return &file_training_proto_enumTypes[1]
}

func (x StorageAccessModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageAccessModeType.Descriptor instead.
func (StorageAccessModeType) EnumDescriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{1}
}

type NodeRole int32

const (
	NodeRole_COMPUTE_NODE    NodeRole = 0
	NodeRole_CONTROLLER_NODE NodeRole = 1
	NodeRole_JUPYTERHUB_NODE NodeRole = 3
	NodeRole_LOGIN_NODE      NodeRole = 4
	NodeRole_UNKNOWN_ROLE    NodeRole = 5
)

// Enum value maps for NodeRole.
var (
	NodeRole_name = map[int32]string{
		0: "COMPUTE_NODE",
		1: "CONTROLLER_NODE",
		3: "JUPYTERHUB_NODE",
		4: "LOGIN_NODE",
		5: "UNKNOWN_ROLE",
	}
	NodeRole_value = map[string]int32{
		"COMPUTE_NODE":    0,
		"CONTROLLER_NODE": 1,
		"JUPYTERHUB_NODE": 3,
		"LOGIN_NODE":      4,
		"UNKNOWN_ROLE":    5,
	}
)

func (x NodeRole) Enum() *NodeRole {
	p := new(NodeRole)
	*p = x
	return p
}

func (x NodeRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeRole) Descriptor() protoreflect.EnumDescriptor {
	return file_training_proto_enumTypes[2].Descriptor()
}

func (NodeRole) Type() protoreflect.EnumType {
	return &file_training_proto_enumTypes[2]
}

func (x NodeRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeRole.Descriptor instead.
func (NodeRole) EnumDescriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{2}
}

type MachineType int32

const (
	MachineType_SML_VM_TYPE   MachineType = 0
	MachineType_MED_VM_TYPE   MachineType = 1
	MachineType_LRG_VM_TYPE   MachineType = 2
	MachineType_PVC_BM_1100_4 MachineType = 3
	MachineType_PVC_BM_1100_8 MachineType = 4
	MachineType_PVC_BM_1550_8 MachineType = 5
	MachineType_GAUDI_BM_TYPE MachineType = 6
	MachineType_UNKNOWN_TYPE  MachineType = 7
)

// Enum value maps for MachineType.
var (
	MachineType_name = map[int32]string{
		0: "SML_VM_TYPE",
		1: "MED_VM_TYPE",
		2: "LRG_VM_TYPE",
		3: "PVC_BM_1100_4",
		4: "PVC_BM_1100_8",
		5: "PVC_BM_1550_8",
		6: "GAUDI_BM_TYPE",
		7: "UNKNOWN_TYPE",
	}
	MachineType_value = map[string]int32{
		"SML_VM_TYPE":   0,
		"MED_VM_TYPE":   1,
		"LRG_VM_TYPE":   2,
		"PVC_BM_1100_4": 3,
		"PVC_BM_1100_8": 4,
		"PVC_BM_1550_8": 5,
		"GAUDI_BM_TYPE": 6,
		"UNKNOWN_TYPE":  7,
	}
)

func (x MachineType) Enum() *MachineType {
	p := new(MachineType)
	*p = x
	return p
}

func (x MachineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineType) Descriptor() protoreflect.EnumDescriptor {
	return file_training_proto_enumTypes[3].Descriptor()
}

func (MachineType) Type() protoreflect.EnumType {
	return &file_training_proto_enumTypes[3]
}

func (x MachineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineType.Descriptor instead.
func (MachineType) EnumDescriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{3}
}

type ClusterState int32

const (
	ClusterState_REQUESTED    ClusterState = 0
	ClusterState_ACCEPTED     ClusterState = 1
	ClusterState_PROVISIONING ClusterState = 2
	ClusterState_FAILED       ClusterState = 3
	ClusterState_READY        ClusterState = 4
	ClusterState_UPDATING     ClusterState = 5
	ClusterState_UNKNOWN      ClusterState = 6
)

// Enum value maps for ClusterState.
var (
	ClusterState_name = map[int32]string{
		0: "REQUESTED",
		1: "ACCEPTED",
		2: "PROVISIONING",
		3: "FAILED",
		4: "READY",
		5: "UPDATING",
		6: "UNKNOWN",
	}
	ClusterState_value = map[string]int32{
		"REQUESTED":    0,
		"ACCEPTED":     1,
		"PROVISIONING": 2,
		"FAILED":       3,
		"READY":        4,
		"UPDATING":     5,
		"UNKNOWN":      6,
	}
)

func (x ClusterState) Enum() *ClusterState {
	p := new(ClusterState)
	*p = x
	return p
}

func (x ClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_training_proto_enumTypes[4].Descriptor()
}

func (ClusterState) Type() protoreflect.EnumType {
	return &file_training_proto_enumTypes[4]
}

func (x ClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterState.Descriptor instead.
func (ClusterState) EnumDescriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{4}
}

type AccessType int32

const (
	AccessType_ACCESS_TYPE_SSH     AccessType = 0
	AccessType_ACCESS_TYPE_JUPYTER AccessType = 1
)

// Enum value maps for AccessType.
var (
	AccessType_name = map[int32]string{
		0: "ACCESS_TYPE_SSH",
		1: "ACCESS_TYPE_JUPYTER",
	}
	AccessType_value = map[string]int32{
		"ACCESS_TYPE_SSH":     0,
		"ACCESS_TYPE_JUPYTER": 1,
	}
)

func (x AccessType) Enum() *AccessType {
	p := new(AccessType)
	*p = x
	return p
}

func (x AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_training_proto_enumTypes[5].Descriptor()
}

func (AccessType) Type() protoreflect.EnumType {
	return &file_training_proto_enumTypes[5]
}

func (x AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessType.Descriptor instead.
func (AccessType) EnumDescriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{5}
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string         `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId      string         `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Description    string         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	SSHKeyName     []string       `protobuf:"bytes,5,rep,name=SSHKeyName,proto3" json:"SSHKeyName,omitempty"`
	Nodes          []*ClusterNode `protobuf:"bytes,6,rep,name=nodes,proto3" json:"nodes,omitempty"`
	StorageNodes   []*StorageNode `protobuf:"bytes,7,rep,name=storageNodes,proto3" json:"storageNodes,omitempty"`
	Spec           *VNetSpec      `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetSSHKeyName() []string {
	if x != nil {
		return x.SSHKeyName
	}
	return nil
}

func (x *Cluster) GetNodes() []*ClusterNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Cluster) GetStorageNodes() []*StorageNode {
	if x != nil {
		return x.StorageNodes
	}
	return nil
}

func (x *Cluster) GetSpec() *VNetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type SlurmClusterCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string   `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Cluster        *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *SlurmClusterCreateRequest) Reset() {
	*x = SlurmClusterCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlurmClusterCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlurmClusterCreateRequest) ProtoMessage() {}

func (x *SlurmClusterCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlurmClusterCreateRequest.ProtoReflect.Descriptor instead.
func (*SlurmClusterCreateRequest) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{1}
}

func (x *SlurmClusterCreateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *SlurmClusterCreateRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type ClusterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       uint32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	NodeId      string                 `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Name        *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	ImageType   string                 `protobuf:"bytes,4,opt,name=imageType,proto3" json:"imageType,omitempty"`
	MachineType MachineType            `protobuf:"varint,5,opt,name=machineType,proto3,enum=proto.MachineType" json:"machineType,omitempty"`
	Role        NodeRole               `protobuf:"varint,6,opt,name=role,proto3,enum=proto.NodeRole" json:"role,omitempty"`
	Labels      map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
}

func (x *ClusterNode) Reset() {
	*x = ClusterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNode) ProtoMessage() {}

func (x *ClusterNode) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNode.ProtoReflect.Descriptor instead.
func (*ClusterNode) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterNode) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ClusterNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ClusterNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClusterNode) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *ClusterNode) GetMachineType() MachineType {
	if x != nil {
		return x.MachineType
	}
	return MachineType_SML_VM_TYPE
}

func (x *ClusterNode) GetRole() NodeRole {
	if x != nil {
		return x.Role
	}
	return NodeRole_COMPUTE_NODE
}

func (x *ClusterNode) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterNode) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type StorageNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FsResourceId   string                `protobuf:"bytes,2,opt,name=fsResourceId,proto3" json:"fsResourceId,omitempty"`
	Name           string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description    *string               `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Capacity       string                `protobuf:"bytes,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	AccessMode     StorageAccessModeType `protobuf:"varint,6,opt,name=accessMode,proto3,enum=proto.StorageAccessModeType" json:"accessMode,omitempty"`
	Mount          StorageMountType      `protobuf:"varint,7,opt,name=mount,proto3,enum=proto.StorageMountType" json:"mount,omitempty"`
	LocalMountDir  string                `protobuf:"bytes,8,opt,name=localMountDir,proto3" json:"localMountDir,omitempty"`
	RemoteMountDir string                `protobuf:"bytes,9,opt,name=remoteMountDir,proto3" json:"remoteMountDir,omitempty"`
}

func (x *StorageNode) Reset() {
	*x = StorageNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageNode) ProtoMessage() {}

func (x *StorageNode) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageNode.ProtoReflect.Descriptor instead.
func (*StorageNode) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{3}
}

func (x *StorageNode) GetFsResourceId() string {
	if x != nil {
		return x.FsResourceId
	}
	return ""
}

func (x *StorageNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageNode) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *StorageNode) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *StorageNode) GetAccessMode() StorageAccessModeType {
	if x != nil {
		return x.AccessMode
	}
	return StorageAccessModeType_STORAGE_READ_WRITE
}

func (x *StorageNode) GetMount() StorageMountType {
	if x != nil {
		return x.Mount
	}
	return StorageMountType_STORAGE_WEKA
}

func (x *StorageNode) GetLocalMountDir() string {
	if x != nil {
		return x.LocalMountDir
	}
	return ""
}

func (x *StorageNode) GetRemoteMountDir() string {
	if x != nil {
		return x.RemoteMountDir
	}
	return ""
}

type SlurmClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ClusterId      string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *SlurmClusterRequest) Reset() {
	*x = SlurmClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlurmClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlurmClusterRequest) ProtoMessage() {}

func (x *SlurmClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlurmClusterRequest.ProtoReflect.Descriptor instead.
func (*SlurmClusterRequest) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{4}
}

func (x *SlurmClusterRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *SlurmClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type SlurmClusterCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *SlurmClusterCreateResponse) Reset() {
	*x = SlurmClusterCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlurmClusterCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlurmClusterCreateResponse) ProtoMessage() {}

func (x *SlurmClusterCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlurmClusterCreateResponse.ProtoReflect.Descriptor instead.
func (*SlurmClusterCreateResponse) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{5}
}

func (x *SlurmClusterCreateResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ClusterListOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string  `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ClusterName    *string `protobuf:"bytes,3,opt,name=clusterName,proto3,oneof" json:"clusterName,omitempty"`
}

func (x *ClusterListOption) Reset() {
	*x = ClusterListOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterListOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterListOption) ProtoMessage() {}

func (x *ClusterListOption) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterListOption.ProtoReflect.Descriptor instead.
func (*ClusterListOption) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterListOption) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ClusterListOption) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId      string `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterInfo) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SlurmClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*ClusterInfo `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *SlurmClusterResponse) Reset() {
	*x = SlurmClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlurmClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlurmClusterResponse) ProtoMessage() {}

func (x *SlurmClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlurmClusterResponse.ProtoReflect.Descriptor instead.
func (*SlurmClusterResponse) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{8}
}

func (x *SlurmClusterResponse) GetClusters() []*ClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type TrainingRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string     `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	TrainingId     string     `protobuf:"bytes,2,opt,name=trainingId,proto3" json:"trainingId,omitempty"`
	SshKeyNames    []string   `protobuf:"bytes,3,rep,name=sshKeyNames,proto3" json:"sshKeyNames,omitempty"`
	AccessType     AccessType `protobuf:"varint,4,opt,name=accessType,proto3,enum=proto.AccessType" json:"accessType,omitempty"`
}

func (x *TrainingRegistrationRequest) Reset() {
	*x = TrainingRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingRegistrationRequest) ProtoMessage() {}

func (x *TrainingRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingRegistrationRequest.ProtoReflect.Descriptor instead.
func (*TrainingRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{9}
}

func (x *TrainingRegistrationRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *TrainingRegistrationRequest) GetTrainingId() string {
	if x != nil {
		return x.TrainingId
	}
	return ""
}

func (x *TrainingRegistrationRequest) GetSshKeyNames() []string {
	if x != nil {
		return x.SshKeyNames
	}
	return nil
}

func (x *TrainingRegistrationRequest) GetAccessType() AccessType {
	if x != nil {
		return x.AccessType
	}
	return AccessType_ACCESS_TYPE_SSH
}

type TrainingRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshLoginInfo     *string `protobuf:"bytes,1,opt,name=sshLoginInfo,proto3,oneof" json:"sshLoginInfo,omitempty"`
	JupyterLoginInfo *string `protobuf:"bytes,2,opt,name=jupyterLoginInfo,proto3,oneof" json:"jupyterLoginInfo,omitempty"`
	Message          string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ExpiryDate       string  `protobuf:"bytes,4,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
}

func (x *TrainingRegistrationResponse) Reset() {
	*x = TrainingRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingRegistrationResponse) ProtoMessage() {}

func (x *TrainingRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingRegistrationResponse.ProtoReflect.Descriptor instead.
func (*TrainingRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{10}
}

func (x *TrainingRegistrationResponse) GetSshLoginInfo() string {
	if x != nil && x.SshLoginInfo != nil {
		return *x.SshLoginInfo
	}
	return ""
}

func (x *TrainingRegistrationResponse) GetJupyterLoginInfo() string {
	if x != nil && x.JupyterLoginInfo != nil {
		return *x.JupyterLoginInfo
	}
	return ""
}

func (x *TrainingRegistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrainingRegistrationResponse) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

type GetDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *GetDataRequest) Reset() {
	*x = GetDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataRequest) ProtoMessage() {}

func (x *GetDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataRequest.ProtoReflect.Descriptor instead.
func (*GetDataRequest) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{11}
}

func (x *GetDataRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type GetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiryDate string `protobuf:"bytes,1,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
}

func (x *GetDataResponse) Reset() {
	*x = GetDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataResponse) ProtoMessage() {}

func (x *GetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataResponse.ProtoReflect.Descriptor instead.
func (*GetDataResponse) Descriptor() ([]byte, []int) {
	return file_training_proto_rawDescGZIP(), []int{12}
}

func (x *GetDataResponse) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

var File_training_proto protoreflect.FileDescriptor

var file_training_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x07, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x75, 0x0a, 0x19, 0x53, 0x6c, 0x75, 0x72, 0x6d,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x96,
	0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x69, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a,
	0x13, 0x53, 0x6c, 0x75, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1a, 0x53, 0x6c, 0x75, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a,
	0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b,
	0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x6c, 0x75, 0x72, 0x6d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc2,
	0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x73,
	0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x6a, 0x75, 0x70, 0x79, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x73, 0x68,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6a, 0x75,
	0x70, 0x79, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x3f, 0x0a, 0x10, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x45, 0x4b, 0x41, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x2a, 0x7f, 0x0a, 0x15,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x68, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x55, 0x50, 0x59, 0x54, 0x45, 0x52, 0x48, 0x55, 0x42, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x05, 0x2a, 0x9e, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4d, 0x4c, 0x5f, 0x56,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x44, 0x5f,
	0x56, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x52, 0x47,
	0x5f, 0x56, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x56,
	0x43, 0x5f, 0x42, 0x4d, 0x5f, 0x31, 0x31, 0x30, 0x30, 0x5f, 0x34, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x56, 0x43, 0x5f, 0x42, 0x4d, 0x5f, 0x31, 0x31, 0x30, 0x30, 0x5f, 0x38, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x56, 0x43, 0x5f, 0x42, 0x4d, 0x5f, 0x31, 0x35, 0x35, 0x30, 0x5f,
	0x38, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x41, 0x55, 0x44, 0x49, 0x5f, 0x42, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x2a, 0x6f, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x2a, 0x3a, 0x0a, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x55, 0x50, 0x59,
	0x54, 0x45, 0x52, 0x10, 0x01, 0x32, 0xa0, 0x03, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8d, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x75, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x75, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0x7a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x6c, 0x75, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x7a, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x75, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x32, 0xbb, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x87, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x42, 0x6e, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b,
	0x15, 0x12, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_training_proto_rawDescOnce sync.Once
	file_training_proto_rawDescData = file_training_proto_rawDesc
)

func file_training_proto_rawDescGZIP() []byte {
	file_training_proto_rawDescOnce.Do(func() {
		file_training_proto_rawDescData = protoimpl.X.CompressGZIP(file_training_proto_rawDescData)
	})
	return file_training_proto_rawDescData
}

var file_training_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_training_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_training_proto_goTypes = []interface{}{
	(StorageMountType)(0),                // 0: proto.StorageMountType
	(StorageAccessModeType)(0),           // 1: proto.StorageAccessModeType
	(NodeRole)(0),                        // 2: proto.NodeRole
	(MachineType)(0),                     // 3: proto.MachineType
	(ClusterState)(0),                    // 4: proto.ClusterState
	(AccessType)(0),                      // 5: proto.AccessType
	(*Cluster)(nil),                      // 6: proto.Cluster
	(*SlurmClusterCreateRequest)(nil),    // 7: proto.SlurmClusterCreateRequest
	(*ClusterNode)(nil),                  // 8: proto.ClusterNode
	(*StorageNode)(nil),                  // 9: proto.StorageNode
	(*SlurmClusterRequest)(nil),          // 10: proto.SlurmClusterRequest
	(*SlurmClusterCreateResponse)(nil),   // 11: proto.SlurmClusterCreateResponse
	(*ClusterListOption)(nil),            // 12: proto.ClusterListOption
	(*ClusterInfo)(nil),                  // 13: proto.ClusterInfo
	(*SlurmClusterResponse)(nil),         // 14: proto.SlurmClusterResponse
	(*TrainingRegistrationRequest)(nil),  // 15: proto.TrainingRegistrationRequest
	(*TrainingRegistrationResponse)(nil), // 16: proto.TrainingRegistrationResponse
	(*GetDataRequest)(nil),               // 17: proto.GetDataRequest
	(*GetDataResponse)(nil),              // 18: proto.GetDataResponse
	nil,                                  // 19: proto.ClusterNode.LabelsEntry
	(*VNetSpec)(nil),                     // 20: proto.VNetSpec
	(*timestamppb.Timestamp)(nil),        // 21: google.protobuf.Timestamp
}
var file_training_proto_depIdxs = []int32{
	8,  // 0: proto.Cluster.nodes:type_name -> proto.ClusterNode
	9,  // 1: proto.Cluster.storageNodes:type_name -> proto.StorageNode
	20, // 2: proto.Cluster.spec:type_name -> proto.VNetSpec
	6,  // 3: proto.SlurmClusterCreateRequest.cluster:type_name -> proto.Cluster
	3,  // 4: proto.ClusterNode.machineType:type_name -> proto.MachineType
	2,  // 5: proto.ClusterNode.role:type_name -> proto.NodeRole
	19, // 6: proto.ClusterNode.labels:type_name -> proto.ClusterNode.LabelsEntry
	21, // 7: proto.ClusterNode.startTime:type_name -> google.protobuf.Timestamp
	1,  // 8: proto.StorageNode.accessMode:type_name -> proto.StorageAccessModeType
	0,  // 9: proto.StorageNode.mount:type_name -> proto.StorageMountType
	13, // 10: proto.SlurmClusterResponse.clusters:type_name -> proto.ClusterInfo
	5,  // 11: proto.TrainingRegistrationRequest.accessType:type_name -> proto.AccessType
	7,  // 12: proto.TrainingClusterService.Create:input_type -> proto.SlurmClusterCreateRequest
	10, // 13: proto.TrainingClusterService.Get:input_type -> proto.SlurmClusterRequest
	12, // 14: proto.TrainingClusterService.List:input_type -> proto.ClusterListOption
	15, // 15: proto.TrainingBatchUserService.Register:input_type -> proto.TrainingRegistrationRequest
	17, // 16: proto.TrainingBatchUserService.GetExpiryTimeById:input_type -> proto.GetDataRequest
	11, // 17: proto.TrainingClusterService.Create:output_type -> proto.SlurmClusterCreateResponse
	6,  // 18: proto.TrainingClusterService.Get:output_type -> proto.Cluster
	14, // 19: proto.TrainingClusterService.List:output_type -> proto.SlurmClusterResponse
	16, // 20: proto.TrainingBatchUserService.Register:output_type -> proto.TrainingRegistrationResponse
	18, // 21: proto.TrainingBatchUserService.GetExpiryTimeById:output_type -> proto.GetDataResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_training_proto_init() }
func file_training_proto_init() {
	if File_training_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_compute_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_training_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlurmClusterCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlurmClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlurmClusterCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterListOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlurmClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_training_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_training_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_training_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_training_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_training_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_training_proto_goTypes,
		DependencyIndexes: file_training_proto_depIdxs,
		EnumInfos:         file_training_proto_enumTypes,
		MessageInfos:      file_training_proto_msgTypes,
	}.Build()
	File_training_proto = out.File
	file_training_proto_rawDesc = nil
	file_training_proto_goTypes = nil
	file_training_proto_depIdxs = nil
}
