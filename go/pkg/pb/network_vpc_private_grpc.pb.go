// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: network_vpc_private.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VPCPrivateServiceClient is the client API for VPCPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VPCPrivateServiceClient interface {
	// Create a VPC.
	CreatePrivate(ctx context.Context, in *VPCCreatePrivateRequest, opts ...grpc.CallOption) (*VPCPrivate, error)
	// Retrieve a VPC record from DB
	GetPrivate(ctx context.Context, in *VPCGetPrivateRequest, opts ...grpc.CallOption) (*VPCPrivate, error)
	// List VPCs as a stream.
	// This returns all non-deleted vpcs as messages with WatchDeltaType=Updated,
	// followed by a single WatchDeltaType=Bookmark with the last-seen resourceVersion.
	SearchStreamPrivate(ctx context.Context, in *VPCSearchStreamPrivateRequest, opts ...grpc.CallOption) (VPCPrivateService_SearchStreamPrivateClient, error)
	// Return a stream of changes to vpcs using messages with WatchDeltaType=Updated or Deleted.
	// Messages with WatchDeltaType=Bookmark and the last-seen resourceVersion will be sent periodically.
	Watch(ctx context.Context, in *VPCWatchRequest, opts ...grpc.CallOption) (VPCPrivateService_WatchClient, error)
	// Update the resource status.
	UpdateStatus(ctx context.Context, in *VPCUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PingPrivate always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type vPCPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVPCPrivateServiceClient(cc grpc.ClientConnInterface) VPCPrivateServiceClient {
	return &vPCPrivateServiceClient{cc}
}

func (c *vPCPrivateServiceClient) CreatePrivate(ctx context.Context, in *VPCCreatePrivateRequest, opts ...grpc.CallOption) (*VPCPrivate, error) {
	out := new(VPCPrivate)
	err := c.cc.Invoke(ctx, "/proto.VPCPrivateService/CreatePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCPrivateServiceClient) GetPrivate(ctx context.Context, in *VPCGetPrivateRequest, opts ...grpc.CallOption) (*VPCPrivate, error) {
	out := new(VPCPrivate)
	err := c.cc.Invoke(ctx, "/proto.VPCPrivateService/GetPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCPrivateServiceClient) SearchStreamPrivate(ctx context.Context, in *VPCSearchStreamPrivateRequest, opts ...grpc.CallOption) (VPCPrivateService_SearchStreamPrivateClient, error) {
	stream, err := c.cc.NewStream(ctx, &VPCPrivateService_ServiceDesc.Streams[0], "/proto.VPCPrivateService/SearchStreamPrivate", opts...)
	if err != nil {
		return nil, err
	}
	x := &vPCPrivateServiceSearchStreamPrivateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VPCPrivateService_SearchStreamPrivateClient interface {
	Recv() (*VPCWatchResponse, error)
	grpc.ClientStream
}

type vPCPrivateServiceSearchStreamPrivateClient struct {
	grpc.ClientStream
}

func (x *vPCPrivateServiceSearchStreamPrivateClient) Recv() (*VPCWatchResponse, error) {
	m := new(VPCWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vPCPrivateServiceClient) Watch(ctx context.Context, in *VPCWatchRequest, opts ...grpc.CallOption) (VPCPrivateService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &VPCPrivateService_ServiceDesc.Streams[1], "/proto.VPCPrivateService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &vPCPrivateServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VPCPrivateService_WatchClient interface {
	Recv() (*VPCWatchResponse, error)
	grpc.ClientStream
}

type vPCPrivateServiceWatchClient struct {
	grpc.ClientStream
}

func (x *vPCPrivateServiceWatchClient) Recv() (*VPCWatchResponse, error) {
	m := new(VPCWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vPCPrivateServiceClient) UpdateStatus(ctx context.Context, in *VPCUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.VPCPrivateService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.VPCPrivateService/PingPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VPCPrivateServiceServer is the server API for VPCPrivateService service.
// All implementations must embed UnimplementedVPCPrivateServiceServer
// for forward compatibility
type VPCPrivateServiceServer interface {
	// Create a VPC.
	CreatePrivate(context.Context, *VPCCreatePrivateRequest) (*VPCPrivate, error)
	// Retrieve a VPC record from DB
	GetPrivate(context.Context, *VPCGetPrivateRequest) (*VPCPrivate, error)
	// List VPCs as a stream.
	// This returns all non-deleted vpcs as messages with WatchDeltaType=Updated,
	// followed by a single WatchDeltaType=Bookmark with the last-seen resourceVersion.
	SearchStreamPrivate(*VPCSearchStreamPrivateRequest, VPCPrivateService_SearchStreamPrivateServer) error
	// Return a stream of changes to vpcs using messages with WatchDeltaType=Updated or Deleted.
	// Messages with WatchDeltaType=Bookmark and the last-seen resourceVersion will be sent periodically.
	Watch(*VPCWatchRequest, VPCPrivateService_WatchServer) error
	// Update the resource status.
	UpdateStatus(context.Context, *VPCUpdateStatusRequest) (*emptypb.Empty, error)
	// PingPrivate always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedVPCPrivateServiceServer()
}

// UnimplementedVPCPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVPCPrivateServiceServer struct {
}

func (UnimplementedVPCPrivateServiceServer) CreatePrivate(context.Context, *VPCCreatePrivateRequest) (*VPCPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivate not implemented")
}
func (UnimplementedVPCPrivateServiceServer) GetPrivate(context.Context, *VPCGetPrivateRequest) (*VPCPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivate not implemented")
}
func (UnimplementedVPCPrivateServiceServer) SearchStreamPrivate(*VPCSearchStreamPrivateRequest, VPCPrivateService_SearchStreamPrivateServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchStreamPrivate not implemented")
}
func (UnimplementedVPCPrivateServiceServer) Watch(*VPCWatchRequest, VPCPrivateService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedVPCPrivateServiceServer) UpdateStatus(context.Context, *VPCUpdateStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedVPCPrivateServiceServer) PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPrivate not implemented")
}
func (UnimplementedVPCPrivateServiceServer) mustEmbedUnimplementedVPCPrivateServiceServer() {}

// UnsafeVPCPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VPCPrivateServiceServer will
// result in compilation errors.
type UnsafeVPCPrivateServiceServer interface {
	mustEmbedUnimplementedVPCPrivateServiceServer()
}

func RegisterVPCPrivateServiceServer(s grpc.ServiceRegistrar, srv VPCPrivateServiceServer) {
	s.RegisterService(&VPCPrivateService_ServiceDesc, srv)
}

func _VPCPrivateService_CreatePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCCreatePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCPrivateServiceServer).CreatePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VPCPrivateService/CreatePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCPrivateServiceServer).CreatePrivate(ctx, req.(*VPCCreatePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCPrivateService_GetPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCGetPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCPrivateServiceServer).GetPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VPCPrivateService/GetPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCPrivateServiceServer).GetPrivate(ctx, req.(*VPCGetPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCPrivateService_SearchStreamPrivate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VPCSearchStreamPrivateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VPCPrivateServiceServer).SearchStreamPrivate(m, &vPCPrivateServiceSearchStreamPrivateServer{stream})
}

type VPCPrivateService_SearchStreamPrivateServer interface {
	Send(*VPCWatchResponse) error
	grpc.ServerStream
}

type vPCPrivateServiceSearchStreamPrivateServer struct {
	grpc.ServerStream
}

func (x *vPCPrivateServiceSearchStreamPrivateServer) Send(m *VPCWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VPCPrivateService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VPCWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VPCPrivateServiceServer).Watch(m, &vPCPrivateServiceWatchServer{stream})
}

type VPCPrivateService_WatchServer interface {
	Send(*VPCWatchResponse) error
	grpc.ServerStream
}

type vPCPrivateServiceWatchServer struct {
	grpc.ServerStream
}

func (x *vPCPrivateServiceWatchServer) Send(m *VPCWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VPCPrivateService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCPrivateServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VPCPrivateService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCPrivateServiceServer).UpdateStatus(ctx, req.(*VPCUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCPrivateService_PingPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCPrivateServiceServer).PingPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VPCPrivateService/PingPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCPrivateServiceServer).PingPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VPCPrivateService_ServiceDesc is the grpc.ServiceDesc for VPCPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VPCPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VPCPrivateService",
	HandlerType: (*VPCPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrivate",
			Handler:    _VPCPrivateService_CreatePrivate_Handler,
		},
		{
			MethodName: "GetPrivate",
			Handler:    _VPCPrivateService_GetPrivate_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _VPCPrivateService_UpdateStatus_Handler,
		},
		{
			MethodName: "PingPrivate",
			Handler:    _VPCPrivateService_PingPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchStreamPrivate",
			Handler:       _VPCPrivateService_SearchStreamPrivate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _VPCPrivateService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network_vpc_private.proto",
}
