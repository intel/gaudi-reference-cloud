// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cloudmonitor_logs.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchAllLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAllLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAllLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAllLogsRequestMultiError, or nil if none found.
func (m *SearchAllLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAllLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	// no validation rules for Size

	// no validation rules for PageNumber

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return SearchAllLogsRequestMultiError(errors)
	}

	return nil
}

// SearchAllLogsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchAllLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchAllLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAllLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAllLogsRequestMultiError) AllErrors() []error { return m }

// SearchAllLogsRequestValidationError is the validation error returned by
// SearchAllLogsRequest.Validate if the designated constraints aren't met.
type SearchAllLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAllLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAllLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAllLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAllLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAllLogsRequestValidationError) ErrorName() string {
	return "SearchAllLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAllLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAllLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAllLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAllLogsRequestValidationError{}

// Validate checks the field values on SearchAllLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAllLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAllLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAllLogsResponseMultiError, or nil if none found.
func (m *SearchAllLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAllLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAllLogsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAllLogsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAllLogsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchAllLogsResponseMultiError(errors)
	}

	return nil
}

// SearchAllLogsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchAllLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchAllLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAllLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAllLogsResponseMultiError) AllErrors() []error { return m }

// SearchAllLogsResponseValidationError is the validation error returned by
// SearchAllLogsResponse.Validate if the designated constraints aren't met.
type SearchAllLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAllLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAllLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAllLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAllLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAllLogsResponseValidationError) ErrorName() string {
	return "SearchAllLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAllLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAllLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAllLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAllLogsResponseValidationError{}

// Validate checks the field values on QueryResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryResultMultiError, or
// nil if none found.
func (m *QueryResult) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Took

	// no validation rules for TimedOut

	if all {
		switch v := interface{}(m.GetHits()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryResultValidationError{
					field:  "Hits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryResultValidationError{
					field:  "Hits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryResultValidationError{
				field:  "Hits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAggregations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryResultValidationError{
					field:  "Aggregations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryResultValidationError{
					field:  "Aggregations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAggregations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryResultValidationError{
				field:  "Aggregations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryResultMultiError(errors)
	}

	return nil
}

// QueryResultMultiError is an error wrapping multiple validation errors
// returned by QueryResult.ValidateAll() if the designated constraints aren't met.
type QueryResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResultMultiError) AllErrors() []error { return m }

// QueryResultValidationError is the validation error returned by
// QueryResult.Validate if the designated constraints aren't met.
type QueryResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResultValidationError) ErrorName() string { return "QueryResultValidationError" }

// Error satisfies the builtin error interface
func (e QueryResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResultValidationError{}

// Validate checks the field values on HitsItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HitsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HitsItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HitsItemMultiError, or nil
// if none found.
func (m *HitsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *HitsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HitsItemValidationError{
						field:  fmt.Sprintf("Hits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HitsItemValidationError{
						field:  fmt.Sprintf("Hits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HitsItemValidationError{
					field:  fmt.Sprintf("Hits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HitsItemMultiError(errors)
	}

	return nil
}

// HitsItemMultiError is an error wrapping multiple validation errors returned
// by HitsItem.ValidateAll() if the designated constraints aren't met.
type HitsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HitsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HitsItemMultiError) AllErrors() []error { return m }

// HitsItemValidationError is the validation error returned by
// HitsItem.Validate if the designated constraints aren't met.
type HitsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HitsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HitsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HitsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HitsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HitsItemValidationError) ErrorName() string { return "HitsItemValidationError" }

// Error satisfies the builtin error interface
func (e HitsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHitsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HitsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HitsItemValidationError{}

// Validate checks the field values on Hits with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Hits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hits with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HitsMultiError, or nil if none found.
func (m *Hits) ValidateAll() error {
	return m.validate(true)
}

func (m *Hits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetXSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HitsValidationError{
					field:  "XSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HitsValidationError{
					field:  "XSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetXSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HitsValidationError{
				field:  "XSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HitsMultiError(errors)
	}

	return nil
}

// HitsMultiError is an error wrapping multiple validation errors returned by
// Hits.ValidateAll() if the designated constraints aren't met.
type HitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HitsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HitsMultiError) AllErrors() []error { return m }

// HitsValidationError is the validation error returned by Hits.Validate if the
// designated constraints aren't met.
type HitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HitsValidationError) ErrorName() string { return "HitsValidationError" }

// Error satisfies the builtin error interface
func (e HitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HitsValidationError{}

// Validate checks the field values on SourceData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SourceData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SourceData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SourceDataMultiError, or
// nil if none found.
func (m *SourceData) ValidateAll() error {
	return m.validate(true)
}

func (m *SourceData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp1

	// no validation rules for SystemComponent

	// no validation rules for ClusterId

	// no validation rules for Log

	// no validation rules for ClusterName

	// no validation rules for Timestamp

	// no validation rules for Host

	// no validation rules for ClusterRegion

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return SourceDataMultiError(errors)
	}

	return nil
}

// SourceDataMultiError is an error wrapping multiple validation errors
// returned by SourceData.ValidateAll() if the designated constraints aren't met.
type SourceDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourceDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourceDataMultiError) AllErrors() []error { return m }

// SourceDataValidationError is the validation error returned by
// SourceData.Validate if the designated constraints aren't met.
type SourceDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceDataValidationError) ErrorName() string { return "SourceDataValidationError" }

// Error satisfies the builtin error interface
func (e SourceDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceDataValidationError{}

// Validate checks the field values on Aggregations with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Aggregations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Aggregations with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AggregationsMultiError, or
// nil if none found.
func (m *Aggregations) ValidateAll() error {
	return m.validate(true)
}

func (m *Aggregations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUniqueFieldValues()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregationsValidationError{
					field:  "UniqueFieldValues",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregationsValidationError{
					field:  "UniqueFieldValues",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUniqueFieldValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregationsValidationError{
				field:  "UniqueFieldValues",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AggregationsMultiError(errors)
	}

	return nil
}

// AggregationsMultiError is an error wrapping multiple validation errors
// returned by Aggregations.ValidateAll() if the designated constraints aren't met.
type AggregationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationsMultiError) AllErrors() []error { return m }

// AggregationsValidationError is the validation error returned by
// Aggregations.Validate if the designated constraints aren't met.
type AggregationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationsValidationError) ErrorName() string { return "AggregationsValidationError" }

// Error satisfies the builtin error interface
func (e AggregationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationsValidationError{}

// Validate checks the field values on UniqueFieldValues with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UniqueFieldValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UniqueFieldValues with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UniqueFieldValuesMultiError, or nil if none found.
func (m *UniqueFieldValues) ValidateAll() error {
	return m.validate(true)
}

func (m *UniqueFieldValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocCountErrorUpperBound

	// no validation rules for SumOtherDocCount

	for idx, item := range m.GetBuckets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UniqueFieldValuesValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UniqueFieldValuesValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UniqueFieldValuesValidationError{
					field:  fmt.Sprintf("Buckets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UniqueFieldValuesMultiError(errors)
	}

	return nil
}

// UniqueFieldValuesMultiError is an error wrapping multiple validation errors
// returned by UniqueFieldValues.ValidateAll() if the designated constraints
// aren't met.
type UniqueFieldValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UniqueFieldValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UniqueFieldValuesMultiError) AllErrors() []error { return m }

// UniqueFieldValuesValidationError is the validation error returned by
// UniqueFieldValues.Validate if the designated constraints aren't met.
type UniqueFieldValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UniqueFieldValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UniqueFieldValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UniqueFieldValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UniqueFieldValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UniqueFieldValuesValidationError) ErrorName() string {
	return "UniqueFieldValuesValidationError"
}

// Error satisfies the builtin error interface
func (e UniqueFieldValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUniqueFieldValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UniqueFieldValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UniqueFieldValuesValidationError{}

// Validate checks the field values on Buckets with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Buckets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Buckets with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BucketsMultiError, or nil if none found.
func (m *Buckets) ValidateAll() error {
	return m.validate(true)
}

func (m *Buckets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for DocCount

	if len(errors) > 0 {
		return BucketsMultiError(errors)
	}

	return nil
}

// BucketsMultiError is an error wrapping multiple validation errors returned
// by Buckets.ValidateAll() if the designated constraints aren't met.
type BucketsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketsMultiError) AllErrors() []error { return m }

// BucketsValidationError is the validation error returned by Buckets.Validate
// if the designated constraints aren't met.
type BucketsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketsValidationError) ErrorName() string { return "BucketsValidationError" }

// Error satisfies the builtin error interface
func (e BucketsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuckets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketsValidationError{}

// Validate checks the field values on SearchLogsByTermRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchLogsByTermRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogsByTermRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogsByTermRequestMultiError, or nil if none found.
func (m *SearchLogsByTermRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogsByTermRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	// no validation rules for SearchTerm

	// no validation rules for Size

	// no validation rules for PageNumber

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return SearchLogsByTermRequestMultiError(errors)
	}

	return nil
}

// SearchLogsByTermRequestMultiError is an error wrapping multiple validation
// errors returned by SearchLogsByTermRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchLogsByTermRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogsByTermRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogsByTermRequestMultiError) AllErrors() []error { return m }

// SearchLogsByTermRequestValidationError is the validation error returned by
// SearchLogsByTermRequest.Validate if the designated constraints aren't met.
type SearchLogsByTermRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogsByTermRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogsByTermRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogsByTermRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogsByTermRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogsByTermRequestValidationError) ErrorName() string {
	return "SearchLogsByTermRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchLogsByTermRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogsByTermRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogsByTermRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogsByTermRequestValidationError{}

// Validate checks the field values on SearchLogsByTermResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchLogsByTermResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogsByTermResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogsByTermResponseMultiError, or nil if none found.
func (m *SearchLogsByTermResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogsByTermResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchLogsByTermResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchLogsByTermResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchLogsByTermResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchLogsByTermResponseMultiError(errors)
	}

	return nil
}

// SearchLogsByTermResponseMultiError is an error wrapping multiple validation
// errors returned by SearchLogsByTermResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchLogsByTermResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogsByTermResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogsByTermResponseMultiError) AllErrors() []error { return m }

// SearchLogsByTermResponseValidationError is the validation error returned by
// SearchLogsByTermResponse.Validate if the designated constraints aren't met.
type SearchLogsByTermResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogsByTermResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogsByTermResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogsByTermResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogsByTermResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogsByTermResponseValidationError) ErrorName() string {
	return "SearchLogsByTermResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchLogsByTermResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogsByTermResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogsByTermResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogsByTermResponseValidationError{}

// Validate checks the field values on SearchPanelDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPanelDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPanelDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPanelDataRequestMultiError, or nil if none found.
func (m *SearchPanelDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPanelDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	// no validation rules for Size

	// no validation rules for FieldName

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return SearchPanelDataRequestMultiError(errors)
	}

	return nil
}

// SearchPanelDataRequestMultiError is an error wrapping multiple validation
// errors returned by SearchPanelDataRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchPanelDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPanelDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPanelDataRequestMultiError) AllErrors() []error { return m }

// SearchPanelDataRequestValidationError is the validation error returned by
// SearchPanelDataRequest.Validate if the designated constraints aren't met.
type SearchPanelDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPanelDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPanelDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPanelDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPanelDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPanelDataRequestValidationError) ErrorName() string {
	return "SearchPanelDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPanelDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPanelDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPanelDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPanelDataRequestValidationError{}

// Validate checks the field values on SearchPanelDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPanelDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPanelDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPanelDataResponseMultiError, or nil if none found.
func (m *SearchPanelDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPanelDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchPanelDataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchPanelDataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchPanelDataResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchPanelDataResponseMultiError(errors)
	}

	return nil
}

// SearchPanelDataResponseMultiError is an error wrapping multiple validation
// errors returned by SearchPanelDataResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchPanelDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPanelDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPanelDataResponseMultiError) AllErrors() []error { return m }

// SearchPanelDataResponseValidationError is the validation error returned by
// SearchPanelDataResponse.Validate if the designated constraints aren't met.
type SearchPanelDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPanelDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPanelDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPanelDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPanelDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPanelDataResponseValidationError) ErrorName() string {
	return "SearchPanelDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPanelDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPanelDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPanelDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPanelDataResponseValidationError{}

// Validate checks the field values on SearchLogsByFilterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchLogsByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogsByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogsByFilterRequestMultiError, or nil if none found.
func (m *SearchLogsByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogsByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	// no validation rules for Size

	// no validation rules for PageNumber

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return SearchLogsByFilterRequestMultiError(errors)
	}

	return nil
}

// SearchLogsByFilterRequestMultiError is an error wrapping multiple validation
// errors returned by SearchLogsByFilterRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchLogsByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogsByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogsByFilterRequestMultiError) AllErrors() []error { return m }

// SearchLogsByFilterRequestValidationError is the validation error returned by
// SearchLogsByFilterRequest.Validate if the designated constraints aren't met.
type SearchLogsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogsByFilterRequestValidationError) ErrorName() string {
	return "SearchLogsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchLogsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogsByFilterRequestValidationError{}

// Validate checks the field values on SearchLogsByFilterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchLogsByFilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogsByFilterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogsByFilterResponseMultiError, or nil if none found.
func (m *SearchLogsByFilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogsByFilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchLogsByFilterResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchLogsByFilterResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchLogsByFilterResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchLogsByFilterResponseMultiError(errors)
	}

	return nil
}

// SearchLogsByFilterResponseMultiError is an error wrapping multiple
// validation errors returned by SearchLogsByFilterResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchLogsByFilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogsByFilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogsByFilterResponseMultiError) AllErrors() []error { return m }

// SearchLogsByFilterResponseValidationError is the validation error returned
// by SearchLogsByFilterResponse.Validate if the designated constraints aren't met.
type SearchLogsByFilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogsByFilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogsByFilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogsByFilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogsByFilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogsByFilterResponseValidationError) ErrorName() string {
	return "SearchLogsByFilterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchLogsByFilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogsByFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogsByFilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogsByFilterResponseValidationError{}

// Validate checks the field values on SearchLogsByPhraseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchLogsByPhraseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogsByPhraseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogsByPhraseRequestMultiError, or nil if none found.
func (m *SearchLogsByPhraseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogsByPhraseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	// no validation rules for SearchPhrase

	// no validation rules for Size

	// no validation rules for PageNumber

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return SearchLogsByPhraseRequestMultiError(errors)
	}

	return nil
}

// SearchLogsByPhraseRequestMultiError is an error wrapping multiple validation
// errors returned by SearchLogsByPhraseRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchLogsByPhraseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogsByPhraseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogsByPhraseRequestMultiError) AllErrors() []error { return m }

// SearchLogsByPhraseRequestValidationError is the validation error returned by
// SearchLogsByPhraseRequest.Validate if the designated constraints aren't met.
type SearchLogsByPhraseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogsByPhraseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogsByPhraseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogsByPhraseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogsByPhraseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogsByPhraseRequestValidationError) ErrorName() string {
	return "SearchLogsByPhraseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchLogsByPhraseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogsByPhraseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogsByPhraseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogsByPhraseRequestValidationError{}

// Validate checks the field values on SearchLogsByPhraseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchLogsByPhraseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogsByPhraseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogsByPhraseResponseMultiError, or nil if none found.
func (m *SearchLogsByPhraseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogsByPhraseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchLogsByPhraseResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchLogsByPhraseResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchLogsByPhraseResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchLogsByPhraseResponseMultiError(errors)
	}

	return nil
}

// SearchLogsByPhraseResponseMultiError is an error wrapping multiple
// validation errors returned by SearchLogsByPhraseResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchLogsByPhraseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogsByPhraseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogsByPhraseResponseMultiError) AllErrors() []error { return m }

// SearchLogsByPhraseResponseValidationError is the validation error returned
// by SearchLogsByPhraseResponse.Validate if the designated constraints aren't met.
type SearchLogsByPhraseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogsByPhraseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogsByPhraseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogsByPhraseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogsByPhraseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogsByPhraseResponseValidationError) ErrorName() string {
	return "SearchLogsByPhraseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchLogsByPhraseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogsByPhraseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogsByPhraseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogsByPhraseResponseValidationError{}

// Validate checks the field values on UserRegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegistrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegistrationRequestMultiError, or nil if none found.
func (m *UserRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceType

	if len(errors) > 0 {
		return UserRegistrationRequestMultiError(errors)
	}

	return nil
}

// UserRegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegistrationRequestMultiError) AllErrors() []error { return m }

// UserRegistrationRequestValidationError is the validation error returned by
// UserRegistrationRequest.Validate if the designated constraints aren't met.
type UserRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegistrationRequestValidationError) ErrorName() string {
	return "UserRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegistrationRequestValidationError{}

// Validate checks the field values on UserRegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegistrationResponseMultiError, or nil if none found.
func (m *UserRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserRegistrationResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserRegistrationResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRegistrationResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserRegistrationResponseMultiError(errors)
	}

	return nil
}

// UserRegistrationResponseMultiError is an error wrapping multiple validation
// errors returned by UserRegistrationResponse.ValidateAll() if the designated
// constraints aren't met.
type UserRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegistrationResponseMultiError) AllErrors() []error { return m }

// UserRegistrationResponseValidationError is the validation error returned by
// UserRegistrationResponse.Validate if the designated constraints aren't met.
type UserRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegistrationResponseValidationError) ErrorName() string {
	return "UserRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegistrationResponseValidationError{}

// Validate checks the field values on ResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseDataMultiError, or
// nil if none found.
func (m *ResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsTemplateCreated

	// no validation rules for IsIndexCreated

	// no validation rules for IsAliasCreated

	if len(errors) > 0 {
		return ResponseDataMultiError(errors)
	}

	return nil
}

// ResponseDataMultiError is an error wrapping multiple validation errors
// returned by ResponseData.ValidateAll() if the designated constraints aren't met.
type ResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseDataMultiError) AllErrors() []error { return m }

// ResponseDataValidationError is the validation error returned by
// ResponseData.Validate if the designated constraints aren't met.
type ResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseDataValidationError) ErrorName() string { return "ResponseDataValidationError" }

// Error satisfies the builtin error interface
func (e ResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseDataValidationError{}
