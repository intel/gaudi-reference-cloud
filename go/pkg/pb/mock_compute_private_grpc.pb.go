// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/compute_private_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockInstancePrivateServiceClient is a mock of InstancePrivateServiceClient interface.
type MockInstancePrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePrivateServiceClientMockRecorder
}

// MockInstancePrivateServiceClientMockRecorder is the mock recorder for MockInstancePrivateServiceClient.
type MockInstancePrivateServiceClientMockRecorder struct {
	mock *MockInstancePrivateServiceClient
}

// NewMockInstancePrivateServiceClient creates a new mock instance.
func NewMockInstancePrivateServiceClient(ctrl *gomock.Controller) *MockInstancePrivateServiceClient {
	mock := &MockInstancePrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockInstancePrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePrivateServiceClient) EXPECT() *MockInstancePrivateServiceClientMockRecorder {
	return m.recorder
}

// CreateMultiplePrivate mocks base method.
func (m *MockInstancePrivateServiceClient) CreateMultiplePrivate(ctx context.Context, in *InstanceCreateMultiplePrivateRequest, opts ...grpc.CallOption) (*InstanceCreateMultiplePrivateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiplePrivate", varargs...)
	ret0, _ := ret[0].(*InstanceCreateMultiplePrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiplePrivate indicates an expected call of CreateMultiplePrivate.
func (mr *MockInstancePrivateServiceClientMockRecorder) CreateMultiplePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiplePrivate", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).CreateMultiplePrivate), varargs...)
}

// CreatePrivate mocks base method.
func (m *MockInstancePrivateServiceClient) CreatePrivate(ctx context.Context, in *InstanceCreatePrivateRequest, opts ...grpc.CallOption) (*InstancePrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrivate", varargs...)
	ret0, _ := ret[0].(*InstancePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockInstancePrivateServiceClientMockRecorder) CreatePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).CreatePrivate), varargs...)
}

// DeletePrivate mocks base method.
func (m *MockInstancePrivateServiceClient) DeletePrivate(ctx context.Context, in *InstanceDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivate indicates an expected call of DeletePrivate.
func (mr *MockInstancePrivateServiceClientMockRecorder) DeletePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivate", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).DeletePrivate), varargs...)
}

// PingPrivate mocks base method.
func (m *MockInstancePrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockInstancePrivateServiceClientMockRecorder) PingPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).PingPrivate), varargs...)
}

// RemoveFinalizer mocks base method.
func (m *MockInstancePrivateServiceClient) RemoveFinalizer(ctx context.Context, in *InstanceRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFinalizer", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFinalizer indicates an expected call of RemoveFinalizer.
func (mr *MockInstancePrivateServiceClientMockRecorder) RemoveFinalizer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizer", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).RemoveFinalizer), varargs...)
}

// SearchPrivate mocks base method.
func (m *MockInstancePrivateServiceClient) SearchPrivate(ctx context.Context, in *InstanceSearchPrivateRequest, opts ...grpc.CallOption) (*InstanceSearchPrivateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPrivate", varargs...)
	ret0, _ := ret[0].(*InstanceSearchPrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPrivate indicates an expected call of SearchPrivate.
func (mr *MockInstancePrivateServiceClientMockRecorder) SearchPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPrivate", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).SearchPrivate), varargs...)
}

// SearchStreamPrivate mocks base method.
func (m *MockInstancePrivateServiceClient) SearchStreamPrivate(ctx context.Context, in *InstanceSearchStreamPrivateRequest, opts ...grpc.CallOption) (InstancePrivateService_SearchStreamPrivateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStreamPrivate", varargs...)
	ret0, _ := ret[0].(InstancePrivateService_SearchStreamPrivateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStreamPrivate indicates an expected call of SearchStreamPrivate.
func (mr *MockInstancePrivateServiceClientMockRecorder) SearchStreamPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStreamPrivate", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).SearchStreamPrivate), varargs...)
}

// UpdatePrivate mocks base method.
func (m *MockInstancePrivateServiceClient) UpdatePrivate(ctx context.Context, in *InstanceUpdatePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivate indicates an expected call of UpdatePrivate.
func (mr *MockInstancePrivateServiceClientMockRecorder) UpdatePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivate", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).UpdatePrivate), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockInstancePrivateServiceClient) UpdateStatus(ctx context.Context, in *InstanceUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockInstancePrivateServiceClientMockRecorder) UpdateStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).UpdateStatus), varargs...)
}

// Watch mocks base method.
func (m *MockInstancePrivateServiceClient) Watch(ctx context.Context, in *InstanceWatchRequest, opts ...grpc.CallOption) (InstancePrivateService_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(InstancePrivateService_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockInstancePrivateServiceClientMockRecorder) Watch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockInstancePrivateServiceClient)(nil).Watch), varargs...)
}

// MockInstancePrivateService_SearchStreamPrivateClient is a mock of InstancePrivateService_SearchStreamPrivateClient interface.
type MockInstancePrivateService_SearchStreamPrivateClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder
}

// MockInstancePrivateService_SearchStreamPrivateClientMockRecorder is the mock recorder for MockInstancePrivateService_SearchStreamPrivateClient.
type MockInstancePrivateService_SearchStreamPrivateClientMockRecorder struct {
	mock *MockInstancePrivateService_SearchStreamPrivateClient
}

// NewMockInstancePrivateService_SearchStreamPrivateClient creates a new mock instance.
func NewMockInstancePrivateService_SearchStreamPrivateClient(ctrl *gomock.Controller) *MockInstancePrivateService_SearchStreamPrivateClient {
	mock := &MockInstancePrivateService_SearchStreamPrivateClient{ctrl: ctrl}
	mock.recorder = &MockInstancePrivateService_SearchStreamPrivateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePrivateService_SearchStreamPrivateClient) EXPECT() *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateClient) Recv() (*InstanceWatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*InstanceWatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockInstancePrivateService_SearchStreamPrivateClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockInstancePrivateService_SearchStreamPrivateClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockInstancePrivateService_SearchStreamPrivateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateClient)(nil).Trailer))
}

// MockInstancePrivateService_WatchClient is a mock of InstancePrivateService_WatchClient interface.
type MockInstancePrivateService_WatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePrivateService_WatchClientMockRecorder
}

// MockInstancePrivateService_WatchClientMockRecorder is the mock recorder for MockInstancePrivateService_WatchClient.
type MockInstancePrivateService_WatchClientMockRecorder struct {
	mock *MockInstancePrivateService_WatchClient
}

// NewMockInstancePrivateService_WatchClient creates a new mock instance.
func NewMockInstancePrivateService_WatchClient(ctrl *gomock.Controller) *MockInstancePrivateService_WatchClient {
	mock := &MockInstancePrivateService_WatchClient{ctrl: ctrl}
	mock.recorder = &MockInstancePrivateService_WatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePrivateService_WatchClient) EXPECT() *MockInstancePrivateService_WatchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockInstancePrivateService_WatchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockInstancePrivateService_WatchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockInstancePrivateService_WatchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockInstancePrivateService_WatchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstancePrivateService_WatchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancePrivateService_WatchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockInstancePrivateService_WatchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockInstancePrivateService_WatchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockInstancePrivateService_WatchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockInstancePrivateService_WatchClient) Recv() (*InstanceWatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*InstanceWatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockInstancePrivateService_WatchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockInstancePrivateService_WatchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockInstancePrivateService_WatchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInstancePrivateService_WatchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInstancePrivateService_WatchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockInstancePrivateService_WatchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInstancePrivateService_WatchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInstancePrivateService_WatchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockInstancePrivateService_WatchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockInstancePrivateService_WatchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockInstancePrivateService_WatchClient)(nil).Trailer))
}

// MockInstancePrivateServiceServer is a mock of InstancePrivateServiceServer interface.
type MockInstancePrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePrivateServiceServerMockRecorder
}

// MockInstancePrivateServiceServerMockRecorder is the mock recorder for MockInstancePrivateServiceServer.
type MockInstancePrivateServiceServerMockRecorder struct {
	mock *MockInstancePrivateServiceServer
}

// NewMockInstancePrivateServiceServer creates a new mock instance.
func NewMockInstancePrivateServiceServer(ctrl *gomock.Controller) *MockInstancePrivateServiceServer {
	mock := &MockInstancePrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockInstancePrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePrivateServiceServer) EXPECT() *MockInstancePrivateServiceServerMockRecorder {
	return m.recorder
}

// CreateMultiplePrivate mocks base method.
func (m *MockInstancePrivateServiceServer) CreateMultiplePrivate(arg0 context.Context, arg1 *InstanceCreateMultiplePrivateRequest) (*InstanceCreateMultiplePrivateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiplePrivate", arg0, arg1)
	ret0, _ := ret[0].(*InstanceCreateMultiplePrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiplePrivate indicates an expected call of CreateMultiplePrivate.
func (mr *MockInstancePrivateServiceServerMockRecorder) CreateMultiplePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiplePrivate", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).CreateMultiplePrivate), arg0, arg1)
}

// CreatePrivate mocks base method.
func (m *MockInstancePrivateServiceServer) CreatePrivate(arg0 context.Context, arg1 *InstanceCreatePrivateRequest) (*InstancePrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivate", arg0, arg1)
	ret0, _ := ret[0].(*InstancePrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockInstancePrivateServiceServerMockRecorder) CreatePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).CreatePrivate), arg0, arg1)
}

// DeletePrivate mocks base method.
func (m *MockInstancePrivateServiceServer) DeletePrivate(arg0 context.Context, arg1 *InstanceDeletePrivateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivate indicates an expected call of DeletePrivate.
func (mr *MockInstancePrivateServiceServerMockRecorder) DeletePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivate", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).DeletePrivate), arg0, arg1)
}

// PingPrivate mocks base method.
func (m *MockInstancePrivateServiceServer) PingPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockInstancePrivateServiceServerMockRecorder) PingPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).PingPrivate), arg0, arg1)
}

// RemoveFinalizer mocks base method.
func (m *MockInstancePrivateServiceServer) RemoveFinalizer(arg0 context.Context, arg1 *InstanceRemoveFinalizerRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizer", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFinalizer indicates an expected call of RemoveFinalizer.
func (mr *MockInstancePrivateServiceServerMockRecorder) RemoveFinalizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizer", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).RemoveFinalizer), arg0, arg1)
}

// SearchPrivate mocks base method.
func (m *MockInstancePrivateServiceServer) SearchPrivate(arg0 context.Context, arg1 *InstanceSearchPrivateRequest) (*InstanceSearchPrivateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPrivate", arg0, arg1)
	ret0, _ := ret[0].(*InstanceSearchPrivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPrivate indicates an expected call of SearchPrivate.
func (mr *MockInstancePrivateServiceServerMockRecorder) SearchPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPrivate", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).SearchPrivate), arg0, arg1)
}

// SearchStreamPrivate mocks base method.
func (m *MockInstancePrivateServiceServer) SearchStreamPrivate(arg0 *InstanceSearchStreamPrivateRequest, arg1 InstancePrivateService_SearchStreamPrivateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStreamPrivate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStreamPrivate indicates an expected call of SearchStreamPrivate.
func (mr *MockInstancePrivateServiceServerMockRecorder) SearchStreamPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStreamPrivate", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).SearchStreamPrivate), arg0, arg1)
}

// UpdatePrivate mocks base method.
func (m *MockInstancePrivateServiceServer) UpdatePrivate(arg0 context.Context, arg1 *InstanceUpdatePrivateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivate indicates an expected call of UpdatePrivate.
func (mr *MockInstancePrivateServiceServerMockRecorder) UpdatePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivate", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).UpdatePrivate), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockInstancePrivateServiceServer) UpdateStatus(arg0 context.Context, arg1 *InstanceUpdateStatusRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockInstancePrivateServiceServerMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).UpdateStatus), arg0, arg1)
}

// Watch mocks base method.
func (m *MockInstancePrivateServiceServer) Watch(arg0 *InstanceWatchRequest, arg1 InstancePrivateService_WatchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockInstancePrivateServiceServerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).Watch), arg0, arg1)
}

// mustEmbedUnimplementedInstancePrivateServiceServer mocks base method.
func (m *MockInstancePrivateServiceServer) mustEmbedUnimplementedInstancePrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstancePrivateServiceServer")
}

// mustEmbedUnimplementedInstancePrivateServiceServer indicates an expected call of mustEmbedUnimplementedInstancePrivateServiceServer.
func (mr *MockInstancePrivateServiceServerMockRecorder) mustEmbedUnimplementedInstancePrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstancePrivateServiceServer", reflect.TypeOf((*MockInstancePrivateServiceServer)(nil).mustEmbedUnimplementedInstancePrivateServiceServer))
}

// MockUnsafeInstancePrivateServiceServer is a mock of UnsafeInstancePrivateServiceServer interface.
type MockUnsafeInstancePrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInstancePrivateServiceServerMockRecorder
}

// MockUnsafeInstancePrivateServiceServerMockRecorder is the mock recorder for MockUnsafeInstancePrivateServiceServer.
type MockUnsafeInstancePrivateServiceServerMockRecorder struct {
	mock *MockUnsafeInstancePrivateServiceServer
}

// NewMockUnsafeInstancePrivateServiceServer creates a new mock instance.
func NewMockUnsafeInstancePrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeInstancePrivateServiceServer {
	mock := &MockUnsafeInstancePrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInstancePrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInstancePrivateServiceServer) EXPECT() *MockUnsafeInstancePrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInstancePrivateServiceServer mocks base method.
func (m *MockUnsafeInstancePrivateServiceServer) mustEmbedUnimplementedInstancePrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstancePrivateServiceServer")
}

// mustEmbedUnimplementedInstancePrivateServiceServer indicates an expected call of mustEmbedUnimplementedInstancePrivateServiceServer.
func (mr *MockUnsafeInstancePrivateServiceServerMockRecorder) mustEmbedUnimplementedInstancePrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstancePrivateServiceServer", reflect.TypeOf((*MockUnsafeInstancePrivateServiceServer)(nil).mustEmbedUnimplementedInstancePrivateServiceServer))
}

// MockInstancePrivateService_SearchStreamPrivateServer is a mock of InstancePrivateService_SearchStreamPrivateServer interface.
type MockInstancePrivateService_SearchStreamPrivateServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder
}

// MockInstancePrivateService_SearchStreamPrivateServerMockRecorder is the mock recorder for MockInstancePrivateService_SearchStreamPrivateServer.
type MockInstancePrivateService_SearchStreamPrivateServerMockRecorder struct {
	mock *MockInstancePrivateService_SearchStreamPrivateServer
}

// NewMockInstancePrivateService_SearchStreamPrivateServer creates a new mock instance.
func NewMockInstancePrivateService_SearchStreamPrivateServer(ctrl *gomock.Controller) *MockInstancePrivateService_SearchStreamPrivateServer {
	mock := &MockInstancePrivateService_SearchStreamPrivateServer{ctrl: ctrl}
	mock.recorder = &MockInstancePrivateService_SearchStreamPrivateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePrivateService_SearchStreamPrivateServer) EXPECT() *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockInstancePrivateService_SearchStreamPrivateServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateServer) Send(arg0 *InstanceWatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockInstancePrivateService_SearchStreamPrivateServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockInstancePrivateService_SearchStreamPrivateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockInstancePrivateService_SearchStreamPrivateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockInstancePrivateService_SearchStreamPrivateServer)(nil).SetTrailer), arg0)
}

// MockInstancePrivateService_WatchServer is a mock of InstancePrivateService_WatchServer interface.
type MockInstancePrivateService_WatchServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePrivateService_WatchServerMockRecorder
}

// MockInstancePrivateService_WatchServerMockRecorder is the mock recorder for MockInstancePrivateService_WatchServer.
type MockInstancePrivateService_WatchServerMockRecorder struct {
	mock *MockInstancePrivateService_WatchServer
}

// NewMockInstancePrivateService_WatchServer creates a new mock instance.
func NewMockInstancePrivateService_WatchServer(ctrl *gomock.Controller) *MockInstancePrivateService_WatchServer {
	mock := &MockInstancePrivateService_WatchServer{ctrl: ctrl}
	mock.recorder = &MockInstancePrivateService_WatchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePrivateService_WatchServer) EXPECT() *MockInstancePrivateService_WatchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInstancePrivateService_WatchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstancePrivateService_WatchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancePrivateService_WatchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockInstancePrivateService_WatchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInstancePrivateService_WatchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInstancePrivateService_WatchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockInstancePrivateService_WatchServer) Send(arg0 *InstanceWatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockInstancePrivateService_WatchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockInstancePrivateService_WatchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockInstancePrivateService_WatchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockInstancePrivateService_WatchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockInstancePrivateService_WatchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockInstancePrivateService_WatchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInstancePrivateService_WatchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInstancePrivateService_WatchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockInstancePrivateService_WatchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockInstancePrivateService_WatchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockInstancePrivateService_WatchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockInstancePrivateService_WatchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockInstancePrivateService_WatchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockInstancePrivateService_WatchServer)(nil).SetTrailer), arg0)
}

// MockInstanceGroupPrivateServiceClient is a mock of InstanceGroupPrivateServiceClient interface.
type MockInstanceGroupPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceGroupPrivateServiceClientMockRecorder
}

// MockInstanceGroupPrivateServiceClientMockRecorder is the mock recorder for MockInstanceGroupPrivateServiceClient.
type MockInstanceGroupPrivateServiceClientMockRecorder struct {
	mock *MockInstanceGroupPrivateServiceClient
}

// NewMockInstanceGroupPrivateServiceClient creates a new mock instance.
func NewMockInstanceGroupPrivateServiceClient(ctrl *gomock.Controller) *MockInstanceGroupPrivateServiceClient {
	mock := &MockInstanceGroupPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceGroupPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceGroupPrivateServiceClient) EXPECT() *MockInstanceGroupPrivateServiceClientMockRecorder {
	return m.recorder
}

// CreatePrivate mocks base method.
func (m *MockInstanceGroupPrivateServiceClient) CreatePrivate(ctx context.Context, in *InstanceGroupCreatePrivateRequest, opts ...grpc.CallOption) (*InstanceGroupPrivateCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrivate", varargs...)
	ret0, _ := ret[0].(*InstanceGroupPrivateCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockInstanceGroupPrivateServiceClientMockRecorder) CreatePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockInstanceGroupPrivateServiceClient)(nil).CreatePrivate), varargs...)
}

// MockInstanceGroupPrivateServiceServer is a mock of InstanceGroupPrivateServiceServer interface.
type MockInstanceGroupPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceGroupPrivateServiceServerMockRecorder
}

// MockInstanceGroupPrivateServiceServerMockRecorder is the mock recorder for MockInstanceGroupPrivateServiceServer.
type MockInstanceGroupPrivateServiceServerMockRecorder struct {
	mock *MockInstanceGroupPrivateServiceServer
}

// NewMockInstanceGroupPrivateServiceServer creates a new mock instance.
func NewMockInstanceGroupPrivateServiceServer(ctrl *gomock.Controller) *MockInstanceGroupPrivateServiceServer {
	mock := &MockInstanceGroupPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceGroupPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceGroupPrivateServiceServer) EXPECT() *MockInstanceGroupPrivateServiceServerMockRecorder {
	return m.recorder
}

// CreatePrivate mocks base method.
func (m *MockInstanceGroupPrivateServiceServer) CreatePrivate(arg0 context.Context, arg1 *InstanceGroupCreatePrivateRequest) (*InstanceGroupPrivateCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivate", arg0, arg1)
	ret0, _ := ret[0].(*InstanceGroupPrivateCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockInstanceGroupPrivateServiceServerMockRecorder) CreatePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockInstanceGroupPrivateServiceServer)(nil).CreatePrivate), arg0, arg1)
}

// mustEmbedUnimplementedInstanceGroupPrivateServiceServer mocks base method.
func (m *MockInstanceGroupPrivateServiceServer) mustEmbedUnimplementedInstanceGroupPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceGroupPrivateServiceServer")
}

// mustEmbedUnimplementedInstanceGroupPrivateServiceServer indicates an expected call of mustEmbedUnimplementedInstanceGroupPrivateServiceServer.
func (mr *MockInstanceGroupPrivateServiceServerMockRecorder) mustEmbedUnimplementedInstanceGroupPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceGroupPrivateServiceServer", reflect.TypeOf((*MockInstanceGroupPrivateServiceServer)(nil).mustEmbedUnimplementedInstanceGroupPrivateServiceServer))
}

// MockUnsafeInstanceGroupPrivateServiceServer is a mock of UnsafeInstanceGroupPrivateServiceServer interface.
type MockUnsafeInstanceGroupPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInstanceGroupPrivateServiceServerMockRecorder
}

// MockUnsafeInstanceGroupPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeInstanceGroupPrivateServiceServer.
type MockUnsafeInstanceGroupPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeInstanceGroupPrivateServiceServer
}

// NewMockUnsafeInstanceGroupPrivateServiceServer creates a new mock instance.
func NewMockUnsafeInstanceGroupPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeInstanceGroupPrivateServiceServer {
	mock := &MockUnsafeInstanceGroupPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInstanceGroupPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInstanceGroupPrivateServiceServer) EXPECT() *MockUnsafeInstanceGroupPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInstanceGroupPrivateServiceServer mocks base method.
func (m *MockUnsafeInstanceGroupPrivateServiceServer) mustEmbedUnimplementedInstanceGroupPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceGroupPrivateServiceServer")
}

// mustEmbedUnimplementedInstanceGroupPrivateServiceServer indicates an expected call of mustEmbedUnimplementedInstanceGroupPrivateServiceServer.
func (mr *MockUnsafeInstanceGroupPrivateServiceServerMockRecorder) mustEmbedUnimplementedInstanceGroupPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceGroupPrivateServiceServer", reflect.TypeOf((*MockUnsafeInstanceGroupPrivateServiceServer)(nil).mustEmbedUnimplementedInstanceGroupPrivateServiceServer))
}

// MockInstanceSchedulingServiceClient is a mock of InstanceSchedulingServiceClient interface.
type MockInstanceSchedulingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceSchedulingServiceClientMockRecorder
}

// MockInstanceSchedulingServiceClientMockRecorder is the mock recorder for MockInstanceSchedulingServiceClient.
type MockInstanceSchedulingServiceClientMockRecorder struct {
	mock *MockInstanceSchedulingServiceClient
}

// NewMockInstanceSchedulingServiceClient creates a new mock instance.
func NewMockInstanceSchedulingServiceClient(ctrl *gomock.Controller) *MockInstanceSchedulingServiceClient {
	mock := &MockInstanceSchedulingServiceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceSchedulingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceSchedulingServiceClient) EXPECT() *MockInstanceSchedulingServiceClientMockRecorder {
	return m.recorder
}

// GetStatistics mocks base method.
func (m *MockInstanceSchedulingServiceClient) GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchedulerStatistics, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatistics", varargs...)
	ret0, _ := ret[0].(*SchedulerStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockInstanceSchedulingServiceClientMockRecorder) GetStatistics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockInstanceSchedulingServiceClient)(nil).GetStatistics), varargs...)
}

// Ping mocks base method.
func (m *MockInstanceSchedulingServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockInstanceSchedulingServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInstanceSchedulingServiceClient)(nil).Ping), varargs...)
}

// Ready mocks base method.
func (m *MockInstanceSchedulingServiceClient) Ready(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ready", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ready indicates an expected call of Ready.
func (mr *MockInstanceSchedulingServiceClientMockRecorder) Ready(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockInstanceSchedulingServiceClient)(nil).Ready), varargs...)
}

// Schedule mocks base method.
func (m *MockInstanceSchedulingServiceClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Schedule", varargs...)
	ret0, _ := ret[0].(*ScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule.
func (mr *MockInstanceSchedulingServiceClientMockRecorder) Schedule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockInstanceSchedulingServiceClient)(nil).Schedule), varargs...)
}

// MockInstanceSchedulingServiceServer is a mock of InstanceSchedulingServiceServer interface.
type MockInstanceSchedulingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceSchedulingServiceServerMockRecorder
}

// MockInstanceSchedulingServiceServerMockRecorder is the mock recorder for MockInstanceSchedulingServiceServer.
type MockInstanceSchedulingServiceServerMockRecorder struct {
	mock *MockInstanceSchedulingServiceServer
}

// NewMockInstanceSchedulingServiceServer creates a new mock instance.
func NewMockInstanceSchedulingServiceServer(ctrl *gomock.Controller) *MockInstanceSchedulingServiceServer {
	mock := &MockInstanceSchedulingServiceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceSchedulingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceSchedulingServiceServer) EXPECT() *MockInstanceSchedulingServiceServerMockRecorder {
	return m.recorder
}

// GetStatistics mocks base method.
func (m *MockInstanceSchedulingServiceServer) GetStatistics(arg0 context.Context, arg1 *emptypb.Empty) (*SchedulerStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", arg0, arg1)
	ret0, _ := ret[0].(*SchedulerStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockInstanceSchedulingServiceServerMockRecorder) GetStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockInstanceSchedulingServiceServer)(nil).GetStatistics), arg0, arg1)
}

// Ping mocks base method.
func (m *MockInstanceSchedulingServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockInstanceSchedulingServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInstanceSchedulingServiceServer)(nil).Ping), arg0, arg1)
}

// Ready mocks base method.
func (m *MockInstanceSchedulingServiceServer) Ready(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ready indicates an expected call of Ready.
func (mr *MockInstanceSchedulingServiceServerMockRecorder) Ready(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockInstanceSchedulingServiceServer)(nil).Ready), arg0, arg1)
}

// Schedule mocks base method.
func (m *MockInstanceSchedulingServiceServer) Schedule(arg0 context.Context, arg1 *ScheduleRequest) (*ScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", arg0, arg1)
	ret0, _ := ret[0].(*ScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule.
func (mr *MockInstanceSchedulingServiceServerMockRecorder) Schedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockInstanceSchedulingServiceServer)(nil).Schedule), arg0, arg1)
}

// mustEmbedUnimplementedInstanceSchedulingServiceServer mocks base method.
func (m *MockInstanceSchedulingServiceServer) mustEmbedUnimplementedInstanceSchedulingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceSchedulingServiceServer")
}

// mustEmbedUnimplementedInstanceSchedulingServiceServer indicates an expected call of mustEmbedUnimplementedInstanceSchedulingServiceServer.
func (mr *MockInstanceSchedulingServiceServerMockRecorder) mustEmbedUnimplementedInstanceSchedulingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceSchedulingServiceServer", reflect.TypeOf((*MockInstanceSchedulingServiceServer)(nil).mustEmbedUnimplementedInstanceSchedulingServiceServer))
}

// MockUnsafeInstanceSchedulingServiceServer is a mock of UnsafeInstanceSchedulingServiceServer interface.
type MockUnsafeInstanceSchedulingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInstanceSchedulingServiceServerMockRecorder
}

// MockUnsafeInstanceSchedulingServiceServerMockRecorder is the mock recorder for MockUnsafeInstanceSchedulingServiceServer.
type MockUnsafeInstanceSchedulingServiceServerMockRecorder struct {
	mock *MockUnsafeInstanceSchedulingServiceServer
}

// NewMockUnsafeInstanceSchedulingServiceServer creates a new mock instance.
func NewMockUnsafeInstanceSchedulingServiceServer(ctrl *gomock.Controller) *MockUnsafeInstanceSchedulingServiceServer {
	mock := &MockUnsafeInstanceSchedulingServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInstanceSchedulingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInstanceSchedulingServiceServer) EXPECT() *MockUnsafeInstanceSchedulingServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInstanceSchedulingServiceServer mocks base method.
func (m *MockUnsafeInstanceSchedulingServiceServer) mustEmbedUnimplementedInstanceSchedulingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceSchedulingServiceServer")
}

// mustEmbedUnimplementedInstanceSchedulingServiceServer indicates an expected call of mustEmbedUnimplementedInstanceSchedulingServiceServer.
func (mr *MockUnsafeInstanceSchedulingServiceServerMockRecorder) mustEmbedUnimplementedInstanceSchedulingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceSchedulingServiceServer", reflect.TypeOf((*MockUnsafeInstanceSchedulingServiceServer)(nil).mustEmbedUnimplementedInstanceSchedulingServiceServer))
}

// MockIpResourceManagerServiceClient is a mock of IpResourceManagerServiceClient interface.
type MockIpResourceManagerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockIpResourceManagerServiceClientMockRecorder
}

// MockIpResourceManagerServiceClientMockRecorder is the mock recorder for MockIpResourceManagerServiceClient.
type MockIpResourceManagerServiceClientMockRecorder struct {
	mock *MockIpResourceManagerServiceClient
}

// NewMockIpResourceManagerServiceClient creates a new mock instance.
func NewMockIpResourceManagerServiceClient(ctrl *gomock.Controller) *MockIpResourceManagerServiceClient {
	mock := &MockIpResourceManagerServiceClient{ctrl: ctrl}
	mock.recorder = &MockIpResourceManagerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpResourceManagerServiceClient) EXPECT() *MockIpResourceManagerServiceClientMockRecorder {
	return m.recorder
}

// DeleteSubnet mocks base method.
func (m *MockIpResourceManagerServiceClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubnet", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockIpResourceManagerServiceClientMockRecorder) DeleteSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).DeleteSubnet), varargs...)
}

// GetSubnetStatistics mocks base method.
func (m *MockIpResourceManagerServiceClient) GetSubnetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSubnetStatisticsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnetStatistics", varargs...)
	ret0, _ := ret[0].(*GetSubnetStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetStatistics indicates an expected call of GetSubnetStatistics.
func (mr *MockIpResourceManagerServiceClientMockRecorder) GetSubnetStatistics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetStatistics", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).GetSubnetStatistics), varargs...)
}

// Ping mocks base method.
func (m *MockIpResourceManagerServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockIpResourceManagerServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).Ping), varargs...)
}

// PutSubnet mocks base method.
func (m *MockIpResourceManagerServiceClient) PutSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*CreateSubnetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSubnet", varargs...)
	ret0, _ := ret[0].(*CreateSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSubnet indicates an expected call of PutSubnet.
func (mr *MockIpResourceManagerServiceClientMockRecorder) PutSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSubnet", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).PutSubnet), varargs...)
}

// ReleaseAddress mocks base method.
func (m *MockIpResourceManagerServiceClient) ReleaseAddress(ctx context.Context, in *ReleaseAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseAddress", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseAddress indicates an expected call of ReleaseAddress.
func (mr *MockIpResourceManagerServiceClientMockRecorder) ReleaseAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAddress", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).ReleaseAddress), varargs...)
}

// ReleaseSubnet mocks base method.
func (m *MockIpResourceManagerServiceClient) ReleaseSubnet(ctx context.Context, in *ReleaseSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseSubnet", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseSubnet indicates an expected call of ReleaseSubnet.
func (mr *MockIpResourceManagerServiceClientMockRecorder) ReleaseSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSubnet", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).ReleaseSubnet), varargs...)
}

// ReserveAddress mocks base method.
func (m *MockIpResourceManagerServiceClient) ReserveAddress(ctx context.Context, in *ReserveAddressRequest, opts ...grpc.CallOption) (*ReserveAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReserveAddress", varargs...)
	ret0, _ := ret[0].(*ReserveAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveAddress indicates an expected call of ReserveAddress.
func (mr *MockIpResourceManagerServiceClientMockRecorder) ReserveAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveAddress", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).ReserveAddress), varargs...)
}

// ReserveSubnet mocks base method.
func (m *MockIpResourceManagerServiceClient) ReserveSubnet(ctx context.Context, in *ReserveSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReserveSubnet", varargs...)
	ret0, _ := ret[0].(*Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveSubnet indicates an expected call of ReserveSubnet.
func (mr *MockIpResourceManagerServiceClientMockRecorder) ReserveSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveSubnet", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).ReserveSubnet), varargs...)
}

// SearchSubnetStream mocks base method.
func (m *MockIpResourceManagerServiceClient) SearchSubnetStream(ctx context.Context, in *SearchSubnetRequest, opts ...grpc.CallOption) (IpResourceManagerService_SearchSubnetStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSubnetStream", varargs...)
	ret0, _ := ret[0].(IpResourceManagerService_SearchSubnetStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSubnetStream indicates an expected call of SearchSubnetStream.
func (mr *MockIpResourceManagerServiceClientMockRecorder) SearchSubnetStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSubnetStream", reflect.TypeOf((*MockIpResourceManagerServiceClient)(nil).SearchSubnetStream), varargs...)
}

// MockIpResourceManagerService_SearchSubnetStreamClient is a mock of IpResourceManagerService_SearchSubnetStreamClient interface.
type MockIpResourceManagerService_SearchSubnetStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder
}

// MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder is the mock recorder for MockIpResourceManagerService_SearchSubnetStreamClient.
type MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder struct {
	mock *MockIpResourceManagerService_SearchSubnetStreamClient
}

// NewMockIpResourceManagerService_SearchSubnetStreamClient creates a new mock instance.
func NewMockIpResourceManagerService_SearchSubnetStreamClient(ctrl *gomock.Controller) *MockIpResourceManagerService_SearchSubnetStreamClient {
	mock := &MockIpResourceManagerService_SearchSubnetStreamClient{ctrl: ctrl}
	mock.recorder = &MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpResourceManagerService_SearchSubnetStreamClient) EXPECT() *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamClient) Recv() (*Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockIpResourceManagerService_SearchSubnetStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockIpResourceManagerService_SearchSubnetStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockIpResourceManagerService_SearchSubnetStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamClient)(nil).Trailer))
}

// MockIpResourceManagerServiceServer is a mock of IpResourceManagerServiceServer interface.
type MockIpResourceManagerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockIpResourceManagerServiceServerMockRecorder
}

// MockIpResourceManagerServiceServerMockRecorder is the mock recorder for MockIpResourceManagerServiceServer.
type MockIpResourceManagerServiceServerMockRecorder struct {
	mock *MockIpResourceManagerServiceServer
}

// NewMockIpResourceManagerServiceServer creates a new mock instance.
func NewMockIpResourceManagerServiceServer(ctrl *gomock.Controller) *MockIpResourceManagerServiceServer {
	mock := &MockIpResourceManagerServiceServer{ctrl: ctrl}
	mock.recorder = &MockIpResourceManagerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpResourceManagerServiceServer) EXPECT() *MockIpResourceManagerServiceServerMockRecorder {
	return m.recorder
}

// DeleteSubnet mocks base method.
func (m *MockIpResourceManagerServiceServer) DeleteSubnet(arg0 context.Context, arg1 *DeleteSubnetRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockIpResourceManagerServiceServerMockRecorder) DeleteSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).DeleteSubnet), arg0, arg1)
}

// GetSubnetStatistics mocks base method.
func (m *MockIpResourceManagerServiceServer) GetSubnetStatistics(arg0 context.Context, arg1 *emptypb.Empty) (*GetSubnetStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetStatistics", arg0, arg1)
	ret0, _ := ret[0].(*GetSubnetStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetStatistics indicates an expected call of GetSubnetStatistics.
func (mr *MockIpResourceManagerServiceServerMockRecorder) GetSubnetStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetStatistics", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).GetSubnetStatistics), arg0, arg1)
}

// Ping mocks base method.
func (m *MockIpResourceManagerServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockIpResourceManagerServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).Ping), arg0, arg1)
}

// PutSubnet mocks base method.
func (m *MockIpResourceManagerServiceServer) PutSubnet(arg0 context.Context, arg1 *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSubnet", arg0, arg1)
	ret0, _ := ret[0].(*CreateSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSubnet indicates an expected call of PutSubnet.
func (mr *MockIpResourceManagerServiceServerMockRecorder) PutSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSubnet", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).PutSubnet), arg0, arg1)
}

// ReleaseAddress mocks base method.
func (m *MockIpResourceManagerServiceServer) ReleaseAddress(arg0 context.Context, arg1 *ReleaseAddressRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseAddress", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseAddress indicates an expected call of ReleaseAddress.
func (mr *MockIpResourceManagerServiceServerMockRecorder) ReleaseAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAddress", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).ReleaseAddress), arg0, arg1)
}

// ReleaseSubnet mocks base method.
func (m *MockIpResourceManagerServiceServer) ReleaseSubnet(arg0 context.Context, arg1 *ReleaseSubnetRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSubnet", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseSubnet indicates an expected call of ReleaseSubnet.
func (mr *MockIpResourceManagerServiceServerMockRecorder) ReleaseSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSubnet", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).ReleaseSubnet), arg0, arg1)
}

// ReserveAddress mocks base method.
func (m *MockIpResourceManagerServiceServer) ReserveAddress(arg0 context.Context, arg1 *ReserveAddressRequest) (*ReserveAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveAddress", arg0, arg1)
	ret0, _ := ret[0].(*ReserveAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveAddress indicates an expected call of ReserveAddress.
func (mr *MockIpResourceManagerServiceServerMockRecorder) ReserveAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveAddress", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).ReserveAddress), arg0, arg1)
}

// ReserveSubnet mocks base method.
func (m *MockIpResourceManagerServiceServer) ReserveSubnet(arg0 context.Context, arg1 *ReserveSubnetRequest) (*Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveSubnet", arg0, arg1)
	ret0, _ := ret[0].(*Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveSubnet indicates an expected call of ReserveSubnet.
func (mr *MockIpResourceManagerServiceServerMockRecorder) ReserveSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveSubnet", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).ReserveSubnet), arg0, arg1)
}

// SearchSubnetStream mocks base method.
func (m *MockIpResourceManagerServiceServer) SearchSubnetStream(arg0 *SearchSubnetRequest, arg1 IpResourceManagerService_SearchSubnetStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSubnetStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchSubnetStream indicates an expected call of SearchSubnetStream.
func (mr *MockIpResourceManagerServiceServerMockRecorder) SearchSubnetStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSubnetStream", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).SearchSubnetStream), arg0, arg1)
}

// mustEmbedUnimplementedIpResourceManagerServiceServer mocks base method.
func (m *MockIpResourceManagerServiceServer) mustEmbedUnimplementedIpResourceManagerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIpResourceManagerServiceServer")
}

// mustEmbedUnimplementedIpResourceManagerServiceServer indicates an expected call of mustEmbedUnimplementedIpResourceManagerServiceServer.
func (mr *MockIpResourceManagerServiceServerMockRecorder) mustEmbedUnimplementedIpResourceManagerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIpResourceManagerServiceServer", reflect.TypeOf((*MockIpResourceManagerServiceServer)(nil).mustEmbedUnimplementedIpResourceManagerServiceServer))
}

// MockUnsafeIpResourceManagerServiceServer is a mock of UnsafeIpResourceManagerServiceServer interface.
type MockUnsafeIpResourceManagerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeIpResourceManagerServiceServerMockRecorder
}

// MockUnsafeIpResourceManagerServiceServerMockRecorder is the mock recorder for MockUnsafeIpResourceManagerServiceServer.
type MockUnsafeIpResourceManagerServiceServerMockRecorder struct {
	mock *MockUnsafeIpResourceManagerServiceServer
}

// NewMockUnsafeIpResourceManagerServiceServer creates a new mock instance.
func NewMockUnsafeIpResourceManagerServiceServer(ctrl *gomock.Controller) *MockUnsafeIpResourceManagerServiceServer {
	mock := &MockUnsafeIpResourceManagerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeIpResourceManagerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeIpResourceManagerServiceServer) EXPECT() *MockUnsafeIpResourceManagerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedIpResourceManagerServiceServer mocks base method.
func (m *MockUnsafeIpResourceManagerServiceServer) mustEmbedUnimplementedIpResourceManagerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIpResourceManagerServiceServer")
}

// mustEmbedUnimplementedIpResourceManagerServiceServer indicates an expected call of mustEmbedUnimplementedIpResourceManagerServiceServer.
func (mr *MockUnsafeIpResourceManagerServiceServerMockRecorder) mustEmbedUnimplementedIpResourceManagerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIpResourceManagerServiceServer", reflect.TypeOf((*MockUnsafeIpResourceManagerServiceServer)(nil).mustEmbedUnimplementedIpResourceManagerServiceServer))
}

// MockIpResourceManagerService_SearchSubnetStreamServer is a mock of IpResourceManagerService_SearchSubnetStreamServer interface.
type MockIpResourceManagerService_SearchSubnetStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder
}

// MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder is the mock recorder for MockIpResourceManagerService_SearchSubnetStreamServer.
type MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder struct {
	mock *MockIpResourceManagerService_SearchSubnetStreamServer
}

// NewMockIpResourceManagerService_SearchSubnetStreamServer creates a new mock instance.
func NewMockIpResourceManagerService_SearchSubnetStreamServer(ctrl *gomock.Controller) *MockIpResourceManagerService_SearchSubnetStreamServer {
	mock := &MockIpResourceManagerService_SearchSubnetStreamServer{ctrl: ctrl}
	mock.recorder = &MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpResourceManagerService_SearchSubnetStreamServer) EXPECT() *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockIpResourceManagerService_SearchSubnetStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamServer) Send(arg0 *Subnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockIpResourceManagerService_SearchSubnetStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockIpResourceManagerService_SearchSubnetStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockIpResourceManagerService_SearchSubnetStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockIpResourceManagerService_SearchSubnetStreamServer)(nil).SetTrailer), arg0)
}

// MockVNetPrivateServiceClient is a mock of VNetPrivateServiceClient interface.
type MockVNetPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVNetPrivateServiceClientMockRecorder
}

// MockVNetPrivateServiceClientMockRecorder is the mock recorder for MockVNetPrivateServiceClient.
type MockVNetPrivateServiceClientMockRecorder struct {
	mock *MockVNetPrivateServiceClient
}

// NewMockVNetPrivateServiceClient creates a new mock instance.
func NewMockVNetPrivateServiceClient(ctrl *gomock.Controller) *MockVNetPrivateServiceClient {
	mock := &MockVNetPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockVNetPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVNetPrivateServiceClient) EXPECT() *MockVNetPrivateServiceClientMockRecorder {
	return m.recorder
}

// PingPrivate mocks base method.
func (m *MockVNetPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockVNetPrivateServiceClientMockRecorder) PingPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockVNetPrivateServiceClient)(nil).PingPrivate), varargs...)
}

// ReleaseAddress mocks base method.
func (m *MockVNetPrivateServiceClient) ReleaseAddress(ctx context.Context, in *VNetReleaseAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseAddress", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseAddress indicates an expected call of ReleaseAddress.
func (mr *MockVNetPrivateServiceClientMockRecorder) ReleaseAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAddress", reflect.TypeOf((*MockVNetPrivateServiceClient)(nil).ReleaseAddress), varargs...)
}

// ReleaseSubnet mocks base method.
func (m *MockVNetPrivateServiceClient) ReleaseSubnet(ctx context.Context, in *VNetReleaseSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseSubnet", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseSubnet indicates an expected call of ReleaseSubnet.
func (mr *MockVNetPrivateServiceClientMockRecorder) ReleaseSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSubnet", reflect.TypeOf((*MockVNetPrivateServiceClient)(nil).ReleaseSubnet), varargs...)
}

// ReserveAddress mocks base method.
func (m *MockVNetPrivateServiceClient) ReserveAddress(ctx context.Context, in *VNetReserveAddressRequest, opts ...grpc.CallOption) (*VNetReserveAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReserveAddress", varargs...)
	ret0, _ := ret[0].(*VNetReserveAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveAddress indicates an expected call of ReserveAddress.
func (mr *MockVNetPrivateServiceClientMockRecorder) ReserveAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveAddress", reflect.TypeOf((*MockVNetPrivateServiceClient)(nil).ReserveAddress), varargs...)
}

// ReserveSubnet mocks base method.
func (m *MockVNetPrivateServiceClient) ReserveSubnet(ctx context.Context, in *VNetReserveSubnetRequest, opts ...grpc.CallOption) (*VNetPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReserveSubnet", varargs...)
	ret0, _ := ret[0].(*VNetPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveSubnet indicates an expected call of ReserveSubnet.
func (mr *MockVNetPrivateServiceClientMockRecorder) ReserveSubnet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveSubnet", reflect.TypeOf((*MockVNetPrivateServiceClient)(nil).ReserveSubnet), varargs...)
}

// MockVNetPrivateServiceServer is a mock of VNetPrivateServiceServer interface.
type MockVNetPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVNetPrivateServiceServerMockRecorder
}

// MockVNetPrivateServiceServerMockRecorder is the mock recorder for MockVNetPrivateServiceServer.
type MockVNetPrivateServiceServerMockRecorder struct {
	mock *MockVNetPrivateServiceServer
}

// NewMockVNetPrivateServiceServer creates a new mock instance.
func NewMockVNetPrivateServiceServer(ctrl *gomock.Controller) *MockVNetPrivateServiceServer {
	mock := &MockVNetPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockVNetPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVNetPrivateServiceServer) EXPECT() *MockVNetPrivateServiceServerMockRecorder {
	return m.recorder
}

// PingPrivate mocks base method.
func (m *MockVNetPrivateServiceServer) PingPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockVNetPrivateServiceServerMockRecorder) PingPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockVNetPrivateServiceServer)(nil).PingPrivate), arg0, arg1)
}

// ReleaseAddress mocks base method.
func (m *MockVNetPrivateServiceServer) ReleaseAddress(arg0 context.Context, arg1 *VNetReleaseAddressRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseAddress", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseAddress indicates an expected call of ReleaseAddress.
func (mr *MockVNetPrivateServiceServerMockRecorder) ReleaseAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAddress", reflect.TypeOf((*MockVNetPrivateServiceServer)(nil).ReleaseAddress), arg0, arg1)
}

// ReleaseSubnet mocks base method.
func (m *MockVNetPrivateServiceServer) ReleaseSubnet(arg0 context.Context, arg1 *VNetReleaseSubnetRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSubnet", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseSubnet indicates an expected call of ReleaseSubnet.
func (mr *MockVNetPrivateServiceServerMockRecorder) ReleaseSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSubnet", reflect.TypeOf((*MockVNetPrivateServiceServer)(nil).ReleaseSubnet), arg0, arg1)
}

// ReserveAddress mocks base method.
func (m *MockVNetPrivateServiceServer) ReserveAddress(arg0 context.Context, arg1 *VNetReserveAddressRequest) (*VNetReserveAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveAddress", arg0, arg1)
	ret0, _ := ret[0].(*VNetReserveAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveAddress indicates an expected call of ReserveAddress.
func (mr *MockVNetPrivateServiceServerMockRecorder) ReserveAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveAddress", reflect.TypeOf((*MockVNetPrivateServiceServer)(nil).ReserveAddress), arg0, arg1)
}

// ReserveSubnet mocks base method.
func (m *MockVNetPrivateServiceServer) ReserveSubnet(arg0 context.Context, arg1 *VNetReserveSubnetRequest) (*VNetPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveSubnet", arg0, arg1)
	ret0, _ := ret[0].(*VNetPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveSubnet indicates an expected call of ReserveSubnet.
func (mr *MockVNetPrivateServiceServerMockRecorder) ReserveSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveSubnet", reflect.TypeOf((*MockVNetPrivateServiceServer)(nil).ReserveSubnet), arg0, arg1)
}

// mustEmbedUnimplementedVNetPrivateServiceServer mocks base method.
func (m *MockVNetPrivateServiceServer) mustEmbedUnimplementedVNetPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVNetPrivateServiceServer")
}

// mustEmbedUnimplementedVNetPrivateServiceServer indicates an expected call of mustEmbedUnimplementedVNetPrivateServiceServer.
func (mr *MockVNetPrivateServiceServerMockRecorder) mustEmbedUnimplementedVNetPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVNetPrivateServiceServer", reflect.TypeOf((*MockVNetPrivateServiceServer)(nil).mustEmbedUnimplementedVNetPrivateServiceServer))
}

// MockUnsafeVNetPrivateServiceServer is a mock of UnsafeVNetPrivateServiceServer interface.
type MockUnsafeVNetPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVNetPrivateServiceServerMockRecorder
}

// MockUnsafeVNetPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeVNetPrivateServiceServer.
type MockUnsafeVNetPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeVNetPrivateServiceServer
}

// NewMockUnsafeVNetPrivateServiceServer creates a new mock instance.
func NewMockUnsafeVNetPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeVNetPrivateServiceServer {
	mock := &MockUnsafeVNetPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVNetPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVNetPrivateServiceServer) EXPECT() *MockUnsafeVNetPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVNetPrivateServiceServer mocks base method.
func (m *MockUnsafeVNetPrivateServiceServer) mustEmbedUnimplementedVNetPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVNetPrivateServiceServer")
}

// mustEmbedUnimplementedVNetPrivateServiceServer indicates an expected call of mustEmbedUnimplementedVNetPrivateServiceServer.
func (mr *MockUnsafeVNetPrivateServiceServerMockRecorder) mustEmbedUnimplementedVNetPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVNetPrivateServiceServer", reflect.TypeOf((*MockUnsafeVNetPrivateServiceServer)(nil).mustEmbedUnimplementedVNetPrivateServiceServer))
}

// MockLoadBalancerPrivateServiceClient is a mock of LoadBalancerPrivateServiceClient interface.
type MockLoadBalancerPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerPrivateServiceClientMockRecorder
}

// MockLoadBalancerPrivateServiceClientMockRecorder is the mock recorder for MockLoadBalancerPrivateServiceClient.
type MockLoadBalancerPrivateServiceClientMockRecorder struct {
	mock *MockLoadBalancerPrivateServiceClient
}

// NewMockLoadBalancerPrivateServiceClient creates a new mock instance.
func NewMockLoadBalancerPrivateServiceClient(ctrl *gomock.Controller) *MockLoadBalancerPrivateServiceClient {
	mock := &MockLoadBalancerPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerPrivateServiceClient) EXPECT() *MockLoadBalancerPrivateServiceClientMockRecorder {
	return m.recorder
}

// CreatePrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceClient) CreatePrivate(ctx context.Context, in *LoadBalancerCreatePrivateRequest, opts ...grpc.CallOption) (*LoadBalancerPrivate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrivate", varargs...)
	ret0, _ := ret[0].(*LoadBalancerPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockLoadBalancerPrivateServiceClientMockRecorder) CreatePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceClient)(nil).CreatePrivate), varargs...)
}

// DeletePrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceClient) DeletePrivate(ctx context.Context, in *LoadBalancerDeletePrivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivate indicates an expected call of DeletePrivate.
func (mr *MockLoadBalancerPrivateServiceClientMockRecorder) DeletePrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceClient)(nil).DeletePrivate), varargs...)
}

// PingPrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockLoadBalancerPrivateServiceClientMockRecorder) PingPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceClient)(nil).PingPrivate), varargs...)
}

// RemoveFinalizer mocks base method.
func (m *MockLoadBalancerPrivateServiceClient) RemoveFinalizer(ctx context.Context, in *LoadBalancerRemoveFinalizerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFinalizer", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFinalizer indicates an expected call of RemoveFinalizer.
func (mr *MockLoadBalancerPrivateServiceClientMockRecorder) RemoveFinalizer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizer", reflect.TypeOf((*MockLoadBalancerPrivateServiceClient)(nil).RemoveFinalizer), varargs...)
}

// SearchStreamPrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceClient) SearchStreamPrivate(ctx context.Context, in *LoadBalancerSearchStreamPrivateRequest, opts ...grpc.CallOption) (LoadBalancerPrivateService_SearchStreamPrivateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStreamPrivate", varargs...)
	ret0, _ := ret[0].(LoadBalancerPrivateService_SearchStreamPrivateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStreamPrivate indicates an expected call of SearchStreamPrivate.
func (mr *MockLoadBalancerPrivateServiceClientMockRecorder) SearchStreamPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStreamPrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceClient)(nil).SearchStreamPrivate), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockLoadBalancerPrivateServiceClient) UpdateStatus(ctx context.Context, in *LoadBalancerUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockLoadBalancerPrivateServiceClientMockRecorder) UpdateStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockLoadBalancerPrivateServiceClient)(nil).UpdateStatus), varargs...)
}

// Watch mocks base method.
func (m *MockLoadBalancerPrivateServiceClient) Watch(ctx context.Context, in *LoadBalancerWatchRequest, opts ...grpc.CallOption) (LoadBalancerPrivateService_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(LoadBalancerPrivateService_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockLoadBalancerPrivateServiceClientMockRecorder) Watch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockLoadBalancerPrivateServiceClient)(nil).Watch), varargs...)
}

// MockLoadBalancerPrivateService_SearchStreamPrivateClient is a mock of LoadBalancerPrivateService_SearchStreamPrivateClient interface.
type MockLoadBalancerPrivateService_SearchStreamPrivateClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder
}

// MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder is the mock recorder for MockLoadBalancerPrivateService_SearchStreamPrivateClient.
type MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder struct {
	mock *MockLoadBalancerPrivateService_SearchStreamPrivateClient
}

// NewMockLoadBalancerPrivateService_SearchStreamPrivateClient creates a new mock instance.
func NewMockLoadBalancerPrivateService_SearchStreamPrivateClient(ctrl *gomock.Controller) *MockLoadBalancerPrivateService_SearchStreamPrivateClient {
	mock := &MockLoadBalancerPrivateService_SearchStreamPrivateClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateClient) EXPECT() *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateClient) Recv() (*LoadBalancerWatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LoadBalancerWatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_SearchStreamPrivateClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_SearchStreamPrivateClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateClient)(nil).Trailer))
}

// MockLoadBalancerPrivateService_WatchClient is a mock of LoadBalancerPrivateService_WatchClient interface.
type MockLoadBalancerPrivateService_WatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerPrivateService_WatchClientMockRecorder
}

// MockLoadBalancerPrivateService_WatchClientMockRecorder is the mock recorder for MockLoadBalancerPrivateService_WatchClient.
type MockLoadBalancerPrivateService_WatchClientMockRecorder struct {
	mock *MockLoadBalancerPrivateService_WatchClient
}

// NewMockLoadBalancerPrivateService_WatchClient creates a new mock instance.
func NewMockLoadBalancerPrivateService_WatchClient(ctrl *gomock.Controller) *MockLoadBalancerPrivateService_WatchClient {
	mock := &MockLoadBalancerPrivateService_WatchClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerPrivateService_WatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerPrivateService_WatchClient) EXPECT() *MockLoadBalancerPrivateService_WatchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLoadBalancerPrivateService_WatchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLoadBalancerPrivateService_WatchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLoadBalancerPrivateService_WatchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLoadBalancerPrivateService_WatchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLoadBalancerPrivateService_WatchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLoadBalancerPrivateService_WatchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLoadBalancerPrivateService_WatchClient) Recv() (*LoadBalancerWatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LoadBalancerWatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLoadBalancerPrivateService_WatchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_WatchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLoadBalancerPrivateService_WatchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_WatchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLoadBalancerPrivateService_WatchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLoadBalancerPrivateService_WatchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLoadBalancerPrivateService_WatchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchClient)(nil).Trailer))
}

// MockLoadBalancerPrivateServiceServer is a mock of LoadBalancerPrivateServiceServer interface.
type MockLoadBalancerPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerPrivateServiceServerMockRecorder
}

// MockLoadBalancerPrivateServiceServerMockRecorder is the mock recorder for MockLoadBalancerPrivateServiceServer.
type MockLoadBalancerPrivateServiceServerMockRecorder struct {
	mock *MockLoadBalancerPrivateServiceServer
}

// NewMockLoadBalancerPrivateServiceServer creates a new mock instance.
func NewMockLoadBalancerPrivateServiceServer(ctrl *gomock.Controller) *MockLoadBalancerPrivateServiceServer {
	mock := &MockLoadBalancerPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerPrivateServiceServer) EXPECT() *MockLoadBalancerPrivateServiceServerMockRecorder {
	return m.recorder
}

// CreatePrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) CreatePrivate(arg0 context.Context, arg1 *LoadBalancerCreatePrivateRequest) (*LoadBalancerPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivate", arg0, arg1)
	ret0, _ := ret[0].(*LoadBalancerPrivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivate indicates an expected call of CreatePrivate.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) CreatePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).CreatePrivate), arg0, arg1)
}

// DeletePrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) DeletePrivate(arg0 context.Context, arg1 *LoadBalancerDeletePrivateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivate indicates an expected call of DeletePrivate.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) DeletePrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).DeletePrivate), arg0, arg1)
}

// PingPrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) PingPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) PingPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).PingPrivate), arg0, arg1)
}

// RemoveFinalizer mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) RemoveFinalizer(arg0 context.Context, arg1 *LoadBalancerRemoveFinalizerRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizer", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFinalizer indicates an expected call of RemoveFinalizer.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) RemoveFinalizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizer", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).RemoveFinalizer), arg0, arg1)
}

// SearchStreamPrivate mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) SearchStreamPrivate(arg0 *LoadBalancerSearchStreamPrivateRequest, arg1 LoadBalancerPrivateService_SearchStreamPrivateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStreamPrivate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStreamPrivate indicates an expected call of SearchStreamPrivate.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) SearchStreamPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStreamPrivate", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).SearchStreamPrivate), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) UpdateStatus(arg0 context.Context, arg1 *LoadBalancerUpdateStatusRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).UpdateStatus), arg0, arg1)
}

// Watch mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) Watch(arg0 *LoadBalancerWatchRequest, arg1 LoadBalancerPrivateService_WatchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).Watch), arg0, arg1)
}

// mustEmbedUnimplementedLoadBalancerPrivateServiceServer mocks base method.
func (m *MockLoadBalancerPrivateServiceServer) mustEmbedUnimplementedLoadBalancerPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoadBalancerPrivateServiceServer")
}

// mustEmbedUnimplementedLoadBalancerPrivateServiceServer indicates an expected call of mustEmbedUnimplementedLoadBalancerPrivateServiceServer.
func (mr *MockLoadBalancerPrivateServiceServerMockRecorder) mustEmbedUnimplementedLoadBalancerPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoadBalancerPrivateServiceServer", reflect.TypeOf((*MockLoadBalancerPrivateServiceServer)(nil).mustEmbedUnimplementedLoadBalancerPrivateServiceServer))
}

// MockUnsafeLoadBalancerPrivateServiceServer is a mock of UnsafeLoadBalancerPrivateServiceServer interface.
type MockUnsafeLoadBalancerPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLoadBalancerPrivateServiceServerMockRecorder
}

// MockUnsafeLoadBalancerPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeLoadBalancerPrivateServiceServer.
type MockUnsafeLoadBalancerPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeLoadBalancerPrivateServiceServer
}

// NewMockUnsafeLoadBalancerPrivateServiceServer creates a new mock instance.
func NewMockUnsafeLoadBalancerPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeLoadBalancerPrivateServiceServer {
	mock := &MockUnsafeLoadBalancerPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLoadBalancerPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLoadBalancerPrivateServiceServer) EXPECT() *MockUnsafeLoadBalancerPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLoadBalancerPrivateServiceServer mocks base method.
func (m *MockUnsafeLoadBalancerPrivateServiceServer) mustEmbedUnimplementedLoadBalancerPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoadBalancerPrivateServiceServer")
}

// mustEmbedUnimplementedLoadBalancerPrivateServiceServer indicates an expected call of mustEmbedUnimplementedLoadBalancerPrivateServiceServer.
func (mr *MockUnsafeLoadBalancerPrivateServiceServerMockRecorder) mustEmbedUnimplementedLoadBalancerPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoadBalancerPrivateServiceServer", reflect.TypeOf((*MockUnsafeLoadBalancerPrivateServiceServer)(nil).mustEmbedUnimplementedLoadBalancerPrivateServiceServer))
}

// MockLoadBalancerPrivateService_SearchStreamPrivateServer is a mock of LoadBalancerPrivateService_SearchStreamPrivateServer interface.
type MockLoadBalancerPrivateService_SearchStreamPrivateServer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder
}

// MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder is the mock recorder for MockLoadBalancerPrivateService_SearchStreamPrivateServer.
type MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder struct {
	mock *MockLoadBalancerPrivateService_SearchStreamPrivateServer
}

// NewMockLoadBalancerPrivateService_SearchStreamPrivateServer creates a new mock instance.
func NewMockLoadBalancerPrivateService_SearchStreamPrivateServer(ctrl *gomock.Controller) *MockLoadBalancerPrivateService_SearchStreamPrivateServer {
	mock := &MockLoadBalancerPrivateService_SearchStreamPrivateServer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateServer) EXPECT() *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_SearchStreamPrivateServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateServer) Send(arg0 *LoadBalancerWatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_SearchStreamPrivateServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLoadBalancerPrivateService_SearchStreamPrivateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLoadBalancerPrivateService_SearchStreamPrivateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLoadBalancerPrivateService_SearchStreamPrivateServer)(nil).SetTrailer), arg0)
}

// MockLoadBalancerPrivateService_WatchServer is a mock of LoadBalancerPrivateService_WatchServer interface.
type MockLoadBalancerPrivateService_WatchServer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerPrivateService_WatchServerMockRecorder
}

// MockLoadBalancerPrivateService_WatchServerMockRecorder is the mock recorder for MockLoadBalancerPrivateService_WatchServer.
type MockLoadBalancerPrivateService_WatchServerMockRecorder struct {
	mock *MockLoadBalancerPrivateService_WatchServer
}

// NewMockLoadBalancerPrivateService_WatchServer creates a new mock instance.
func NewMockLoadBalancerPrivateService_WatchServer(ctrl *gomock.Controller) *MockLoadBalancerPrivateService_WatchServer {
	mock := &MockLoadBalancerPrivateService_WatchServer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerPrivateService_WatchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerPrivateService_WatchServer) EXPECT() *MockLoadBalancerPrivateService_WatchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLoadBalancerPrivateService_WatchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLoadBalancerPrivateService_WatchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_WatchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLoadBalancerPrivateService_WatchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLoadBalancerPrivateService_WatchServer) Send(arg0 *LoadBalancerWatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLoadBalancerPrivateService_WatchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLoadBalancerPrivateService_WatchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLoadBalancerPrivateService_WatchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLoadBalancerPrivateService_WatchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLoadBalancerPrivateService_WatchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLoadBalancerPrivateService_WatchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLoadBalancerPrivateService_WatchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLoadBalancerPrivateService_WatchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLoadBalancerPrivateService_WatchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLoadBalancerPrivateService_WatchServer)(nil).SetTrailer), arg0)
}
