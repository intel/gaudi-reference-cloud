// This file contains common messages that are intended for Fleet Admin Service
//
// After updating this file, run "make generate".
//
// See:
//  - https://protobuf.dev/programming-guides/proto3/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: fleet_common.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupVersionResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *GroupVersionResource) Reset() {
	*x = GroupVersionResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupVersionResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupVersionResource) ProtoMessage() {}

func (x *GroupVersionResource) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupVersionResource.ProtoReflect.Descriptor instead.
func (*GroupVersionResource) Descriptor() ([]byte, []int) {
	return file_fleet_common_proto_rawDescGZIP(), []int{0}
}

func (x *GroupVersionResource) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupVersionResource) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GroupVersionResource) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// SchedulerStatistics represents a collection of node details.
type SchedulerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection of statistics for each node.
	SchedulerNodeStatistics []*SchedulerNodeStatistics `protobuf:"bytes,1,rep,name=schedulerNodeStatistics,proto3" json:"schedulerNodeStatistics,omitempty"`
}

func (x *SchedulerStatistics) Reset() {
	*x = SchedulerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerStatistics) ProtoMessage() {}

func (x *SchedulerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerStatistics.ProtoReflect.Descriptor instead.
func (*SchedulerStatistics) Descriptor() ([]byte, []int) {
	return file_fleet_common_proto_rawDescGZIP(), []int{1}
}

func (x *SchedulerStatistics) GetSchedulerNodeStatistics() []*SchedulerNodeStatistics {
	if x != nil {
		return x.SchedulerNodeStatistics
	}
	return nil
}

// SchedulerNodeStatistics encapsulates the configurations and current status of a single node.
type SchedulerNodeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Embed the SchedulerNode for easy access and identification.
	SchedulerNode *SchedulerNode `protobuf:"bytes,1,opt,name=schedulerNode,proto3" json:"schedulerNode,omitempty"`
	// Detailed statistics of instances by type.
	InstanceTypeStatistics []*InstanceTypeStatistics `protobuf:"bytes,2,rep,name=instanceTypeStatistics,proto3" json:"instanceTypeStatistics,omitempty"`
	// Detailed resource usage of the node.
	NodeResources *NodeResources `protobuf:"bytes,3,opt,name=nodeResources,proto3" json:"nodeResources,omitempty"`
}

func (x *SchedulerNodeStatistics) Reset() {
	*x = SchedulerNodeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerNodeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerNodeStatistics) ProtoMessage() {}

func (x *SchedulerNodeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerNodeStatistics.ProtoReflect.Descriptor instead.
func (*SchedulerNodeStatistics) Descriptor() ([]byte, []int) {
	return file_fleet_common_proto_rawDescGZIP(), []int{2}
}

func (x *SchedulerNodeStatistics) GetSchedulerNode() *SchedulerNode {
	if x != nil {
		return x.SchedulerNode
	}
	return nil
}

func (x *SchedulerNodeStatistics) GetInstanceTypeStatistics() []*InstanceTypeStatistics {
	if x != nil {
		return x.InstanceTypeStatistics
	}
	return nil
}

func (x *SchedulerNodeStatistics) GetNodeResources() *NodeResources {
	if x != nil {
		return x.NodeResources
	}
	return nil
}

// SchedulerNode represents the scheduling attributes of a node in a cluster.
type SchedulerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region of the node.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Availability zone within the region.
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// Name of the node.
	NodeName string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	// Cluster identifier.
	ClusterId string `protobuf:"bytes,4,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	// Namespace of the node.
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Partition within the cluster.
	Partition string `protobuf:"bytes,6,opt,name=partition,proto3" json:"partition,omitempty"`
	// Grouping of clusters.
	ClusterGroup string `protobuf:"bytes,7,opt,name=clusterGroup,proto3" json:"clusterGroup,omitempty"`
	// Network mode (VV or VB).
	NetworkMode string `protobuf:"bytes,8,opt,name=networkMode,proto3" json:"networkMode,omitempty"`
	// Kubernetes API resource by group, version, and resource.
	SourceGvr *GroupVersionResource `protobuf:"bytes,9,opt,name=sourceGvr,proto3" json:"sourceGvr,omitempty"`
	// Supported poolIds
	ComputeNodePools []string `protobuf:"bytes,10,rep,name=computeNodePools,proto3" json:"computeNodePools,omitempty"`
}

func (x *SchedulerNode) Reset() {
	*x = SchedulerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerNode) ProtoMessage() {}

func (x *SchedulerNode) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerNode.ProtoReflect.Descriptor instead.
func (*SchedulerNode) Descriptor() ([]byte, []int) {
	return file_fleet_common_proto_rawDescGZIP(), []int{3}
}

func (x *SchedulerNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SchedulerNode) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *SchedulerNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SchedulerNode) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SchedulerNode) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SchedulerNode) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *SchedulerNode) GetClusterGroup() string {
	if x != nil {
		return x.ClusterGroup
	}
	return ""
}

func (x *SchedulerNode) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *SchedulerNode) GetSourceGvr() *GroupVersionResource {
	if x != nil {
		return x.SourceGvr
	}
	return nil
}

func (x *SchedulerNode) GetComputeNodePools() []string {
	if x != nil {
		return x.ComputeNodePools
	}
	return nil
}

// InstanceTypeStatistics provides statistical data for a specific instance type.
type InstanceTypeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the instance.
	InstanceType string `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// Number of instances currently running.
	RunningInstances int32 `protobuf:"varint,2,opt,name=runningInstances,proto3" json:"runningInstances,omitempty"`
	// Maximum number of additional instances that can be started.
	MaxNewInstances int32 `protobuf:"varint,3,opt,name=maxNewInstances,proto3" json:"maxNewInstances,omitempty"`
	// Category of the instance (VirtualMachine or BareMetalHost).
	InstanceCategory string `protobuf:"bytes,4,opt,name=instanceCategory,proto3" json:"instanceCategory,omitempty"`
}

func (x *InstanceTypeStatistics) Reset() {
	*x = InstanceTypeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeStatistics) ProtoMessage() {}

func (x *InstanceTypeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeStatistics.ProtoReflect.Descriptor instead.
func (*InstanceTypeStatistics) Descriptor() ([]byte, []int) {
	return file_fleet_common_proto_rawDescGZIP(), []int{4}
}

func (x *InstanceTypeStatistics) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *InstanceTypeStatistics) GetRunningInstances() int32 {
	if x != nil {
		return x.RunningInstances
	}
	return 0
}

func (x *InstanceTypeStatistics) GetMaxNewInstances() int32 {
	if x != nil {
		return x.MaxNewInstances
	}
	return 0
}

func (x *InstanceTypeStatistics) GetInstanceCategory() string {
	if x != nil {
		return x.InstanceCategory
	}
	return ""
}

// NodeResources describes the resource usage metrics of a node.
type NodeResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of free CPU in milliunits.
	FreeMilliCPU int64 `protobuf:"varint,1,opt,name=freeMilliCPU,proto3" json:"freeMilliCPU,omitempty"`
	// Amount of used CPU in milliunits.
	UsedMilliCPU int64 `protobuf:"varint,2,opt,name=usedMilliCPU,proto3" json:"usedMilliCPU,omitempty"`
	// Amount of free memory in bytes.
	FreeMemoryBytes int64 `protobuf:"varint,3,opt,name=freeMemoryBytes,proto3" json:"freeMemoryBytes,omitempty"`
	// Amount of used memory in bytes.
	UsedMemoryBytes int64 `protobuf:"varint,4,opt,name=usedMemoryBytes,proto3" json:"usedMemoryBytes,omitempty"`
	// Number of available GPUs.
	FreeGPU int32 `protobuf:"varint,5,opt,name=freeGPU,proto3" json:"freeGPU,omitempty"`
	// Number of used GPUs.
	UsedGPU int32 `protobuf:"varint,6,opt,name=usedGPU,proto3" json:"usedGPU,omitempty"`
}

func (x *NodeResources) Reset() {
	*x = NodeResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResources) ProtoMessage() {}

func (x *NodeResources) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResources.ProtoReflect.Descriptor instead.
func (*NodeResources) Descriptor() ([]byte, []int) {
	return file_fleet_common_proto_rawDescGZIP(), []int{5}
}

func (x *NodeResources) GetFreeMilliCPU() int64 {
	if x != nil {
		return x.FreeMilliCPU
	}
	return 0
}

func (x *NodeResources) GetUsedMilliCPU() int64 {
	if x != nil {
		return x.UsedMilliCPU
	}
	return 0
}

func (x *NodeResources) GetFreeMemoryBytes() int64 {
	if x != nil {
		return x.FreeMemoryBytes
	}
	return 0
}

func (x *NodeResources) GetUsedMemoryBytes() int64 {
	if x != nil {
		return x.UsedMemoryBytes
	}
	return 0
}

func (x *NodeResources) GetFreeGPU() int32 {
	if x != nil {
		return x.FreeGPU
	}
	return 0
}

func (x *NodeResources) GetUsedGPU() int32 {
	if x != nil {
		return x.UsedGPU
	}
	return 0
}

var File_fleet_common_proto protoreflect.FileDescriptor

var file_fleet_common_proto_rawDesc = []byte{
	0x0a, 0x12, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x14, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6f, 0x0a,
	0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xe8,
	0x01, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x0d, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x76, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x76, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x65, 0x77, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x43, 0x50, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65,
	0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x43, 0x50, 0x55, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x43, 0x50, 0x55, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x47, 0x50, 0x55, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x47, 0x50, 0x55, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x64, 0x47, 0x50, 0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x64, 0x47, 0x50, 0x55, 0x42, 0x55, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fleet_common_proto_rawDescOnce sync.Once
	file_fleet_common_proto_rawDescData = file_fleet_common_proto_rawDesc
)

func file_fleet_common_proto_rawDescGZIP() []byte {
	file_fleet_common_proto_rawDescOnce.Do(func() {
		file_fleet_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_fleet_common_proto_rawDescData)
	})
	return file_fleet_common_proto_rawDescData
}

var file_fleet_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_fleet_common_proto_goTypes = []interface{}{
	(*GroupVersionResource)(nil),    // 0: proto.GroupVersionResource
	(*SchedulerStatistics)(nil),     // 1: proto.SchedulerStatistics
	(*SchedulerNodeStatistics)(nil), // 2: proto.SchedulerNodeStatistics
	(*SchedulerNode)(nil),           // 3: proto.SchedulerNode
	(*InstanceTypeStatistics)(nil),  // 4: proto.InstanceTypeStatistics
	(*NodeResources)(nil),           // 5: proto.NodeResources
}
var file_fleet_common_proto_depIdxs = []int32{
	2, // 0: proto.SchedulerStatistics.schedulerNodeStatistics:type_name -> proto.SchedulerNodeStatistics
	3, // 1: proto.SchedulerNodeStatistics.schedulerNode:type_name -> proto.SchedulerNode
	4, // 2: proto.SchedulerNodeStatistics.instanceTypeStatistics:type_name -> proto.InstanceTypeStatistics
	5, // 3: proto.SchedulerNodeStatistics.nodeResources:type_name -> proto.NodeResources
	0, // 4: proto.SchedulerNode.sourceGvr:type_name -> proto.GroupVersionResource
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_fleet_common_proto_init() }
func file_fleet_common_proto_init() {
	if File_fleet_common_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fleet_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupVersionResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerNodeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fleet_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fleet_common_proto_goTypes,
		DependencyIndexes: file_fleet_common_proto_depIdxs,
		MessageInfos:      file_fleet_common_proto_msgTypes,
	}.Build()
	File_fleet_common_proto = out.File
	file_fleet_common_proto_rawDesc = nil
	file_fleet_common_proto_goTypes = nil
	file_fleet_common_proto_depIdxs = nil
}
