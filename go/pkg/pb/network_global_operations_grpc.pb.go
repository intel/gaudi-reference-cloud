// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: network_global_operations.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalOperationsServiceClient is the client API for GlobalOperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalOperationsServiceClient interface {
	// Create a 'default' VPC.
	CreateDefault(ctx context.Context, in *CreateDefaultRequest, opts ...grpc.CallOption) (*VPC, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type globalOperationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalOperationsServiceClient(cc grpc.ClientConnInterface) GlobalOperationsServiceClient {
	return &globalOperationsServiceClient{cc}
}

func (c *globalOperationsServiceClient) CreateDefault(ctx context.Context, in *CreateDefaultRequest, opts ...grpc.CallOption) (*VPC, error) {
	out := new(VPC)
	err := c.cc.Invoke(ctx, "/proto.GlobalOperationsService/CreateDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalOperationsServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.GlobalOperationsService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalOperationsServiceServer is the server API for GlobalOperationsService service.
// All implementations must embed UnimplementedGlobalOperationsServiceServer
// for forward compatibility
type GlobalOperationsServiceServer interface {
	// Create a 'default' VPC.
	CreateDefault(context.Context, *CreateDefaultRequest) (*VPC, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedGlobalOperationsServiceServer()
}

// UnimplementedGlobalOperationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalOperationsServiceServer struct {
}

func (UnimplementedGlobalOperationsServiceServer) CreateDefault(context.Context, *CreateDefaultRequest) (*VPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefault not implemented")
}
func (UnimplementedGlobalOperationsServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGlobalOperationsServiceServer) mustEmbedUnimplementedGlobalOperationsServiceServer() {
}

// UnsafeGlobalOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalOperationsServiceServer will
// result in compilation errors.
type UnsafeGlobalOperationsServiceServer interface {
	mustEmbedUnimplementedGlobalOperationsServiceServer()
}

func RegisterGlobalOperationsServiceServer(s grpc.ServiceRegistrar, srv GlobalOperationsServiceServer) {
	s.RegisterService(&GlobalOperationsService_ServiceDesc, srv)
}

func _GlobalOperationsService_CreateDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalOperationsServiceServer).CreateDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GlobalOperationsService/CreateDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalOperationsServiceServer).CreateDefault(ctx, req.(*CreateDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalOperationsService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalOperationsServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GlobalOperationsService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalOperationsServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalOperationsService_ServiceDesc is the grpc.ServiceDesc for GlobalOperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalOperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GlobalOperationsService",
	HandlerType: (*GlobalOperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDefault",
			Handler:    _GlobalOperationsService_CreateDefault_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GlobalOperationsService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_global_operations.proto",
}
