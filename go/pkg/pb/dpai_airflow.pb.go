// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: dpai_airflow.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DpaiAirflowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId                 string                              `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id                             string                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                           string                              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description                    string                              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	NumberOfNodesDefault           int32                               `protobuf:"varint,5,opt,name=numberOfNodesDefault,proto3" json:"numberOfNodesDefault,omitempty"`
	NodeSizeId                     string                              `protobuf:"bytes,6,opt,name=nodeSizeId,proto3" json:"nodeSizeId,omitempty"`
	BackendDatabaseSizeId          string                              `protobuf:"bytes,7,opt,name=backendDatabaseSizeId,proto3" json:"backendDatabaseSizeId,omitempty"`
	LogDirectoryDiskSize           string                              `protobuf:"bytes,8,opt,name=logDirectoryDiskSize,proto3" json:"logDirectoryDiskSize,omitempty"`
	RedisDiskSize                  string                              `protobuf:"bytes,9,opt,name=redisDiskSize,proto3" json:"redisDiskSize,omitempty"`
	AirflowSizeWebserverProperties *DpaiAirflowSizeWebServerProperties `protobuf:"bytes,10,opt,name=airflowSizeWebserverProperties,proto3" json:"airflowSizeWebserverProperties,omitempty"`
	AirflowSchedulerProperties     *DpaiAirflowSchedulerProperties     `protobuf:"bytes,11,opt,name=airflowSchedulerProperties,proto3" json:"airflowSchedulerProperties,omitempty"`
	AirflowWorkerProperties        *DpaiAirflowWorkerProperties        `protobuf:"bytes,12,opt,name=airflowWorkerProperties,proto3" json:"airflowWorkerProperties,omitempty"`
	AirflowTriggerProperties       *DpaiAirflowTriggerProperties       `protobuf:"bytes,13,opt,name=airflowTriggerProperties,proto3" json:"airflowTriggerProperties,omitempty"`
	Metadata                       *DpaiMeta                           `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DpaiAirflowSize) Reset() {
	*x = DpaiAirflowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSize) ProtoMessage() {}

func (x *DpaiAirflowSize) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSize.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSize) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{0}
}

func (x *DpaiAirflowSize) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowSize) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowSize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflowSize) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowSize) GetNumberOfNodesDefault() int32 {
	if x != nil {
		return x.NumberOfNodesDefault
	}
	return 0
}

func (x *DpaiAirflowSize) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *DpaiAirflowSize) GetBackendDatabaseSizeId() string {
	if x != nil {
		return x.BackendDatabaseSizeId
	}
	return ""
}

func (x *DpaiAirflowSize) GetLogDirectoryDiskSize() string {
	if x != nil {
		return x.LogDirectoryDiskSize
	}
	return ""
}

func (x *DpaiAirflowSize) GetRedisDiskSize() string {
	if x != nil {
		return x.RedisDiskSize
	}
	return ""
}

func (x *DpaiAirflowSize) GetAirflowSizeWebserverProperties() *DpaiAirflowSizeWebServerProperties {
	if x != nil {
		return x.AirflowSizeWebserverProperties
	}
	return nil
}

func (x *DpaiAirflowSize) GetAirflowSchedulerProperties() *DpaiAirflowSchedulerProperties {
	if x != nil {
		return x.AirflowSchedulerProperties
	}
	return nil
}

func (x *DpaiAirflowSize) GetAirflowWorkerProperties() *DpaiAirflowWorkerProperties {
	if x != nil {
		return x.AirflowWorkerProperties
	}
	return nil
}

func (x *DpaiAirflowSize) GetAirflowTriggerProperties() *DpaiAirflowTriggerProperties {
	if x != nil {
		return x.AirflowTriggerProperties
	}
	return nil
}

func (x *DpaiAirflowSize) GetMetadata() *DpaiMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DpaiAirflowSizeWebServerProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebserverCount         int32  `protobuf:"varint,1,opt,name=webserverCount,proto3" json:"webserverCount,omitempty"`
	WebserverCpuLimit      string `protobuf:"bytes,2,opt,name=webserverCpuLimit,proto3" json:"webserverCpuLimit,omitempty"`
	WebserverMemoryLimit   string `protobuf:"bytes,3,opt,name=webserverMemoryLimit,proto3" json:"webserverMemoryLimit,omitempty"`
	WebserverCpuRequest    string `protobuf:"bytes,4,opt,name=webserverCpuRequest,proto3" json:"webserverCpuRequest,omitempty"`
	WebserverMemoryRequest string `protobuf:"bytes,5,opt,name=webserverMemoryRequest,proto3" json:"webserverMemoryRequest,omitempty"`
}

func (x *DpaiAirflowSizeWebServerProperties) Reset() {
	*x = DpaiAirflowSizeWebServerProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeWebServerProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeWebServerProperties) ProtoMessage() {}

func (x *DpaiAirflowSizeWebServerProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeWebServerProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeWebServerProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{1}
}

func (x *DpaiAirflowSizeWebServerProperties) GetWebserverCount() int32 {
	if x != nil {
		return x.WebserverCount
	}
	return 0
}

func (x *DpaiAirflowSizeWebServerProperties) GetWebserverCpuLimit() string {
	if x != nil {
		return x.WebserverCpuLimit
	}
	return ""
}

func (x *DpaiAirflowSizeWebServerProperties) GetWebserverMemoryLimit() string {
	if x != nil {
		return x.WebserverMemoryLimit
	}
	return ""
}

func (x *DpaiAirflowSizeWebServerProperties) GetWebserverCpuRequest() string {
	if x != nil {
		return x.WebserverCpuRequest
	}
	return ""
}

func (x *DpaiAirflowSizeWebServerProperties) GetWebserverMemoryRequest() string {
	if x != nil {
		return x.WebserverMemoryRequest
	}
	return ""
}

type DpaiAirflowSchedulerProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedularCountDefault  int32  `protobuf:"varint,1,opt,name=schedularCountDefault,proto3" json:"schedularCountDefault,omitempty"`
	SchedulerCountMin      int32  `protobuf:"varint,2,opt,name=schedulerCountMin,proto3" json:"schedulerCountMin,omitempty"`
	SchedulerCountMax      int32  `protobuf:"varint,3,opt,name=schedulerCountMax,proto3" json:"schedulerCountMax,omitempty"`
	SchedulerCpuLimit      string `protobuf:"bytes,4,opt,name=schedulerCpuLimit,proto3" json:"schedulerCpuLimit,omitempty"`
	SchedulerMemoryLimit   string `protobuf:"bytes,5,opt,name=schedulerMemoryLimit,proto3" json:"schedulerMemoryLimit,omitempty"`
	SchedulerMemoryRequest string `protobuf:"bytes,6,opt,name=schedulerMemoryRequest,proto3" json:"schedulerMemoryRequest,omitempty"`
	SchedulerCpuRequest    string `protobuf:"bytes,7,opt,name=schedulerCpuRequest,proto3" json:"schedulerCpuRequest,omitempty"`
}

func (x *DpaiAirflowSchedulerProperties) Reset() {
	*x = DpaiAirflowSchedulerProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSchedulerProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSchedulerProperties) ProtoMessage() {}

func (x *DpaiAirflowSchedulerProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSchedulerProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSchedulerProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{2}
}

func (x *DpaiAirflowSchedulerProperties) GetSchedularCountDefault() int32 {
	if x != nil {
		return x.SchedularCountDefault
	}
	return 0
}

func (x *DpaiAirflowSchedulerProperties) GetSchedulerCountMin() int32 {
	if x != nil {
		return x.SchedulerCountMin
	}
	return 0
}

func (x *DpaiAirflowSchedulerProperties) GetSchedulerCountMax() int32 {
	if x != nil {
		return x.SchedulerCountMax
	}
	return 0
}

func (x *DpaiAirflowSchedulerProperties) GetSchedulerCpuLimit() string {
	if x != nil {
		return x.SchedulerCpuLimit
	}
	return ""
}

func (x *DpaiAirflowSchedulerProperties) GetSchedulerMemoryLimit() string {
	if x != nil {
		return x.SchedulerMemoryLimit
	}
	return ""
}

func (x *DpaiAirflowSchedulerProperties) GetSchedulerMemoryRequest() string {
	if x != nil {
		return x.SchedulerMemoryRequest
	}
	return ""
}

func (x *DpaiAirflowSchedulerProperties) GetSchedulerCpuRequest() string {
	if x != nil {
		return x.SchedulerCpuRequest
	}
	return ""
}

type DpaiAirflowWorkerProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerCountDefault  int32  `protobuf:"varint,1,opt,name=workerCountDefault,proto3" json:"workerCountDefault,omitempty"`
	WorkerCountMin      int32  `protobuf:"varint,2,opt,name=workerCountMin,proto3" json:"workerCountMin,omitempty"`
	WorkerCountMax      int32  `protobuf:"varint,3,opt,name=workerCountMax,proto3" json:"workerCountMax,omitempty"`
	WorkerMemoryLimit   string `protobuf:"bytes,4,opt,name=workerMemoryLimit,proto3" json:"workerMemoryLimit,omitempty"`
	WorkerMemoryRequest string `protobuf:"bytes,5,opt,name=workerMemoryRequest,proto3" json:"workerMemoryRequest,omitempty"`
	WorkerCpuLimit      string `protobuf:"bytes,6,opt,name=workerCpuLimit,proto3" json:"workerCpuLimit,omitempty"`
	WorkerCpuRequest    string `protobuf:"bytes,7,opt,name=workerCpuRequest,proto3" json:"workerCpuRequest,omitempty"`
}

func (x *DpaiAirflowWorkerProperties) Reset() {
	*x = DpaiAirflowWorkerProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowWorkerProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowWorkerProperties) ProtoMessage() {}

func (x *DpaiAirflowWorkerProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowWorkerProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowWorkerProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{3}
}

func (x *DpaiAirflowWorkerProperties) GetWorkerCountDefault() int32 {
	if x != nil {
		return x.WorkerCountDefault
	}
	return 0
}

func (x *DpaiAirflowWorkerProperties) GetWorkerCountMin() int32 {
	if x != nil {
		return x.WorkerCountMin
	}
	return 0
}

func (x *DpaiAirflowWorkerProperties) GetWorkerCountMax() int32 {
	if x != nil {
		return x.WorkerCountMax
	}
	return 0
}

func (x *DpaiAirflowWorkerProperties) GetWorkerMemoryLimit() string {
	if x != nil {
		return x.WorkerMemoryLimit
	}
	return ""
}

func (x *DpaiAirflowWorkerProperties) GetWorkerMemoryRequest() string {
	if x != nil {
		return x.WorkerMemoryRequest
	}
	return ""
}

func (x *DpaiAirflowWorkerProperties) GetWorkerCpuLimit() string {
	if x != nil {
		return x.WorkerCpuLimit
	}
	return ""
}

func (x *DpaiAirflowWorkerProperties) GetWorkerCpuRequest() string {
	if x != nil {
		return x.WorkerCpuRequest
	}
	return ""
}

type DpaiAirflowTriggerProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerCount         int32  `protobuf:"varint,1,opt,name=triggerCount,proto3" json:"triggerCount,omitempty"`
	TriggerMemoryLimit   string `protobuf:"bytes,2,opt,name=triggerMemoryLimit,proto3" json:"triggerMemoryLimit,omitempty"`
	TriggerMemoryRequest string `protobuf:"bytes,3,opt,name=triggerMemoryRequest,proto3" json:"triggerMemoryRequest,omitempty"`
	TriggerCpuLimit      string `protobuf:"bytes,4,opt,name=triggerCpuLimit,proto3" json:"triggerCpuLimit,omitempty"`
	TriggerCpuRequest    string `protobuf:"bytes,5,opt,name=triggerCpuRequest,proto3" json:"triggerCpuRequest,omitempty"`
}

func (x *DpaiAirflowTriggerProperties) Reset() {
	*x = DpaiAirflowTriggerProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowTriggerProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowTriggerProperties) ProtoMessage() {}

func (x *DpaiAirflowTriggerProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowTriggerProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowTriggerProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{4}
}

func (x *DpaiAirflowTriggerProperties) GetTriggerCount() int32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

func (x *DpaiAirflowTriggerProperties) GetTriggerMemoryLimit() string {
	if x != nil {
		return x.TriggerMemoryLimit
	}
	return ""
}

func (x *DpaiAirflowTriggerProperties) GetTriggerMemoryRequest() string {
	if x != nil {
		return x.TriggerMemoryRequest
	}
	return ""
}

func (x *DpaiAirflowTriggerProperties) GetTriggerCpuLimit() string {
	if x != nil {
		return x.TriggerCpuLimit
	}
	return ""
}

func (x *DpaiAirflowTriggerProperties) GetTriggerCpuRequest() string {
	if x != nil {
		return x.TriggerCpuRequest
	}
	return ""
}

// CreateRequest AirflowSize
type DpaiAirflowSizeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId                 string                              `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name                           string                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description                    string                              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	NumberOfNodesDefault           int32                               `protobuf:"varint,4,opt,name=numberOfNodesDefault,proto3" json:"numberOfNodesDefault,omitempty"`
	NodeSizeId                     string                              `protobuf:"bytes,5,opt,name=nodeSizeId,proto3" json:"nodeSizeId,omitempty"`
	BackendDatabaseSizeId          string                              `protobuf:"bytes,6,opt,name=backendDatabaseSizeId,proto3" json:"backendDatabaseSizeId,omitempty"`
	LogDirectoryDiskSize           string                              `protobuf:"bytes,7,opt,name=logDirectoryDiskSize,proto3" json:"logDirectoryDiskSize,omitempty"`
	RedisDiskSize                  string                              `protobuf:"bytes,8,opt,name=redisDiskSize,proto3" json:"redisDiskSize,omitempty"`
	AirflowSizeWebserverProperties *DpaiAirflowSizeWebServerProperties `protobuf:"bytes,9,opt,name=airflowSizeWebserverProperties,proto3" json:"airflowSizeWebserverProperties,omitempty"`
	AirflowSchedulerProperties     *DpaiAirflowSchedulerProperties     `protobuf:"bytes,10,opt,name=airflowSchedulerProperties,proto3" json:"airflowSchedulerProperties,omitempty"`
	AirflowWorkerProperties        *DpaiAirflowWorkerProperties        `protobuf:"bytes,11,opt,name=airflowWorkerProperties,proto3" json:"airflowWorkerProperties,omitempty"`
	AirflowTriggerProperties       *DpaiAirflowTriggerProperties       `protobuf:"bytes,12,opt,name=airflowTriggerProperties,proto3" json:"airflowTriggerProperties,omitempty"`
}

func (x *DpaiAirflowSizeCreateRequest) Reset() {
	*x = DpaiAirflowSizeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeCreateRequest) ProtoMessage() {}

func (x *DpaiAirflowSizeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeCreateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeCreateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{5}
}

func (x *DpaiAirflowSizeCreateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowSizeCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflowSizeCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowSizeCreateRequest) GetNumberOfNodesDefault() int32 {
	if x != nil {
		return x.NumberOfNodesDefault
	}
	return 0
}

func (x *DpaiAirflowSizeCreateRequest) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *DpaiAirflowSizeCreateRequest) GetBackendDatabaseSizeId() string {
	if x != nil {
		return x.BackendDatabaseSizeId
	}
	return ""
}

func (x *DpaiAirflowSizeCreateRequest) GetLogDirectoryDiskSize() string {
	if x != nil {
		return x.LogDirectoryDiskSize
	}
	return ""
}

func (x *DpaiAirflowSizeCreateRequest) GetRedisDiskSize() string {
	if x != nil {
		return x.RedisDiskSize
	}
	return ""
}

func (x *DpaiAirflowSizeCreateRequest) GetAirflowSizeWebserverProperties() *DpaiAirflowSizeWebServerProperties {
	if x != nil {
		return x.AirflowSizeWebserverProperties
	}
	return nil
}

func (x *DpaiAirflowSizeCreateRequest) GetAirflowSchedulerProperties() *DpaiAirflowSchedulerProperties {
	if x != nil {
		return x.AirflowSchedulerProperties
	}
	return nil
}

func (x *DpaiAirflowSizeCreateRequest) GetAirflowWorkerProperties() *DpaiAirflowWorkerProperties {
	if x != nil {
		return x.AirflowWorkerProperties
	}
	return nil
}

func (x *DpaiAirflowSizeCreateRequest) GetAirflowTriggerProperties() *DpaiAirflowTriggerProperties {
	if x != nil {
		return x.AirflowTriggerProperties
	}
	return nil
}

type DpaiAirflowSizeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *DpaiAirflowSizeListRequest) Reset() {
	*x = DpaiAirflowSizeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeListRequest) ProtoMessage() {}

func (x *DpaiAirflowSizeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeListRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeListRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{6}
}

func (x *DpaiAirflowSizeListRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type DpaiAirflowSizeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*DpaiAirflowSize `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	HasMore   bool               `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	NextToken string             `protobuf:"bytes,3,opt,name=nextToken,proto3" json:"nextToken,omitempty"`
	PrevToken string             `protobuf:"bytes,4,opt,name=prevToken,proto3" json:"prevToken,omitempty"`
}

func (x *DpaiAirflowSizeListResponse) Reset() {
	*x = DpaiAirflowSizeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeListResponse) ProtoMessage() {}

func (x *DpaiAirflowSizeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeListResponse.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeListResponse) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{7}
}

func (x *DpaiAirflowSizeListResponse) GetData() []*DpaiAirflowSize {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DpaiAirflowSizeListResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *DpaiAirflowSizeListResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DpaiAirflowSizeListResponse) GetPrevToken() string {
	if x != nil {
		return x.PrevToken
	}
	return ""
}

type DpaiAirflowSizeGetByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowSizeGetByIdRequest) Reset() {
	*x = DpaiAirflowSizeGetByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeGetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeGetByIdRequest) ProtoMessage() {}

func (x *DpaiAirflowSizeGetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeGetByIdRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeGetByIdRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{8}
}

func (x *DpaiAirflowSizeGetByIdRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowSizeGetByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowSizeGetByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DpaiAirflowSizeGetByNameRequest) Reset() {
	*x = DpaiAirflowSizeGetByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeGetByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeGetByNameRequest) ProtoMessage() {}

func (x *DpaiAirflowSizeGetByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeGetByNameRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeGetByNameRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{9}
}

func (x *DpaiAirflowSizeGetByNameRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowSizeGetByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DpaiAirflowSizeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId                 string                              `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id                             string                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Description                    string                              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	NumberOfNodesDefault           int32                               `protobuf:"varint,4,opt,name=numberOfNodesDefault,proto3" json:"numberOfNodesDefault,omitempty"`
	NodeSizeId                     string                              `protobuf:"bytes,5,opt,name=nodeSizeId,proto3" json:"nodeSizeId,omitempty"`
	BackendDatabaseSizeId          string                              `protobuf:"bytes,6,opt,name=backendDatabaseSizeId,proto3" json:"backendDatabaseSizeId,omitempty"`
	LogDirectoryDiskSize           string                              `protobuf:"bytes,7,opt,name=logDirectoryDiskSize,proto3" json:"logDirectoryDiskSize,omitempty"`
	RedisDiskSize                  string                              `protobuf:"bytes,8,opt,name=redisDiskSize,proto3" json:"redisDiskSize,omitempty"`
	AirflowSizeWebserverProperties *DpaiAirflowSizeWebServerProperties `protobuf:"bytes,9,opt,name=airflowSizeWebserverProperties,proto3" json:"airflowSizeWebserverProperties,omitempty"`
	AirflowSchedulerProperties     *DpaiAirflowSchedulerProperties     `protobuf:"bytes,10,opt,name=airflowSchedulerProperties,proto3" json:"airflowSchedulerProperties,omitempty"`
	AirflowWorkerProperties        *DpaiAirflowWorkerProperties        `protobuf:"bytes,11,opt,name=airflowWorkerProperties,proto3" json:"airflowWorkerProperties,omitempty"`
	AirflowTriggerProperties       *DpaiAirflowTriggerProperties       `protobuf:"bytes,12,opt,name=airflowTriggerProperties,proto3" json:"airflowTriggerProperties,omitempty"`
}

func (x *DpaiAirflowSizeUpdateRequest) Reset() {
	*x = DpaiAirflowSizeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeUpdateRequest) ProtoMessage() {}

func (x *DpaiAirflowSizeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeUpdateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{10}
}

func (x *DpaiAirflowSizeUpdateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowSizeUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowSizeUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowSizeUpdateRequest) GetNumberOfNodesDefault() int32 {
	if x != nil {
		return x.NumberOfNodesDefault
	}
	return 0
}

func (x *DpaiAirflowSizeUpdateRequest) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *DpaiAirflowSizeUpdateRequest) GetBackendDatabaseSizeId() string {
	if x != nil {
		return x.BackendDatabaseSizeId
	}
	return ""
}

func (x *DpaiAirflowSizeUpdateRequest) GetLogDirectoryDiskSize() string {
	if x != nil {
		return x.LogDirectoryDiskSize
	}
	return ""
}

func (x *DpaiAirflowSizeUpdateRequest) GetRedisDiskSize() string {
	if x != nil {
		return x.RedisDiskSize
	}
	return ""
}

func (x *DpaiAirflowSizeUpdateRequest) GetAirflowSizeWebserverProperties() *DpaiAirflowSizeWebServerProperties {
	if x != nil {
		return x.AirflowSizeWebserverProperties
	}
	return nil
}

func (x *DpaiAirflowSizeUpdateRequest) GetAirflowSchedulerProperties() *DpaiAirflowSchedulerProperties {
	if x != nil {
		return x.AirflowSchedulerProperties
	}
	return nil
}

func (x *DpaiAirflowSizeUpdateRequest) GetAirflowWorkerProperties() *DpaiAirflowWorkerProperties {
	if x != nil {
		return x.AirflowWorkerProperties
	}
	return nil
}

func (x *DpaiAirflowSizeUpdateRequest) GetAirflowTriggerProperties() *DpaiAirflowTriggerProperties {
	if x != nil {
		return x.AirflowTriggerProperties
	}
	return nil
}

type DpaiAirflowSizeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowSizeDeleteRequest) Reset() {
	*x = DpaiAirflowSizeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeDeleteRequest) ProtoMessage() {}

func (x *DpaiAirflowSizeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeDeleteRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{11}
}

func (x *DpaiAirflowSizeDeleteRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowSizeDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowSizeDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *DpaiAirflowSizeDeleteResponse) Reset() {
	*x = DpaiAirflowSizeDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeDeleteResponse) ProtoMessage() {}

func (x *DpaiAirflowSizeDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeDeleteResponse.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{12}
}

func (x *DpaiAirflowSizeDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DpaiAirflowSizeDeleteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DpaiAirflowVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId           string                        `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id                       string                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version                  string                        `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	BackendDatabaseVersionId string                        `protobuf:"bytes,5,opt,name=backendDatabaseVersionId,proto3" json:"backendDatabaseVersionId,omitempty"`
	AirflowVersionProperties *DpaiAirflowVersionProperties `protobuf:"bytes,6,opt,name=airflowVersionProperties,proto3" json:"airflowVersionProperties,omitempty"`
	ExecutorType             string                        `protobuf:"bytes,7,opt,name=executorType,proto3" json:"executorType,omitempty"`
	ImageReference           *DpaiImageReference           `protobuf:"bytes,8,opt,name=imageReference,proto3" json:"imageReference,omitempty"`
	ChartReference           *DpaiChartReference           `protobuf:"bytes,9,opt,name=chartReference,proto3" json:"chartReference,omitempty"`
	Description              string                        `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	BackwardCompatibleFrom   string                        `protobuf:"bytes,11,opt,name=backwardCompatibleFrom,proto3" json:"backwardCompatibleFrom,omitempty"`
	Metadata                 *DpaiMeta                     `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DpaiAirflowVersion) Reset() {
	*x = DpaiAirflowVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersion) ProtoMessage() {}

func (x *DpaiAirflowVersion) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersion.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersion) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{13}
}

func (x *DpaiAirflowVersion) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflowVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DpaiAirflowVersion) GetBackendDatabaseVersionId() string {
	if x != nil {
		return x.BackendDatabaseVersionId
	}
	return ""
}

func (x *DpaiAirflowVersion) GetAirflowVersionProperties() *DpaiAirflowVersionProperties {
	if x != nil {
		return x.AirflowVersionProperties
	}
	return nil
}

func (x *DpaiAirflowVersion) GetExecutorType() string {
	if x != nil {
		return x.ExecutorType
	}
	return ""
}

func (x *DpaiAirflowVersion) GetImageReference() *DpaiImageReference {
	if x != nil {
		return x.ImageReference
	}
	return nil
}

func (x *DpaiAirflowVersion) GetChartReference() *DpaiChartReference {
	if x != nil {
		return x.ChartReference
	}
	return nil
}

func (x *DpaiAirflowVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowVersion) GetBackwardCompatibleFrom() string {
	if x != nil {
		return x.BackwardCompatibleFrom
	}
	return ""
}

func (x *DpaiAirflowVersion) GetMetadata() *DpaiMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DpaiAirflowVersionProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirflowVersion  string `protobuf:"bytes,1,opt,name=airflowVersion,proto3" json:"airflowVersion,omitempty"`
	PythonVersion   string `protobuf:"bytes,2,opt,name=pythonVersion,proto3" json:"pythonVersion,omitempty"`
	PostgresVersion string `protobuf:"bytes,3,opt,name=postgresVersion,proto3" json:"postgresVersion,omitempty"`
	RedisVersion    string `protobuf:"bytes,4,opt,name=redisVersion,proto3" json:"redisVersion,omitempty"`
}

func (x *DpaiAirflowVersionProperties) Reset() {
	*x = DpaiAirflowVersionProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionProperties) ProtoMessage() {}

func (x *DpaiAirflowVersionProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{14}
}

func (x *DpaiAirflowVersionProperties) GetAirflowVersion() string {
	if x != nil {
		return x.AirflowVersion
	}
	return ""
}

func (x *DpaiAirflowVersionProperties) GetPythonVersion() string {
	if x != nil {
		return x.PythonVersion
	}
	return ""
}

func (x *DpaiAirflowVersionProperties) GetPostgresVersion() string {
	if x != nil {
		return x.PostgresVersion
	}
	return ""
}

func (x *DpaiAirflowVersionProperties) GetRedisVersion() string {
	if x != nil {
		return x.RedisVersion
	}
	return ""
}

// CreateRequest AirflowVersion
type DpaiAirflowVersionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId           string                        `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name                     string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version                  string                        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	BackendDatabaseVersionId string                        `protobuf:"bytes,4,opt,name=backendDatabaseVersionId,proto3" json:"backendDatabaseVersionId,omitempty"`
	AirflowVersionProperties *DpaiAirflowVersionProperties `protobuf:"bytes,5,opt,name=airflowVersionProperties,proto3" json:"airflowVersionProperties,omitempty"`
	ExecutorType             string                        `protobuf:"bytes,6,opt,name=executorType,proto3" json:"executorType,omitempty"`
	ImageReference           *DpaiImageReference           `protobuf:"bytes,7,opt,name=imageReference,proto3" json:"imageReference,omitempty"`
	ChartReference           *DpaiChartReference           `protobuf:"bytes,8,opt,name=chartReference,proto3" json:"chartReference,omitempty"`
	Description              string                        `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	BackwardCompatibleFrom   string                        `protobuf:"bytes,10,opt,name=backwardCompatibleFrom,proto3" json:"backwardCompatibleFrom,omitempty"`
}

func (x *DpaiAirflowVersionCreateRequest) Reset() {
	*x = DpaiAirflowVersionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionCreateRequest) ProtoMessage() {}

func (x *DpaiAirflowVersionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionCreateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionCreateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{15}
}

func (x *DpaiAirflowVersionCreateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowVersionCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflowVersionCreateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DpaiAirflowVersionCreateRequest) GetBackendDatabaseVersionId() string {
	if x != nil {
		return x.BackendDatabaseVersionId
	}
	return ""
}

func (x *DpaiAirflowVersionCreateRequest) GetAirflowVersionProperties() *DpaiAirflowVersionProperties {
	if x != nil {
		return x.AirflowVersionProperties
	}
	return nil
}

func (x *DpaiAirflowVersionCreateRequest) GetExecutorType() string {
	if x != nil {
		return x.ExecutorType
	}
	return ""
}

func (x *DpaiAirflowVersionCreateRequest) GetImageReference() *DpaiImageReference {
	if x != nil {
		return x.ImageReference
	}
	return nil
}

func (x *DpaiAirflowVersionCreateRequest) GetChartReference() *DpaiChartReference {
	if x != nil {
		return x.ChartReference
	}
	return nil
}

func (x *DpaiAirflowVersionCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowVersionCreateRequest) GetBackwardCompatibleFrom() string {
	if x != nil {
		return x.BackwardCompatibleFrom
	}
	return ""
}

type DpaiAirflowVersionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *DpaiAirflowVersionListRequest) Reset() {
	*x = DpaiAirflowVersionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionListRequest) ProtoMessage() {}

func (x *DpaiAirflowVersionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionListRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionListRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{16}
}

func (x *DpaiAirflowVersionListRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type DpaiAirflowVersionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*DpaiAirflowVersion `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	HasMore   bool                  `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	NextToken string                `protobuf:"bytes,3,opt,name=nextToken,proto3" json:"nextToken,omitempty"`
	PrevToken string                `protobuf:"bytes,4,opt,name=prevToken,proto3" json:"prevToken,omitempty"`
}

func (x *DpaiAirflowVersionListResponse) Reset() {
	*x = DpaiAirflowVersionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionListResponse) ProtoMessage() {}

func (x *DpaiAirflowVersionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionListResponse.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionListResponse) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{17}
}

func (x *DpaiAirflowVersionListResponse) GetData() []*DpaiAirflowVersion {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DpaiAirflowVersionListResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *DpaiAirflowVersionListResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DpaiAirflowVersionListResponse) GetPrevToken() string {
	if x != nil {
		return x.PrevToken
	}
	return ""
}

type DpaiAirflowVersionGetByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowVersionGetByIdRequest) Reset() {
	*x = DpaiAirflowVersionGetByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionGetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionGetByIdRequest) ProtoMessage() {}

func (x *DpaiAirflowVersionGetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionGetByIdRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionGetByIdRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{18}
}

func (x *DpaiAirflowVersionGetByIdRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowVersionGetByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowVersionGetByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DpaiAirflowVersionGetByNameRequest) Reset() {
	*x = DpaiAirflowVersionGetByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionGetByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionGetByNameRequest) ProtoMessage() {}

func (x *DpaiAirflowVersionGetByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionGetByNameRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionGetByNameRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{19}
}

func (x *DpaiAirflowVersionGetByNameRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowVersionGetByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DpaiAirflowVersionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId         string              `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id                     string              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version                string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description            string              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ImageReference         *DpaiImageReference `protobuf:"bytes,5,opt,name=imageReference,proto3" json:"imageReference,omitempty"`
	ChartReference         *DpaiChartReference `protobuf:"bytes,6,opt,name=chartReference,proto3" json:"chartReference,omitempty"`
	BackwardCompatibleFrom string              `protobuf:"bytes,7,opt,name=backwardCompatibleFrom,proto3" json:"backwardCompatibleFrom,omitempty"`
}

func (x *DpaiAirflowVersionUpdateRequest) Reset() {
	*x = DpaiAirflowVersionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionUpdateRequest) ProtoMessage() {}

func (x *DpaiAirflowVersionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionUpdateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{20}
}

func (x *DpaiAirflowVersionUpdateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowVersionUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowVersionUpdateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DpaiAirflowVersionUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowVersionUpdateRequest) GetImageReference() *DpaiImageReference {
	if x != nil {
		return x.ImageReference
	}
	return nil
}

func (x *DpaiAirflowVersionUpdateRequest) GetChartReference() *DpaiChartReference {
	if x != nil {
		return x.ChartReference
	}
	return nil
}

func (x *DpaiAirflowVersionUpdateRequest) GetBackwardCompatibleFrom() string {
	if x != nil {
		return x.BackwardCompatibleFrom
	}
	return ""
}

type DpaiAirflowVersionDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowVersionDeleteRequest) Reset() {
	*x = DpaiAirflowVersionDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionDeleteRequest) ProtoMessage() {}

func (x *DpaiAirflowVersionDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionDeleteRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{21}
}

func (x *DpaiAirflowVersionDeleteRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowVersionDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowVersionDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *DpaiAirflowVersionDeleteResponse) Reset() {
	*x = DpaiAirflowVersionDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowVersionDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowVersionDeleteResponse) ProtoMessage() {}

func (x *DpaiAirflowVersionDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowVersionDeleteResponse.ProtoReflect.Descriptor instead.
func (*DpaiAirflowVersionDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{22}
}

func (x *DpaiAirflowVersionDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DpaiAirflowVersionDeleteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DpaiAirflowConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string    `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AirflowId      string    `protobuf:"bytes,3,opt,name=airflowId,proto3" json:"airflowId,omitempty"`
	Key            string    `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value          string    `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Metadata       *DpaiMeta `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DpaiAirflowConf) Reset() {
	*x = DpaiAirflowConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConf) ProtoMessage() {}

func (x *DpaiAirflowConf) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConf.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConf) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{23}
}

func (x *DpaiAirflowConf) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowConf) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowConf) GetAirflowId() string {
	if x != nil {
		return x.AirflowId
	}
	return ""
}

func (x *DpaiAirflowConf) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DpaiAirflowConf) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DpaiAirflowConf) GetMetadata() *DpaiMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DpaiAirflowConfCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	AirflowId      string `protobuf:"bytes,2,opt,name=airflowId,proto3" json:"airflowId,omitempty"`
	Key            string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value          string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	CreatedBy      string `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *DpaiAirflowConfCreateRequest) Reset() {
	*x = DpaiAirflowConfCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfCreateRequest) ProtoMessage() {}

func (x *DpaiAirflowConfCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfCreateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfCreateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{24}
}

func (x *DpaiAirflowConfCreateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowConfCreateRequest) GetAirflowId() string {
	if x != nil {
		return x.AirflowId
	}
	return ""
}

func (x *DpaiAirflowConfCreateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DpaiAirflowConfCreateRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DpaiAirflowConfCreateRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type DpaiAirflowConfListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	AirflowId      string `protobuf:"bytes,2,opt,name=airflowId,proto3" json:"airflowId,omitempty"`
}

func (x *DpaiAirflowConfListRequest) Reset() {
	*x = DpaiAirflowConfListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfListRequest) ProtoMessage() {}

func (x *DpaiAirflowConfListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfListRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfListRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{25}
}

func (x *DpaiAirflowConfListRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowConfListRequest) GetAirflowId() string {
	if x != nil {
		return x.AirflowId
	}
	return ""
}

type DpaiAirflowConfListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*DpaiAirflowConf `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	HasMore   bool               `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	NextToken string             `protobuf:"bytes,3,opt,name=nextToken,proto3" json:"nextToken,omitempty"`
	PrevToken string             `protobuf:"bytes,4,opt,name=prevToken,proto3" json:"prevToken,omitempty"`
}

func (x *DpaiAirflowConfListResponse) Reset() {
	*x = DpaiAirflowConfListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfListResponse) ProtoMessage() {}

func (x *DpaiAirflowConfListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfListResponse.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfListResponse) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{26}
}

func (x *DpaiAirflowConfListResponse) GetData() []*DpaiAirflowConf {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DpaiAirflowConfListResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *DpaiAirflowConfListResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *DpaiAirflowConfListResponse) GetPrevToken() string {
	if x != nil {
		return x.PrevToken
	}
	return ""
}

type DpaiAirflowConfGetByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowConfGetByIdRequest) Reset() {
	*x = DpaiAirflowConfGetByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfGetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfGetByIdRequest) ProtoMessage() {}

func (x *DpaiAirflowConfGetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfGetByIdRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfGetByIdRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{27}
}

func (x *DpaiAirflowConfGetByIdRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowConfGetByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowConfUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AirflowId      string `protobuf:"bytes,3,opt,name=airflowId,proto3" json:"airflowId,omitempty"`
	Key            string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value          string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	UpdatedBy      string `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *DpaiAirflowConfUpdateRequest) Reset() {
	*x = DpaiAirflowConfUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfUpdateRequest) ProtoMessage() {}

func (x *DpaiAirflowConfUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfUpdateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{28}
}

func (x *DpaiAirflowConfUpdateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowConfUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowConfUpdateRequest) GetAirflowId() string {
	if x != nil {
		return x.AirflowId
	}
	return ""
}

func (x *DpaiAirflowConfUpdateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DpaiAirflowConfUpdateRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DpaiAirflowConfUpdateRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type DpaiAirflowConfDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowConfDeleteRequest) Reset() {
	*x = DpaiAirflowConfDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfDeleteRequest) ProtoMessage() {}

func (x *DpaiAirflowConfDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfDeleteRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{29}
}

func (x *DpaiAirflowConfDeleteRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowConfDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowConfDeleteByAirflowIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowConfDeleteByAirflowIdRequest) Reset() {
	*x = DpaiAirflowConfDeleteByAirflowIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfDeleteByAirflowIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfDeleteByAirflowIdRequest) ProtoMessage() {}

func (x *DpaiAirflowConfDeleteByAirflowIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfDeleteByAirflowIdRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfDeleteByAirflowIdRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{30}
}

func (x *DpaiAirflowConfDeleteByAirflowIdRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowConfDeleteByAirflowIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowConfDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *DpaiAirflowConfDeleteResponse) Reset() {
	*x = DpaiAirflowConfDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowConfDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowConfDeleteResponse) ProtoMessage() {}

func (x *DpaiAirflowConfDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowConfDeleteResponse.ProtoReflect.Descriptor instead.
func (*DpaiAirflowConfDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{31}
}

func (x *DpaiAirflowConfDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DpaiAirflowConfDeleteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DpaiAirflowStorageProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId        string                     `protobuf:"bytes,1,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	BucketPrincipal string                     `protobuf:"bytes,2,opt,name=bucketPrincipal,proto3" json:"bucketPrincipal,omitempty"`
	Path            *DpaiAirflowPathProperties `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DpaiAirflowStorageProperties) Reset() {
	*x = DpaiAirflowStorageProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowStorageProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowStorageProperties) ProtoMessage() {}

func (x *DpaiAirflowStorageProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowStorageProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowStorageProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{32}
}

func (x *DpaiAirflowStorageProperties) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *DpaiAirflowStorageProperties) GetBucketPrincipal() string {
	if x != nil {
		return x.BucketPrincipal
	}
	return ""
}

func (x *DpaiAirflowStorageProperties) GetPath() *DpaiAirflowPathProperties {
	if x != nil {
		return x.Path
	}
	return nil
}

type DpaiAirflowPathProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DagFolderPath    string `protobuf:"bytes,1,opt,name=dagFolderPath,proto3" json:"dagFolderPath,omitempty"`
	PluginFolderPath string `protobuf:"bytes,2,opt,name=pluginFolderPath,proto3" json:"pluginFolderPath,omitempty"`
	RequirementPath  string `protobuf:"bytes,3,opt,name=requirementPath,proto3" json:"requirementPath,omitempty"`
	LogFolder        string `protobuf:"bytes,4,opt,name=logFolder,proto3" json:"logFolder,omitempty"`
}

func (x *DpaiAirflowPathProperties) Reset() {
	*x = DpaiAirflowPathProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowPathProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowPathProperties) ProtoMessage() {}

func (x *DpaiAirflowPathProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowPathProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowPathProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{33}
}

func (x *DpaiAirflowPathProperties) GetDagFolderPath() string {
	if x != nil {
		return x.DagFolderPath
	}
	return ""
}

func (x *DpaiAirflowPathProperties) GetPluginFolderPath() string {
	if x != nil {
		return x.PluginFolderPath
	}
	return ""
}

func (x *DpaiAirflowPathProperties) GetRequirementPath() string {
	if x != nil {
		return x.RequirementPath
	}
	return ""
}

func (x *DpaiAirflowPathProperties) GetLogFolder() string {
	if x != nil {
		return x.LogFolder
	}
	return ""
}

type DpaiAirflowWebServerProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint               string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	WebserverAdminUsername string `protobuf:"bytes,2,opt,name=webserverAdminUsername,proto3" json:"webserverAdminUsername,omitempty"`
	WebserverAdminPassword string `protobuf:"bytes,3,opt,name=webserverAdminPassword,proto3" json:"webserverAdminPassword,omitempty"`
}

func (x *DpaiAirflowWebServerProperties) Reset() {
	*x = DpaiAirflowWebServerProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowWebServerProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowWebServerProperties) ProtoMessage() {}

func (x *DpaiAirflowWebServerProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowWebServerProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowWebServerProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{34}
}

func (x *DpaiAirflowWebServerProperties) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *DpaiAirflowWebServerProperties) GetWebserverAdminUsername() string {
	if x != nil {
		return x.WebserverAdminUsername
	}
	return ""
}

func (x *DpaiAirflowWebServerProperties) GetWebserverAdminPassword() string {
	if x != nil {
		return x.WebserverAdminPassword
	}
	return ""
}

type DpaiAirflowSizeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size               string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	NumberOfNodes      int32  `protobuf:"varint,2,opt,name=numberOfNodes,proto3" json:"numberOfNodes,omitempty"`
	NumberOfWorkers    int32  `protobuf:"varint,3,opt,name=numberOfWorkers,proto3" json:"numberOfWorkers,omitempty"`
	NumberOfSchedulers int32  `protobuf:"varint,4,opt,name=numberOfSchedulers,proto3" json:"numberOfSchedulers,omitempty"`
}

func (x *DpaiAirflowSizeProperties) Reset() {
	*x = DpaiAirflowSizeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowSizeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowSizeProperties) ProtoMessage() {}

func (x *DpaiAirflowSizeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowSizeProperties.ProtoReflect.Descriptor instead.
func (*DpaiAirflowSizeProperties) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{35}
}

func (x *DpaiAirflowSizeProperties) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *DpaiAirflowSizeProperties) GetNumberOfNodes() int32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *DpaiAirflowSizeProperties) GetNumberOfWorkers() int32 {
	if x != nil {
		return x.NumberOfWorkers
	}
	return 0
}

func (x *DpaiAirflowSizeProperties) GetNumberOfSchedulers() int32 {
	if x != nil {
		return x.NumberOfSchedulers
	}
	return 0
}

type DpaiAirflowDeploymentMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId      string                `protobuf:"bytes,1,opt,name=deploymentId,proto3" json:"deploymentId,omitempty"`
	BackendDatabaseId string                `protobuf:"bytes,2,opt,name=backendDatabaseId,proto3" json:"backendDatabaseId,omitempty"`
	IksClusterId      string                `protobuf:"bytes,3,opt,name=iksClusterId,proto3" json:"iksClusterId,omitempty"`
	WorkspaceId       string                `protobuf:"bytes,4,opt,name=workspaceId,proto3" json:"workspaceId,omitempty"`
	NodeGroupId       string                `protobuf:"bytes,5,opt,name=nodeGroupId,proto3" json:"nodeGroupId,omitempty"`
	DeploymentStatus  *DpaiDeploymentStatus `protobuf:"bytes,6,opt,name=deploymentStatus,proto3" json:"deploymentStatus,omitempty"`
}

func (x *DpaiAirflowDeploymentMeta) Reset() {
	*x = DpaiAirflowDeploymentMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowDeploymentMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowDeploymentMeta) ProtoMessage() {}

func (x *DpaiAirflowDeploymentMeta) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowDeploymentMeta.ProtoReflect.Descriptor instead.
func (*DpaiAirflowDeploymentMeta) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{36}
}

func (x *DpaiAirflowDeploymentMeta) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DpaiAirflowDeploymentMeta) GetBackendDatabaseId() string {
	if x != nil {
		return x.BackendDatabaseId
	}
	return ""
}

func (x *DpaiAirflowDeploymentMeta) GetIksClusterId() string {
	if x != nil {
		return x.IksClusterId
	}
	return ""
}

func (x *DpaiAirflowDeploymentMeta) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DpaiAirflowDeploymentMeta) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

func (x *DpaiAirflowDeploymentMeta) GetDeploymentStatus() *DpaiDeploymentStatus {
	if x != nil {
		return x.DeploymentStatus
	}
	return nil
}

type DpaiAirflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId      string                          `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id                  string                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceName       string                          `protobuf:"bytes,3,opt,name=workspaceName,proto3" json:"workspaceName,omitempty"`
	Name                string                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Version             string                          `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Tags                map[string]string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StorageProperties   *DpaiAirflowStorageProperties   `protobuf:"bytes,8,opt,name=storageProperties,proto3" json:"storageProperties,omitempty"`
	WebServerProperties *DpaiAirflowWebServerProperties `protobuf:"bytes,9,opt,name=webServerProperties,proto3" json:"webServerProperties,omitempty"`
	SizeProperties      *DpaiAirflowSizeProperties      `protobuf:"bytes,10,opt,name=sizeProperties,proto3" json:"sizeProperties,omitempty"`
	Metadata            *DpaiMeta                       `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DeploymentMetadata  *DpaiAirflowDeploymentMeta      `protobuf:"bytes,12,opt,name=deploymentMetadata,proto3" json:"deploymentMetadata,omitempty"`
}

func (x *DpaiAirflow) Reset() {
	*x = DpaiAirflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflow) ProtoMessage() {}

func (x *DpaiAirflow) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflow.ProtoReflect.Descriptor instead.
func (*DpaiAirflow) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{37}
}

func (x *DpaiAirflow) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflow) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *DpaiAirflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflow) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DpaiAirflow) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DpaiAirflow) GetStorageProperties() *DpaiAirflowStorageProperties {
	if x != nil {
		return x.StorageProperties
	}
	return nil
}

func (x *DpaiAirflow) GetWebServerProperties() *DpaiAirflowWebServerProperties {
	if x != nil {
		return x.WebServerProperties
	}
	return nil
}

func (x *DpaiAirflow) GetSizeProperties() *DpaiAirflowSizeProperties {
	if x != nil {
		return x.SizeProperties
	}
	return nil
}

func (x *DpaiAirflow) GetMetadata() *DpaiMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DpaiAirflow) GetDeploymentMetadata() *DpaiAirflowDeploymentMeta {
	if x != nil {
		return x.DeploymentMetadata
	}
	return nil
}

type DpaiAirflowCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId      string                          `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	WorkspaceName       string                          `protobuf:"bytes,2,opt,name=workspaceName,proto3" json:"workspaceName,omitempty"`
	WorkspaceId         string                          `protobuf:"bytes,3,opt,name=workspaceId,proto3" json:"workspaceId,omitempty"`
	Name                string                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Version             string                          `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Tags                map[string]string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StorageProperties   *DpaiAirflowStorageProperties   `protobuf:"bytes,8,opt,name=storageProperties,proto3" json:"storageProperties,omitempty"`
	WebServerProperties *DpaiAirflowWebServerProperties `protobuf:"bytes,9,opt,name=webServerProperties,proto3" json:"webServerProperties,omitempty"`
	SizeProperties      *DpaiAirflowSizeProperties      `protobuf:"bytes,10,opt,name=sizeProperties,proto3" json:"sizeProperties,omitempty"`
}

func (x *DpaiAirflowCreateRequest) Reset() {
	*x = DpaiAirflowCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowCreateRequest) ProtoMessage() {}

func (x *DpaiAirflowCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowCreateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowCreateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{38}
}

func (x *DpaiAirflowCreateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowCreateRequest) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *DpaiAirflowCreateRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DpaiAirflowCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflowCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowCreateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DpaiAirflowCreateRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DpaiAirflowCreateRequest) GetStorageProperties() *DpaiAirflowStorageProperties {
	if x != nil {
		return x.StorageProperties
	}
	return nil
}

func (x *DpaiAirflowCreateRequest) GetWebServerProperties() *DpaiAirflowWebServerProperties {
	if x != nil {
		return x.WebServerProperties
	}
	return nil
}

func (x *DpaiAirflowCreateRequest) GetSizeProperties() *DpaiAirflowSizeProperties {
	if x != nil {
		return x.SizeProperties
	}
	return nil
}

type DpaiAirflowListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspaceId,proto3" json:"workspaceId,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Offset         int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DpaiAirflowListRequest) Reset() {
	*x = DpaiAirflowListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowListRequest) ProtoMessage() {}

func (x *DpaiAirflowListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowListRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowListRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{39}
}

func (x *DpaiAirflowListRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowListRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DpaiAirflowListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflowListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DpaiAirflowListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DpaiAirflowListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []*DpaiAirflow `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	PrevOffset   int64          `protobuf:"varint,2,opt,name=prevOffset,proto3" json:"prevOffset,omitempty"`
	CurrOffset   int64          `protobuf:"varint,3,opt,name=currOffset,proto3" json:"currOffset,omitempty"`
	NextOffset   int64          `protobuf:"varint,4,opt,name=nextOffset,proto3" json:"nextOffset,omitempty"`
	LastOffset   int64          `protobuf:"varint,5,opt,name=lastOffset,proto3" json:"lastOffset,omitempty"`
	Limit        int64          `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalRecords int64          `protobuf:"varint,7,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
}

func (x *DpaiAirflowListResponse) Reset() {
	*x = DpaiAirflowListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowListResponse) ProtoMessage() {}

func (x *DpaiAirflowListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowListResponse.ProtoReflect.Descriptor instead.
func (*DpaiAirflowListResponse) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{40}
}

func (x *DpaiAirflowListResponse) GetData() []*DpaiAirflow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DpaiAirflowListResponse) GetPrevOffset() int64 {
	if x != nil {
		return x.PrevOffset
	}
	return 0
}

func (x *DpaiAirflowListResponse) GetCurrOffset() int64 {
	if x != nil {
		return x.CurrOffset
	}
	return 0
}

func (x *DpaiAirflowListResponse) GetNextOffset() int64 {
	if x != nil {
		return x.NextOffset
	}
	return 0
}

func (x *DpaiAirflowListResponse) GetLastOffset() int64 {
	if x != nil {
		return x.LastOffset
	}
	return 0
}

func (x *DpaiAirflowListResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DpaiAirflowListResponse) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type DpaiAirflowGetByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowGetByIdRequest) Reset() {
	*x = DpaiAirflowGetByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowGetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowGetByIdRequest) ProtoMessage() {}

func (x *DpaiAirflowGetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowGetByIdRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowGetByIdRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{41}
}

func (x *DpaiAirflowGetByIdRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowGetByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowGetByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceId    string `protobuf:"bytes,2,opt,name=workspaceId,proto3" json:"workspaceId,omitempty"`
}

func (x *DpaiAirflowGetByNameRequest) Reset() {
	*x = DpaiAirflowGetByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowGetByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowGetByNameRequest) ProtoMessage() {}

func (x *DpaiAirflowGetByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowGetByNameRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowGetByNameRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{42}
}

func (x *DpaiAirflowGetByNameRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowGetByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpaiAirflowGetByNameRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type DpaiAirflowUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string            `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Description    string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags           map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DpaiAirflowUpdateRequest) Reset() {
	*x = DpaiAirflowUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowUpdateRequest) ProtoMessage() {}

func (x *DpaiAirflowUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowUpdateRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{43}
}

func (x *DpaiAirflowUpdateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpaiAirflowUpdateRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DpaiAirflowDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowDeleteRequest) Reset() {
	*x = DpaiAirflowDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowDeleteRequest) ProtoMessage() {}

func (x *DpaiAirflowDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowDeleteRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{44}
}

func (x *DpaiAirflowDeleteRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId    string `protobuf:"bytes,3,opt,name=workspaceId,proto3" json:"workspaceId,omitempty"`
	AirflowId      string `protobuf:"bytes,4,opt,name=airflowId,proto3" json:"airflowId,omitempty"`
}

func (x *DpaiAirflowRestartRequest) Reset() {
	*x = DpaiAirflowRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowRestartRequest) ProtoMessage() {}

func (x *DpaiAirflowRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowRestartRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowRestartRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{45}
}

func (x *DpaiAirflowRestartRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowRestartRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowRestartRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DpaiAirflowRestartRequest) GetAirflowId() string {
	if x != nil {
		return x.AirflowId
	}
	return ""
}

type DpaiAirflowResizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId     string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id                 string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Size               string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	NumberOfNodes      int32  `protobuf:"varint,4,opt,name=numberOfNodes,proto3" json:"numberOfNodes,omitempty"`
	NumberOfWorkers    int32  `protobuf:"varint,5,opt,name=numberOfWorkers,proto3" json:"numberOfWorkers,omitempty"`
	NumberOfSchedulers int32  `protobuf:"varint,6,opt,name=numberOfSchedulers,proto3" json:"numberOfSchedulers,omitempty"`
	WorkspaceId        string `protobuf:"bytes,7,opt,name=workspaceId,proto3" json:"workspaceId,omitempty"`
	AirflowId          string `protobuf:"bytes,8,opt,name=airflowId,proto3" json:"airflowId,omitempty"`
}

func (x *DpaiAirflowResizeRequest) Reset() {
	*x = DpaiAirflowResizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowResizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowResizeRequest) ProtoMessage() {}

func (x *DpaiAirflowResizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowResizeRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowResizeRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{46}
}

func (x *DpaiAirflowResizeRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowResizeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowResizeRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *DpaiAirflowResizeRequest) GetNumberOfNodes() int32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *DpaiAirflowResizeRequest) GetNumberOfWorkers() int32 {
	if x != nil {
		return x.NumberOfWorkers
	}
	return 0
}

func (x *DpaiAirflowResizeRequest) GetNumberOfSchedulers() int32 {
	if x != nil {
		return x.NumberOfSchedulers
	}
	return 0
}

func (x *DpaiAirflowResizeRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DpaiAirflowResizeRequest) GetAirflowId() string {
	if x != nil {
		return x.AirflowId
	}
	return ""
}

type DpaiAirflowListUpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DpaiAirflowListUpgradeRequest) Reset() {
	*x = DpaiAirflowListUpgradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowListUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowListUpgradeRequest) ProtoMessage() {}

func (x *DpaiAirflowListUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowListUpgradeRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowListUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{47}
}

func (x *DpaiAirflowListUpgradeRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowListUpgradeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DpaiAirflowUpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version        string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	WorkspaceId    string `protobuf:"bytes,4,opt,name=workspaceId,proto3" json:"workspaceId,omitempty"`
	AirflowId      string `protobuf:"bytes,5,opt,name=airflowId,proto3" json:"airflowId,omitempty"`
}

func (x *DpaiAirflowUpgradeRequest) Reset() {
	*x = DpaiAirflowUpgradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dpai_airflow_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpaiAirflowUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpaiAirflowUpgradeRequest) ProtoMessage() {}

func (x *DpaiAirflowUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dpai_airflow_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpaiAirflowUpgradeRequest.ProtoReflect.Descriptor instead.
func (*DpaiAirflowUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_dpai_airflow_proto_rawDescGZIP(), []int{48}
}

func (x *DpaiAirflowUpgradeRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DpaiAirflowUpgradeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DpaiAirflowUpgradeRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DpaiAirflowUpgradeRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *DpaiAirflowUpgradeRequest) GetAirflowId() string {
	if x != nil {
		return x.AirflowId
	}
	return ""
}

var File_dpai_airflow_proto protoreflect.FileDescriptor

var file_dpai_airflow_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x70, 0x61, 0x69, 0x5f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x64, 0x70, 0x61, 0x69, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x06, 0x0a, 0x0f, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x71, 0x0a, 0x1e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x57,
	0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x1e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x57, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x1a, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x1a,
	0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x17, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x18, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x02, 0x0a, 0x22, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x70, 0x75, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x65, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xfe, 0x02, 0x0a, 0x1e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x70, 0x75, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x70, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x1b, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x70, 0x75, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x43, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x70, 0x75, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x1c, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x70, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x06, 0x0a, 0x1c, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x71, 0x0a, 0x1e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x57, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x1e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x57, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x1a, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x1a, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x17,
	0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x17, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x18, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x1a, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x76, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5f, 0x0a, 0x1d, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x1f,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xfd, 0x05, 0x0a, 0x1c, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x71, 0x0a, 0x1e, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x1e, 0x61,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x65, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x65, 0x0a,
	0x1a, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x1a, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x17, 0x61, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x18, 0x61, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1c, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b,
	0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x1d, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xc8, 0x04, 0x0a, 0x12, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x18, 0x61,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x18, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01,
	0x0a, 0x1c, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x04, 0x0a, 0x1f, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x18, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70,
	0x61, 0x69, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x4f, 0x0a,
	0x1d, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa5,
	0x01, 0x0a, 0x1e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x76, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x20, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x22, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x1f, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x61,
	0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x22, 0x61, 0x0a, 0x1f, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x20, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x1c, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x6a, 0x0a, 0x1a, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x76, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5f, 0x0a, 0x1d, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0x5e, 0x0a, 0x1c, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x69, 0x0a, 0x27, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x1d, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x67, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x67,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xd1,
	0x01, 0x0a, 0x1e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x16, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa,
	0x42, 0x15, 0x72, 0x13, 0x28, 0x10, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x16, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x16, 0x77, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x08, 0x28, 0x10, 0x52, 0x16, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x19, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6b, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6b, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x70, 0x61, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x05, 0x0a, 0x0b, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x13, 0x77, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x69, 0x7a,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa1, 0x05, 0x0a, 0x18, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x28, 0x20,
	0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x28, 0x20, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x28, 0x80, 0x04, 0x32,
	0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x5d,
	0x2a, 0x24, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x77,
	0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x13, 0x77, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0e,
	0x73, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x17, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x76, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x19, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a,
	0x0a, 0x18, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x18, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x1d, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x32, 0xff, 0x07, 0x0a, 0x16, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x15, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d,
	0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xa1, 0x01, 0x0a,
	0x13, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x69, 0x7a, 0x65, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0xa0, 0x01, 0x0a, 0x16, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x69, 0x7a, 0x65, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3a, 0x12, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x69, 0x7a, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0x12, 0xab, 0x01, 0x0a, 0x18, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61,
	0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x69, 0x7a, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0x12, 0xa1, 0x01, 0x0a, 0x15, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x69, 0x7a, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d,
	0x32, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x69, 0x7a, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x69, 0x7a, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x32, 0xca, 0x08, 0x0a, 0x19, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x18, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64,
	0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xad, 0x01,
	0x0a, 0x16, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xac, 0x01,
	0x0a, 0x19, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69,
	0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xb7, 0x01, 0x0a,
	0x1b, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64,
	0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x32, 0x3b,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xb8, 0x01, 0x0a, 0x18, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69,
	0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x2a, 0x3b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d,
	0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0x32, 0xff, 0x06, 0x0a, 0x16, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9e, 0x01, 0x0a,
	0x15, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x35, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xa3, 0x01,
	0x0a, 0x13, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x16, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x4a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xb1, 0x01, 0x0a, 0x15, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x32, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xc4, 0x01, 0x0a,
	0x20, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x79, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x2a,
	0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0x32, 0x97, 0x0d, 0x0a, 0x12, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x01,
	0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x90, 0x01,
	0x0a, 0x12, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0x9b, 0x01, 0x0a, 0x14, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70,
	0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x91,
	0x01, 0x0a, 0x11, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70,
	0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x32, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x2a, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xaa,
	0x01, 0x0a, 0x16, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x6c,
	0x69, 0x73, 0x74, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xc5, 0x01, 0x0a, 0x12,
	0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41,
	0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61,
	0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x22, 0x5b, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x64, 0x70, 0x61, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x7d,
	0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0x12, 0xc2, 0x01, 0x0a, 0x12, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x5d, 0x22, 0x5b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x61, 0x69,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xc2, 0x01, 0x0a, 0x11, 0x44, 0x70, 0x61,
	0x69, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x41, 0x69, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x70, 0x61, 0x69, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5f, 0x22, 0x5a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x70, 0x61, 0x69, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x7b, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x42, 0x5f, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd,
	0x1b, 0x06, 0x12, 0x04, 0x64, 0x70, 0x61, 0x69, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dpai_airflow_proto_rawDescOnce sync.Once
	file_dpai_airflow_proto_rawDescData = file_dpai_airflow_proto_rawDesc
)

func file_dpai_airflow_proto_rawDescGZIP() []byte {
	file_dpai_airflow_proto_rawDescOnce.Do(func() {
		file_dpai_airflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_dpai_airflow_proto_rawDescData)
	})
	return file_dpai_airflow_proto_rawDescData
}

var file_dpai_airflow_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_dpai_airflow_proto_goTypes = []interface{}{
	(*DpaiAirflowSize)(nil),                         // 0: proto.DpaiAirflowSize
	(*DpaiAirflowSizeWebServerProperties)(nil),      // 1: proto.DpaiAirflowSizeWebServerProperties
	(*DpaiAirflowSchedulerProperties)(nil),          // 2: proto.DpaiAirflowSchedulerProperties
	(*DpaiAirflowWorkerProperties)(nil),             // 3: proto.DpaiAirflowWorkerProperties
	(*DpaiAirflowTriggerProperties)(nil),            // 4: proto.DpaiAirflowTriggerProperties
	(*DpaiAirflowSizeCreateRequest)(nil),            // 5: proto.DpaiAirflowSizeCreateRequest
	(*DpaiAirflowSizeListRequest)(nil),              // 6: proto.DpaiAirflowSizeListRequest
	(*DpaiAirflowSizeListResponse)(nil),             // 7: proto.DpaiAirflowSizeListResponse
	(*DpaiAirflowSizeGetByIdRequest)(nil),           // 8: proto.DpaiAirflowSizeGetByIdRequest
	(*DpaiAirflowSizeGetByNameRequest)(nil),         // 9: proto.DpaiAirflowSizeGetByNameRequest
	(*DpaiAirflowSizeUpdateRequest)(nil),            // 10: proto.DpaiAirflowSizeUpdateRequest
	(*DpaiAirflowSizeDeleteRequest)(nil),            // 11: proto.DpaiAirflowSizeDeleteRequest
	(*DpaiAirflowSizeDeleteResponse)(nil),           // 12: proto.DpaiAirflowSizeDeleteResponse
	(*DpaiAirflowVersion)(nil),                      // 13: proto.DpaiAirflowVersion
	(*DpaiAirflowVersionProperties)(nil),            // 14: proto.DpaiAirflowVersionProperties
	(*DpaiAirflowVersionCreateRequest)(nil),         // 15: proto.DpaiAirflowVersionCreateRequest
	(*DpaiAirflowVersionListRequest)(nil),           // 16: proto.DpaiAirflowVersionListRequest
	(*DpaiAirflowVersionListResponse)(nil),          // 17: proto.DpaiAirflowVersionListResponse
	(*DpaiAirflowVersionGetByIdRequest)(nil),        // 18: proto.DpaiAirflowVersionGetByIdRequest
	(*DpaiAirflowVersionGetByNameRequest)(nil),      // 19: proto.DpaiAirflowVersionGetByNameRequest
	(*DpaiAirflowVersionUpdateRequest)(nil),         // 20: proto.DpaiAirflowVersionUpdateRequest
	(*DpaiAirflowVersionDeleteRequest)(nil),         // 21: proto.DpaiAirflowVersionDeleteRequest
	(*DpaiAirflowVersionDeleteResponse)(nil),        // 22: proto.DpaiAirflowVersionDeleteResponse
	(*DpaiAirflowConf)(nil),                         // 23: proto.DpaiAirflowConf
	(*DpaiAirflowConfCreateRequest)(nil),            // 24: proto.DpaiAirflowConfCreateRequest
	(*DpaiAirflowConfListRequest)(nil),              // 25: proto.DpaiAirflowConfListRequest
	(*DpaiAirflowConfListResponse)(nil),             // 26: proto.DpaiAirflowConfListResponse
	(*DpaiAirflowConfGetByIdRequest)(nil),           // 27: proto.DpaiAirflowConfGetByIdRequest
	(*DpaiAirflowConfUpdateRequest)(nil),            // 28: proto.DpaiAirflowConfUpdateRequest
	(*DpaiAirflowConfDeleteRequest)(nil),            // 29: proto.DpaiAirflowConfDeleteRequest
	(*DpaiAirflowConfDeleteByAirflowIdRequest)(nil), // 30: proto.DpaiAirflowConfDeleteByAirflowIdRequest
	(*DpaiAirflowConfDeleteResponse)(nil),           // 31: proto.DpaiAirflowConfDeleteResponse
	(*DpaiAirflowStorageProperties)(nil),            // 32: proto.DpaiAirflowStorageProperties
	(*DpaiAirflowPathProperties)(nil),               // 33: proto.DpaiAirflowPathProperties
	(*DpaiAirflowWebServerProperties)(nil),          // 34: proto.DpaiAirflowWebServerProperties
	(*DpaiAirflowSizeProperties)(nil),               // 35: proto.DpaiAirflowSizeProperties
	(*DpaiAirflowDeploymentMeta)(nil),               // 36: proto.DpaiAirflowDeploymentMeta
	(*DpaiAirflow)(nil),                             // 37: proto.DpaiAirflow
	(*DpaiAirflowCreateRequest)(nil),                // 38: proto.DpaiAirflowCreateRequest
	(*DpaiAirflowListRequest)(nil),                  // 39: proto.DpaiAirflowListRequest
	(*DpaiAirflowListResponse)(nil),                 // 40: proto.DpaiAirflowListResponse
	(*DpaiAirflowGetByIdRequest)(nil),               // 41: proto.DpaiAirflowGetByIdRequest
	(*DpaiAirflowGetByNameRequest)(nil),             // 42: proto.DpaiAirflowGetByNameRequest
	(*DpaiAirflowUpdateRequest)(nil),                // 43: proto.DpaiAirflowUpdateRequest
	(*DpaiAirflowDeleteRequest)(nil),                // 44: proto.DpaiAirflowDeleteRequest
	(*DpaiAirflowRestartRequest)(nil),               // 45: proto.DpaiAirflowRestartRequest
	(*DpaiAirflowResizeRequest)(nil),                // 46: proto.DpaiAirflowResizeRequest
	(*DpaiAirflowListUpgradeRequest)(nil),           // 47: proto.DpaiAirflowListUpgradeRequest
	(*DpaiAirflowUpgradeRequest)(nil),               // 48: proto.DpaiAirflowUpgradeRequest
	nil,                                             // 49: proto.DpaiAirflow.TagsEntry
	nil,                                             // 50: proto.DpaiAirflowCreateRequest.TagsEntry
	nil,                                             // 51: proto.DpaiAirflowUpdateRequest.TagsEntry
	(*DpaiMeta)(nil),                                // 52: proto.DpaiMeta
	(*DpaiImageReference)(nil),                      // 53: proto.DpaiImageReference
	(*DpaiChartReference)(nil),                      // 54: proto.DpaiChartReference
	(*DpaiDeploymentStatus)(nil),                    // 55: proto.DpaiDeploymentStatus
	(*DpaiDeploymentResponse)(nil),                  // 56: proto.DpaiDeploymentResponse
}
var file_dpai_airflow_proto_depIdxs = []int32{
	1,  // 0: proto.DpaiAirflowSize.airflowSizeWebserverProperties:type_name -> proto.DpaiAirflowSizeWebServerProperties
	2,  // 1: proto.DpaiAirflowSize.airflowSchedulerProperties:type_name -> proto.DpaiAirflowSchedulerProperties
	3,  // 2: proto.DpaiAirflowSize.airflowWorkerProperties:type_name -> proto.DpaiAirflowWorkerProperties
	4,  // 3: proto.DpaiAirflowSize.airflowTriggerProperties:type_name -> proto.DpaiAirflowTriggerProperties
	52, // 4: proto.DpaiAirflowSize.metadata:type_name -> proto.DpaiMeta
	1,  // 5: proto.DpaiAirflowSizeCreateRequest.airflowSizeWebserverProperties:type_name -> proto.DpaiAirflowSizeWebServerProperties
	2,  // 6: proto.DpaiAirflowSizeCreateRequest.airflowSchedulerProperties:type_name -> proto.DpaiAirflowSchedulerProperties
	3,  // 7: proto.DpaiAirflowSizeCreateRequest.airflowWorkerProperties:type_name -> proto.DpaiAirflowWorkerProperties
	4,  // 8: proto.DpaiAirflowSizeCreateRequest.airflowTriggerProperties:type_name -> proto.DpaiAirflowTriggerProperties
	0,  // 9: proto.DpaiAirflowSizeListResponse.data:type_name -> proto.DpaiAirflowSize
	1,  // 10: proto.DpaiAirflowSizeUpdateRequest.airflowSizeWebserverProperties:type_name -> proto.DpaiAirflowSizeWebServerProperties
	2,  // 11: proto.DpaiAirflowSizeUpdateRequest.airflowSchedulerProperties:type_name -> proto.DpaiAirflowSchedulerProperties
	3,  // 12: proto.DpaiAirflowSizeUpdateRequest.airflowWorkerProperties:type_name -> proto.DpaiAirflowWorkerProperties
	4,  // 13: proto.DpaiAirflowSizeUpdateRequest.airflowTriggerProperties:type_name -> proto.DpaiAirflowTriggerProperties
	14, // 14: proto.DpaiAirflowVersion.airflowVersionProperties:type_name -> proto.DpaiAirflowVersionProperties
	53, // 15: proto.DpaiAirflowVersion.imageReference:type_name -> proto.DpaiImageReference
	54, // 16: proto.DpaiAirflowVersion.chartReference:type_name -> proto.DpaiChartReference
	52, // 17: proto.DpaiAirflowVersion.metadata:type_name -> proto.DpaiMeta
	14, // 18: proto.DpaiAirflowVersionCreateRequest.airflowVersionProperties:type_name -> proto.DpaiAirflowVersionProperties
	53, // 19: proto.DpaiAirflowVersionCreateRequest.imageReference:type_name -> proto.DpaiImageReference
	54, // 20: proto.DpaiAirflowVersionCreateRequest.chartReference:type_name -> proto.DpaiChartReference
	13, // 21: proto.DpaiAirflowVersionListResponse.data:type_name -> proto.DpaiAirflowVersion
	53, // 22: proto.DpaiAirflowVersionUpdateRequest.imageReference:type_name -> proto.DpaiImageReference
	54, // 23: proto.DpaiAirflowVersionUpdateRequest.chartReference:type_name -> proto.DpaiChartReference
	52, // 24: proto.DpaiAirflowConf.metadata:type_name -> proto.DpaiMeta
	23, // 25: proto.DpaiAirflowConfListResponse.data:type_name -> proto.DpaiAirflowConf
	33, // 26: proto.DpaiAirflowStorageProperties.path:type_name -> proto.DpaiAirflowPathProperties
	55, // 27: proto.DpaiAirflowDeploymentMeta.deploymentStatus:type_name -> proto.DpaiDeploymentStatus
	49, // 28: proto.DpaiAirflow.tags:type_name -> proto.DpaiAirflow.TagsEntry
	32, // 29: proto.DpaiAirflow.storageProperties:type_name -> proto.DpaiAirflowStorageProperties
	34, // 30: proto.DpaiAirflow.webServerProperties:type_name -> proto.DpaiAirflowWebServerProperties
	35, // 31: proto.DpaiAirflow.sizeProperties:type_name -> proto.DpaiAirflowSizeProperties
	52, // 32: proto.DpaiAirflow.metadata:type_name -> proto.DpaiMeta
	36, // 33: proto.DpaiAirflow.deploymentMetadata:type_name -> proto.DpaiAirflowDeploymentMeta
	50, // 34: proto.DpaiAirflowCreateRequest.tags:type_name -> proto.DpaiAirflowCreateRequest.TagsEntry
	32, // 35: proto.DpaiAirflowCreateRequest.storageProperties:type_name -> proto.DpaiAirflowStorageProperties
	34, // 36: proto.DpaiAirflowCreateRequest.webServerProperties:type_name -> proto.DpaiAirflowWebServerProperties
	35, // 37: proto.DpaiAirflowCreateRequest.sizeProperties:type_name -> proto.DpaiAirflowSizeProperties
	37, // 38: proto.DpaiAirflowListResponse.data:type_name -> proto.DpaiAirflow
	51, // 39: proto.DpaiAirflowUpdateRequest.tags:type_name -> proto.DpaiAirflowUpdateRequest.TagsEntry
	5,  // 40: proto.DpaiAirflowSizeService.DpaiAirflowSizeCreate:input_type -> proto.DpaiAirflowSizeCreateRequest
	6,  // 41: proto.DpaiAirflowSizeService.DpaiAirflowSizeList:input_type -> proto.DpaiAirflowSizeListRequest
	8,  // 42: proto.DpaiAirflowSizeService.DpaiAirflowSizeGetById:input_type -> proto.DpaiAirflowSizeGetByIdRequest
	9,  // 43: proto.DpaiAirflowSizeService.DpaiAirflowSizeGetByName:input_type -> proto.DpaiAirflowSizeGetByNameRequest
	10, // 44: proto.DpaiAirflowSizeService.DpaiAirflowSizeUpdate:input_type -> proto.DpaiAirflowSizeUpdateRequest
	11, // 45: proto.DpaiAirflowSizeService.DpaiAirflowSizeDelete:input_type -> proto.DpaiAirflowSizeDeleteRequest
	15, // 46: proto.DpaiAirflowVersionService.DpaiAirflowVersionCreate:input_type -> proto.DpaiAirflowVersionCreateRequest
	16, // 47: proto.DpaiAirflowVersionService.DpaiAirflowVersionList:input_type -> proto.DpaiAirflowVersionListRequest
	18, // 48: proto.DpaiAirflowVersionService.DpaiAirflowVersionGetById:input_type -> proto.DpaiAirflowVersionGetByIdRequest
	19, // 49: proto.DpaiAirflowVersionService.DpaiAirflowVersionGetByName:input_type -> proto.DpaiAirflowVersionGetByNameRequest
	20, // 50: proto.DpaiAirflowVersionService.DpaiAirflowVersionUpdate:input_type -> proto.DpaiAirflowVersionUpdateRequest
	21, // 51: proto.DpaiAirflowVersionService.DpaiAirflowVersionDelete:input_type -> proto.DpaiAirflowVersionDeleteRequest
	24, // 52: proto.DpaiAirflowConfService.DpaiAirflowConfCreate:input_type -> proto.DpaiAirflowConfCreateRequest
	25, // 53: proto.DpaiAirflowConfService.DpaiAirflowConfList:input_type -> proto.DpaiAirflowConfListRequest
	27, // 54: proto.DpaiAirflowConfService.DpaiAirflowConfGetById:input_type -> proto.DpaiAirflowConfGetByIdRequest
	29, // 55: proto.DpaiAirflowConfService.DpaiAirflowConfDelete:input_type -> proto.DpaiAirflowConfDeleteRequest
	30, // 56: proto.DpaiAirflowConfService.DpaiAirflowConfDeleteByAirflowId:input_type -> proto.DpaiAirflowConfDeleteByAirflowIdRequest
	38, // 57: proto.DpaiAirflowService.DpaiAirflowCreate:input_type -> proto.DpaiAirflowCreateRequest
	39, // 58: proto.DpaiAirflowService.DpaiAirflowList:input_type -> proto.DpaiAirflowListRequest
	41, // 59: proto.DpaiAirflowService.DpaiAirflowGetById:input_type -> proto.DpaiAirflowGetByIdRequest
	42, // 60: proto.DpaiAirflowService.DpaiAirflowGetByName:input_type -> proto.DpaiAirflowGetByNameRequest
	43, // 61: proto.DpaiAirflowService.DpaiAirflowUpdate:input_type -> proto.DpaiAirflowUpdateRequest
	44, // 62: proto.DpaiAirflowService.DpaiAirflowDelete:input_type -> proto.DpaiAirflowDeleteRequest
	47, // 63: proto.DpaiAirflowService.DpaiAirflowListUpgrade:input_type -> proto.DpaiAirflowListUpgradeRequest
	48, // 64: proto.DpaiAirflowService.DpaiAirflowUpgrade:input_type -> proto.DpaiAirflowUpgradeRequest
	45, // 65: proto.DpaiAirflowService.DpaiAirflowRestart:input_type -> proto.DpaiAirflowRestartRequest
	46, // 66: proto.DpaiAirflowService.DpaiAirflowResize:input_type -> proto.DpaiAirflowResizeRequest
	0,  // 67: proto.DpaiAirflowSizeService.DpaiAirflowSizeCreate:output_type -> proto.DpaiAirflowSize
	7,  // 68: proto.DpaiAirflowSizeService.DpaiAirflowSizeList:output_type -> proto.DpaiAirflowSizeListResponse
	0,  // 69: proto.DpaiAirflowSizeService.DpaiAirflowSizeGetById:output_type -> proto.DpaiAirflowSize
	0,  // 70: proto.DpaiAirflowSizeService.DpaiAirflowSizeGetByName:output_type -> proto.DpaiAirflowSize
	0,  // 71: proto.DpaiAirflowSizeService.DpaiAirflowSizeUpdate:output_type -> proto.DpaiAirflowSize
	12, // 72: proto.DpaiAirflowSizeService.DpaiAirflowSizeDelete:output_type -> proto.DpaiAirflowSizeDeleteResponse
	13, // 73: proto.DpaiAirflowVersionService.DpaiAirflowVersionCreate:output_type -> proto.DpaiAirflowVersion
	17, // 74: proto.DpaiAirflowVersionService.DpaiAirflowVersionList:output_type -> proto.DpaiAirflowVersionListResponse
	13, // 75: proto.DpaiAirflowVersionService.DpaiAirflowVersionGetById:output_type -> proto.DpaiAirflowVersion
	13, // 76: proto.DpaiAirflowVersionService.DpaiAirflowVersionGetByName:output_type -> proto.DpaiAirflowVersion
	13, // 77: proto.DpaiAirflowVersionService.DpaiAirflowVersionUpdate:output_type -> proto.DpaiAirflowVersion
	22, // 78: proto.DpaiAirflowVersionService.DpaiAirflowVersionDelete:output_type -> proto.DpaiAirflowVersionDeleteResponse
	23, // 79: proto.DpaiAirflowConfService.DpaiAirflowConfCreate:output_type -> proto.DpaiAirflowConf
	26, // 80: proto.DpaiAirflowConfService.DpaiAirflowConfList:output_type -> proto.DpaiAirflowConfListResponse
	23, // 81: proto.DpaiAirflowConfService.DpaiAirflowConfGetById:output_type -> proto.DpaiAirflowConf
	31, // 82: proto.DpaiAirflowConfService.DpaiAirflowConfDelete:output_type -> proto.DpaiAirflowConfDeleteResponse
	31, // 83: proto.DpaiAirflowConfService.DpaiAirflowConfDeleteByAirflowId:output_type -> proto.DpaiAirflowConfDeleteResponse
	37, // 84: proto.DpaiAirflowService.DpaiAirflowCreate:output_type -> proto.DpaiAirflow
	40, // 85: proto.DpaiAirflowService.DpaiAirflowList:output_type -> proto.DpaiAirflowListResponse
	37, // 86: proto.DpaiAirflowService.DpaiAirflowGetById:output_type -> proto.DpaiAirflow
	37, // 87: proto.DpaiAirflowService.DpaiAirflowGetByName:output_type -> proto.DpaiAirflow
	37, // 88: proto.DpaiAirflowService.DpaiAirflowUpdate:output_type -> proto.DpaiAirflow
	56, // 89: proto.DpaiAirflowService.DpaiAirflowDelete:output_type -> proto.DpaiDeploymentResponse
	17, // 90: proto.DpaiAirflowService.DpaiAirflowListUpgrade:output_type -> proto.DpaiAirflowVersionListResponse
	56, // 91: proto.DpaiAirflowService.DpaiAirflowUpgrade:output_type -> proto.DpaiDeploymentResponse
	56, // 92: proto.DpaiAirflowService.DpaiAirflowRestart:output_type -> proto.DpaiDeploymentResponse
	56, // 93: proto.DpaiAirflowService.DpaiAirflowResize:output_type -> proto.DpaiDeploymentResponse
	67, // [67:94] is the sub-list for method output_type
	40, // [40:67] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_dpai_airflow_proto_init() }
func file_dpai_airflow_proto_init() {
	if File_dpai_airflow_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_dpai_deployment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dpai_airflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeWebServerProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSchedulerProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowWorkerProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowTriggerProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeGetByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeGetByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionGetByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionGetByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowVersionDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfGetByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfDeleteByAirflowIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowConfDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowStorageProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowPathProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowWebServerProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowSizeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowDeploymentMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowGetByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowGetByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowResizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowListUpgradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dpai_airflow_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpaiAirflowUpgradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dpai_airflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_dpai_airflow_proto_goTypes,
		DependencyIndexes: file_dpai_airflow_proto_depIdxs,
		MessageInfos:      file_dpai_airflow_proto_msgTypes,
	}.Build()
	File_dpai_airflow_proto = out.File
	file_dpai_airflow_proto_rawDesc = nil
	file_dpai_airflow_proto_goTypes = nil
	file_dpai_airflow_proto_depIdxs = nil
}
