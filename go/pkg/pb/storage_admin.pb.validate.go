// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage_admin.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StorageGetResourceUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageGetResourceUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageGetResourceUsageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StorageGetResourceUsageResponseMultiError, or nil if none found.
func (m *StorageGetResourceUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageGetResourceUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilesystemUsages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageGetResourceUsageResponseValidationError{
						field:  fmt.Sprintf("FilesystemUsages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageGetResourceUsageResponseValidationError{
						field:  fmt.Sprintf("FilesystemUsages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageGetResourceUsageResponseValidationError{
					field:  fmt.Sprintf("FilesystemUsages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBucketUsages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageGetResourceUsageResponseValidationError{
						field:  fmt.Sprintf("BucketUsages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageGetResourceUsageResponseValidationError{
						field:  fmt.Sprintf("BucketUsages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageGetResourceUsageResponseValidationError{
					field:  fmt.Sprintf("BucketUsages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageGetResourceUsageResponseMultiError(errors)
	}

	return nil
}

// StorageGetResourceUsageResponseMultiError is an error wrapping multiple
// validation errors returned by StorageGetResourceUsageResponse.ValidateAll()
// if the designated constraints aren't met.
type StorageGetResourceUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageGetResourceUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageGetResourceUsageResponseMultiError) AllErrors() []error { return m }

// StorageGetResourceUsageResponseValidationError is the validation error
// returned by StorageGetResourceUsageResponse.Validate if the designated
// constraints aren't met.
type StorageGetResourceUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageGetResourceUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageGetResourceUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageGetResourceUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageGetResourceUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageGetResourceUsageResponseValidationError) ErrorName() string {
	return "StorageGetResourceUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageGetResourceUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageGetResourceUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageGetResourceUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageGetResourceUsageResponseValidationError{}

// Validate checks the field values on StorageFilesystemUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageFilesystemUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageFilesystemUsageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StorageFilesystemUsageResponseMultiError, or nil if none found.
func (m *StorageFilesystemUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageFilesystemUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for CloudAccountId

	// no validation rules for AccountType

	// no validation rules for Email

	// no validation rules for OrgId

	// no validation rules for NumFilesystems

	// no validation rules for TotalProvisioned

	// no validation rules for ClusterScheduled

	// no validation rules for HasIksVolumes

	if len(errors) > 0 {
		return StorageFilesystemUsageResponseMultiError(errors)
	}

	return nil
}

// StorageFilesystemUsageResponseMultiError is an error wrapping multiple
// validation errors returned by StorageFilesystemUsageResponse.ValidateAll()
// if the designated constraints aren't met.
type StorageFilesystemUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageFilesystemUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageFilesystemUsageResponseMultiError) AllErrors() []error { return m }

// StorageFilesystemUsageResponseValidationError is the validation error
// returned by StorageFilesystemUsageResponse.Validate if the designated
// constraints aren't met.
type StorageFilesystemUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageFilesystemUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageFilesystemUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageFilesystemUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageFilesystemUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageFilesystemUsageResponseValidationError) ErrorName() string {
	return "StorageFilesystemUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageFilesystemUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageFilesystemUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageFilesystemUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageFilesystemUsageResponseValidationError{}

// Validate checks the field values on StorageBucketUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageBucketUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageBucketUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageBucketUsageResponseMultiError, or nil if none found.
func (m *StorageBucketUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageBucketUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for CloudAccountId

	// no validation rules for AccountType

	// no validation rules for Email

	// no validation rules for Buckets

	// no validation rules for UsedCapacity

	// no validation rules for BucketSize

	// no validation rules for ClusterScheduled

	if len(errors) > 0 {
		return StorageBucketUsageResponseMultiError(errors)
	}

	return nil
}

// StorageBucketUsageResponseMultiError is an error wrapping multiple
// validation errors returned by StorageBucketUsageResponse.ValidateAll() if
// the designated constraints aren't met.
type StorageBucketUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageBucketUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageBucketUsageResponseMultiError) AllErrors() []error { return m }

// StorageBucketUsageResponseValidationError is the validation error returned
// by StorageBucketUsageResponse.Validate if the designated constraints aren't met.
type StorageBucketUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageBucketUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageBucketUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageBucketUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageBucketUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageBucketUsageResponseValidationError) ErrorName() string {
	return "StorageBucketUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageBucketUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageBucketUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageBucketUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageBucketUsageResponseValidationError{}

// Validate checks the field values on StorageQuotas with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StorageQuotas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageQuotas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StorageQuotasMultiError, or
// nil if none found.
func (m *StorageQuotas) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageQuotas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDefaultQuotaSection() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageQuotasValidationError{
						field:  fmt.Sprintf("DefaultQuotaSection[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageQuotasValidationError{
						field:  fmt.Sprintf("DefaultQuotaSection[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageQuotasValidationError{
					field:  fmt.Sprintf("DefaultQuotaSection[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStorageQuotaByAccount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageQuotasValidationError{
						field:  fmt.Sprintf("StorageQuotaByAccount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageQuotasValidationError{
						field:  fmt.Sprintf("StorageQuotaByAccount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageQuotasValidationError{
					field:  fmt.Sprintf("StorageQuotaByAccount[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageQuotasMultiError(errors)
	}

	return nil
}

// StorageQuotasMultiError is an error wrapping multiple validation errors
// returned by StorageQuotas.ValidateAll() if the designated constraints
// aren't met.
type StorageQuotasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageQuotasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageQuotasMultiError) AllErrors() []error { return m }

// StorageQuotasValidationError is the validation error returned by
// StorageQuotas.Validate if the designated constraints aren't met.
type StorageQuotasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageQuotasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageQuotasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageQuotasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageQuotasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageQuotasValidationError) ErrorName() string { return "StorageQuotasValidationError" }

// Error satisfies the builtin error interface
func (e StorageQuotasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageQuotas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageQuotasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageQuotasValidationError{}

// Validate checks the field values on StorageQuotaByAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageQuotaByAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageQuotaByAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageQuotaByAccountMultiError, or nil if none found.
func (m *StorageQuotaByAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageQuotaByAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountType

	// no validation rules for CloudAccountId

	// no validation rules for Reason

	// no validation rules for FilesizeQuotaInTB

	// no validation rules for FilevolumesQuota

	// no validation rules for BucketsQuota

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return StorageQuotaByAccountMultiError(errors)
	}

	return nil
}

// StorageQuotaByAccountMultiError is an error wrapping multiple validation
// errors returned by StorageQuotaByAccount.ValidateAll() if the designated
// constraints aren't met.
type StorageQuotaByAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageQuotaByAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageQuotaByAccountMultiError) AllErrors() []error { return m }

// StorageQuotaByAccountValidationError is the validation error returned by
// StorageQuotaByAccount.Validate if the designated constraints aren't met.
type StorageQuotaByAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageQuotaByAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageQuotaByAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageQuotaByAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageQuotaByAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageQuotaByAccountValidationError) ErrorName() string {
	return "StorageQuotaByAccountValidationError"
}

// Error satisfies the builtin error interface
func (e StorageQuotaByAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageQuotaByAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageQuotaByAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageQuotaByAccountValidationError{}

// Validate checks the field values on DefaultQuotaSection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DefaultQuotaSection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DefaultQuotaSection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DefaultQuotaSectionMultiError, or nil if none found.
func (m *DefaultQuotaSection) ValidateAll() error {
	return m.validate(true)
}

func (m *DefaultQuotaSection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountType

	// no validation rules for FilesizeQuotaInTB

	// no validation rules for FilevolumesQuota

	// no validation rules for BucketsQuota

	if len(errors) > 0 {
		return DefaultQuotaSectionMultiError(errors)
	}

	return nil
}

// DefaultQuotaSectionMultiError is an error wrapping multiple validation
// errors returned by DefaultQuotaSection.ValidateAll() if the designated
// constraints aren't met.
type DefaultQuotaSectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultQuotaSectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultQuotaSectionMultiError) AllErrors() []error { return m }

// DefaultQuotaSectionValidationError is the validation error returned by
// DefaultQuotaSection.Validate if the designated constraints aren't met.
type DefaultQuotaSectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultQuotaSectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultQuotaSectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultQuotaSectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultQuotaSectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultQuotaSectionValidationError) ErrorName() string {
	return "DefaultQuotaSectionValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultQuotaSectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultQuotaSection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultQuotaSectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultQuotaSectionValidationError{}

// Validate checks the field values on InsertStorageQuotaByAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InsertStorageQuotaByAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertStorageQuotaByAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InsertStorageQuotaByAccountRequestMultiError, or nil if none found.
func (m *InsertStorageQuotaByAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertStorageQuotaByAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Reason

	// no validation rules for FilesizeQuotaInTB

	// no validation rules for FilevolumesQuota

	// no validation rules for BucketsQuota

	if len(errors) > 0 {
		return InsertStorageQuotaByAccountRequestMultiError(errors)
	}

	return nil
}

// InsertStorageQuotaByAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// InsertStorageQuotaByAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type InsertStorageQuotaByAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertStorageQuotaByAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertStorageQuotaByAccountRequestMultiError) AllErrors() []error { return m }

// InsertStorageQuotaByAccountRequestValidationError is the validation error
// returned by InsertStorageQuotaByAccountRequest.Validate if the designated
// constraints aren't met.
type InsertStorageQuotaByAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertStorageQuotaByAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertStorageQuotaByAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertStorageQuotaByAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertStorageQuotaByAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertStorageQuotaByAccountRequestValidationError) ErrorName() string {
	return "InsertStorageQuotaByAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertStorageQuotaByAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertStorageQuotaByAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertStorageQuotaByAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertStorageQuotaByAccountRequestValidationError{}

// Validate checks the field values on UpdateStorageQuotaByAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateStorageQuotaByAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStorageQuotaByAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateStorageQuotaByAccountRequestMultiError, or nil if none found.
func (m *UpdateStorageQuotaByAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStorageQuotaByAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Reason

	// no validation rules for FilesizeQuotaInTB

	// no validation rules for FilevolumesQuota

	// no validation rules for BucketsQuota

	if len(errors) > 0 {
		return UpdateStorageQuotaByAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateStorageQuotaByAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateStorageQuotaByAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStorageQuotaByAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStorageQuotaByAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStorageQuotaByAccountRequestMultiError) AllErrors() []error { return m }

// UpdateStorageQuotaByAccountRequestValidationError is the validation error
// returned by UpdateStorageQuotaByAccountRequest.Validate if the designated
// constraints aren't met.
type UpdateStorageQuotaByAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorageQuotaByAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorageQuotaByAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorageQuotaByAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorageQuotaByAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorageQuotaByAccountRequestValidationError) ErrorName() string {
	return "UpdateStorageQuotaByAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorageQuotaByAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorageQuotaByAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorageQuotaByAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorageQuotaByAccountRequestValidationError{}

// Validate checks the field values on DeleteStorageQuotaByAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteStorageQuotaByAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStorageQuotaByAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteStorageQuotaByAccountRequestMultiError, or nil if none found.
func (m *DeleteStorageQuotaByAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStorageQuotaByAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DeleteStorageQuotaByAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteStorageQuotaByAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteStorageQuotaByAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStorageQuotaByAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStorageQuotaByAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStorageQuotaByAccountRequestMultiError) AllErrors() []error { return m }

// DeleteStorageQuotaByAccountRequestValidationError is the validation error
// returned by DeleteStorageQuotaByAccountRequest.Validate if the designated
// constraints aren't met.
type DeleteStorageQuotaByAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStorageQuotaByAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStorageQuotaByAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStorageQuotaByAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStorageQuotaByAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStorageQuotaByAccountRequestValidationError) ErrorName() string {
	return "DeleteStorageQuotaByAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStorageQuotaByAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStorageQuotaByAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStorageQuotaByAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStorageQuotaByAccountRequestValidationError{}

// Validate checks the field values on GetStorageQuotaByAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStorageQuotaByAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStorageQuotaByAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStorageQuotaByAccountRequestMultiError, or nil if none found.
func (m *GetStorageQuotaByAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStorageQuotaByAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return GetStorageQuotaByAccountRequestMultiError(errors)
	}

	return nil
}

// GetStorageQuotaByAccountRequestMultiError is an error wrapping multiple
// validation errors returned by GetStorageQuotaByAccountRequest.ValidateAll()
// if the designated constraints aren't met.
type GetStorageQuotaByAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStorageQuotaByAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStorageQuotaByAccountRequestMultiError) AllErrors() []error { return m }

// GetStorageQuotaByAccountRequestValidationError is the validation error
// returned by GetStorageQuotaByAccountRequest.Validate if the designated
// constraints aren't met.
type GetStorageQuotaByAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStorageQuotaByAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStorageQuotaByAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStorageQuotaByAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStorageQuotaByAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStorageQuotaByAccountRequestValidationError) ErrorName() string {
	return "GetStorageQuotaByAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStorageQuotaByAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStorageQuotaByAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStorageQuotaByAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStorageQuotaByAccountRequestValidationError{}

// Validate checks the field values on StorageQuotasByAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageQuotasByAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageQuotasByAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageQuotasByAccountMultiError, or nil if none found.
func (m *StorageQuotasByAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageQuotasByAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefaultQuota()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageQuotasByAccountValidationError{
					field:  "DefaultQuota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageQuotasByAccountValidationError{
					field:  "DefaultQuota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageQuotasByAccountValidationError{
				field:  "DefaultQuota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedQuota()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageQuotasByAccountValidationError{
					field:  "UpdatedQuota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageQuotasByAccountValidationError{
					field:  "UpdatedQuota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageQuotasByAccountValidationError{
				field:  "UpdatedQuota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StorageQuotasByAccountMultiError(errors)
	}

	return nil
}

// StorageQuotasByAccountMultiError is an error wrapping multiple validation
// errors returned by StorageQuotasByAccount.ValidateAll() if the designated
// constraints aren't met.
type StorageQuotasByAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageQuotasByAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageQuotasByAccountMultiError) AllErrors() []error { return m }

// StorageQuotasByAccountValidationError is the validation error returned by
// StorageQuotasByAccount.Validate if the designated constraints aren't met.
type StorageQuotasByAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageQuotasByAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageQuotasByAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageQuotasByAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageQuotasByAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageQuotasByAccountValidationError) ErrorName() string {
	return "StorageQuotasByAccountValidationError"
}

// Error satisfies the builtin error interface
func (e StorageQuotasByAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageQuotasByAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageQuotasByAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageQuotasByAccountValidationError{}
