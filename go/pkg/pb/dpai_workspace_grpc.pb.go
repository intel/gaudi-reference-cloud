// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dpai_workspace.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DpaiWorkspaceServiceClient is the client API for DpaiWorkspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiWorkspaceServiceClient interface {
	// Create new DPAI Workspace
	DpaiWorkspaceCreate(ctx context.Context, in *DpaiWorkspaceCreateRequest, opts ...grpc.CallOption) (*DpaiWorkspace, error)
	// List all the DPAI workspaces in the given cloud account. Supports wildcard filter on name.
	DpaiWorkspaceList(ctx context.Context, in *DpaiWorkspaceListRequest, opts ...grpc.CallOption) (*DpaiWorkspaceListResponse, error)
	// Get a DPAI Workspace by ID
	DpaiWorkspaceGet(ctx context.Context, in *DpaiWorkspaceGetRequest, opts ...grpc.CallOption) (*DpaiWorkspace, error)
	// Update the DPAI workspace metadata.
	DpaiWorkspaceUpdate(ctx context.Context, in *DpaiWorkspaceUpdateRequest, opts ...grpc.CallOption) (*DpaiWorkspace, error)
	// Delete the DPAI workspace.
	DpaiWorkspaceDelete(ctx context.Context, in *DpaiWorkspaceDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
}

type dpaiWorkspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiWorkspaceServiceClient(cc grpc.ClientConnInterface) DpaiWorkspaceServiceClient {
	return &dpaiWorkspaceServiceClient{cc}
}

func (c *dpaiWorkspaceServiceClient) DpaiWorkspaceCreate(ctx context.Context, in *DpaiWorkspaceCreateRequest, opts ...grpc.CallOption) (*DpaiWorkspace, error) {
	out := new(DpaiWorkspace)
	err := c.cc.Invoke(ctx, "/proto.DpaiWorkspaceService/DpaiWorkspaceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiWorkspaceServiceClient) DpaiWorkspaceList(ctx context.Context, in *DpaiWorkspaceListRequest, opts ...grpc.CallOption) (*DpaiWorkspaceListResponse, error) {
	out := new(DpaiWorkspaceListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiWorkspaceService/DpaiWorkspaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiWorkspaceServiceClient) DpaiWorkspaceGet(ctx context.Context, in *DpaiWorkspaceGetRequest, opts ...grpc.CallOption) (*DpaiWorkspace, error) {
	out := new(DpaiWorkspace)
	err := c.cc.Invoke(ctx, "/proto.DpaiWorkspaceService/DpaiWorkspaceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiWorkspaceServiceClient) DpaiWorkspaceUpdate(ctx context.Context, in *DpaiWorkspaceUpdateRequest, opts ...grpc.CallOption) (*DpaiWorkspace, error) {
	out := new(DpaiWorkspace)
	err := c.cc.Invoke(ctx, "/proto.DpaiWorkspaceService/DpaiWorkspaceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiWorkspaceServiceClient) DpaiWorkspaceDelete(ctx context.Context, in *DpaiWorkspaceDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiWorkspaceService/DpaiWorkspaceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiWorkspaceServiceServer is the server API for DpaiWorkspaceService service.
// All implementations must embed UnimplementedDpaiWorkspaceServiceServer
// for forward compatibility
type DpaiWorkspaceServiceServer interface {
	// Create new DPAI Workspace
	DpaiWorkspaceCreate(context.Context, *DpaiWorkspaceCreateRequest) (*DpaiWorkspace, error)
	// List all the DPAI workspaces in the given cloud account. Supports wildcard filter on name.
	DpaiWorkspaceList(context.Context, *DpaiWorkspaceListRequest) (*DpaiWorkspaceListResponse, error)
	// Get a DPAI Workspace by ID
	DpaiWorkspaceGet(context.Context, *DpaiWorkspaceGetRequest) (*DpaiWorkspace, error)
	// Update the DPAI workspace metadata.
	DpaiWorkspaceUpdate(context.Context, *DpaiWorkspaceUpdateRequest) (*DpaiWorkspace, error)
	// Delete the DPAI workspace.
	DpaiWorkspaceDelete(context.Context, *DpaiWorkspaceDeleteRequest) (*DpaiDeploymentResponse, error)
	mustEmbedUnimplementedDpaiWorkspaceServiceServer()
}

// UnimplementedDpaiWorkspaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiWorkspaceServiceServer struct {
}

func (UnimplementedDpaiWorkspaceServiceServer) DpaiWorkspaceCreate(context.Context, *DpaiWorkspaceCreateRequest) (*DpaiWorkspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiWorkspaceCreate not implemented")
}
func (UnimplementedDpaiWorkspaceServiceServer) DpaiWorkspaceList(context.Context, *DpaiWorkspaceListRequest) (*DpaiWorkspaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiWorkspaceList not implemented")
}
func (UnimplementedDpaiWorkspaceServiceServer) DpaiWorkspaceGet(context.Context, *DpaiWorkspaceGetRequest) (*DpaiWorkspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiWorkspaceGet not implemented")
}
func (UnimplementedDpaiWorkspaceServiceServer) DpaiWorkspaceUpdate(context.Context, *DpaiWorkspaceUpdateRequest) (*DpaiWorkspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiWorkspaceUpdate not implemented")
}
func (UnimplementedDpaiWorkspaceServiceServer) DpaiWorkspaceDelete(context.Context, *DpaiWorkspaceDeleteRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiWorkspaceDelete not implemented")
}
func (UnimplementedDpaiWorkspaceServiceServer) mustEmbedUnimplementedDpaiWorkspaceServiceServer() {}

// UnsafeDpaiWorkspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiWorkspaceServiceServer will
// result in compilation errors.
type UnsafeDpaiWorkspaceServiceServer interface {
	mustEmbedUnimplementedDpaiWorkspaceServiceServer()
}

func RegisterDpaiWorkspaceServiceServer(s grpc.ServiceRegistrar, srv DpaiWorkspaceServiceServer) {
	s.RegisterService(&DpaiWorkspaceService_ServiceDesc, srv)
}

func _DpaiWorkspaceService_DpaiWorkspaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiWorkspaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiWorkspaceService/DpaiWorkspaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceCreate(ctx, req.(*DpaiWorkspaceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiWorkspaceService_DpaiWorkspaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiWorkspaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiWorkspaceService/DpaiWorkspaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceList(ctx, req.(*DpaiWorkspaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiWorkspaceService_DpaiWorkspaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiWorkspaceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiWorkspaceService/DpaiWorkspaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceGet(ctx, req.(*DpaiWorkspaceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiWorkspaceService_DpaiWorkspaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiWorkspaceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiWorkspaceService/DpaiWorkspaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceUpdate(ctx, req.(*DpaiWorkspaceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiWorkspaceService_DpaiWorkspaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiWorkspaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiWorkspaceService/DpaiWorkspaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiWorkspaceServiceServer).DpaiWorkspaceDelete(ctx, req.(*DpaiWorkspaceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiWorkspaceService_ServiceDesc is the grpc.ServiceDesc for DpaiWorkspaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiWorkspaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiWorkspaceService",
	HandlerType: (*DpaiWorkspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiWorkspaceCreate",
			Handler:    _DpaiWorkspaceService_DpaiWorkspaceCreate_Handler,
		},
		{
			MethodName: "DpaiWorkspaceList",
			Handler:    _DpaiWorkspaceService_DpaiWorkspaceList_Handler,
		},
		{
			MethodName: "DpaiWorkspaceGet",
			Handler:    _DpaiWorkspaceService_DpaiWorkspaceGet_Handler,
		},
		{
			MethodName: "DpaiWorkspaceUpdate",
			Handler:    _DpaiWorkspaceService_DpaiWorkspaceUpdate_Handler,
		},
		{
			MethodName: "DpaiWorkspaceDelete",
			Handler:    _DpaiWorkspaceService_DpaiWorkspaceDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_workspace.proto",
}
