// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: cloudaccount-enroll.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudAccountEnrollServiceClient is the client API for CloudAccountEnrollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountEnrollServiceClient interface {
	// Enroll creates a cloud account and a billing account for a new user.
	// For premium users, Enroll checks for billing options or cloud credits.
	// CloudAccountEnrollResponse.Action tells the caller what to do next to
	// move the enrollment process further.
	Enroll(ctx context.Context, in *CloudAccountEnrollRequest, opts ...grpc.CallOption) (*CloudAccountEnrollResponse, error)
	Upgrade(ctx context.Context, in *CloudAccountUpgradeRequest, opts ...grpc.CallOption) (*CloudAccountUpgradeResponse, error)
	UpgradeWithCreditCard(ctx context.Context, in *CloudAccountUpgradeWithCreditCardRequest, opts ...grpc.CallOption) (*CloudAccountUpgradeResponse, error)
}

type cloudAccountEnrollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountEnrollServiceClient(cc grpc.ClientConnInterface) CloudAccountEnrollServiceClient {
	return &cloudAccountEnrollServiceClient{cc}
}

func (c *cloudAccountEnrollServiceClient) Enroll(ctx context.Context, in *CloudAccountEnrollRequest, opts ...grpc.CallOption) (*CloudAccountEnrollResponse, error) {
	out := new(CloudAccountEnrollResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountEnrollService/Enroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountEnrollServiceClient) Upgrade(ctx context.Context, in *CloudAccountUpgradeRequest, opts ...grpc.CallOption) (*CloudAccountUpgradeResponse, error) {
	out := new(CloudAccountUpgradeResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountEnrollService/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountEnrollServiceClient) UpgradeWithCreditCard(ctx context.Context, in *CloudAccountUpgradeWithCreditCardRequest, opts ...grpc.CallOption) (*CloudAccountUpgradeResponse, error) {
	out := new(CloudAccountUpgradeResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudAccountEnrollService/UpgradeWithCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountEnrollServiceServer is the server API for CloudAccountEnrollService service.
// All implementations must embed UnimplementedCloudAccountEnrollServiceServer
// for forward compatibility
type CloudAccountEnrollServiceServer interface {
	// Enroll creates a cloud account and a billing account for a new user.
	// For premium users, Enroll checks for billing options or cloud credits.
	// CloudAccountEnrollResponse.Action tells the caller what to do next to
	// move the enrollment process further.
	Enroll(context.Context, *CloudAccountEnrollRequest) (*CloudAccountEnrollResponse, error)
	Upgrade(context.Context, *CloudAccountUpgradeRequest) (*CloudAccountUpgradeResponse, error)
	UpgradeWithCreditCard(context.Context, *CloudAccountUpgradeWithCreditCardRequest) (*CloudAccountUpgradeResponse, error)
	mustEmbedUnimplementedCloudAccountEnrollServiceServer()
}

// UnimplementedCloudAccountEnrollServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudAccountEnrollServiceServer struct {
}

func (UnimplementedCloudAccountEnrollServiceServer) Enroll(context.Context, *CloudAccountEnrollRequest) (*CloudAccountEnrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (UnimplementedCloudAccountEnrollServiceServer) Upgrade(context.Context, *CloudAccountUpgradeRequest) (*CloudAccountUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedCloudAccountEnrollServiceServer) UpgradeWithCreditCard(context.Context, *CloudAccountUpgradeWithCreditCardRequest) (*CloudAccountUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeWithCreditCard not implemented")
}
func (UnimplementedCloudAccountEnrollServiceServer) mustEmbedUnimplementedCloudAccountEnrollServiceServer() {
}

// UnsafeCloudAccountEnrollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountEnrollServiceServer will
// result in compilation errors.
type UnsafeCloudAccountEnrollServiceServer interface {
	mustEmbedUnimplementedCloudAccountEnrollServiceServer()
}

func RegisterCloudAccountEnrollServiceServer(s grpc.ServiceRegistrar, srv CloudAccountEnrollServiceServer) {
	s.RegisterService(&CloudAccountEnrollService_ServiceDesc, srv)
}

func _CloudAccountEnrollService_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountEnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountEnrollServiceServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountEnrollService/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountEnrollServiceServer).Enroll(ctx, req.(*CloudAccountEnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountEnrollService_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountEnrollServiceServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountEnrollService/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountEnrollServiceServer).Upgrade(ctx, req.(*CloudAccountUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountEnrollService_UpgradeWithCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountUpgradeWithCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountEnrollServiceServer).UpgradeWithCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudAccountEnrollService/UpgradeWithCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountEnrollServiceServer).UpgradeWithCreditCard(ctx, req.(*CloudAccountUpgradeWithCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountEnrollService_ServiceDesc is the grpc.ServiceDesc for CloudAccountEnrollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountEnrollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudAccountEnrollService",
	HandlerType: (*CloudAccountEnrollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enroll",
			Handler:    _CloudAccountEnrollService_Enroll_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _CloudAccountEnrollService_Upgrade_Handler,
		},
		{
			MethodName: "UpgradeWithCreditCard",
			Handler:    _CloudAccountEnrollService_UpgradeWithCreditCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudaccount-enroll.proto",
}
