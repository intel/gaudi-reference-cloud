// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: iks.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IksClient is the client API for Iks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IksClient interface {
	// CLUSTERS
	CreateNewCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error)
	GetClusters(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*ClustersResponse, error)
	GetCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterResponseForm, error)
	PutCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error)
	UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*ClusterStatus, error)
	EnableClusterStorage(ctx context.Context, in *ClusterStorageRequest, opts ...grpc.CallOption) (*ClusterStorageStatus, error)
	UpdateClusterStorage(ctx context.Context, in *ClusterStorageUpdateRequest, opts ...grpc.CallOption) (*ClusterStorageStatus, error)
	DeleteCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClusterStatus(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterStatus, error)
	// NODEGROUPS
	CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupResponseForm, error)
	GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*NodeGroupResponse, error)
	GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupResponseForm, error)
	PutNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*Nodegroupstatus, error)
	UpgradeNodeGroup(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*Nodegroupstatus, error)
	DeleteNodeGroup(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNodeGroupStatus(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*Nodegroupstatus, error)
	DeleteNodeGroupInstance(ctx context.Context, in *DeleteNodeGroupInstanceRequest, opts ...grpc.CallOption) (*Nodegroupstatus, error)
	// METADATA
	GetPublicK8SVersions(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllK8SversionResponse, error)
	GetPublicRuntimes(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllRuntimeResponse, error)
	GetPublicInstanceTypes(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllInstancetypeResponse, error)
	// Deprecated: Use RetrieveKubeConfig instead.
	GetKubeConfig(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetKubeconfigResponse, error)
	RetrieveKubeConfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*GetKubeconfigResponse, error)
	// Load Balancer
	CreateNewVip(ctx context.Context, in *VipCreateRequest, opts ...grpc.CallOption) (*VipResponse, error)
	GetVips(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetVipsResponse, error)
	GetVip(ctx context.Context, in *VipId, opts ...grpc.CallOption) (*GetVipResponse, error)
	DeleteVip(ctx context.Context, in *VipId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFirewallRule(ctx context.Context, in *UpdateFirewallRuleRequest, opts ...grpc.CallOption) (*FirewallRuleResponse, error)
	GetFirewallRule(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetFirewallRuleResponse, error)
	DeleteFirewallRule(ctx context.Context, in *DeleteFirewallRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iksClient struct {
	cc grpc.ClientConnInterface
}

func NewIksClient(cc grpc.ClientConnInterface) IksClient {
	return &iksClient{cc}
}

func (c *iksClient) CreateNewCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error) {
	out := new(ClusterCreateResponseForm)
	err := c.cc.Invoke(ctx, "/proto.Iks/CreateNewCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetClusters(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*ClustersResponse, error) {
	out := new(ClustersResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterResponseForm, error) {
	out := new(ClusterResponseForm)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) PutCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error) {
	out := new(ClusterCreateResponseForm)
	err := c.cc.Invoke(ctx, "/proto.Iks/PutCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*ClusterStatus, error) {
	out := new(ClusterStatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/UpgradeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) EnableClusterStorage(ctx context.Context, in *ClusterStorageRequest, opts ...grpc.CallOption) (*ClusterStorageStatus, error) {
	out := new(ClusterStorageStatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/EnableClusterStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) UpdateClusterStorage(ctx context.Context, in *ClusterStorageUpdateRequest, opts ...grpc.CallOption) (*ClusterStorageStatus, error) {
	out := new(ClusterStorageStatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/UpdateClusterStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) DeleteCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Iks/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetClusterStatus(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterStatus, error) {
	out := new(ClusterStatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupResponseForm, error) {
	out := new(NodeGroupResponseForm)
	err := c.cc.Invoke(ctx, "/proto.Iks/CreateNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*NodeGroupResponse, error) {
	out := new(NodeGroupResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetNodeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupResponseForm, error) {
	out := new(NodeGroupResponseForm)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) PutNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	out := new(Nodegroupstatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/PutNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) UpgradeNodeGroup(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	out := new(Nodegroupstatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/UpgradeNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) DeleteNodeGroup(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Iks/DeleteNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetNodeGroupStatus(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	out := new(Nodegroupstatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetNodeGroupStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) DeleteNodeGroupInstance(ctx context.Context, in *DeleteNodeGroupInstanceRequest, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	out := new(Nodegroupstatus)
	err := c.cc.Invoke(ctx, "/proto.Iks/DeleteNodeGroupInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetPublicK8SVersions(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllK8SversionResponse, error) {
	out := new(GetPublicAllK8SversionResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetPublicK8sVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetPublicRuntimes(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllRuntimeResponse, error) {
	out := new(GetPublicAllRuntimeResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetPublicRuntimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetPublicInstanceTypes(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllInstancetypeResponse, error) {
	out := new(GetPublicAllInstancetypeResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetPublicInstanceTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetKubeConfig(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetKubeconfigResponse, error) {
	out := new(GetKubeconfigResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetKubeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) RetrieveKubeConfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*GetKubeconfigResponse, error) {
	out := new(GetKubeconfigResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/RetrieveKubeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) CreateNewVip(ctx context.Context, in *VipCreateRequest, opts ...grpc.CallOption) (*VipResponse, error) {
	out := new(VipResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/CreateNewVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetVips(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetVipsResponse, error) {
	out := new(GetVipsResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetVips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetVip(ctx context.Context, in *VipId, opts ...grpc.CallOption) (*GetVipResponse, error) {
	out := new(GetVipResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) DeleteVip(ctx context.Context, in *VipId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Iks/DeleteVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) UpdateFirewallRule(ctx context.Context, in *UpdateFirewallRuleRequest, opts ...grpc.CallOption) (*FirewallRuleResponse, error) {
	out := new(FirewallRuleResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/UpdateFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) GetFirewallRule(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetFirewallRuleResponse, error) {
	out := new(GetFirewallRuleResponse)
	err := c.cc.Invoke(ctx, "/proto.Iks/GetFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksClient) DeleteFirewallRule(ctx context.Context, in *DeleteFirewallRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Iks/DeleteFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IksServer is the server API for Iks service.
// All implementations must embed UnimplementedIksServer
// for forward compatibility
type IksServer interface {
	// CLUSTERS
	CreateNewCluster(context.Context, *ClusterRequest) (*ClusterCreateResponseForm, error)
	GetClusters(context.Context, *IksCloudAccountId) (*ClustersResponse, error)
	GetCluster(context.Context, *ClusterID) (*ClusterResponseForm, error)
	PutCluster(context.Context, *UpdateClusterRequest) (*ClusterCreateResponseForm, error)
	UpgradeCluster(context.Context, *UpgradeClusterRequest) (*ClusterStatus, error)
	EnableClusterStorage(context.Context, *ClusterStorageRequest) (*ClusterStorageStatus, error)
	UpdateClusterStorage(context.Context, *ClusterStorageUpdateRequest) (*ClusterStorageStatus, error)
	DeleteCluster(context.Context, *ClusterID) (*emptypb.Empty, error)
	GetClusterStatus(context.Context, *ClusterID) (*ClusterStatus, error)
	// NODEGROUPS
	CreateNodeGroup(context.Context, *CreateNodeGroupRequest) (*NodeGroupResponseForm, error)
	GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*NodeGroupResponse, error)
	GetNodeGroup(context.Context, *GetNodeGroupRequest) (*NodeGroupResponseForm, error)
	PutNodeGroup(context.Context, *UpdateNodeGroupRequest) (*Nodegroupstatus, error)
	UpgradeNodeGroup(context.Context, *NodeGroupid) (*Nodegroupstatus, error)
	DeleteNodeGroup(context.Context, *NodeGroupid) (*emptypb.Empty, error)
	GetNodeGroupStatus(context.Context, *NodeGroupid) (*Nodegroupstatus, error)
	DeleteNodeGroupInstance(context.Context, *DeleteNodeGroupInstanceRequest) (*Nodegroupstatus, error)
	// METADATA
	GetPublicK8SVersions(context.Context, *IksCloudAccountId) (*GetPublicAllK8SversionResponse, error)
	GetPublicRuntimes(context.Context, *IksCloudAccountId) (*GetPublicAllRuntimeResponse, error)
	GetPublicInstanceTypes(context.Context, *IksCloudAccountId) (*GetPublicAllInstancetypeResponse, error)
	// Deprecated: Use RetrieveKubeConfig instead.
	GetKubeConfig(context.Context, *ClusterID) (*GetKubeconfigResponse, error)
	RetrieveKubeConfig(context.Context, *GetKubeconfigRequest) (*GetKubeconfigResponse, error)
	// Load Balancer
	CreateNewVip(context.Context, *VipCreateRequest) (*VipResponse, error)
	GetVips(context.Context, *ClusterID) (*GetVipsResponse, error)
	GetVip(context.Context, *VipId) (*GetVipResponse, error)
	DeleteVip(context.Context, *VipId) (*emptypb.Empty, error)
	UpdateFirewallRule(context.Context, *UpdateFirewallRuleRequest) (*FirewallRuleResponse, error)
	GetFirewallRule(context.Context, *ClusterID) (*GetFirewallRuleResponse, error)
	DeleteFirewallRule(context.Context, *DeleteFirewallRuleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIksServer()
}

// UnimplementedIksServer must be embedded to have forward compatible implementations.
type UnimplementedIksServer struct {
}

func (UnimplementedIksServer) CreateNewCluster(context.Context, *ClusterRequest) (*ClusterCreateResponseForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCluster not implemented")
}
func (UnimplementedIksServer) GetClusters(context.Context, *IksCloudAccountId) (*ClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedIksServer) GetCluster(context.Context, *ClusterID) (*ClusterResponseForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedIksServer) PutCluster(context.Context, *UpdateClusterRequest) (*ClusterCreateResponseForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCluster not implemented")
}
func (UnimplementedIksServer) UpgradeCluster(context.Context, *UpgradeClusterRequest) (*ClusterStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCluster not implemented")
}
func (UnimplementedIksServer) EnableClusterStorage(context.Context, *ClusterStorageRequest) (*ClusterStorageStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableClusterStorage not implemented")
}
func (UnimplementedIksServer) UpdateClusterStorage(context.Context, *ClusterStorageUpdateRequest) (*ClusterStorageStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterStorage not implemented")
}
func (UnimplementedIksServer) DeleteCluster(context.Context, *ClusterID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedIksServer) GetClusterStatus(context.Context, *ClusterID) (*ClusterStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStatus not implemented")
}
func (UnimplementedIksServer) CreateNodeGroup(context.Context, *CreateNodeGroupRequest) (*NodeGroupResponseForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeGroup not implemented")
}
func (UnimplementedIksServer) GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*NodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroups not implemented")
}
func (UnimplementedIksServer) GetNodeGroup(context.Context, *GetNodeGroupRequest) (*NodeGroupResponseForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroup not implemented")
}
func (UnimplementedIksServer) PutNodeGroup(context.Context, *UpdateNodeGroupRequest) (*Nodegroupstatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutNodeGroup not implemented")
}
func (UnimplementedIksServer) UpgradeNodeGroup(context.Context, *NodeGroupid) (*Nodegroupstatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeNodeGroup not implemented")
}
func (UnimplementedIksServer) DeleteNodeGroup(context.Context, *NodeGroupid) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeGroup not implemented")
}
func (UnimplementedIksServer) GetNodeGroupStatus(context.Context, *NodeGroupid) (*Nodegroupstatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroupStatus not implemented")
}
func (UnimplementedIksServer) DeleteNodeGroupInstance(context.Context, *DeleteNodeGroupInstanceRequest) (*Nodegroupstatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeGroupInstance not implemented")
}
func (UnimplementedIksServer) GetPublicK8SVersions(context.Context, *IksCloudAccountId) (*GetPublicAllK8SversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicK8SVersions not implemented")
}
func (UnimplementedIksServer) GetPublicRuntimes(context.Context, *IksCloudAccountId) (*GetPublicAllRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicRuntimes not implemented")
}
func (UnimplementedIksServer) GetPublicInstanceTypes(context.Context, *IksCloudAccountId) (*GetPublicAllInstancetypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicInstanceTypes not implemented")
}
func (UnimplementedIksServer) GetKubeConfig(context.Context, *ClusterID) (*GetKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeConfig not implemented")
}
func (UnimplementedIksServer) RetrieveKubeConfig(context.Context, *GetKubeconfigRequest) (*GetKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKubeConfig not implemented")
}
func (UnimplementedIksServer) CreateNewVip(context.Context, *VipCreateRequest) (*VipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewVip not implemented")
}
func (UnimplementedIksServer) GetVips(context.Context, *ClusterID) (*GetVipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVips not implemented")
}
func (UnimplementedIksServer) GetVip(context.Context, *VipId) (*GetVipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVip not implemented")
}
func (UnimplementedIksServer) DeleteVip(context.Context, *VipId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVip not implemented")
}
func (UnimplementedIksServer) UpdateFirewallRule(context.Context, *UpdateFirewallRuleRequest) (*FirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirewallRule not implemented")
}
func (UnimplementedIksServer) GetFirewallRule(context.Context, *ClusterID) (*GetFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirewallRule not implemented")
}
func (UnimplementedIksServer) DeleteFirewallRule(context.Context, *DeleteFirewallRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirewallRule not implemented")
}
func (UnimplementedIksServer) mustEmbedUnimplementedIksServer() {}

// UnsafeIksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IksServer will
// result in compilation errors.
type UnsafeIksServer interface {
	mustEmbedUnimplementedIksServer()
}

func RegisterIksServer(s grpc.ServiceRegistrar, srv IksServer) {
	s.RegisterService(&Iks_ServiceDesc, srv)
}

func _Iks_CreateNewCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).CreateNewCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/CreateNewCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).CreateNewCluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IksCloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetClusters(ctx, req.(*IksCloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetCluster(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_PutCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).PutCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/PutCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).PutCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_UpgradeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).UpgradeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/UpgradeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).UpgradeCluster(ctx, req.(*UpgradeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_EnableClusterStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).EnableClusterStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/EnableClusterStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).EnableClusterStorage(ctx, req.(*ClusterStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_UpdateClusterStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStorageUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).UpdateClusterStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/UpdateClusterStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).UpdateClusterStorage(ctx, req.(*ClusterStorageUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).DeleteCluster(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetClusterStatus(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_CreateNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).CreateNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/CreateNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).CreateNodeGroup(ctx, req.(*CreateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetNodeGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetNodeGroups(ctx, req.(*GetNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetNodeGroup(ctx, req.(*GetNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_PutNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).PutNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/PutNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).PutNodeGroup(ctx, req.(*UpdateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_UpgradeNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).UpgradeNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/UpgradeNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).UpgradeNodeGroup(ctx, req.(*NodeGroupid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_DeleteNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).DeleteNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/DeleteNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).DeleteNodeGroup(ctx, req.(*NodeGroupid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetNodeGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetNodeGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetNodeGroupStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetNodeGroupStatus(ctx, req.(*NodeGroupid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_DeleteNodeGroupInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeGroupInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).DeleteNodeGroupInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/DeleteNodeGroupInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).DeleteNodeGroupInstance(ctx, req.(*DeleteNodeGroupInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetPublicK8SVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IksCloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetPublicK8SVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetPublicK8sVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetPublicK8SVersions(ctx, req.(*IksCloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetPublicRuntimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IksCloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetPublicRuntimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetPublicRuntimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetPublicRuntimes(ctx, req.(*IksCloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetPublicInstanceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IksCloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetPublicInstanceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetPublicInstanceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetPublicInstanceTypes(ctx, req.(*IksCloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetKubeConfig(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_RetrieveKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).RetrieveKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/RetrieveKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).RetrieveKubeConfig(ctx, req.(*GetKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_CreateNewVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).CreateNewVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/CreateNewVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).CreateNewVip(ctx, req.(*VipCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetVips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetVips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetVips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetVips(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetVip(ctx, req.(*VipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_DeleteVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).DeleteVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/DeleteVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).DeleteVip(ctx, req.(*VipId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_UpdateFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).UpdateFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/UpdateFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).UpdateFirewallRule(ctx, req.(*UpdateFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_GetFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).GetFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/GetFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).GetFirewallRule(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iks_DeleteFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksServer).DeleteFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Iks/DeleteFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksServer).DeleteFirewallRule(ctx, req.(*DeleteFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Iks_ServiceDesc is the grpc.ServiceDesc for Iks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Iks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Iks",
	HandlerType: (*IksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewCluster",
			Handler:    _Iks_CreateNewCluster_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _Iks_GetClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Iks_GetCluster_Handler,
		},
		{
			MethodName: "PutCluster",
			Handler:    _Iks_PutCluster_Handler,
		},
		{
			MethodName: "UpgradeCluster",
			Handler:    _Iks_UpgradeCluster_Handler,
		},
		{
			MethodName: "EnableClusterStorage",
			Handler:    _Iks_EnableClusterStorage_Handler,
		},
		{
			MethodName: "UpdateClusterStorage",
			Handler:    _Iks_UpdateClusterStorage_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Iks_DeleteCluster_Handler,
		},
		{
			MethodName: "GetClusterStatus",
			Handler:    _Iks_GetClusterStatus_Handler,
		},
		{
			MethodName: "CreateNodeGroup",
			Handler:    _Iks_CreateNodeGroup_Handler,
		},
		{
			MethodName: "GetNodeGroups",
			Handler:    _Iks_GetNodeGroups_Handler,
		},
		{
			MethodName: "GetNodeGroup",
			Handler:    _Iks_GetNodeGroup_Handler,
		},
		{
			MethodName: "PutNodeGroup",
			Handler:    _Iks_PutNodeGroup_Handler,
		},
		{
			MethodName: "UpgradeNodeGroup",
			Handler:    _Iks_UpgradeNodeGroup_Handler,
		},
		{
			MethodName: "DeleteNodeGroup",
			Handler:    _Iks_DeleteNodeGroup_Handler,
		},
		{
			MethodName: "GetNodeGroupStatus",
			Handler:    _Iks_GetNodeGroupStatus_Handler,
		},
		{
			MethodName: "DeleteNodeGroupInstance",
			Handler:    _Iks_DeleteNodeGroupInstance_Handler,
		},
		{
			MethodName: "GetPublicK8sVersions",
			Handler:    _Iks_GetPublicK8SVersions_Handler,
		},
		{
			MethodName: "GetPublicRuntimes",
			Handler:    _Iks_GetPublicRuntimes_Handler,
		},
		{
			MethodName: "GetPublicInstanceTypes",
			Handler:    _Iks_GetPublicInstanceTypes_Handler,
		},
		{
			MethodName: "GetKubeConfig",
			Handler:    _Iks_GetKubeConfig_Handler,
		},
		{
			MethodName: "RetrieveKubeConfig",
			Handler:    _Iks_RetrieveKubeConfig_Handler,
		},
		{
			MethodName: "CreateNewVip",
			Handler:    _Iks_CreateNewVip_Handler,
		},
		{
			MethodName: "GetVips",
			Handler:    _Iks_GetVips_Handler,
		},
		{
			MethodName: "GetVip",
			Handler:    _Iks_GetVip_Handler,
		},
		{
			MethodName: "DeleteVip",
			Handler:    _Iks_DeleteVip_Handler,
		},
		{
			MethodName: "UpdateFirewallRule",
			Handler:    _Iks_UpdateFirewallRule_Handler,
		},
		{
			MethodName: "GetFirewallRule",
			Handler:    _Iks_GetFirewallRule_Handler,
		},
		{
			MethodName: "DeleteFirewallRule",
			Handler:    _Iks_DeleteFirewallRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iks.proto",
}

// IksSuperComputeClient is the client API for IksSuperCompute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IksSuperComputeClient interface {
	// CLUSTERS
	SuperComputeCreateCluster(ctx context.Context, in *SuperComputeClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error)
}

type iksSuperComputeClient struct {
	cc grpc.ClientConnInterface
}

func NewIksSuperComputeClient(cc grpc.ClientConnInterface) IksSuperComputeClient {
	return &iksSuperComputeClient{cc}
}

func (c *iksSuperComputeClient) SuperComputeCreateCluster(ctx context.Context, in *SuperComputeClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error) {
	out := new(ClusterCreateResponseForm)
	err := c.cc.Invoke(ctx, "/proto.IksSuperCompute/SuperComputeCreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IksSuperComputeServer is the server API for IksSuperCompute service.
// All implementations must embed UnimplementedIksSuperComputeServer
// for forward compatibility
type IksSuperComputeServer interface {
	// CLUSTERS
	SuperComputeCreateCluster(context.Context, *SuperComputeClusterCreateRequest) (*ClusterCreateResponseForm, error)
	mustEmbedUnimplementedIksSuperComputeServer()
}

// UnimplementedIksSuperComputeServer must be embedded to have forward compatible implementations.
type UnimplementedIksSuperComputeServer struct {
}

func (UnimplementedIksSuperComputeServer) SuperComputeCreateCluster(context.Context, *SuperComputeClusterCreateRequest) (*ClusterCreateResponseForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperComputeCreateCluster not implemented")
}
func (UnimplementedIksSuperComputeServer) mustEmbedUnimplementedIksSuperComputeServer() {}

// UnsafeIksSuperComputeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IksSuperComputeServer will
// result in compilation errors.
type UnsafeIksSuperComputeServer interface {
	mustEmbedUnimplementedIksSuperComputeServer()
}

func RegisterIksSuperComputeServer(s grpc.ServiceRegistrar, srv IksSuperComputeServer) {
	s.RegisterService(&IksSuperCompute_ServiceDesc, srv)
}

func _IksSuperCompute_SuperComputeCreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperComputeClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksSuperComputeServer).SuperComputeCreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksSuperCompute/SuperComputeCreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksSuperComputeServer).SuperComputeCreateCluster(ctx, req.(*SuperComputeClusterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IksSuperCompute_ServiceDesc is the grpc.ServiceDesc for IksSuperCompute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IksSuperCompute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IksSuperCompute",
	HandlerType: (*IksSuperComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuperComputeCreateCluster",
			Handler:    _IksSuperCompute_SuperComputeCreateCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iks.proto",
}
