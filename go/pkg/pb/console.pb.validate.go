// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: console.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConsoleInvoiceUnbilledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsoleInvoiceUnbilledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsoleInvoiceUnbilledRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConsoleInvoiceUnbilledRequestMultiError, or nil if none found.
func (m *ConsoleInvoiceUnbilledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsoleInvoiceUnbilledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetBillingPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledRequestValidationError{
					field:  "BillingPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledRequestValidationError{
					field:  "BillingPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBillingPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsoleInvoiceUnbilledRequestValidationError{
				field:  "BillingPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsoleInvoiceUnbilledRequestMultiError(errors)
	}

	return nil
}

// ConsoleInvoiceUnbilledRequestMultiError is an error wrapping multiple
// validation errors returned by ConsoleInvoiceUnbilledRequest.ValidateAll()
// if the designated constraints aren't met.
type ConsoleInvoiceUnbilledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsoleInvoiceUnbilledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsoleInvoiceUnbilledRequestMultiError) AllErrors() []error { return m }

// ConsoleInvoiceUnbilledRequestValidationError is the validation error
// returned by ConsoleInvoiceUnbilledRequest.Validate if the designated
// constraints aren't met.
type ConsoleInvoiceUnbilledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsoleInvoiceUnbilledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsoleInvoiceUnbilledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsoleInvoiceUnbilledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsoleInvoiceUnbilledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsoleInvoiceUnbilledRequestValidationError) ErrorName() string {
	return "ConsoleInvoiceUnbilledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConsoleInvoiceUnbilledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsoleInvoiceUnbilledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsoleInvoiceUnbilledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsoleInvoiceUnbilledRequestValidationError{}

// Validate checks the field values on ConsoleInvoiceUnbilledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsoleInvoiceUnbilledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsoleInvoiceUnbilledResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConsoleInvoiceUnbilledResponseMultiError, or nil if none found.
func (m *ConsoleInvoiceUnbilledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsoleInvoiceUnbilledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetBillingPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledResponseValidationError{
					field:  "BillingPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledResponseValidationError{
					field:  "BillingPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBillingPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsoleInvoiceUnbilledResponseValidationError{
				field:  "BillingPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EstimatedTotal

	for idx, item := range m.GetInvoiceByService() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsoleInvoiceUnbilledResponseValidationError{
						field:  fmt.Sprintf("InvoiceByService[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsoleInvoiceUnbilledResponseValidationError{
						field:  fmt.Sprintf("InvoiceByService[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsoleInvoiceUnbilledResponseValidationError{
					field:  fmt.Sprintf("InvoiceByService[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsoleInvoiceUnbilledResponseMultiError(errors)
	}

	return nil
}

// ConsoleInvoiceUnbilledResponseMultiError is an error wrapping multiple
// validation errors returned by ConsoleInvoiceUnbilledResponse.ValidateAll()
// if the designated constraints aren't met.
type ConsoleInvoiceUnbilledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsoleInvoiceUnbilledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsoleInvoiceUnbilledResponseMultiError) AllErrors() []error { return m }

// ConsoleInvoiceUnbilledResponseValidationError is the validation error
// returned by ConsoleInvoiceUnbilledResponse.Validate if the designated
// constraints aren't met.
type ConsoleInvoiceUnbilledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsoleInvoiceUnbilledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsoleInvoiceUnbilledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsoleInvoiceUnbilledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsoleInvoiceUnbilledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsoleInvoiceUnbilledResponseValidationError) ErrorName() string {
	return "ConsoleInvoiceUnbilledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConsoleInvoiceUnbilledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsoleInvoiceUnbilledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsoleInvoiceUnbilledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsoleInvoiceUnbilledResponseValidationError{}

// Validate checks the field values on ConsoleInvoiceUnbilledByService with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsoleInvoiceUnbilledByService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsoleInvoiceUnbilledByService with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConsoleInvoiceUnbilledByServiceMultiError, or nil if none found.
func (m *ConsoleInvoiceUnbilledByService) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsoleInvoiceUnbilledByService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for UnbilledBalance

	// no validation rules for UnbilledActiveInstances

	// no validation rules for UnbilledActiveMins

	for idx, item := range m.GetInvoiceByProductType() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsoleInvoiceUnbilledByServiceValidationError{
						field:  fmt.Sprintf("InvoiceByProductType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsoleInvoiceUnbilledByServiceValidationError{
						field:  fmt.Sprintf("InvoiceByProductType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsoleInvoiceUnbilledByServiceValidationError{
					field:  fmt.Sprintf("InvoiceByProductType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsoleInvoiceUnbilledByServiceMultiError(errors)
	}

	return nil
}

// ConsoleInvoiceUnbilledByServiceMultiError is an error wrapping multiple
// validation errors returned by ConsoleInvoiceUnbilledByService.ValidateAll()
// if the designated constraints aren't met.
type ConsoleInvoiceUnbilledByServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsoleInvoiceUnbilledByServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsoleInvoiceUnbilledByServiceMultiError) AllErrors() []error { return m }

// ConsoleInvoiceUnbilledByServiceValidationError is the validation error
// returned by ConsoleInvoiceUnbilledByService.Validate if the designated
// constraints aren't met.
type ConsoleInvoiceUnbilledByServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsoleInvoiceUnbilledByServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsoleInvoiceUnbilledByServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsoleInvoiceUnbilledByServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsoleInvoiceUnbilledByServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsoleInvoiceUnbilledByServiceValidationError) ErrorName() string {
	return "ConsoleInvoiceUnbilledByServiceValidationError"
}

// Error satisfies the builtin error interface
func (e ConsoleInvoiceUnbilledByServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsoleInvoiceUnbilledByService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsoleInvoiceUnbilledByServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsoleInvoiceUnbilledByServiceValidationError{}

// Validate checks the field values on ConsoleInvoiceUnbilledByProductType with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConsoleInvoiceUnbilledByProductType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsoleInvoiceUnbilledByProductType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConsoleInvoiceUnbilledByProductTypeMultiError, or nil if none found.
func (m *ConsoleInvoiceUnbilledByProductType) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsoleInvoiceUnbilledByProductType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductType

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledByProductTypeValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledByProductTypeValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsoleInvoiceUnbilledByProductTypeValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledByProductTypeValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsoleInvoiceUnbilledByProductTypeValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsoleInvoiceUnbilledByProductTypeValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinsUsed

	// no validation rules for Amount

	if len(errors) > 0 {
		return ConsoleInvoiceUnbilledByProductTypeMultiError(errors)
	}

	return nil
}

// ConsoleInvoiceUnbilledByProductTypeMultiError is an error wrapping multiple
// validation errors returned by
// ConsoleInvoiceUnbilledByProductType.ValidateAll() if the designated
// constraints aren't met.
type ConsoleInvoiceUnbilledByProductTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsoleInvoiceUnbilledByProductTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsoleInvoiceUnbilledByProductTypeMultiError) AllErrors() []error { return m }

// ConsoleInvoiceUnbilledByProductTypeValidationError is the validation error
// returned by ConsoleInvoiceUnbilledByProductType.Validate if the designated
// constraints aren't met.
type ConsoleInvoiceUnbilledByProductTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsoleInvoiceUnbilledByProductTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsoleInvoiceUnbilledByProductTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsoleInvoiceUnbilledByProductTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsoleInvoiceUnbilledByProductTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsoleInvoiceUnbilledByProductTypeValidationError) ErrorName() string {
	return "ConsoleInvoiceUnbilledByProductTypeValidationError"
}

// Error satisfies the builtin error interface
func (e ConsoleInvoiceUnbilledByProductTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsoleInvoiceUnbilledByProductType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsoleInvoiceUnbilledByProductTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsoleInvoiceUnbilledByProductTypeValidationError{}
