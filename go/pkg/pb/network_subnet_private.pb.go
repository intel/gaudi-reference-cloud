// After updating this file, run "make generate-go".
//
// See:
//  - https://developers.google.com/protocol-buffers/docs/proto3
//  - https://github.com/googleapis/googleapis/blob/master/google/api/http.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: network_subnet_private.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubnetCreatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SubnetMetadataCreatePrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *SubnetSpecPrivate           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *SubnetCreatePrivateRequest) Reset() {
	*x = SubnetCreatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetCreatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetCreatePrivateRequest) ProtoMessage() {}

func (x *SubnetCreatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetCreatePrivateRequest.ProtoReflect.Descriptor instead.
func (*SubnetCreatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{0}
}

func (x *SubnetCreatePrivateRequest) GetMetadata() *SubnetMetadataCreatePrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubnetCreatePrivateRequest) GetSpec() *SubnetSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

type SubnetUpdatePrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SubnetMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SubnetUpdatePrivateRequest) Reset() {
	*x = SubnetUpdatePrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetUpdatePrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetUpdatePrivateRequest) ProtoMessage() {}

func (x *SubnetUpdatePrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetUpdatePrivateRequest.ProtoReflect.Descriptor instead.
func (*SubnetUpdatePrivateRequest) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{1}
}

func (x *SubnetUpdatePrivateRequest) GetMetadata() *SubnetMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SubnetMetadataCreatePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name will be generated if empty.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	// This is also used by TopologySpreadConstraints.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reserved. Added this field to overcome openAPi-same-struct issue.
	//
	// Deprecated: Do not use.
	Reserved1        string `protobuf:"bytes,4,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
	SubnetId         string `protobuf:"bytes,5,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	VpcId            string `protobuf:"bytes,6,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	AvailabilityZone string `protobuf:"bytes,7,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
}

func (x *SubnetMetadataCreatePrivate) Reset() {
	*x = SubnetMetadataCreatePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetMetadataCreatePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetMetadataCreatePrivate) ProtoMessage() {}

func (x *SubnetMetadataCreatePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetMetadataCreatePrivate.ProtoReflect.Descriptor instead.
func (*SubnetMetadataCreatePrivate) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{2}
}

func (x *SubnetMetadataCreatePrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *SubnetMetadataCreatePrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubnetMetadataCreatePrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *SubnetMetadataCreatePrivate) GetReserved1() string {
	if x != nil {
		return x.Reserved1
	}
	return ""
}

func (x *SubnetMetadataCreatePrivate) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *SubnetMetadataCreatePrivate) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *SubnetMetadataCreatePrivate) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

type SubnetGetPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SubnetMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SubnetGetPrivateRequest) Reset() {
	*x = SubnetGetPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetGetPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetGetPrivateRequest) ProtoMessage() {}

func (x *SubnetGetPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetGetPrivateRequest.ProtoReflect.Descriptor instead.
func (*SubnetGetPrivateRequest) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{3}
}

func (x *SubnetGetPrivateRequest) GetMetadata() *SubnetMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SubnetPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SubnetMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *SubnetSpecPrivate     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *SubnetStatusPrivate   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubnetPrivate) Reset() {
	*x = SubnetPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetPrivate) ProtoMessage() {}

func (x *SubnetPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetPrivate.ProtoReflect.Descriptor instead.
func (*SubnetPrivate) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{4}
}

func (x *SubnetPrivate) GetMetadata() *SubnetMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubnetPrivate) GetSpec() *SubnetSpecPrivate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SubnetPrivate) GetStatus() *SubnetStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type SubnetPrivateWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SubnetMetadataPrivate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     string                 `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubnetPrivateWatchResponse) Reset() {
	*x = SubnetPrivateWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetPrivateWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetPrivateWatchResponse) ProtoMessage() {}

func (x *SubnetPrivateWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetPrivateWatchResponse.ProtoReflect.Descriptor instead.
func (*SubnetPrivateWatchResponse) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{5}
}

func (x *SubnetPrivateWatchResponse) GetMetadata() *SubnetMetadataPrivate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubnetPrivateWatchResponse) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *SubnetPrivateWatchResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SubnetMetadataPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Map of string keys and values that can be used to organize and categorize vpcs.
	// This can also be used by to evaluate placements for instances.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Not implemented.
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
	// Timestamp when resource was deleted.
	DeletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deletedTimestamp,proto3" json:"deletedTimestamp,omitempty"`
}

func (x *SubnetMetadataPrivate) Reset() {
	*x = SubnetMetadataPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetMetadataPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetMetadataPrivate) ProtoMessage() {}

func (x *SubnetMetadataPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetMetadataPrivate.ProtoReflect.Descriptor instead.
func (*SubnetMetadataPrivate) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{6}
}

func (x *SubnetMetadataPrivate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *SubnetMetadataPrivate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubnetMetadataPrivate) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *SubnetMetadataPrivate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *SubnetMetadataPrivate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SubnetMetadataPrivate) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *SubnetMetadataPrivate) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

func (x *SubnetMetadataPrivate) GetDeletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedTimestamp
	}
	return nil
}

type SubnetSpecPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CidrBlock        string `protobuf:"bytes,1,opt,name=cidrBlock,proto3" json:"cidrBlock,omitempty"`
	VpcId            string `protobuf:"bytes,2,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	AvailabilityZone string `protobuf:"bytes,3,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	SubnetType       string `protobuf:"bytes,4,opt,name=subnetType,proto3" json:"subnetType,omitempty"` // TODO (SAS): Make it an enum.
}

func (x *SubnetSpecPrivate) Reset() {
	*x = SubnetSpecPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetSpecPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetSpecPrivate) ProtoMessage() {}

func (x *SubnetSpecPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetSpecPrivate.ProtoReflect.Descriptor instead.
func (*SubnetSpecPrivate) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{7}
}

func (x *SubnetSpecPrivate) GetCidrBlock() string {
	if x != nil {
		return x.CidrBlock
	}
	return ""
}

func (x *SubnetSpecPrivate) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *SubnetSpecPrivate) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *SubnetSpecPrivate) GetSubnetType() string {
	if x != nil {
		return x.SubnetType
	}
	return ""
}

type SubnetStatusPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subnet phase.
	Phase SubnetPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.SubnetPhase" json:"phase,omitempty"`
	// Additional details about the state or any error conditions.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubnetStatusPrivate) Reset() {
	*x = SubnetStatusPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetStatusPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetStatusPrivate) ProtoMessage() {}

func (x *SubnetStatusPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetStatusPrivate.ProtoReflect.Descriptor instead.
func (*SubnetStatusPrivate) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{8}
}

func (x *SubnetStatusPrivate) GetPhase() SubnetPhase {
	if x != nil {
		return x.Phase
	}
	return SubnetPhase_SubnetPhase_Provisioning
}

func (x *SubnetStatusPrivate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SubnetSearchStreamPrivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubnetSearchStreamPrivateRequest) Reset() {
	*x = SubnetSearchStreamPrivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetSearchStreamPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetSearchStreamPrivateRequest) ProtoMessage() {}

func (x *SubnetSearchStreamPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetSearchStreamPrivateRequest.ProtoReflect.Descriptor instead.
func (*SubnetSearchStreamPrivateRequest) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{9}
}

// Private only.
type SubnetWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   WatchDeltaType              `protobuf:"varint,1,opt,name=type,proto3,enum=proto.WatchDeltaType" json:"type,omitempty"`
	Object *SubnetPrivateWatchResponse `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *SubnetWatchResponse) Reset() {
	*x = SubnetWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetWatchResponse) ProtoMessage() {}

func (x *SubnetWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetWatchResponse.ProtoReflect.Descriptor instead.
func (*SubnetWatchResponse) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{10}
}

func (x *SubnetWatchResponse) GetType() WatchDeltaType {
	if x != nil {
		return x.Type
	}
	return WatchDeltaType_Updated
}

func (x *SubnetWatchResponse) GetObject() *SubnetPrivateWatchResponse {
	if x != nil {
		return x.Object
	}
	return nil
}

type SubnetUpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SubnetIdReference   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *SubnetStatusPrivate `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubnetUpdateStatusRequest) Reset() {
	*x = SubnetUpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetUpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetUpdateStatusRequest) ProtoMessage() {}

func (x *SubnetUpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetUpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*SubnetUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{11}
}

func (x *SubnetUpdateStatusRequest) GetMetadata() *SubnetIdReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubnetUpdateStatusRequest) GetStatus() *SubnetStatusPrivate {
	if x != nil {
		return x.Status
	}
	return nil
}

type SubnetIdReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	ResourceId     string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Timestamp when resource was deleted.
	DeletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deletedTimestamp,proto3" json:"deletedTimestamp,omitempty"`
}

func (x *SubnetIdReference) Reset() {
	*x = SubnetIdReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetIdReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetIdReference) ProtoMessage() {}

func (x *SubnetIdReference) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetIdReference.ProtoReflect.Descriptor instead.
func (*SubnetIdReference) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{12}
}

func (x *SubnetIdReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *SubnetIdReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *SubnetIdReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *SubnetIdReference) GetDeletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedTimestamp
	}
	return nil
}

type SubnetWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceVersion string `protobuf:"bytes,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *SubnetWatchRequest) Reset() {
	*x = SubnetWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_subnet_private_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetWatchRequest) ProtoMessage() {}

func (x *SubnetWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_subnet_private_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetWatchRequest.ProtoReflect.Descriptor instead.
func (*SubnetWatchRequest) Descriptor() ([]byte, []int) {
	return file_network_subnet_private_proto_rawDescGZIP(), []int{13}
}

func (x *SubnetWatchRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

var File_network_subnet_private_proto protoreflect.FileDescriptor

var file_network_subnet_private_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x4f, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xdc, 0x02, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x55, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf6, 0x03, 0x0a, 0x15, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x46, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x64,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69,
	0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcd, 0x01,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3e, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xad, 0x04,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0x30, 0x01,
	0x12, 0x4a, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x6d, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b, 0x14, 0x12, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_subnet_private_proto_rawDescOnce sync.Once
	file_network_subnet_private_proto_rawDescData = file_network_subnet_private_proto_rawDesc
)

func file_network_subnet_private_proto_rawDescGZIP() []byte {
	file_network_subnet_private_proto_rawDescOnce.Do(func() {
		file_network_subnet_private_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_subnet_private_proto_rawDescData)
	})
	return file_network_subnet_private_proto_rawDescData
}

var file_network_subnet_private_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_network_subnet_private_proto_goTypes = []interface{}{
	(*SubnetCreatePrivateRequest)(nil),       // 0: proto.SubnetCreatePrivateRequest
	(*SubnetUpdatePrivateRequest)(nil),       // 1: proto.SubnetUpdatePrivateRequest
	(*SubnetMetadataCreatePrivate)(nil),      // 2: proto.SubnetMetadataCreatePrivate
	(*SubnetGetPrivateRequest)(nil),          // 3: proto.SubnetGetPrivateRequest
	(*SubnetPrivate)(nil),                    // 4: proto.SubnetPrivate
	(*SubnetPrivateWatchResponse)(nil),       // 5: proto.SubnetPrivateWatchResponse
	(*SubnetMetadataPrivate)(nil),            // 6: proto.SubnetMetadataPrivate
	(*SubnetSpecPrivate)(nil),                // 7: proto.SubnetSpecPrivate
	(*SubnetStatusPrivate)(nil),              // 8: proto.SubnetStatusPrivate
	(*SubnetSearchStreamPrivateRequest)(nil), // 9: proto.SubnetSearchStreamPrivateRequest
	(*SubnetWatchResponse)(nil),              // 10: proto.SubnetWatchResponse
	(*SubnetUpdateStatusRequest)(nil),        // 11: proto.SubnetUpdateStatusRequest
	(*SubnetIdReference)(nil),                // 12: proto.SubnetIdReference
	(*SubnetWatchRequest)(nil),               // 13: proto.SubnetWatchRequest
	nil,                                      // 14: proto.SubnetMetadataCreatePrivate.LabelsEntry
	nil,                                      // 15: proto.SubnetMetadataPrivate.LabelsEntry
	(*SubnetMetadata)(nil),                   // 16: proto.SubnetMetadata
	(*SubnetMetadataReference)(nil),          // 17: proto.SubnetMetadataReference
	(*timestamppb.Timestamp)(nil),            // 18: google.protobuf.Timestamp
	(SubnetPhase)(0),                         // 19: proto.SubnetPhase
	(WatchDeltaType)(0),                      // 20: proto.WatchDeltaType
	(*emptypb.Empty)(nil),                    // 21: google.protobuf.Empty
}
var file_network_subnet_private_proto_depIdxs = []int32{
	2,  // 0: proto.SubnetCreatePrivateRequest.metadata:type_name -> proto.SubnetMetadataCreatePrivate
	7,  // 1: proto.SubnetCreatePrivateRequest.spec:type_name -> proto.SubnetSpecPrivate
	16, // 2: proto.SubnetUpdatePrivateRequest.metadata:type_name -> proto.SubnetMetadata
	14, // 3: proto.SubnetMetadataCreatePrivate.labels:type_name -> proto.SubnetMetadataCreatePrivate.LabelsEntry
	17, // 4: proto.SubnetGetPrivateRequest.metadata:type_name -> proto.SubnetMetadataReference
	6,  // 5: proto.SubnetPrivate.metadata:type_name -> proto.SubnetMetadataPrivate
	7,  // 6: proto.SubnetPrivate.spec:type_name -> proto.SubnetSpecPrivate
	8,  // 7: proto.SubnetPrivate.status:type_name -> proto.SubnetStatusPrivate
	6,  // 8: proto.SubnetPrivateWatchResponse.metadata:type_name -> proto.SubnetMetadataPrivate
	15, // 9: proto.SubnetMetadataPrivate.labels:type_name -> proto.SubnetMetadataPrivate.LabelsEntry
	18, // 10: proto.SubnetMetadataPrivate.creationTimestamp:type_name -> google.protobuf.Timestamp
	18, // 11: proto.SubnetMetadataPrivate.deletionTimestamp:type_name -> google.protobuf.Timestamp
	18, // 12: proto.SubnetMetadataPrivate.deletedTimestamp:type_name -> google.protobuf.Timestamp
	19, // 13: proto.SubnetStatusPrivate.phase:type_name -> proto.SubnetPhase
	20, // 14: proto.SubnetWatchResponse.type:type_name -> proto.WatchDeltaType
	5,  // 15: proto.SubnetWatchResponse.object:type_name -> proto.SubnetPrivateWatchResponse
	12, // 16: proto.SubnetUpdateStatusRequest.metadata:type_name -> proto.SubnetIdReference
	8,  // 17: proto.SubnetUpdateStatusRequest.status:type_name -> proto.SubnetStatusPrivate
	18, // 18: proto.SubnetIdReference.deletedTimestamp:type_name -> google.protobuf.Timestamp
	0,  // 19: proto.SubnetPrivateService.CreatePrivate:input_type -> proto.SubnetCreatePrivateRequest
	1,  // 20: proto.SubnetPrivateService.UpdatePrivate:input_type -> proto.SubnetUpdatePrivateRequest
	3,  // 21: proto.SubnetPrivateService.GetPrivate:input_type -> proto.SubnetGetPrivateRequest
	9,  // 22: proto.SubnetPrivateService.SearchStreamPrivate:input_type -> proto.SubnetSearchStreamPrivateRequest
	13, // 23: proto.SubnetPrivateService.Watch:input_type -> proto.SubnetWatchRequest
	11, // 24: proto.SubnetPrivateService.UpdateStatus:input_type -> proto.SubnetUpdateStatusRequest
	21, // 25: proto.SubnetPrivateService.PingPrivate:input_type -> google.protobuf.Empty
	4,  // 26: proto.SubnetPrivateService.CreatePrivate:output_type -> proto.SubnetPrivate
	21, // 27: proto.SubnetPrivateService.UpdatePrivate:output_type -> google.protobuf.Empty
	4,  // 28: proto.SubnetPrivateService.GetPrivate:output_type -> proto.SubnetPrivate
	10, // 29: proto.SubnetPrivateService.SearchStreamPrivate:output_type -> proto.SubnetWatchResponse
	10, // 30: proto.SubnetPrivateService.Watch:output_type -> proto.SubnetWatchResponse
	21, // 31: proto.SubnetPrivateService.UpdateStatus:output_type -> google.protobuf.Empty
	21, // 32: proto.SubnetPrivateService.PingPrivate:output_type -> google.protobuf.Empty
	26, // [26:33] is the sub-list for method output_type
	19, // [19:26] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_network_subnet_private_proto_init() }
func file_network_subnet_private_proto_init() {
	if File_network_subnet_private_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_network_subnet_proto_init()
	file_compute_private_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_network_subnet_private_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetCreatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetUpdatePrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetMetadataCreatePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetGetPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetPrivateWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetMetadataPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetSpecPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetStatusPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetSearchStreamPrivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetUpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetIdReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_subnet_private_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_subnet_private_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_subnet_private_proto_goTypes,
		DependencyIndexes: file_network_subnet_private_proto_depIdxs,
		MessageInfos:      file_network_subnet_private_proto_msgTypes,
	}.Build()
	File_network_subnet_private_proto = out.File
	file_network_subnet_private_proto_rawDesc = nil
	file_network_subnet_private_proto_goTypes = nil
	file_network_subnet_private_proto_depIdxs = nil
}
