// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/billing_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBillingAccountServiceClient is a mock of BillingAccountServiceClient interface.
type MockBillingAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAccountServiceClientMockRecorder
}

// MockBillingAccountServiceClientMockRecorder is the mock recorder for MockBillingAccountServiceClient.
type MockBillingAccountServiceClientMockRecorder struct {
	mock *MockBillingAccountServiceClient
}

// NewMockBillingAccountServiceClient creates a new mock instance.
func NewMockBillingAccountServiceClient(ctrl *gomock.Controller) *MockBillingAccountServiceClient {
	mock := &MockBillingAccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingAccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAccountServiceClient) EXPECT() *MockBillingAccountServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingAccountServiceClient) Create(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingAccountServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingAccountServiceClient)(nil).Create), varargs...)
}

// DowngradePremiumtoStandard mocks base method.
func (m *MockBillingAccountServiceClient) DowngradePremiumtoStandard(ctx context.Context, in *BillingAccountDowngrade, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DowngradePremiumtoStandard", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DowngradePremiumtoStandard indicates an expected call of DowngradePremiumtoStandard.
func (mr *MockBillingAccountServiceClientMockRecorder) DowngradePremiumtoStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DowngradePremiumtoStandard", reflect.TypeOf((*MockBillingAccountServiceClient)(nil).DowngradePremiumtoStandard), varargs...)
}

// MockBillingAccountServiceServer is a mock of BillingAccountServiceServer interface.
type MockBillingAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAccountServiceServerMockRecorder
}

// MockBillingAccountServiceServerMockRecorder is the mock recorder for MockBillingAccountServiceServer.
type MockBillingAccountServiceServerMockRecorder struct {
	mock *MockBillingAccountServiceServer
}

// NewMockBillingAccountServiceServer creates a new mock instance.
func NewMockBillingAccountServiceServer(ctrl *gomock.Controller) *MockBillingAccountServiceServer {
	mock := &MockBillingAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAccountServiceServer) EXPECT() *MockBillingAccountServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingAccountServiceServer) Create(arg0 context.Context, arg1 *BillingAccount) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingAccountServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingAccountServiceServer)(nil).Create), arg0, arg1)
}

// DowngradePremiumtoStandard mocks base method.
func (m *MockBillingAccountServiceServer) DowngradePremiumtoStandard(arg0 context.Context, arg1 *BillingAccountDowngrade) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DowngradePremiumtoStandard", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DowngradePremiumtoStandard indicates an expected call of DowngradePremiumtoStandard.
func (mr *MockBillingAccountServiceServerMockRecorder) DowngradePremiumtoStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DowngradePremiumtoStandard", reflect.TypeOf((*MockBillingAccountServiceServer)(nil).DowngradePremiumtoStandard), arg0, arg1)
}

// mustEmbedUnimplementedBillingAccountServiceServer mocks base method.
func (m *MockBillingAccountServiceServer) mustEmbedUnimplementedBillingAccountServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingAccountServiceServer")
}

// mustEmbedUnimplementedBillingAccountServiceServer indicates an expected call of mustEmbedUnimplementedBillingAccountServiceServer.
func (mr *MockBillingAccountServiceServerMockRecorder) mustEmbedUnimplementedBillingAccountServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingAccountServiceServer", reflect.TypeOf((*MockBillingAccountServiceServer)(nil).mustEmbedUnimplementedBillingAccountServiceServer))
}

// MockUnsafeBillingAccountServiceServer is a mock of UnsafeBillingAccountServiceServer interface.
type MockUnsafeBillingAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingAccountServiceServerMockRecorder
}

// MockUnsafeBillingAccountServiceServerMockRecorder is the mock recorder for MockUnsafeBillingAccountServiceServer.
type MockUnsafeBillingAccountServiceServerMockRecorder struct {
	mock *MockUnsafeBillingAccountServiceServer
}

// NewMockUnsafeBillingAccountServiceServer creates a new mock instance.
func NewMockUnsafeBillingAccountServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingAccountServiceServer {
	mock := &MockUnsafeBillingAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingAccountServiceServer) EXPECT() *MockUnsafeBillingAccountServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingAccountServiceServer mocks base method.
func (m *MockUnsafeBillingAccountServiceServer) mustEmbedUnimplementedBillingAccountServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingAccountServiceServer")
}

// mustEmbedUnimplementedBillingAccountServiceServer indicates an expected call of mustEmbedUnimplementedBillingAccountServiceServer.
func (mr *MockUnsafeBillingAccountServiceServerMockRecorder) mustEmbedUnimplementedBillingAccountServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingAccountServiceServer", reflect.TypeOf((*MockUnsafeBillingAccountServiceServer)(nil).mustEmbedUnimplementedBillingAccountServiceServer))
}

// MockBillingOptionServiceClient is a mock of BillingOptionServiceClient interface.
type MockBillingOptionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingOptionServiceClientMockRecorder
}

// MockBillingOptionServiceClientMockRecorder is the mock recorder for MockBillingOptionServiceClient.
type MockBillingOptionServiceClientMockRecorder struct {
	mock *MockBillingOptionServiceClient
}

// NewMockBillingOptionServiceClient creates a new mock instance.
func NewMockBillingOptionServiceClient(ctrl *gomock.Controller) *MockBillingOptionServiceClient {
	mock := &MockBillingOptionServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingOptionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingOptionServiceClient) EXPECT() *MockBillingOptionServiceClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingOptionServiceClient) Read(ctx context.Context, in *BillingOptionFilter, opts ...grpc.CallOption) (*BillingOption, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*BillingOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingOptionServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingOptionServiceClient)(nil).Read), varargs...)
}

// MockBillingOptionServiceServer is a mock of BillingOptionServiceServer interface.
type MockBillingOptionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingOptionServiceServerMockRecorder
}

// MockBillingOptionServiceServerMockRecorder is the mock recorder for MockBillingOptionServiceServer.
type MockBillingOptionServiceServerMockRecorder struct {
	mock *MockBillingOptionServiceServer
}

// NewMockBillingOptionServiceServer creates a new mock instance.
func NewMockBillingOptionServiceServer(ctrl *gomock.Controller) *MockBillingOptionServiceServer {
	mock := &MockBillingOptionServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingOptionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingOptionServiceServer) EXPECT() *MockBillingOptionServiceServerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingOptionServiceServer) Read(arg0 context.Context, arg1 *BillingOptionFilter) (*BillingOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*BillingOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingOptionServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingOptionServiceServer)(nil).Read), arg0, arg1)
}

// mustEmbedUnimplementedBillingOptionServiceServer mocks base method.
func (m *MockBillingOptionServiceServer) mustEmbedUnimplementedBillingOptionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingOptionServiceServer")
}

// mustEmbedUnimplementedBillingOptionServiceServer indicates an expected call of mustEmbedUnimplementedBillingOptionServiceServer.
func (mr *MockBillingOptionServiceServerMockRecorder) mustEmbedUnimplementedBillingOptionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingOptionServiceServer", reflect.TypeOf((*MockBillingOptionServiceServer)(nil).mustEmbedUnimplementedBillingOptionServiceServer))
}

// MockUnsafeBillingOptionServiceServer is a mock of UnsafeBillingOptionServiceServer interface.
type MockUnsafeBillingOptionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingOptionServiceServerMockRecorder
}

// MockUnsafeBillingOptionServiceServerMockRecorder is the mock recorder for MockUnsafeBillingOptionServiceServer.
type MockUnsafeBillingOptionServiceServerMockRecorder struct {
	mock *MockUnsafeBillingOptionServiceServer
}

// NewMockUnsafeBillingOptionServiceServer creates a new mock instance.
func NewMockUnsafeBillingOptionServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingOptionServiceServer {
	mock := &MockUnsafeBillingOptionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingOptionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingOptionServiceServer) EXPECT() *MockUnsafeBillingOptionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingOptionServiceServer mocks base method.
func (m *MockUnsafeBillingOptionServiceServer) mustEmbedUnimplementedBillingOptionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingOptionServiceServer")
}

// mustEmbedUnimplementedBillingOptionServiceServer indicates an expected call of mustEmbedUnimplementedBillingOptionServiceServer.
func (mr *MockUnsafeBillingOptionServiceServerMockRecorder) mustEmbedUnimplementedBillingOptionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingOptionServiceServer", reflect.TypeOf((*MockUnsafeBillingOptionServiceServer)(nil).mustEmbedUnimplementedBillingOptionServiceServer))
}

// MockBillingRateServiceClient is a mock of BillingRateServiceClient interface.
type MockBillingRateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingRateServiceClientMockRecorder
}

// MockBillingRateServiceClientMockRecorder is the mock recorder for MockBillingRateServiceClient.
type MockBillingRateServiceClientMockRecorder struct {
	mock *MockBillingRateServiceClient
}

// NewMockBillingRateServiceClient creates a new mock instance.
func NewMockBillingRateServiceClient(ctrl *gomock.Controller) *MockBillingRateServiceClient {
	mock := &MockBillingRateServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingRateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingRateServiceClient) EXPECT() *MockBillingRateServiceClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingRateServiceClient) Read(ctx context.Context, in *BillingRateFilter, opts ...grpc.CallOption) (BillingRateService_ReadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(BillingRateService_ReadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingRateServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingRateServiceClient)(nil).Read), varargs...)
}

// MockBillingRateService_ReadClient is a mock of BillingRateService_ReadClient interface.
type MockBillingRateService_ReadClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingRateService_ReadClientMockRecorder
}

// MockBillingRateService_ReadClientMockRecorder is the mock recorder for MockBillingRateService_ReadClient.
type MockBillingRateService_ReadClientMockRecorder struct {
	mock *MockBillingRateService_ReadClient
}

// NewMockBillingRateService_ReadClient creates a new mock instance.
func NewMockBillingRateService_ReadClient(ctrl *gomock.Controller) *MockBillingRateService_ReadClient {
	mock := &MockBillingRateService_ReadClient{ctrl: ctrl}
	mock.recorder = &MockBillingRateService_ReadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingRateService_ReadClient) EXPECT() *MockBillingRateService_ReadClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBillingRateService_ReadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBillingRateService_ReadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBillingRateService_ReadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBillingRateService_ReadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingRateService_ReadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingRateService_ReadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBillingRateService_ReadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBillingRateService_ReadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBillingRateService_ReadClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBillingRateService_ReadClient) Recv() (*BillingRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*BillingRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBillingRateService_ReadClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBillingRateService_ReadClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingRateService_ReadClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingRateService_ReadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingRateService_ReadClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBillingRateService_ReadClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingRateService_ReadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingRateService_ReadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBillingRateService_ReadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBillingRateService_ReadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBillingRateService_ReadClient)(nil).Trailer))
}

// MockBillingRateServiceServer is a mock of BillingRateServiceServer interface.
type MockBillingRateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingRateServiceServerMockRecorder
}

// MockBillingRateServiceServerMockRecorder is the mock recorder for MockBillingRateServiceServer.
type MockBillingRateServiceServerMockRecorder struct {
	mock *MockBillingRateServiceServer
}

// NewMockBillingRateServiceServer creates a new mock instance.
func NewMockBillingRateServiceServer(ctrl *gomock.Controller) *MockBillingRateServiceServer {
	mock := &MockBillingRateServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingRateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingRateServiceServer) EXPECT() *MockBillingRateServiceServerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingRateServiceServer) Read(arg0 *BillingRateFilter, arg1 BillingRateService_ReadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockBillingRateServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingRateServiceServer)(nil).Read), arg0, arg1)
}

// mustEmbedUnimplementedBillingRateServiceServer mocks base method.
func (m *MockBillingRateServiceServer) mustEmbedUnimplementedBillingRateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingRateServiceServer")
}

// mustEmbedUnimplementedBillingRateServiceServer indicates an expected call of mustEmbedUnimplementedBillingRateServiceServer.
func (mr *MockBillingRateServiceServerMockRecorder) mustEmbedUnimplementedBillingRateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingRateServiceServer", reflect.TypeOf((*MockBillingRateServiceServer)(nil).mustEmbedUnimplementedBillingRateServiceServer))
}

// MockUnsafeBillingRateServiceServer is a mock of UnsafeBillingRateServiceServer interface.
type MockUnsafeBillingRateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingRateServiceServerMockRecorder
}

// MockUnsafeBillingRateServiceServerMockRecorder is the mock recorder for MockUnsafeBillingRateServiceServer.
type MockUnsafeBillingRateServiceServerMockRecorder struct {
	mock *MockUnsafeBillingRateServiceServer
}

// NewMockUnsafeBillingRateServiceServer creates a new mock instance.
func NewMockUnsafeBillingRateServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingRateServiceServer {
	mock := &MockUnsafeBillingRateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingRateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingRateServiceServer) EXPECT() *MockUnsafeBillingRateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingRateServiceServer mocks base method.
func (m *MockUnsafeBillingRateServiceServer) mustEmbedUnimplementedBillingRateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingRateServiceServer")
}

// mustEmbedUnimplementedBillingRateServiceServer indicates an expected call of mustEmbedUnimplementedBillingRateServiceServer.
func (mr *MockUnsafeBillingRateServiceServerMockRecorder) mustEmbedUnimplementedBillingRateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingRateServiceServer", reflect.TypeOf((*MockUnsafeBillingRateServiceServer)(nil).mustEmbedUnimplementedBillingRateServiceServer))
}

// MockBillingRateService_ReadServer is a mock of BillingRateService_ReadServer interface.
type MockBillingRateService_ReadServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingRateService_ReadServerMockRecorder
}

// MockBillingRateService_ReadServerMockRecorder is the mock recorder for MockBillingRateService_ReadServer.
type MockBillingRateService_ReadServerMockRecorder struct {
	mock *MockBillingRateService_ReadServer
}

// NewMockBillingRateService_ReadServer creates a new mock instance.
func NewMockBillingRateService_ReadServer(ctrl *gomock.Controller) *MockBillingRateService_ReadServer {
	mock := &MockBillingRateService_ReadServer{ctrl: ctrl}
	mock.recorder = &MockBillingRateService_ReadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingRateService_ReadServer) EXPECT() *MockBillingRateService_ReadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBillingRateService_ReadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingRateService_ReadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingRateService_ReadServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingRateService_ReadServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingRateService_ReadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingRateService_ReadServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBillingRateService_ReadServer) Send(arg0 *BillingRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBillingRateService_ReadServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBillingRateService_ReadServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBillingRateService_ReadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBillingRateService_ReadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBillingRateService_ReadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBillingRateService_ReadServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingRateService_ReadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingRateService_ReadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBillingRateService_ReadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBillingRateService_ReadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBillingRateService_ReadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBillingRateService_ReadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBillingRateService_ReadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBillingRateService_ReadServer)(nil).SetTrailer), arg0)
}

// MockBillingCreditServiceClient is a mock of BillingCreditServiceClient interface.
type MockBillingCreditServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingCreditServiceClientMockRecorder
}

// MockBillingCreditServiceClientMockRecorder is the mock recorder for MockBillingCreditServiceClient.
type MockBillingCreditServiceClientMockRecorder struct {
	mock *MockBillingCreditServiceClient
}

// NewMockBillingCreditServiceClient creates a new mock instance.
func NewMockBillingCreditServiceClient(ctrl *gomock.Controller) *MockBillingCreditServiceClient {
	mock := &MockBillingCreditServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingCreditServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingCreditServiceClient) EXPECT() *MockBillingCreditServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingCreditServiceClient) Create(ctx context.Context, in *BillingCredit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingCreditServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingCreditServiceClient)(nil).Create), varargs...)
}

// CreditMigrate mocks base method.
func (m *MockBillingCreditServiceClient) CreditMigrate(ctx context.Context, in *BillingUnappliedCredit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreditMigrate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditMigrate indicates an expected call of CreditMigrate.
func (mr *MockBillingCreditServiceClientMockRecorder) CreditMigrate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditMigrate", reflect.TypeOf((*MockBillingCreditServiceClient)(nil).CreditMigrate), varargs...)
}

// DeleteMigratedCredit mocks base method.
func (m *MockBillingCreditServiceClient) DeleteMigratedCredit(ctx context.Context, in *BillingMigratedCredit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMigratedCredit", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMigratedCredit indicates an expected call of DeleteMigratedCredit.
func (mr *MockBillingCreditServiceClientMockRecorder) DeleteMigratedCredit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigratedCredit", reflect.TypeOf((*MockBillingCreditServiceClient)(nil).DeleteMigratedCredit), varargs...)
}

// Read mocks base method.
func (m *MockBillingCreditServiceClient) Read(ctx context.Context, in *BillingCreditFilter, opts ...grpc.CallOption) (*BillingCreditResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*BillingCreditResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingCreditServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingCreditServiceClient)(nil).Read), varargs...)
}

// ReadInternal mocks base method.
func (m *MockBillingCreditServiceClient) ReadInternal(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (BillingCreditService_ReadInternalClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadInternal", varargs...)
	ret0, _ := ret[0].(BillingCreditService_ReadInternalClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInternal indicates an expected call of ReadInternal.
func (mr *MockBillingCreditServiceClientMockRecorder) ReadInternal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInternal", reflect.TypeOf((*MockBillingCreditServiceClient)(nil).ReadInternal), varargs...)
}

// ReadUnappliedCreditBalance mocks base method.
func (m *MockBillingCreditServiceClient) ReadUnappliedCreditBalance(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*BillingUnappliedCreditBalance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadUnappliedCreditBalance", varargs...)
	ret0, _ := ret[0].(*BillingUnappliedCreditBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUnappliedCreditBalance indicates an expected call of ReadUnappliedCreditBalance.
func (mr *MockBillingCreditServiceClientMockRecorder) ReadUnappliedCreditBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnappliedCreditBalance", reflect.TypeOf((*MockBillingCreditServiceClient)(nil).ReadUnappliedCreditBalance), varargs...)
}

// MockBillingCreditService_ReadInternalClient is a mock of BillingCreditService_ReadInternalClient interface.
type MockBillingCreditService_ReadInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingCreditService_ReadInternalClientMockRecorder
}

// MockBillingCreditService_ReadInternalClientMockRecorder is the mock recorder for MockBillingCreditService_ReadInternalClient.
type MockBillingCreditService_ReadInternalClientMockRecorder struct {
	mock *MockBillingCreditService_ReadInternalClient
}

// NewMockBillingCreditService_ReadInternalClient creates a new mock instance.
func NewMockBillingCreditService_ReadInternalClient(ctrl *gomock.Controller) *MockBillingCreditService_ReadInternalClient {
	mock := &MockBillingCreditService_ReadInternalClient{ctrl: ctrl}
	mock.recorder = &MockBillingCreditService_ReadInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingCreditService_ReadInternalClient) EXPECT() *MockBillingCreditService_ReadInternalClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBillingCreditService_ReadInternalClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBillingCreditService_ReadInternalClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBillingCreditService_ReadInternalClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBillingCreditService_ReadInternalClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingCreditService_ReadInternalClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingCreditService_ReadInternalClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBillingCreditService_ReadInternalClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBillingCreditService_ReadInternalClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBillingCreditService_ReadInternalClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBillingCreditService_ReadInternalClient) Recv() (*BillingCredit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*BillingCredit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBillingCreditService_ReadInternalClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBillingCreditService_ReadInternalClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingCreditService_ReadInternalClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingCreditService_ReadInternalClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingCreditService_ReadInternalClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBillingCreditService_ReadInternalClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingCreditService_ReadInternalClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingCreditService_ReadInternalClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBillingCreditService_ReadInternalClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBillingCreditService_ReadInternalClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBillingCreditService_ReadInternalClient)(nil).Trailer))
}

// MockBillingCreditServiceServer is a mock of BillingCreditServiceServer interface.
type MockBillingCreditServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingCreditServiceServerMockRecorder
}

// MockBillingCreditServiceServerMockRecorder is the mock recorder for MockBillingCreditServiceServer.
type MockBillingCreditServiceServerMockRecorder struct {
	mock *MockBillingCreditServiceServer
}

// NewMockBillingCreditServiceServer creates a new mock instance.
func NewMockBillingCreditServiceServer(ctrl *gomock.Controller) *MockBillingCreditServiceServer {
	mock := &MockBillingCreditServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingCreditServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingCreditServiceServer) EXPECT() *MockBillingCreditServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingCreditServiceServer) Create(arg0 context.Context, arg1 *BillingCredit) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingCreditServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingCreditServiceServer)(nil).Create), arg0, arg1)
}

// CreditMigrate mocks base method.
func (m *MockBillingCreditServiceServer) CreditMigrate(arg0 context.Context, arg1 *BillingUnappliedCredit) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditMigrate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditMigrate indicates an expected call of CreditMigrate.
func (mr *MockBillingCreditServiceServerMockRecorder) CreditMigrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditMigrate", reflect.TypeOf((*MockBillingCreditServiceServer)(nil).CreditMigrate), arg0, arg1)
}

// DeleteMigratedCredit mocks base method.
func (m *MockBillingCreditServiceServer) DeleteMigratedCredit(arg0 context.Context, arg1 *BillingMigratedCredit) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigratedCredit", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMigratedCredit indicates an expected call of DeleteMigratedCredit.
func (mr *MockBillingCreditServiceServerMockRecorder) DeleteMigratedCredit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigratedCredit", reflect.TypeOf((*MockBillingCreditServiceServer)(nil).DeleteMigratedCredit), arg0, arg1)
}

// Read mocks base method.
func (m *MockBillingCreditServiceServer) Read(arg0 context.Context, arg1 *BillingCreditFilter) (*BillingCreditResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*BillingCreditResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingCreditServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingCreditServiceServer)(nil).Read), arg0, arg1)
}

// ReadInternal mocks base method.
func (m *MockBillingCreditServiceServer) ReadInternal(arg0 *BillingAccount, arg1 BillingCreditService_ReadInternalServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInternal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInternal indicates an expected call of ReadInternal.
func (mr *MockBillingCreditServiceServerMockRecorder) ReadInternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInternal", reflect.TypeOf((*MockBillingCreditServiceServer)(nil).ReadInternal), arg0, arg1)
}

// ReadUnappliedCreditBalance mocks base method.
func (m *MockBillingCreditServiceServer) ReadUnappliedCreditBalance(arg0 context.Context, arg1 *BillingAccount) (*BillingUnappliedCreditBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUnappliedCreditBalance", arg0, arg1)
	ret0, _ := ret[0].(*BillingUnappliedCreditBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUnappliedCreditBalance indicates an expected call of ReadUnappliedCreditBalance.
func (mr *MockBillingCreditServiceServerMockRecorder) ReadUnappliedCreditBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnappliedCreditBalance", reflect.TypeOf((*MockBillingCreditServiceServer)(nil).ReadUnappliedCreditBalance), arg0, arg1)
}

// mustEmbedUnimplementedBillingCreditServiceServer mocks base method.
func (m *MockBillingCreditServiceServer) mustEmbedUnimplementedBillingCreditServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingCreditServiceServer")
}

// mustEmbedUnimplementedBillingCreditServiceServer indicates an expected call of mustEmbedUnimplementedBillingCreditServiceServer.
func (mr *MockBillingCreditServiceServerMockRecorder) mustEmbedUnimplementedBillingCreditServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingCreditServiceServer", reflect.TypeOf((*MockBillingCreditServiceServer)(nil).mustEmbedUnimplementedBillingCreditServiceServer))
}

// MockUnsafeBillingCreditServiceServer is a mock of UnsafeBillingCreditServiceServer interface.
type MockUnsafeBillingCreditServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingCreditServiceServerMockRecorder
}

// MockUnsafeBillingCreditServiceServerMockRecorder is the mock recorder for MockUnsafeBillingCreditServiceServer.
type MockUnsafeBillingCreditServiceServerMockRecorder struct {
	mock *MockUnsafeBillingCreditServiceServer
}

// NewMockUnsafeBillingCreditServiceServer creates a new mock instance.
func NewMockUnsafeBillingCreditServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingCreditServiceServer {
	mock := &MockUnsafeBillingCreditServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingCreditServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingCreditServiceServer) EXPECT() *MockUnsafeBillingCreditServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingCreditServiceServer mocks base method.
func (m *MockUnsafeBillingCreditServiceServer) mustEmbedUnimplementedBillingCreditServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingCreditServiceServer")
}

// mustEmbedUnimplementedBillingCreditServiceServer indicates an expected call of mustEmbedUnimplementedBillingCreditServiceServer.
func (mr *MockUnsafeBillingCreditServiceServerMockRecorder) mustEmbedUnimplementedBillingCreditServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingCreditServiceServer", reflect.TypeOf((*MockUnsafeBillingCreditServiceServer)(nil).mustEmbedUnimplementedBillingCreditServiceServer))
}

// MockBillingCreditService_ReadInternalServer is a mock of BillingCreditService_ReadInternalServer interface.
type MockBillingCreditService_ReadInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingCreditService_ReadInternalServerMockRecorder
}

// MockBillingCreditService_ReadInternalServerMockRecorder is the mock recorder for MockBillingCreditService_ReadInternalServer.
type MockBillingCreditService_ReadInternalServerMockRecorder struct {
	mock *MockBillingCreditService_ReadInternalServer
}

// NewMockBillingCreditService_ReadInternalServer creates a new mock instance.
func NewMockBillingCreditService_ReadInternalServer(ctrl *gomock.Controller) *MockBillingCreditService_ReadInternalServer {
	mock := &MockBillingCreditService_ReadInternalServer{ctrl: ctrl}
	mock.recorder = &MockBillingCreditService_ReadInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingCreditService_ReadInternalServer) EXPECT() *MockBillingCreditService_ReadInternalServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBillingCreditService_ReadInternalServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingCreditService_ReadInternalServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingCreditService_ReadInternalServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingCreditService_ReadInternalServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingCreditService_ReadInternalServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingCreditService_ReadInternalServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBillingCreditService_ReadInternalServer) Send(arg0 *BillingCredit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBillingCreditService_ReadInternalServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBillingCreditService_ReadInternalServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBillingCreditService_ReadInternalServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBillingCreditService_ReadInternalServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBillingCreditService_ReadInternalServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBillingCreditService_ReadInternalServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingCreditService_ReadInternalServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingCreditService_ReadInternalServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBillingCreditService_ReadInternalServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBillingCreditService_ReadInternalServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBillingCreditService_ReadInternalServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBillingCreditService_ReadInternalServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBillingCreditService_ReadInternalServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBillingCreditService_ReadInternalServer)(nil).SetTrailer), arg0)
}

// MockBillingCouponServiceClient is a mock of BillingCouponServiceClient interface.
type MockBillingCouponServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingCouponServiceClientMockRecorder
}

// MockBillingCouponServiceClientMockRecorder is the mock recorder for MockBillingCouponServiceClient.
type MockBillingCouponServiceClientMockRecorder struct {
	mock *MockBillingCouponServiceClient
}

// NewMockBillingCouponServiceClient creates a new mock instance.
func NewMockBillingCouponServiceClient(ctrl *gomock.Controller) *MockBillingCouponServiceClient {
	mock := &MockBillingCouponServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingCouponServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingCouponServiceClient) EXPECT() *MockBillingCouponServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingCouponServiceClient) Create(ctx context.Context, in *BillingCouponCreate, opts ...grpc.CallOption) (*BillingCoupon, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*BillingCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingCouponServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingCouponServiceClient)(nil).Create), varargs...)
}

// Disable mocks base method.
func (m *MockBillingCouponServiceClient) Disable(ctx context.Context, in *BillingCouponDisable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Disable", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockBillingCouponServiceClientMockRecorder) Disable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockBillingCouponServiceClient)(nil).Disable), varargs...)
}

// Read mocks base method.
func (m *MockBillingCouponServiceClient) Read(ctx context.Context, in *BillingCouponFilter, opts ...grpc.CallOption) (*BillingCouponResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*BillingCouponResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingCouponServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingCouponServiceClient)(nil).Read), varargs...)
}

// Redeem mocks base method.
func (m *MockBillingCouponServiceClient) Redeem(ctx context.Context, in *BillingCouponRedeem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Redeem", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redeem indicates an expected call of Redeem.
func (mr *MockBillingCouponServiceClientMockRecorder) Redeem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redeem", reflect.TypeOf((*MockBillingCouponServiceClient)(nil).Redeem), varargs...)
}

// MockBillingCouponServiceServer is a mock of BillingCouponServiceServer interface.
type MockBillingCouponServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingCouponServiceServerMockRecorder
}

// MockBillingCouponServiceServerMockRecorder is the mock recorder for MockBillingCouponServiceServer.
type MockBillingCouponServiceServerMockRecorder struct {
	mock *MockBillingCouponServiceServer
}

// NewMockBillingCouponServiceServer creates a new mock instance.
func NewMockBillingCouponServiceServer(ctrl *gomock.Controller) *MockBillingCouponServiceServer {
	mock := &MockBillingCouponServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingCouponServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingCouponServiceServer) EXPECT() *MockBillingCouponServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingCouponServiceServer) Create(arg0 context.Context, arg1 *BillingCouponCreate) (*BillingCoupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*BillingCoupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingCouponServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingCouponServiceServer)(nil).Create), arg0, arg1)
}

// Disable mocks base method.
func (m *MockBillingCouponServiceServer) Disable(arg0 context.Context, arg1 *BillingCouponDisable) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockBillingCouponServiceServerMockRecorder) Disable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockBillingCouponServiceServer)(nil).Disable), arg0, arg1)
}

// Read mocks base method.
func (m *MockBillingCouponServiceServer) Read(arg0 context.Context, arg1 *BillingCouponFilter) (*BillingCouponResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*BillingCouponResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingCouponServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingCouponServiceServer)(nil).Read), arg0, arg1)
}

// Redeem mocks base method.
func (m *MockBillingCouponServiceServer) Redeem(arg0 context.Context, arg1 *BillingCouponRedeem) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redeem", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redeem indicates an expected call of Redeem.
func (mr *MockBillingCouponServiceServerMockRecorder) Redeem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redeem", reflect.TypeOf((*MockBillingCouponServiceServer)(nil).Redeem), arg0, arg1)
}

// mustEmbedUnimplementedBillingCouponServiceServer mocks base method.
func (m *MockBillingCouponServiceServer) mustEmbedUnimplementedBillingCouponServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingCouponServiceServer")
}

// mustEmbedUnimplementedBillingCouponServiceServer indicates an expected call of mustEmbedUnimplementedBillingCouponServiceServer.
func (mr *MockBillingCouponServiceServerMockRecorder) mustEmbedUnimplementedBillingCouponServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingCouponServiceServer", reflect.TypeOf((*MockBillingCouponServiceServer)(nil).mustEmbedUnimplementedBillingCouponServiceServer))
}

// MockUnsafeBillingCouponServiceServer is a mock of UnsafeBillingCouponServiceServer interface.
type MockUnsafeBillingCouponServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingCouponServiceServerMockRecorder
}

// MockUnsafeBillingCouponServiceServerMockRecorder is the mock recorder for MockUnsafeBillingCouponServiceServer.
type MockUnsafeBillingCouponServiceServerMockRecorder struct {
	mock *MockUnsafeBillingCouponServiceServer
}

// NewMockUnsafeBillingCouponServiceServer creates a new mock instance.
func NewMockUnsafeBillingCouponServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingCouponServiceServer {
	mock := &MockUnsafeBillingCouponServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingCouponServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingCouponServiceServer) EXPECT() *MockUnsafeBillingCouponServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingCouponServiceServer mocks base method.
func (m *MockUnsafeBillingCouponServiceServer) mustEmbedUnimplementedBillingCouponServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingCouponServiceServer")
}

// mustEmbedUnimplementedBillingCouponServiceServer indicates an expected call of mustEmbedUnimplementedBillingCouponServiceServer.
func (mr *MockUnsafeBillingCouponServiceServerMockRecorder) mustEmbedUnimplementedBillingCouponServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingCouponServiceServer", reflect.TypeOf((*MockUnsafeBillingCouponServiceServer)(nil).mustEmbedUnimplementedBillingCouponServiceServer))
}

// MockBillingInvoiceServiceClient is a mock of BillingInvoiceServiceClient interface.
type MockBillingInvoiceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInvoiceServiceClientMockRecorder
}

// MockBillingInvoiceServiceClientMockRecorder is the mock recorder for MockBillingInvoiceServiceClient.
type MockBillingInvoiceServiceClientMockRecorder struct {
	mock *MockBillingInvoiceServiceClient
}

// NewMockBillingInvoiceServiceClient creates a new mock instance.
func NewMockBillingInvoiceServiceClient(ctrl *gomock.Controller) *MockBillingInvoiceServiceClient {
	mock := &MockBillingInvoiceServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingInvoiceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInvoiceServiceClient) EXPECT() *MockBillingInvoiceServiceClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingInvoiceServiceClient) Read(ctx context.Context, in *BillingInvoiceFilter, opts ...grpc.CallOption) (*BillingInvoiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*BillingInvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingInvoiceServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingInvoiceServiceClient)(nil).Read), varargs...)
}

// ReadDetail mocks base method.
func (m *MockBillingInvoiceServiceClient) ReadDetail(ctx context.Context, in *InvoiceId, opts ...grpc.CallOption) (BillingInvoiceService_ReadDetailClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDetail", varargs...)
	ret0, _ := ret[0].(BillingInvoiceService_ReadDetailClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDetail indicates an expected call of ReadDetail.
func (mr *MockBillingInvoiceServiceClientMockRecorder) ReadDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDetail", reflect.TypeOf((*MockBillingInvoiceServiceClient)(nil).ReadDetail), varargs...)
}

// ReadStatement mocks base method.
func (m *MockBillingInvoiceServiceClient) ReadStatement(ctx context.Context, in *InvoiceId, opts ...grpc.CallOption) (*Statement, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadStatement", varargs...)
	ret0, _ := ret[0].(*Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStatement indicates an expected call of ReadStatement.
func (mr *MockBillingInvoiceServiceClientMockRecorder) ReadStatement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStatement", reflect.TypeOf((*MockBillingInvoiceServiceClient)(nil).ReadStatement), varargs...)
}

// ReadUnbilled mocks base method.
func (m *MockBillingInvoiceServiceClient) ReadUnbilled(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (BillingInvoiceService_ReadUnbilledClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadUnbilled", varargs...)
	ret0, _ := ret[0].(BillingInvoiceService_ReadUnbilledClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUnbilled indicates an expected call of ReadUnbilled.
func (mr *MockBillingInvoiceServiceClientMockRecorder) ReadUnbilled(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnbilled", reflect.TypeOf((*MockBillingInvoiceServiceClient)(nil).ReadUnbilled), varargs...)
}

// MockBillingInvoiceService_ReadDetailClient is a mock of BillingInvoiceService_ReadDetailClient interface.
type MockBillingInvoiceService_ReadDetailClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInvoiceService_ReadDetailClientMockRecorder
}

// MockBillingInvoiceService_ReadDetailClientMockRecorder is the mock recorder for MockBillingInvoiceService_ReadDetailClient.
type MockBillingInvoiceService_ReadDetailClientMockRecorder struct {
	mock *MockBillingInvoiceService_ReadDetailClient
}

// NewMockBillingInvoiceService_ReadDetailClient creates a new mock instance.
func NewMockBillingInvoiceService_ReadDetailClient(ctrl *gomock.Controller) *MockBillingInvoiceService_ReadDetailClient {
	mock := &MockBillingInvoiceService_ReadDetailClient{ctrl: ctrl}
	mock.recorder = &MockBillingInvoiceService_ReadDetailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInvoiceService_ReadDetailClient) EXPECT() *MockBillingInvoiceService_ReadDetailClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBillingInvoiceService_ReadDetailClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBillingInvoiceService_ReadDetailClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBillingInvoiceService_ReadDetailClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingInvoiceService_ReadDetailClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBillingInvoiceService_ReadDetailClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBillingInvoiceService_ReadDetailClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBillingInvoiceService_ReadDetailClient) Recv() (*InvoiceDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*InvoiceDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBillingInvoiceService_ReadDetailClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadDetailClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingInvoiceService_ReadDetailClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadDetailClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingInvoiceService_ReadDetailClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBillingInvoiceService_ReadDetailClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBillingInvoiceService_ReadDetailClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailClient)(nil).Trailer))
}

// MockBillingInvoiceService_ReadUnbilledClient is a mock of BillingInvoiceService_ReadUnbilledClient interface.
type MockBillingInvoiceService_ReadUnbilledClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInvoiceService_ReadUnbilledClientMockRecorder
}

// MockBillingInvoiceService_ReadUnbilledClientMockRecorder is the mock recorder for MockBillingInvoiceService_ReadUnbilledClient.
type MockBillingInvoiceService_ReadUnbilledClientMockRecorder struct {
	mock *MockBillingInvoiceService_ReadUnbilledClient
}

// NewMockBillingInvoiceService_ReadUnbilledClient creates a new mock instance.
func NewMockBillingInvoiceService_ReadUnbilledClient(ctrl *gomock.Controller) *MockBillingInvoiceService_ReadUnbilledClient {
	mock := &MockBillingInvoiceService_ReadUnbilledClient{ctrl: ctrl}
	mock.recorder = &MockBillingInvoiceService_ReadUnbilledClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInvoiceService_ReadUnbilledClient) EXPECT() *MockBillingInvoiceService_ReadUnbilledClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBillingInvoiceService_ReadUnbilledClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingInvoiceService_ReadUnbilledClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBillingInvoiceService_ReadUnbilledClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledClient) Recv() (*InvoiceDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*InvoiceDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBillingInvoiceService_ReadUnbilledClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadUnbilledClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingInvoiceService_ReadUnbilledClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadUnbilledClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingInvoiceService_ReadUnbilledClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBillingInvoiceService_ReadUnbilledClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledClient)(nil).Trailer))
}

// MockBillingInvoiceServiceServer is a mock of BillingInvoiceServiceServer interface.
type MockBillingInvoiceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInvoiceServiceServerMockRecorder
}

// MockBillingInvoiceServiceServerMockRecorder is the mock recorder for MockBillingInvoiceServiceServer.
type MockBillingInvoiceServiceServerMockRecorder struct {
	mock *MockBillingInvoiceServiceServer
}

// NewMockBillingInvoiceServiceServer creates a new mock instance.
func NewMockBillingInvoiceServiceServer(ctrl *gomock.Controller) *MockBillingInvoiceServiceServer {
	mock := &MockBillingInvoiceServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingInvoiceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInvoiceServiceServer) EXPECT() *MockBillingInvoiceServiceServerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingInvoiceServiceServer) Read(arg0 context.Context, arg1 *BillingInvoiceFilter) (*BillingInvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*BillingInvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingInvoiceServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingInvoiceServiceServer)(nil).Read), arg0, arg1)
}

// ReadDetail mocks base method.
func (m *MockBillingInvoiceServiceServer) ReadDetail(arg0 *InvoiceId, arg1 BillingInvoiceService_ReadDetailServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadDetail indicates an expected call of ReadDetail.
func (mr *MockBillingInvoiceServiceServerMockRecorder) ReadDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDetail", reflect.TypeOf((*MockBillingInvoiceServiceServer)(nil).ReadDetail), arg0, arg1)
}

// ReadStatement mocks base method.
func (m *MockBillingInvoiceServiceServer) ReadStatement(arg0 context.Context, arg1 *InvoiceId) (*Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStatement", arg0, arg1)
	ret0, _ := ret[0].(*Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStatement indicates an expected call of ReadStatement.
func (mr *MockBillingInvoiceServiceServerMockRecorder) ReadStatement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStatement", reflect.TypeOf((*MockBillingInvoiceServiceServer)(nil).ReadStatement), arg0, arg1)
}

// ReadUnbilled mocks base method.
func (m *MockBillingInvoiceServiceServer) ReadUnbilled(arg0 *BillingAccount, arg1 BillingInvoiceService_ReadUnbilledServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUnbilled", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadUnbilled indicates an expected call of ReadUnbilled.
func (mr *MockBillingInvoiceServiceServerMockRecorder) ReadUnbilled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnbilled", reflect.TypeOf((*MockBillingInvoiceServiceServer)(nil).ReadUnbilled), arg0, arg1)
}

// mustEmbedUnimplementedBillingInvoiceServiceServer mocks base method.
func (m *MockBillingInvoiceServiceServer) mustEmbedUnimplementedBillingInvoiceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingInvoiceServiceServer")
}

// mustEmbedUnimplementedBillingInvoiceServiceServer indicates an expected call of mustEmbedUnimplementedBillingInvoiceServiceServer.
func (mr *MockBillingInvoiceServiceServerMockRecorder) mustEmbedUnimplementedBillingInvoiceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingInvoiceServiceServer", reflect.TypeOf((*MockBillingInvoiceServiceServer)(nil).mustEmbedUnimplementedBillingInvoiceServiceServer))
}

// MockUnsafeBillingInvoiceServiceServer is a mock of UnsafeBillingInvoiceServiceServer interface.
type MockUnsafeBillingInvoiceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingInvoiceServiceServerMockRecorder
}

// MockUnsafeBillingInvoiceServiceServerMockRecorder is the mock recorder for MockUnsafeBillingInvoiceServiceServer.
type MockUnsafeBillingInvoiceServiceServerMockRecorder struct {
	mock *MockUnsafeBillingInvoiceServiceServer
}

// NewMockUnsafeBillingInvoiceServiceServer creates a new mock instance.
func NewMockUnsafeBillingInvoiceServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingInvoiceServiceServer {
	mock := &MockUnsafeBillingInvoiceServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingInvoiceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingInvoiceServiceServer) EXPECT() *MockUnsafeBillingInvoiceServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingInvoiceServiceServer mocks base method.
func (m *MockUnsafeBillingInvoiceServiceServer) mustEmbedUnimplementedBillingInvoiceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingInvoiceServiceServer")
}

// mustEmbedUnimplementedBillingInvoiceServiceServer indicates an expected call of mustEmbedUnimplementedBillingInvoiceServiceServer.
func (mr *MockUnsafeBillingInvoiceServiceServerMockRecorder) mustEmbedUnimplementedBillingInvoiceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingInvoiceServiceServer", reflect.TypeOf((*MockUnsafeBillingInvoiceServiceServer)(nil).mustEmbedUnimplementedBillingInvoiceServiceServer))
}

// MockBillingInvoiceService_ReadDetailServer is a mock of BillingInvoiceService_ReadDetailServer interface.
type MockBillingInvoiceService_ReadDetailServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInvoiceService_ReadDetailServerMockRecorder
}

// MockBillingInvoiceService_ReadDetailServerMockRecorder is the mock recorder for MockBillingInvoiceService_ReadDetailServer.
type MockBillingInvoiceService_ReadDetailServerMockRecorder struct {
	mock *MockBillingInvoiceService_ReadDetailServer
}

// NewMockBillingInvoiceService_ReadDetailServer creates a new mock instance.
func NewMockBillingInvoiceService_ReadDetailServer(ctrl *gomock.Controller) *MockBillingInvoiceService_ReadDetailServer {
	mock := &MockBillingInvoiceService_ReadDetailServer{ctrl: ctrl}
	mock.recorder = &MockBillingInvoiceService_ReadDetailServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInvoiceService_ReadDetailServer) EXPECT() *MockBillingInvoiceService_ReadDetailServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBillingInvoiceService_ReadDetailServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingInvoiceService_ReadDetailServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadDetailServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingInvoiceService_ReadDetailServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBillingInvoiceService_ReadDetailServer) Send(arg0 *InvoiceDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBillingInvoiceService_ReadDetailServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBillingInvoiceService_ReadDetailServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBillingInvoiceService_ReadDetailServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadDetailServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingInvoiceService_ReadDetailServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBillingInvoiceService_ReadDetailServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBillingInvoiceService_ReadDetailServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBillingInvoiceService_ReadDetailServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBillingInvoiceService_ReadDetailServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBillingInvoiceService_ReadDetailServer)(nil).SetTrailer), arg0)
}

// MockBillingInvoiceService_ReadUnbilledServer is a mock of BillingInvoiceService_ReadUnbilledServer interface.
type MockBillingInvoiceService_ReadUnbilledServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInvoiceService_ReadUnbilledServerMockRecorder
}

// MockBillingInvoiceService_ReadUnbilledServerMockRecorder is the mock recorder for MockBillingInvoiceService_ReadUnbilledServer.
type MockBillingInvoiceService_ReadUnbilledServerMockRecorder struct {
	mock *MockBillingInvoiceService_ReadUnbilledServer
}

// NewMockBillingInvoiceService_ReadUnbilledServer creates a new mock instance.
func NewMockBillingInvoiceService_ReadUnbilledServer(ctrl *gomock.Controller) *MockBillingInvoiceService_ReadUnbilledServer {
	mock := &MockBillingInvoiceService_ReadUnbilledServer{ctrl: ctrl}
	mock.recorder = &MockBillingInvoiceService_ReadUnbilledServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInvoiceService_ReadUnbilledServer) EXPECT() *MockBillingInvoiceService_ReadUnbilledServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingInvoiceService_ReadUnbilledServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadUnbilledServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingInvoiceService_ReadUnbilledServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledServer) Send(arg0 *InvoiceDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBillingInvoiceService_ReadUnbilledServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBillingInvoiceService_ReadUnbilledServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBillingInvoiceService_ReadUnbilledServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingInvoiceService_ReadUnbilledServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBillingInvoiceService_ReadUnbilledServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBillingInvoiceService_ReadUnbilledServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBillingInvoiceService_ReadUnbilledServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBillingInvoiceService_ReadUnbilledServer)(nil).SetTrailer), arg0)
}

// MockBillingProductCatalogSyncServiceClient is a mock of BillingProductCatalogSyncServiceClient interface.
type MockBillingProductCatalogSyncServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingProductCatalogSyncServiceClientMockRecorder
}

// MockBillingProductCatalogSyncServiceClientMockRecorder is the mock recorder for MockBillingProductCatalogSyncServiceClient.
type MockBillingProductCatalogSyncServiceClientMockRecorder struct {
	mock *MockBillingProductCatalogSyncServiceClient
}

// NewMockBillingProductCatalogSyncServiceClient creates a new mock instance.
func NewMockBillingProductCatalogSyncServiceClient(ctrl *gomock.Controller) *MockBillingProductCatalogSyncServiceClient {
	mock := &MockBillingProductCatalogSyncServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingProductCatalogSyncServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingProductCatalogSyncServiceClient) EXPECT() *MockBillingProductCatalogSyncServiceClientMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockBillingProductCatalogSyncServiceClient) Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockBillingProductCatalogSyncServiceClientMockRecorder) Sync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockBillingProductCatalogSyncServiceClient)(nil).Sync), varargs...)
}

// MockBillingProductCatalogSyncServiceServer is a mock of BillingProductCatalogSyncServiceServer interface.
type MockBillingProductCatalogSyncServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingProductCatalogSyncServiceServerMockRecorder
}

// MockBillingProductCatalogSyncServiceServerMockRecorder is the mock recorder for MockBillingProductCatalogSyncServiceServer.
type MockBillingProductCatalogSyncServiceServerMockRecorder struct {
	mock *MockBillingProductCatalogSyncServiceServer
}

// NewMockBillingProductCatalogSyncServiceServer creates a new mock instance.
func NewMockBillingProductCatalogSyncServiceServer(ctrl *gomock.Controller) *MockBillingProductCatalogSyncServiceServer {
	mock := &MockBillingProductCatalogSyncServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingProductCatalogSyncServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingProductCatalogSyncServiceServer) EXPECT() *MockBillingProductCatalogSyncServiceServerMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockBillingProductCatalogSyncServiceServer) Sync(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockBillingProductCatalogSyncServiceServerMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockBillingProductCatalogSyncServiceServer)(nil).Sync), arg0, arg1)
}

// mustEmbedUnimplementedBillingProductCatalogSyncServiceServer mocks base method.
func (m *MockBillingProductCatalogSyncServiceServer) mustEmbedUnimplementedBillingProductCatalogSyncServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingProductCatalogSyncServiceServer")
}

// mustEmbedUnimplementedBillingProductCatalogSyncServiceServer indicates an expected call of mustEmbedUnimplementedBillingProductCatalogSyncServiceServer.
func (mr *MockBillingProductCatalogSyncServiceServerMockRecorder) mustEmbedUnimplementedBillingProductCatalogSyncServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingProductCatalogSyncServiceServer", reflect.TypeOf((*MockBillingProductCatalogSyncServiceServer)(nil).mustEmbedUnimplementedBillingProductCatalogSyncServiceServer))
}

// MockUnsafeBillingProductCatalogSyncServiceServer is a mock of UnsafeBillingProductCatalogSyncServiceServer interface.
type MockUnsafeBillingProductCatalogSyncServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingProductCatalogSyncServiceServerMockRecorder
}

// MockUnsafeBillingProductCatalogSyncServiceServerMockRecorder is the mock recorder for MockUnsafeBillingProductCatalogSyncServiceServer.
type MockUnsafeBillingProductCatalogSyncServiceServerMockRecorder struct {
	mock *MockUnsafeBillingProductCatalogSyncServiceServer
}

// NewMockUnsafeBillingProductCatalogSyncServiceServer creates a new mock instance.
func NewMockUnsafeBillingProductCatalogSyncServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingProductCatalogSyncServiceServer {
	mock := &MockUnsafeBillingProductCatalogSyncServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingProductCatalogSyncServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingProductCatalogSyncServiceServer) EXPECT() *MockUnsafeBillingProductCatalogSyncServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingProductCatalogSyncServiceServer mocks base method.
func (m *MockUnsafeBillingProductCatalogSyncServiceServer) mustEmbedUnimplementedBillingProductCatalogSyncServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingProductCatalogSyncServiceServer")
}

// mustEmbedUnimplementedBillingProductCatalogSyncServiceServer indicates an expected call of mustEmbedUnimplementedBillingProductCatalogSyncServiceServer.
func (mr *MockUnsafeBillingProductCatalogSyncServiceServerMockRecorder) mustEmbedUnimplementedBillingProductCatalogSyncServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingProductCatalogSyncServiceServer", reflect.TypeOf((*MockUnsafeBillingProductCatalogSyncServiceServer)(nil).mustEmbedUnimplementedBillingProductCatalogSyncServiceServer))
}

// MockPaymentServiceClient is a mock of PaymentServiceClient interface.
type MockPaymentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceClientMockRecorder
}

// MockPaymentServiceClientMockRecorder is the mock recorder for MockPaymentServiceClient.
type MockPaymentServiceClientMockRecorder struct {
	mock *MockPaymentServiceClient
}

// NewMockPaymentServiceClient creates a new mock instance.
func NewMockPaymentServiceClient(ctrl *gomock.Controller) *MockPaymentServiceClient {
	mock := &MockPaymentServiceClient{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceClient) EXPECT() *MockPaymentServiceClientMockRecorder {
	return m.recorder
}

// AddPaymentPostProcessing mocks base method.
func (m *MockPaymentServiceClient) AddPaymentPostProcessing(ctx context.Context, in *PostPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPaymentPostProcessing", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPaymentPostProcessing indicates an expected call of AddPaymentPostProcessing.
func (mr *MockPaymentServiceClientMockRecorder) AddPaymentPostProcessing(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentPostProcessing", reflect.TypeOf((*MockPaymentServiceClient)(nil).AddPaymentPostProcessing), varargs...)
}

// AddPaymentPreProcessing mocks base method.
func (m *MockPaymentServiceClient) AddPaymentPreProcessing(ctx context.Context, in *PrePaymentRequest, opts ...grpc.CallOption) (*PrePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPaymentPreProcessing", varargs...)
	ret0, _ := ret[0].(*PrePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPaymentPreProcessing indicates an expected call of AddPaymentPreProcessing.
func (mr *MockPaymentServiceClientMockRecorder) AddPaymentPreProcessing(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentPreProcessing", reflect.TypeOf((*MockPaymentServiceClient)(nil).AddPaymentPreProcessing), varargs...)
}

// MockPaymentServiceServer is a mock of PaymentServiceServer interface.
type MockPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceServerMockRecorder
}

// MockPaymentServiceServerMockRecorder is the mock recorder for MockPaymentServiceServer.
type MockPaymentServiceServerMockRecorder struct {
	mock *MockPaymentServiceServer
}

// NewMockPaymentServiceServer creates a new mock instance.
func NewMockPaymentServiceServer(ctrl *gomock.Controller) *MockPaymentServiceServer {
	mock := &MockPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceServer) EXPECT() *MockPaymentServiceServerMockRecorder {
	return m.recorder
}

// AddPaymentPostProcessing mocks base method.
func (m *MockPaymentServiceServer) AddPaymentPostProcessing(arg0 context.Context, arg1 *PostPaymentRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPaymentPostProcessing", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPaymentPostProcessing indicates an expected call of AddPaymentPostProcessing.
func (mr *MockPaymentServiceServerMockRecorder) AddPaymentPostProcessing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentPostProcessing", reflect.TypeOf((*MockPaymentServiceServer)(nil).AddPaymentPostProcessing), arg0, arg1)
}

// AddPaymentPreProcessing mocks base method.
func (m *MockPaymentServiceServer) AddPaymentPreProcessing(arg0 context.Context, arg1 *PrePaymentRequest) (*PrePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPaymentPreProcessing", arg0, arg1)
	ret0, _ := ret[0].(*PrePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPaymentPreProcessing indicates an expected call of AddPaymentPreProcessing.
func (mr *MockPaymentServiceServerMockRecorder) AddPaymentPreProcessing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentPreProcessing", reflect.TypeOf((*MockPaymentServiceServer)(nil).AddPaymentPreProcessing), arg0, arg1)
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockPaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockPaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}

// MockUnsafePaymentServiceServer is a mock of UnsafePaymentServiceServer interface.
type MockUnsafePaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePaymentServiceServerMockRecorder
}

// MockUnsafePaymentServiceServerMockRecorder is the mock recorder for MockUnsafePaymentServiceServer.
type MockUnsafePaymentServiceServerMockRecorder struct {
	mock *MockUnsafePaymentServiceServer
}

// NewMockUnsafePaymentServiceServer creates a new mock instance.
func NewMockUnsafePaymentServiceServer(ctrl *gomock.Controller) *MockUnsafePaymentServiceServer {
	mock := &MockUnsafePaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePaymentServiceServer) EXPECT() *MockUnsafePaymentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockUnsafePaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockUnsafePaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockUnsafePaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}

// MockBillingInstancesServiceClient is a mock of BillingInstancesServiceClient interface.
type MockBillingInstancesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInstancesServiceClientMockRecorder
}

// MockBillingInstancesServiceClientMockRecorder is the mock recorder for MockBillingInstancesServiceClient.
type MockBillingInstancesServiceClientMockRecorder struct {
	mock *MockBillingInstancesServiceClient
}

// NewMockBillingInstancesServiceClient creates a new mock instance.
func NewMockBillingInstancesServiceClient(ctrl *gomock.Controller) *MockBillingInstancesServiceClient {
	mock := &MockBillingInstancesServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingInstancesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInstancesServiceClient) EXPECT() *MockBillingInstancesServiceClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingInstancesServiceClient) Read(ctx context.Context, in *BillingPaidInstanceFilter, opts ...grpc.CallOption) (*BillingPaidInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*BillingPaidInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingInstancesServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingInstancesServiceClient)(nil).Read), varargs...)
}

// MockBillingInstancesServiceServer is a mock of BillingInstancesServiceServer interface.
type MockBillingInstancesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingInstancesServiceServerMockRecorder
}

// MockBillingInstancesServiceServerMockRecorder is the mock recorder for MockBillingInstancesServiceServer.
type MockBillingInstancesServiceServerMockRecorder struct {
	mock *MockBillingInstancesServiceServer
}

// NewMockBillingInstancesServiceServer creates a new mock instance.
func NewMockBillingInstancesServiceServer(ctrl *gomock.Controller) *MockBillingInstancesServiceServer {
	mock := &MockBillingInstancesServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingInstancesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingInstancesServiceServer) EXPECT() *MockBillingInstancesServiceServerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingInstancesServiceServer) Read(arg0 context.Context, arg1 *BillingPaidInstanceFilter) (*BillingPaidInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*BillingPaidInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingInstancesServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingInstancesServiceServer)(nil).Read), arg0, arg1)
}

// mustEmbedUnimplementedBillingInstancesServiceServer mocks base method.
func (m *MockBillingInstancesServiceServer) mustEmbedUnimplementedBillingInstancesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingInstancesServiceServer")
}

// mustEmbedUnimplementedBillingInstancesServiceServer indicates an expected call of mustEmbedUnimplementedBillingInstancesServiceServer.
func (mr *MockBillingInstancesServiceServerMockRecorder) mustEmbedUnimplementedBillingInstancesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingInstancesServiceServer", reflect.TypeOf((*MockBillingInstancesServiceServer)(nil).mustEmbedUnimplementedBillingInstancesServiceServer))
}

// MockUnsafeBillingInstancesServiceServer is a mock of UnsafeBillingInstancesServiceServer interface.
type MockUnsafeBillingInstancesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingInstancesServiceServerMockRecorder
}

// MockUnsafeBillingInstancesServiceServerMockRecorder is the mock recorder for MockUnsafeBillingInstancesServiceServer.
type MockUnsafeBillingInstancesServiceServerMockRecorder struct {
	mock *MockUnsafeBillingInstancesServiceServer
}

// NewMockUnsafeBillingInstancesServiceServer creates a new mock instance.
func NewMockUnsafeBillingInstancesServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingInstancesServiceServer {
	mock := &MockUnsafeBillingInstancesServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingInstancesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingInstancesServiceServer) EXPECT() *MockUnsafeBillingInstancesServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingInstancesServiceServer mocks base method.
func (m *MockUnsafeBillingInstancesServiceServer) mustEmbedUnimplementedBillingInstancesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingInstancesServiceServer")
}

// mustEmbedUnimplementedBillingInstancesServiceServer indicates an expected call of mustEmbedUnimplementedBillingInstancesServiceServer.
func (mr *MockUnsafeBillingInstancesServiceServerMockRecorder) mustEmbedUnimplementedBillingInstancesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingInstancesServiceServer", reflect.TypeOf((*MockUnsafeBillingInstancesServiceServer)(nil).mustEmbedUnimplementedBillingInstancesServiceServer))
}

// MockBillingUsageServiceClient is a mock of BillingUsageServiceClient interface.
type MockBillingUsageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingUsageServiceClientMockRecorder
}

// MockBillingUsageServiceClientMockRecorder is the mock recorder for MockBillingUsageServiceClient.
type MockBillingUsageServiceClientMockRecorder struct {
	mock *MockBillingUsageServiceClient
}

// NewMockBillingUsageServiceClient creates a new mock instance.
func NewMockBillingUsageServiceClient(ctrl *gomock.Controller) *MockBillingUsageServiceClient {
	mock := &MockBillingUsageServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingUsageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingUsageServiceClient) EXPECT() *MockBillingUsageServiceClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingUsageServiceClient) Read(ctx context.Context, in *BillingUsageFilter, opts ...grpc.CallOption) (*BillingUsageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*BillingUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingUsageServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingUsageServiceClient)(nil).Read), varargs...)
}

// MockBillingUsageServiceServer is a mock of BillingUsageServiceServer interface.
type MockBillingUsageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingUsageServiceServerMockRecorder
}

// MockBillingUsageServiceServerMockRecorder is the mock recorder for MockBillingUsageServiceServer.
type MockBillingUsageServiceServerMockRecorder struct {
	mock *MockBillingUsageServiceServer
}

// NewMockBillingUsageServiceServer creates a new mock instance.
func NewMockBillingUsageServiceServer(ctrl *gomock.Controller) *MockBillingUsageServiceServer {
	mock := &MockBillingUsageServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingUsageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingUsageServiceServer) EXPECT() *MockBillingUsageServiceServerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBillingUsageServiceServer) Read(arg0 context.Context, arg1 *BillingUsageFilter) (*BillingUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*BillingUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBillingUsageServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBillingUsageServiceServer)(nil).Read), arg0, arg1)
}

// mustEmbedUnimplementedBillingUsageServiceServer mocks base method.
func (m *MockBillingUsageServiceServer) mustEmbedUnimplementedBillingUsageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingUsageServiceServer")
}

// mustEmbedUnimplementedBillingUsageServiceServer indicates an expected call of mustEmbedUnimplementedBillingUsageServiceServer.
func (mr *MockBillingUsageServiceServerMockRecorder) mustEmbedUnimplementedBillingUsageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingUsageServiceServer", reflect.TypeOf((*MockBillingUsageServiceServer)(nil).mustEmbedUnimplementedBillingUsageServiceServer))
}

// MockUnsafeBillingUsageServiceServer is a mock of UnsafeBillingUsageServiceServer interface.
type MockUnsafeBillingUsageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingUsageServiceServerMockRecorder
}

// MockUnsafeBillingUsageServiceServerMockRecorder is the mock recorder for MockUnsafeBillingUsageServiceServer.
type MockUnsafeBillingUsageServiceServerMockRecorder struct {
	mock *MockUnsafeBillingUsageServiceServer
}

// NewMockUnsafeBillingUsageServiceServer creates a new mock instance.
func NewMockUnsafeBillingUsageServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingUsageServiceServer {
	mock := &MockUnsafeBillingUsageServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingUsageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingUsageServiceServer) EXPECT() *MockUnsafeBillingUsageServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingUsageServiceServer mocks base method.
func (m *MockUnsafeBillingUsageServiceServer) mustEmbedUnimplementedBillingUsageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingUsageServiceServer")
}

// mustEmbedUnimplementedBillingUsageServiceServer indicates an expected call of mustEmbedUnimplementedBillingUsageServiceServer.
func (mr *MockUnsafeBillingUsageServiceServerMockRecorder) mustEmbedUnimplementedBillingUsageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingUsageServiceServer", reflect.TypeOf((*MockUnsafeBillingUsageServiceServer)(nil).mustEmbedUnimplementedBillingUsageServiceServer))
}

// MockBillingOpsActionServiceClient is a mock of BillingOpsActionServiceClient interface.
type MockBillingOpsActionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingOpsActionServiceClientMockRecorder
}

// MockBillingOpsActionServiceClientMockRecorder is the mock recorder for MockBillingOpsActionServiceClient.
type MockBillingOpsActionServiceClientMockRecorder struct {
	mock *MockBillingOpsActionServiceClient
}

// NewMockBillingOpsActionServiceClient creates a new mock instance.
func NewMockBillingOpsActionServiceClient(ctrl *gomock.Controller) *MockBillingOpsActionServiceClient {
	mock := &MockBillingOpsActionServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingOpsActionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingOpsActionServiceClient) EXPECT() *MockBillingOpsActionServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingOpsActionServiceClient) Create(ctx context.Context, in *SchedulerAction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingOpsActionServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingOpsActionServiceClient)(nil).Create), varargs...)
}

// MockBillingOpsActionServiceServer is a mock of BillingOpsActionServiceServer interface.
type MockBillingOpsActionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingOpsActionServiceServerMockRecorder
}

// MockBillingOpsActionServiceServerMockRecorder is the mock recorder for MockBillingOpsActionServiceServer.
type MockBillingOpsActionServiceServerMockRecorder struct {
	mock *MockBillingOpsActionServiceServer
}

// NewMockBillingOpsActionServiceServer creates a new mock instance.
func NewMockBillingOpsActionServiceServer(ctrl *gomock.Controller) *MockBillingOpsActionServiceServer {
	mock := &MockBillingOpsActionServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingOpsActionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingOpsActionServiceServer) EXPECT() *MockBillingOpsActionServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingOpsActionServiceServer) Create(arg0 context.Context, arg1 *SchedulerAction) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingOpsActionServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingOpsActionServiceServer)(nil).Create), arg0, arg1)
}

// mustEmbedUnimplementedBillingOpsActionServiceServer mocks base method.
func (m *MockBillingOpsActionServiceServer) mustEmbedUnimplementedBillingOpsActionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingOpsActionServiceServer")
}

// mustEmbedUnimplementedBillingOpsActionServiceServer indicates an expected call of mustEmbedUnimplementedBillingOpsActionServiceServer.
func (mr *MockBillingOpsActionServiceServerMockRecorder) mustEmbedUnimplementedBillingOpsActionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingOpsActionServiceServer", reflect.TypeOf((*MockBillingOpsActionServiceServer)(nil).mustEmbedUnimplementedBillingOpsActionServiceServer))
}

// MockUnsafeBillingOpsActionServiceServer is a mock of UnsafeBillingOpsActionServiceServer interface.
type MockUnsafeBillingOpsActionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingOpsActionServiceServerMockRecorder
}

// MockUnsafeBillingOpsActionServiceServerMockRecorder is the mock recorder for MockUnsafeBillingOpsActionServiceServer.
type MockUnsafeBillingOpsActionServiceServerMockRecorder struct {
	mock *MockUnsafeBillingOpsActionServiceServer
}

// NewMockUnsafeBillingOpsActionServiceServer creates a new mock instance.
func NewMockUnsafeBillingOpsActionServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingOpsActionServiceServer {
	mock := &MockUnsafeBillingOpsActionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingOpsActionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingOpsActionServiceServer) EXPECT() *MockUnsafeBillingOpsActionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingOpsActionServiceServer mocks base method.
func (m *MockUnsafeBillingOpsActionServiceServer) mustEmbedUnimplementedBillingOpsActionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingOpsActionServiceServer")
}

// mustEmbedUnimplementedBillingOpsActionServiceServer indicates an expected call of mustEmbedUnimplementedBillingOpsActionServiceServer.
func (mr *MockUnsafeBillingOpsActionServiceServerMockRecorder) mustEmbedUnimplementedBillingOpsActionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingOpsActionServiceServer", reflect.TypeOf((*MockUnsafeBillingOpsActionServiceServer)(nil).mustEmbedUnimplementedBillingOpsActionServiceServer))
}

// MockBillingDeactivateInstancesServiceClient is a mock of BillingDeactivateInstancesServiceClient interface.
type MockBillingDeactivateInstancesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingDeactivateInstancesServiceClientMockRecorder
}

// MockBillingDeactivateInstancesServiceClientMockRecorder is the mock recorder for MockBillingDeactivateInstancesServiceClient.
type MockBillingDeactivateInstancesServiceClientMockRecorder struct {
	mock *MockBillingDeactivateInstancesServiceClient
}

// NewMockBillingDeactivateInstancesServiceClient creates a new mock instance.
func NewMockBillingDeactivateInstancesServiceClient(ctrl *gomock.Controller) *MockBillingDeactivateInstancesServiceClient {
	mock := &MockBillingDeactivateInstancesServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingDeactivateInstancesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingDeactivateInstancesServiceClient) EXPECT() *MockBillingDeactivateInstancesServiceClientMockRecorder {
	return m.recorder
}

// GetDeactivateInstances mocks base method.
func (m *MockBillingDeactivateInstancesServiceClient) GetDeactivateInstances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeactivateInstancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeactivateInstances", varargs...)
	ret0, _ := ret[0].(*DeactivateInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeactivateInstances indicates an expected call of GetDeactivateInstances.
func (mr *MockBillingDeactivateInstancesServiceClientMockRecorder) GetDeactivateInstances(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeactivateInstances", reflect.TypeOf((*MockBillingDeactivateInstancesServiceClient)(nil).GetDeactivateInstances), varargs...)
}

// GetDeactivateInstancesStream mocks base method.
func (m *MockBillingDeactivateInstancesServiceClient) GetDeactivateInstancesStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BillingDeactivateInstancesService_GetDeactivateInstancesStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeactivateInstancesStream", varargs...)
	ret0, _ := ret[0].(BillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeactivateInstancesStream indicates an expected call of GetDeactivateInstancesStream.
func (mr *MockBillingDeactivateInstancesServiceClientMockRecorder) GetDeactivateInstancesStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeactivateInstancesStream", reflect.TypeOf((*MockBillingDeactivateInstancesServiceClient)(nil).GetDeactivateInstancesStream), varargs...)
}

// GetDeactivatedServiceAccounts mocks base method.
func (m *MockBillingDeactivateInstancesServiceClient) GetDeactivatedServiceAccounts(ctx context.Context, in *GetDeactivatedAccountsRequest, opts ...grpc.CallOption) (BillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeactivatedServiceAccounts", varargs...)
	ret0, _ := ret[0].(BillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeactivatedServiceAccounts indicates an expected call of GetDeactivatedServiceAccounts.
func (mr *MockBillingDeactivateInstancesServiceClientMockRecorder) GetDeactivatedServiceAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeactivatedServiceAccounts", reflect.TypeOf((*MockBillingDeactivateInstancesServiceClient)(nil).GetDeactivatedServiceAccounts), varargs...)
}

// Ping mocks base method.
func (m *MockBillingDeactivateInstancesServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockBillingDeactivateInstancesServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBillingDeactivateInstancesServiceClient)(nil).Ping), varargs...)
}

// MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient is a mock of BillingDeactivateInstancesService_GetDeactivateInstancesStreamClient interface.
type MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder
}

// MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder is the mock recorder for MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient.
type MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder struct {
	mock *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient
}

// NewMockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient creates a new mock instance.
func NewMockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient(ctrl *gomock.Controller) *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient {
	mock := &MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient{ctrl: ctrl}
	mock.recorder = &MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) EXPECT() *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) Recv() (*DeactivateInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*DeactivateInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamClient)(nil).Trailer))
}

// MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient is a mock of BillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient interface.
type MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder
}

// MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder is the mock recorder for MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient.
type MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder struct {
	mock *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient
}

// NewMockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient creates a new mock instance.
func NewMockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient(ctrl *gomock.Controller) *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient {
	mock := &MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient{ctrl: ctrl}
	mock.recorder = &MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) EXPECT() *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) Recv() (*DeactivateAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*DeactivateAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient)(nil).Trailer))
}

// MockBillingDeactivateInstancesServiceServer is a mock of BillingDeactivateInstancesServiceServer interface.
type MockBillingDeactivateInstancesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingDeactivateInstancesServiceServerMockRecorder
}

// MockBillingDeactivateInstancesServiceServerMockRecorder is the mock recorder for MockBillingDeactivateInstancesServiceServer.
type MockBillingDeactivateInstancesServiceServerMockRecorder struct {
	mock *MockBillingDeactivateInstancesServiceServer
}

// NewMockBillingDeactivateInstancesServiceServer creates a new mock instance.
func NewMockBillingDeactivateInstancesServiceServer(ctrl *gomock.Controller) *MockBillingDeactivateInstancesServiceServer {
	mock := &MockBillingDeactivateInstancesServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingDeactivateInstancesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingDeactivateInstancesServiceServer) EXPECT() *MockBillingDeactivateInstancesServiceServerMockRecorder {
	return m.recorder
}

// GetDeactivateInstances mocks base method.
func (m *MockBillingDeactivateInstancesServiceServer) GetDeactivateInstances(arg0 context.Context, arg1 *emptypb.Empty) (*DeactivateInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeactivateInstances", arg0, arg1)
	ret0, _ := ret[0].(*DeactivateInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeactivateInstances indicates an expected call of GetDeactivateInstances.
func (mr *MockBillingDeactivateInstancesServiceServerMockRecorder) GetDeactivateInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeactivateInstances", reflect.TypeOf((*MockBillingDeactivateInstancesServiceServer)(nil).GetDeactivateInstances), arg0, arg1)
}

// GetDeactivateInstancesStream mocks base method.
func (m *MockBillingDeactivateInstancesServiceServer) GetDeactivateInstancesStream(arg0 *emptypb.Empty, arg1 BillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeactivateInstancesStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeactivateInstancesStream indicates an expected call of GetDeactivateInstancesStream.
func (mr *MockBillingDeactivateInstancesServiceServerMockRecorder) GetDeactivateInstancesStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeactivateInstancesStream", reflect.TypeOf((*MockBillingDeactivateInstancesServiceServer)(nil).GetDeactivateInstancesStream), arg0, arg1)
}

// GetDeactivatedServiceAccounts mocks base method.
func (m *MockBillingDeactivateInstancesServiceServer) GetDeactivatedServiceAccounts(arg0 *GetDeactivatedAccountsRequest, arg1 BillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeactivatedServiceAccounts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeactivatedServiceAccounts indicates an expected call of GetDeactivatedServiceAccounts.
func (mr *MockBillingDeactivateInstancesServiceServerMockRecorder) GetDeactivatedServiceAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeactivatedServiceAccounts", reflect.TypeOf((*MockBillingDeactivateInstancesServiceServer)(nil).GetDeactivatedServiceAccounts), arg0, arg1)
}

// Ping mocks base method.
func (m *MockBillingDeactivateInstancesServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockBillingDeactivateInstancesServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBillingDeactivateInstancesServiceServer)(nil).Ping), arg0, arg1)
}

// mustEmbedUnimplementedBillingDeactivateInstancesServiceServer mocks base method.
func (m *MockBillingDeactivateInstancesServiceServer) mustEmbedUnimplementedBillingDeactivateInstancesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingDeactivateInstancesServiceServer")
}

// mustEmbedUnimplementedBillingDeactivateInstancesServiceServer indicates an expected call of mustEmbedUnimplementedBillingDeactivateInstancesServiceServer.
func (mr *MockBillingDeactivateInstancesServiceServerMockRecorder) mustEmbedUnimplementedBillingDeactivateInstancesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingDeactivateInstancesServiceServer", reflect.TypeOf((*MockBillingDeactivateInstancesServiceServer)(nil).mustEmbedUnimplementedBillingDeactivateInstancesServiceServer))
}

// MockUnsafeBillingDeactivateInstancesServiceServer is a mock of UnsafeBillingDeactivateInstancesServiceServer interface.
type MockUnsafeBillingDeactivateInstancesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingDeactivateInstancesServiceServerMockRecorder
}

// MockUnsafeBillingDeactivateInstancesServiceServerMockRecorder is the mock recorder for MockUnsafeBillingDeactivateInstancesServiceServer.
type MockUnsafeBillingDeactivateInstancesServiceServerMockRecorder struct {
	mock *MockUnsafeBillingDeactivateInstancesServiceServer
}

// NewMockUnsafeBillingDeactivateInstancesServiceServer creates a new mock instance.
func NewMockUnsafeBillingDeactivateInstancesServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingDeactivateInstancesServiceServer {
	mock := &MockUnsafeBillingDeactivateInstancesServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingDeactivateInstancesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingDeactivateInstancesServiceServer) EXPECT() *MockUnsafeBillingDeactivateInstancesServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingDeactivateInstancesServiceServer mocks base method.
func (m *MockUnsafeBillingDeactivateInstancesServiceServer) mustEmbedUnimplementedBillingDeactivateInstancesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingDeactivateInstancesServiceServer")
}

// mustEmbedUnimplementedBillingDeactivateInstancesServiceServer indicates an expected call of mustEmbedUnimplementedBillingDeactivateInstancesServiceServer.
func (mr *MockUnsafeBillingDeactivateInstancesServiceServerMockRecorder) mustEmbedUnimplementedBillingDeactivateInstancesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingDeactivateInstancesServiceServer", reflect.TypeOf((*MockUnsafeBillingDeactivateInstancesServiceServer)(nil).mustEmbedUnimplementedBillingDeactivateInstancesServiceServer))
}

// MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer is a mock of BillingDeactivateInstancesService_GetDeactivateInstancesStreamServer interface.
type MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder
}

// MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder is the mock recorder for MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer.
type MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder struct {
	mock *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer
}

// NewMockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer creates a new mock instance.
func NewMockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer(ctrl *gomock.Controller) *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer {
	mock := &MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer{ctrl: ctrl}
	mock.recorder = &MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) EXPECT() *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) Send(arg0 *DeactivateInstancesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivateInstancesStreamServer)(nil).SetTrailer), arg0)
}

// MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer is a mock of BillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer interface.
type MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder
}

// MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder is the mock recorder for MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer.
type MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder struct {
	mock *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer
}

// NewMockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer creates a new mock instance.
func NewMockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer(ctrl *gomock.Controller) *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer {
	mock := &MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer{ctrl: ctrl}
	mock.recorder = &MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) EXPECT() *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) Send(arg0 *DeactivateAccounts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer)(nil).SetTrailer), arg0)
}
