// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/iks_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockIksClient is a mock of IksClient interface.
type MockIksClient struct {
	ctrl     *gomock.Controller
	recorder *MockIksClientMockRecorder
}

// MockIksClientMockRecorder is the mock recorder for MockIksClient.
type MockIksClientMockRecorder struct {
	mock *MockIksClient
}

// NewMockIksClient creates a new mock instance.
func NewMockIksClient(ctrl *gomock.Controller) *MockIksClient {
	mock := &MockIksClient{ctrl: ctrl}
	mock.recorder = &MockIksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIksClient) EXPECT() *MockIksClientMockRecorder {
	return m.recorder
}

// CreateNewCluster mocks base method.
func (m *MockIksClient) CreateNewCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNewCluster", varargs...)
	ret0, _ := ret[0].(*ClusterCreateResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewCluster indicates an expected call of CreateNewCluster.
func (mr *MockIksClientMockRecorder) CreateNewCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCluster", reflect.TypeOf((*MockIksClient)(nil).CreateNewCluster), varargs...)
}

// CreateNewVip mocks base method.
func (m *MockIksClient) CreateNewVip(ctx context.Context, in *VipCreateRequest, opts ...grpc.CallOption) (*VipResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNewVip", varargs...)
	ret0, _ := ret[0].(*VipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewVip indicates an expected call of CreateNewVip.
func (mr *MockIksClientMockRecorder) CreateNewVip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewVip", reflect.TypeOf((*MockIksClient)(nil).CreateNewVip), varargs...)
}

// CreateNodeGroup mocks base method.
func (m *MockIksClient) CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupResponseForm, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNodeGroup", varargs...)
	ret0, _ := ret[0].(*NodeGroupResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeGroup indicates an expected call of CreateNodeGroup.
func (mr *MockIksClientMockRecorder) CreateNodeGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeGroup", reflect.TypeOf((*MockIksClient)(nil).CreateNodeGroup), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockIksClient) DeleteCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockIksClientMockRecorder) DeleteCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockIksClient)(nil).DeleteCluster), varargs...)
}

// DeleteFirewallRule mocks base method.
func (m *MockIksClient) DeleteFirewallRule(ctx context.Context, in *DeleteFirewallRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFirewallRule", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule.
func (mr *MockIksClientMockRecorder) DeleteFirewallRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockIksClient)(nil).DeleteFirewallRule), varargs...)
}

// DeleteNodeGroup mocks base method.
func (m *MockIksClient) DeleteNodeGroup(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNodeGroup", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeGroup indicates an expected call of DeleteNodeGroup.
func (mr *MockIksClientMockRecorder) DeleteNodeGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeGroup", reflect.TypeOf((*MockIksClient)(nil).DeleteNodeGroup), varargs...)
}

// DeleteNodeGroupInstance mocks base method.
func (m *MockIksClient) DeleteNodeGroupInstance(ctx context.Context, in *DeleteNodeGroupInstanceRequest, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNodeGroupInstance", varargs...)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeGroupInstance indicates an expected call of DeleteNodeGroupInstance.
func (mr *MockIksClientMockRecorder) DeleteNodeGroupInstance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeGroupInstance", reflect.TypeOf((*MockIksClient)(nil).DeleteNodeGroupInstance), varargs...)
}

// DeleteVip mocks base method.
func (m *MockIksClient) DeleteVip(ctx context.Context, in *VipId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVip", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVip indicates an expected call of DeleteVip.
func (mr *MockIksClientMockRecorder) DeleteVip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVip", reflect.TypeOf((*MockIksClient)(nil).DeleteVip), varargs...)
}

// EnableClusterStorage mocks base method.
func (m *MockIksClient) EnableClusterStorage(ctx context.Context, in *ClusterStorageRequest, opts ...grpc.CallOption) (*ClusterStorageStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableClusterStorage", varargs...)
	ret0, _ := ret[0].(*ClusterStorageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableClusterStorage indicates an expected call of EnableClusterStorage.
func (mr *MockIksClientMockRecorder) EnableClusterStorage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableClusterStorage", reflect.TypeOf((*MockIksClient)(nil).EnableClusterStorage), varargs...)
}

// GetCluster mocks base method.
func (m *MockIksClient) GetCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterResponseForm, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*ClusterResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockIksClientMockRecorder) GetCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockIksClient)(nil).GetCluster), varargs...)
}

// GetClusterStatus mocks base method.
func (m *MockIksClient) GetClusterStatus(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterStatus", varargs...)
	ret0, _ := ret[0].(*ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStatus indicates an expected call of GetClusterStatus.
func (mr *MockIksClientMockRecorder) GetClusterStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStatus", reflect.TypeOf((*MockIksClient)(nil).GetClusterStatus), varargs...)
}

// GetClusters mocks base method.
func (m *MockIksClient) GetClusters(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*ClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusters", varargs...)
	ret0, _ := ret[0].(*ClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockIksClientMockRecorder) GetClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockIksClient)(nil).GetClusters), varargs...)
}

// GetFirewallRule mocks base method.
func (m *MockIksClient) GetFirewallRule(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetFirewallRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirewallRule", varargs...)
	ret0, _ := ret[0].(*GetFirewallRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule.
func (mr *MockIksClientMockRecorder) GetFirewallRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockIksClient)(nil).GetFirewallRule), varargs...)
}

// GetKubeConfig mocks base method.
func (m *MockIksClient) GetKubeConfig(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetKubeconfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKubeConfig", varargs...)
	ret0, _ := ret[0].(*GetKubeconfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeConfig indicates an expected call of GetKubeConfig.
func (mr *MockIksClientMockRecorder) GetKubeConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeConfig", reflect.TypeOf((*MockIksClient)(nil).GetKubeConfig), varargs...)
}

// GetNodeGroup mocks base method.
func (m *MockIksClient) GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupResponseForm, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeGroup", varargs...)
	ret0, _ := ret[0].(*NodeGroupResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeGroup indicates an expected call of GetNodeGroup.
func (mr *MockIksClientMockRecorder) GetNodeGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeGroup", reflect.TypeOf((*MockIksClient)(nil).GetNodeGroup), varargs...)
}

// GetNodeGroupStatus mocks base method.
func (m *MockIksClient) GetNodeGroupStatus(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeGroupStatus", varargs...)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeGroupStatus indicates an expected call of GetNodeGroupStatus.
func (mr *MockIksClientMockRecorder) GetNodeGroupStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeGroupStatus", reflect.TypeOf((*MockIksClient)(nil).GetNodeGroupStatus), varargs...)
}

// GetNodeGroups mocks base method.
func (m *MockIksClient) GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*NodeGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeGroups", varargs...)
	ret0, _ := ret[0].(*NodeGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeGroups indicates an expected call of GetNodeGroups.
func (mr *MockIksClientMockRecorder) GetNodeGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeGroups", reflect.TypeOf((*MockIksClient)(nil).GetNodeGroups), varargs...)
}

// GetPublicInstanceTypes mocks base method.
func (m *MockIksClient) GetPublicInstanceTypes(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllInstancetypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicInstanceTypes", varargs...)
	ret0, _ := ret[0].(*GetPublicAllInstancetypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicInstanceTypes indicates an expected call of GetPublicInstanceTypes.
func (mr *MockIksClientMockRecorder) GetPublicInstanceTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicInstanceTypes", reflect.TypeOf((*MockIksClient)(nil).GetPublicInstanceTypes), varargs...)
}

// GetPublicK8SVersions mocks base method.
func (m *MockIksClient) GetPublicK8SVersions(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllK8SversionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicK8SVersions", varargs...)
	ret0, _ := ret[0].(*GetPublicAllK8SversionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicK8SVersions indicates an expected call of GetPublicK8SVersions.
func (mr *MockIksClientMockRecorder) GetPublicK8SVersions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicK8SVersions", reflect.TypeOf((*MockIksClient)(nil).GetPublicK8SVersions), varargs...)
}

// GetPublicRuntimes mocks base method.
func (m *MockIksClient) GetPublicRuntimes(ctx context.Context, in *IksCloudAccountId, opts ...grpc.CallOption) (*GetPublicAllRuntimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicRuntimes", varargs...)
	ret0, _ := ret[0].(*GetPublicAllRuntimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicRuntimes indicates an expected call of GetPublicRuntimes.
func (mr *MockIksClientMockRecorder) GetPublicRuntimes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicRuntimes", reflect.TypeOf((*MockIksClient)(nil).GetPublicRuntimes), varargs...)
}

// GetVip mocks base method.
func (m *MockIksClient) GetVip(ctx context.Context, in *VipId, opts ...grpc.CallOption) (*GetVipResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVip", varargs...)
	ret0, _ := ret[0].(*GetVipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVip indicates an expected call of GetVip.
func (mr *MockIksClientMockRecorder) GetVip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVip", reflect.TypeOf((*MockIksClient)(nil).GetVip), varargs...)
}

// GetVips mocks base method.
func (m *MockIksClient) GetVips(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*GetVipsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVips", varargs...)
	ret0, _ := ret[0].(*GetVipsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVips indicates an expected call of GetVips.
func (mr *MockIksClientMockRecorder) GetVips(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVips", reflect.TypeOf((*MockIksClient)(nil).GetVips), varargs...)
}

// PutCluster mocks base method.
func (m *MockIksClient) PutCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutCluster", varargs...)
	ret0, _ := ret[0].(*ClusterCreateResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCluster indicates an expected call of PutCluster.
func (mr *MockIksClientMockRecorder) PutCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCluster", reflect.TypeOf((*MockIksClient)(nil).PutCluster), varargs...)
}

// PutNodeGroup mocks base method.
func (m *MockIksClient) PutNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutNodeGroup", varargs...)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNodeGroup indicates an expected call of PutNodeGroup.
func (mr *MockIksClientMockRecorder) PutNodeGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNodeGroup", reflect.TypeOf((*MockIksClient)(nil).PutNodeGroup), varargs...)
}

// RetrieveKubeConfig mocks base method.
func (m *MockIksClient) RetrieveKubeConfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*GetKubeconfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveKubeConfig", varargs...)
	ret0, _ := ret[0].(*GetKubeconfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKubeConfig indicates an expected call of RetrieveKubeConfig.
func (mr *MockIksClientMockRecorder) RetrieveKubeConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKubeConfig", reflect.TypeOf((*MockIksClient)(nil).RetrieveKubeConfig), varargs...)
}

// UpdateClusterStorage mocks base method.
func (m *MockIksClient) UpdateClusterStorage(ctx context.Context, in *ClusterStorageUpdateRequest, opts ...grpc.CallOption) (*ClusterStorageStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterStorage", varargs...)
	ret0, _ := ret[0].(*ClusterStorageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStorage indicates an expected call of UpdateClusterStorage.
func (mr *MockIksClientMockRecorder) UpdateClusterStorage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStorage", reflect.TypeOf((*MockIksClient)(nil).UpdateClusterStorage), varargs...)
}

// UpdateFirewallRule mocks base method.
func (m *MockIksClient) UpdateFirewallRule(ctx context.Context, in *UpdateFirewallRuleRequest, opts ...grpc.CallOption) (*FirewallRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFirewallRule", varargs...)
	ret0, _ := ret[0].(*FirewallRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFirewallRule indicates an expected call of UpdateFirewallRule.
func (mr *MockIksClientMockRecorder) UpdateFirewallRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirewallRule", reflect.TypeOf((*MockIksClient)(nil).UpdateFirewallRule), varargs...)
}

// UpgradeCluster mocks base method.
func (m *MockIksClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*ClusterStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeCluster", varargs...)
	ret0, _ := ret[0].(*ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockIksClientMockRecorder) UpgradeCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockIksClient)(nil).UpgradeCluster), varargs...)
}

// UpgradeNodeGroup mocks base method.
func (m *MockIksClient) UpgradeNodeGroup(ctx context.Context, in *NodeGroupid, opts ...grpc.CallOption) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeNodeGroup", varargs...)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeNodeGroup indicates an expected call of UpgradeNodeGroup.
func (mr *MockIksClientMockRecorder) UpgradeNodeGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeNodeGroup", reflect.TypeOf((*MockIksClient)(nil).UpgradeNodeGroup), varargs...)
}

// MockIksServer is a mock of IksServer interface.
type MockIksServer struct {
	ctrl     *gomock.Controller
	recorder *MockIksServerMockRecorder
}

// MockIksServerMockRecorder is the mock recorder for MockIksServer.
type MockIksServerMockRecorder struct {
	mock *MockIksServer
}

// NewMockIksServer creates a new mock instance.
func NewMockIksServer(ctrl *gomock.Controller) *MockIksServer {
	mock := &MockIksServer{ctrl: ctrl}
	mock.recorder = &MockIksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIksServer) EXPECT() *MockIksServerMockRecorder {
	return m.recorder
}

// CreateNewCluster mocks base method.
func (m *MockIksServer) CreateNewCluster(arg0 context.Context, arg1 *ClusterRequest) (*ClusterCreateResponseForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCluster", arg0, arg1)
	ret0, _ := ret[0].(*ClusterCreateResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewCluster indicates an expected call of CreateNewCluster.
func (mr *MockIksServerMockRecorder) CreateNewCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCluster", reflect.TypeOf((*MockIksServer)(nil).CreateNewCluster), arg0, arg1)
}

// CreateNewVip mocks base method.
func (m *MockIksServer) CreateNewVip(arg0 context.Context, arg1 *VipCreateRequest) (*VipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewVip", arg0, arg1)
	ret0, _ := ret[0].(*VipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewVip indicates an expected call of CreateNewVip.
func (mr *MockIksServerMockRecorder) CreateNewVip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewVip", reflect.TypeOf((*MockIksServer)(nil).CreateNewVip), arg0, arg1)
}

// CreateNodeGroup mocks base method.
func (m *MockIksServer) CreateNodeGroup(arg0 context.Context, arg1 *CreateNodeGroupRequest) (*NodeGroupResponseForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeGroup", arg0, arg1)
	ret0, _ := ret[0].(*NodeGroupResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeGroup indicates an expected call of CreateNodeGroup.
func (mr *MockIksServerMockRecorder) CreateNodeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeGroup", reflect.TypeOf((*MockIksServer)(nil).CreateNodeGroup), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockIksServer) DeleteCluster(arg0 context.Context, arg1 *ClusterID) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockIksServerMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockIksServer)(nil).DeleteCluster), arg0, arg1)
}

// DeleteFirewallRule mocks base method.
func (m *MockIksServer) DeleteFirewallRule(arg0 context.Context, arg1 *DeleteFirewallRuleRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRule", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule.
func (mr *MockIksServerMockRecorder) DeleteFirewallRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockIksServer)(nil).DeleteFirewallRule), arg0, arg1)
}

// DeleteNodeGroup mocks base method.
func (m *MockIksServer) DeleteNodeGroup(arg0 context.Context, arg1 *NodeGroupid) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeGroup", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeGroup indicates an expected call of DeleteNodeGroup.
func (mr *MockIksServerMockRecorder) DeleteNodeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeGroup", reflect.TypeOf((*MockIksServer)(nil).DeleteNodeGroup), arg0, arg1)
}

// DeleteNodeGroupInstance mocks base method.
func (m *MockIksServer) DeleteNodeGroupInstance(arg0 context.Context, arg1 *DeleteNodeGroupInstanceRequest) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeGroupInstance", arg0, arg1)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeGroupInstance indicates an expected call of DeleteNodeGroupInstance.
func (mr *MockIksServerMockRecorder) DeleteNodeGroupInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeGroupInstance", reflect.TypeOf((*MockIksServer)(nil).DeleteNodeGroupInstance), arg0, arg1)
}

// DeleteVip mocks base method.
func (m *MockIksServer) DeleteVip(arg0 context.Context, arg1 *VipId) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVip", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVip indicates an expected call of DeleteVip.
func (mr *MockIksServerMockRecorder) DeleteVip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVip", reflect.TypeOf((*MockIksServer)(nil).DeleteVip), arg0, arg1)
}

// EnableClusterStorage mocks base method.
func (m *MockIksServer) EnableClusterStorage(arg0 context.Context, arg1 *ClusterStorageRequest) (*ClusterStorageStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableClusterStorage", arg0, arg1)
	ret0, _ := ret[0].(*ClusterStorageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableClusterStorage indicates an expected call of EnableClusterStorage.
func (mr *MockIksServerMockRecorder) EnableClusterStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableClusterStorage", reflect.TypeOf((*MockIksServer)(nil).EnableClusterStorage), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockIksServer) GetCluster(arg0 context.Context, arg1 *ClusterID) (*ClusterResponseForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*ClusterResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockIksServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockIksServer)(nil).GetCluster), arg0, arg1)
}

// GetClusterStatus mocks base method.
func (m *MockIksServer) GetClusterStatus(arg0 context.Context, arg1 *ClusterID) (*ClusterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterStatus", arg0, arg1)
	ret0, _ := ret[0].(*ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStatus indicates an expected call of GetClusterStatus.
func (mr *MockIksServerMockRecorder) GetClusterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStatus", reflect.TypeOf((*MockIksServer)(nil).GetClusterStatus), arg0, arg1)
}

// GetClusters mocks base method.
func (m *MockIksServer) GetClusters(arg0 context.Context, arg1 *IksCloudAccountId) (*ClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusters", arg0, arg1)
	ret0, _ := ret[0].(*ClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockIksServerMockRecorder) GetClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockIksServer)(nil).GetClusters), arg0, arg1)
}

// GetFirewallRule mocks base method.
func (m *MockIksServer) GetFirewallRule(arg0 context.Context, arg1 *ClusterID) (*GetFirewallRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRule", arg0, arg1)
	ret0, _ := ret[0].(*GetFirewallRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule.
func (mr *MockIksServerMockRecorder) GetFirewallRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockIksServer)(nil).GetFirewallRule), arg0, arg1)
}

// GetKubeConfig mocks base method.
func (m *MockIksServer) GetKubeConfig(arg0 context.Context, arg1 *ClusterID) (*GetKubeconfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeConfig", arg0, arg1)
	ret0, _ := ret[0].(*GetKubeconfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeConfig indicates an expected call of GetKubeConfig.
func (mr *MockIksServerMockRecorder) GetKubeConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeConfig", reflect.TypeOf((*MockIksServer)(nil).GetKubeConfig), arg0, arg1)
}

// GetNodeGroup mocks base method.
func (m *MockIksServer) GetNodeGroup(arg0 context.Context, arg1 *GetNodeGroupRequest) (*NodeGroupResponseForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeGroup", arg0, arg1)
	ret0, _ := ret[0].(*NodeGroupResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeGroup indicates an expected call of GetNodeGroup.
func (mr *MockIksServerMockRecorder) GetNodeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeGroup", reflect.TypeOf((*MockIksServer)(nil).GetNodeGroup), arg0, arg1)
}

// GetNodeGroupStatus mocks base method.
func (m *MockIksServer) GetNodeGroupStatus(arg0 context.Context, arg1 *NodeGroupid) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeGroupStatus", arg0, arg1)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeGroupStatus indicates an expected call of GetNodeGroupStatus.
func (mr *MockIksServerMockRecorder) GetNodeGroupStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeGroupStatus", reflect.TypeOf((*MockIksServer)(nil).GetNodeGroupStatus), arg0, arg1)
}

// GetNodeGroups mocks base method.
func (m *MockIksServer) GetNodeGroups(arg0 context.Context, arg1 *GetNodeGroupsRequest) (*NodeGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeGroups", arg0, arg1)
	ret0, _ := ret[0].(*NodeGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeGroups indicates an expected call of GetNodeGroups.
func (mr *MockIksServerMockRecorder) GetNodeGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeGroups", reflect.TypeOf((*MockIksServer)(nil).GetNodeGroups), arg0, arg1)
}

// GetPublicInstanceTypes mocks base method.
func (m *MockIksServer) GetPublicInstanceTypes(arg0 context.Context, arg1 *IksCloudAccountId) (*GetPublicAllInstancetypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicInstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(*GetPublicAllInstancetypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicInstanceTypes indicates an expected call of GetPublicInstanceTypes.
func (mr *MockIksServerMockRecorder) GetPublicInstanceTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicInstanceTypes", reflect.TypeOf((*MockIksServer)(nil).GetPublicInstanceTypes), arg0, arg1)
}

// GetPublicK8SVersions mocks base method.
func (m *MockIksServer) GetPublicK8SVersions(arg0 context.Context, arg1 *IksCloudAccountId) (*GetPublicAllK8SversionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicK8SVersions", arg0, arg1)
	ret0, _ := ret[0].(*GetPublicAllK8SversionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicK8SVersions indicates an expected call of GetPublicK8SVersions.
func (mr *MockIksServerMockRecorder) GetPublicK8SVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicK8SVersions", reflect.TypeOf((*MockIksServer)(nil).GetPublicK8SVersions), arg0, arg1)
}

// GetPublicRuntimes mocks base method.
func (m *MockIksServer) GetPublicRuntimes(arg0 context.Context, arg1 *IksCloudAccountId) (*GetPublicAllRuntimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicRuntimes", arg0, arg1)
	ret0, _ := ret[0].(*GetPublicAllRuntimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicRuntimes indicates an expected call of GetPublicRuntimes.
func (mr *MockIksServerMockRecorder) GetPublicRuntimes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicRuntimes", reflect.TypeOf((*MockIksServer)(nil).GetPublicRuntimes), arg0, arg1)
}

// GetVip mocks base method.
func (m *MockIksServer) GetVip(arg0 context.Context, arg1 *VipId) (*GetVipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVip", arg0, arg1)
	ret0, _ := ret[0].(*GetVipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVip indicates an expected call of GetVip.
func (mr *MockIksServerMockRecorder) GetVip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVip", reflect.TypeOf((*MockIksServer)(nil).GetVip), arg0, arg1)
}

// GetVips mocks base method.
func (m *MockIksServer) GetVips(arg0 context.Context, arg1 *ClusterID) (*GetVipsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVips", arg0, arg1)
	ret0, _ := ret[0].(*GetVipsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVips indicates an expected call of GetVips.
func (mr *MockIksServerMockRecorder) GetVips(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVips", reflect.TypeOf((*MockIksServer)(nil).GetVips), arg0, arg1)
}

// PutCluster mocks base method.
func (m *MockIksServer) PutCluster(arg0 context.Context, arg1 *UpdateClusterRequest) (*ClusterCreateResponseForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCluster", arg0, arg1)
	ret0, _ := ret[0].(*ClusterCreateResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCluster indicates an expected call of PutCluster.
func (mr *MockIksServerMockRecorder) PutCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCluster", reflect.TypeOf((*MockIksServer)(nil).PutCluster), arg0, arg1)
}

// PutNodeGroup mocks base method.
func (m *MockIksServer) PutNodeGroup(arg0 context.Context, arg1 *UpdateNodeGroupRequest) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutNodeGroup", arg0, arg1)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNodeGroup indicates an expected call of PutNodeGroup.
func (mr *MockIksServerMockRecorder) PutNodeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNodeGroup", reflect.TypeOf((*MockIksServer)(nil).PutNodeGroup), arg0, arg1)
}

// RetrieveKubeConfig mocks base method.
func (m *MockIksServer) RetrieveKubeConfig(arg0 context.Context, arg1 *GetKubeconfigRequest) (*GetKubeconfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveKubeConfig", arg0, arg1)
	ret0, _ := ret[0].(*GetKubeconfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKubeConfig indicates an expected call of RetrieveKubeConfig.
func (mr *MockIksServerMockRecorder) RetrieveKubeConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKubeConfig", reflect.TypeOf((*MockIksServer)(nil).RetrieveKubeConfig), arg0, arg1)
}

// UpdateClusterStorage mocks base method.
func (m *MockIksServer) UpdateClusterStorage(arg0 context.Context, arg1 *ClusterStorageUpdateRequest) (*ClusterStorageStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterStorage", arg0, arg1)
	ret0, _ := ret[0].(*ClusterStorageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStorage indicates an expected call of UpdateClusterStorage.
func (mr *MockIksServerMockRecorder) UpdateClusterStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStorage", reflect.TypeOf((*MockIksServer)(nil).UpdateClusterStorage), arg0, arg1)
}

// UpdateFirewallRule mocks base method.
func (m *MockIksServer) UpdateFirewallRule(arg0 context.Context, arg1 *UpdateFirewallRuleRequest) (*FirewallRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirewallRule", arg0, arg1)
	ret0, _ := ret[0].(*FirewallRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFirewallRule indicates an expected call of UpdateFirewallRule.
func (mr *MockIksServerMockRecorder) UpdateFirewallRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirewallRule", reflect.TypeOf((*MockIksServer)(nil).UpdateFirewallRule), arg0, arg1)
}

// UpgradeCluster mocks base method.
func (m *MockIksServer) UpgradeCluster(arg0 context.Context, arg1 *UpgradeClusterRequest) (*ClusterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeCluster", arg0, arg1)
	ret0, _ := ret[0].(*ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockIksServerMockRecorder) UpgradeCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockIksServer)(nil).UpgradeCluster), arg0, arg1)
}

// UpgradeNodeGroup mocks base method.
func (m *MockIksServer) UpgradeNodeGroup(arg0 context.Context, arg1 *NodeGroupid) (*Nodegroupstatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeNodeGroup", arg0, arg1)
	ret0, _ := ret[0].(*Nodegroupstatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeNodeGroup indicates an expected call of UpgradeNodeGroup.
func (mr *MockIksServerMockRecorder) UpgradeNodeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeNodeGroup", reflect.TypeOf((*MockIksServer)(nil).UpgradeNodeGroup), arg0, arg1)
}

// mustEmbedUnimplementedIksServer mocks base method.
func (m *MockIksServer) mustEmbedUnimplementedIksServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIksServer")
}

// mustEmbedUnimplementedIksServer indicates an expected call of mustEmbedUnimplementedIksServer.
func (mr *MockIksServerMockRecorder) mustEmbedUnimplementedIksServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIksServer", reflect.TypeOf((*MockIksServer)(nil).mustEmbedUnimplementedIksServer))
}

// MockUnsafeIksServer is a mock of UnsafeIksServer interface.
type MockUnsafeIksServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeIksServerMockRecorder
}

// MockUnsafeIksServerMockRecorder is the mock recorder for MockUnsafeIksServer.
type MockUnsafeIksServerMockRecorder struct {
	mock *MockUnsafeIksServer
}

// NewMockUnsafeIksServer creates a new mock instance.
func NewMockUnsafeIksServer(ctrl *gomock.Controller) *MockUnsafeIksServer {
	mock := &MockUnsafeIksServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeIksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeIksServer) EXPECT() *MockUnsafeIksServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedIksServer mocks base method.
func (m *MockUnsafeIksServer) mustEmbedUnimplementedIksServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIksServer")
}

// mustEmbedUnimplementedIksServer indicates an expected call of mustEmbedUnimplementedIksServer.
func (mr *MockUnsafeIksServerMockRecorder) mustEmbedUnimplementedIksServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIksServer", reflect.TypeOf((*MockUnsafeIksServer)(nil).mustEmbedUnimplementedIksServer))
}

// MockIksSuperComputeClient is a mock of IksSuperComputeClient interface.
type MockIksSuperComputeClient struct {
	ctrl     *gomock.Controller
	recorder *MockIksSuperComputeClientMockRecorder
}

// MockIksSuperComputeClientMockRecorder is the mock recorder for MockIksSuperComputeClient.
type MockIksSuperComputeClientMockRecorder struct {
	mock *MockIksSuperComputeClient
}

// NewMockIksSuperComputeClient creates a new mock instance.
func NewMockIksSuperComputeClient(ctrl *gomock.Controller) *MockIksSuperComputeClient {
	mock := &MockIksSuperComputeClient{ctrl: ctrl}
	mock.recorder = &MockIksSuperComputeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIksSuperComputeClient) EXPECT() *MockIksSuperComputeClientMockRecorder {
	return m.recorder
}

// SuperComputeCreateCluster mocks base method.
func (m *MockIksSuperComputeClient) SuperComputeCreateCluster(ctx context.Context, in *SuperComputeClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponseForm, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SuperComputeCreateCluster", varargs...)
	ret0, _ := ret[0].(*ClusterCreateResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuperComputeCreateCluster indicates an expected call of SuperComputeCreateCluster.
func (mr *MockIksSuperComputeClientMockRecorder) SuperComputeCreateCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuperComputeCreateCluster", reflect.TypeOf((*MockIksSuperComputeClient)(nil).SuperComputeCreateCluster), varargs...)
}

// MockIksSuperComputeServer is a mock of IksSuperComputeServer interface.
type MockIksSuperComputeServer struct {
	ctrl     *gomock.Controller
	recorder *MockIksSuperComputeServerMockRecorder
}

// MockIksSuperComputeServerMockRecorder is the mock recorder for MockIksSuperComputeServer.
type MockIksSuperComputeServerMockRecorder struct {
	mock *MockIksSuperComputeServer
}

// NewMockIksSuperComputeServer creates a new mock instance.
func NewMockIksSuperComputeServer(ctrl *gomock.Controller) *MockIksSuperComputeServer {
	mock := &MockIksSuperComputeServer{ctrl: ctrl}
	mock.recorder = &MockIksSuperComputeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIksSuperComputeServer) EXPECT() *MockIksSuperComputeServerMockRecorder {
	return m.recorder
}

// SuperComputeCreateCluster mocks base method.
func (m *MockIksSuperComputeServer) SuperComputeCreateCluster(arg0 context.Context, arg1 *SuperComputeClusterCreateRequest) (*ClusterCreateResponseForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuperComputeCreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*ClusterCreateResponseForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuperComputeCreateCluster indicates an expected call of SuperComputeCreateCluster.
func (mr *MockIksSuperComputeServerMockRecorder) SuperComputeCreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuperComputeCreateCluster", reflect.TypeOf((*MockIksSuperComputeServer)(nil).SuperComputeCreateCluster), arg0, arg1)
}

// mustEmbedUnimplementedIksSuperComputeServer mocks base method.
func (m *MockIksSuperComputeServer) mustEmbedUnimplementedIksSuperComputeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIksSuperComputeServer")
}

// mustEmbedUnimplementedIksSuperComputeServer indicates an expected call of mustEmbedUnimplementedIksSuperComputeServer.
func (mr *MockIksSuperComputeServerMockRecorder) mustEmbedUnimplementedIksSuperComputeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIksSuperComputeServer", reflect.TypeOf((*MockIksSuperComputeServer)(nil).mustEmbedUnimplementedIksSuperComputeServer))
}

// MockUnsafeIksSuperComputeServer is a mock of UnsafeIksSuperComputeServer interface.
type MockUnsafeIksSuperComputeServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeIksSuperComputeServerMockRecorder
}

// MockUnsafeIksSuperComputeServerMockRecorder is the mock recorder for MockUnsafeIksSuperComputeServer.
type MockUnsafeIksSuperComputeServerMockRecorder struct {
	mock *MockUnsafeIksSuperComputeServer
}

// NewMockUnsafeIksSuperComputeServer creates a new mock instance.
func NewMockUnsafeIksSuperComputeServer(ctrl *gomock.Controller) *MockUnsafeIksSuperComputeServer {
	mock := &MockUnsafeIksSuperComputeServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeIksSuperComputeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeIksSuperComputeServer) EXPECT() *MockUnsafeIksSuperComputeServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedIksSuperComputeServer mocks base method.
func (m *MockUnsafeIksSuperComputeServer) mustEmbedUnimplementedIksSuperComputeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIksSuperComputeServer")
}

// mustEmbedUnimplementedIksSuperComputeServer indicates an expected call of mustEmbedUnimplementedIksSuperComputeServer.
func (mr *MockUnsafeIksSuperComputeServerMockRecorder) mustEmbedUnimplementedIksSuperComputeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIksSuperComputeServer", reflect.TypeOf((*MockUnsafeIksSuperComputeServer)(nil).mustEmbedUnimplementedIksSuperComputeServer))
}
