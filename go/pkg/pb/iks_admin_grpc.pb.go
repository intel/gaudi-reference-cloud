// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: iks_admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IksAdminClient is the client API for IksAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IksAdminClient interface {
	// Authenticate IKS Admin User
	AuthenticateIKSAdminUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Create IMI
	CreateIMI(ctx context.Context, in *IMIRequest, opts ...grpc.CallOption) (*IMIResponse, error)
	GetIMIs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIMIResponse, error)
	GetIMI(ctx context.Context, in *GetIMIRequest, opts ...grpc.CallOption) (*IMIResponse, error)
	GetIMIsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIMIsInfoResponse, error)
	PutIMI(ctx context.Context, in *UpdateIMIRequest, opts ...grpc.CallOption) (*IMIResponse, error)
	UpdateIMIInstanceTypeToK8SCompatibility(ctx context.Context, in *IMIInstanceTypeK8SRequest, opts ...grpc.CallOption) (*IMIInstanceTypeK8SResponse, error)
	DeleteIMI(ctx context.Context, in *DeleteIMIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// K8Sversions
	CreateK8SVersion(ctx context.Context, in *Createk8SversionRequest, opts ...grpc.CallOption) (*K8SversionResponse, error)
	GetK8SVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetK8SVersionResponse, error)
	GetK8SVersion(ctx context.Context, in *GetK8SRequest, opts ...grpc.CallOption) (*K8SversionResponse, error)
	PutK8SVersion(ctx context.Context, in *UpdateK8SRequest, opts ...grpc.CallOption) (*K8SversionResponse, error)
	DeleteK8SVersion(ctx context.Context, in *GetK8SRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// addons
	CreateNewAddOn(ctx context.Context, in *CreateAddonAdminRequest, opts ...grpc.CallOption) (*AddonResponse, error)
	GetAddOns(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAddOnResponse, error)
	GetAddOn(ctx context.Context, in *GetAddOnAdminRequest, opts ...grpc.CallOption) (*AddonResponse, error)
	PutAddOn(ctx context.Context, in *UpdateAddOnAdminRequest, opts ...grpc.CallOption) (*AddonResponse, error)
	DeleteAddOn(ctx context.Context, in *GetAddOnAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Cluster management
	GetClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClustersAdmin, error)
	GetCluster(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*GetClusterAdmin, error)
	PutCPNodegroup(ctx context.Context, in *PutNodegroupRequest, opts ...grpc.CallOption) (*Nodegroup, error)
	UpgradeClusterControlPlane(ctx context.Context, in *UpgradeControlPlaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEvents(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*GetEventResponse, error)
	ClusterSnapshot(ctx context.Context, in *PostSnapshotRequest, opts ...grpc.CallOption) (*PostSnapshotResponse, error)
	ClusterRecreate(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PostLoadBalancer(ctx context.Context, in *PostLoadbalancerRequest, opts ...grpc.CallOption) (*LoadbalancerResponse, error)
	PutLoadBalancer(ctx context.Context, in *PutLoadbalancerRequest, opts ...grpc.CallOption) (*LoadbalancerResponse, error)
	GetLoadBalancers(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*LoadBalancers, error)
	GetLoadBalancer(ctx context.Context, in *GetLbRequest, opts ...grpc.CallOption) (*LoadbalancerResponse, error)
	DeleteLoadBalancer(ctx context.Context, in *GetLbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetControlPlaneSSHKeys(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*ClusterSSHKeys, error)
	GetCloudAccountApproveList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudAccountApproveListResponse, error)
	PostCloudAccountApproveList(ctx context.Context, in *CloudAccountApproveListRequest, opts ...grpc.CallOption) (*CloudAccountApproveList, error)
	PutCloudAccountApproveList(ctx context.Context, in *CloudAccountApproveListRequest, opts ...grpc.CallOption) (*CloudAccountApproveList, error)
	CreateInstanceTypes(ctx context.Context, in *CreateInstanceTypeRequest, opts ...grpc.CallOption) (*InstanceTypeResponse, error)
	GetInstanceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInstanceTypesResponse, error)
	GetInstanceType(ctx context.Context, in *GetInstanceTypeRequest, opts ...grpc.CallOption) (*GetInstanceTypeResponse, error)
	GetInstanceTypeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInstanceTypeInfoResponse, error)
	PutInstanceType(ctx context.Context, in *UpdateInstanceTypeRequest, opts ...grpc.CallOption) (*InstanceTypeResponse, error)
	UpdateInstanceTypeIMIToK8SCompatibility(ctx context.Context, in *InstanceTypeIMIK8SRequest, opts ...grpc.CallOption) (*InstanceTypeIMIK8SResponse, error)
	DeleteInstanceType(ctx context.Context, in *DeleteInstanceTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFirewallRule(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*GetAdminFirewallRuleResponse, error)
}

type iksAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewIksAdminClient(cc grpc.ClientConnInterface) IksAdminClient {
	return &iksAdminClient{cc}
}

func (c *iksAdminClient) AuthenticateIKSAdminUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/AuthenticateIKSAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) CreateIMI(ctx context.Context, in *IMIRequest, opts ...grpc.CallOption) (*IMIResponse, error) {
	out := new(IMIResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/CreateIMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetIMIs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIMIResponse, error) {
	out := new(GetIMIResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetIMIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetIMI(ctx context.Context, in *GetIMIRequest, opts ...grpc.CallOption) (*IMIResponse, error) {
	out := new(IMIResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetIMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetIMIsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIMIsInfoResponse, error) {
	out := new(GetIMIsInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetIMIsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PutIMI(ctx context.Context, in *UpdateIMIRequest, opts ...grpc.CallOption) (*IMIResponse, error) {
	out := new(IMIResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PutIMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) UpdateIMIInstanceTypeToK8SCompatibility(ctx context.Context, in *IMIInstanceTypeK8SRequest, opts ...grpc.CallOption) (*IMIInstanceTypeK8SResponse, error) {
	out := new(IMIInstanceTypeK8SResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/UpdateIMIInstanceTypeToK8sCompatibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) DeleteIMI(ctx context.Context, in *DeleteIMIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/DeleteIMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) CreateK8SVersion(ctx context.Context, in *Createk8SversionRequest, opts ...grpc.CallOption) (*K8SversionResponse, error) {
	out := new(K8SversionResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/CreateK8SVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetK8SVersions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetK8SVersionResponse, error) {
	out := new(GetK8SVersionResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetK8SVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetK8SVersion(ctx context.Context, in *GetK8SRequest, opts ...grpc.CallOption) (*K8SversionResponse, error) {
	out := new(K8SversionResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetK8SVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PutK8SVersion(ctx context.Context, in *UpdateK8SRequest, opts ...grpc.CallOption) (*K8SversionResponse, error) {
	out := new(K8SversionResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PutK8SVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) DeleteK8SVersion(ctx context.Context, in *GetK8SRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/DeleteK8SVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) CreateNewAddOn(ctx context.Context, in *CreateAddonAdminRequest, opts ...grpc.CallOption) (*AddonResponse, error) {
	out := new(AddonResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/CreateNewAddOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetAddOns(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAddOnResponse, error) {
	out := new(GetAddOnResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetAddOns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetAddOn(ctx context.Context, in *GetAddOnAdminRequest, opts ...grpc.CallOption) (*AddonResponse, error) {
	out := new(AddonResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetAddOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PutAddOn(ctx context.Context, in *UpdateAddOnAdminRequest, opts ...grpc.CallOption) (*AddonResponse, error) {
	out := new(AddonResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PutAddOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) DeleteAddOn(ctx context.Context, in *GetAddOnAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/DeleteAddOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClustersAdmin, error) {
	out := new(GetClustersAdmin)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetCluster(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*GetClusterAdmin, error) {
	out := new(GetClusterAdmin)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PutCPNodegroup(ctx context.Context, in *PutNodegroupRequest, opts ...grpc.CallOption) (*Nodegroup, error) {
	out := new(Nodegroup)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PutCPNodegroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) UpgradeClusterControlPlane(ctx context.Context, in *UpgradeControlPlaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/UpgradeClusterControlPlane", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetEvents(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) ClusterSnapshot(ctx context.Context, in *PostSnapshotRequest, opts ...grpc.CallOption) (*PostSnapshotResponse, error) {
	out := new(PostSnapshotResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/ClusterSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) ClusterRecreate(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/ClusterRecreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PostLoadBalancer(ctx context.Context, in *PostLoadbalancerRequest, opts ...grpc.CallOption) (*LoadbalancerResponse, error) {
	out := new(LoadbalancerResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PostLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PutLoadBalancer(ctx context.Context, in *PutLoadbalancerRequest, opts ...grpc.CallOption) (*LoadbalancerResponse, error) {
	out := new(LoadbalancerResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PutLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetLoadBalancers(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*LoadBalancers, error) {
	out := new(LoadBalancers)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetLoadBalancers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetLoadBalancer(ctx context.Context, in *GetLbRequest, opts ...grpc.CallOption) (*LoadbalancerResponse, error) {
	out := new(LoadbalancerResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) DeleteLoadBalancer(ctx context.Context, in *GetLbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/DeleteLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetControlPlaneSSHKeys(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*ClusterSSHKeys, error) {
	out := new(ClusterSSHKeys)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetControlPlaneSSHKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetCloudAccountApproveList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudAccountApproveListResponse, error) {
	out := new(CloudAccountApproveListResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetCloudAccountApproveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PostCloudAccountApproveList(ctx context.Context, in *CloudAccountApproveListRequest, opts ...grpc.CallOption) (*CloudAccountApproveList, error) {
	out := new(CloudAccountApproveList)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PostCloudAccountApproveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PutCloudAccountApproveList(ctx context.Context, in *CloudAccountApproveListRequest, opts ...grpc.CallOption) (*CloudAccountApproveList, error) {
	out := new(CloudAccountApproveList)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PutCloudAccountApproveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) CreateInstanceTypes(ctx context.Context, in *CreateInstanceTypeRequest, opts ...grpc.CallOption) (*InstanceTypeResponse, error) {
	out := new(InstanceTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/CreateInstanceTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetInstanceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInstanceTypesResponse, error) {
	out := new(GetInstanceTypesResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetInstanceTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetInstanceType(ctx context.Context, in *GetInstanceTypeRequest, opts ...grpc.CallOption) (*GetInstanceTypeResponse, error) {
	out := new(GetInstanceTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetInstanceType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetInstanceTypeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInstanceTypeInfoResponse, error) {
	out := new(GetInstanceTypeInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetInstanceTypeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) PutInstanceType(ctx context.Context, in *UpdateInstanceTypeRequest, opts ...grpc.CallOption) (*InstanceTypeResponse, error) {
	out := new(InstanceTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/PutInstanceType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) UpdateInstanceTypeIMIToK8SCompatibility(ctx context.Context, in *InstanceTypeIMIK8SRequest, opts ...grpc.CallOption) (*InstanceTypeIMIK8SResponse, error) {
	out := new(InstanceTypeIMIK8SResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/UpdateInstanceTypeIMIToK8sCompatibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) DeleteInstanceType(ctx context.Context, in *DeleteInstanceTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/DeleteInstanceType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksAdminClient) GetFirewallRule(ctx context.Context, in *AdminClusterID, opts ...grpc.CallOption) (*GetAdminFirewallRuleResponse, error) {
	out := new(GetAdminFirewallRuleResponse)
	err := c.cc.Invoke(ctx, "/proto.IksAdmin/GetFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IksAdminServer is the server API for IksAdmin service.
// All implementations must embed UnimplementedIksAdminServer
// for forward compatibility
type IksAdminServer interface {
	// Authenticate IKS Admin User
	AuthenticateIKSAdminUser(context.Context, *UserRequest) (*UserResponse, error)
	// Create IMI
	CreateIMI(context.Context, *IMIRequest) (*IMIResponse, error)
	GetIMIs(context.Context, *emptypb.Empty) (*GetIMIResponse, error)
	GetIMI(context.Context, *GetIMIRequest) (*IMIResponse, error)
	GetIMIsInfo(context.Context, *emptypb.Empty) (*GetIMIsInfoResponse, error)
	PutIMI(context.Context, *UpdateIMIRequest) (*IMIResponse, error)
	UpdateIMIInstanceTypeToK8SCompatibility(context.Context, *IMIInstanceTypeK8SRequest) (*IMIInstanceTypeK8SResponse, error)
	DeleteIMI(context.Context, *DeleteIMIRequest) (*emptypb.Empty, error)
	// K8Sversions
	CreateK8SVersion(context.Context, *Createk8SversionRequest) (*K8SversionResponse, error)
	GetK8SVersions(context.Context, *emptypb.Empty) (*GetK8SVersionResponse, error)
	GetK8SVersion(context.Context, *GetK8SRequest) (*K8SversionResponse, error)
	PutK8SVersion(context.Context, *UpdateK8SRequest) (*K8SversionResponse, error)
	DeleteK8SVersion(context.Context, *GetK8SRequest) (*emptypb.Empty, error)
	// addons
	CreateNewAddOn(context.Context, *CreateAddonAdminRequest) (*AddonResponse, error)
	GetAddOns(context.Context, *emptypb.Empty) (*GetAddOnResponse, error)
	GetAddOn(context.Context, *GetAddOnAdminRequest) (*AddonResponse, error)
	PutAddOn(context.Context, *UpdateAddOnAdminRequest) (*AddonResponse, error)
	DeleteAddOn(context.Context, *GetAddOnAdminRequest) (*emptypb.Empty, error)
	// Cluster management
	GetClusters(context.Context, *emptypb.Empty) (*GetClustersAdmin, error)
	GetCluster(context.Context, *AdminClusterID) (*GetClusterAdmin, error)
	PutCPNodegroup(context.Context, *PutNodegroupRequest) (*Nodegroup, error)
	UpgradeClusterControlPlane(context.Context, *UpgradeControlPlaneRequest) (*emptypb.Empty, error)
	GetEvents(context.Context, *AdminClusterID) (*GetEventResponse, error)
	ClusterSnapshot(context.Context, *PostSnapshotRequest) (*PostSnapshotResponse, error)
	ClusterRecreate(context.Context, *AdminClusterID) (*emptypb.Empty, error)
	PostLoadBalancer(context.Context, *PostLoadbalancerRequest) (*LoadbalancerResponse, error)
	PutLoadBalancer(context.Context, *PutLoadbalancerRequest) (*LoadbalancerResponse, error)
	GetLoadBalancers(context.Context, *AdminClusterID) (*LoadBalancers, error)
	GetLoadBalancer(context.Context, *GetLbRequest) (*LoadbalancerResponse, error)
	DeleteLoadBalancer(context.Context, *GetLbRequest) (*emptypb.Empty, error)
	GetControlPlaneSSHKeys(context.Context, *AdminClusterID) (*ClusterSSHKeys, error)
	GetCloudAccountApproveList(context.Context, *emptypb.Empty) (*CloudAccountApproveListResponse, error)
	PostCloudAccountApproveList(context.Context, *CloudAccountApproveListRequest) (*CloudAccountApproveList, error)
	PutCloudAccountApproveList(context.Context, *CloudAccountApproveListRequest) (*CloudAccountApproveList, error)
	CreateInstanceTypes(context.Context, *CreateInstanceTypeRequest) (*InstanceTypeResponse, error)
	GetInstanceTypes(context.Context, *emptypb.Empty) (*GetInstanceTypesResponse, error)
	GetInstanceType(context.Context, *GetInstanceTypeRequest) (*GetInstanceTypeResponse, error)
	GetInstanceTypeInfo(context.Context, *emptypb.Empty) (*GetInstanceTypeInfoResponse, error)
	PutInstanceType(context.Context, *UpdateInstanceTypeRequest) (*InstanceTypeResponse, error)
	UpdateInstanceTypeIMIToK8SCompatibility(context.Context, *InstanceTypeIMIK8SRequest) (*InstanceTypeIMIK8SResponse, error)
	DeleteInstanceType(context.Context, *DeleteInstanceTypeRequest) (*emptypb.Empty, error)
	GetFirewallRule(context.Context, *AdminClusterID) (*GetAdminFirewallRuleResponse, error)
	mustEmbedUnimplementedIksAdminServer()
}

// UnimplementedIksAdminServer must be embedded to have forward compatible implementations.
type UnimplementedIksAdminServer struct {
}

func (UnimplementedIksAdminServer) AuthenticateIKSAdminUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateIKSAdminUser not implemented")
}
func (UnimplementedIksAdminServer) CreateIMI(context.Context, *IMIRequest) (*IMIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIMI not implemented")
}
func (UnimplementedIksAdminServer) GetIMIs(context.Context, *emptypb.Empty) (*GetIMIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIMIs not implemented")
}
func (UnimplementedIksAdminServer) GetIMI(context.Context, *GetIMIRequest) (*IMIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIMI not implemented")
}
func (UnimplementedIksAdminServer) GetIMIsInfo(context.Context, *emptypb.Empty) (*GetIMIsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIMIsInfo not implemented")
}
func (UnimplementedIksAdminServer) PutIMI(context.Context, *UpdateIMIRequest) (*IMIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutIMI not implemented")
}
func (UnimplementedIksAdminServer) UpdateIMIInstanceTypeToK8SCompatibility(context.Context, *IMIInstanceTypeK8SRequest) (*IMIInstanceTypeK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIMIInstanceTypeToK8SCompatibility not implemented")
}
func (UnimplementedIksAdminServer) DeleteIMI(context.Context, *DeleteIMIRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIMI not implemented")
}
func (UnimplementedIksAdminServer) CreateK8SVersion(context.Context, *Createk8SversionRequest) (*K8SversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SVersion not implemented")
}
func (UnimplementedIksAdminServer) GetK8SVersions(context.Context, *emptypb.Empty) (*GetK8SVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SVersions not implemented")
}
func (UnimplementedIksAdminServer) GetK8SVersion(context.Context, *GetK8SRequest) (*K8SversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SVersion not implemented")
}
func (UnimplementedIksAdminServer) PutK8SVersion(context.Context, *UpdateK8SRequest) (*K8SversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutK8SVersion not implemented")
}
func (UnimplementedIksAdminServer) DeleteK8SVersion(context.Context, *GetK8SRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SVersion not implemented")
}
func (UnimplementedIksAdminServer) CreateNewAddOn(context.Context, *CreateAddonAdminRequest) (*AddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAddOn not implemented")
}
func (UnimplementedIksAdminServer) GetAddOns(context.Context, *emptypb.Empty) (*GetAddOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddOns not implemented")
}
func (UnimplementedIksAdminServer) GetAddOn(context.Context, *GetAddOnAdminRequest) (*AddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddOn not implemented")
}
func (UnimplementedIksAdminServer) PutAddOn(context.Context, *UpdateAddOnAdminRequest) (*AddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAddOn not implemented")
}
func (UnimplementedIksAdminServer) DeleteAddOn(context.Context, *GetAddOnAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddOn not implemented")
}
func (UnimplementedIksAdminServer) GetClusters(context.Context, *emptypb.Empty) (*GetClustersAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedIksAdminServer) GetCluster(context.Context, *AdminClusterID) (*GetClusterAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedIksAdminServer) PutCPNodegroup(context.Context, *PutNodegroupRequest) (*Nodegroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCPNodegroup not implemented")
}
func (UnimplementedIksAdminServer) UpgradeClusterControlPlane(context.Context, *UpgradeControlPlaneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeClusterControlPlane not implemented")
}
func (UnimplementedIksAdminServer) GetEvents(context.Context, *AdminClusterID) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedIksAdminServer) ClusterSnapshot(context.Context, *PostSnapshotRequest) (*PostSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterSnapshot not implemented")
}
func (UnimplementedIksAdminServer) ClusterRecreate(context.Context, *AdminClusterID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterRecreate not implemented")
}
func (UnimplementedIksAdminServer) PostLoadBalancer(context.Context, *PostLoadbalancerRequest) (*LoadbalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLoadBalancer not implemented")
}
func (UnimplementedIksAdminServer) PutLoadBalancer(context.Context, *PutLoadbalancerRequest) (*LoadbalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLoadBalancer not implemented")
}
func (UnimplementedIksAdminServer) GetLoadBalancers(context.Context, *AdminClusterID) (*LoadBalancers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancers not implemented")
}
func (UnimplementedIksAdminServer) GetLoadBalancer(context.Context, *GetLbRequest) (*LoadbalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancer not implemented")
}
func (UnimplementedIksAdminServer) DeleteLoadBalancer(context.Context, *GetLbRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancer not implemented")
}
func (UnimplementedIksAdminServer) GetControlPlaneSSHKeys(context.Context, *AdminClusterID) (*ClusterSSHKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlPlaneSSHKeys not implemented")
}
func (UnimplementedIksAdminServer) GetCloudAccountApproveList(context.Context, *emptypb.Empty) (*CloudAccountApproveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudAccountApproveList not implemented")
}
func (UnimplementedIksAdminServer) PostCloudAccountApproveList(context.Context, *CloudAccountApproveListRequest) (*CloudAccountApproveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCloudAccountApproveList not implemented")
}
func (UnimplementedIksAdminServer) PutCloudAccountApproveList(context.Context, *CloudAccountApproveListRequest) (*CloudAccountApproveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCloudAccountApproveList not implemented")
}
func (UnimplementedIksAdminServer) CreateInstanceTypes(context.Context, *CreateInstanceTypeRequest) (*InstanceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstanceTypes not implemented")
}
func (UnimplementedIksAdminServer) GetInstanceTypes(context.Context, *emptypb.Empty) (*GetInstanceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceTypes not implemented")
}
func (UnimplementedIksAdminServer) GetInstanceType(context.Context, *GetInstanceTypeRequest) (*GetInstanceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceType not implemented")
}
func (UnimplementedIksAdminServer) GetInstanceTypeInfo(context.Context, *emptypb.Empty) (*GetInstanceTypeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceTypeInfo not implemented")
}
func (UnimplementedIksAdminServer) PutInstanceType(context.Context, *UpdateInstanceTypeRequest) (*InstanceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutInstanceType not implemented")
}
func (UnimplementedIksAdminServer) UpdateInstanceTypeIMIToK8SCompatibility(context.Context, *InstanceTypeIMIK8SRequest) (*InstanceTypeIMIK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceTypeIMIToK8SCompatibility not implemented")
}
func (UnimplementedIksAdminServer) DeleteInstanceType(context.Context, *DeleteInstanceTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstanceType not implemented")
}
func (UnimplementedIksAdminServer) GetFirewallRule(context.Context, *AdminClusterID) (*GetAdminFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirewallRule not implemented")
}
func (UnimplementedIksAdminServer) mustEmbedUnimplementedIksAdminServer() {}

// UnsafeIksAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IksAdminServer will
// result in compilation errors.
type UnsafeIksAdminServer interface {
	mustEmbedUnimplementedIksAdminServer()
}

func RegisterIksAdminServer(s grpc.ServiceRegistrar, srv IksAdminServer) {
	s.RegisterService(&IksAdmin_ServiceDesc, srv)
}

func _IksAdmin_AuthenticateIKSAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).AuthenticateIKSAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/AuthenticateIKSAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).AuthenticateIKSAdminUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_CreateIMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).CreateIMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/CreateIMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).CreateIMI(ctx, req.(*IMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetIMIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetIMIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetIMIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetIMIs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetIMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetIMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetIMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetIMI(ctx, req.(*GetIMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetIMIsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetIMIsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetIMIsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetIMIsInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PutIMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PutIMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PutIMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PutIMI(ctx, req.(*UpdateIMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_UpdateIMIInstanceTypeToK8SCompatibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IMIInstanceTypeK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).UpdateIMIInstanceTypeToK8SCompatibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/UpdateIMIInstanceTypeToK8sCompatibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).UpdateIMIInstanceTypeToK8SCompatibility(ctx, req.(*IMIInstanceTypeK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_DeleteIMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).DeleteIMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/DeleteIMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).DeleteIMI(ctx, req.(*DeleteIMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_CreateK8SVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Createk8SversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).CreateK8SVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/CreateK8SVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).CreateK8SVersion(ctx, req.(*Createk8SversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetK8SVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetK8SVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetK8SVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetK8SVersions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetK8SVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetK8SVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetK8SVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetK8SVersion(ctx, req.(*GetK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PutK8SVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PutK8SVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PutK8SVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PutK8SVersion(ctx, req.(*UpdateK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_DeleteK8SVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).DeleteK8SVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/DeleteK8SVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).DeleteK8SVersion(ctx, req.(*GetK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_CreateNewAddOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddonAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).CreateNewAddOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/CreateNewAddOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).CreateNewAddOn(ctx, req.(*CreateAddonAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetAddOns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetAddOns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetAddOns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetAddOns(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetAddOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddOnAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetAddOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetAddOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetAddOn(ctx, req.(*GetAddOnAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PutAddOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddOnAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PutAddOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PutAddOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PutAddOn(ctx, req.(*UpdateAddOnAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_DeleteAddOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddOnAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).DeleteAddOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/DeleteAddOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).DeleteAddOn(ctx, req.(*GetAddOnAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetClusters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetCluster(ctx, req.(*AdminClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PutCPNodegroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNodegroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PutCPNodegroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PutCPNodegroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PutCPNodegroup(ctx, req.(*PutNodegroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_UpgradeClusterControlPlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeControlPlaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).UpgradeClusterControlPlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/UpgradeClusterControlPlane",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).UpgradeClusterControlPlane(ctx, req.(*UpgradeControlPlaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetEvents(ctx, req.(*AdminClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_ClusterSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).ClusterSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/ClusterSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).ClusterSnapshot(ctx, req.(*PostSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_ClusterRecreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).ClusterRecreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/ClusterRecreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).ClusterRecreate(ctx, req.(*AdminClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PostLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLoadbalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PostLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PostLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PostLoadBalancer(ctx, req.(*PostLoadbalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PutLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutLoadbalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PutLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PutLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PutLoadBalancer(ctx, req.(*PutLoadbalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetLoadBalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetLoadBalancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetLoadBalancers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetLoadBalancers(ctx, req.(*AdminClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetLoadBalancer(ctx, req.(*GetLbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_DeleteLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).DeleteLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/DeleteLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).DeleteLoadBalancer(ctx, req.(*GetLbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetControlPlaneSSHKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetControlPlaneSSHKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetControlPlaneSSHKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetControlPlaneSSHKeys(ctx, req.(*AdminClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetCloudAccountApproveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetCloudAccountApproveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetCloudAccountApproveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetCloudAccountApproveList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PostCloudAccountApproveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountApproveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PostCloudAccountApproveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PostCloudAccountApproveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PostCloudAccountApproveList(ctx, req.(*CloudAccountApproveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PutCloudAccountApproveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountApproveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PutCloudAccountApproveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PutCloudAccountApproveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PutCloudAccountApproveList(ctx, req.(*CloudAccountApproveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_CreateInstanceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).CreateInstanceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/CreateInstanceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).CreateInstanceTypes(ctx, req.(*CreateInstanceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetInstanceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetInstanceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetInstanceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetInstanceTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetInstanceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetInstanceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetInstanceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetInstanceType(ctx, req.(*GetInstanceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetInstanceTypeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetInstanceTypeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetInstanceTypeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetInstanceTypeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_PutInstanceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).PutInstanceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/PutInstanceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).PutInstanceType(ctx, req.(*UpdateInstanceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_UpdateInstanceTypeIMIToK8SCompatibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceTypeIMIK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).UpdateInstanceTypeIMIToK8SCompatibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/UpdateInstanceTypeIMIToK8sCompatibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).UpdateInstanceTypeIMIToK8SCompatibility(ctx, req.(*InstanceTypeIMIK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_DeleteInstanceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).DeleteInstanceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/DeleteInstanceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).DeleteInstanceType(ctx, req.(*DeleteInstanceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksAdmin_GetFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksAdminServer).GetFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksAdmin/GetFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksAdminServer).GetFirewallRule(ctx, req.(*AdminClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

// IksAdmin_ServiceDesc is the grpc.ServiceDesc for IksAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IksAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IksAdmin",
	HandlerType: (*IksAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateIKSAdminUser",
			Handler:    _IksAdmin_AuthenticateIKSAdminUser_Handler,
		},
		{
			MethodName: "CreateIMI",
			Handler:    _IksAdmin_CreateIMI_Handler,
		},
		{
			MethodName: "GetIMIs",
			Handler:    _IksAdmin_GetIMIs_Handler,
		},
		{
			MethodName: "GetIMI",
			Handler:    _IksAdmin_GetIMI_Handler,
		},
		{
			MethodName: "GetIMIsInfo",
			Handler:    _IksAdmin_GetIMIsInfo_Handler,
		},
		{
			MethodName: "PutIMI",
			Handler:    _IksAdmin_PutIMI_Handler,
		},
		{
			MethodName: "UpdateIMIInstanceTypeToK8sCompatibility",
			Handler:    _IksAdmin_UpdateIMIInstanceTypeToK8SCompatibility_Handler,
		},
		{
			MethodName: "DeleteIMI",
			Handler:    _IksAdmin_DeleteIMI_Handler,
		},
		{
			MethodName: "CreateK8SVersion",
			Handler:    _IksAdmin_CreateK8SVersion_Handler,
		},
		{
			MethodName: "GetK8SVersions",
			Handler:    _IksAdmin_GetK8SVersions_Handler,
		},
		{
			MethodName: "GetK8SVersion",
			Handler:    _IksAdmin_GetK8SVersion_Handler,
		},
		{
			MethodName: "PutK8SVersion",
			Handler:    _IksAdmin_PutK8SVersion_Handler,
		},
		{
			MethodName: "DeleteK8SVersion",
			Handler:    _IksAdmin_DeleteK8SVersion_Handler,
		},
		{
			MethodName: "CreateNewAddOn",
			Handler:    _IksAdmin_CreateNewAddOn_Handler,
		},
		{
			MethodName: "GetAddOns",
			Handler:    _IksAdmin_GetAddOns_Handler,
		},
		{
			MethodName: "GetAddOn",
			Handler:    _IksAdmin_GetAddOn_Handler,
		},
		{
			MethodName: "PutAddOn",
			Handler:    _IksAdmin_PutAddOn_Handler,
		},
		{
			MethodName: "DeleteAddOn",
			Handler:    _IksAdmin_DeleteAddOn_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _IksAdmin_GetClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _IksAdmin_GetCluster_Handler,
		},
		{
			MethodName: "PutCPNodegroup",
			Handler:    _IksAdmin_PutCPNodegroup_Handler,
		},
		{
			MethodName: "UpgradeClusterControlPlane",
			Handler:    _IksAdmin_UpgradeClusterControlPlane_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _IksAdmin_GetEvents_Handler,
		},
		{
			MethodName: "ClusterSnapshot",
			Handler:    _IksAdmin_ClusterSnapshot_Handler,
		},
		{
			MethodName: "ClusterRecreate",
			Handler:    _IksAdmin_ClusterRecreate_Handler,
		},
		{
			MethodName: "PostLoadBalancer",
			Handler:    _IksAdmin_PostLoadBalancer_Handler,
		},
		{
			MethodName: "PutLoadBalancer",
			Handler:    _IksAdmin_PutLoadBalancer_Handler,
		},
		{
			MethodName: "GetLoadBalancers",
			Handler:    _IksAdmin_GetLoadBalancers_Handler,
		},
		{
			MethodName: "GetLoadBalancer",
			Handler:    _IksAdmin_GetLoadBalancer_Handler,
		},
		{
			MethodName: "DeleteLoadBalancer",
			Handler:    _IksAdmin_DeleteLoadBalancer_Handler,
		},
		{
			MethodName: "GetControlPlaneSSHKeys",
			Handler:    _IksAdmin_GetControlPlaneSSHKeys_Handler,
		},
		{
			MethodName: "GetCloudAccountApproveList",
			Handler:    _IksAdmin_GetCloudAccountApproveList_Handler,
		},
		{
			MethodName: "PostCloudAccountApproveList",
			Handler:    _IksAdmin_PostCloudAccountApproveList_Handler,
		},
		{
			MethodName: "PutCloudAccountApproveList",
			Handler:    _IksAdmin_PutCloudAccountApproveList_Handler,
		},
		{
			MethodName: "CreateInstanceTypes",
			Handler:    _IksAdmin_CreateInstanceTypes_Handler,
		},
		{
			MethodName: "GetInstanceTypes",
			Handler:    _IksAdmin_GetInstanceTypes_Handler,
		},
		{
			MethodName: "GetInstanceType",
			Handler:    _IksAdmin_GetInstanceType_Handler,
		},
		{
			MethodName: "GetInstanceTypeInfo",
			Handler:    _IksAdmin_GetInstanceTypeInfo_Handler,
		},
		{
			MethodName: "PutInstanceType",
			Handler:    _IksAdmin_PutInstanceType_Handler,
		},
		{
			MethodName: "UpdateInstanceTypeIMIToK8sCompatibility",
			Handler:    _IksAdmin_UpdateInstanceTypeIMIToK8SCompatibility_Handler,
		},
		{
			MethodName: "DeleteInstanceType",
			Handler:    _IksAdmin_DeleteInstanceType_Handler,
		},
		{
			MethodName: "GetFirewallRule",
			Handler:    _IksAdmin_GetFirewallRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iks_admin.proto",
}
