// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authz.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SystemRoleExistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SystemRoleExistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemRoleExistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemRoleExistResponseMultiError, or nil if none found.
func (m *SystemRoleExistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemRoleExistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exist

	if len(errors) > 0 {
		return SystemRoleExistResponseMultiError(errors)
	}

	return nil
}

// SystemRoleExistResponseMultiError is an error wrapping multiple validation
// errors returned by SystemRoleExistResponse.ValidateAll() if the designated
// constraints aren't met.
type SystemRoleExistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemRoleExistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemRoleExistResponseMultiError) AllErrors() []error { return m }

// SystemRoleExistResponseValidationError is the validation error returned by
// SystemRoleExistResponse.Validate if the designated constraints aren't met.
type SystemRoleExistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemRoleExistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemRoleExistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemRoleExistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemRoleExistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemRoleExistResponseValidationError) ErrorName() string {
	return "SystemRoleExistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SystemRoleExistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemRoleExistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemRoleExistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemRoleExistResponseValidationError{}

// Validate checks the field values on UserIdentification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserIdentification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserIdentificationMultiError, or nil if none found.
func (m *UserIdentification) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetEmail()); l < 1 || l > 255 {
		err := UserIdentificationValidationError{
			field:  "Email",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetEnterpriseId()); l < 1 || l > 255 {
		err := UserIdentificationValidationError{
			field:  "EnterpriseId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetGroups()) > 10 {
		err := UserIdentificationValidationError{
			field:  "Groups",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserIdentificationMultiError(errors)
	}

	return nil
}

// UserIdentificationMultiError is an error wrapping multiple validation errors
// returned by UserIdentification.ValidateAll() if the designated constraints
// aren't met.
type UserIdentificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentificationMultiError) AllErrors() []error { return m }

// UserIdentificationValidationError is the validation error returned by
// UserIdentification.Validate if the designated constraints aren't met.
type UserIdentificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentificationValidationError) ErrorName() string {
	return "UserIdentificationValidationError"
}

// Error satisfies the builtin error interface
func (e UserIdentificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentificationValidationError{}

// Validate checks the field values on AuthorizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationRequestMultiError, or nil if none found.
func (m *AuthorizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := AuthorizationRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 512 {
		err := AuthorizationRequestValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVerb()); l < 1 || l > 10 {
		err := AuthorizationRequestValidationError{
			field:  "Verb",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizationRequestValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizationRequestValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorizationRequestMultiError(errors)
	}

	return nil
}

// AuthorizationRequestMultiError is an error wrapping multiple validation
// errors returned by AuthorizationRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthorizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationRequestMultiError) AllErrors() []error { return m }

// AuthorizationRequestValidationError is the validation error returned by
// AuthorizationRequest.Validate if the designated constraints aren't met.
type AuthorizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationRequestValidationError) ErrorName() string {
	return "AuthorizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationRequestValidationError{}

// Validate checks the field values on AuthorizationRequestInternal with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationRequestInternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationRequestInternal with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationRequestInternalMultiError, or nil if none found.
func (m *AuthorizationRequestInternal) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationRequestInternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := AuthorizationRequestInternalValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 512 {
		err := AuthorizationRequestInternalValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVerb()); l < 1 || l > 10 {
		err := AuthorizationRequestInternalValidationError{
			field:  "Verb",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizationRequestInternalValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizationRequestInternalValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizationRequestInternalValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUser() == nil {
		err := AuthorizationRequestInternalValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizationRequestInternalValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizationRequestInternalValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizationRequestInternalValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorizationRequestInternalMultiError(errors)
	}

	return nil
}

// AuthorizationRequestInternalMultiError is an error wrapping multiple
// validation errors returned by AuthorizationRequestInternal.ValidateAll() if
// the designated constraints aren't met.
type AuthorizationRequestInternalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationRequestInternalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationRequestInternalMultiError) AllErrors() []error { return m }

// AuthorizationRequestInternalValidationError is the validation error returned
// by AuthorizationRequestInternal.Validate if the designated constraints
// aren't met.
type AuthorizationRequestInternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationRequestInternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationRequestInternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationRequestInternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationRequestInternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationRequestInternalValidationError) ErrorName() string {
	return "AuthorizationRequestInternalValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationRequestInternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationRequestInternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationRequestInternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationRequestInternalValidationError{}

// Validate checks the field values on AuthorizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationResponseMultiError, or nil if none found.
func (m *AuthorizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allowed

	if len(errors) > 0 {
		return AuthorizationResponseMultiError(errors)
	}

	return nil
}

// AuthorizationResponseMultiError is an error wrapping multiple validation
// errors returned by AuthorizationResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthorizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationResponseMultiError) AllErrors() []error { return m }

// AuthorizationResponseValidationError is the validation error returned by
// AuthorizationResponse.Validate if the designated constraints aren't met.
type AuthorizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationResponseValidationError) ErrorName() string {
	return "AuthorizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationResponseValidationError{}

// Validate checks the field values on LookupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LookupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LookupRequestMultiError, or
// nil if none found.
func (m *LookupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := LookupRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceType()); l < 1 || l > 255 {
		err := LookupRequestValidationError{
			field:  "ResourceType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAction()); l < 1 || l > 255 {
		err := LookupRequestValidationError{
			field:  "Action",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetResourceIds()) > 1000 {
		err := LookupRequestValidationError{
			field:  "ResourceIds",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LookupRequestMultiError(errors)
	}

	return nil
}

// LookupRequestMultiError is an error wrapping multiple validation errors
// returned by LookupRequest.ValidateAll() if the designated constraints
// aren't met.
type LookupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupRequestMultiError) AllErrors() []error { return m }

// LookupRequestValidationError is the validation error returned by
// LookupRequest.Validate if the designated constraints aren't met.
type LookupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupRequestValidationError) ErrorName() string { return "LookupRequestValidationError" }

// Error satisfies the builtin error interface
func (e LookupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupRequestValidationError{}

// Validate checks the field values on LookupRequestInternal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookupRequestInternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupRequestInternal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupRequestInternalMultiError, or nil if none found.
func (m *LookupRequestInternal) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupRequestInternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := LookupRequestInternalValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceType()); l < 1 || l > 255 {
		err := LookupRequestInternalValidationError{
			field:  "ResourceType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAction()); l < 1 || l > 255 {
		err := LookupRequestInternalValidationError{
			field:  "Action",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetResourceIds()) > 1000 {
		err := LookupRequestInternalValidationError{
			field:  "ResourceIds",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUser() == nil {
		err := LookupRequestInternalValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookupRequestInternalValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookupRequestInternalValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookupRequestInternalValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookupRequestInternalMultiError(errors)
	}

	return nil
}

// LookupRequestInternalMultiError is an error wrapping multiple validation
// errors returned by LookupRequestInternal.ValidateAll() if the designated
// constraints aren't met.
type LookupRequestInternalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupRequestInternalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupRequestInternalMultiError) AllErrors() []error { return m }

// LookupRequestInternalValidationError is the validation error returned by
// LookupRequestInternal.Validate if the designated constraints aren't met.
type LookupRequestInternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupRequestInternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupRequestInternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupRequestInternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupRequestInternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupRequestInternalValidationError) ErrorName() string {
	return "LookupRequestInternalValidationError"
}

// Error satisfies the builtin error interface
func (e LookupRequestInternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupRequestInternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupRequestInternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupRequestInternalValidationError{}

// Validate checks the field values on LookupResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LookupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LookupResponseMultiError,
// or nil if none found.
func (m *LookupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	if len(errors) > 0 {
		return LookupResponseMultiError(errors)
	}

	return nil
}

// LookupResponseMultiError is an error wrapping multiple validation errors
// returned by LookupResponse.ValidateAll() if the designated constraints
// aren't met.
type LookupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupResponseMultiError) AllErrors() []error { return m }

// LookupResponseValidationError is the validation error returned by
// LookupResponse.Validate if the designated constraints aren't met.
type LookupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupResponseValidationError) ErrorName() string { return "LookupResponseValidationError" }

// Error satisfies the builtin error interface
func (e LookupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupResponseValidationError{}

// Validate checks the field values on ActionsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionsRequestMultiError,
// or nil if none found.
func (m *ActionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := ActionsRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceType()); l < 1 || l > 255 {
		err := ActionsRequestValidationError{
			field:  "ResourceType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceId()); l < 0 || l > 255 {
		err := ActionsRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ActionsRequestMultiError(errors)
	}

	return nil
}

// ActionsRequestMultiError is an error wrapping multiple validation errors
// returned by ActionsRequest.ValidateAll() if the designated constraints
// aren't met.
type ActionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionsRequestMultiError) AllErrors() []error { return m }

// ActionsRequestValidationError is the validation error returned by
// ActionsRequest.Validate if the designated constraints aren't met.
type ActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionsRequestValidationError) ErrorName() string { return "ActionsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionsRequestValidationError{}

// Validate checks the field values on ActionsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionsResponseMultiError, or nil if none found.
func (m *ActionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActionsResponseMultiError(errors)
	}

	return nil
}

// ActionsResponseMultiError is an error wrapping multiple validation errors
// returned by ActionsResponse.ValidateAll() if the designated constraints
// aren't met.
type ActionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionsResponseMultiError) AllErrors() []error { return m }

// ActionsResponseValidationError is the validation error returned by
// ActionsResponse.Validate if the designated constraints aren't met.
type ActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionsResponseValidationError) ErrorName() string { return "ActionsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionsResponseValidationError{}

// Validate checks the field values on CloudAccountRoleId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRoleId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRoleId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRoleIdMultiError, or nil if none found.
func (m *CloudAccountRoleId) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRoleId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRoleIdValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 255 {
		err := CloudAccountRoleIdValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloudAccountRoleIdMultiError(errors)
	}

	return nil
}

// CloudAccountRoleIdMultiError is an error wrapping multiple validation errors
// returned by CloudAccountRoleId.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountRoleIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRoleIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRoleIdMultiError) AllErrors() []error { return m }

// CloudAccountRoleIdValidationError is the validation error returned by
// CloudAccountRoleId.Validate if the designated constraints aren't met.
type CloudAccountRoleIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRoleIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRoleIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRoleIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRoleIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRoleIdValidationError) ErrorName() string {
	return "CloudAccountRoleIdValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRoleIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRoleId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRoleIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRoleIdValidationError{}

// Validate checks the field values on CloudAccountRole with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRoleMultiError, or nil if none found.
func (m *CloudAccountRole) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 0 || l > 255 {
		err := CloudAccountRoleValidationError{
			field:  "Id",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAlias()); l < 1 || l > 255 {
		err := CloudAccountRoleValidationError{
			field:  "Alias",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CloudAccountRole_Alias_Pattern.MatchString(m.GetAlias()) {
		err := CloudAccountRoleValidationError{
			field:  "Alias",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRoleValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := CloudAccountRole_Effect_name[int32(m.GetEffect())]; !ok {
		err := CloudAccountRoleValidationError{
			field:  "Effect",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUsers()) > 1000 {
		err := CloudAccountRoleValidationError{
			field:  "Users",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPermissions()) > 1000 {
		err := CloudAccountRoleValidationError{
			field:  "Permissions",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountRoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountRoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountRoleValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreatedAt != nil {

		if l := utf8.RuneCountInString(m.GetCreatedAt()); l < 1 || l > 128 {
			err := CloudAccountRoleValidationError{
				field:  "CreatedAt",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.UpdatedAt != nil {

		if l := utf8.RuneCountInString(m.GetUpdatedAt()); l < 1 || l > 128 {
			err := CloudAccountRoleValidationError{
				field:  "UpdatedAt",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeletedAt != nil {

		if l := utf8.RuneCountInString(m.GetDeletedAt()); l < 1 || l > 128 {
			err := CloudAccountRoleValidationError{
				field:  "DeletedAt",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CloudAccountRoleMultiError(errors)
	}

	return nil
}

// CloudAccountRoleMultiError is an error wrapping multiple validation errors
// returned by CloudAccountRole.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRoleMultiError) AllErrors() []error { return m }

// CloudAccountRoleValidationError is the validation error returned by
// CloudAccountRole.Validate if the designated constraints aren't met.
type CloudAccountRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRoleValidationError) ErrorName() string { return "CloudAccountRoleValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRoleValidationError{}

var _CloudAccountRole_Alias_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

// Validate checks the field values on CloudAccountRoleUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRoleUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRoleUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRoleUpdateMultiError, or nil if none found.
func (m *CloudAccountRoleUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRoleUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 255 {
		err := CloudAccountRoleUpdateValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAlias()); l < 1 || l > 255 {
		err := CloudAccountRoleUpdateValidationError{
			field:  "Alias",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CloudAccountRoleUpdate_Alias_Pattern.MatchString(m.GetAlias()) {
		err := CloudAccountRoleUpdateValidationError{
			field:  "Alias",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRoleUpdateValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := CloudAccountRoleUpdate_Effect_name[int32(m.GetEffect())]; !ok {
		err := CloudAccountRoleUpdateValidationError{
			field:  "Effect",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUsers()) > 1000 {
		err := CloudAccountRoleUpdateValidationError{
			field:  "Users",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPermissions()) > 1000 {
		err := CloudAccountRoleUpdateValidationError{
			field:  "Permissions",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountRoleUpdateValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountRoleUpdateValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountRoleUpdateValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudAccountRoleUpdateMultiError(errors)
	}

	return nil
}

// CloudAccountRoleUpdateMultiError is an error wrapping multiple validation
// errors returned by CloudAccountRoleUpdate.ValidateAll() if the designated
// constraints aren't met.
type CloudAccountRoleUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRoleUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRoleUpdateMultiError) AllErrors() []error { return m }

// CloudAccountRoleUpdateValidationError is the validation error returned by
// CloudAccountRoleUpdate.Validate if the designated constraints aren't met.
type CloudAccountRoleUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRoleUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRoleUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRoleUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRoleUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRoleUpdateValidationError) ErrorName() string {
	return "CloudAccountRoleUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRoleUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRoleUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRoleUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRoleUpdateValidationError{}

var _CloudAccountRoleUpdate_Alias_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

// Validate checks the field values on CloudAccountRoles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRoles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRoles with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRolesMultiError, or nil if none found.
func (m *CloudAccountRoles) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRoles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCloudAccountRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountRolesValidationError{
						field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountRolesValidationError{
						field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountRolesValidationError{
					field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudAccountRolesMultiError(errors)
	}

	return nil
}

// CloudAccountRolesMultiError is an error wrapping multiple validation errors
// returned by CloudAccountRoles.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountRolesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRolesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRolesMultiError) AllErrors() []error { return m }

// CloudAccountRolesValidationError is the validation error returned by
// CloudAccountRoles.Validate if the designated constraints aren't met.
type CloudAccountRolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRolesValidationError) ErrorName() string {
	return "CloudAccountRolesValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRoles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRolesValidationError{}

// Validate checks the field values on CloudAccountRoleQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRoleQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRoleQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRoleQueryMultiError, or nil if none found.
func (m *CloudAccountRoleQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRoleQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRoleQueryValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ResourceType != nil {

		if l := utf8.RuneCountInString(m.GetResourceType()); l < 1 || l > 255 {
			err := CloudAccountRoleQueryValidationError{
				field:  "ResourceType",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.UserId != nil {

		if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 255 {
			err := CloudAccountRoleQueryValidationError{
				field:  "UserId",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Page != nil {

		if m.GetPage() <= 0 {
			err := CloudAccountRoleQueryValidationError{
				field:  "Page",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Size != nil {

		if m.GetSize() <= 0 {
			err := CloudAccountRoleQueryValidationError{
				field:  "Size",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CloudAccountRoleQueryMultiError(errors)
	}

	return nil
}

// CloudAccountRoleQueryMultiError is an error wrapping multiple validation
// errors returned by CloudAccountRoleQuery.ValidateAll() if the designated
// constraints aren't met.
type CloudAccountRoleQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRoleQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRoleQueryMultiError) AllErrors() []error { return m }

// CloudAccountRoleQueryValidationError is the validation error returned by
// CloudAccountRoleQuery.Validate if the designated constraints aren't met.
type CloudAccountRoleQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRoleQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRoleQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRoleQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRoleQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRoleQueryValidationError) ErrorName() string {
	return "CloudAccountRoleQueryValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRoleQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRoleQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRoleQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRoleQueryValidationError{}

// Validate checks the field values on CloudAccountRoleUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRoleUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRoleUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRoleUserRequestMultiError, or nil if none found.
func (m *CloudAccountRoleUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRoleUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRoleUserRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 0 || l > 255 {
		err := CloudAccountRoleUserRequestValidationError{
			field:  "Id",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 255 {
		err := CloudAccountRoleUserRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloudAccountRoleUserRequestMultiError(errors)
	}

	return nil
}

// CloudAccountRoleUserRequestMultiError is an error wrapping multiple
// validation errors returned by CloudAccountRoleUserRequest.ValidateAll() if
// the designated constraints aren't met.
type CloudAccountRoleUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRoleUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRoleUserRequestMultiError) AllErrors() []error { return m }

// CloudAccountRoleUserRequestValidationError is the validation error returned
// by CloudAccountRoleUserRequest.Validate if the designated constraints
// aren't met.
type CloudAccountRoleUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRoleUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRoleUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRoleUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRoleUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRoleUserRequestValidationError) ErrorName() string {
	return "CloudAccountRoleUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRoleUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRoleUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRoleUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRoleUserRequestValidationError{}

// Validate checks the field values on CloudAccountRolesUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRolesUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRolesUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRolesUserRequestMultiError, or nil if none found.
func (m *CloudAccountRolesUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRolesUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRolesUserRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetCloudAccountRoleIds()); l < 1 || l > 1000 {
		err := CloudAccountRolesUserRequestValidationError{
			field:  "CloudAccountRoleIds",
			reason: "value must contain between 1 and 1000 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 255 {
		err := CloudAccountRolesUserRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloudAccountRolesUserRequestMultiError(errors)
	}

	return nil
}

// CloudAccountRolesUserRequestMultiError is an error wrapping multiple
// validation errors returned by CloudAccountRolesUserRequest.ValidateAll() if
// the designated constraints aren't met.
type CloudAccountRolesUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRolesUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRolesUserRequestMultiError) AllErrors() []error { return m }

// CloudAccountRolesUserRequestValidationError is the validation error returned
// by CloudAccountRolesUserRequest.Validate if the designated constraints
// aren't met.
type CloudAccountRolesUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRolesUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRolesUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRolesUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRolesUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRolesUserRequestValidationError) ErrorName() string {
	return "CloudAccountRolesUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRolesUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRolesUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRolesUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRolesUserRequestValidationError{}

// Validate checks the field values on CloudAccountRoleResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRoleResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRoleResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudAccountRoleResourceRequestMultiError, or nil if none found.
func (m *CloudAccountRoleResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRoleResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRoleResourceRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 0 || l > 255 {
		err := CloudAccountRoleResourceRequestValidationError{
			field:  "Id",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceId()); l < 1 || l > 255 {
		err := CloudAccountRoleResourceRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceType()); l < 1 || l > 255 {
		err := CloudAccountRoleResourceRequestValidationError{
			field:  "ResourceType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloudAccountRoleResourceRequestMultiError(errors)
	}

	return nil
}

// CloudAccountRoleResourceRequestMultiError is an error wrapping multiple
// validation errors returned by CloudAccountRoleResourceRequest.ValidateAll()
// if the designated constraints aren't met.
type CloudAccountRoleResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRoleResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRoleResourceRequestMultiError) AllErrors() []error { return m }

// CloudAccountRoleResourceRequestValidationError is the validation error
// returned by CloudAccountRoleResourceRequest.Validate if the designated
// constraints aren't met.
type CloudAccountRoleResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRoleResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRoleResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRoleResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRoleResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRoleResourceRequestValidationError) ErrorName() string {
	return "CloudAccountRoleResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRoleResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRoleResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRoleResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRoleResourceRequestValidationError{}

// Validate checks the field values on RoleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleRequestMultiError, or
// nil if none found.
func (m *RoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := RoleRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSubject()); l < 1 || l > 255 {
		err := RoleRequestValidationError{
			field:  "Subject",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSystemRole()); l < 1 || l > 255 {
		err := RoleRequestValidationError{
			field:  "SystemRole",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleRequestMultiError(errors)
	}

	return nil
}

// RoleRequestMultiError is an error wrapping multiple validation errors
// returned by RoleRequest.ValidateAll() if the designated constraints aren't met.
type RoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleRequestMultiError) AllErrors() []error { return m }

// RoleRequestValidationError is the validation error returned by
// RoleRequest.Validate if the designated constraints aren't met.
type RoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleRequestValidationError) ErrorName() string { return "RoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleRequestValidationError{}

// Validate checks the field values on CloudAccountRolePermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudAccountRolePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRolePermissionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudAccountRolePermissionRequestMultiError, or nil if none found.
func (m *CloudAccountRolePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRolePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRolePermissionRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCloudAccountRoleId()); l < 1 || l > 255 {
		err := CloudAccountRolePermissionRequestValidationError{
			field:  "CloudAccountRoleId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPermission() == nil {
		err := CloudAccountRolePermissionRequestValidationError{
			field:  "Permission",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudAccountRolePermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudAccountRolePermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudAccountRolePermissionRequestValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudAccountRolePermissionRequestMultiError(errors)
	}

	return nil
}

// CloudAccountRolePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudAccountRolePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudAccountRolePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRolePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRolePermissionRequestMultiError) AllErrors() []error { return m }

// CloudAccountRolePermissionRequestValidationError is the validation error
// returned by CloudAccountRolePermissionRequest.Validate if the designated
// constraints aren't met.
type CloudAccountRolePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRolePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRolePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRolePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRolePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRolePermissionRequestValidationError) ErrorName() string {
	return "CloudAccountRolePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRolePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRolePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRolePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRolePermissionRequestValidationError{}

// Validate checks the field values on CloudAccountRolePermissionId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRolePermissionId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRolePermissionId with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRolePermissionIdMultiError, or nil if none found.
func (m *CloudAccountRolePermissionId) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRolePermissionId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := CloudAccountRolePermissionIdValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCloudAccountRoleId()); l < 1 || l > 255 {
		err := CloudAccountRolePermissionIdValidationError{
			field:  "CloudAccountRoleId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 255 {
		err := CloudAccountRolePermissionIdValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloudAccountRolePermissionIdMultiError(errors)
	}

	return nil
}

// CloudAccountRolePermissionIdMultiError is an error wrapping multiple
// validation errors returned by CloudAccountRolePermissionId.ValidateAll() if
// the designated constraints aren't met.
type CloudAccountRolePermissionIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRolePermissionIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRolePermissionIdMultiError) AllErrors() []error { return m }

// CloudAccountRolePermissionIdValidationError is the validation error returned
// by CloudAccountRolePermissionId.Validate if the designated constraints
// aren't met.
type CloudAccountRolePermissionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRolePermissionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRolePermissionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRolePermissionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRolePermissionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRolePermissionIdValidationError) ErrorName() string {
	return "CloudAccountRolePermissionIdValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRolePermissionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRolePermissionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRolePermissionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRolePermissionIdValidationError{}

// Validate checks the field values on PolicyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyRequestMultiError, or
// nil if none found.
func (m *PolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSubject()); l < 1 || l > 255 {
		err := PolicyRequestValidationError{
			field:  "Subject",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObject()); l < 1 || l > 512 {
		err := PolicyRequestValidationError{
			field:  "Object",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAction()); l < 1 || l > 10 {
		err := PolicyRequestValidationError{
			field:  "Action",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExpression()); l < 1 || l > 512 {
		err := PolicyRequestValidationError{
			field:  "Expression",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PolicyRequestMultiError(errors)
	}

	return nil
}

// PolicyRequestMultiError is an error wrapping multiple validation errors
// returned by PolicyRequest.ValidateAll() if the designated constraints
// aren't met.
type PolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyRequestMultiError) AllErrors() []error { return m }

// PolicyRequestValidationError is the validation error returned by
// PolicyRequest.Validate if the designated constraints aren't met.
type PolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyRequestValidationError) ErrorName() string { return "PolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e PolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyRequestValidationError{}

// Validate checks the field values on ResourceDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDefinitions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDefinitionsMultiError, or nil if none found.
func (m *ResourceDefinitions) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDefinitions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDefinitionsValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDefinitionsValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDefinitionsValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceDefinitionsMultiError(errors)
	}

	return nil
}

// ResourceDefinitionsMultiError is an error wrapping multiple validation
// errors returned by ResourceDefinitions.ValidateAll() if the designated
// constraints aren't met.
type ResourceDefinitionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDefinitionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDefinitionsMultiError) AllErrors() []error { return m }

// ResourceDefinitionsValidationError is the validation error returned by
// ResourceDefinitions.Validate if the designated constraints aren't met.
type ResourceDefinitionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDefinitionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDefinitionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDefinitionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDefinitionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDefinitionsValidationError) ErrorName() string {
	return "ResourceDefinitionsValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDefinitionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDefinitions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDefinitionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDefinitionsValidationError{}

// Validate checks the field values on ResourceDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDefinitionMultiError, or nil if none found.
func (m *ResourceDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 255 {
		err := ResourceDefinitionValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 512 {
		err := ResourceDefinitionValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDefinitionValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDefinitionValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDefinitionValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceDefinitionMultiError(errors)
	}

	return nil
}

// ResourceDefinitionMultiError is an error wrapping multiple validation errors
// returned by ResourceDefinition.ValidateAll() if the designated constraints
// aren't met.
type ResourceDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDefinitionMultiError) AllErrors() []error { return m }

// ResourceDefinitionValidationError is the validation error returned by
// ResourceDefinition.Validate if the designated constraints aren't met.
type ResourceDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDefinitionValidationError) ErrorName() string {
	return "ResourceDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDefinitionValidationError{}

// Validate checks the field values on ListUsersByCloudAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersByCloudAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersByCloudAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUsersByCloudAccountRequestMultiError, or nil if none found.
func (m *ListUsersByCloudAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersByCloudAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := ListUsersByCloudAccountRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUsersByCloudAccountRequestMultiError(errors)
	}

	return nil
}

// ListUsersByCloudAccountRequestMultiError is an error wrapping multiple
// validation errors returned by ListUsersByCloudAccountRequest.ValidateAll()
// if the designated constraints aren't met.
type ListUsersByCloudAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersByCloudAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersByCloudAccountRequestMultiError) AllErrors() []error { return m }

// ListUsersByCloudAccountRequestValidationError is the validation error
// returned by ListUsersByCloudAccountRequest.Validate if the designated
// constraints aren't met.
type ListUsersByCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersByCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersByCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersByCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersByCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersByCloudAccountRequestValidationError) ErrorName() string {
	return "ListUsersByCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersByCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersByCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersByCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersByCloudAccountRequestValidationError{}

// Validate checks the field values on ListUsersByCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersByCloudAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersByCloudAccountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUsersByCloudAccountResponseMultiError, or nil if none found.
func (m *ListUsersByCloudAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersByCloudAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersByCloudAccountResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersByCloudAccountResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersByCloudAccountResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUsersByCloudAccountResponseMultiError(errors)
	}

	return nil
}

// ListUsersByCloudAccountResponseMultiError is an error wrapping multiple
// validation errors returned by ListUsersByCloudAccountResponse.ValidateAll()
// if the designated constraints aren't met.
type ListUsersByCloudAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersByCloudAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersByCloudAccountResponseMultiError) AllErrors() []error { return m }

// ListUsersByCloudAccountResponseValidationError is the validation error
// returned by ListUsersByCloudAccountResponse.Validate if the designated
// constraints aren't met.
type ListUsersByCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersByCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersByCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersByCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersByCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersByCloudAccountResponseValidationError) ErrorName() string {
	return "ListUsersByCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersByCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersByCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersByCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersByCloudAccountResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := GetUserRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 255 {
		err := GetUserRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on UserDetailed with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDetailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailed with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDetailedMultiError, or
// nil if none found.
func (m *UserDetailed) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UserDetailedValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCloudAccountId()) < 1 {
		err := UserDetailedValidationError{
			field:  "CloudAccountId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCloudAccountRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserDetailedValidationError{
						field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserDetailedValidationError{
						field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserDetailedValidationError{
					field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserDetailedMultiError(errors)
	}

	return nil
}

// UserDetailedMultiError is an error wrapping multiple validation errors
// returned by UserDetailed.ValidateAll() if the designated constraints aren't met.
type UserDetailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailedMultiError) AllErrors() []error { return m }

// UserDetailedValidationError is the validation error returned by
// UserDetailed.Validate if the designated constraints aren't met.
type UserDetailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailedValidationError) ErrorName() string { return "UserDetailedValidationError" }

// Error satisfies the builtin error interface
func (e UserDetailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailedValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 255 {
		err := UserValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := UserValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCloudAccountRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("CloudAccountRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on DefaultCloudAccountRoleAssignedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DefaultCloudAccountRoleAssignedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DefaultCloudAccountRoleAssignedRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DefaultCloudAccountRoleAssignedRequestMultiError, or nil if none found.
func (m *DefaultCloudAccountRoleAssignedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DefaultCloudAccountRoleAssignedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := DefaultCloudAccountRoleAssignedRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DefaultCloudAccountRoleAssignedRequestMultiError(errors)
	}

	return nil
}

// DefaultCloudAccountRoleAssignedRequestMultiError is an error wrapping
// multiple validation errors returned by
// DefaultCloudAccountRoleAssignedRequest.ValidateAll() if the designated
// constraints aren't met.
type DefaultCloudAccountRoleAssignedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultCloudAccountRoleAssignedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultCloudAccountRoleAssignedRequestMultiError) AllErrors() []error { return m }

// DefaultCloudAccountRoleAssignedRequestValidationError is the validation
// error returned by DefaultCloudAccountRoleAssignedRequest.Validate if the
// designated constraints aren't met.
type DefaultCloudAccountRoleAssignedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultCloudAccountRoleAssignedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultCloudAccountRoleAssignedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultCloudAccountRoleAssignedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultCloudAccountRoleAssignedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultCloudAccountRoleAssignedRequestValidationError) ErrorName() string {
	return "DefaultCloudAccountRoleAssignedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultCloudAccountRoleAssignedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultCloudAccountRoleAssignedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultCloudAccountRoleAssignedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultCloudAccountRoleAssignedRequestValidationError{}

// Validate checks the field values on DefaultCloudAccountRoleAssignedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DefaultCloudAccountRoleAssignedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DefaultCloudAccountRoleAssignedResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DefaultCloudAccountRoleAssignedResponseMultiError, or nil if none found.
func (m *DefaultCloudAccountRoleAssignedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DefaultCloudAccountRoleAssignedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Assigned

	if len(errors) > 0 {
		return DefaultCloudAccountRoleAssignedResponseMultiError(errors)
	}

	return nil
}

// DefaultCloudAccountRoleAssignedResponseMultiError is an error wrapping
// multiple validation errors returned by
// DefaultCloudAccountRoleAssignedResponse.ValidateAll() if the designated
// constraints aren't met.
type DefaultCloudAccountRoleAssignedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultCloudAccountRoleAssignedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultCloudAccountRoleAssignedResponseMultiError) AllErrors() []error { return m }

// DefaultCloudAccountRoleAssignedResponseValidationError is the validation
// error returned by DefaultCloudAccountRoleAssignedResponse.Validate if the
// designated constraints aren't met.
type DefaultCloudAccountRoleAssignedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultCloudAccountRoleAssignedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultCloudAccountRoleAssignedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultCloudAccountRoleAssignedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultCloudAccountRoleAssignedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultCloudAccountRoleAssignedResponseValidationError) ErrorName() string {
	return "DefaultCloudAccountRoleAssignedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultCloudAccountRoleAssignedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultCloudAccountRoleAssignedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultCloudAccountRoleAssignedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultCloudAccountRoleAssignedResponseValidationError{}

// Validate checks the field values on AssignDefaultCloudAccountRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssignDefaultCloudAccountRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignDefaultCloudAccountRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssignDefaultCloudAccountRoleRequestMultiError, or nil if none found.
func (m *AssignDefaultCloudAccountRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignDefaultCloudAccountRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCloudAccountId()); l < 1 || l > 255 {
		err := AssignDefaultCloudAccountRoleRequestValidationError{
			field:  "CloudAccountId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAdmins()) != 1 {
		err := AssignDefaultCloudAccountRoleRequestValidationError{
			field:  "Admins",
			reason: "value must contain exactly 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMembers()) > 1000 {
		err := AssignDefaultCloudAccountRoleRequestValidationError{
			field:  "Members",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignDefaultCloudAccountRoleRequestMultiError(errors)
	}

	return nil
}

// AssignDefaultCloudAccountRoleRequestMultiError is an error wrapping multiple
// validation errors returned by
// AssignDefaultCloudAccountRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignDefaultCloudAccountRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignDefaultCloudAccountRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignDefaultCloudAccountRoleRequestMultiError) AllErrors() []error { return m }

// AssignDefaultCloudAccountRoleRequestValidationError is the validation error
// returned by AssignDefaultCloudAccountRoleRequest.Validate if the designated
// constraints aren't met.
type AssignDefaultCloudAccountRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignDefaultCloudAccountRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignDefaultCloudAccountRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignDefaultCloudAccountRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignDefaultCloudAccountRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignDefaultCloudAccountRoleRequestValidationError) ErrorName() string {
	return "AssignDefaultCloudAccountRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignDefaultCloudAccountRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignDefaultCloudAccountRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignDefaultCloudAccountRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignDefaultCloudAccountRoleRequestValidationError{}

// Validate checks the field values on CloudAccountRole_Permission with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountRole_Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRole_Permission with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountRole_PermissionMultiError, or nil if none found.
func (m *CloudAccountRole_Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRole_Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 0 || l > 255 {
		err := CloudAccountRole_PermissionValidationError{
			field:  "Id",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceType()); l < 1 || l > 255 {
		err := CloudAccountRole_PermissionValidationError{
			field:  "ResourceType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceId()); l < 1 || l > 255 {
		err := CloudAccountRole_PermissionValidationError{
			field:  "ResourceId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CloudAccountRole_Permission_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := CloudAccountRole_PermissionValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9*-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetActions()) > 127 {
		err := CloudAccountRole_PermissionValidationError{
			field:  "Actions",
			reason: "value must contain no more than 127 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if len(errors) > 0 {
		return CloudAccountRole_PermissionMultiError(errors)
	}

	return nil
}

// CloudAccountRole_PermissionMultiError is an error wrapping multiple
// validation errors returned by CloudAccountRole_Permission.ValidateAll() if
// the designated constraints aren't met.
type CloudAccountRole_PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRole_PermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRole_PermissionMultiError) AllErrors() []error { return m }

// CloudAccountRole_PermissionValidationError is the validation error returned
// by CloudAccountRole_Permission.Validate if the designated constraints
// aren't met.
type CloudAccountRole_PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRole_PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRole_PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRole_PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRole_PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRole_PermissionValidationError) ErrorName() string {
	return "CloudAccountRole_PermissionValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRole_PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRole_Permission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRole_PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRole_PermissionValidationError{}

var _CloudAccountRole_Permission_ResourceId_Pattern = regexp.MustCompile("^[a-zA-Z0-9*-]+$")

// Validate checks the field values on CloudAccountRoleUpdate_Permission with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudAccountRoleUpdate_Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountRoleUpdate_Permission
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudAccountRoleUpdate_PermissionMultiError, or nil if none found.
func (m *CloudAccountRoleUpdate_Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountRoleUpdate_Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetResourceType()); l < 1 || l > 255 {
		err := CloudAccountRoleUpdate_PermissionValidationError{
			field:  "ResourceType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetResourceId()); l < 1 || l > 255 {
		err := CloudAccountRoleUpdate_PermissionValidationError{
			field:  "ResourceId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CloudAccountRoleUpdate_Permission_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := CloudAccountRoleUpdate_PermissionValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9*-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetActions()) > 127 {
		err := CloudAccountRoleUpdate_PermissionValidationError{
			field:  "Actions",
			reason: "value must contain no more than 127 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Id != nil {

		if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 255 {
			err := CloudAccountRoleUpdate_PermissionValidationError{
				field:  "Id",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CloudAccountRoleUpdate_PermissionMultiError(errors)
	}

	return nil
}

// CloudAccountRoleUpdate_PermissionMultiError is an error wrapping multiple
// validation errors returned by
// CloudAccountRoleUpdate_Permission.ValidateAll() if the designated
// constraints aren't met.
type CloudAccountRoleUpdate_PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountRoleUpdate_PermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountRoleUpdate_PermissionMultiError) AllErrors() []error { return m }

// CloudAccountRoleUpdate_PermissionValidationError is the validation error
// returned by CloudAccountRoleUpdate_Permission.Validate if the designated
// constraints aren't met.
type CloudAccountRoleUpdate_PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountRoleUpdate_PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountRoleUpdate_PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountRoleUpdate_PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountRoleUpdate_PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountRoleUpdate_PermissionValidationError) ErrorName() string {
	return "CloudAccountRoleUpdate_PermissionValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountRoleUpdate_PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountRoleUpdate_Permission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountRoleUpdate_PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountRoleUpdate_PermissionValidationError{}

var _CloudAccountRoleUpdate_Permission_ResourceId_Pattern = regexp.MustCompile("^[a-zA-Z0-9*-]+$")

// Validate checks the field values on ResourceDefinition_Action with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDefinition_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDefinition_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDefinition_ActionMultiError, or nil if none found.
func (m *ResourceDefinition_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDefinition_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := ResourceDefinition_ActionValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 255 {
		err := ResourceDefinition_ActionValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 512 {
		err := ResourceDefinition_ActionValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceDefinition_ActionMultiError(errors)
	}

	return nil
}

// ResourceDefinition_ActionMultiError is an error wrapping multiple validation
// errors returned by ResourceDefinition_Action.ValidateAll() if the
// designated constraints aren't met.
type ResourceDefinition_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDefinition_ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDefinition_ActionMultiError) AllErrors() []error { return m }

// ResourceDefinition_ActionValidationError is the validation error returned by
// ResourceDefinition_Action.Validate if the designated constraints aren't met.
type ResourceDefinition_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDefinition_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDefinition_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDefinition_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDefinition_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDefinition_ActionValidationError) ErrorName() string {
	return "ResourceDefinition_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDefinition_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDefinition_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDefinition_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDefinition_ActionValidationError{}

// Validate checks the field values on UserDetailed_CloudAccountRoleDetailed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UserDetailed_CloudAccountRoleDetailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailed_CloudAccountRoleDetailed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserDetailed_CloudAccountRoleDetailedMultiError, or nil if none found.
func (m *UserDetailed_CloudAccountRoleDetailed) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailed_CloudAccountRoleDetailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountRoleId

	// no validation rules for Alias

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserDetailed_CloudAccountRoleDetailedValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserDetailed_CloudAccountRoleDetailedValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserDetailed_CloudAccountRoleDetailedValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if m.DeletedAt != nil {
		// no validation rules for DeletedAt
	}

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if m.Effect != nil {
		// no validation rules for Effect
	}

	if len(errors) > 0 {
		return UserDetailed_CloudAccountRoleDetailedMultiError(errors)
	}

	return nil
}

// UserDetailed_CloudAccountRoleDetailedMultiError is an error wrapping
// multiple validation errors returned by
// UserDetailed_CloudAccountRoleDetailed.ValidateAll() if the designated
// constraints aren't met.
type UserDetailed_CloudAccountRoleDetailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailed_CloudAccountRoleDetailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailed_CloudAccountRoleDetailedMultiError) AllErrors() []error { return m }

// UserDetailed_CloudAccountRoleDetailedValidationError is the validation error
// returned by UserDetailed_CloudAccountRoleDetailed.Validate if the
// designated constraints aren't met.
type UserDetailed_CloudAccountRoleDetailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailed_CloudAccountRoleDetailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailed_CloudAccountRoleDetailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailed_CloudAccountRoleDetailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailed_CloudAccountRoleDetailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailed_CloudAccountRoleDetailedValidationError) ErrorName() string {
	return "UserDetailed_CloudAccountRoleDetailedValidationError"
}

// Error satisfies the builtin error interface
func (e UserDetailed_CloudAccountRoleDetailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailed_CloudAccountRoleDetailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailed_CloudAccountRoleDetailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailed_CloudAccountRoleDetailedValidationError{}

// Validate checks the field values on User_CloudAccountRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *User_CloudAccountRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_CloudAccountRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// User_CloudAccountRoleMultiError, or nil if none found.
func (m *User_CloudAccountRole) ValidateAll() error {
	return m.validate(true)
}

func (m *User_CloudAccountRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountRoleId

	// no validation rules for Alias

	if len(errors) > 0 {
		return User_CloudAccountRoleMultiError(errors)
	}

	return nil
}

// User_CloudAccountRoleMultiError is an error wrapping multiple validation
// errors returned by User_CloudAccountRole.ValidateAll() if the designated
// constraints aren't met.
type User_CloudAccountRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_CloudAccountRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_CloudAccountRoleMultiError) AllErrors() []error { return m }

// User_CloudAccountRoleValidationError is the validation error returned by
// User_CloudAccountRole.Validate if the designated constraints aren't met.
type User_CloudAccountRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_CloudAccountRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_CloudAccountRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_CloudAccountRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_CloudAccountRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_CloudAccountRoleValidationError) ErrorName() string {
	return "User_CloudAccountRoleValidationError"
}

// Error satisfies the builtin error interface
func (e User_CloudAccountRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_CloudAccountRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_CloudAccountRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_CloudAccountRoleValidationError{}
