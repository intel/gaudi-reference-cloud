// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/compute_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSshPublicKeyServiceClient is a mock of SshPublicKeyServiceClient interface.
type MockSshPublicKeyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSshPublicKeyServiceClientMockRecorder
}

// MockSshPublicKeyServiceClientMockRecorder is the mock recorder for MockSshPublicKeyServiceClient.
type MockSshPublicKeyServiceClientMockRecorder struct {
	mock *MockSshPublicKeyServiceClient
}

// NewMockSshPublicKeyServiceClient creates a new mock instance.
func NewMockSshPublicKeyServiceClient(ctrl *gomock.Controller) *MockSshPublicKeyServiceClient {
	mock := &MockSshPublicKeyServiceClient{ctrl: ctrl}
	mock.recorder = &MockSshPublicKeyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshPublicKeyServiceClient) EXPECT() *MockSshPublicKeyServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSshPublicKeyServiceClient) Create(ctx context.Context, in *SshPublicKeyCreateRequest, opts ...grpc.CallOption) (*SshPublicKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*SshPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSshPublicKeyServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSshPublicKeyServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockSshPublicKeyServiceClient) Delete(ctx context.Context, in *SshPublicKeyDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSshPublicKeyServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSshPublicKeyServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockSshPublicKeyServiceClient) Get(ctx context.Context, in *SshPublicKeyGetRequest, opts ...grpc.CallOption) (*SshPublicKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*SshPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSshPublicKeyServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSshPublicKeyServiceClient)(nil).Get), varargs...)
}

// Ping mocks base method.
func (m *MockSshPublicKeyServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockSshPublicKeyServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSshPublicKeyServiceClient)(nil).Ping), varargs...)
}

// Search mocks base method.
func (m *MockSshPublicKeyServiceClient) Search(ctx context.Context, in *SshPublicKeySearchRequest, opts ...grpc.CallOption) (*SshPublicKeySearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*SshPublicKeySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSshPublicKeyServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSshPublicKeyServiceClient)(nil).Search), varargs...)
}

// SearchStream mocks base method.
func (m *MockSshPublicKeyServiceClient) SearchStream(ctx context.Context, in *SshPublicKeySearchRequest, opts ...grpc.CallOption) (SshPublicKeyService_SearchStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStream", varargs...)
	ret0, _ := ret[0].(SshPublicKeyService_SearchStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockSshPublicKeyServiceClientMockRecorder) SearchStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockSshPublicKeyServiceClient)(nil).SearchStream), varargs...)
}

// MockSshPublicKeyService_SearchStreamClient is a mock of SshPublicKeyService_SearchStreamClient interface.
type MockSshPublicKeyService_SearchStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockSshPublicKeyService_SearchStreamClientMockRecorder
}

// MockSshPublicKeyService_SearchStreamClientMockRecorder is the mock recorder for MockSshPublicKeyService_SearchStreamClient.
type MockSshPublicKeyService_SearchStreamClientMockRecorder struct {
	mock *MockSshPublicKeyService_SearchStreamClient
}

// NewMockSshPublicKeyService_SearchStreamClient creates a new mock instance.
func NewMockSshPublicKeyService_SearchStreamClient(ctrl *gomock.Controller) *MockSshPublicKeyService_SearchStreamClient {
	mock := &MockSshPublicKeyService_SearchStreamClient{ctrl: ctrl}
	mock.recorder = &MockSshPublicKeyService_SearchStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshPublicKeyService_SearchStreamClient) EXPECT() *MockSshPublicKeyService_SearchStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSshPublicKeyService_SearchStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSshPublicKeyService_SearchStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSshPublicKeyService_SearchStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSshPublicKeyService_SearchStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSshPublicKeyService_SearchStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSshPublicKeyService_SearchStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSshPublicKeyService_SearchStreamClient) Recv() (*SshPublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*SshPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSshPublicKeyService_SearchStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSshPublicKeyService_SearchStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSshPublicKeyService_SearchStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSshPublicKeyService_SearchStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSshPublicKeyService_SearchStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSshPublicKeyService_SearchStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSshPublicKeyService_SearchStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamClient)(nil).Trailer))
}

// MockSshPublicKeyServiceServer is a mock of SshPublicKeyServiceServer interface.
type MockSshPublicKeyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSshPublicKeyServiceServerMockRecorder
}

// MockSshPublicKeyServiceServerMockRecorder is the mock recorder for MockSshPublicKeyServiceServer.
type MockSshPublicKeyServiceServerMockRecorder struct {
	mock *MockSshPublicKeyServiceServer
}

// NewMockSshPublicKeyServiceServer creates a new mock instance.
func NewMockSshPublicKeyServiceServer(ctrl *gomock.Controller) *MockSshPublicKeyServiceServer {
	mock := &MockSshPublicKeyServiceServer{ctrl: ctrl}
	mock.recorder = &MockSshPublicKeyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshPublicKeyServiceServer) EXPECT() *MockSshPublicKeyServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSshPublicKeyServiceServer) Create(arg0 context.Context, arg1 *SshPublicKeyCreateRequest) (*SshPublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*SshPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSshPublicKeyServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSshPublicKeyServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSshPublicKeyServiceServer) Delete(arg0 context.Context, arg1 *SshPublicKeyDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSshPublicKeyServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSshPublicKeyServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockSshPublicKeyServiceServer) Get(arg0 context.Context, arg1 *SshPublicKeyGetRequest) (*SshPublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*SshPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSshPublicKeyServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSshPublicKeyServiceServer)(nil).Get), arg0, arg1)
}

// Ping mocks base method.
func (m *MockSshPublicKeyServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockSshPublicKeyServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSshPublicKeyServiceServer)(nil).Ping), arg0, arg1)
}

// Search mocks base method.
func (m *MockSshPublicKeyServiceServer) Search(arg0 context.Context, arg1 *SshPublicKeySearchRequest) (*SshPublicKeySearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*SshPublicKeySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSshPublicKeyServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSshPublicKeyServiceServer)(nil).Search), arg0, arg1)
}

// SearchStream mocks base method.
func (m *MockSshPublicKeyServiceServer) SearchStream(arg0 *SshPublicKeySearchRequest, arg1 SshPublicKeyService_SearchStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockSshPublicKeyServiceServerMockRecorder) SearchStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockSshPublicKeyServiceServer)(nil).SearchStream), arg0, arg1)
}

// mustEmbedUnimplementedSshPublicKeyServiceServer mocks base method.
func (m *MockSshPublicKeyServiceServer) mustEmbedUnimplementedSshPublicKeyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSshPublicKeyServiceServer")
}

// mustEmbedUnimplementedSshPublicKeyServiceServer indicates an expected call of mustEmbedUnimplementedSshPublicKeyServiceServer.
func (mr *MockSshPublicKeyServiceServerMockRecorder) mustEmbedUnimplementedSshPublicKeyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSshPublicKeyServiceServer", reflect.TypeOf((*MockSshPublicKeyServiceServer)(nil).mustEmbedUnimplementedSshPublicKeyServiceServer))
}

// MockUnsafeSshPublicKeyServiceServer is a mock of UnsafeSshPublicKeyServiceServer interface.
type MockUnsafeSshPublicKeyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSshPublicKeyServiceServerMockRecorder
}

// MockUnsafeSshPublicKeyServiceServerMockRecorder is the mock recorder for MockUnsafeSshPublicKeyServiceServer.
type MockUnsafeSshPublicKeyServiceServerMockRecorder struct {
	mock *MockUnsafeSshPublicKeyServiceServer
}

// NewMockUnsafeSshPublicKeyServiceServer creates a new mock instance.
func NewMockUnsafeSshPublicKeyServiceServer(ctrl *gomock.Controller) *MockUnsafeSshPublicKeyServiceServer {
	mock := &MockUnsafeSshPublicKeyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSshPublicKeyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSshPublicKeyServiceServer) EXPECT() *MockUnsafeSshPublicKeyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSshPublicKeyServiceServer mocks base method.
func (m *MockUnsafeSshPublicKeyServiceServer) mustEmbedUnimplementedSshPublicKeyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSshPublicKeyServiceServer")
}

// mustEmbedUnimplementedSshPublicKeyServiceServer indicates an expected call of mustEmbedUnimplementedSshPublicKeyServiceServer.
func (mr *MockUnsafeSshPublicKeyServiceServerMockRecorder) mustEmbedUnimplementedSshPublicKeyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSshPublicKeyServiceServer", reflect.TypeOf((*MockUnsafeSshPublicKeyServiceServer)(nil).mustEmbedUnimplementedSshPublicKeyServiceServer))
}

// MockSshPublicKeyService_SearchStreamServer is a mock of SshPublicKeyService_SearchStreamServer interface.
type MockSshPublicKeyService_SearchStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockSshPublicKeyService_SearchStreamServerMockRecorder
}

// MockSshPublicKeyService_SearchStreamServerMockRecorder is the mock recorder for MockSshPublicKeyService_SearchStreamServer.
type MockSshPublicKeyService_SearchStreamServerMockRecorder struct {
	mock *MockSshPublicKeyService_SearchStreamServer
}

// NewMockSshPublicKeyService_SearchStreamServer creates a new mock instance.
func NewMockSshPublicKeyService_SearchStreamServer(ctrl *gomock.Controller) *MockSshPublicKeyService_SearchStreamServer {
	mock := &MockSshPublicKeyService_SearchStreamServer{ctrl: ctrl}
	mock.recorder = &MockSshPublicKeyService_SearchStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshPublicKeyService_SearchStreamServer) EXPECT() *MockSshPublicKeyService_SearchStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSshPublicKeyService_SearchStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSshPublicKeyService_SearchStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSshPublicKeyService_SearchStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSshPublicKeyService_SearchStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSshPublicKeyService_SearchStreamServer) Send(arg0 *SshPublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSshPublicKeyService_SearchStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSshPublicKeyService_SearchStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSshPublicKeyService_SearchStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSshPublicKeyService_SearchStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSshPublicKeyService_SearchStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSshPublicKeyService_SearchStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSshPublicKeyService_SearchStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSshPublicKeyService_SearchStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSshPublicKeyService_SearchStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSshPublicKeyService_SearchStreamServer)(nil).SetTrailer), arg0)
}

// MockInstanceServiceClient is a mock of InstanceServiceClient interface.
type MockInstanceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServiceClientMockRecorder
}

// MockInstanceServiceClientMockRecorder is the mock recorder for MockInstanceServiceClient.
type MockInstanceServiceClientMockRecorder struct {
	mock *MockInstanceServiceClient
}

// NewMockInstanceServiceClient creates a new mock instance.
func NewMockInstanceServiceClient(ctrl *gomock.Controller) *MockInstanceServiceClient {
	mock := &MockInstanceServiceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceServiceClient) EXPECT() *MockInstanceServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceServiceClient) Create(ctx context.Context, in *InstanceCreateRequest, opts ...grpc.CallOption) (*Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInstanceServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockInstanceServiceClient) Delete(ctx context.Context, in *InstanceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockInstanceServiceClient) Get(ctx context.Context, in *InstanceGetRequest, opts ...grpc.CallOption) (*Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceServiceClient)(nil).Get), varargs...)
}

// Ping mocks base method.
func (m *MockInstanceServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockInstanceServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInstanceServiceClient)(nil).Ping), varargs...)
}

// Search mocks base method.
func (m *MockInstanceServiceClient) Search(ctx context.Context, in *InstanceSearchRequest, opts ...grpc.CallOption) (*InstanceSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*InstanceSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockInstanceServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInstanceServiceClient)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockInstanceServiceClient) Update(ctx context.Context, in *InstanceUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInstanceServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanceServiceClient)(nil).Update), varargs...)
}

// MockInstanceServiceServer is a mock of InstanceServiceServer interface.
type MockInstanceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServiceServerMockRecorder
}

// MockInstanceServiceServerMockRecorder is the mock recorder for MockInstanceServiceServer.
type MockInstanceServiceServerMockRecorder struct {
	mock *MockInstanceServiceServer
}

// NewMockInstanceServiceServer creates a new mock instance.
func NewMockInstanceServiceServer(ctrl *gomock.Controller) *MockInstanceServiceServer {
	mock := &MockInstanceServiceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceServiceServer) EXPECT() *MockInstanceServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceServiceServer) Create(arg0 context.Context, arg1 *InstanceCreateRequest) (*Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInstanceServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockInstanceServiceServer) Delete(arg0 context.Context, arg1 *InstanceDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockInstanceServiceServer) Get(arg0 context.Context, arg1 *InstanceGetRequest) (*Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceServiceServer)(nil).Get), arg0, arg1)
}

// Ping mocks base method.
func (m *MockInstanceServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockInstanceServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInstanceServiceServer)(nil).Ping), arg0, arg1)
}

// Search mocks base method.
func (m *MockInstanceServiceServer) Search(arg0 context.Context, arg1 *InstanceSearchRequest) (*InstanceSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*InstanceSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockInstanceServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInstanceServiceServer)(nil).Search), arg0, arg1)
}

// Update mocks base method.
func (m *MockInstanceServiceServer) Update(arg0 context.Context, arg1 *InstanceUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInstanceServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanceServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedInstanceServiceServer mocks base method.
func (m *MockInstanceServiceServer) mustEmbedUnimplementedInstanceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceServiceServer")
}

// mustEmbedUnimplementedInstanceServiceServer indicates an expected call of mustEmbedUnimplementedInstanceServiceServer.
func (mr *MockInstanceServiceServerMockRecorder) mustEmbedUnimplementedInstanceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceServiceServer", reflect.TypeOf((*MockInstanceServiceServer)(nil).mustEmbedUnimplementedInstanceServiceServer))
}

// MockUnsafeInstanceServiceServer is a mock of UnsafeInstanceServiceServer interface.
type MockUnsafeInstanceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInstanceServiceServerMockRecorder
}

// MockUnsafeInstanceServiceServerMockRecorder is the mock recorder for MockUnsafeInstanceServiceServer.
type MockUnsafeInstanceServiceServerMockRecorder struct {
	mock *MockUnsafeInstanceServiceServer
}

// NewMockUnsafeInstanceServiceServer creates a new mock instance.
func NewMockUnsafeInstanceServiceServer(ctrl *gomock.Controller) *MockUnsafeInstanceServiceServer {
	mock := &MockUnsafeInstanceServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInstanceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInstanceServiceServer) EXPECT() *MockUnsafeInstanceServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInstanceServiceServer mocks base method.
func (m *MockUnsafeInstanceServiceServer) mustEmbedUnimplementedInstanceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceServiceServer")
}

// mustEmbedUnimplementedInstanceServiceServer indicates an expected call of mustEmbedUnimplementedInstanceServiceServer.
func (mr *MockUnsafeInstanceServiceServerMockRecorder) mustEmbedUnimplementedInstanceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceServiceServer", reflect.TypeOf((*MockUnsafeInstanceServiceServer)(nil).mustEmbedUnimplementedInstanceServiceServer))
}

// MockInstanceGroupServiceClient is a mock of InstanceGroupServiceClient interface.
type MockInstanceGroupServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceGroupServiceClientMockRecorder
}

// MockInstanceGroupServiceClientMockRecorder is the mock recorder for MockInstanceGroupServiceClient.
type MockInstanceGroupServiceClientMockRecorder struct {
	mock *MockInstanceGroupServiceClient
}

// NewMockInstanceGroupServiceClient creates a new mock instance.
func NewMockInstanceGroupServiceClient(ctrl *gomock.Controller) *MockInstanceGroupServiceClient {
	mock := &MockInstanceGroupServiceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceGroupServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceGroupServiceClient) EXPECT() *MockInstanceGroupServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceGroupServiceClient) Create(ctx context.Context, in *InstanceGroupCreateRequest, opts ...grpc.CallOption) (*InstanceGroup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*InstanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInstanceGroupServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockInstanceGroupServiceClient) Delete(ctx context.Context, in *InstanceGroupDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceGroupServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).Delete), varargs...)
}

// DeleteMember mocks base method.
func (m *MockInstanceGroupServiceClient) DeleteMember(ctx context.Context, in *InstanceGroupMemberDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMember", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockInstanceGroupServiceClientMockRecorder) DeleteMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).DeleteMember), varargs...)
}

// Ping mocks base method.
func (m *MockInstanceGroupServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockInstanceGroupServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).Ping), varargs...)
}

// ScaleUp mocks base method.
func (m *MockInstanceGroupServiceClient) ScaleUp(ctx context.Context, in *InstanceGroupScaleRequest, opts ...grpc.CallOption) (*InstanceGroupScaleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScaleUp", varargs...)
	ret0, _ := ret[0].(*InstanceGroupScaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleUp indicates an expected call of ScaleUp.
func (mr *MockInstanceGroupServiceClientMockRecorder) ScaleUp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleUp", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).ScaleUp), varargs...)
}

// Search mocks base method.
func (m *MockInstanceGroupServiceClient) Search(ctx context.Context, in *InstanceGroupSearchRequest, opts ...grpc.CallOption) (*InstanceGroupSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*InstanceGroupSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockInstanceGroupServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockInstanceGroupServiceClient) Update(ctx context.Context, in *InstanceGroupUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInstanceGroupServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanceGroupServiceClient)(nil).Update), varargs...)
}

// MockInstanceGroupServiceServer is a mock of InstanceGroupServiceServer interface.
type MockInstanceGroupServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceGroupServiceServerMockRecorder
}

// MockInstanceGroupServiceServerMockRecorder is the mock recorder for MockInstanceGroupServiceServer.
type MockInstanceGroupServiceServerMockRecorder struct {
	mock *MockInstanceGroupServiceServer
}

// NewMockInstanceGroupServiceServer creates a new mock instance.
func NewMockInstanceGroupServiceServer(ctrl *gomock.Controller) *MockInstanceGroupServiceServer {
	mock := &MockInstanceGroupServiceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceGroupServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceGroupServiceServer) EXPECT() *MockInstanceGroupServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceGroupServiceServer) Create(arg0 context.Context, arg1 *InstanceGroupCreateRequest) (*InstanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*InstanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInstanceGroupServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockInstanceGroupServiceServer) Delete(arg0 context.Context, arg1 *InstanceGroupDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceGroupServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).Delete), arg0, arg1)
}

// DeleteMember mocks base method.
func (m *MockInstanceGroupServiceServer) DeleteMember(arg0 context.Context, arg1 *InstanceGroupMemberDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockInstanceGroupServiceServerMockRecorder) DeleteMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).DeleteMember), arg0, arg1)
}

// Ping mocks base method.
func (m *MockInstanceGroupServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockInstanceGroupServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).Ping), arg0, arg1)
}

// ScaleUp mocks base method.
func (m *MockInstanceGroupServiceServer) ScaleUp(arg0 context.Context, arg1 *InstanceGroupScaleRequest) (*InstanceGroupScaleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleUp", arg0, arg1)
	ret0, _ := ret[0].(*InstanceGroupScaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleUp indicates an expected call of ScaleUp.
func (mr *MockInstanceGroupServiceServerMockRecorder) ScaleUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleUp", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).ScaleUp), arg0, arg1)
}

// Search mocks base method.
func (m *MockInstanceGroupServiceServer) Search(arg0 context.Context, arg1 *InstanceGroupSearchRequest) (*InstanceGroupSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*InstanceGroupSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockInstanceGroupServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).Search), arg0, arg1)
}

// Update mocks base method.
func (m *MockInstanceGroupServiceServer) Update(arg0 context.Context, arg1 *InstanceGroupUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInstanceGroupServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedInstanceGroupServiceServer mocks base method.
func (m *MockInstanceGroupServiceServer) mustEmbedUnimplementedInstanceGroupServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceGroupServiceServer")
}

// mustEmbedUnimplementedInstanceGroupServiceServer indicates an expected call of mustEmbedUnimplementedInstanceGroupServiceServer.
func (mr *MockInstanceGroupServiceServerMockRecorder) mustEmbedUnimplementedInstanceGroupServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceGroupServiceServer", reflect.TypeOf((*MockInstanceGroupServiceServer)(nil).mustEmbedUnimplementedInstanceGroupServiceServer))
}

// MockUnsafeInstanceGroupServiceServer is a mock of UnsafeInstanceGroupServiceServer interface.
type MockUnsafeInstanceGroupServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInstanceGroupServiceServerMockRecorder
}

// MockUnsafeInstanceGroupServiceServerMockRecorder is the mock recorder for MockUnsafeInstanceGroupServiceServer.
type MockUnsafeInstanceGroupServiceServerMockRecorder struct {
	mock *MockUnsafeInstanceGroupServiceServer
}

// NewMockUnsafeInstanceGroupServiceServer creates a new mock instance.
func NewMockUnsafeInstanceGroupServiceServer(ctrl *gomock.Controller) *MockUnsafeInstanceGroupServiceServer {
	mock := &MockUnsafeInstanceGroupServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInstanceGroupServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInstanceGroupServiceServer) EXPECT() *MockUnsafeInstanceGroupServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInstanceGroupServiceServer mocks base method.
func (m *MockUnsafeInstanceGroupServiceServer) mustEmbedUnimplementedInstanceGroupServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceGroupServiceServer")
}

// mustEmbedUnimplementedInstanceGroupServiceServer indicates an expected call of mustEmbedUnimplementedInstanceGroupServiceServer.
func (mr *MockUnsafeInstanceGroupServiceServerMockRecorder) mustEmbedUnimplementedInstanceGroupServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceGroupServiceServer", reflect.TypeOf((*MockUnsafeInstanceGroupServiceServer)(nil).mustEmbedUnimplementedInstanceGroupServiceServer))
}

// MockInstanceTypeServiceClient is a mock of InstanceTypeServiceClient interface.
type MockInstanceTypeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceTypeServiceClientMockRecorder
}

// MockInstanceTypeServiceClientMockRecorder is the mock recorder for MockInstanceTypeServiceClient.
type MockInstanceTypeServiceClientMockRecorder struct {
	mock *MockInstanceTypeServiceClient
}

// NewMockInstanceTypeServiceClient creates a new mock instance.
func NewMockInstanceTypeServiceClient(ctrl *gomock.Controller) *MockInstanceTypeServiceClient {
	mock := &MockInstanceTypeServiceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceTypeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceTypeServiceClient) EXPECT() *MockInstanceTypeServiceClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInstanceTypeServiceClient) Delete(ctx context.Context, in *InstanceTypeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceTypeServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceTypeServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockInstanceTypeServiceClient) Get(ctx context.Context, in *InstanceTypeGetRequest, opts ...grpc.CallOption) (*InstanceType, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*InstanceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceTypeServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceTypeServiceClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockInstanceTypeServiceClient) Put(ctx context.Context, in *InstanceType, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockInstanceTypeServiceClientMockRecorder) Put(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockInstanceTypeServiceClient)(nil).Put), varargs...)
}

// Search mocks base method.
func (m *MockInstanceTypeServiceClient) Search(ctx context.Context, in *InstanceTypeSearchRequest, opts ...grpc.CallOption) (*InstanceTypeSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*InstanceTypeSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockInstanceTypeServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInstanceTypeServiceClient)(nil).Search), varargs...)
}

// SearchStream mocks base method.
func (m *MockInstanceTypeServiceClient) SearchStream(ctx context.Context, in *InstanceTypeSearchRequest, opts ...grpc.CallOption) (InstanceTypeService_SearchStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStream", varargs...)
	ret0, _ := ret[0].(InstanceTypeService_SearchStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockInstanceTypeServiceClientMockRecorder) SearchStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockInstanceTypeServiceClient)(nil).SearchStream), varargs...)
}

// MockInstanceTypeService_SearchStreamClient is a mock of InstanceTypeService_SearchStreamClient interface.
type MockInstanceTypeService_SearchStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceTypeService_SearchStreamClientMockRecorder
}

// MockInstanceTypeService_SearchStreamClientMockRecorder is the mock recorder for MockInstanceTypeService_SearchStreamClient.
type MockInstanceTypeService_SearchStreamClientMockRecorder struct {
	mock *MockInstanceTypeService_SearchStreamClient
}

// NewMockInstanceTypeService_SearchStreamClient creates a new mock instance.
func NewMockInstanceTypeService_SearchStreamClient(ctrl *gomock.Controller) *MockInstanceTypeService_SearchStreamClient {
	mock := &MockInstanceTypeService_SearchStreamClient{ctrl: ctrl}
	mock.recorder = &MockInstanceTypeService_SearchStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceTypeService_SearchStreamClient) EXPECT() *MockInstanceTypeService_SearchStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockInstanceTypeService_SearchStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockInstanceTypeService_SearchStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockInstanceTypeService_SearchStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockInstanceTypeService_SearchStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstanceTypeService_SearchStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstanceTypeService_SearchStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockInstanceTypeService_SearchStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockInstanceTypeService_SearchStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockInstanceTypeService_SearchStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockInstanceTypeService_SearchStreamClient) Recv() (*InstanceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*InstanceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockInstanceTypeService_SearchStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockInstanceTypeService_SearchStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockInstanceTypeService_SearchStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInstanceTypeService_SearchStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInstanceTypeService_SearchStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockInstanceTypeService_SearchStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInstanceTypeService_SearchStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInstanceTypeService_SearchStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockInstanceTypeService_SearchStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockInstanceTypeService_SearchStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockInstanceTypeService_SearchStreamClient)(nil).Trailer))
}

// MockInstanceTypeServiceServer is a mock of InstanceTypeServiceServer interface.
type MockInstanceTypeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceTypeServiceServerMockRecorder
}

// MockInstanceTypeServiceServerMockRecorder is the mock recorder for MockInstanceTypeServiceServer.
type MockInstanceTypeServiceServerMockRecorder struct {
	mock *MockInstanceTypeServiceServer
}

// NewMockInstanceTypeServiceServer creates a new mock instance.
func NewMockInstanceTypeServiceServer(ctrl *gomock.Controller) *MockInstanceTypeServiceServer {
	mock := &MockInstanceTypeServiceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceTypeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceTypeServiceServer) EXPECT() *MockInstanceTypeServiceServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInstanceTypeServiceServer) Delete(arg0 context.Context, arg1 *InstanceTypeDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceTypeServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceTypeServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockInstanceTypeServiceServer) Get(arg0 context.Context, arg1 *InstanceTypeGetRequest) (*InstanceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*InstanceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceTypeServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceTypeServiceServer)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockInstanceTypeServiceServer) Put(arg0 context.Context, arg1 *InstanceType) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockInstanceTypeServiceServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockInstanceTypeServiceServer)(nil).Put), arg0, arg1)
}

// Search mocks base method.
func (m *MockInstanceTypeServiceServer) Search(arg0 context.Context, arg1 *InstanceTypeSearchRequest) (*InstanceTypeSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*InstanceTypeSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockInstanceTypeServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInstanceTypeServiceServer)(nil).Search), arg0, arg1)
}

// SearchStream mocks base method.
func (m *MockInstanceTypeServiceServer) SearchStream(arg0 *InstanceTypeSearchRequest, arg1 InstanceTypeService_SearchStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockInstanceTypeServiceServerMockRecorder) SearchStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockInstanceTypeServiceServer)(nil).SearchStream), arg0, arg1)
}

// mustEmbedUnimplementedInstanceTypeServiceServer mocks base method.
func (m *MockInstanceTypeServiceServer) mustEmbedUnimplementedInstanceTypeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceTypeServiceServer")
}

// mustEmbedUnimplementedInstanceTypeServiceServer indicates an expected call of mustEmbedUnimplementedInstanceTypeServiceServer.
func (mr *MockInstanceTypeServiceServerMockRecorder) mustEmbedUnimplementedInstanceTypeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceTypeServiceServer", reflect.TypeOf((*MockInstanceTypeServiceServer)(nil).mustEmbedUnimplementedInstanceTypeServiceServer))
}

// MockUnsafeInstanceTypeServiceServer is a mock of UnsafeInstanceTypeServiceServer interface.
type MockUnsafeInstanceTypeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInstanceTypeServiceServerMockRecorder
}

// MockUnsafeInstanceTypeServiceServerMockRecorder is the mock recorder for MockUnsafeInstanceTypeServiceServer.
type MockUnsafeInstanceTypeServiceServerMockRecorder struct {
	mock *MockUnsafeInstanceTypeServiceServer
}

// NewMockUnsafeInstanceTypeServiceServer creates a new mock instance.
func NewMockUnsafeInstanceTypeServiceServer(ctrl *gomock.Controller) *MockUnsafeInstanceTypeServiceServer {
	mock := &MockUnsafeInstanceTypeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInstanceTypeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInstanceTypeServiceServer) EXPECT() *MockUnsafeInstanceTypeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInstanceTypeServiceServer mocks base method.
func (m *MockUnsafeInstanceTypeServiceServer) mustEmbedUnimplementedInstanceTypeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstanceTypeServiceServer")
}

// mustEmbedUnimplementedInstanceTypeServiceServer indicates an expected call of mustEmbedUnimplementedInstanceTypeServiceServer.
func (mr *MockUnsafeInstanceTypeServiceServerMockRecorder) mustEmbedUnimplementedInstanceTypeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstanceTypeServiceServer", reflect.TypeOf((*MockUnsafeInstanceTypeServiceServer)(nil).mustEmbedUnimplementedInstanceTypeServiceServer))
}

// MockInstanceTypeService_SearchStreamServer is a mock of InstanceTypeService_SearchStreamServer interface.
type MockInstanceTypeService_SearchStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceTypeService_SearchStreamServerMockRecorder
}

// MockInstanceTypeService_SearchStreamServerMockRecorder is the mock recorder for MockInstanceTypeService_SearchStreamServer.
type MockInstanceTypeService_SearchStreamServerMockRecorder struct {
	mock *MockInstanceTypeService_SearchStreamServer
}

// NewMockInstanceTypeService_SearchStreamServer creates a new mock instance.
func NewMockInstanceTypeService_SearchStreamServer(ctrl *gomock.Controller) *MockInstanceTypeService_SearchStreamServer {
	mock := &MockInstanceTypeService_SearchStreamServer{ctrl: ctrl}
	mock.recorder = &MockInstanceTypeService_SearchStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceTypeService_SearchStreamServer) EXPECT() *MockInstanceTypeService_SearchStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInstanceTypeService_SearchStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInstanceTypeService_SearchStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstanceTypeService_SearchStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockInstanceTypeService_SearchStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInstanceTypeService_SearchStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInstanceTypeService_SearchStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockInstanceTypeService_SearchStreamServer) Send(arg0 *InstanceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockInstanceTypeService_SearchStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockInstanceTypeService_SearchStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockInstanceTypeService_SearchStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockInstanceTypeService_SearchStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockInstanceTypeService_SearchStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockInstanceTypeService_SearchStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInstanceTypeService_SearchStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInstanceTypeService_SearchStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockInstanceTypeService_SearchStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockInstanceTypeService_SearchStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockInstanceTypeService_SearchStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockInstanceTypeService_SearchStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockInstanceTypeService_SearchStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockInstanceTypeService_SearchStreamServer)(nil).SetTrailer), arg0)
}

// MockMachineImageServiceClient is a mock of MachineImageServiceClient interface.
type MockMachineImageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMachineImageServiceClientMockRecorder
}

// MockMachineImageServiceClientMockRecorder is the mock recorder for MockMachineImageServiceClient.
type MockMachineImageServiceClientMockRecorder struct {
	mock *MockMachineImageServiceClient
}

// NewMockMachineImageServiceClient creates a new mock instance.
func NewMockMachineImageServiceClient(ctrl *gomock.Controller) *MockMachineImageServiceClient {
	mock := &MockMachineImageServiceClient{ctrl: ctrl}
	mock.recorder = &MockMachineImageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineImageServiceClient) EXPECT() *MockMachineImageServiceClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMachineImageServiceClient) Delete(ctx context.Context, in *MachineImageDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMachineImageServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMachineImageServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockMachineImageServiceClient) Get(ctx context.Context, in *MachineImageGetRequest, opts ...grpc.CallOption) (*MachineImage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMachineImageServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMachineImageServiceClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockMachineImageServiceClient) Put(ctx context.Context, in *MachineImage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockMachineImageServiceClientMockRecorder) Put(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMachineImageServiceClient)(nil).Put), varargs...)
}

// Search mocks base method.
func (m *MockMachineImageServiceClient) Search(ctx context.Context, in *MachineImageSearchRequest, opts ...grpc.CallOption) (*MachineImageSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*MachineImageSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMachineImageServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMachineImageServiceClient)(nil).Search), varargs...)
}

// SearchStream mocks base method.
func (m *MockMachineImageServiceClient) SearchStream(ctx context.Context, in *MachineImageSearchRequest, opts ...grpc.CallOption) (MachineImageService_SearchStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStream", varargs...)
	ret0, _ := ret[0].(MachineImageService_SearchStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockMachineImageServiceClientMockRecorder) SearchStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockMachineImageServiceClient)(nil).SearchStream), varargs...)
}

// MockMachineImageService_SearchStreamClient is a mock of MachineImageService_SearchStreamClient interface.
type MockMachineImageService_SearchStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockMachineImageService_SearchStreamClientMockRecorder
}

// MockMachineImageService_SearchStreamClientMockRecorder is the mock recorder for MockMachineImageService_SearchStreamClient.
type MockMachineImageService_SearchStreamClientMockRecorder struct {
	mock *MockMachineImageService_SearchStreamClient
}

// NewMockMachineImageService_SearchStreamClient creates a new mock instance.
func NewMockMachineImageService_SearchStreamClient(ctrl *gomock.Controller) *MockMachineImageService_SearchStreamClient {
	mock := &MockMachineImageService_SearchStreamClient{ctrl: ctrl}
	mock.recorder = &MockMachineImageService_SearchStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineImageService_SearchStreamClient) EXPECT() *MockMachineImageService_SearchStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMachineImageService_SearchStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMachineImageService_SearchStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMachineImageService_SearchStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMachineImageService_SearchStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMachineImageService_SearchStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMachineImageService_SearchStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMachineImageService_SearchStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMachineImageService_SearchStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMachineImageService_SearchStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMachineImageService_SearchStreamClient) Recv() (*MachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMachineImageService_SearchStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMachineImageService_SearchStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMachineImageService_SearchStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMachineImageService_SearchStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMachineImageService_SearchStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockMachineImageService_SearchStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMachineImageService_SearchStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMachineImageService_SearchStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMachineImageService_SearchStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMachineImageService_SearchStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMachineImageService_SearchStreamClient)(nil).Trailer))
}

// MockMachineImageServiceServer is a mock of MachineImageServiceServer interface.
type MockMachineImageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMachineImageServiceServerMockRecorder
}

// MockMachineImageServiceServerMockRecorder is the mock recorder for MockMachineImageServiceServer.
type MockMachineImageServiceServerMockRecorder struct {
	mock *MockMachineImageServiceServer
}

// NewMockMachineImageServiceServer creates a new mock instance.
func NewMockMachineImageServiceServer(ctrl *gomock.Controller) *MockMachineImageServiceServer {
	mock := &MockMachineImageServiceServer{ctrl: ctrl}
	mock.recorder = &MockMachineImageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineImageServiceServer) EXPECT() *MockMachineImageServiceServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMachineImageServiceServer) Delete(arg0 context.Context, arg1 *MachineImageDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMachineImageServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMachineImageServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockMachineImageServiceServer) Get(arg0 context.Context, arg1 *MachineImageGetRequest) (*MachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMachineImageServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMachineImageServiceServer)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockMachineImageServiceServer) Put(arg0 context.Context, arg1 *MachineImage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockMachineImageServiceServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMachineImageServiceServer)(nil).Put), arg0, arg1)
}

// Search mocks base method.
func (m *MockMachineImageServiceServer) Search(arg0 context.Context, arg1 *MachineImageSearchRequest) (*MachineImageSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*MachineImageSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMachineImageServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMachineImageServiceServer)(nil).Search), arg0, arg1)
}

// SearchStream mocks base method.
func (m *MockMachineImageServiceServer) SearchStream(arg0 *MachineImageSearchRequest, arg1 MachineImageService_SearchStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockMachineImageServiceServerMockRecorder) SearchStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockMachineImageServiceServer)(nil).SearchStream), arg0, arg1)
}

// mustEmbedUnimplementedMachineImageServiceServer mocks base method.
func (m *MockMachineImageServiceServer) mustEmbedUnimplementedMachineImageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMachineImageServiceServer")
}

// mustEmbedUnimplementedMachineImageServiceServer indicates an expected call of mustEmbedUnimplementedMachineImageServiceServer.
func (mr *MockMachineImageServiceServerMockRecorder) mustEmbedUnimplementedMachineImageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMachineImageServiceServer", reflect.TypeOf((*MockMachineImageServiceServer)(nil).mustEmbedUnimplementedMachineImageServiceServer))
}

// MockUnsafeMachineImageServiceServer is a mock of UnsafeMachineImageServiceServer interface.
type MockUnsafeMachineImageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMachineImageServiceServerMockRecorder
}

// MockUnsafeMachineImageServiceServerMockRecorder is the mock recorder for MockUnsafeMachineImageServiceServer.
type MockUnsafeMachineImageServiceServerMockRecorder struct {
	mock *MockUnsafeMachineImageServiceServer
}

// NewMockUnsafeMachineImageServiceServer creates a new mock instance.
func NewMockUnsafeMachineImageServiceServer(ctrl *gomock.Controller) *MockUnsafeMachineImageServiceServer {
	mock := &MockUnsafeMachineImageServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMachineImageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMachineImageServiceServer) EXPECT() *MockUnsafeMachineImageServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMachineImageServiceServer mocks base method.
func (m *MockUnsafeMachineImageServiceServer) mustEmbedUnimplementedMachineImageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMachineImageServiceServer")
}

// mustEmbedUnimplementedMachineImageServiceServer indicates an expected call of mustEmbedUnimplementedMachineImageServiceServer.
func (mr *MockUnsafeMachineImageServiceServerMockRecorder) mustEmbedUnimplementedMachineImageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMachineImageServiceServer", reflect.TypeOf((*MockUnsafeMachineImageServiceServer)(nil).mustEmbedUnimplementedMachineImageServiceServer))
}

// MockMachineImageService_SearchStreamServer is a mock of MachineImageService_SearchStreamServer interface.
type MockMachineImageService_SearchStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockMachineImageService_SearchStreamServerMockRecorder
}

// MockMachineImageService_SearchStreamServerMockRecorder is the mock recorder for MockMachineImageService_SearchStreamServer.
type MockMachineImageService_SearchStreamServerMockRecorder struct {
	mock *MockMachineImageService_SearchStreamServer
}

// NewMockMachineImageService_SearchStreamServer creates a new mock instance.
func NewMockMachineImageService_SearchStreamServer(ctrl *gomock.Controller) *MockMachineImageService_SearchStreamServer {
	mock := &MockMachineImageService_SearchStreamServer{ctrl: ctrl}
	mock.recorder = &MockMachineImageService_SearchStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineImageService_SearchStreamServer) EXPECT() *MockMachineImageService_SearchStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMachineImageService_SearchStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMachineImageService_SearchStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMachineImageService_SearchStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockMachineImageService_SearchStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMachineImageService_SearchStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMachineImageService_SearchStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMachineImageService_SearchStreamServer) Send(arg0 *MachineImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMachineImageService_SearchStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMachineImageService_SearchStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMachineImageService_SearchStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMachineImageService_SearchStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMachineImageService_SearchStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMachineImageService_SearchStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMachineImageService_SearchStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMachineImageService_SearchStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMachineImageService_SearchStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMachineImageService_SearchStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMachineImageService_SearchStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMachineImageService_SearchStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMachineImageService_SearchStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMachineImageService_SearchStreamServer)(nil).SetTrailer), arg0)
}

// MockVNetServiceClient is a mock of VNetServiceClient interface.
type MockVNetServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVNetServiceClientMockRecorder
}

// MockVNetServiceClientMockRecorder is the mock recorder for MockVNetServiceClient.
type MockVNetServiceClientMockRecorder struct {
	mock *MockVNetServiceClient
}

// NewMockVNetServiceClient creates a new mock instance.
func NewMockVNetServiceClient(ctrl *gomock.Controller) *MockVNetServiceClient {
	mock := &MockVNetServiceClient{ctrl: ctrl}
	mock.recorder = &MockVNetServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVNetServiceClient) EXPECT() *MockVNetServiceClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVNetServiceClient) Delete(ctx context.Context, in *VNetDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVNetServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVNetServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockVNetServiceClient) Get(ctx context.Context, in *VNetGetRequest, opts ...grpc.CallOption) (*VNet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*VNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVNetServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVNetServiceClient)(nil).Get), varargs...)
}

// Ping mocks base method.
func (m *MockVNetServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockVNetServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockVNetServiceClient)(nil).Ping), varargs...)
}

// Put mocks base method.
func (m *MockVNetServiceClient) Put(ctx context.Context, in *VNetPutRequest, opts ...grpc.CallOption) (*VNet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*VNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockVNetServiceClientMockRecorder) Put(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockVNetServiceClient)(nil).Put), varargs...)
}

// Search mocks base method.
func (m *MockVNetServiceClient) Search(ctx context.Context, in *VNetSearchRequest, opts ...grpc.CallOption) (*VNetSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*VNetSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockVNetServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVNetServiceClient)(nil).Search), varargs...)
}

// SearchStream mocks base method.
func (m *MockVNetServiceClient) SearchStream(ctx context.Context, in *VNetSearchRequest, opts ...grpc.CallOption) (VNetService_SearchStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStream", varargs...)
	ret0, _ := ret[0].(VNetService_SearchStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockVNetServiceClientMockRecorder) SearchStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockVNetServiceClient)(nil).SearchStream), varargs...)
}

// MockVNetService_SearchStreamClient is a mock of VNetService_SearchStreamClient interface.
type MockVNetService_SearchStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockVNetService_SearchStreamClientMockRecorder
}

// MockVNetService_SearchStreamClientMockRecorder is the mock recorder for MockVNetService_SearchStreamClient.
type MockVNetService_SearchStreamClientMockRecorder struct {
	mock *MockVNetService_SearchStreamClient
}

// NewMockVNetService_SearchStreamClient creates a new mock instance.
func NewMockVNetService_SearchStreamClient(ctrl *gomock.Controller) *MockVNetService_SearchStreamClient {
	mock := &MockVNetService_SearchStreamClient{ctrl: ctrl}
	mock.recorder = &MockVNetService_SearchStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVNetService_SearchStreamClient) EXPECT() *MockVNetService_SearchStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockVNetService_SearchStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockVNetService_SearchStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockVNetService_SearchStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockVNetService_SearchStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockVNetService_SearchStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVNetService_SearchStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockVNetService_SearchStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockVNetService_SearchStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockVNetService_SearchStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockVNetService_SearchStreamClient) Recv() (*VNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*VNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockVNetService_SearchStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVNetService_SearchStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockVNetService_SearchStreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockVNetService_SearchStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVNetService_SearchStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockVNetService_SearchStreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockVNetService_SearchStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVNetService_SearchStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockVNetService_SearchStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockVNetService_SearchStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockVNetService_SearchStreamClient)(nil).Trailer))
}

// MockVNetServiceServer is a mock of VNetServiceServer interface.
type MockVNetServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVNetServiceServerMockRecorder
}

// MockVNetServiceServerMockRecorder is the mock recorder for MockVNetServiceServer.
type MockVNetServiceServerMockRecorder struct {
	mock *MockVNetServiceServer
}

// NewMockVNetServiceServer creates a new mock instance.
func NewMockVNetServiceServer(ctrl *gomock.Controller) *MockVNetServiceServer {
	mock := &MockVNetServiceServer{ctrl: ctrl}
	mock.recorder = &MockVNetServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVNetServiceServer) EXPECT() *MockVNetServiceServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVNetServiceServer) Delete(arg0 context.Context, arg1 *VNetDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVNetServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVNetServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockVNetServiceServer) Get(arg0 context.Context, arg1 *VNetGetRequest) (*VNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*VNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVNetServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVNetServiceServer)(nil).Get), arg0, arg1)
}

// Ping mocks base method.
func (m *MockVNetServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockVNetServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockVNetServiceServer)(nil).Ping), arg0, arg1)
}

// Put mocks base method.
func (m *MockVNetServiceServer) Put(arg0 context.Context, arg1 *VNetPutRequest) (*VNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*VNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockVNetServiceServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockVNetServiceServer)(nil).Put), arg0, arg1)
}

// Search mocks base method.
func (m *MockVNetServiceServer) Search(arg0 context.Context, arg1 *VNetSearchRequest) (*VNetSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*VNetSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockVNetServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVNetServiceServer)(nil).Search), arg0, arg1)
}

// SearchStream mocks base method.
func (m *MockVNetServiceServer) SearchStream(arg0 *VNetSearchRequest, arg1 VNetService_SearchStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchStream indicates an expected call of SearchStream.
func (mr *MockVNetServiceServerMockRecorder) SearchStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStream", reflect.TypeOf((*MockVNetServiceServer)(nil).SearchStream), arg0, arg1)
}

// mustEmbedUnimplementedVNetServiceServer mocks base method.
func (m *MockVNetServiceServer) mustEmbedUnimplementedVNetServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVNetServiceServer")
}

// mustEmbedUnimplementedVNetServiceServer indicates an expected call of mustEmbedUnimplementedVNetServiceServer.
func (mr *MockVNetServiceServerMockRecorder) mustEmbedUnimplementedVNetServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVNetServiceServer", reflect.TypeOf((*MockVNetServiceServer)(nil).mustEmbedUnimplementedVNetServiceServer))
}

// MockUnsafeVNetServiceServer is a mock of UnsafeVNetServiceServer interface.
type MockUnsafeVNetServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVNetServiceServerMockRecorder
}

// MockUnsafeVNetServiceServerMockRecorder is the mock recorder for MockUnsafeVNetServiceServer.
type MockUnsafeVNetServiceServerMockRecorder struct {
	mock *MockUnsafeVNetServiceServer
}

// NewMockUnsafeVNetServiceServer creates a new mock instance.
func NewMockUnsafeVNetServiceServer(ctrl *gomock.Controller) *MockUnsafeVNetServiceServer {
	mock := &MockUnsafeVNetServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVNetServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVNetServiceServer) EXPECT() *MockUnsafeVNetServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVNetServiceServer mocks base method.
func (m *MockUnsafeVNetServiceServer) mustEmbedUnimplementedVNetServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVNetServiceServer")
}

// mustEmbedUnimplementedVNetServiceServer indicates an expected call of mustEmbedUnimplementedVNetServiceServer.
func (mr *MockUnsafeVNetServiceServerMockRecorder) mustEmbedUnimplementedVNetServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVNetServiceServer", reflect.TypeOf((*MockUnsafeVNetServiceServer)(nil).mustEmbedUnimplementedVNetServiceServer))
}

// MockVNetService_SearchStreamServer is a mock of VNetService_SearchStreamServer interface.
type MockVNetService_SearchStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockVNetService_SearchStreamServerMockRecorder
}

// MockVNetService_SearchStreamServerMockRecorder is the mock recorder for MockVNetService_SearchStreamServer.
type MockVNetService_SearchStreamServerMockRecorder struct {
	mock *MockVNetService_SearchStreamServer
}

// NewMockVNetService_SearchStreamServer creates a new mock instance.
func NewMockVNetService_SearchStreamServer(ctrl *gomock.Controller) *MockVNetService_SearchStreamServer {
	mock := &MockVNetService_SearchStreamServer{ctrl: ctrl}
	mock.recorder = &MockVNetService_SearchStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVNetService_SearchStreamServer) EXPECT() *MockVNetService_SearchStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockVNetService_SearchStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockVNetService_SearchStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVNetService_SearchStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockVNetService_SearchStreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockVNetService_SearchStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVNetService_SearchStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockVNetService_SearchStreamServer) Send(arg0 *VNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockVNetService_SearchStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockVNetService_SearchStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockVNetService_SearchStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockVNetService_SearchStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockVNetService_SearchStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockVNetService_SearchStreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockVNetService_SearchStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVNetService_SearchStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockVNetService_SearchStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockVNetService_SearchStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockVNetService_SearchStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockVNetService_SearchStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockVNetService_SearchStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockVNetService_SearchStreamServer)(nil).SetTrailer), arg0)
}

// MockLoadBalancerServiceClient is a mock of LoadBalancerServiceClient interface.
type MockLoadBalancerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerServiceClientMockRecorder
}

// MockLoadBalancerServiceClientMockRecorder is the mock recorder for MockLoadBalancerServiceClient.
type MockLoadBalancerServiceClientMockRecorder struct {
	mock *MockLoadBalancerServiceClient
}

// NewMockLoadBalancerServiceClient creates a new mock instance.
func NewMockLoadBalancerServiceClient(ctrl *gomock.Controller) *MockLoadBalancerServiceClient {
	mock := &MockLoadBalancerServiceClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerServiceClient) EXPECT() *MockLoadBalancerServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoadBalancerServiceClient) Create(ctx context.Context, in *LoadBalancerCreateRequest, opts ...grpc.CallOption) (*LoadBalancer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoadBalancerServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoadBalancerServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockLoadBalancerServiceClient) Delete(ctx context.Context, in *LoadBalancerDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockLoadBalancerServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoadBalancerServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockLoadBalancerServiceClient) Get(ctx context.Context, in *LoadBalancerGetRequest, opts ...grpc.CallOption) (*LoadBalancer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoadBalancerServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerServiceClient)(nil).Get), varargs...)
}

// Ping mocks base method.
func (m *MockLoadBalancerServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockLoadBalancerServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockLoadBalancerServiceClient)(nil).Ping), varargs...)
}

// Search mocks base method.
func (m *MockLoadBalancerServiceClient) Search(ctx context.Context, in *LoadBalancerSearchRequest, opts ...grpc.CallOption) (*LoadBalancerSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*LoadBalancerSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLoadBalancerServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLoadBalancerServiceClient)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockLoadBalancerServiceClient) Update(ctx context.Context, in *LoadBalancerUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLoadBalancerServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoadBalancerServiceClient)(nil).Update), varargs...)
}

// MockLoadBalancerServiceServer is a mock of LoadBalancerServiceServer interface.
type MockLoadBalancerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerServiceServerMockRecorder
}

// MockLoadBalancerServiceServerMockRecorder is the mock recorder for MockLoadBalancerServiceServer.
type MockLoadBalancerServiceServerMockRecorder struct {
	mock *MockLoadBalancerServiceServer
}

// NewMockLoadBalancerServiceServer creates a new mock instance.
func NewMockLoadBalancerServiceServer(ctrl *gomock.Controller) *MockLoadBalancerServiceServer {
	mock := &MockLoadBalancerServiceServer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerServiceServer) EXPECT() *MockLoadBalancerServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoadBalancerServiceServer) Create(arg0 context.Context, arg1 *LoadBalancerCreateRequest) (*LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoadBalancerServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoadBalancerServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockLoadBalancerServiceServer) Delete(arg0 context.Context, arg1 *LoadBalancerDeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockLoadBalancerServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoadBalancerServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockLoadBalancerServiceServer) Get(arg0 context.Context, arg1 *LoadBalancerGetRequest) (*LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoadBalancerServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerServiceServer)(nil).Get), arg0, arg1)
}

// Ping mocks base method.
func (m *MockLoadBalancerServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockLoadBalancerServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockLoadBalancerServiceServer)(nil).Ping), arg0, arg1)
}

// Search mocks base method.
func (m *MockLoadBalancerServiceServer) Search(arg0 context.Context, arg1 *LoadBalancerSearchRequest) (*LoadBalancerSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*LoadBalancerSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLoadBalancerServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLoadBalancerServiceServer)(nil).Search), arg0, arg1)
}

// Update mocks base method.
func (m *MockLoadBalancerServiceServer) Update(arg0 context.Context, arg1 *LoadBalancerUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLoadBalancerServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoadBalancerServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedLoadBalancerServiceServer mocks base method.
func (m *MockLoadBalancerServiceServer) mustEmbedUnimplementedLoadBalancerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoadBalancerServiceServer")
}

// mustEmbedUnimplementedLoadBalancerServiceServer indicates an expected call of mustEmbedUnimplementedLoadBalancerServiceServer.
func (mr *MockLoadBalancerServiceServerMockRecorder) mustEmbedUnimplementedLoadBalancerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoadBalancerServiceServer", reflect.TypeOf((*MockLoadBalancerServiceServer)(nil).mustEmbedUnimplementedLoadBalancerServiceServer))
}

// MockUnsafeLoadBalancerServiceServer is a mock of UnsafeLoadBalancerServiceServer interface.
type MockUnsafeLoadBalancerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLoadBalancerServiceServerMockRecorder
}

// MockUnsafeLoadBalancerServiceServerMockRecorder is the mock recorder for MockUnsafeLoadBalancerServiceServer.
type MockUnsafeLoadBalancerServiceServerMockRecorder struct {
	mock *MockUnsafeLoadBalancerServiceServer
}

// NewMockUnsafeLoadBalancerServiceServer creates a new mock instance.
func NewMockUnsafeLoadBalancerServiceServer(ctrl *gomock.Controller) *MockUnsafeLoadBalancerServiceServer {
	mock := &MockUnsafeLoadBalancerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLoadBalancerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLoadBalancerServiceServer) EXPECT() *MockUnsafeLoadBalancerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLoadBalancerServiceServer mocks base method.
func (m *MockUnsafeLoadBalancerServiceServer) mustEmbedUnimplementedLoadBalancerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoadBalancerServiceServer")
}

// mustEmbedUnimplementedLoadBalancerServiceServer indicates an expected call of mustEmbedUnimplementedLoadBalancerServiceServer.
func (mr *MockUnsafeLoadBalancerServiceServerMockRecorder) mustEmbedUnimplementedLoadBalancerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoadBalancerServiceServer", reflect.TypeOf((*MockUnsafeLoadBalancerServiceServer)(nil).mustEmbedUnimplementedLoadBalancerServiceServer))
}
