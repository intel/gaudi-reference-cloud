// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/cloudaccount_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockCloudAccountServiceClient is a mock of CloudAccountServiceClient interface.
type MockCloudAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountServiceClientMockRecorder
}

// MockCloudAccountServiceClientMockRecorder is the mock recorder for MockCloudAccountServiceClient.
type MockCloudAccountServiceClientMockRecorder struct {
	mock *MockCloudAccountServiceClient
}

// NewMockCloudAccountServiceClient creates a new mock instance.
func NewMockCloudAccountServiceClient(ctrl *gomock.Controller) *MockCloudAccountServiceClient {
	mock := &MockCloudAccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockCloudAccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountServiceClient) EXPECT() *MockCloudAccountServiceClientMockRecorder {
	return m.recorder
}

// CheckCloudAccountExists mocks base method.
func (m *MockCloudAccountServiceClient) CheckCloudAccountExists(ctx context.Context, in *CloudAccountName, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckCloudAccountExists", varargs...)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCloudAccountExists indicates an expected call of CheckCloudAccountExists.
func (mr *MockCloudAccountServiceClientMockRecorder) CheckCloudAccountExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCloudAccountExists", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).CheckCloudAccountExists), varargs...)
}

// Create mocks base method.
func (m *MockCloudAccountServiceClient) Create(ctx context.Context, in *CloudAccountCreate, opts ...grpc.CallOption) (*CloudAccountId, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CloudAccountId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCloudAccountServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockCloudAccountServiceClient) Delete(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudAccountServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).Delete), varargs...)
}

// Ensure mocks base method.
func (m *MockCloudAccountServiceClient) Ensure(ctx context.Context, in *CloudAccountCreate, opts ...grpc.CallOption) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ensure", varargs...)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ensure indicates an expected call of Ensure.
func (mr *MockCloudAccountServiceClientMockRecorder) Ensure(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ensure", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).Ensure), varargs...)
}

// GetById mocks base method.
func (m *MockCloudAccountServiceClient) GetById(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetById", varargs...)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCloudAccountServiceClientMockRecorder) GetById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).GetById), varargs...)
}

// GetByName mocks base method.
func (m *MockCloudAccountServiceClient) GetByName(ctx context.Context, in *CloudAccountName, opts ...grpc.CallOption) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCloudAccountServiceClientMockRecorder) GetByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).GetByName), varargs...)
}

// GetByOid mocks base method.
func (m *MockCloudAccountServiceClient) GetByOid(ctx context.Context, in *CloudAccountOid, opts ...grpc.CallOption) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByOid", varargs...)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOid indicates an expected call of GetByOid.
func (mr *MockCloudAccountServiceClientMockRecorder) GetByOid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOid", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).GetByOid), varargs...)
}

// GetByPersonId mocks base method.
func (m *MockCloudAccountServiceClient) GetByPersonId(ctx context.Context, in *CloudAccountPersonId, opts ...grpc.CallOption) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByPersonId", varargs...)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPersonId indicates an expected call of GetByPersonId.
func (mr *MockCloudAccountServiceClientMockRecorder) GetByPersonId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPersonId", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).GetByPersonId), varargs...)
}

// Ping mocks base method.
func (m *MockCloudAccountServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCloudAccountServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).Ping), varargs...)
}

// Search mocks base method.
func (m *MockCloudAccountServiceClient) Search(ctx context.Context, in *CloudAccountFilter, opts ...grpc.CallOption) (CloudAccountService_SearchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(CloudAccountService_SearchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCloudAccountServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockCloudAccountServiceClient) Update(ctx context.Context, in *CloudAccountUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCloudAccountServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCloudAccountServiceClient)(nil).Update), varargs...)
}

// MockCloudAccountService_SearchClient is a mock of CloudAccountService_SearchClient interface.
type MockCloudAccountService_SearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountService_SearchClientMockRecorder
}

// MockCloudAccountService_SearchClientMockRecorder is the mock recorder for MockCloudAccountService_SearchClient.
type MockCloudAccountService_SearchClientMockRecorder struct {
	mock *MockCloudAccountService_SearchClient
}

// NewMockCloudAccountService_SearchClient creates a new mock instance.
func NewMockCloudAccountService_SearchClient(ctrl *gomock.Controller) *MockCloudAccountService_SearchClient {
	mock := &MockCloudAccountService_SearchClient{ctrl: ctrl}
	mock.recorder = &MockCloudAccountService_SearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountService_SearchClient) EXPECT() *MockCloudAccountService_SearchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCloudAccountService_SearchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCloudAccountService_SearchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCloudAccountService_SearchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCloudAccountService_SearchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCloudAccountService_SearchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCloudAccountService_SearchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCloudAccountService_SearchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCloudAccountService_SearchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCloudAccountService_SearchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCloudAccountService_SearchClient) Recv() (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCloudAccountService_SearchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCloudAccountService_SearchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockCloudAccountService_SearchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCloudAccountService_SearchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCloudAccountService_SearchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockCloudAccountService_SearchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCloudAccountService_SearchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCloudAccountService_SearchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockCloudAccountService_SearchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCloudAccountService_SearchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCloudAccountService_SearchClient)(nil).Trailer))
}

// MockCloudAccountServiceServer is a mock of CloudAccountServiceServer interface.
type MockCloudAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountServiceServerMockRecorder
}

// MockCloudAccountServiceServerMockRecorder is the mock recorder for MockCloudAccountServiceServer.
type MockCloudAccountServiceServerMockRecorder struct {
	mock *MockCloudAccountServiceServer
}

// NewMockCloudAccountServiceServer creates a new mock instance.
func NewMockCloudAccountServiceServer(ctrl *gomock.Controller) *MockCloudAccountServiceServer {
	mock := &MockCloudAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockCloudAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountServiceServer) EXPECT() *MockCloudAccountServiceServerMockRecorder {
	return m.recorder
}

// CheckCloudAccountExists mocks base method.
func (m *MockCloudAccountServiceServer) CheckCloudAccountExists(arg0 context.Context, arg1 *CloudAccountName) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCloudAccountExists", arg0, arg1)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCloudAccountExists indicates an expected call of CheckCloudAccountExists.
func (mr *MockCloudAccountServiceServerMockRecorder) CheckCloudAccountExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCloudAccountExists", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).CheckCloudAccountExists), arg0, arg1)
}

// Create mocks base method.
func (m *MockCloudAccountServiceServer) Create(arg0 context.Context, arg1 *CloudAccountCreate) (*CloudAccountId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccountId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCloudAccountServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCloudAccountServiceServer) Delete(arg0 context.Context, arg1 *CloudAccountId) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudAccountServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).Delete), arg0, arg1)
}

// Ensure mocks base method.
func (m *MockCloudAccountServiceServer) Ensure(arg0 context.Context, arg1 *CloudAccountCreate) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ensure", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ensure indicates an expected call of Ensure.
func (mr *MockCloudAccountServiceServerMockRecorder) Ensure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ensure", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).Ensure), arg0, arg1)
}

// GetById mocks base method.
func (m *MockCloudAccountServiceServer) GetById(arg0 context.Context, arg1 *CloudAccountId) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCloudAccountServiceServerMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).GetById), arg0, arg1)
}

// GetByName mocks base method.
func (m *MockCloudAccountServiceServer) GetByName(arg0 context.Context, arg1 *CloudAccountName) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCloudAccountServiceServerMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).GetByName), arg0, arg1)
}

// GetByOid mocks base method.
func (m *MockCloudAccountServiceServer) GetByOid(arg0 context.Context, arg1 *CloudAccountOid) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOid", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOid indicates an expected call of GetByOid.
func (mr *MockCloudAccountServiceServerMockRecorder) GetByOid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOid", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).GetByOid), arg0, arg1)
}

// GetByPersonId mocks base method.
func (m *MockCloudAccountServiceServer) GetByPersonId(arg0 context.Context, arg1 *CloudAccountPersonId) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPersonId", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPersonId indicates an expected call of GetByPersonId.
func (mr *MockCloudAccountServiceServerMockRecorder) GetByPersonId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPersonId", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).GetByPersonId), arg0, arg1)
}

// Ping mocks base method.
func (m *MockCloudAccountServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCloudAccountServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).Ping), arg0, arg1)
}

// Search mocks base method.
func (m *MockCloudAccountServiceServer) Search(arg0 *CloudAccountFilter, arg1 CloudAccountService_SearchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockCloudAccountServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).Search), arg0, arg1)
}

// Update mocks base method.
func (m *MockCloudAccountServiceServer) Update(arg0 context.Context, arg1 *CloudAccountUpdate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCloudAccountServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedCloudAccountServiceServer mocks base method.
func (m *MockCloudAccountServiceServer) mustEmbedUnimplementedCloudAccountServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountServiceServer")
}

// mustEmbedUnimplementedCloudAccountServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountServiceServer.
func (mr *MockCloudAccountServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountServiceServer", reflect.TypeOf((*MockCloudAccountServiceServer)(nil).mustEmbedUnimplementedCloudAccountServiceServer))
}

// MockUnsafeCloudAccountServiceServer is a mock of UnsafeCloudAccountServiceServer interface.
type MockUnsafeCloudAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCloudAccountServiceServerMockRecorder
}

// MockUnsafeCloudAccountServiceServerMockRecorder is the mock recorder for MockUnsafeCloudAccountServiceServer.
type MockUnsafeCloudAccountServiceServerMockRecorder struct {
	mock *MockUnsafeCloudAccountServiceServer
}

// NewMockUnsafeCloudAccountServiceServer creates a new mock instance.
func NewMockUnsafeCloudAccountServiceServer(ctrl *gomock.Controller) *MockUnsafeCloudAccountServiceServer {
	mock := &MockUnsafeCloudAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCloudAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCloudAccountServiceServer) EXPECT() *MockUnsafeCloudAccountServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCloudAccountServiceServer mocks base method.
func (m *MockUnsafeCloudAccountServiceServer) mustEmbedUnimplementedCloudAccountServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountServiceServer")
}

// mustEmbedUnimplementedCloudAccountServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountServiceServer.
func (mr *MockUnsafeCloudAccountServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountServiceServer", reflect.TypeOf((*MockUnsafeCloudAccountServiceServer)(nil).mustEmbedUnimplementedCloudAccountServiceServer))
}

// MockCloudAccountService_SearchServer is a mock of CloudAccountService_SearchServer interface.
type MockCloudAccountService_SearchServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountService_SearchServerMockRecorder
}

// MockCloudAccountService_SearchServerMockRecorder is the mock recorder for MockCloudAccountService_SearchServer.
type MockCloudAccountService_SearchServerMockRecorder struct {
	mock *MockCloudAccountService_SearchServer
}

// NewMockCloudAccountService_SearchServer creates a new mock instance.
func NewMockCloudAccountService_SearchServer(ctrl *gomock.Controller) *MockCloudAccountService_SearchServer {
	mock := &MockCloudAccountService_SearchServer{ctrl: ctrl}
	mock.recorder = &MockCloudAccountService_SearchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountService_SearchServer) EXPECT() *MockCloudAccountService_SearchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockCloudAccountService_SearchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCloudAccountService_SearchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCloudAccountService_SearchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockCloudAccountService_SearchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCloudAccountService_SearchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCloudAccountService_SearchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockCloudAccountService_SearchServer) Send(arg0 *CloudAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCloudAccountService_SearchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCloudAccountService_SearchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockCloudAccountService_SearchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCloudAccountService_SearchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCloudAccountService_SearchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockCloudAccountService_SearchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCloudAccountService_SearchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCloudAccountService_SearchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockCloudAccountService_SearchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCloudAccountService_SearchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCloudAccountService_SearchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCloudAccountService_SearchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCloudAccountService_SearchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCloudAccountService_SearchServer)(nil).SetTrailer), arg0)
}

// MockCloudAccountMemberServiceClient is a mock of CloudAccountMemberServiceClient interface.
type MockCloudAccountMemberServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountMemberServiceClientMockRecorder
}

// MockCloudAccountMemberServiceClientMockRecorder is the mock recorder for MockCloudAccountMemberServiceClient.
type MockCloudAccountMemberServiceClientMockRecorder struct {
	mock *MockCloudAccountMemberServiceClient
}

// NewMockCloudAccountMemberServiceClient creates a new mock instance.
func NewMockCloudAccountMemberServiceClient(ctrl *gomock.Controller) *MockCloudAccountMemberServiceClient {
	mock := &MockCloudAccountMemberServiceClient{ctrl: ctrl}
	mock.recorder = &MockCloudAccountMemberServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountMemberServiceClient) EXPECT() *MockCloudAccountMemberServiceClientMockRecorder {
	return m.recorder
}

// AddMembers mocks base method.
func (m *MockCloudAccountMemberServiceClient) AddMembers(ctx context.Context, in *CloudAccountMembers, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMembers", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMembers indicates an expected call of AddMembers.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) AddMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembers", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).AddMembers), varargs...)
}

// GetCloudAccountsForOpa mocks base method.
func (m *MockCloudAccountMemberServiceClient) GetCloudAccountsForOpa(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*RelatedAccounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudAccountsForOpa", varargs...)
	ret0, _ := ret[0].(*RelatedAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudAccountsForOpa indicates an expected call of GetCloudAccountsForOpa.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) GetCloudAccountsForOpa(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudAccountsForOpa", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).GetCloudAccountsForOpa), varargs...)
}

// GetMemberPersonId mocks base method.
func (m *MockCloudAccountMemberServiceClient) GetMemberPersonId(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*AccountPerson, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberPersonId", varargs...)
	ret0, _ := ret[0].(*AccountPerson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberPersonId indicates an expected call of GetMemberPersonId.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) GetMemberPersonId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberPersonId", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).GetMemberPersonId), varargs...)
}

// ReadActiveMembers mocks base method.
func (m *MockCloudAccountMemberServiceClient) ReadActiveMembers(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccountMembers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadActiveMembers", varargs...)
	ret0, _ := ret[0].(*CloudAccountMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadActiveMembers indicates an expected call of ReadActiveMembers.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) ReadActiveMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadActiveMembers", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).ReadActiveMembers), varargs...)
}

// ReadMembers mocks base method.
func (m *MockCloudAccountMemberServiceClient) ReadMembers(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccountMembers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMembers", varargs...)
	ret0, _ := ret[0].(*CloudAccountMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMembers indicates an expected call of ReadMembers.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) ReadMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMembers", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).ReadMembers), varargs...)
}

// ReadUserCloudAccounts mocks base method.
func (m *MockCloudAccountMemberServiceClient) ReadUserCloudAccounts(ctx context.Context, in *CloudAccountUser, opts ...grpc.CallOption) (*MemberAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadUserCloudAccounts", varargs...)
	ret0, _ := ret[0].(*MemberAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserCloudAccounts indicates an expected call of ReadUserCloudAccounts.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) ReadUserCloudAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserCloudAccounts", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).ReadUserCloudAccounts), varargs...)
}

// RemoveMembers mocks base method.
func (m *MockCloudAccountMemberServiceClient) RemoveMembers(ctx context.Context, in *CloudAccountMembers, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveMembers", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMembers indicates an expected call of RemoveMembers.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) RemoveMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMembers", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).RemoveMembers), varargs...)
}

// UpdatePersonId mocks base method.
func (m *MockCloudAccountMemberServiceClient) UpdatePersonId(ctx context.Context, in *MemberPersonId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePersonId", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePersonId indicates an expected call of UpdatePersonId.
func (mr *MockCloudAccountMemberServiceClientMockRecorder) UpdatePersonId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonId", reflect.TypeOf((*MockCloudAccountMemberServiceClient)(nil).UpdatePersonId), varargs...)
}

// MockCloudAccountMemberServiceServer is a mock of CloudAccountMemberServiceServer interface.
type MockCloudAccountMemberServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountMemberServiceServerMockRecorder
}

// MockCloudAccountMemberServiceServerMockRecorder is the mock recorder for MockCloudAccountMemberServiceServer.
type MockCloudAccountMemberServiceServerMockRecorder struct {
	mock *MockCloudAccountMemberServiceServer
}

// NewMockCloudAccountMemberServiceServer creates a new mock instance.
func NewMockCloudAccountMemberServiceServer(ctrl *gomock.Controller) *MockCloudAccountMemberServiceServer {
	mock := &MockCloudAccountMemberServiceServer{ctrl: ctrl}
	mock.recorder = &MockCloudAccountMemberServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountMemberServiceServer) EXPECT() *MockCloudAccountMemberServiceServerMockRecorder {
	return m.recorder
}

// AddMembers mocks base method.
func (m *MockCloudAccountMemberServiceServer) AddMembers(arg0 context.Context, arg1 *CloudAccountMembers) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMembers", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMembers indicates an expected call of AddMembers.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) AddMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembers", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).AddMembers), arg0, arg1)
}

// GetCloudAccountsForOpa mocks base method.
func (m *MockCloudAccountMemberServiceServer) GetCloudAccountsForOpa(arg0 context.Context, arg1 *AccountUser) (*RelatedAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudAccountsForOpa", arg0, arg1)
	ret0, _ := ret[0].(*RelatedAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudAccountsForOpa indicates an expected call of GetCloudAccountsForOpa.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) GetCloudAccountsForOpa(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudAccountsForOpa", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).GetCloudAccountsForOpa), arg0, arg1)
}

// GetMemberPersonId mocks base method.
func (m *MockCloudAccountMemberServiceServer) GetMemberPersonId(arg0 context.Context, arg1 *AccountUser) (*AccountPerson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberPersonId", arg0, arg1)
	ret0, _ := ret[0].(*AccountPerson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberPersonId indicates an expected call of GetMemberPersonId.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) GetMemberPersonId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberPersonId", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).GetMemberPersonId), arg0, arg1)
}

// ReadActiveMembers mocks base method.
func (m *MockCloudAccountMemberServiceServer) ReadActiveMembers(arg0 context.Context, arg1 *CloudAccountId) (*CloudAccountMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadActiveMembers", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccountMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadActiveMembers indicates an expected call of ReadActiveMembers.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) ReadActiveMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadActiveMembers", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).ReadActiveMembers), arg0, arg1)
}

// ReadMembers mocks base method.
func (m *MockCloudAccountMemberServiceServer) ReadMembers(arg0 context.Context, arg1 *CloudAccountId) (*CloudAccountMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMembers", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccountMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMembers indicates an expected call of ReadMembers.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) ReadMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMembers", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).ReadMembers), arg0, arg1)
}

// ReadUserCloudAccounts mocks base method.
func (m *MockCloudAccountMemberServiceServer) ReadUserCloudAccounts(arg0 context.Context, arg1 *CloudAccountUser) (*MemberAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserCloudAccounts", arg0, arg1)
	ret0, _ := ret[0].(*MemberAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserCloudAccounts indicates an expected call of ReadUserCloudAccounts.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) ReadUserCloudAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserCloudAccounts", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).ReadUserCloudAccounts), arg0, arg1)
}

// RemoveMembers mocks base method.
func (m *MockCloudAccountMemberServiceServer) RemoveMembers(arg0 context.Context, arg1 *CloudAccountMembers) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMembers", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMembers indicates an expected call of RemoveMembers.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) RemoveMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMembers", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).RemoveMembers), arg0, arg1)
}

// UpdatePersonId mocks base method.
func (m *MockCloudAccountMemberServiceServer) UpdatePersonId(arg0 context.Context, arg1 *MemberPersonId) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersonId", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePersonId indicates an expected call of UpdatePersonId.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) UpdatePersonId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonId", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).UpdatePersonId), arg0, arg1)
}

// mustEmbedUnimplementedCloudAccountMemberServiceServer mocks base method.
func (m *MockCloudAccountMemberServiceServer) mustEmbedUnimplementedCloudAccountMemberServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountMemberServiceServer")
}

// mustEmbedUnimplementedCloudAccountMemberServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountMemberServiceServer.
func (mr *MockCloudAccountMemberServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountMemberServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountMemberServiceServer", reflect.TypeOf((*MockCloudAccountMemberServiceServer)(nil).mustEmbedUnimplementedCloudAccountMemberServiceServer))
}

// MockUnsafeCloudAccountMemberServiceServer is a mock of UnsafeCloudAccountMemberServiceServer interface.
type MockUnsafeCloudAccountMemberServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCloudAccountMemberServiceServerMockRecorder
}

// MockUnsafeCloudAccountMemberServiceServerMockRecorder is the mock recorder for MockUnsafeCloudAccountMemberServiceServer.
type MockUnsafeCloudAccountMemberServiceServerMockRecorder struct {
	mock *MockUnsafeCloudAccountMemberServiceServer
}

// NewMockUnsafeCloudAccountMemberServiceServer creates a new mock instance.
func NewMockUnsafeCloudAccountMemberServiceServer(ctrl *gomock.Controller) *MockUnsafeCloudAccountMemberServiceServer {
	mock := &MockUnsafeCloudAccountMemberServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCloudAccountMemberServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCloudAccountMemberServiceServer) EXPECT() *MockUnsafeCloudAccountMemberServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCloudAccountMemberServiceServer mocks base method.
func (m *MockUnsafeCloudAccountMemberServiceServer) mustEmbedUnimplementedCloudAccountMemberServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountMemberServiceServer")
}

// mustEmbedUnimplementedCloudAccountMemberServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountMemberServiceServer.
func (mr *MockUnsafeCloudAccountMemberServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountMemberServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountMemberServiceServer", reflect.TypeOf((*MockUnsafeCloudAccountMemberServiceServer)(nil).mustEmbedUnimplementedCloudAccountMemberServiceServer))
}

// MockCloudAccountAppClientServiceClient is a mock of CloudAccountAppClientServiceClient interface.
type MockCloudAccountAppClientServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountAppClientServiceClientMockRecorder
}

// MockCloudAccountAppClientServiceClientMockRecorder is the mock recorder for MockCloudAccountAppClientServiceClient.
type MockCloudAccountAppClientServiceClientMockRecorder struct {
	mock *MockCloudAccountAppClientServiceClient
}

// NewMockCloudAccountAppClientServiceClient creates a new mock instance.
func NewMockCloudAccountAppClientServiceClient(ctrl *gomock.Controller) *MockCloudAccountAppClientServiceClient {
	mock := &MockCloudAccountAppClientServiceClient{ctrl: ctrl}
	mock.recorder = &MockCloudAccountAppClientServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountAppClientServiceClient) EXPECT() *MockCloudAccountAppClientServiceClientMockRecorder {
	return m.recorder
}

// GetAppClientCloudAccount mocks base method.
func (m *MockCloudAccountAppClientServiceClient) GetAppClientCloudAccount(ctx context.Context, in *AccountClient, opts ...grpc.CallOption) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppClientCloudAccount", varargs...)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppClientCloudAccount indicates an expected call of GetAppClientCloudAccount.
func (mr *MockCloudAccountAppClientServiceClientMockRecorder) GetAppClientCloudAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppClientCloudAccount", reflect.TypeOf((*MockCloudAccountAppClientServiceClient)(nil).GetAppClientCloudAccount), varargs...)
}

// MockCloudAccountAppClientServiceServer is a mock of CloudAccountAppClientServiceServer interface.
type MockCloudAccountAppClientServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountAppClientServiceServerMockRecorder
}

// MockCloudAccountAppClientServiceServerMockRecorder is the mock recorder for MockCloudAccountAppClientServiceServer.
type MockCloudAccountAppClientServiceServerMockRecorder struct {
	mock *MockCloudAccountAppClientServiceServer
}

// NewMockCloudAccountAppClientServiceServer creates a new mock instance.
func NewMockCloudAccountAppClientServiceServer(ctrl *gomock.Controller) *MockCloudAccountAppClientServiceServer {
	mock := &MockCloudAccountAppClientServiceServer{ctrl: ctrl}
	mock.recorder = &MockCloudAccountAppClientServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountAppClientServiceServer) EXPECT() *MockCloudAccountAppClientServiceServerMockRecorder {
	return m.recorder
}

// GetAppClientCloudAccount mocks base method.
func (m *MockCloudAccountAppClientServiceServer) GetAppClientCloudAccount(arg0 context.Context, arg1 *AccountClient) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppClientCloudAccount", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppClientCloudAccount indicates an expected call of GetAppClientCloudAccount.
func (mr *MockCloudAccountAppClientServiceServerMockRecorder) GetAppClientCloudAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppClientCloudAccount", reflect.TypeOf((*MockCloudAccountAppClientServiceServer)(nil).GetAppClientCloudAccount), arg0, arg1)
}

// mustEmbedUnimplementedCloudAccountAppClientServiceServer mocks base method.
func (m *MockCloudAccountAppClientServiceServer) mustEmbedUnimplementedCloudAccountAppClientServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountAppClientServiceServer")
}

// mustEmbedUnimplementedCloudAccountAppClientServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountAppClientServiceServer.
func (mr *MockCloudAccountAppClientServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountAppClientServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountAppClientServiceServer", reflect.TypeOf((*MockCloudAccountAppClientServiceServer)(nil).mustEmbedUnimplementedCloudAccountAppClientServiceServer))
}

// MockUnsafeCloudAccountAppClientServiceServer is a mock of UnsafeCloudAccountAppClientServiceServer interface.
type MockUnsafeCloudAccountAppClientServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCloudAccountAppClientServiceServerMockRecorder
}

// MockUnsafeCloudAccountAppClientServiceServerMockRecorder is the mock recorder for MockUnsafeCloudAccountAppClientServiceServer.
type MockUnsafeCloudAccountAppClientServiceServerMockRecorder struct {
	mock *MockUnsafeCloudAccountAppClientServiceServer
}

// NewMockUnsafeCloudAccountAppClientServiceServer creates a new mock instance.
func NewMockUnsafeCloudAccountAppClientServiceServer(ctrl *gomock.Controller) *MockUnsafeCloudAccountAppClientServiceServer {
	mock := &MockUnsafeCloudAccountAppClientServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCloudAccountAppClientServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCloudAccountAppClientServiceServer) EXPECT() *MockUnsafeCloudAccountAppClientServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCloudAccountAppClientServiceServer mocks base method.
func (m *MockUnsafeCloudAccountAppClientServiceServer) mustEmbedUnimplementedCloudAccountAppClientServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountAppClientServiceServer")
}

// mustEmbedUnimplementedCloudAccountAppClientServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountAppClientServiceServer.
func (mr *MockUnsafeCloudAccountAppClientServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountAppClientServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountAppClientServiceServer", reflect.TypeOf((*MockUnsafeCloudAccountAppClientServiceServer)(nil).mustEmbedUnimplementedCloudAccountAppClientServiceServer))
}

// MockOtpServiceClient is a mock of OtpServiceClient interface.
type MockOtpServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOtpServiceClientMockRecorder
}

// MockOtpServiceClientMockRecorder is the mock recorder for MockOtpServiceClient.
type MockOtpServiceClientMockRecorder struct {
	mock *MockOtpServiceClient
}

// NewMockOtpServiceClient creates a new mock instance.
func NewMockOtpServiceClient(ctrl *gomock.Controller) *MockOtpServiceClient {
	mock := &MockOtpServiceClient{ctrl: ctrl}
	mock.recorder = &MockOtpServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpServiceClient) EXPECT() *MockOtpServiceClientMockRecorder {
	return m.recorder
}

// CreateOtp mocks base method.
func (m *MockOtpServiceClient) CreateOtp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOtp", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOtp indicates an expected call of CreateOtp.
func (mr *MockOtpServiceClientMockRecorder) CreateOtp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtp", reflect.TypeOf((*MockOtpServiceClient)(nil).CreateOtp), varargs...)
}

// ResendOtp mocks base method.
func (m *MockOtpServiceClient) ResendOtp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResendOtp", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendOtp indicates an expected call of ResendOtp.
func (mr *MockOtpServiceClientMockRecorder) ResendOtp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendOtp", reflect.TypeOf((*MockOtpServiceClient)(nil).ResendOtp), varargs...)
}

// VerifyOtp mocks base method.
func (m *MockOtpServiceClient) VerifyOtp(ctx context.Context, in *VerifyOtpRequest, opts ...grpc.CallOption) (*VerifyOtpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyOtp", varargs...)
	ret0, _ := ret[0].(*VerifyOtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockOtpServiceClientMockRecorder) VerifyOtp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockOtpServiceClient)(nil).VerifyOtp), varargs...)
}

// MockOtpServiceServer is a mock of OtpServiceServer interface.
type MockOtpServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOtpServiceServerMockRecorder
}

// MockOtpServiceServerMockRecorder is the mock recorder for MockOtpServiceServer.
type MockOtpServiceServerMockRecorder struct {
	mock *MockOtpServiceServer
}

// NewMockOtpServiceServer creates a new mock instance.
func NewMockOtpServiceServer(ctrl *gomock.Controller) *MockOtpServiceServer {
	mock := &MockOtpServiceServer{ctrl: ctrl}
	mock.recorder = &MockOtpServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpServiceServer) EXPECT() *MockOtpServiceServerMockRecorder {
	return m.recorder
}

// CreateOtp mocks base method.
func (m *MockOtpServiceServer) CreateOtp(arg0 context.Context, arg1 *OtpRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtp", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOtp indicates an expected call of CreateOtp.
func (mr *MockOtpServiceServerMockRecorder) CreateOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtp", reflect.TypeOf((*MockOtpServiceServer)(nil).CreateOtp), arg0, arg1)
}

// ResendOtp mocks base method.
func (m *MockOtpServiceServer) ResendOtp(arg0 context.Context, arg1 *OtpRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendOtp", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendOtp indicates an expected call of ResendOtp.
func (mr *MockOtpServiceServerMockRecorder) ResendOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendOtp", reflect.TypeOf((*MockOtpServiceServer)(nil).ResendOtp), arg0, arg1)
}

// VerifyOtp mocks base method.
func (m *MockOtpServiceServer) VerifyOtp(arg0 context.Context, arg1 *VerifyOtpRequest) (*VerifyOtpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtp", arg0, arg1)
	ret0, _ := ret[0].(*VerifyOtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockOtpServiceServerMockRecorder) VerifyOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockOtpServiceServer)(nil).VerifyOtp), arg0, arg1)
}

// mustEmbedUnimplementedOtpServiceServer mocks base method.
func (m *MockOtpServiceServer) mustEmbedUnimplementedOtpServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOtpServiceServer")
}

// mustEmbedUnimplementedOtpServiceServer indicates an expected call of mustEmbedUnimplementedOtpServiceServer.
func (mr *MockOtpServiceServerMockRecorder) mustEmbedUnimplementedOtpServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOtpServiceServer", reflect.TypeOf((*MockOtpServiceServer)(nil).mustEmbedUnimplementedOtpServiceServer))
}

// MockUnsafeOtpServiceServer is a mock of UnsafeOtpServiceServer interface.
type MockUnsafeOtpServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOtpServiceServerMockRecorder
}

// MockUnsafeOtpServiceServerMockRecorder is the mock recorder for MockUnsafeOtpServiceServer.
type MockUnsafeOtpServiceServerMockRecorder struct {
	mock *MockUnsafeOtpServiceServer
}

// NewMockUnsafeOtpServiceServer creates a new mock instance.
func NewMockUnsafeOtpServiceServer(ctrl *gomock.Controller) *MockUnsafeOtpServiceServer {
	mock := &MockUnsafeOtpServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOtpServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOtpServiceServer) EXPECT() *MockUnsafeOtpServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOtpServiceServer mocks base method.
func (m *MockUnsafeOtpServiceServer) mustEmbedUnimplementedOtpServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOtpServiceServer")
}

// mustEmbedUnimplementedOtpServiceServer indicates an expected call of mustEmbedUnimplementedOtpServiceServer.
func (mr *MockUnsafeOtpServiceServerMockRecorder) mustEmbedUnimplementedOtpServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOtpServiceServer", reflect.TypeOf((*MockUnsafeOtpServiceServer)(nil).mustEmbedUnimplementedOtpServiceServer))
}

// MockCloudAccountInvitationServiceClient is a mock of CloudAccountInvitationServiceClient interface.
type MockCloudAccountInvitationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountInvitationServiceClientMockRecorder
}

// MockCloudAccountInvitationServiceClientMockRecorder is the mock recorder for MockCloudAccountInvitationServiceClient.
type MockCloudAccountInvitationServiceClientMockRecorder struct {
	mock *MockCloudAccountInvitationServiceClient
}

// NewMockCloudAccountInvitationServiceClient creates a new mock instance.
func NewMockCloudAccountInvitationServiceClient(ctrl *gomock.Controller) *MockCloudAccountInvitationServiceClient {
	mock := &MockCloudAccountInvitationServiceClient{ctrl: ctrl}
	mock.recorder = &MockCloudAccountInvitationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountInvitationServiceClient) EXPECT() *MockCloudAccountInvitationServiceClientMockRecorder {
	return m.recorder
}

// CreateInvite mocks base method.
func (m *MockCloudAccountInvitationServiceClient) CreateInvite(ctx context.Context, in *InviteRequestList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvite", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvite indicates an expected call of CreateInvite.
func (mr *MockCloudAccountInvitationServiceClientMockRecorder) CreateInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceClient)(nil).CreateInvite), varargs...)
}

// ReadInvite mocks base method.
func (m *MockCloudAccountInvitationServiceClient) ReadInvite(ctx context.Context, in *InviteFilter, opts ...grpc.CallOption) (*InviteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadInvite", varargs...)
	ret0, _ := ret[0].(*InviteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInvite indicates an expected call of ReadInvite.
func (mr *MockCloudAccountInvitationServiceClientMockRecorder) ReadInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceClient)(nil).ReadInvite), varargs...)
}

// RemoveInvite mocks base method.
func (m *MockCloudAccountInvitationServiceClient) RemoveInvite(ctx context.Context, in *InviteUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveInvite", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInvite indicates an expected call of RemoveInvite.
func (mr *MockCloudAccountInvitationServiceClientMockRecorder) RemoveInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceClient)(nil).RemoveInvite), varargs...)
}

// ResendInvite mocks base method.
func (m *MockCloudAccountInvitationServiceClient) ResendInvite(ctx context.Context, in *InviteResendRequest, opts ...grpc.CallOption) (*InviteResendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResendInvite", varargs...)
	ret0, _ := ret[0].(*InviteResendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendInvite indicates an expected call of ResendInvite.
func (mr *MockCloudAccountInvitationServiceClientMockRecorder) ResendInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceClient)(nil).ResendInvite), varargs...)
}

// RevokeInvite mocks base method.
func (m *MockCloudAccountInvitationServiceClient) RevokeInvite(ctx context.Context, in *InviteRevokeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeInvite", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeInvite indicates an expected call of RevokeInvite.
func (mr *MockCloudAccountInvitationServiceClientMockRecorder) RevokeInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceClient)(nil).RevokeInvite), varargs...)
}

// SendInviteCode mocks base method.
func (m *MockCloudAccountInvitationServiceClient) SendInviteCode(ctx context.Context, in *SendInviteCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendInviteCode", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInviteCode indicates an expected call of SendInviteCode.
func (mr *MockCloudAccountInvitationServiceClientMockRecorder) SendInviteCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInviteCode", reflect.TypeOf((*MockCloudAccountInvitationServiceClient)(nil).SendInviteCode), varargs...)
}

// ValidateInviteCode mocks base method.
func (m *MockCloudAccountInvitationServiceClient) ValidateInviteCode(ctx context.Context, in *ValidateInviteCodeRequest, opts ...grpc.CallOption) (*ValidateInviteCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateInviteCode", varargs...)
	ret0, _ := ret[0].(*ValidateInviteCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateInviteCode indicates an expected call of ValidateInviteCode.
func (mr *MockCloudAccountInvitationServiceClientMockRecorder) ValidateInviteCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInviteCode", reflect.TypeOf((*MockCloudAccountInvitationServiceClient)(nil).ValidateInviteCode), varargs...)
}

// MockCloudAccountInvitationServiceServer is a mock of CloudAccountInvitationServiceServer interface.
type MockCloudAccountInvitationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountInvitationServiceServerMockRecorder
}

// MockCloudAccountInvitationServiceServerMockRecorder is the mock recorder for MockCloudAccountInvitationServiceServer.
type MockCloudAccountInvitationServiceServerMockRecorder struct {
	mock *MockCloudAccountInvitationServiceServer
}

// NewMockCloudAccountInvitationServiceServer creates a new mock instance.
func NewMockCloudAccountInvitationServiceServer(ctrl *gomock.Controller) *MockCloudAccountInvitationServiceServer {
	mock := &MockCloudAccountInvitationServiceServer{ctrl: ctrl}
	mock.recorder = &MockCloudAccountInvitationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountInvitationServiceServer) EXPECT() *MockCloudAccountInvitationServiceServerMockRecorder {
	return m.recorder
}

// CreateInvite mocks base method.
func (m *MockCloudAccountInvitationServiceServer) CreateInvite(arg0 context.Context, arg1 *InviteRequestList) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvite", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvite indicates an expected call of CreateInvite.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) CreateInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).CreateInvite), arg0, arg1)
}

// ReadInvite mocks base method.
func (m *MockCloudAccountInvitationServiceServer) ReadInvite(arg0 context.Context, arg1 *InviteFilter) (*InviteList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInvite", arg0, arg1)
	ret0, _ := ret[0].(*InviteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInvite indicates an expected call of ReadInvite.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) ReadInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).ReadInvite), arg0, arg1)
}

// RemoveInvite mocks base method.
func (m *MockCloudAccountInvitationServiceServer) RemoveInvite(arg0 context.Context, arg1 *InviteUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInvite", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInvite indicates an expected call of RemoveInvite.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) RemoveInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).RemoveInvite), arg0, arg1)
}

// ResendInvite mocks base method.
func (m *MockCloudAccountInvitationServiceServer) ResendInvite(arg0 context.Context, arg1 *InviteResendRequest) (*InviteResendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendInvite", arg0, arg1)
	ret0, _ := ret[0].(*InviteResendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendInvite indicates an expected call of ResendInvite.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) ResendInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).ResendInvite), arg0, arg1)
}

// RevokeInvite mocks base method.
func (m *MockCloudAccountInvitationServiceServer) RevokeInvite(arg0 context.Context, arg1 *InviteRevokeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeInvite", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeInvite indicates an expected call of RevokeInvite.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) RevokeInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeInvite", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).RevokeInvite), arg0, arg1)
}

// SendInviteCode mocks base method.
func (m *MockCloudAccountInvitationServiceServer) SendInviteCode(arg0 context.Context, arg1 *SendInviteCodeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInviteCode", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInviteCode indicates an expected call of SendInviteCode.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) SendInviteCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInviteCode", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).SendInviteCode), arg0, arg1)
}

// ValidateInviteCode mocks base method.
func (m *MockCloudAccountInvitationServiceServer) ValidateInviteCode(arg0 context.Context, arg1 *ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInviteCode", arg0, arg1)
	ret0, _ := ret[0].(*ValidateInviteCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateInviteCode indicates an expected call of ValidateInviteCode.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) ValidateInviteCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInviteCode", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).ValidateInviteCode), arg0, arg1)
}

// mustEmbedUnimplementedCloudAccountInvitationServiceServer mocks base method.
func (m *MockCloudAccountInvitationServiceServer) mustEmbedUnimplementedCloudAccountInvitationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountInvitationServiceServer")
}

// mustEmbedUnimplementedCloudAccountInvitationServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountInvitationServiceServer.
func (mr *MockCloudAccountInvitationServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountInvitationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountInvitationServiceServer", reflect.TypeOf((*MockCloudAccountInvitationServiceServer)(nil).mustEmbedUnimplementedCloudAccountInvitationServiceServer))
}

// MockUnsafeCloudAccountInvitationServiceServer is a mock of UnsafeCloudAccountInvitationServiceServer interface.
type MockUnsafeCloudAccountInvitationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCloudAccountInvitationServiceServerMockRecorder
}

// MockUnsafeCloudAccountInvitationServiceServerMockRecorder is the mock recorder for MockUnsafeCloudAccountInvitationServiceServer.
type MockUnsafeCloudAccountInvitationServiceServerMockRecorder struct {
	mock *MockUnsafeCloudAccountInvitationServiceServer
}

// NewMockUnsafeCloudAccountInvitationServiceServer creates a new mock instance.
func NewMockUnsafeCloudAccountInvitationServiceServer(ctrl *gomock.Controller) *MockUnsafeCloudAccountInvitationServiceServer {
	mock := &MockUnsafeCloudAccountInvitationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCloudAccountInvitationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCloudAccountInvitationServiceServer) EXPECT() *MockUnsafeCloudAccountInvitationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCloudAccountInvitationServiceServer mocks base method.
func (m *MockUnsafeCloudAccountInvitationServiceServer) mustEmbedUnimplementedCloudAccountInvitationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountInvitationServiceServer")
}

// mustEmbedUnimplementedCloudAccountInvitationServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountInvitationServiceServer.
func (mr *MockUnsafeCloudAccountInvitationServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountInvitationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountInvitationServiceServer", reflect.TypeOf((*MockUnsafeCloudAccountInvitationServiceServer)(nil).mustEmbedUnimplementedCloudAccountInvitationServiceServer))
}

// MockCloudAccountInvitationMemberServiceClient is a mock of CloudAccountInvitationMemberServiceClient interface.
type MockCloudAccountInvitationMemberServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountInvitationMemberServiceClientMockRecorder
}

// MockCloudAccountInvitationMemberServiceClientMockRecorder is the mock recorder for MockCloudAccountInvitationMemberServiceClient.
type MockCloudAccountInvitationMemberServiceClientMockRecorder struct {
	mock *MockCloudAccountInvitationMemberServiceClient
}

// NewMockCloudAccountInvitationMemberServiceClient creates a new mock instance.
func NewMockCloudAccountInvitationMemberServiceClient(ctrl *gomock.Controller) *MockCloudAccountInvitationMemberServiceClient {
	mock := &MockCloudAccountInvitationMemberServiceClient{ctrl: ctrl}
	mock.recorder = &MockCloudAccountInvitationMemberServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountInvitationMemberServiceClient) EXPECT() *MockCloudAccountInvitationMemberServiceClientMockRecorder {
	return m.recorder
}

// RejectInvite mocks base method.
func (m *MockCloudAccountInvitationMemberServiceClient) RejectInvite(ctx context.Context, in *InviteUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectInvite", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvite indicates an expected call of RejectInvite.
func (mr *MockCloudAccountInvitationMemberServiceClientMockRecorder) RejectInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvite", reflect.TypeOf((*MockCloudAccountInvitationMemberServiceClient)(nil).RejectInvite), varargs...)
}

// MockCloudAccountInvitationMemberServiceServer is a mock of CloudAccountInvitationMemberServiceServer interface.
type MockCloudAccountInvitationMemberServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountInvitationMemberServiceServerMockRecorder
}

// MockCloudAccountInvitationMemberServiceServerMockRecorder is the mock recorder for MockCloudAccountInvitationMemberServiceServer.
type MockCloudAccountInvitationMemberServiceServerMockRecorder struct {
	mock *MockCloudAccountInvitationMemberServiceServer
}

// NewMockCloudAccountInvitationMemberServiceServer creates a new mock instance.
func NewMockCloudAccountInvitationMemberServiceServer(ctrl *gomock.Controller) *MockCloudAccountInvitationMemberServiceServer {
	mock := &MockCloudAccountInvitationMemberServiceServer{ctrl: ctrl}
	mock.recorder = &MockCloudAccountInvitationMemberServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountInvitationMemberServiceServer) EXPECT() *MockCloudAccountInvitationMemberServiceServerMockRecorder {
	return m.recorder
}

// RejectInvite mocks base method.
func (m *MockCloudAccountInvitationMemberServiceServer) RejectInvite(arg0 context.Context, arg1 *InviteUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvite", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvite indicates an expected call of RejectInvite.
func (mr *MockCloudAccountInvitationMemberServiceServerMockRecorder) RejectInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvite", reflect.TypeOf((*MockCloudAccountInvitationMemberServiceServer)(nil).RejectInvite), arg0, arg1)
}

// mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer mocks base method.
func (m *MockCloudAccountInvitationMemberServiceServer) mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer")
}

// mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer.
func (mr *MockCloudAccountInvitationMemberServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer", reflect.TypeOf((*MockCloudAccountInvitationMemberServiceServer)(nil).mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer))
}

// MockUnsafeCloudAccountInvitationMemberServiceServer is a mock of UnsafeCloudAccountInvitationMemberServiceServer interface.
type MockUnsafeCloudAccountInvitationMemberServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCloudAccountInvitationMemberServiceServerMockRecorder
}

// MockUnsafeCloudAccountInvitationMemberServiceServerMockRecorder is the mock recorder for MockUnsafeCloudAccountInvitationMemberServiceServer.
type MockUnsafeCloudAccountInvitationMemberServiceServerMockRecorder struct {
	mock *MockUnsafeCloudAccountInvitationMemberServiceServer
}

// NewMockUnsafeCloudAccountInvitationMemberServiceServer creates a new mock instance.
func NewMockUnsafeCloudAccountInvitationMemberServiceServer(ctrl *gomock.Controller) *MockUnsafeCloudAccountInvitationMemberServiceServer {
	mock := &MockUnsafeCloudAccountInvitationMemberServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCloudAccountInvitationMemberServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCloudAccountInvitationMemberServiceServer) EXPECT() *MockUnsafeCloudAccountInvitationMemberServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer mocks base method.
func (m *MockUnsafeCloudAccountInvitationMemberServiceServer) mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer")
}

// mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer indicates an expected call of mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer.
func (mr *MockUnsafeCloudAccountInvitationMemberServiceServerMockRecorder) mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer", reflect.TypeOf((*MockUnsafeCloudAccountInvitationMemberServiceServer)(nil).mustEmbedUnimplementedCloudAccountInvitationMemberServiceServer))
}
