// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: iks.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cluster Request
type ClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    *string         `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	K8Sversionname string          `protobuf:"bytes,3,opt,name=k8sversionname,proto3" json:"k8sversionname,omitempty"`
	Runtimename    string          `protobuf:"bytes,4,opt,name=runtimename,proto3" json:"runtimename,omitempty"`
	Network        *Network        `protobuf:"bytes,5,opt,name=network,proto3,oneof" json:"network,omitempty"`
	Annotations    []*Annotations  `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Tags           []*KeyValuePair `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	CloudAccountId string          `protobuf:"bytes,8,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clustertype    *string         `protobuf:"bytes,9,opt,name=clustertype,proto3,oneof" json:"clustertype,omitempty"`
	InstanceType   string          `protobuf:"bytes,10,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *ClusterRequest) Reset() {
	*x = ClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRequest) ProtoMessage() {}

func (x *ClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRequest.ProtoReflect.Descriptor instead.
func (*ClusterRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ClusterRequest) GetK8Sversionname() string {
	if x != nil {
		return x.K8Sversionname
	}
	return ""
}

func (x *ClusterRequest) GetRuntimename() string {
	if x != nil {
		return x.Runtimename
	}
	return ""
}

func (x *ClusterRequest) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClusterRequest) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterRequest) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ClusterRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ClusterRequest) GetClustertype() string {
	if x != nil && x.Clustertype != nil {
		return *x.Clustertype
	}
	return ""
}

func (x *ClusterRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type ClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*ClusterResponseForm `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ClusterResponse) Reset() {
	*x = ClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponse) ProtoMessage() {}

func (x *ClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponse.ProtoReflect.Descriptor instead.
func (*ClusterResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterResponse) GetClusters() []*ClusterResponseForm {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ClusterCreateResponseForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Clusterstate   string `protobuf:"bytes,3,opt,name=clusterstate,proto3" json:"clusterstate,omitempty"`
	K8Sversionname string `protobuf:"bytes,4,opt,name=k8sversionname,proto3" json:"k8sversionname,omitempty"`
}

func (x *ClusterCreateResponseForm) Reset() {
	*x = ClusterCreateResponseForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCreateResponseForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCreateResponseForm) ProtoMessage() {}

func (x *ClusterCreateResponseForm) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCreateResponseForm.ProtoReflect.Descriptor instead.
func (*ClusterCreateResponseForm) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterCreateResponseForm) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterCreateResponseForm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterCreateResponseForm) GetClusterstate() string {
	if x != nil {
		return x.Clusterstate
	}
	return ""
}

func (x *ClusterCreateResponseForm) GetK8Sversionname() string {
	if x != nil {
		return x.K8Sversionname
	}
	return ""
}

// Cluster Response Format
type ClusterResponseForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description                string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Uuid                       string          `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Clusterstate               string          `protobuf:"bytes,4,opt,name=clusterstate,proto3" json:"clusterstate,omitempty"`
	Clusterstatus              *ClusterStatus  `protobuf:"bytes,5,opt,name=clusterstatus,proto3" json:"clusterstatus,omitempty"`
	Createddate                string          `protobuf:"bytes,6,opt,name=createddate,proto3" json:"createddate,omitempty"`
	K8Sversion                 string          `protobuf:"bytes,7,opt,name=k8sversion,proto3" json:"k8sversion,omitempty"`
	Upgradeavailable           bool            `protobuf:"varint,8,opt,name=upgradeavailable,proto3" json:"upgradeavailable,omitempty"`
	Upgradek8Sversionavailable []string        `protobuf:"bytes,9,rep,name=upgradek8sversionavailable,proto3" json:"upgradek8sversionavailable,omitempty"`
	Network                    *Network        `protobuf:"bytes,10,opt,name=network,proto3,oneof" json:"network,omitempty"`
	Tags                       []*KeyValuePair `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	// repeated KeyValuePair labels = 12;
	Vips            []*GetVipResponse        `protobuf:"bytes,12,rep,name=vips,proto3" json:"vips,omitempty"`
	Annotations     []*Annotations           `protobuf:"bytes,13,rep,name=annotations,proto3" json:"annotations,omitempty"`
	ProvisioningLog []*ProvisioningLog       `protobuf:"bytes,14,rep,name=provisioningLog,proto3" json:"provisioningLog,omitempty"`
	Nodegroups      []*NodeGroupResponseForm `protobuf:"bytes,15,rep,name=nodegroups,proto3" json:"nodegroups,omitempty"`
	Storageenabled  bool                     `protobuf:"varint,16,opt,name=storageenabled,proto3" json:"storageenabled,omitempty"`
	Storages        []*ClusterStorageStatus  `protobuf:"bytes,17,rep,name=storages,proto3" json:"storages,omitempty"`
	Clustertype     string                   `protobuf:"bytes,18,opt,name=clustertype,proto3" json:"clustertype,omitempty"`
}

func (x *ClusterResponseForm) Reset() {
	*x = ClusterResponseForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResponseForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponseForm) ProtoMessage() {}

func (x *ClusterResponseForm) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponseForm.ProtoReflect.Descriptor instead.
func (*ClusterResponseForm) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterResponseForm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterResponseForm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterResponseForm) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterResponseForm) GetClusterstate() string {
	if x != nil {
		return x.Clusterstate
	}
	return ""
}

func (x *ClusterResponseForm) GetClusterstatus() *ClusterStatus {
	if x != nil {
		return x.Clusterstatus
	}
	return nil
}

func (x *ClusterResponseForm) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

func (x *ClusterResponseForm) GetK8Sversion() string {
	if x != nil {
		return x.K8Sversion
	}
	return ""
}

func (x *ClusterResponseForm) GetUpgradeavailable() bool {
	if x != nil {
		return x.Upgradeavailable
	}
	return false
}

func (x *ClusterResponseForm) GetUpgradek8Sversionavailable() []string {
	if x != nil {
		return x.Upgradek8Sversionavailable
	}
	return nil
}

func (x *ClusterResponseForm) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClusterResponseForm) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ClusterResponseForm) GetVips() []*GetVipResponse {
	if x != nil {
		return x.Vips
	}
	return nil
}

func (x *ClusterResponseForm) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterResponseForm) GetProvisioningLog() []*ProvisioningLog {
	if x != nil {
		return x.ProvisioningLog
	}
	return nil
}

func (x *ClusterResponseForm) GetNodegroups() []*NodeGroupResponseForm {
	if x != nil {
		return x.Nodegroups
	}
	return nil
}

func (x *ClusterResponseForm) GetStorageenabled() bool {
	if x != nil {
		return x.Storageenabled
	}
	return false
}

func (x *ClusterResponseForm) GetStorages() []*ClusterStorageStatus {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *ClusterResponseForm) GetClustertype() string {
	if x != nil {
		return x.Clustertype
	}
	return ""
}

type ClusterStorageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storageprovider string `protobuf:"bytes,1,opt,name=storageprovider,proto3" json:"storageprovider,omitempty"`
	Size            string `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	State           string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Reason          string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Message         string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterStorageStatus) Reset() {
	*x = ClusterStorageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageStatus) ProtoMessage() {}

func (x *ClusterStorageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageStatus.ProtoReflect.Descriptor instead.
func (*ClusterStorageStatus) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterStorageStatus) GetStorageprovider() string {
	if x != nil {
		return x.Storageprovider
	}
	return ""
}

func (x *ClusterStorageStatus) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ClusterStorageStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClusterStorageStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ClusterStorageStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// CreateNodeGroupRequest
type CreateNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid     string           `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Name            string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     *string          `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Instancetypeid  string           `protobuf:"bytes,4,opt,name=instancetypeid,proto3" json:"instancetypeid,omitempty"`
	Vnets           []*Vnet          `protobuf:"bytes,5,rep,name=vnets,proto3" json:"vnets,omitempty"`
	Count           int32            `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Sshkeyname      []*SshKey        `protobuf:"bytes,7,rep,name=sshkeyname,proto3" json:"sshkeyname,omitempty"`
	Tags            []*KeyValuePair  `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Upgradestrategy *UpgradeStrategy `protobuf:"bytes,9,opt,name=upgradestrategy,proto3,oneof" json:"upgradestrategy,omitempty"`
	Annotations     []*Annotations   `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty"`
	CloudAccountId  string           `protobuf:"bytes,11,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Userdataurl     *string          `protobuf:"bytes,12,opt,name=userdataurl,proto3,oneof" json:"userdataurl,omitempty"`
	Nodegrouptype   *string          `protobuf:"bytes,13,opt,name=nodegrouptype,proto3,oneof" json:"nodegrouptype,omitempty"`
	InstanceType    string           `protobuf:"bytes,14,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *CreateNodeGroupRequest) Reset() {
	*x = CreateNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeGroupRequest) ProtoMessage() {}

func (x *CreateNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNodeGroupRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetInstancetypeid() string {
	if x != nil {
		return x.Instancetypeid
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetVnets() []*Vnet {
	if x != nil {
		return x.Vnets
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CreateNodeGroupRequest) GetSshkeyname() []*SshKey {
	if x != nil {
		return x.Sshkeyname
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetUpgradestrategy() *UpgradeStrategy {
	if x != nil {
		return x.Upgradestrategy
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetUserdataurl() string {
	if x != nil && x.Userdataurl != nil {
		return *x.Userdataurl
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetNodegrouptype() string {
	if x != nil && x.Nodegrouptype != nil {
		return *x.Nodegrouptype
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type Vnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Availabilityzonename     string `protobuf:"bytes,1,opt,name=availabilityzonename,proto3" json:"availabilityzonename,omitempty"`
	Networkinterfacevnetname string `protobuf:"bytes,2,opt,name=networkinterfacevnetname,proto3" json:"networkinterfacevnetname,omitempty"`
}

func (x *Vnet) Reset() {
	*x = Vnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vnet) ProtoMessage() {}

func (x *Vnet) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vnet.ProtoReflect.Descriptor instead.
func (*Vnet) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{6}
}

func (x *Vnet) GetAvailabilityzonename() string {
	if x != nil {
		return x.Availabilityzonename
	}
	return ""
}

func (x *Vnet) GetNetworkinterfacevnetname() string {
	if x != nil {
		return x.Networkinterfacevnetname
	}
	return ""
}

type SshKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sshkey string `protobuf:"bytes,1,opt,name=sshkey,proto3" json:"sshkey,omitempty"`
}

func (x *SshKey) Reset() {
	*x = SshKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshKey) ProtoMessage() {}

func (x *SshKey) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshKey.ProtoReflect.Descriptor instead.
func (*SshKey) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{7}
}

func (x *SshKey) GetSshkey() string {
	if x != nil {
		return x.Sshkey
	}
	return ""
}

// NodeGroupResponseForm
type NodeGroupResponseForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodegroupuuid        string           `protobuf:"bytes,1,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	Clusteruuid          string           `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Name                 string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          *string          `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Instancetypeid       string           `protobuf:"bytes,5,opt,name=instancetypeid,proto3" json:"instancetypeid,omitempty"`
	Nodegroupstate       string           `protobuf:"bytes,6,opt,name=nodegroupstate,proto3" json:"nodegroupstate,omitempty"`
	Createddate          string           `protobuf:"bytes,7,opt,name=createddate,proto3" json:"createddate,omitempty"`
	Nodegroupstatus      *Nodegroupstatus `protobuf:"bytes,8,opt,name=nodegroupstatus,proto3" json:"nodegroupstatus,omitempty"`
	Count                int32            `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	Vnets                []*Vnet          `protobuf:"bytes,10,rep,name=vnets,proto3" json:"vnets,omitempty"`
	Sshkeyname           []*SshKey        `protobuf:"bytes,11,rep,name=sshkeyname,proto3" json:"sshkeyname,omitempty"`
	Upgradestrategy      *UpgradeStrategy `protobuf:"bytes,12,opt,name=upgradestrategy,proto3,oneof" json:"upgradestrategy,omitempty"`
	Networkinterfacename string           `protobuf:"bytes,13,opt,name=networkinterfacename,proto3" json:"networkinterfacename,omitempty"`
	Tags                 []*KeyValuePair  `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	Nodes                []*NodeStatus    `protobuf:"bytes,15,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Imiid                string           `protobuf:"bytes,16,opt,name=imiid,proto3" json:"imiid,omitempty"`
	Upgradeimiid         []string         `protobuf:"bytes,17,rep,name=upgradeimiid,proto3" json:"upgradeimiid,omitempty"`
	Upgradeavailable     bool             `protobuf:"varint,18,opt,name=upgradeavailable,proto3" json:"upgradeavailable,omitempty"`
	Annotations          []*Annotations   `protobuf:"bytes,19,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Userdataurl          *string          `protobuf:"bytes,20,opt,name=userdataurl,proto3,oneof" json:"userdataurl,omitempty"`
	Nodegrouptype        *string          `protobuf:"bytes,21,opt,name=nodegrouptype,proto3,oneof" json:"nodegrouptype,omitempty"`
	Clustertype          string           `protobuf:"bytes,22,opt,name=clustertype,proto3" json:"clustertype,omitempty"`
}

func (x *NodeGroupResponseForm) Reset() {
	*x = NodeGroupResponseForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroupResponseForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroupResponseForm) ProtoMessage() {}

func (x *NodeGroupResponseForm) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroupResponseForm.ProtoReflect.Descriptor instead.
func (*NodeGroupResponseForm) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{8}
}

func (x *NodeGroupResponseForm) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *NodeGroupResponseForm) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *NodeGroupResponseForm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeGroupResponseForm) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NodeGroupResponseForm) GetInstancetypeid() string {
	if x != nil {
		return x.Instancetypeid
	}
	return ""
}

func (x *NodeGroupResponseForm) GetNodegroupstate() string {
	if x != nil {
		return x.Nodegroupstate
	}
	return ""
}

func (x *NodeGroupResponseForm) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

func (x *NodeGroupResponseForm) GetNodegroupstatus() *Nodegroupstatus {
	if x != nil {
		return x.Nodegroupstatus
	}
	return nil
}

func (x *NodeGroupResponseForm) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NodeGroupResponseForm) GetVnets() []*Vnet {
	if x != nil {
		return x.Vnets
	}
	return nil
}

func (x *NodeGroupResponseForm) GetSshkeyname() []*SshKey {
	if x != nil {
		return x.Sshkeyname
	}
	return nil
}

func (x *NodeGroupResponseForm) GetUpgradestrategy() *UpgradeStrategy {
	if x != nil {
		return x.Upgradestrategy
	}
	return nil
}

func (x *NodeGroupResponseForm) GetNetworkinterfacename() string {
	if x != nil {
		return x.Networkinterfacename
	}
	return ""
}

func (x *NodeGroupResponseForm) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NodeGroupResponseForm) GetNodes() []*NodeStatus {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeGroupResponseForm) GetImiid() string {
	if x != nil {
		return x.Imiid
	}
	return ""
}

func (x *NodeGroupResponseForm) GetUpgradeimiid() []string {
	if x != nil {
		return x.Upgradeimiid
	}
	return nil
}

func (x *NodeGroupResponseForm) GetUpgradeavailable() bool {
	if x != nil {
		return x.Upgradeavailable
	}
	return false
}

func (x *NodeGroupResponseForm) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NodeGroupResponseForm) GetUserdataurl() string {
	if x != nil && x.Userdataurl != nil {
		return *x.Userdataurl
	}
	return ""
}

func (x *NodeGroupResponseForm) GetNodegrouptype() string {
	if x != nil && x.Nodegrouptype != nil {
		return *x.Nodegrouptype
	}
	return ""
}

func (x *NodeGroupResponseForm) GetClustertype() string {
	if x != nil {
		return x.Clustertype
	}
	return ""
}

// NodeGroupResponse
type NodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodegroups []*NodeGroupResponseForm `protobuf:"bytes,1,rep,name=nodegroups,proto3" json:"nodegroups,omitempty"`
}

func (x *NodeGroupResponse) Reset() {
	*x = NodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroupResponse) ProtoMessage() {}

func (x *NodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroupResponse.ProtoReflect.Descriptor instead.
func (*NodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{9}
}

func (x *NodeGroupResponse) GetNodegroups() []*NodeGroupResponseForm {
	if x != nil {
		return x.Nodegroups
	}
	return nil
}

// UpdateNodeGroupRequest
type UpdateNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid     string           `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodegroupuuid   string           `protobuf:"bytes,2,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	Name            *string          `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description     *string          `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Count           *int32           `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Upgradestrategy *UpgradeStrategy `protobuf:"bytes,6,opt,name=upgradestrategy,proto3,oneof" json:"upgradestrategy,omitempty"`
	Tags            []*KeyValuePair  `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Annotations     []*Annotations   `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty"`
	CloudAccountId  string           `protobuf:"bytes,9,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Nodegrouptype   *string          `protobuf:"bytes,10,opt,name=nodegrouptype,proto3,oneof" json:"nodegrouptype,omitempty"`
}

func (x *UpdateNodeGroupRequest) Reset() {
	*x = UpdateNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeGroupRequest) ProtoMessage() {}

func (x *UpdateNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateNodeGroupRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *UpdateNodeGroupRequest) GetUpgradestrategy() *UpgradeStrategy {
	if x != nil {
		return x.Upgradestrategy
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetNodegrouptype() string {
	if x != nil && x.Nodegrouptype != nil {
		return *x.Nodegrouptype
	}
	return ""
}

type DeleteNodeGroupInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodegroupuuid  string `protobuf:"bytes,2,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	InstanceName   string `protobuf:"bytes,3,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	Downsize       *bool  `protobuf:"varint,4,opt,name=downsize,proto3,oneof" json:"downsize,omitempty"`
	CloudAccountId string `protobuf:"bytes,5,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *DeleteNodeGroupInstanceRequest) Reset() {
	*x = DeleteNodeGroupInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeGroupInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeGroupInstanceRequest) ProtoMessage() {}

func (x *DeleteNodeGroupInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeGroupInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeGroupInstanceRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteNodeGroupInstanceRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *DeleteNodeGroupInstanceRequest) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *DeleteNodeGroupInstanceRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *DeleteNodeGroupInstanceRequest) GetDownsize() bool {
	if x != nil && x.Downsize != nil {
		return *x.Downsize
	}
	return false
}

func (x *DeleteNodeGroupInstanceRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

// NodeGroupid
type NodeGroupid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string  `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodegroupuuid  string  `protobuf:"bytes,2,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	CloudAccountId string  `protobuf:"bytes,3,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Nodegrouptype  *string `protobuf:"bytes,4,opt,name=nodegrouptype,proto3,oneof" json:"nodegrouptype,omitempty"`
}

func (x *NodeGroupid) Reset() {
	*x = NodeGroupid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroupid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroupid) ProtoMessage() {}

func (x *NodeGroupid) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroupid.ProtoReflect.Descriptor instead.
func (*NodeGroupid) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{12}
}

func (x *NodeGroupid) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *NodeGroupid) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *NodeGroupid) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *NodeGroupid) GetNodegrouptype() string {
	if x != nil && x.Nodegrouptype != nil {
		return *x.Nodegrouptype
	}
	return ""
}

// Provisioning Log Table
type ProvisioningLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logentry  string `protobuf:"bytes,1,opt,name=logentry,proto3" json:"logentry,omitempty"`
	Loglevel  string `protobuf:"bytes,2,opt,name=loglevel,proto3" json:"loglevel,omitempty"`
	Logobject string `protobuf:"bytes,3,opt,name=logobject,proto3" json:"logobject,omitempty"`
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ProvisioningLog) Reset() {
	*x = ProvisioningLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisioningLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisioningLog) ProtoMessage() {}

func (x *ProvisioningLog) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisioningLog.ProtoReflect.Descriptor instead.
func (*ProvisioningLog) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{13}
}

func (x *ProvisioningLog) GetLogentry() string {
	if x != nil {
		return x.Logentry
	}
	return ""
}

func (x *ProvisioningLog) GetLoglevel() string {
	if x != nil {
		return x.Loglevel
	}
	return ""
}

func (x *ProvisioningLog) GetLogobject() string {
	if x != nil {
		return x.Logobject
	}
	return ""
}

func (x *ProvisioningLog) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Generic Key-Value pair
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{14}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{15}
}

func (x *Annotations) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Annotations) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Cluster ID
type ClusterID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string  `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	CloudAccountId string  `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clustertype    *string `protobuf:"bytes,3,opt,name=clustertype,proto3,oneof" json:"clustertype,omitempty"`
}

func (x *ClusterID) Reset() {
	*x = ClusterID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterID) ProtoMessage() {}

func (x *ClusterID) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterID.ProtoReflect.Descriptor instead.
func (*ClusterID) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{16}
}

func (x *ClusterID) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *ClusterID) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ClusterID) GetClustertype() string {
	if x != nil && x.Clustertype != nil {
		return *x.Clustertype
	}
	return ""
}

type GetNodeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodes          *bool  `protobuf:"varint,2,opt,name=nodes,proto3,oneof" json:"nodes,omitempty"`
	CloudAccountId string `protobuf:"bytes,3,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *GetNodeGroupsRequest) Reset() {
	*x = GetNodeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeGroupsRequest) ProtoMessage() {}

func (x *GetNodeGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetNodeGroupsRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{17}
}

func (x *GetNodeGroupsRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *GetNodeGroupsRequest) GetNodes() bool {
	if x != nil && x.Nodes != nil {
		return *x.Nodes
	}
	return false
}

func (x *GetNodeGroupsRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

// NodeGroup ID
type NodeGroupID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodegroupuuid string `protobuf:"bytes,1,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
}

func (x *NodeGroupID) Reset() {
	*x = NodeGroupID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroupID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroupID) ProtoMessage() {}

func (x *NodeGroupID) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroupID.ProtoReflect.Descriptor instead.
func (*NodeGroupID) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{18}
}

func (x *NodeGroupID) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

// Cluster ID
type UpgradeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string  `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	K8Sversionname *string `protobuf:"bytes,2,opt,name=k8sversionname,proto3,oneof" json:"k8sversionname,omitempty"`
	CloudAccountId string  `protobuf:"bytes,3,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *UpgradeClusterRequest) Reset() {
	*x = UpgradeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeClusterRequest) ProtoMessage() {}

func (x *UpgradeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpgradeClusterRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{19}
}

func (x *UpgradeClusterRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *UpgradeClusterRequest) GetK8Sversionname() string {
	if x != nil && x.K8Sversionname != nil {
		return *x.K8Sversionname
	}
	return ""
}

func (x *UpgradeClusterRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

// Status Response Format
type ClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Clusteruuid string `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	State       string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Lastupdate  string `protobuf:"bytes,4,opt,name=lastupdate,proto3" json:"lastupdate,omitempty"`
	Reason      string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Message     string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Errorcode   int32  `protobuf:"varint,7,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
}

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatus.ProtoReflect.Descriptor instead.
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterStatus) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *ClusterStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClusterStatus) GetLastupdate() string {
	if x != nil {
		return x.Lastupdate
	}
	return ""
}

func (x *ClusterStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ClusterStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ClusterStatus) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

// Nodegroupstatus
type Nodegroupstatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Clusteruuid      string            `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodegroupuuid    string            `protobuf:"bytes,3,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	Count            int32             `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	State            string            `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Reason           string            `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	Message          string            `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Errorcode        int32             `protobuf:"varint,8,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
	Nodestatus       []*NodeStatus     `protobuf:"bytes,9,rep,name=nodestatus,proto3" json:"nodestatus,omitempty"`
	Nodegroupsummary *NodegroupSummary `protobuf:"bytes,10,opt,name=nodegroupsummary,proto3,oneof" json:"nodegroupsummary,omitempty"`
}

func (x *Nodegroupstatus) Reset() {
	*x = Nodegroupstatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodegroupstatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodegroupstatus) ProtoMessage() {}

func (x *Nodegroupstatus) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodegroupstatus.ProtoReflect.Descriptor instead.
func (*Nodegroupstatus) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{21}
}

func (x *Nodegroupstatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Nodegroupstatus) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *Nodegroupstatus) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *Nodegroupstatus) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Nodegroupstatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Nodegroupstatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Nodegroupstatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Nodegroupstatus) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

func (x *Nodegroupstatus) GetNodestatus() []*NodeStatus {
	if x != nil {
		return x.Nodestatus
	}
	return nil
}

func (x *Nodegroupstatus) GetNodegroupsummary() *NodegroupSummary {
	if x != nil {
		return x.Nodegroupsummary
	}
	return nil
}

// NodegroupSummary
type NodegroupSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activenodes       int32 `protobuf:"varint,1,opt,name=activenodes,proto3" json:"activenodes,omitempty"`
	Provisioningnodes int32 `protobuf:"varint,2,opt,name=provisioningnodes,proto3" json:"provisioningnodes,omitempty"`
	Errornodes        int32 `protobuf:"varint,3,opt,name=errornodes,proto3" json:"errornodes,omitempty"`
	Deletingnodes     int32 `protobuf:"varint,4,opt,name=deletingnodes,proto3" json:"deletingnodes,omitempty"`
}

func (x *NodegroupSummary) Reset() {
	*x = NodegroupSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodegroupSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodegroupSummary) ProtoMessage() {}

func (x *NodegroupSummary) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodegroupSummary.ProtoReflect.Descriptor instead.
func (*NodegroupSummary) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{22}
}

func (x *NodegroupSummary) GetActivenodes() int32 {
	if x != nil {
		return x.Activenodes
	}
	return 0
}

func (x *NodegroupSummary) GetProvisioningnodes() int32 {
	if x != nil {
		return x.Provisioningnodes
	}
	return 0
}

func (x *NodegroupSummary) GetErrornodes() int32 {
	if x != nil {
		return x.Errornodes
	}
	return 0
}

func (x *NodegroupSummary) GetDeletingnodes() int32 {
	if x != nil {
		return x.Deletingnodes
	}
	return 0
}

type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipaddress     string             `protobuf:"bytes,2,opt,name=ipaddress,proto3" json:"ipaddress,omitempty"`
	Dnsname       string             `protobuf:"bytes,3,opt,name=dnsname,proto3" json:"dnsname,omitempty"`
	Imi           string             `protobuf:"bytes,4,opt,name=imi,proto3" json:"imi,omitempty"`
	State         string             `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Createddate   string             `protobuf:"bytes,6,opt,name=createddate,proto3" json:"createddate,omitempty"`
	Instanceimi   string             `protobuf:"bytes,7,opt,name=instanceimi,proto3" json:"instanceimi,omitempty"`
	Reason        string             `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	Message       string             `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	Errorcode     int32              `protobuf:"varint,10,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
	Unschedulable bool               `protobuf:"varint,11,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`
	WekaStorage   *WekaStorageStatus `protobuf:"bytes,12,opt,name=wekaStorage,proto3" json:"wekaStorage,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{23}
}

func (x *NodeStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeStatus) GetIpaddress() string {
	if x != nil {
		return x.Ipaddress
	}
	return ""
}

func (x *NodeStatus) GetDnsname() string {
	if x != nil {
		return x.Dnsname
	}
	return ""
}

func (x *NodeStatus) GetImi() string {
	if x != nil {
		return x.Imi
	}
	return ""
}

func (x *NodeStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NodeStatus) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

func (x *NodeStatus) GetInstanceimi() string {
	if x != nil {
		return x.Instanceimi
	}
	return ""
}

func (x *NodeStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *NodeStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NodeStatus) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

func (x *NodeStatus) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *NodeStatus) GetWekaStorage() *WekaStorageStatus {
	if x != nil {
		return x.WekaStorage
	}
	return nil
}

// Instance
type ClusterInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instanceos   string `protobuf:"bytes,1,opt,name=instanceos,proto3" json:"instanceos,omitempty"`
	Instancetype string `protobuf:"bytes,2,opt,name=instancetype,proto3" json:"instancetype,omitempty"`
}

func (x *ClusterInstance) Reset() {
	*x = ClusterInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstance) ProtoMessage() {}

func (x *ClusterInstance) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstance.ProtoReflect.Descriptor instead.
func (*ClusterInstance) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{24}
}

func (x *ClusterInstance) GetInstanceos() string {
	if x != nil {
		return x.Instanceos
	}
	return ""
}

func (x *ClusterInstance) GetInstancetype() string {
	if x != nil {
		return x.Instancetype
	}
	return ""
}

// Taint
type Taint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Effect   string `protobuf:"bytes,4,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *Taint) Reset() {
	*x = Taint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taint) ProtoMessage() {}

func (x *Taint) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taint.ProtoReflect.Descriptor instead.
func (*Taint) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{25}
}

func (x *Taint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Taint) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Taint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Taint) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

// UpgradeStrategy
type UpgradeStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drainnodes               bool  `protobuf:"varint,1,opt,name=drainnodes,proto3" json:"drainnodes,omitempty"`
	Maxunavailablepercentage int32 `protobuf:"varint,2,opt,name=maxunavailablepercentage,proto3" json:"maxunavailablepercentage,omitempty"`
}

func (x *UpgradeStrategy) Reset() {
	*x = UpgradeStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeStrategy) ProtoMessage() {}

func (x *UpgradeStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeStrategy.ProtoReflect.Descriptor instead.
func (*UpgradeStrategy) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{26}
}

func (x *UpgradeStrategy) GetDrainnodes() bool {
	if x != nil {
		return x.Drainnodes
	}
	return false
}

func (x *UpgradeStrategy) GetMaxunavailablepercentage() int32 {
	if x != nil {
		return x.Maxunavailablepercentage
	}
	return 0
}

// Network
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enableloadbalancer bool    `protobuf:"varint,1,opt,name=enableloadbalancer,proto3" json:"enableloadbalancer,omitempty"`
	Region             string  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Servicecidr        *string `protobuf:"bytes,3,opt,name=servicecidr,proto3,oneof" json:"servicecidr,omitempty"`
	Clustercidr        *string `protobuf:"bytes,4,opt,name=clustercidr,proto3,oneof" json:"clustercidr,omitempty"`
	Clusterdns         *string `protobuf:"bytes,5,opt,name=clusterdns,proto3,oneof" json:"clusterdns,omitempty"` // url
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{27}
}

func (x *Network) GetEnableloadbalancer() bool {
	if x != nil {
		return x.Enableloadbalancer
	}
	return false
}

func (x *Network) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Network) GetServicecidr() string {
	if x != nil && x.Servicecidr != nil {
		return *x.Servicecidr
	}
	return ""
}

func (x *Network) GetClustercidr() string {
	if x != nil && x.Clustercidr != nil {
		return *x.Clustercidr
	}
	return ""
}

func (x *Network) GetClusterdns() string {
	if x != nil && x.Clusterdns != nil {
		return *x.Clusterdns
	}
	return ""
}

// // AddOns
//
//	message AddOn {
//	 string addonversionname = 1 [(validate.rules).string.min_len= 1];
//	 repeated KeyValuePair addonargs = 4;
//	}
//
// // Addonarg
//
//	message AddOnArg {
//	 string name = 1;
//	 string value = 2 [(validate.rules).string = {
//	   pattern:   "^([a-zA-Z])[a-zA-Z0-9-_]*$",
//	   max_bytes: 253,
//	 }];
//	}
//
// // CreateAddonRequest
//
//	message CreateAddonRequest {
//	  int32 clusterid = 1;
//	  AddOn addon = 2;
//	}
//
// // AddOnResponse
//
//	message AddOnResponseForm {
//	 int32 addonid = 1;
//	 repeated AddOn addons = 2;
//	}
//
// //AddOnResponse
//
//	message AddOnResponse {
//	 repeated AddOnResponseForm addons = 1;
//	}
//
// EncryptionConfig
type EncryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source             string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Encrytionalgorithm string `protobuf:"bytes,2,opt,name=encrytionalgorithm,proto3" json:"encrytionalgorithm,omitempty"`
	Externalkms        string `protobuf:"bytes,3,opt,name=externalkms,proto3" json:"externalkms,omitempty"`
}

func (x *EncryptionConfig) Reset() {
	*x = EncryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionConfig) ProtoMessage() {}

func (x *EncryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionConfig.ProtoReflect.Descriptor instead.
func (*EncryptionConfig) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{28}
}

func (x *EncryptionConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EncryptionConfig) GetEncrytionalgorithm() string {
	if x != nil {
		return x.Encrytionalgorithm
	}
	return ""
}

func (x *EncryptionConfig) GetExternalkms() string {
	if x != nil {
		return x.Externalkms
	}
	return ""
}

// AdvancedConfig
type AdvancedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeapiserverArgs  []*KeyValuePair `protobuf:"bytes,1,rep,name=kubeapiserverArgs,proto3" json:"kubeapiserverArgs,omitempty"`
	Kubeproxyargs      []*KeyValuePair `protobuf:"bytes,2,rep,name=kubeproxyargs,proto3" json:"kubeproxyargs,omitempty"`
	Kubecontrollerargs []*KeyValuePair `protobuf:"bytes,3,rep,name=kubecontrollerargs,proto3" json:"kubecontrollerargs,omitempty"`
	Kubeschedularargs  []*KeyValuePair `protobuf:"bytes,4,rep,name=kubeschedularargs,proto3" json:"kubeschedularargs,omitempty"`
	Kubeletargs        []*KeyValuePair `protobuf:"bytes,5,rep,name=kubeletargs,proto3" json:"kubeletargs,omitempty"`
}

func (x *AdvancedConfig) Reset() {
	*x = AdvancedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedConfig) ProtoMessage() {}

func (x *AdvancedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedConfig.ProtoReflect.Descriptor instead.
func (*AdvancedConfig) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{29}
}

func (x *AdvancedConfig) GetKubeapiserverArgs() []*KeyValuePair {
	if x != nil {
		return x.KubeapiserverArgs
	}
	return nil
}

func (x *AdvancedConfig) GetKubeproxyargs() []*KeyValuePair {
	if x != nil {
		return x.Kubeproxyargs
	}
	return nil
}

func (x *AdvancedConfig) GetKubecontrollerargs() []*KeyValuePair {
	if x != nil {
		return x.Kubecontrollerargs
	}
	return nil
}

func (x *AdvancedConfig) GetKubeschedularargs() []*KeyValuePair {
	if x != nil {
		return x.Kubeschedularargs
	}
	return nil
}

func (x *AdvancedConfig) GetKubeletargs() []*KeyValuePair {
	if x != nil {
		return x.Kubeletargs
	}
	return nil
}

// Member
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kubeconfig   string `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	Cloudaccount string `protobuf:"bytes,2,opt,name=cloudaccount,proto3" json:"cloudaccount,omitempty"` // ??? DO WE NEED ROLES []
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{30}
}

func (x *Member) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *Member) GetCloudaccount() string {
	if x != nil {
		return x.Cloudaccount
	}
	return ""
}

// GetNodegroupRequest
type GetNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodegroupuuid  string `protobuf:"bytes,2,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	Nodes          *bool  `protobuf:"varint,3,opt,name=nodes,proto3,oneof" json:"nodes,omitempty"`
	CloudAccountId string `protobuf:"bytes,4,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *GetNodeGroupRequest) Reset() {
	*x = GetNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeGroupRequest) ProtoMessage() {}

func (x *GetNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*GetNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{31}
}

func (x *GetNodeGroupRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *GetNodeGroupRequest) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *GetNodeGroupRequest) GetNodes() bool {
	if x != nil && x.Nodes != nil {
		return *x.Nodes
	}
	return false
}

func (x *GetNodeGroupRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

// UpdateClusterRequest
type UpdateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string          `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clusteruuid    string          `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Name           *string         `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description    *string         `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Annotations    []*Annotations  `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Tags           []*KeyValuePair `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateClusterRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UpdateClusterRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateClusterRequest) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

// ClustersResponse
type ClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters       []*ClusterResponseForm `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Resourcelimits *ResourceLimits        `protobuf:"bytes,2,opt,name=resourcelimits,proto3" json:"resourcelimits,omitempty"`
}

func (x *ClustersResponse) Reset() {
	*x = ClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersResponse) ProtoMessage() {}

func (x *ClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClustersResponse.ProtoReflect.Descriptor instead.
func (*ClustersResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{33}
}

func (x *ClustersResponse) GetClusters() []*ClusterResponseForm {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ClustersResponse) GetResourcelimits() *ResourceLimits {
	if x != nil {
		return x.Resourcelimits
	}
	return nil
}

type ResourceLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxclusterpercloudaccount int32 `protobuf:"varint,1,opt,name=maxclusterpercloudaccount,proto3" json:"maxclusterpercloudaccount,omitempty"`
	Maxnodegroupspercluster   int32 `protobuf:"varint,2,opt,name=maxnodegroupspercluster,proto3" json:"maxnodegroupspercluster,omitempty"`
	Maxvipspercluster         int32 `protobuf:"varint,3,opt,name=maxvipspercluster,proto3" json:"maxvipspercluster,omitempty"`
	Maxnodespernodegroup      int32 `protobuf:"varint,4,opt,name=maxnodespernodegroup,proto3" json:"maxnodespernodegroup,omitempty"`
	Maxclustervm              int32 `protobuf:"varint,5,opt,name=maxclustervm,proto3" json:"maxclustervm,omitempty"`
}

func (x *ResourceLimits) Reset() {
	*x = ResourceLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimits) ProtoMessage() {}

func (x *ResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimits.ProtoReflect.Descriptor instead.
func (*ResourceLimits) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{34}
}

func (x *ResourceLimits) GetMaxclusterpercloudaccount() int32 {
	if x != nil {
		return x.Maxclusterpercloudaccount
	}
	return 0
}

func (x *ResourceLimits) GetMaxnodegroupspercluster() int32 {
	if x != nil {
		return x.Maxnodegroupspercluster
	}
	return 0
}

func (x *ResourceLimits) GetMaxvipspercluster() int32 {
	if x != nil {
		return x.Maxvipspercluster
	}
	return 0
}

func (x *ResourceLimits) GetMaxnodespernodegroup() int32 {
	if x != nil {
		return x.Maxnodespernodegroup
	}
	return 0
}

func (x *ResourceLimits) GetMaxclustervm() int32 {
	if x != nil {
		return x.Maxclustervm
	}
	return 0
}

type GetPublicK8SversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8Sversionname string   `protobuf:"bytes,1,opt,name=k8sversionname,proto3" json:"k8sversionname,omitempty"`
	Runtimename    []string `protobuf:"bytes,2,rep,name=runtimename,proto3" json:"runtimename,omitempty"`
}

func (x *GetPublicK8SversionResponse) Reset() {
	*x = GetPublicK8SversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicK8SversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicK8SversionResponse) ProtoMessage() {}

func (x *GetPublicK8SversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicK8SversionResponse.ProtoReflect.Descriptor instead.
func (*GetPublicK8SversionResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{35}
}

func (x *GetPublicK8SversionResponse) GetK8Sversionname() string {
	if x != nil {
		return x.K8Sversionname
	}
	return ""
}

func (x *GetPublicK8SversionResponse) GetRuntimename() []string {
	if x != nil {
		return x.Runtimename
	}
	return nil
}

type GetPublicAllK8SversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8Sversions []*GetPublicK8SversionResponse `protobuf:"bytes,1,rep,name=k8sversions,proto3" json:"k8sversions,omitempty"`
}

func (x *GetPublicAllK8SversionResponse) Reset() {
	*x = GetPublicAllK8SversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicAllK8SversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicAllK8SversionResponse) ProtoMessage() {}

func (x *GetPublicAllK8SversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicAllK8SversionResponse.ProtoReflect.Descriptor instead.
func (*GetPublicAllK8SversionResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{36}
}

func (x *GetPublicAllK8SversionResponse) GetK8Sversions() []*GetPublicK8SversionResponse {
	if x != nil {
		return x.K8Sversions
	}
	return nil
}

type GetPublicRuntimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtimename    string   `protobuf:"bytes,1,opt,name=runtimename,proto3" json:"runtimename,omitempty"`
	K8Sversionname []string `protobuf:"bytes,2,rep,name=k8sversionname,proto3" json:"k8sversionname,omitempty"`
}

func (x *GetPublicRuntimeResponse) Reset() {
	*x = GetPublicRuntimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicRuntimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicRuntimeResponse) ProtoMessage() {}

func (x *GetPublicRuntimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicRuntimeResponse.ProtoReflect.Descriptor instead.
func (*GetPublicRuntimeResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{37}
}

func (x *GetPublicRuntimeResponse) GetRuntimename() string {
	if x != nil {
		return x.Runtimename
	}
	return ""
}

func (x *GetPublicRuntimeResponse) GetK8Sversionname() []string {
	if x != nil {
		return x.K8Sversionname
	}
	return nil
}

type GetPublicAllRuntimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtimes []*GetPublicRuntimeResponse `protobuf:"bytes,1,rep,name=runtimes,proto3" json:"runtimes,omitempty"`
}

func (x *GetPublicAllRuntimeResponse) Reset() {
	*x = GetPublicAllRuntimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicAllRuntimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicAllRuntimeResponse) ProtoMessage() {}

func (x *GetPublicAllRuntimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicAllRuntimeResponse.ProtoReflect.Descriptor instead.
func (*GetPublicAllRuntimeResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{38}
}

func (x *GetPublicAllRuntimeResponse) GetRuntimes() []*GetPublicRuntimeResponse {
	if x != nil {
		return x.Runtimes
	}
	return nil
}

type GetPublicInstancetypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instancetypename string `protobuf:"bytes,1,opt,name=instancetypename,proto3" json:"instancetypename,omitempty"`
	Memory           int32  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Cpu              int32  `protobuf:"varint,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Storage          int32  `protobuf:"varint,4,opt,name=storage,proto3" json:"storage,omitempty"`
	Displayname      string `protobuf:"bytes,5,opt,name=displayname,proto3" json:"displayname,omitempty"`
	Description      string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Instancecategory string `protobuf:"bytes,7,opt,name=instancecategory,proto3" json:"instancecategory,omitempty"`
}

func (x *GetPublicInstancetypeResponse) Reset() {
	*x = GetPublicInstancetypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicInstancetypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicInstancetypeResponse) ProtoMessage() {}

func (x *GetPublicInstancetypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicInstancetypeResponse.ProtoReflect.Descriptor instead.
func (*GetPublicInstancetypeResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{39}
}

func (x *GetPublicInstancetypeResponse) GetInstancetypename() string {
	if x != nil {
		return x.Instancetypename
	}
	return ""
}

func (x *GetPublicInstancetypeResponse) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *GetPublicInstancetypeResponse) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *GetPublicInstancetypeResponse) GetStorage() int32 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *GetPublicInstancetypeResponse) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *GetPublicInstancetypeResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetPublicInstancetypeResponse) GetInstancecategory() string {
	if x != nil {
		return x.Instancecategory
	}
	return ""
}

type GetPublicAllInstancetypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instancetypes []*GetPublicInstancetypeResponse `protobuf:"bytes,1,rep,name=instancetypes,proto3" json:"instancetypes,omitempty"`
}

func (x *GetPublicAllInstancetypeResponse) Reset() {
	*x = GetPublicAllInstancetypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicAllInstancetypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicAllInstancetypeResponse) ProtoMessage() {}

func (x *GetPublicAllInstancetypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicAllInstancetypeResponse.ProtoReflect.Descriptor instead.
func (*GetPublicAllInstancetypeResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{40}
}

func (x *GetPublicAllInstancetypeResponse) GetInstancetypes() []*GetPublicInstancetypeResponse {
	if x != nil {
		return x.Instancetypes
	}
	return nil
}

type GetKubeconfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	CloudAccountId string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Readonly       *bool  `protobuf:"varint,3,opt,name=readonly,proto3,oneof" json:"readonly,omitempty"`
}

func (x *GetKubeconfigRequest) Reset() {
	*x = GetKubeconfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeconfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeconfigRequest) ProtoMessage() {}

func (x *GetKubeconfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeconfigRequest.ProtoReflect.Descriptor instead.
func (*GetKubeconfigRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{41}
}

func (x *GetKubeconfigRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *GetKubeconfigRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *GetKubeconfigRequest) GetReadonly() bool {
	if x != nil && x.Readonly != nil {
		return *x.Readonly
	}
	return false
}

type GetKubeconfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusterid  int32  `protobuf:"varint,1,opt,name=clusterid,proto3" json:"clusterid,omitempty"`
	Kubeconfig string `protobuf:"bytes,2,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
}

func (x *GetKubeconfigResponse) Reset() {
	*x = GetKubeconfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeconfigResponse) ProtoMessage() {}

func (x *GetKubeconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeconfigResponse.ProtoReflect.Descriptor instead.
func (*GetKubeconfigResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{42}
}

func (x *GetKubeconfigResponse) GetClusterid() int32 {
	if x != nil {
		return x.Clusterid
	}
	return 0
}

func (x *GetKubeconfigResponse) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

type IksCloudAccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *IksCloudAccountId) Reset() {
	*x = IksCloudAccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IksCloudAccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IksCloudAccountId) ProtoMessage() {}

func (x *IksCloudAccountId) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IksCloudAccountId.ProtoReflect.Descriptor instead.
func (*IksCloudAccountId) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{43}
}

func (x *IksCloudAccountId) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type VipCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Port           int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Viptype        string `protobuf:"bytes,5,opt,name=viptype,proto3" json:"viptype,omitempty"`
	CloudAccountId string `protobuf:"bytes,6,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *VipCreateRequest) Reset() {
	*x = VipCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipCreateRequest) ProtoMessage() {}

func (x *VipCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipCreateRequest.ProtoReflect.Descriptor instead.
func (*VipCreateRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{44}
}

func (x *VipCreateRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *VipCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VipCreateRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *VipCreateRequest) GetViptype() string {
	if x != nil {
		return x.Viptype
	}
	return ""
}

func (x *VipCreateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type VipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vipid       int32    `protobuf:"varint,1,opt,name=vipid,proto3" json:"vipid,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Vipstate    string   `protobuf:"bytes,4,opt,name=vipstate,proto3" json:"vipstate,omitempty"`
	Port        int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Poolport    int32    `protobuf:"varint,6,opt,name=poolport,proto3" json:"poolport,omitempty"`
	Viptype     string   `protobuf:"bytes,7,opt,name=viptype,proto3" json:"viptype,omitempty"`
	Dnsalias    []string `protobuf:"bytes,8,rep,name=dnsalias,proto3" json:"dnsalias,omitempty"`
}

func (x *VipResponse) Reset() {
	*x = VipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipResponse) ProtoMessage() {}

func (x *VipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipResponse.ProtoReflect.Descriptor instead.
func (*VipResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{45}
}

func (x *VipResponse) GetVipid() int32 {
	if x != nil {
		return x.Vipid
	}
	return 0
}

func (x *VipResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VipResponse) GetVipstate() string {
	if x != nil {
		return x.Vipstate
	}
	return ""
}

func (x *VipResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *VipResponse) GetPoolport() int32 {
	if x != nil {
		return x.Poolport
	}
	return 0
}

func (x *VipResponse) GetViptype() string {
	if x != nil {
		return x.Viptype
	}
	return ""
}

func (x *VipResponse) GetDnsalias() []string {
	if x != nil {
		return x.Dnsalias
	}
	return nil
}

type VipStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vipstate  string `protobuf:"bytes,2,opt,name=vipstate,proto3" json:"vipstate,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Poolid    int32  `protobuf:"varint,4,opt,name=poolid,proto3" json:"poolid,omitempty"`
	Vipid     string `protobuf:"bytes,5,opt,name=vipid,proto3" json:"vipid,omitempty"`
	Errorcode int32  `protobuf:"varint,6,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
}

func (x *VipStatus) Reset() {
	*x = VipStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipStatus) ProtoMessage() {}

func (x *VipStatus) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipStatus.ProtoReflect.Descriptor instead.
func (*VipStatus) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{46}
}

func (x *VipStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipStatus) GetVipstate() string {
	if x != nil {
		return x.Vipstate
	}
	return ""
}

func (x *VipStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VipStatus) GetPoolid() int32 {
	if x != nil {
		return x.Poolid
	}
	return 0
}

func (x *VipStatus) GetVipid() string {
	if x != nil {
		return x.Vipid
	}
	return ""
}

func (x *VipStatus) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

type GetVipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vipid       int32      `protobuf:"varint,1,opt,name=vipid,proto3" json:"vipid,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Vipstate    string     `protobuf:"bytes,4,opt,name=vipstate,proto3" json:"vipstate,omitempty"`
	VipIp       *string    `protobuf:"bytes,5,opt,name=vipIp,proto3,oneof" json:"vipIp,omitempty"`
	Port        int32      `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Poolport    int32      `protobuf:"varint,7,opt,name=poolport,proto3" json:"poolport,omitempty"`
	Viptype     string     `protobuf:"bytes,8,opt,name=viptype,proto3" json:"viptype,omitempty"`
	Dnsalias    []string   `protobuf:"bytes,9,rep,name=dnsalias,proto3" json:"dnsalias,omitempty"`
	Members     []*Members `protobuf:"bytes,10,rep,name=members,proto3" json:"members,omitempty"`
	Vipstatus   *VipStatus `protobuf:"bytes,11,opt,name=vipstatus,proto3" json:"vipstatus,omitempty"`
	Createddate string     `protobuf:"bytes,12,opt,name=createddate,proto3" json:"createddate,omitempty"`
}

func (x *GetVipResponse) Reset() {
	*x = GetVipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVipResponse) ProtoMessage() {}

func (x *GetVipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVipResponse.ProtoReflect.Descriptor instead.
func (*GetVipResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{47}
}

func (x *GetVipResponse) GetVipid() int32 {
	if x != nil {
		return x.Vipid
	}
	return 0
}

func (x *GetVipResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetVipResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetVipResponse) GetVipstate() string {
	if x != nil {
		return x.Vipstate
	}
	return ""
}

func (x *GetVipResponse) GetVipIp() string {
	if x != nil && x.VipIp != nil {
		return *x.VipIp
	}
	return ""
}

func (x *GetVipResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetVipResponse) GetPoolport() int32 {
	if x != nil {
		return x.Poolport
	}
	return 0
}

func (x *GetVipResponse) GetViptype() string {
	if x != nil {
		return x.Viptype
	}
	return ""
}

func (x *GetVipResponse) GetDnsalias() []string {
	if x != nil {
		return x.Dnsalias
	}
	return nil
}

func (x *GetVipResponse) GetMembers() []*Members {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GetVipResponse) GetVipstatus() *VipStatus {
	if x != nil {
		return x.Vipstatus
	}
	return nil
}

func (x *GetVipResponse) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

type Members struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipaddresses []string `protobuf:"bytes,1,rep,name=ipaddresses,proto3" json:"ipaddresses,omitempty"`
}

func (x *Members) Reset() {
	*x = Members{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Members) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Members) ProtoMessage() {}

func (x *Members) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Members.ProtoReflect.Descriptor instead.
func (*Members) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{48}
}

func (x *Members) GetIpaddresses() []string {
	if x != nil {
		return x.Ipaddresses
	}
	return nil
}

type GetVipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*GetVipResponse `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetVipsResponse) Reset() {
	*x = GetVipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVipsResponse) ProtoMessage() {}

func (x *GetVipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVipsResponse.ProtoReflect.Descriptor instead.
func (*GetVipsResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{49}
}

func (x *GetVipsResponse) GetResponse() []*GetVipResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type VipId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Vipid          int32  `protobuf:"varint,2,opt,name=vipid,proto3" json:"vipid,omitempty"`
	CloudAccountId string `protobuf:"bytes,3,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *VipId) Reset() {
	*x = VipId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipId) ProtoMessage() {}

func (x *VipId) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipId.ProtoReflect.Descriptor instead.
func (*VipId) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{50}
}

func (x *VipId) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *VipId) GetVipid() int32 {
	if x != nil {
		return x.Vipid
	}
	return 0
}

func (x *VipId) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type ClusterStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clusteruuid    string `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Enablestorage  bool   `protobuf:"varint,3,opt,name=enablestorage,proto3" json:"enablestorage,omitempty"`
	Storagesize    string `protobuf:"bytes,4,opt,name=storagesize,proto3" json:"storagesize,omitempty"`
}

func (x *ClusterStorageRequest) Reset() {
	*x = ClusterStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageRequest) ProtoMessage() {}

func (x *ClusterStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageRequest.ProtoReflect.Descriptor instead.
func (*ClusterStorageRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{51}
}

func (x *ClusterStorageRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ClusterStorageRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *ClusterStorageRequest) GetEnablestorage() bool {
	if x != nil {
		return x.Enablestorage
	}
	return false
}

func (x *ClusterStorageRequest) GetStoragesize() string {
	if x != nil {
		return x.Storagesize
	}
	return ""
}

type ClusterStorageUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clusteruuid    string `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Storagesize    string `protobuf:"bytes,3,opt,name=storagesize,proto3" json:"storagesize,omitempty"`
}

func (x *ClusterStorageUpdateRequest) Reset() {
	*x = ClusterStorageUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageUpdateRequest) ProtoMessage() {}

func (x *ClusterStorageUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClusterStorageUpdateRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{52}
}

func (x *ClusterStorageUpdateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ClusterStorageUpdateRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *ClusterStorageUpdateRequest) GetStoragesize() string {
	if x != nil {
		return x.Storagesize
	}
	return ""
}

type WekaStorageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Status       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CustomStatus string `protobuf:"bytes,3,opt,name=customStatus,proto3" json:"customStatus,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WekaStorageStatus) Reset() {
	*x = WekaStorageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WekaStorageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WekaStorageStatus) ProtoMessage() {}

func (x *WekaStorageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WekaStorageStatus.ProtoReflect.Descriptor instead.
func (*WekaStorageStatus) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{53}
}

func (x *WekaStorageStatus) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WekaStorageStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WekaStorageStatus) GetCustomStatus() string {
	if x != nil {
		return x.CustomStatus
	}
	return ""
}

func (x *WekaStorageStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sourceip      []string `protobuf:"bytes,1,rep,name=sourceip,proto3" json:"sourceip,omitempty"`
	State         string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Destinationip string   `protobuf:"bytes,3,opt,name=destinationip,proto3" json:"destinationip,omitempty"`
	Port          int32    `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Vipid         int32    `protobuf:"varint,5,opt,name=vipid,proto3" json:"vipid,omitempty"`
	Vipname       string   `protobuf:"bytes,6,opt,name=vipname,proto3" json:"vipname,omitempty"`
	Viptype       string   `protobuf:"bytes,7,opt,name=viptype,proto3" json:"viptype,omitempty"`
	Protocol      []string `protobuf:"bytes,8,rep,name=protocol,proto3" json:"protocol,omitempty"`
	Internalport  int32    `protobuf:"varint,9,opt,name=internalport,proto3" json:"internalport,omitempty"`
}

func (x *FirewallRuleResponse) Reset() {
	*x = FirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRuleResponse) ProtoMessage() {}

func (x *FirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*FirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{54}
}

func (x *FirewallRuleResponse) GetSourceip() []string {
	if x != nil {
		return x.Sourceip
	}
	return nil
}

func (x *FirewallRuleResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FirewallRuleResponse) GetDestinationip() string {
	if x != nil {
		return x.Destinationip
	}
	return ""
}

func (x *FirewallRuleResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FirewallRuleResponse) GetVipid() int32 {
	if x != nil {
		return x.Vipid
	}
	return 0
}

func (x *FirewallRuleResponse) GetVipname() string {
	if x != nil {
		return x.Vipname
	}
	return ""
}

func (x *FirewallRuleResponse) GetViptype() string {
	if x != nil {
		return x.Viptype
	}
	return ""
}

func (x *FirewallRuleResponse) GetProtocol() []string {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *FirewallRuleResponse) GetInternalport() int32 {
	if x != nil {
		return x.Internalport
	}
	return 0
}

type GetFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clusteruuid    string `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
}

func (x *GetFirewallRuleRequest) Reset() {
	*x = GetFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallRuleRequest) ProtoMessage() {}

func (x *GetFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*GetFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{55}
}

func (x *GetFirewallRuleRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *GetFirewallRuleRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

type GetFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Getfirewallresponse []*FirewallRuleResponse `protobuf:"bytes,1,rep,name=getfirewallresponse,proto3" json:"getfirewallresponse,omitempty"`
}

func (x *GetFirewallRuleResponse) Reset() {
	*x = GetFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallRuleResponse) ProtoMessage() {}

func (x *GetFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*GetFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{56}
}

func (x *GetFirewallRuleResponse) GetGetfirewallresponse() []*FirewallRuleResponse {
	if x != nil {
		return x.Getfirewallresponse
	}
	return nil
}

type UpdateFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string   `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clusteruuid    string   `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Sourceip       []string `protobuf:"bytes,3,rep,name=sourceip,proto3" json:"sourceip,omitempty"`
	Internalip     string   `protobuf:"bytes,4,opt,name=internalip,proto3" json:"internalip,omitempty"`
	Port           int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Protocol       []string `protobuf:"bytes,6,rep,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *UpdateFirewallRuleRequest) Reset() {
	*x = UpdateFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirewallRuleRequest) ProtoMessage() {}

func (x *UpdateFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateFirewallRuleRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UpdateFirewallRuleRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *UpdateFirewallRuleRequest) GetSourceip() []string {
	if x != nil {
		return x.Sourceip
	}
	return nil
}

func (x *UpdateFirewallRuleRequest) GetInternalip() string {
	if x != nil {
		return x.Internalip
	}
	return ""
}

func (x *UpdateFirewallRuleRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UpdateFirewallRuleRequest) GetProtocol() []string {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type DeleteFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clusteruuid    string `protobuf:"bytes,2,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Vipid          int32  `protobuf:"varint,3,opt,name=vipid,proto3" json:"vipid,omitempty"`
}

func (x *DeleteFirewallRuleRequest) Reset() {
	*x = DeleteFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallRuleRequest) ProtoMessage() {}

func (x *DeleteFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteFirewallRuleRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *DeleteFirewallRuleRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *DeleteFirewallRuleRequest) GetVipid() int32 {
	if x != nil {
		return x.Vipid
	}
	return 0
}

type SuperComputeClusterCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string           `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Clusterspec    *ClusterSpec     `protobuf:"bytes,2,opt,name=clusterspec,proto3" json:"clusterspec,omitempty"`
	Nodegroupspec  []*NodegroupSpec `protobuf:"bytes,3,rep,name=nodegroupspec,proto3" json:"nodegroupspec,omitempty"`
	Storagespec    *StorageSpec     `protobuf:"bytes,4,opt,name=storagespec,proto3" json:"storagespec,omitempty"`
	Clustertype    string           `protobuf:"bytes,5,opt,name=clustertype,proto3" json:"clustertype,omitempty"`
	InstanceType   string           `protobuf:"bytes,6,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *SuperComputeClusterCreateRequest) Reset() {
	*x = SuperComputeClusterCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperComputeClusterCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperComputeClusterCreateRequest) ProtoMessage() {}

func (x *SuperComputeClusterCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperComputeClusterCreateRequest.ProtoReflect.Descriptor instead.
func (*SuperComputeClusterCreateRequest) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{59}
}

func (x *SuperComputeClusterCreateRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *SuperComputeClusterCreateRequest) GetClusterspec() *ClusterSpec {
	if x != nil {
		return x.Clusterspec
	}
	return nil
}

func (x *SuperComputeClusterCreateRequest) GetNodegroupspec() []*NodegroupSpec {
	if x != nil {
		return x.Nodegroupspec
	}
	return nil
}

func (x *SuperComputeClusterCreateRequest) GetStoragespec() *StorageSpec {
	if x != nil {
		return x.Storagespec
	}
	return nil
}

func (x *SuperComputeClusterCreateRequest) GetClustertype() string {
	if x != nil {
		return x.Clustertype
	}
	return ""
}

func (x *SuperComputeClusterCreateRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type StorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storagesize   string `protobuf:"bytes,1,opt,name=storagesize,proto3" json:"storagesize,omitempty"`
	Enablestorage bool   `protobuf:"varint,2,opt,name=enablestorage,proto3" json:"enablestorage,omitempty"`
}

func (x *StorageSpec) Reset() {
	*x = StorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec) ProtoMessage() {}

func (x *StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{60}
}

func (x *StorageSpec) GetStoragesize() string {
	if x != nil {
		return x.Storagesize
	}
	return ""
}

func (x *StorageSpec) GetEnablestorage() bool {
	if x != nil {
		return x.Enablestorage
	}
	return false
}

type ClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    *string         `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	K8Sversionname string          `protobuf:"bytes,3,opt,name=k8sversionname,proto3" json:"k8sversionname,omitempty"`
	Runtimename    string          `protobuf:"bytes,4,opt,name=runtimename,proto3" json:"runtimename,omitempty"`
	Network        *Network        `protobuf:"bytes,5,opt,name=network,proto3,oneof" json:"network,omitempty"`
	Annotations    []*Annotations  `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Tags           []*KeyValuePair `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ClusterSpec) Reset() {
	*x = ClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSpec) ProtoMessage() {}

func (x *ClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSpec.ProtoReflect.Descriptor instead.
func (*ClusterSpec) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{61}
}

func (x *ClusterSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterSpec) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ClusterSpec) GetK8Sversionname() string {
	if x != nil {
		return x.K8Sversionname
	}
	return ""
}

func (x *ClusterSpec) GetRuntimename() string {
	if x != nil {
		return x.Runtimename
	}
	return ""
}

func (x *ClusterSpec) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClusterSpec) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterSpec) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

type NodegroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     *string          `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Instancetypeid  string           `protobuf:"bytes,3,opt,name=instancetypeid,proto3" json:"instancetypeid,omitempty"`
	Vnets           []*Vnet          `protobuf:"bytes,4,rep,name=vnets,proto3" json:"vnets,omitempty"`
	Count           int32            `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Sshkeyname      []*SshKey        `protobuf:"bytes,6,rep,name=sshkeyname,proto3" json:"sshkeyname,omitempty"`
	Tags            []*KeyValuePair  `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Upgradestrategy *UpgradeStrategy `protobuf:"bytes,8,opt,name=upgradestrategy,proto3,oneof" json:"upgradestrategy,omitempty"`
	Annotations     []*Annotations   `protobuf:"bytes,9,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Userdataurl     *string          `protobuf:"bytes,10,opt,name=userdataurl,proto3,oneof" json:"userdataurl,omitempty"`
	Nodegrouptype   string           `protobuf:"bytes,11,opt,name=nodegrouptype,proto3" json:"nodegrouptype,omitempty"`
}

func (x *NodegroupSpec) Reset() {
	*x = NodegroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodegroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodegroupSpec) ProtoMessage() {}

func (x *NodegroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_iks_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodegroupSpec.ProtoReflect.Descriptor instead.
func (*NodegroupSpec) Descriptor() ([]byte, []int) {
	return file_iks_proto_rawDescGZIP(), []int{62}
}

func (x *NodegroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodegroupSpec) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NodegroupSpec) GetInstancetypeid() string {
	if x != nil {
		return x.Instancetypeid
	}
	return ""
}

func (x *NodegroupSpec) GetVnets() []*Vnet {
	if x != nil {
		return x.Vnets
	}
	return nil
}

func (x *NodegroupSpec) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NodegroupSpec) GetSshkeyname() []*SshKey {
	if x != nil {
		return x.Sshkeyname
	}
	return nil
}

func (x *NodegroupSpec) GetTags() []*KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NodegroupSpec) GetUpgradestrategy() *UpgradeStrategy {
	if x != nil {
		return x.Upgradestrategy
	}
	return nil
}

func (x *NodegroupSpec) GetAnnotations() []*Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NodegroupSpec) GetUserdataurl() string {
	if x != nil && x.Userdataurl != nil {
		return *x.Userdataurl
	}
	return ""
}

func (x *NodegroupSpec) GetNodegrouptype() string {
	if x != nil {
		return x.Nodegrouptype
	}
	return ""
}

var File_iks_proto protoreflect.FileDescriptor

var file_iks_proto_rawDesc = []byte{
	0x0a, 0x09, 0x69, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x03, 0x0a, 0x0e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd,
	0x1b, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x38, 0x73,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xb5, 0x06, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x6b, 0x38, 0x73, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x6b, 0x38,
	0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x76, 0x69, 0x70,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x76, 0x69, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x12, 0x3c, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x05, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x6e, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x6e, 0x65, 0x74, 0x52, 0x05, 0x76, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73,
	0x68, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x01, 0x52, 0x0f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x76, 0x0a, 0x04, 0x56, 0x6e, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x7a, 0x6f, 0x6e, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x7a, 0x6f, 0x6e, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x76, 0x6e, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x76, 0x6e, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x06, 0x53, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x28, 0x3f, 0x32, 0x10, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x73,
	0x73, 0x68, 0x6b, 0x65, 0x79, 0x22, 0xd9, 0x07, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x76, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6e, 0x65, 0x74, 0x52, 0x05, 0x76, 0x6e, 0x65, 0x74, 0x73, 0x12,
	0x2d, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48,
	0x01, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x69, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x69, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x69, 0x6d, 0x69, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x69, 0x6d, 0x69, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x51, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x85, 0x04, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x48, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x22, 0xea, 0x01, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35,
	0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69,
	0x64, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6b,
	0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x0f,
	0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x10, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x4e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6d, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d,
	0x69, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6d, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6d, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x77, 0x65, 0x6b, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x65, 0x6b, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x77, 0x65, 0x6b, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x67, 0x0a,
	0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x42, 0x21, 0x72, 0x1f, 0x28, 0xfd, 0x01, 0x32, 0x1a, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x5d, 0x29, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x24, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x22, 0x6d, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x72, 0x61, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x75, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x75, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x22, 0xf3, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x63, 0x69, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x69, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x69, 0x64, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x64, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x64, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x63, 0x69, 0x64, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x63, 0x69, 0x64, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x64, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6b,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x6b, 0x6d, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x6b,
	0x75, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x61, 0x72, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x61, 0x72, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x11, 0x6b, 0x75, 0x62,
	0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x72, 0x67, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x10,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x61,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d,
	0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x76, 0x69, 0x70, 0x73, 0x70, 0x65, 0x72,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x76, 0x69, 0x70, 0x73, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x70, 0x65, 0x72, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x76, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x6d, 0x22, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x66, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x6c,
	0x6c, 0x4b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x38, 0x73, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6b, 0x38,
	0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x5a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x6e, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x96, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x43, 0x0a,
	0x11, 0x49, 0x6b, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xdb, 0x01,
	0x0a, 0x0b, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x69, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x70,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x70,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x09,
	0x56, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x69, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x69, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x69, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x70, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xff, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x69, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x69, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x69, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x69,
	0x70, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x70,
	0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x69, 0x70, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x76, 0x69, 0x70, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x70, 0x49,
	0x70, 0x22, 0x2b, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x44,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x05, 0x56, 0x69, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x69, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x69, 0x70, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x11, 0x57, 0x65, 0x6b, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x70, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x69, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x6a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x68, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x67, 0x65, 0x74, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x70, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x70, 0x69, 0x64, 0x22, 0xce, 0x02, 0x0a,
	0x20, 0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x28, 0x3f, 0x32, 0x10, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x28,
	0xfd, 0x01, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x20, 0x5d, 0x2a, 0x24, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xda, 0x04, 0x0a, 0x0d,
	0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16,
	0x72, 0x14, 0x28, 0x3f, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x28, 0xfd, 0x01, 0x32, 0x11, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x5d, 0x2a, 0x24, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6e, 0x65, 0x74, 0x52, 0x05, 0x76,
	0x6e, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0a, 0x28, 0x00, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x01,
	0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x88, 0x01, 0x01, 0xd0, 0x01, 0x01, 0x48, 0x02, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x32, 0x89, 0x26, 0x0a, 0x03, 0x49, 0x6b, 0x73,
	0x12, 0xa7, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x5a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x28, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6b, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x9d, 0x01, 0x0a, 0x0a, 0x50,
	0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x1a, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xa6, 0x01, 0x0a, 0x0e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b,
	0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x50, 0x01, 0x12, 0xb3, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22,
	0x45, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xb1, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x1a, 0x45, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x90, 0x01,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3f, 0x2a, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01,
	0x12, 0x98, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xc3, 0x01, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4d, 0x22, 0x48, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01,
	0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x28, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50,
	0x01, 0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4a, 0x12, 0x48, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x22,
	0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x12, 0x58, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50,
	0x01, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5d, 0x1a, 0x58, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xbb,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x65, 0x22, 0x60, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xaf, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x70, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5a, 0x2a, 0x58, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x7d, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xb9,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x12, 0x5f, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b,
	0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xe3, 0x01, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x2a, 0x70,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01,
	0x12, 0xac, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x38,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6b, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x4b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12,
	0x9b, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6b,
	0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x69, 0x6b, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xaa, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6b, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xb1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12,
	0x48, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x70, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x69, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22,
	0x42, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x76,
	0x69, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x70, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x70, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x70, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x70, 0x49,
	0x64, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c,
	0x12, 0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x69, 0x70, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x70, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x8d, 0x01, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x70, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a, 0x4a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x70, 0x73, 0x2f, 0x7b, 0x76, 0x69,
	0x70, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0xb6, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x1a, 0x46, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69,
	0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xb6, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x66, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x50, 0x2a, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x76, 0x69,
	0x70, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x50, 0x01, 0x32, 0xdb, 0x01, 0x0a, 0x0f, 0x49, 0x6b, 0x73, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6b,
	0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x28, 0x01, 0x42, 0x55, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_iks_proto_rawDescOnce sync.Once
	file_iks_proto_rawDescData = file_iks_proto_rawDesc
)

func file_iks_proto_rawDescGZIP() []byte {
	file_iks_proto_rawDescOnce.Do(func() {
		file_iks_proto_rawDescData = protoimpl.X.CompressGZIP(file_iks_proto_rawDescData)
	})
	return file_iks_proto_rawDescData
}

var file_iks_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_iks_proto_goTypes = []interface{}{
	(*ClusterRequest)(nil),                   // 0: proto.ClusterRequest
	(*ClusterResponse)(nil),                  // 1: proto.ClusterResponse
	(*ClusterCreateResponseForm)(nil),        // 2: proto.ClusterCreateResponseForm
	(*ClusterResponseForm)(nil),              // 3: proto.ClusterResponseForm
	(*ClusterStorageStatus)(nil),             // 4: proto.ClusterStorageStatus
	(*CreateNodeGroupRequest)(nil),           // 5: proto.CreateNodeGroupRequest
	(*Vnet)(nil),                             // 6: proto.Vnet
	(*SshKey)(nil),                           // 7: proto.SshKey
	(*NodeGroupResponseForm)(nil),            // 8: proto.NodeGroupResponseForm
	(*NodeGroupResponse)(nil),                // 9: proto.NodeGroupResponse
	(*UpdateNodeGroupRequest)(nil),           // 10: proto.UpdateNodeGroupRequest
	(*DeleteNodeGroupInstanceRequest)(nil),   // 11: proto.DeleteNodeGroupInstanceRequest
	(*NodeGroupid)(nil),                      // 12: proto.NodeGroupid
	(*ProvisioningLog)(nil),                  // 13: proto.ProvisioningLog
	(*KeyValuePair)(nil),                     // 14: proto.KeyValuePair
	(*Annotations)(nil),                      // 15: proto.Annotations
	(*ClusterID)(nil),                        // 16: proto.ClusterID
	(*GetNodeGroupsRequest)(nil),             // 17: proto.GetNodeGroupsRequest
	(*NodeGroupID)(nil),                      // 18: proto.NodeGroupID
	(*UpgradeClusterRequest)(nil),            // 19: proto.UpgradeClusterRequest
	(*ClusterStatus)(nil),                    // 20: proto.ClusterStatus
	(*Nodegroupstatus)(nil),                  // 21: proto.Nodegroupstatus
	(*NodegroupSummary)(nil),                 // 22: proto.NodegroupSummary
	(*NodeStatus)(nil),                       // 23: proto.NodeStatus
	(*ClusterInstance)(nil),                  // 24: proto.ClusterInstance
	(*Taint)(nil),                            // 25: proto.Taint
	(*UpgradeStrategy)(nil),                  // 26: proto.UpgradeStrategy
	(*Network)(nil),                          // 27: proto.Network
	(*EncryptionConfig)(nil),                 // 28: proto.EncryptionConfig
	(*AdvancedConfig)(nil),                   // 29: proto.AdvancedConfig
	(*Member)(nil),                           // 30: proto.Member
	(*GetNodeGroupRequest)(nil),              // 31: proto.GetNodeGroupRequest
	(*UpdateClusterRequest)(nil),             // 32: proto.UpdateClusterRequest
	(*ClustersResponse)(nil),                 // 33: proto.ClustersResponse
	(*ResourceLimits)(nil),                   // 34: proto.ResourceLimits
	(*GetPublicK8SversionResponse)(nil),      // 35: proto.GetPublicK8sversionResponse
	(*GetPublicAllK8SversionResponse)(nil),   // 36: proto.GetPublicAllK8sversionResponse
	(*GetPublicRuntimeResponse)(nil),         // 37: proto.GetPublicRuntimeResponse
	(*GetPublicAllRuntimeResponse)(nil),      // 38: proto.GetPublicAllRuntimeResponse
	(*GetPublicInstancetypeResponse)(nil),    // 39: proto.GetPublicInstancetypeResponse
	(*GetPublicAllInstancetypeResponse)(nil), // 40: proto.GetPublicAllInstancetypeResponse
	(*GetKubeconfigRequest)(nil),             // 41: proto.GetKubeconfigRequest
	(*GetKubeconfigResponse)(nil),            // 42: proto.GetKubeconfigResponse
	(*IksCloudAccountId)(nil),                // 43: proto.IksCloudAccountId
	(*VipCreateRequest)(nil),                 // 44: proto.VipCreateRequest
	(*VipResponse)(nil),                      // 45: proto.VipResponse
	(*VipStatus)(nil),                        // 46: proto.VipStatus
	(*GetVipResponse)(nil),                   // 47: proto.GetVipResponse
	(*Members)(nil),                          // 48: proto.Members
	(*GetVipsResponse)(nil),                  // 49: proto.GetVipsResponse
	(*VipId)(nil),                            // 50: proto.VipId
	(*ClusterStorageRequest)(nil),            // 51: proto.ClusterStorageRequest
	(*ClusterStorageUpdateRequest)(nil),      // 52: proto.ClusterStorageUpdateRequest
	(*WekaStorageStatus)(nil),                // 53: proto.WekaStorageStatus
	(*FirewallRuleResponse)(nil),             // 54: proto.FirewallRuleResponse
	(*GetFirewallRuleRequest)(nil),           // 55: proto.GetFirewallRuleRequest
	(*GetFirewallRuleResponse)(nil),          // 56: proto.GetFirewallRuleResponse
	(*UpdateFirewallRuleRequest)(nil),        // 57: proto.UpdateFirewallRuleRequest
	(*DeleteFirewallRuleRequest)(nil),        // 58: proto.DeleteFirewallRuleRequest
	(*SuperComputeClusterCreateRequest)(nil), // 59: proto.SuperComputeClusterCreateRequest
	(*StorageSpec)(nil),                      // 60: proto.StorageSpec
	(*ClusterSpec)(nil),                      // 61: proto.ClusterSpec
	(*NodegroupSpec)(nil),                    // 62: proto.NodegroupSpec
	(*emptypb.Empty)(nil),                    // 63: google.protobuf.Empty
}
var file_iks_proto_depIdxs = []int32{
	27, // 0: proto.ClusterRequest.network:type_name -> proto.Network
	15, // 1: proto.ClusterRequest.annotations:type_name -> proto.Annotations
	14, // 2: proto.ClusterRequest.tags:type_name -> proto.KeyValuePair
	3,  // 3: proto.ClusterResponse.clusters:type_name -> proto.ClusterResponseForm
	20, // 4: proto.ClusterResponseForm.clusterstatus:type_name -> proto.ClusterStatus
	27, // 5: proto.ClusterResponseForm.network:type_name -> proto.Network
	14, // 6: proto.ClusterResponseForm.tags:type_name -> proto.KeyValuePair
	47, // 7: proto.ClusterResponseForm.vips:type_name -> proto.GetVipResponse
	15, // 8: proto.ClusterResponseForm.annotations:type_name -> proto.Annotations
	13, // 9: proto.ClusterResponseForm.provisioningLog:type_name -> proto.ProvisioningLog
	8,  // 10: proto.ClusterResponseForm.nodegroups:type_name -> proto.NodeGroupResponseForm
	4,  // 11: proto.ClusterResponseForm.storages:type_name -> proto.ClusterStorageStatus
	6,  // 12: proto.CreateNodeGroupRequest.vnets:type_name -> proto.Vnet
	7,  // 13: proto.CreateNodeGroupRequest.sshkeyname:type_name -> proto.SshKey
	14, // 14: proto.CreateNodeGroupRequest.tags:type_name -> proto.KeyValuePair
	26, // 15: proto.CreateNodeGroupRequest.upgradestrategy:type_name -> proto.UpgradeStrategy
	15, // 16: proto.CreateNodeGroupRequest.annotations:type_name -> proto.Annotations
	21, // 17: proto.NodeGroupResponseForm.nodegroupstatus:type_name -> proto.Nodegroupstatus
	6,  // 18: proto.NodeGroupResponseForm.vnets:type_name -> proto.Vnet
	7,  // 19: proto.NodeGroupResponseForm.sshkeyname:type_name -> proto.SshKey
	26, // 20: proto.NodeGroupResponseForm.upgradestrategy:type_name -> proto.UpgradeStrategy
	14, // 21: proto.NodeGroupResponseForm.tags:type_name -> proto.KeyValuePair
	23, // 22: proto.NodeGroupResponseForm.nodes:type_name -> proto.NodeStatus
	15, // 23: proto.NodeGroupResponseForm.annotations:type_name -> proto.Annotations
	8,  // 24: proto.NodeGroupResponse.nodegroups:type_name -> proto.NodeGroupResponseForm
	26, // 25: proto.UpdateNodeGroupRequest.upgradestrategy:type_name -> proto.UpgradeStrategy
	14, // 26: proto.UpdateNodeGroupRequest.tags:type_name -> proto.KeyValuePair
	15, // 27: proto.UpdateNodeGroupRequest.annotations:type_name -> proto.Annotations
	23, // 28: proto.Nodegroupstatus.nodestatus:type_name -> proto.NodeStatus
	22, // 29: proto.Nodegroupstatus.nodegroupsummary:type_name -> proto.NodegroupSummary
	53, // 30: proto.NodeStatus.wekaStorage:type_name -> proto.WekaStorageStatus
	14, // 31: proto.AdvancedConfig.kubeapiserverArgs:type_name -> proto.KeyValuePair
	14, // 32: proto.AdvancedConfig.kubeproxyargs:type_name -> proto.KeyValuePair
	14, // 33: proto.AdvancedConfig.kubecontrollerargs:type_name -> proto.KeyValuePair
	14, // 34: proto.AdvancedConfig.kubeschedularargs:type_name -> proto.KeyValuePair
	14, // 35: proto.AdvancedConfig.kubeletargs:type_name -> proto.KeyValuePair
	15, // 36: proto.UpdateClusterRequest.annotations:type_name -> proto.Annotations
	14, // 37: proto.UpdateClusterRequest.tags:type_name -> proto.KeyValuePair
	3,  // 38: proto.ClustersResponse.clusters:type_name -> proto.ClusterResponseForm
	34, // 39: proto.ClustersResponse.resourcelimits:type_name -> proto.ResourceLimits
	35, // 40: proto.GetPublicAllK8sversionResponse.k8sversions:type_name -> proto.GetPublicK8sversionResponse
	37, // 41: proto.GetPublicAllRuntimeResponse.runtimes:type_name -> proto.GetPublicRuntimeResponse
	39, // 42: proto.GetPublicAllInstancetypeResponse.instancetypes:type_name -> proto.GetPublicInstancetypeResponse
	48, // 43: proto.GetVipResponse.members:type_name -> proto.Members
	46, // 44: proto.GetVipResponse.vipstatus:type_name -> proto.VipStatus
	47, // 45: proto.GetVipsResponse.response:type_name -> proto.GetVipResponse
	54, // 46: proto.GetFirewallRuleResponse.getfirewallresponse:type_name -> proto.FirewallRuleResponse
	61, // 47: proto.SuperComputeClusterCreateRequest.clusterspec:type_name -> proto.ClusterSpec
	62, // 48: proto.SuperComputeClusterCreateRequest.nodegroupspec:type_name -> proto.NodegroupSpec
	60, // 49: proto.SuperComputeClusterCreateRequest.storagespec:type_name -> proto.StorageSpec
	27, // 50: proto.ClusterSpec.network:type_name -> proto.Network
	15, // 51: proto.ClusterSpec.annotations:type_name -> proto.Annotations
	14, // 52: proto.ClusterSpec.tags:type_name -> proto.KeyValuePair
	6,  // 53: proto.NodegroupSpec.vnets:type_name -> proto.Vnet
	7,  // 54: proto.NodegroupSpec.sshkeyname:type_name -> proto.SshKey
	14, // 55: proto.NodegroupSpec.tags:type_name -> proto.KeyValuePair
	26, // 56: proto.NodegroupSpec.upgradestrategy:type_name -> proto.UpgradeStrategy
	15, // 57: proto.NodegroupSpec.annotations:type_name -> proto.Annotations
	0,  // 58: proto.Iks.CreateNewCluster:input_type -> proto.ClusterRequest
	43, // 59: proto.Iks.GetClusters:input_type -> proto.IksCloudAccountId
	16, // 60: proto.Iks.GetCluster:input_type -> proto.ClusterID
	32, // 61: proto.Iks.PutCluster:input_type -> proto.UpdateClusterRequest
	19, // 62: proto.Iks.UpgradeCluster:input_type -> proto.UpgradeClusterRequest
	51, // 63: proto.Iks.EnableClusterStorage:input_type -> proto.ClusterStorageRequest
	52, // 64: proto.Iks.UpdateClusterStorage:input_type -> proto.ClusterStorageUpdateRequest
	16, // 65: proto.Iks.DeleteCluster:input_type -> proto.ClusterID
	16, // 66: proto.Iks.GetClusterStatus:input_type -> proto.ClusterID
	5,  // 67: proto.Iks.CreateNodeGroup:input_type -> proto.CreateNodeGroupRequest
	17, // 68: proto.Iks.GetNodeGroups:input_type -> proto.GetNodeGroupsRequest
	31, // 69: proto.Iks.GetNodeGroup:input_type -> proto.GetNodeGroupRequest
	10, // 70: proto.Iks.PutNodeGroup:input_type -> proto.UpdateNodeGroupRequest
	12, // 71: proto.Iks.UpgradeNodeGroup:input_type -> proto.NodeGroupid
	12, // 72: proto.Iks.DeleteNodeGroup:input_type -> proto.NodeGroupid
	12, // 73: proto.Iks.GetNodeGroupStatus:input_type -> proto.NodeGroupid
	11, // 74: proto.Iks.DeleteNodeGroupInstance:input_type -> proto.DeleteNodeGroupInstanceRequest
	43, // 75: proto.Iks.GetPublicK8sVersions:input_type -> proto.IksCloudAccountId
	43, // 76: proto.Iks.GetPublicRuntimes:input_type -> proto.IksCloudAccountId
	43, // 77: proto.Iks.GetPublicInstanceTypes:input_type -> proto.IksCloudAccountId
	16, // 78: proto.Iks.GetKubeConfig:input_type -> proto.ClusterID
	41, // 79: proto.Iks.RetrieveKubeConfig:input_type -> proto.GetKubeconfigRequest
	44, // 80: proto.Iks.CreateNewVip:input_type -> proto.VipCreateRequest
	16, // 81: proto.Iks.GetVips:input_type -> proto.ClusterID
	50, // 82: proto.Iks.GetVip:input_type -> proto.VipId
	50, // 83: proto.Iks.DeleteVip:input_type -> proto.VipId
	57, // 84: proto.Iks.UpdateFirewallRule:input_type -> proto.UpdateFirewallRuleRequest
	16, // 85: proto.Iks.GetFirewallRule:input_type -> proto.ClusterID
	58, // 86: proto.Iks.DeleteFirewallRule:input_type -> proto.DeleteFirewallRuleRequest
	59, // 87: proto.IksSuperCompute.SuperComputeCreateCluster:input_type -> proto.SuperComputeClusterCreateRequest
	2,  // 88: proto.Iks.CreateNewCluster:output_type -> proto.ClusterCreateResponseForm
	33, // 89: proto.Iks.GetClusters:output_type -> proto.ClustersResponse
	3,  // 90: proto.Iks.GetCluster:output_type -> proto.ClusterResponseForm
	2,  // 91: proto.Iks.PutCluster:output_type -> proto.ClusterCreateResponseForm
	20, // 92: proto.Iks.UpgradeCluster:output_type -> proto.ClusterStatus
	4,  // 93: proto.Iks.EnableClusterStorage:output_type -> proto.ClusterStorageStatus
	4,  // 94: proto.Iks.UpdateClusterStorage:output_type -> proto.ClusterStorageStatus
	63, // 95: proto.Iks.DeleteCluster:output_type -> google.protobuf.Empty
	20, // 96: proto.Iks.GetClusterStatus:output_type -> proto.ClusterStatus
	8,  // 97: proto.Iks.CreateNodeGroup:output_type -> proto.NodeGroupResponseForm
	9,  // 98: proto.Iks.GetNodeGroups:output_type -> proto.NodeGroupResponse
	8,  // 99: proto.Iks.GetNodeGroup:output_type -> proto.NodeGroupResponseForm
	21, // 100: proto.Iks.PutNodeGroup:output_type -> proto.Nodegroupstatus
	21, // 101: proto.Iks.UpgradeNodeGroup:output_type -> proto.Nodegroupstatus
	63, // 102: proto.Iks.DeleteNodeGroup:output_type -> google.protobuf.Empty
	21, // 103: proto.Iks.GetNodeGroupStatus:output_type -> proto.Nodegroupstatus
	21, // 104: proto.Iks.DeleteNodeGroupInstance:output_type -> proto.Nodegroupstatus
	36, // 105: proto.Iks.GetPublicK8sVersions:output_type -> proto.GetPublicAllK8sversionResponse
	38, // 106: proto.Iks.GetPublicRuntimes:output_type -> proto.GetPublicAllRuntimeResponse
	40, // 107: proto.Iks.GetPublicInstanceTypes:output_type -> proto.GetPublicAllInstancetypeResponse
	42, // 108: proto.Iks.GetKubeConfig:output_type -> proto.GetKubeconfigResponse
	42, // 109: proto.Iks.RetrieveKubeConfig:output_type -> proto.GetKubeconfigResponse
	45, // 110: proto.Iks.CreateNewVip:output_type -> proto.VipResponse
	49, // 111: proto.Iks.GetVips:output_type -> proto.GetVipsResponse
	47, // 112: proto.Iks.GetVip:output_type -> proto.GetVipResponse
	63, // 113: proto.Iks.DeleteVip:output_type -> google.protobuf.Empty
	54, // 114: proto.Iks.UpdateFirewallRule:output_type -> proto.FirewallRuleResponse
	56, // 115: proto.Iks.GetFirewallRule:output_type -> proto.GetFirewallRuleResponse
	63, // 116: proto.Iks.DeleteFirewallRule:output_type -> google.protobuf.Empty
	2,  // 117: proto.IksSuperCompute.SuperComputeCreateCluster:output_type -> proto.ClusterCreateResponseForm
	88, // [88:118] is the sub-list for method output_type
	58, // [58:88] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_iks_proto_init() }
func file_iks_proto_init() {
	if File_iks_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCreateResponseForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResponseForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroupResponseForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeGroupInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroupid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroupID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodegroupstatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodegroupSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicK8SversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicAllK8SversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicRuntimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicAllRuntimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicInstancetypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicAllInstancetypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeconfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeconfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IksCloudAccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Members); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WekaStorageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperComputeClusterCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodegroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iks_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_iks_proto_msgTypes[62].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_iks_proto_goTypes,
		DependencyIndexes: file_iks_proto_depIdxs,
		MessageInfos:      file_iks_proto_msgTypes,
	}.Build()
	File_iks_proto = out.File
	file_iks_proto_rawDesc = nil
	file_iks_proto_goTypes = nil
	file_iks_proto_depIdxs = nil
}
