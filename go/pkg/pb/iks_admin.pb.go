// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: iks_admin.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetClusterAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Account             string                  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Provider            string                  `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Region              string                  `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	K8Sversion          string                  `protobuf:"bytes,5,opt,name=k8sversion,proto3" json:"k8sversion,omitempty"`
	Certsexpiring       []*ClusterCerts         `protobuf:"bytes,6,rep,name=certsexpiring,proto3" json:"certsexpiring,omitempty"`
	Network             *NetworkAdmin           `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Nodegroups          []*Nodegroup            `protobuf:"bytes,8,rep,name=nodegroups,proto3" json:"nodegroups,omitempty"`
	Addons              []*AddOnAdmin           `protobuf:"bytes,9,rep,name=addons,proto3" json:"addons,omitempty"`
	Snapshot            []*Snapshot             `protobuf:"bytes,10,rep,name=snapshot,proto3" json:"snapshot,omitempty"`
	Backup              []*Backup               `protobuf:"bytes,11,rep,name=backup,proto3" json:"backup,omitempty"`
	K8Supgradeavailable bool                    `protobuf:"varint,12,opt,name=k8supgradeavailable,proto3" json:"k8supgradeavailable,omitempty"`
	K8Supgradeversions  []string                `protobuf:"bytes,13,rep,name=k8supgradeversions,proto3" json:"k8supgradeversions,omitempty"`
	Storageenabled      bool                    `protobuf:"varint,14,opt,name=storageenabled,proto3" json:"storageenabled,omitempty"`
	Storages            []*ClusterStorageStatus `protobuf:"bytes,15,rep,name=storages,proto3" json:"storages,omitempty"`
	Clustertype         string                  `protobuf:"bytes,16,opt,name=clustertype,proto3" json:"clustertype,omitempty"`
}

func (x *GetClusterAdmin) Reset() {
	*x = GetClusterAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterAdmin) ProtoMessage() {}

func (x *GetClusterAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterAdmin.ProtoReflect.Descriptor instead.
func (*GetClusterAdmin) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterAdmin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetClusterAdmin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetClusterAdmin) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetClusterAdmin) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetClusterAdmin) GetK8Sversion() string {
	if x != nil {
		return x.K8Sversion
	}
	return ""
}

func (x *GetClusterAdmin) GetCertsexpiring() []*ClusterCerts {
	if x != nil {
		return x.Certsexpiring
	}
	return nil
}

func (x *GetClusterAdmin) GetNetwork() *NetworkAdmin {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *GetClusterAdmin) GetNodegroups() []*Nodegroup {
	if x != nil {
		return x.Nodegroups
	}
	return nil
}

func (x *GetClusterAdmin) GetAddons() []*AddOnAdmin {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *GetClusterAdmin) GetSnapshot() []*Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *GetClusterAdmin) GetBackup() []*Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *GetClusterAdmin) GetK8Supgradeavailable() bool {
	if x != nil {
		return x.K8Supgradeavailable
	}
	return false
}

func (x *GetClusterAdmin) GetK8Supgradeversions() []string {
	if x != nil {
		return x.K8Supgradeversions
	}
	return nil
}

func (x *GetClusterAdmin) GetStorageenabled() bool {
	if x != nil {
		return x.Storageenabled
	}
	return false
}

func (x *GetClusterAdmin) GetStorages() []*ClusterStorageStatus {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *GetClusterAdmin) GetClustertype() string {
	if x != nil {
		return x.Clustertype
	}
	return ""
}

type GetClustersAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*ClustersResponseAdmin `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetClustersAdmin) Reset() {
	*x = GetClustersAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClustersAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClustersAdmin) ProtoMessage() {}

func (x *GetClustersAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClustersAdmin.ProtoReflect.Descriptor instead.
func (*GetClustersAdmin) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{1}
}

func (x *GetClustersAdmin) GetResponse() []*ClustersResponseAdmin {
	if x != nil {
		return x.Response
	}
	return nil
}

type ClustersResponseAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Account             string       `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Name                string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	State               string       `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	K8Sversion          string       `protobuf:"bytes,5,opt,name=k8sversion,proto3" json:"k8sversion,omitempty"`
	Provider            string       `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	Cpupgradeavailable  bool         `protobuf:"varint,7,opt,name=cpupgradeavailable,proto3" json:"cpupgradeavailable,omitempty"`
	Cpupgradeversions   []string     `protobuf:"bytes,8,rep,name=cpupgradeversions,proto3" json:"cpupgradeversions,omitempty"`
	K8Supgradeavailable bool         `protobuf:"varint,9,opt,name=k8supgradeavailable,proto3" json:"k8supgradeavailable,omitempty"`
	K8Supgradeversions  []string     `protobuf:"bytes,10,rep,name=k8supgradeversions,proto3" json:"k8supgradeversions,omitempty"`
	Createddate         string       `protobuf:"bytes,11,opt,name=createddate,proto3" json:"createddate,omitempty"`
	Clustertype         string       `protobuf:"bytes,12,opt,name=clustertype,proto3" json:"clustertype,omitempty"`
	Nodegroups          []*Nodegroup `protobuf:"bytes,13,rep,name=nodegroups,proto3" json:"nodegroups,omitempty"`
}

func (x *ClustersResponseAdmin) Reset() {
	*x = ClustersResponseAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClustersResponseAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersResponseAdmin) ProtoMessage() {}

func (x *ClustersResponseAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClustersResponseAdmin.ProtoReflect.Descriptor instead.
func (*ClustersResponseAdmin) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{2}
}

func (x *ClustersResponseAdmin) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClustersResponseAdmin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ClustersResponseAdmin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClustersResponseAdmin) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClustersResponseAdmin) GetK8Sversion() string {
	if x != nil {
		return x.K8Sversion
	}
	return ""
}

func (x *ClustersResponseAdmin) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ClustersResponseAdmin) GetCpupgradeavailable() bool {
	if x != nil {
		return x.Cpupgradeavailable
	}
	return false
}

func (x *ClustersResponseAdmin) GetCpupgradeversions() []string {
	if x != nil {
		return x.Cpupgradeversions
	}
	return nil
}

func (x *ClustersResponseAdmin) GetK8Supgradeavailable() bool {
	if x != nil {
		return x.K8Supgradeavailable
	}
	return false
}

func (x *ClustersResponseAdmin) GetK8Supgradeversions() []string {
	if x != nil {
		return x.K8Supgradeversions
	}
	return nil
}

func (x *ClustersResponseAdmin) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

func (x *ClustersResponseAdmin) GetClustertype() string {
	if x != nil {
		return x.Clustertype
	}
	return ""
}

func (x *ClustersResponseAdmin) GetNodegroups() []*Nodegroup {
	if x != nil {
		return x.Nodegroups
	}
	return nil
}

type ClusterCerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpname         string `protobuf:"bytes,1,opt,name=cpname,proto3" json:"cpname,omitempty"`
	Certexpirydate string `protobuf:"bytes,2,opt,name=certexpirydate,proto3" json:"certexpirydate,omitempty"`
}

func (x *ClusterCerts) Reset() {
	*x = ClusterCerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCerts) ProtoMessage() {}

func (x *ClusterCerts) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCerts.ProtoReflect.Descriptor instead.
func (*ClusterCerts) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterCerts) GetCpname() string {
	if x != nil {
		return x.Cpname
	}
	return ""
}

func (x *ClusterCerts) GetCertexpirydate() string {
	if x != nil {
		return x.Certexpirydate
	}
	return ""
}

type NetworkAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servicecidr  string          `protobuf:"bytes,1,opt,name=servicecidr,proto3" json:"servicecidr,omitempty"`
	Clustercidr  string          `protobuf:"bytes,2,opt,name=clustercidr,proto3" json:"clustercidr,omitempty"`
	Loadbalancer []*Loadbalancer `protobuf:"bytes,3,rep,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
}

func (x *NetworkAdmin) Reset() {
	*x = NetworkAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkAdmin) ProtoMessage() {}

func (x *NetworkAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkAdmin.ProtoReflect.Descriptor instead.
func (*NetworkAdmin) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkAdmin) GetServicecidr() string {
	if x != nil {
		return x.Servicecidr
	}
	return ""
}

func (x *NetworkAdmin) GetClustercidr() string {
	if x != nil {
		return x.Clustercidr
	}
	return ""
}

func (x *NetworkAdmin) GetLoadbalancer() []*Loadbalancer {
	if x != nil {
		return x.Loadbalancer
	}
	return nil
}

type Loadbalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lbname        string   `protobuf:"bytes,1,opt,name=lbname,proto3" json:"lbname,omitempty"`
	Vip           string   `protobuf:"bytes,2,opt,name=vip,proto3" json:"vip,omitempty"`
	Status        string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Backendports  []string `protobuf:"bytes,4,rep,name=backendports,proto3" json:"backendports,omitempty"`
	Frontendportd []string `protobuf:"bytes,5,rep,name=frontendportd,proto3" json:"frontendportd,omitempty"`
	Viptype       string   `protobuf:"bytes,6,opt,name=viptype,proto3" json:"viptype,omitempty"`
	Nodegrouptype string   `protobuf:"bytes,7,opt,name=nodegrouptype,proto3" json:"nodegrouptype,omitempty"`
	Createddate   string   `protobuf:"bytes,8,opt,name=createddate,proto3" json:"createddate,omitempty"`
}

func (x *Loadbalancer) Reset() {
	*x = Loadbalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loadbalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loadbalancer) ProtoMessage() {}

func (x *Loadbalancer) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loadbalancer.ProtoReflect.Descriptor instead.
func (*Loadbalancer) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{5}
}

func (x *Loadbalancer) GetLbname() string {
	if x != nil {
		return x.Lbname
	}
	return ""
}

func (x *Loadbalancer) GetVip() string {
	if x != nil {
		return x.Vip
	}
	return ""
}

func (x *Loadbalancer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Loadbalancer) GetBackendports() []string {
	if x != nil {
		return x.Backendports
	}
	return nil
}

func (x *Loadbalancer) GetFrontendportd() []string {
	if x != nil {
		return x.Frontendportd
	}
	return nil
}

func (x *Loadbalancer) GetViptype() string {
	if x != nil {
		return x.Viptype
	}
	return ""
}

func (x *Loadbalancer) GetNodegrouptype() string {
	if x != nil {
		return x.Nodegrouptype
	}
	return ""
}

func (x *Loadbalancer) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

type PostLoadbalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid string        `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Lb          *Loadbalancer `protobuf:"bytes,2,opt,name=lb,proto3" json:"lb,omitempty"`
}

func (x *PostLoadbalancerRequest) Reset() {
	*x = PostLoadbalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLoadbalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLoadbalancerRequest) ProtoMessage() {}

func (x *PostLoadbalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLoadbalancerRequest.ProtoReflect.Descriptor instead.
func (*PostLoadbalancerRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{6}
}

func (x *PostLoadbalancerRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *PostLoadbalancerRequest) GetLb() *Loadbalancer {
	if x != nil {
		return x.Lb
	}
	return nil
}

type LoadbalancerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lbid int32         `protobuf:"varint,1,opt,name=lbid,proto3" json:"lbid,omitempty"`
	Lb   *Loadbalancer `protobuf:"bytes,2,opt,name=lb,proto3" json:"lb,omitempty"`
}

func (x *LoadbalancerResponse) Reset() {
	*x = LoadbalancerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadbalancerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadbalancerResponse) ProtoMessage() {}

func (x *LoadbalancerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadbalancerResponse.ProtoReflect.Descriptor instead.
func (*LoadbalancerResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{7}
}

func (x *LoadbalancerResponse) GetLbid() int32 {
	if x != nil {
		return x.Lbid
	}
	return 0
}

func (x *LoadbalancerResponse) GetLb() *Loadbalancer {
	if x != nil {
		return x.Lb
	}
	return nil
}

type LoadBalancers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lbresponses []*LoadbalancerResponse `protobuf:"bytes,1,rep,name=lbresponses,proto3" json:"lbresponses,omitempty"`
}

func (x *LoadBalancers) Reset() {
	*x = LoadBalancers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancers) ProtoMessage() {}

func (x *LoadBalancers) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancers.ProtoReflect.Descriptor instead.
func (*LoadBalancers) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{8}
}

func (x *LoadBalancers) GetLbresponses() []*LoadbalancerResponse {
	if x != nil {
		return x.Lbresponses
	}
	return nil
}

type PutLoadbalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid string        `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Lbid        int32         `protobuf:"varint,2,opt,name=lbid,proto3" json:"lbid,omitempty"`
	Lb          *Loadbalancer `protobuf:"bytes,3,opt,name=lb,proto3" json:"lb,omitempty"`
}

func (x *PutLoadbalancerRequest) Reset() {
	*x = PutLoadbalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutLoadbalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutLoadbalancerRequest) ProtoMessage() {}

func (x *PutLoadbalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutLoadbalancerRequest.ProtoReflect.Descriptor instead.
func (*PutLoadbalancerRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{9}
}

func (x *PutLoadbalancerRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *PutLoadbalancerRequest) GetLbid() int32 {
	if x != nil {
		return x.Lbid
	}
	return 0
}

func (x *PutLoadbalancerRequest) GetLb() *Loadbalancer {
	if x != nil {
		return x.Lb
	}
	return nil
}

type GetLbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Lbid        int32  `protobuf:"varint,2,opt,name=lbid,proto3" json:"lbid,omitempty"`
}

func (x *GetLbRequest) Reset() {
	*x = GetLbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLbRequest) ProtoMessage() {}

func (x *GetLbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLbRequest.ProtoReflect.Descriptor instead.
func (*GetLbRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{10}
}

func (x *GetLbRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *GetLbRequest) GetLbid() int32 {
	if x != nil {
		return x.Lbid
	}
	return 0
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipaddress   string                  `protobuf:"bytes,2,opt,name=ipaddress,proto3" json:"ipaddress,omitempty"`
	Dnsname     string                  `protobuf:"bytes,3,opt,name=dnsname,proto3" json:"dnsname,omitempty"`
	Imi         string                  `protobuf:"bytes,4,opt,name=imi,proto3" json:"imi,omitempty"`
	State       string                  `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Status      string                  `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Createddate string                  `protobuf:"bytes,7,opt,name=createddate,proto3" json:"createddate,omitempty"`
	WekaStorage *WekaStorageStatusAdmin `protobuf:"bytes,8,opt,name=wekaStorage,proto3" json:"wekaStorage,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{11}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetIpaddress() string {
	if x != nil {
		return x.Ipaddress
	}
	return ""
}

func (x *Node) GetDnsname() string {
	if x != nil {
		return x.Dnsname
	}
	return ""
}

func (x *Node) GetImi() string {
	if x != nil {
		return x.Imi
	}
	return ""
}

func (x *Node) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Node) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Node) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

func (x *Node) GetWekaStorage() *WekaStorageStatusAdmin {
	if x != nil {
		return x.WekaStorage
	}
	return nil
}

type WekaStorageStatusAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Status       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CustomStatus string `protobuf:"bytes,3,opt,name=customStatus,proto3" json:"customStatus,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WekaStorageStatusAdmin) Reset() {
	*x = WekaStorageStatusAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WekaStorageStatusAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WekaStorageStatusAdmin) ProtoMessage() {}

func (x *WekaStorageStatusAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WekaStorageStatusAdmin.ProtoReflect.Descriptor instead.
func (*WekaStorageStatusAdmin) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{12}
}

func (x *WekaStorageStatusAdmin) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WekaStorageStatusAdmin) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WekaStorageStatusAdmin) GetCustomStatus() string {
	if x != nil {
		return x.CustomStatus
	}
	return ""
}

func (x *WekaStorageStatusAdmin) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Nodegroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Count               int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Releaseversion      string            `protobuf:"bytes,4,opt,name=releaseversion,proto3" json:"releaseversion,omitempty"`
	Status              string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Imiupgradeavailable bool              `protobuf:"varint,6,opt,name=imiupgradeavailable,proto3" json:"imiupgradeavailable,omitempty"`
	Imiupgradeversions  []string          `protobuf:"bytes,7,rep,name=imiupgradeversions,proto3" json:"imiupgradeversions,omitempty"`
	Nodes               []*Node           `protobuf:"bytes,8,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Imi                 string            `protobuf:"bytes,9,opt,name=imi,proto3" json:"imi,omitempty"`
	Instancetype        string            `protobuf:"bytes,10,opt,name=instancetype,proto3" json:"instancetype,omitempty"`
	Sshkey              []*SshKey         `protobuf:"bytes,11,rep,name=sshkey,proto3" json:"sshkey,omitempty"`
	Nodegroupsummary    *NodegroupSummary `protobuf:"bytes,12,opt,name=nodegroupsummary,proto3,oneof" json:"nodegroupsummary,omitempty"`
	Nodegrouptype       string            `protobuf:"bytes,13,opt,name=nodegrouptype,proto3" json:"nodegrouptype,omitempty"`
	Nodegrouptypename   string            `protobuf:"bytes,14,opt,name=nodegrouptypename,proto3" json:"nodegrouptypename,omitempty"`
	Nodgroupuuid        string            `protobuf:"bytes,15,opt,name=nodgroupuuid,proto3" json:"nodgroupuuid,omitempty"`
}

func (x *Nodegroup) Reset() {
	*x = Nodegroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodegroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodegroup) ProtoMessage() {}

func (x *Nodegroup) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodegroup.ProtoReflect.Descriptor instead.
func (*Nodegroup) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{13}
}

func (x *Nodegroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Nodegroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Nodegroup) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Nodegroup) GetReleaseversion() string {
	if x != nil {
		return x.Releaseversion
	}
	return ""
}

func (x *Nodegroup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Nodegroup) GetImiupgradeavailable() bool {
	if x != nil {
		return x.Imiupgradeavailable
	}
	return false
}

func (x *Nodegroup) GetImiupgradeversions() []string {
	if x != nil {
		return x.Imiupgradeversions
	}
	return nil
}

func (x *Nodegroup) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Nodegroup) GetImi() string {
	if x != nil {
		return x.Imi
	}
	return ""
}

func (x *Nodegroup) GetInstancetype() string {
	if x != nil {
		return x.Instancetype
	}
	return ""
}

func (x *Nodegroup) GetSshkey() []*SshKey {
	if x != nil {
		return x.Sshkey
	}
	return nil
}

func (x *Nodegroup) GetNodegroupsummary() *NodegroupSummary {
	if x != nil {
		return x.Nodegroupsummary
	}
	return nil
}

func (x *Nodegroup) GetNodegrouptype() string {
	if x != nil {
		return x.Nodegrouptype
	}
	return ""
}

func (x *Nodegroup) GetNodegrouptypename() string {
	if x != nil {
		return x.Nodegrouptypename
	}
	return ""
}

func (x *Nodegroup) GetNodgroupuuid() string {
	if x != nil {
		return x.Nodgroupuuid
	}
	return ""
}

type AddOnAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	State    string          `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Args     []*Keyvaluepair `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Tags     []*Keyvaluepair `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Artifact string          `protobuf:"bytes,6,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *AddOnAdmin) Reset() {
	*x = AddOnAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnAdmin) ProtoMessage() {}

func (x *AddOnAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnAdmin.ProtoReflect.Descriptor instead.
func (*AddOnAdmin) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{14}
}

func (x *AddOnAdmin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOnAdmin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AddOnAdmin) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AddOnAdmin) GetArgs() []*Keyvaluepair {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AddOnAdmin) GetTags() []*Keyvaluepair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddOnAdmin) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Created  string `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Filename string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{15}
}

func (x *Snapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Snapshot) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Snapshot) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Snapshot) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Folder   string `protobuf:"bytes,3,opt,name=folder,proto3" json:"folder,omitempty"`
	Region   string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Endpoint string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *Backup) Reset() {
	*x = Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{16}
}

func (x *Backup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Backup) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Backup) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *Backup) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Backup) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type AdminClusterID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
}

func (x *AdminClusterID) Reset() {
	*x = AdminClusterID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminClusterID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminClusterID) ProtoMessage() {}

func (x *AdminClusterID) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminClusterID.ProtoReflect.Descriptor instead.
func (*AdminClusterID) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{17}
}

func (x *AdminClusterID) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

// IMI Request
type IMIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Upstreamreleasename string       `protobuf:"bytes,2,opt,name=upstreamreleasename,proto3" json:"upstreamreleasename,omitempty"`
	Provider            string       `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Type                string       `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Runtime             string       `protobuf:"bytes,5,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Os                  string       `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	Components          []*Component `protobuf:"bytes,7,rep,name=components,proto3" json:"components,omitempty"`
	Bootstraprepo       string       `protobuf:"bytes,8,opt,name=bootstraprepo,proto3" json:"bootstraprepo,omitempty"`
	State               string       `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	Artifact            string       `protobuf:"bytes,10,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Category            string       `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	Family              string       `protobuf:"bytes,12,opt,name=family,proto3" json:"family,omitempty"`
	Iksadminkey         string       `protobuf:"bytes,13,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *IMIRequest) Reset() {
	*x = IMIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMIRequest) ProtoMessage() {}

func (x *IMIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMIRequest.ProtoReflect.Descriptor instead.
func (*IMIRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{18}
}

func (x *IMIRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IMIRequest) GetUpstreamreleasename() string {
	if x != nil {
		return x.Upstreamreleasename
	}
	return ""
}

func (x *IMIRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *IMIRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IMIRequest) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *IMIRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *IMIRequest) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *IMIRequest) GetBootstraprepo() string {
	if x != nil {
		return x.Bootstraprepo
	}
	return ""
}

func (x *IMIRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *IMIRequest) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *IMIRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *IMIRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *IMIRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

// Component type
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Artifact string `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{19}
}

func (x *Component) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Component) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Component) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

// IMI Response
type IMIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                   string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Upstreamreleasename                    string                  `protobuf:"bytes,2,opt,name=upstreamreleasename,proto3" json:"upstreamreleasename,omitempty"`
	Provider                               string                  `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Type                                   string                  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Runtime                                string                  `protobuf:"bytes,5,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Os                                     string                  `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	State                                  string                  `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Components                             []*Component            `protobuf:"bytes,8,rep,name=components,proto3" json:"components,omitempty"`
	Bootstraprepo                          string                  `protobuf:"bytes,9,opt,name=bootstraprepo,proto3" json:"bootstraprepo,omitempty"`
	Artifact                               string                  `protobuf:"bytes,10,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Category                               string                  `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	Family                                 string                  `protobuf:"bytes,12,opt,name=family,proto3" json:"family,omitempty"`
	Iscompatabilityactiveimi               bool                    `protobuf:"varint,13,opt,name=iscompatabilityactiveimi,proto3" json:"iscompatabilityactiveimi,omitempty"`
	InstanceTypeResponse                   []*InstanceTypeResponse `protobuf:"bytes,14,rep,name=instanceTypeResponse,proto3" json:"instanceTypeResponse,omitempty"`
	Instacetypeimik8Scompatibilityresponse []*InstanceTypeResponse `protobuf:"bytes,15,rep,name=instacetypeimik8scompatibilityresponse,proto3" json:"instacetypeimik8scompatibilityresponse,omitempty"`
	Cposimageinstances                     []string                `protobuf:"bytes,16,rep,name=cposimageinstances,proto3" json:"cposimageinstances,omitempty"`
	Isk8SActive                            bool                    `protobuf:"varint,17,opt,name=isk8sActive,proto3" json:"isk8sActive,omitempty"`
}

func (x *IMIResponse) Reset() {
	*x = IMIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMIResponse) ProtoMessage() {}

func (x *IMIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMIResponse.ProtoReflect.Descriptor instead.
func (*IMIResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{20}
}

func (x *IMIResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IMIResponse) GetUpstreamreleasename() string {
	if x != nil {
		return x.Upstreamreleasename
	}
	return ""
}

func (x *IMIResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *IMIResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IMIResponse) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *IMIResponse) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *IMIResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *IMIResponse) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *IMIResponse) GetBootstraprepo() string {
	if x != nil {
		return x.Bootstraprepo
	}
	return ""
}

func (x *IMIResponse) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *IMIResponse) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *IMIResponse) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *IMIResponse) GetIscompatabilityactiveimi() bool {
	if x != nil {
		return x.Iscompatabilityactiveimi
	}
	return false
}

func (x *IMIResponse) GetInstanceTypeResponse() []*InstanceTypeResponse {
	if x != nil {
		return x.InstanceTypeResponse
	}
	return nil
}

func (x *IMIResponse) GetInstacetypeimik8Scompatibilityresponse() []*InstanceTypeResponse {
	if x != nil {
		return x.Instacetypeimik8Scompatibilityresponse
	}
	return nil
}

func (x *IMIResponse) GetCposimageinstances() []string {
	if x != nil {
		return x.Cposimageinstances
	}
	return nil
}

func (x *IMIResponse) GetIsk8SActive() bool {
	if x != nil {
		return x.Isk8SActive
	}
	return false
}

type GetIMIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imiresponse []*IMIResponse `protobuf:"bytes,1,rep,name=imiresponse,proto3" json:"imiresponse,omitempty"`
}

func (x *GetIMIResponse) Reset() {
	*x = GetIMIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIMIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIMIResponse) ProtoMessage() {}

func (x *GetIMIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIMIResponse.ProtoReflect.Descriptor instead.
func (*GetIMIResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{21}
}

func (x *GetIMIResponse) GetImiresponse() []*IMIResponse {
	if x != nil {
		return x.Imiresponse
	}
	return nil
}

type Runtimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtime string `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
}

func (x *Runtimes) Reset() {
	*x = Runtimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runtimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtimes) ProtoMessage() {}

func (x *Runtimes) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtimes.ProtoReflect.Descriptor instead.
func (*Runtimes) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{22}
}

func (x *Runtimes) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

type OSImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osimage string `protobuf:"bytes,1,opt,name=osimage,proto3" json:"osimage,omitempty"`
}

func (x *OSImages) Reset() {
	*x = OSImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSImages) ProtoMessage() {}

func (x *OSImages) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSImages.ProtoReflect.Descriptor instead.
func (*OSImages) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{23}
}

func (x *OSImages) GetOsimage() string {
	if x != nil {
		return x.Osimage
	}
	return ""
}

type Providers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *Providers) Reset() {
	*x = Providers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Providers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Providers) ProtoMessage() {}

func (x *Providers) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Providers.ProtoReflect.Descriptor instead.
func (*Providers) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{24}
}

func (x *Providers) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type States struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *States) Reset() {
	*x = States{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *States) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*States) ProtoMessage() {}

func (x *States) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use States.ProtoReflect.Descriptor instead.
func (*States) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{25}
}

func (x *States) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type GetIMIsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtime  []*Runtimes  `protobuf:"bytes,1,rep,name=runtime,proto3" json:"runtime,omitempty"`
	Osimage  []*OSImages  `protobuf:"bytes,2,rep,name=osimage,proto3" json:"osimage,omitempty"`
	Provider []*Providers `protobuf:"bytes,3,rep,name=provider,proto3" json:"provider,omitempty"`
	State    []*States    `protobuf:"bytes,4,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *GetIMIsInfoResponse) Reset() {
	*x = GetIMIsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIMIsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIMIsInfoResponse) ProtoMessage() {}

func (x *GetIMIsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIMIsInfoResponse.ProtoReflect.Descriptor instead.
func (*GetIMIsInfoResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{26}
}

func (x *GetIMIsInfoResponse) GetRuntime() []*Runtimes {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *GetIMIsInfoResponse) GetOsimage() []*OSImages {
	if x != nil {
		return x.Osimage
	}
	return nil
}

func (x *GetIMIsInfoResponse) GetProvider() []*Providers {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *GetIMIsInfoResponse) GetState() []*States {
	if x != nil {
		return x.State
	}
	return nil
}

type UpdateIMIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Upstreamreleasename string       `protobuf:"bytes,2,opt,name=upstreamreleasename,proto3" json:"upstreamreleasename,omitempty"`
	Provider            string       `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Type                string       `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Runtime             string       `protobuf:"bytes,5,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Os                  string       `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	Components          []*Component `protobuf:"bytes,7,rep,name=components,proto3" json:"components,omitempty"`
	Bootstraprepo       string       `protobuf:"bytes,8,opt,name=bootstraprepo,proto3" json:"bootstraprepo,omitempty"`
	State               string       `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	Artifact            string       `protobuf:"bytes,10,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Category            string       `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	Family              string       `protobuf:"bytes,12,opt,name=family,proto3" json:"family,omitempty"`
	Iksadminkey         string       `protobuf:"bytes,13,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *UpdateIMIRequest) Reset() {
	*x = UpdateIMIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIMIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIMIRequest) ProtoMessage() {}

func (x *UpdateIMIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIMIRequest.ProtoReflect.Descriptor instead.
func (*UpdateIMIRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateIMIRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIMIRequest) GetUpstreamreleasename() string {
	if x != nil {
		return x.Upstreamreleasename
	}
	return ""
}

func (x *UpdateIMIRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateIMIRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateIMIRequest) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *UpdateIMIRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *UpdateIMIRequest) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *UpdateIMIRequest) GetBootstraprepo() string {
	if x != nil {
		return x.Bootstraprepo
	}
	return ""
}

func (x *UpdateIMIRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateIMIRequest) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *UpdateIMIRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpdateIMIRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *UpdateIMIRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type GetIMIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIMIRequest) Reset() {
	*x = GetIMIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIMIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIMIRequest) ProtoMessage() {}

func (x *GetIMIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIMIRequest.ProtoReflect.Descriptor instead.
func (*GetIMIRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{28}
}

func (x *GetIMIRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteIMIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Iksadminkey string `protobuf:"bytes,2,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *DeleteIMIRequest) Reset() {
	*x = DeleteIMIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIMIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIMIRequest) ProtoMessage() {}

func (x *DeleteIMIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIMIRequest.ProtoReflect.Descriptor instead.
func (*DeleteIMIRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteIMIRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteIMIRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type IMIInstanceTypeK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Runtime             string   `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Upstreamreleasename string   `protobuf:"bytes,3,opt,name=upstreamreleasename,proto3" json:"upstreamreleasename,omitempty"`
	Os                  string   `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Type                string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Provider            string   `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	Instancetypes       []string `protobuf:"bytes,7,rep,name=instancetypes,proto3" json:"instancetypes,omitempty"`
	State               string   `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Category            string   `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	Family              string   `protobuf:"bytes,10,opt,name=family,proto3" json:"family,omitempty"`
	Iksadminkey         string   `protobuf:"bytes,11,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *IMIInstanceTypeK8SRequest) Reset() {
	*x = IMIInstanceTypeK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMIInstanceTypeK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMIInstanceTypeK8SRequest) ProtoMessage() {}

func (x *IMIInstanceTypeK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMIInstanceTypeK8SRequest.ProtoReflect.Descriptor instead.
func (*IMIInstanceTypeK8SRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{30}
}

func (x *IMIInstanceTypeK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetUpstreamreleasename() string {
	if x != nil {
		return x.Upstreamreleasename
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetInstancetypes() []string {
	if x != nil {
		return x.Instancetypes
	}
	return nil
}

func (x *IMIInstanceTypeK8SRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *IMIInstanceTypeK8SRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type IMIInstanceTypeK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osimageinstance     string `protobuf:"bytes,1,opt,name=osimageinstance,proto3" json:"osimageinstance,omitempty"`
	Runtime             string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Upstreamreleasename string `protobuf:"bytes,3,opt,name=upstreamreleasename,proto3" json:"upstreamreleasename,omitempty"`
	Os                  string `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Type                string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Provider            string `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	State               string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *IMIInstanceTypeK8SResponse) Reset() {
	*x = IMIInstanceTypeK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMIInstanceTypeK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMIInstanceTypeK8SResponse) ProtoMessage() {}

func (x *IMIInstanceTypeK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMIInstanceTypeK8SResponse.ProtoReflect.Descriptor instead.
func (*IMIInstanceTypeK8SResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{31}
}

func (x *IMIInstanceTypeK8SResponse) GetOsimageinstance() string {
	if x != nil {
		return x.Osimageinstance
	}
	return ""
}

func (x *IMIInstanceTypeK8SResponse) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *IMIInstanceTypeK8SResponse) GetUpstreamreleasename() string {
	if x != nil {
		return x.Upstreamreleasename
	}
	return ""
}

func (x *IMIInstanceTypeK8SResponse) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *IMIInstanceTypeK8SResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IMIInstanceTypeK8SResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *IMIInstanceTypeK8SResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type InstanceTypeIMIK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                   string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nodeprovidername                       string                            `protobuf:"bytes,2,opt,name=nodeprovidername,proto3" json:"nodeprovidername,omitempty"`
	Category                               string                            `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Family                                 string                            `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	Instacetypeimik8Scompatibilityresponse []*InstacetypeIMIK8SCompatibility `protobuf:"bytes,5,rep,name=instacetypeimik8scompatibilityresponse,proto3" json:"instacetypeimik8scompatibilityresponse,omitempty"`
	Iksadminkey                            string                            `protobuf:"bytes,6,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *InstanceTypeIMIK8SRequest) Reset() {
	*x = InstanceTypeIMIK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeIMIK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeIMIK8SRequest) ProtoMessage() {}

func (x *InstanceTypeIMIK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeIMIK8SRequest.ProtoReflect.Descriptor instead.
func (*InstanceTypeIMIK8SRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{32}
}

func (x *InstanceTypeIMIK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceTypeIMIK8SRequest) GetNodeprovidername() string {
	if x != nil {
		return x.Nodeprovidername
	}
	return ""
}

func (x *InstanceTypeIMIK8SRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *InstanceTypeIMIK8SRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *InstanceTypeIMIK8SRequest) GetInstacetypeimik8Scompatibilityresponse() []*InstacetypeIMIK8SCompatibility {
	if x != nil {
		return x.Instacetypeimik8Scompatibilityresponse
	}
	return nil
}

func (x *InstanceTypeIMIK8SRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type InstanceTypeIMIK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nodeprovidername string `protobuf:"bytes,2,opt,name=nodeprovidername,proto3" json:"nodeprovidername,omitempty"`
	Category         string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Family           string `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *InstanceTypeIMIK8SResponse) Reset() {
	*x = InstanceTypeIMIK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeIMIK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeIMIK8SResponse) ProtoMessage() {}

func (x *InstanceTypeIMIK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeIMIK8SResponse.ProtoReflect.Descriptor instead.
func (*InstanceTypeIMIK8SResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{33}
}

func (x *InstanceTypeIMIK8SResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceTypeIMIK8SResponse) GetNodeprovidername() string {
	if x != nil {
		return x.Nodeprovidername
	}
	return ""
}

func (x *InstanceTypeIMIK8SResponse) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *InstanceTypeIMIK8SResponse) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

type InstacetypeIMIK8SCompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact            string `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Category            string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Family              string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Name                string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Cposimageinstances  string `protobuf:"bytes,5,opt,name=cposimageinstances,proto3" json:"cposimageinstances,omitempty"`
	Upstreamreleasename string `protobuf:"bytes,6,opt,name=upstreamreleasename,proto3" json:"upstreamreleasename,omitempty"`
	Runtime             string `protobuf:"bytes,7,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Provider            string `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	Type                string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Os                  string `protobuf:"bytes,10,opt,name=os,proto3" json:"os,omitempty"`
}

func (x *InstacetypeIMIK8SCompatibility) Reset() {
	*x = InstacetypeIMIK8SCompatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstacetypeIMIK8SCompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstacetypeIMIK8SCompatibility) ProtoMessage() {}

func (x *InstacetypeIMIK8SCompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstacetypeIMIK8SCompatibility.ProtoReflect.Descriptor instead.
func (*InstacetypeIMIK8SCompatibility) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{34}
}

func (x *InstacetypeIMIK8SCompatibility) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetCposimageinstances() string {
	if x != nil {
		return x.Cposimageinstances
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetUpstreamreleasename() string {
	if x != nil {
		return x.Upstreamreleasename
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InstacetypeIMIK8SCompatibility) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

type Createk8SversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Runtime  string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Cpimi    string `protobuf:"bytes,4,opt,name=cpimi,proto3" json:"cpimi,omitempty"`
	Workimi  string `protobuf:"bytes,5,opt,name=workimi,proto3" json:"workimi,omitempty"`
}

func (x *Createk8SversionRequest) Reset() {
	*x = Createk8SversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Createk8SversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Createk8SversionRequest) ProtoMessage() {}

func (x *Createk8SversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Createk8SversionRequest.ProtoReflect.Descriptor instead.
func (*Createk8SversionRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{35}
}

func (x *Createk8SversionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Createk8SversionRequest) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Createk8SversionRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Createk8SversionRequest) GetCpimi() string {
	if x != nil {
		return x.Cpimi
	}
	return ""
}

func (x *Createk8SversionRequest) GetWorkimi() string {
	if x != nil {
		return x.Workimi
	}
	return ""
}

type K8SversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Runtime     string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Releasename string `protobuf:"bytes,3,opt,name=releasename,proto3" json:"releasename,omitempty"`
	Provider    string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Cpimi       string `protobuf:"bytes,5,opt,name=cpimi,proto3" json:"cpimi,omitempty"`
	Workimi     string `protobuf:"bytes,6,opt,name=workimi,proto3" json:"workimi,omitempty"`
	State       string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Minor       string `protobuf:"bytes,8,opt,name=minor,proto3" json:"minor,omitempty"`
	Major       string `protobuf:"bytes,9,opt,name=major,proto3" json:"major,omitempty"`
}

func (x *K8SversionResponse) Reset() {
	*x = K8SversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SversionResponse) ProtoMessage() {}

func (x *K8SversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SversionResponse.ProtoReflect.Descriptor instead.
func (*K8SversionResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{36}
}

func (x *K8SversionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *K8SversionResponse) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *K8SversionResponse) GetReleasename() string {
	if x != nil {
		return x.Releasename
	}
	return ""
}

func (x *K8SversionResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *K8SversionResponse) GetCpimi() string {
	if x != nil {
		return x.Cpimi
	}
	return ""
}

func (x *K8SversionResponse) GetWorkimi() string {
	if x != nil {
		return x.Workimi
	}
	return ""
}

func (x *K8SversionResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *K8SversionResponse) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

func (x *K8SversionResponse) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

type GetK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetK8SRequest) Reset() {
	*x = GetK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SRequest) ProtoMessage() {}

func (x *GetK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SRequest.ProtoReflect.Descriptor instead.
func (*GetK8SRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{37}
}

func (x *GetK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetK8SVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8Sversions []*K8SversionResponse `protobuf:"bytes,1,rep,name=k8sversions,proto3" json:"k8sversions,omitempty"`
}

func (x *GetK8SVersionResponse) Reset() {
	*x = GetK8SVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SVersionResponse) ProtoMessage() {}

func (x *GetK8SVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SVersionResponse.ProtoReflect.Descriptor instead.
func (*GetK8SVersionResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{38}
}

func (x *GetK8SVersionResponse) GetK8Sversions() []*K8SversionResponse {
	if x != nil {
		return x.K8Sversions
	}
	return nil
}

type UpdateK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cpimi   string `protobuf:"bytes,2,opt,name=cpimi,proto3" json:"cpimi,omitempty"`
	Workimi string `protobuf:"bytes,3,opt,name=workimi,proto3" json:"workimi,omitempty"`
	State   string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UpdateK8SRequest) Reset() {
	*x = UpdateK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SRequest) ProtoMessage() {}

func (x *UpdateK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SRequest.ProtoReflect.Descriptor instead.
func (*UpdateK8SRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateK8SRequest) GetCpimi() string {
	if x != nil {
		return x.Cpimi
	}
	return ""
}

func (x *UpdateK8SRequest) GetWorkimi() string {
	if x != nil {
		return x.Workimi
	}
	return ""
}

func (x *UpdateK8SRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type CreateAddonAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version          string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	K8Sversion       string          `protobuf:"bytes,3,opt,name=k8sversion,proto3" json:"k8sversion,omitempty"`
	Artifacts        []string        `protobuf:"bytes,4,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	Args             []*Keyvaluepair `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Tags             []*Keyvaluepair `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Adminonly        bool            `protobuf:"varint,7,opt,name=adminonly,proto3" json:"adminonly,omitempty"`
	State            string          `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Type             string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Upgradeavailable bool            `protobuf:"varint,10,opt,name=upgradeavailable,proto3" json:"upgradeavailable,omitempty"`
	Upgradeversions  []string        `protobuf:"bytes,11,rep,name=upgradeversions,proto3" json:"upgradeversions,omitempty"`
}

func (x *CreateAddonAdminRequest) Reset() {
	*x = CreateAddonAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddonAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddonAdminRequest) ProtoMessage() {}

func (x *CreateAddonAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddonAdminRequest.ProtoReflect.Descriptor instead.
func (*CreateAddonAdminRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{40}
}

func (x *CreateAddonAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAddonAdminRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateAddonAdminRequest) GetK8Sversion() string {
	if x != nil {
		return x.K8Sversion
	}
	return ""
}

func (x *CreateAddonAdminRequest) GetArtifacts() []string {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *CreateAddonAdminRequest) GetArgs() []*Keyvaluepair {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CreateAddonAdminRequest) GetTags() []*Keyvaluepair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateAddonAdminRequest) GetAdminonly() bool {
	if x != nil {
		return x.Adminonly
	}
	return false
}

func (x *CreateAddonAdminRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CreateAddonAdminRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateAddonAdminRequest) GetUpgradeavailable() bool {
	if x != nil {
		return x.Upgradeavailable
	}
	return false
}

func (x *CreateAddonAdminRequest) GetUpgradeversions() []string {
	if x != nil {
		return x.Upgradeversions
	}
	return nil
}

type Keyvaluepair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Keyvaluepair) Reset() {
	*x = Keyvaluepair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyvaluepair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyvaluepair) ProtoMessage() {}

func (x *Keyvaluepair) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyvaluepair.ProtoReflect.Descriptor instead.
func (*Keyvaluepair) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{41}
}

func (x *Keyvaluepair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Keyvaluepair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version          string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	K8Sversion       string          `protobuf:"bytes,3,opt,name=k8sversion,proto3" json:"k8sversion,omitempty"`
	Artifacts        []string        `protobuf:"bytes,4,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	Args             []*Keyvaluepair `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Tags             []*Keyvaluepair `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	State            string          `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Adminonly        bool            `protobuf:"varint,8,opt,name=adminonly,proto3" json:"adminonly,omitempty"`
	Type             string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Upgradeavailable bool            `protobuf:"varint,10,opt,name=upgradeavailable,proto3" json:"upgradeavailable,omitempty"`
}

func (x *AddonResponse) Reset() {
	*x = AddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonResponse) ProtoMessage() {}

func (x *AddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonResponse.ProtoReflect.Descriptor instead.
func (*AddonResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{42}
}

func (x *AddonResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddonResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AddonResponse) GetK8Sversion() string {
	if x != nil {
		return x.K8Sversion
	}
	return ""
}

func (x *AddonResponse) GetArtifacts() []string {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *AddonResponse) GetArgs() []*Keyvaluepair {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AddonResponse) GetTags() []*Keyvaluepair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddonResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AddonResponse) GetAdminonly() bool {
	if x != nil {
		return x.Adminonly
	}
	return false
}

func (x *AddonResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddonResponse) GetUpgradeavailable() bool {
	if x != nil {
		return x.Upgradeavailable
	}
	return false
}

type GetAddOnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addonresponse []*AddonResponse `protobuf:"bytes,1,rep,name=addonresponse,proto3" json:"addonresponse,omitempty"`
}

func (x *GetAddOnResponse) Reset() {
	*x = GetAddOnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddOnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddOnResponse) ProtoMessage() {}

func (x *GetAddOnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddOnResponse.ProtoReflect.Descriptor instead.
func (*GetAddOnResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{43}
}

func (x *GetAddOnResponse) GetAddonresponse() []*AddonResponse {
	if x != nil {
		return x.Addonresponse
	}
	return nil
}

type GetAddOnAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAddOnAdminRequest) Reset() {
	*x = GetAddOnAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddOnAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddOnAdminRequest) ProtoMessage() {}

func (x *GetAddOnAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddOnAdminRequest.ProtoReflect.Descriptor instead.
func (*GetAddOnAdminRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{44}
}

func (x *GetAddOnAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateAddOnAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version    string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	K8Sversion string          `protobuf:"bytes,3,opt,name=k8sversion,proto3" json:"k8sversion,omitempty"`
	Artifact   string          `protobuf:"bytes,4,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Args       []*Keyvaluepair `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Tags       []*Keyvaluepair `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Adminonly  bool            `protobuf:"varint,7,opt,name=adminonly,proto3" json:"adminonly,omitempty"`
	State      string          `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Type       string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *UpdateAddOnAdminRequest) Reset() {
	*x = UpdateAddOnAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddOnAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddOnAdminRequest) ProtoMessage() {}

func (x *UpdateAddOnAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddOnAdminRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddOnAdminRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateAddOnAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAddOnAdminRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateAddOnAdminRequest) GetK8Sversion() string {
	if x != nil {
		return x.K8Sversion
	}
	return ""
}

func (x *UpdateAddOnAdminRequest) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *UpdateAddOnAdminRequest) GetArgs() []*Keyvaluepair {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *UpdateAddOnAdminRequest) GetTags() []*Keyvaluepair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateAddOnAdminRequest) GetAdminonly() bool {
	if x != nil {
		return x.Adminonly
	}
	return false
}

func (x *UpdateAddOnAdminRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateAddOnAdminRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PutNodegroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodegroupuuid  string `protobuf:"bytes,2,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Count          int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Releaseversion string `protobuf:"bytes,5,opt,name=releaseversion,proto3" json:"releaseversion,omitempty"`
	Status         string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PutNodegroupRequest) Reset() {
	*x = PutNodegroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNodegroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNodegroupRequest) ProtoMessage() {}

func (x *PutNodegroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNodegroupRequest.ProtoReflect.Descriptor instead.
func (*PutNodegroupRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{46}
}

func (x *PutNodegroupRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *PutNodegroupRequest) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *PutNodegroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutNodegroupRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PutNodegroupRequest) GetReleaseversion() string {
	if x != nil {
		return x.Releaseversion
	}
	return ""
}

func (x *PutNodegroupRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// NodeGroupid
type UpgradeControlPlaneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid    string  `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Nodegroupuuid  string  `protobuf:"bytes,2,opt,name=nodegroupuuid,proto3" json:"nodegroupuuid,omitempty"`
	K8Sversionname *string `protobuf:"bytes,3,opt,name=k8sversionname,proto3,oneof" json:"k8sversionname,omitempty"`
}

func (x *UpgradeControlPlaneRequest) Reset() {
	*x = UpgradeControlPlaneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeControlPlaneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeControlPlaneRequest) ProtoMessage() {}

func (x *UpgradeControlPlaneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeControlPlaneRequest.ProtoReflect.Descriptor instead.
func (*UpgradeControlPlaneRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{47}
}

func (x *UpgradeControlPlaneRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *UpgradeControlPlaneRequest) GetNodegroupuuid() string {
	if x != nil {
		return x.Nodegroupuuid
	}
	return ""
}

func (x *UpgradeControlPlaneRequest) GetK8Sversionname() string {
	if x != nil && x.K8Sversionname != nil {
		return *x.K8Sversionname
	}
	return ""
}

type GetNodegroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodegroups []*Nodegroup `protobuf:"bytes,1,rep,name=nodegroups,proto3" json:"nodegroups,omitempty"`
}

func (x *GetNodegroupResponse) Reset() {
	*x = GetNodegroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodegroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodegroupResponse) ProtoMessage() {}

func (x *GetNodegroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodegroupResponse.ProtoReflect.Descriptor instead.
func (*GetNodegroupResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{48}
}

func (x *GetNodegroupResponse) GetNodegroups() []*Nodegroup {
	if x != nil {
		return x.Nodegroups
	}
	return nil
}

type GetEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Details     string `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Createdby   string `protobuf:"bytes,5,opt,name=createdby,proto3" json:"createdby,omitempty"`
	Createddate string `protobuf:"bytes,6,opt,name=createddate,proto3" json:"createddate,omitempty"`
}

func (x *GetEventResponse) Reset() {
	*x = GetEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventResponse) ProtoMessage() {}

func (x *GetEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventResponse.ProtoReflect.Descriptor instead.
func (*GetEventResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{49}
}

func (x *GetEventResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetEventResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetEventResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetEventResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *GetEventResponse) GetCreatedby() string {
	if x != nil {
		return x.Createdby
	}
	return ""
}

func (x *GetEventResponse) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

type PostSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PostSnapshotRequest) Reset() {
	*x = PostSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSnapshotRequest) ProtoMessage() {}

func (x *PostSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSnapshotRequest.ProtoReflect.Descriptor instead.
func (*PostSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{50}
}

func (x *PostSnapshotRequest) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *PostSnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PostSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusteruuid string `protobuf:"bytes,1,opt,name=clusteruuid,proto3" json:"clusteruuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PostSnapshotResponse) Reset() {
	*x = PostSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSnapshotResponse) ProtoMessage() {}

func (x *PostSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSnapshotResponse.ProtoReflect.Descriptor instead.
func (*PostSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{51}
}

func (x *PostSnapshotResponse) GetClusteruuid() string {
	if x != nil {
		return x.Clusteruuid
	}
	return ""
}

func (x *PostSnapshotResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostSnapshotResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ClusterSSHKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusterid     int32  `protobuf:"varint,1,opt,name=clusterid,proto3" json:"clusterid,omitempty"`
	Sshprivatekey string `protobuf:"bytes,2,opt,name=sshprivatekey,proto3" json:"sshprivatekey,omitempty"`
	Sshpublickey  string `protobuf:"bytes,3,opt,name=sshpublickey,proto3" json:"sshpublickey,omitempty"`
}

func (x *ClusterSSHKeys) Reset() {
	*x = ClusterSSHKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSSHKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSSHKeys) ProtoMessage() {}

func (x *ClusterSSHKeys) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSSHKeys.ProtoReflect.Descriptor instead.
func (*ClusterSSHKeys) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{52}
}

func (x *ClusterSSHKeys) GetClusterid() int32 {
	if x != nil {
		return x.Clusterid
	}
	return 0
}

func (x *ClusterSSHKeys) GetSshprivatekey() string {
	if x != nil {
		return x.Sshprivatekey
	}
	return ""
}

func (x *ClusterSSHKeys) GetSshpublickey() string {
	if x != nil {
		return x.Sshpublickey
	}
	return ""
}

type CloudAccountApproveListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApproveListResponse    []*CloudAccountApproveList `protobuf:"bytes,1,rep,name=approveListResponse,proto3" json:"approveListResponse,omitempty"`
	Existingresourcelimits *ResourceLimits            `protobuf:"bytes,2,opt,name=existingresourcelimits,proto3" json:"existingresourcelimits,omitempty"`
}

func (x *CloudAccountApproveListResponse) Reset() {
	*x = CloudAccountApproveListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountApproveListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountApproveListResponse) ProtoMessage() {}

func (x *CloudAccountApproveListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountApproveListResponse.ProtoReflect.Descriptor instead.
func (*CloudAccountApproveListResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{53}
}

func (x *CloudAccountApproveListResponse) GetApproveListResponse() []*CloudAccountApproveList {
	if x != nil {
		return x.ApproveListResponse
	}
	return nil
}

func (x *CloudAccountApproveListResponse) GetExistingresourcelimits() *ResourceLimits {
	if x != nil {
		return x.Existingresourcelimits
	}
	return nil
}

type CloudAccountApproveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account                string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Providername           string `protobuf:"bytes,2,opt,name=providername,proto3" json:"providername,omitempty"`
	Status                 bool   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	EnableStorage          bool   `protobuf:"varint,4,opt,name=enableStorage,proto3" json:"enableStorage,omitempty"`
	MaxclustersOverride    int32  `protobuf:"varint,5,opt,name=maxclusters_override,json=maxclustersOverride,proto3" json:"maxclusters_override,omitempty"`
	MaxclusterngOverride   int32  `protobuf:"varint,6,opt,name=maxclusterng_override,json=maxclusterngOverride,proto3" json:"maxclusterng_override,omitempty"`
	MaxclusterilbOverride  int32  `protobuf:"varint,7,opt,name=maxclusterilb_override,json=maxclusterilbOverride,proto3" json:"maxclusterilb_override,omitempty"`
	MaxnodegroupvmOverride int32  `protobuf:"varint,8,opt,name=maxnodegroupvm_override,json=maxnodegroupvmOverride,proto3" json:"maxnodegroupvm_override,omitempty"`
	MaxclustervmOverride   int32  `protobuf:"varint,9,opt,name=maxclustervm_override,json=maxclustervmOverride,proto3" json:"maxclustervm_override,omitempty"`
}

func (x *CloudAccountApproveList) Reset() {
	*x = CloudAccountApproveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountApproveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountApproveList) ProtoMessage() {}

func (x *CloudAccountApproveList) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountApproveList.ProtoReflect.Descriptor instead.
func (*CloudAccountApproveList) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{54}
}

func (x *CloudAccountApproveList) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CloudAccountApproveList) GetProvidername() string {
	if x != nil {
		return x.Providername
	}
	return ""
}

func (x *CloudAccountApproveList) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CloudAccountApproveList) GetEnableStorage() bool {
	if x != nil {
		return x.EnableStorage
	}
	return false
}

func (x *CloudAccountApproveList) GetMaxclustersOverride() int32 {
	if x != nil {
		return x.MaxclustersOverride
	}
	return 0
}

func (x *CloudAccountApproveList) GetMaxclusterngOverride() int32 {
	if x != nil {
		return x.MaxclusterngOverride
	}
	return 0
}

func (x *CloudAccountApproveList) GetMaxclusterilbOverride() int32 {
	if x != nil {
		return x.MaxclusterilbOverride
	}
	return 0
}

func (x *CloudAccountApproveList) GetMaxnodegroupvmOverride() int32 {
	if x != nil {
		return x.MaxnodegroupvmOverride
	}
	return 0
}

func (x *CloudAccountApproveList) GetMaxclustervmOverride() int32 {
	if x != nil {
		return x.MaxclustervmOverride
	}
	return 0
}

type CloudAccountApproveListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId         string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	Status                 bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	EnableStorage          bool   `protobuf:"varint,3,opt,name=enableStorage,proto3" json:"enableStorage,omitempty"`
	MaxclustersOverride    int32  `protobuf:"varint,4,opt,name=maxclusters_override,json=maxclustersOverride,proto3" json:"maxclusters_override,omitempty"`
	MaxclusterngOverride   int32  `protobuf:"varint,5,opt,name=maxclusterng_override,json=maxclusterngOverride,proto3" json:"maxclusterng_override,omitempty"`
	MaxclusterilbOverride  int32  `protobuf:"varint,6,opt,name=maxclusterilb_override,json=maxclusterilbOverride,proto3" json:"maxclusterilb_override,omitempty"`
	MaxnodegroupvmOverride int32  `protobuf:"varint,7,opt,name=maxnodegroupvm_override,json=maxnodegroupvmOverride,proto3" json:"maxnodegroupvm_override,omitempty"`
	MaxclustervmOverride   int32  `protobuf:"varint,8,opt,name=maxclustervm_override,json=maxclustervmOverride,proto3" json:"maxclustervm_override,omitempty"`
	Iksadminkey            string `protobuf:"bytes,9,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *CloudAccountApproveListRequest) Reset() {
	*x = CloudAccountApproveListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountApproveListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountApproveListRequest) ProtoMessage() {}

func (x *CloudAccountApproveListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountApproveListRequest.ProtoReflect.Descriptor instead.
func (*CloudAccountApproveListRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{55}
}

func (x *CloudAccountApproveListRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *CloudAccountApproveListRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CloudAccountApproveListRequest) GetEnableStorage() bool {
	if x != nil {
		return x.EnableStorage
	}
	return false
}

func (x *CloudAccountApproveListRequest) GetMaxclustersOverride() int32 {
	if x != nil {
		return x.MaxclustersOverride
	}
	return 0
}

func (x *CloudAccountApproveListRequest) GetMaxclusterngOverride() int32 {
	if x != nil {
		return x.MaxclusterngOverride
	}
	return 0
}

func (x *CloudAccountApproveListRequest) GetMaxclusterilbOverride() int32 {
	if x != nil {
		return x.MaxclusterilbOverride
	}
	return 0
}

func (x *CloudAccountApproveListRequest) GetMaxnodegroupvmOverride() int32 {
	if x != nil {
		return x.MaxnodegroupvmOverride
	}
	return 0
}

func (x *CloudAccountApproveListRequest) GetMaxclustervmOverride() int32 {
	if x != nil {
		return x.MaxclustervmOverride
	}
	return 0
}

func (x *CloudAccountApproveListRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iksadminkey string `protobuf:"bytes,1,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{56}
}

func (x *UserRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAuthenticatedUser bool `protobuf:"varint,1,opt,name=isAuthenticatedUser,proto3" json:"isAuthenticatedUser,omitempty"`
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{57}
}

func (x *UserResponse) GetIsAuthenticatedUser() bool {
	if x != nil {
		return x.IsAuthenticatedUser
	}
	return false
}

// InstanceType
type CreateInstanceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instancetypename  string `protobuf:"bytes,1,opt,name=instancetypename,proto3" json:"instancetypename,omitempty"`
	Memory            int32  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Cpu               int32  `protobuf:"varint,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Nodeprovidername  string `protobuf:"bytes,4,opt,name=nodeprovidername,proto3" json:"nodeprovidername,omitempty"`
	Storage           int32  `protobuf:"varint,5,opt,name=storage,proto3" json:"storage,omitempty"`
	Status            string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Displayname       string `protobuf:"bytes,7,opt,name=displayname,proto3" json:"displayname,omitempty"`
	Imioverride       bool   `protobuf:"varint,8,opt,name=imioverride,proto3" json:"imioverride,omitempty"`
	Description       string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Category          string `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	Family            string `protobuf:"bytes,11,opt,name=family,proto3" json:"family,omitempty"`
	AllowManualInsert bool   `protobuf:"varint,12,opt,name=allowManualInsert,proto3" json:"allowManualInsert,omitempty"`
	Iksadminkey       string `protobuf:"bytes,13,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *CreateInstanceTypeRequest) Reset() {
	*x = CreateInstanceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceTypeRequest) ProtoMessage() {}

func (x *CreateInstanceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceTypeRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{58}
}

func (x *CreateInstanceTypeRequest) GetInstancetypename() string {
	if x != nil {
		return x.Instancetypename
	}
	return ""
}

func (x *CreateInstanceTypeRequest) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CreateInstanceTypeRequest) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CreateInstanceTypeRequest) GetNodeprovidername() string {
	if x != nil {
		return x.Nodeprovidername
	}
	return ""
}

func (x *CreateInstanceTypeRequest) GetStorage() int32 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *CreateInstanceTypeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateInstanceTypeRequest) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *CreateInstanceTypeRequest) GetImioverride() bool {
	if x != nil {
		return x.Imioverride
	}
	return false
}

func (x *CreateInstanceTypeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateInstanceTypeRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CreateInstanceTypeRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *CreateInstanceTypeRequest) GetAllowManualInsert() bool {
	if x != nil {
		return x.AllowManualInsert
	}
	return false
}

func (x *CreateInstanceTypeRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type GetInstanceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetInstanceTypeRequest) Reset() {
	*x = GetInstanceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceTypeRequest) ProtoMessage() {}

func (x *GetInstanceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceTypeRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceTypeRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{59}
}

func (x *GetInstanceTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteInstanceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Iksadminkey string `protobuf:"bytes,2,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *DeleteInstanceTypeRequest) Reset() {
	*x = DeleteInstanceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceTypeRequest) ProtoMessage() {}

func (x *DeleteInstanceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceTypeRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteInstanceTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteInstanceTypeRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type UpdateInstanceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Memory           int32  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Cpu              int32  `protobuf:"varint,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Nodeprovidername string `protobuf:"bytes,4,opt,name=nodeprovidername,proto3" json:"nodeprovidername,omitempty"`
	Storage          int32  `protobuf:"varint,5,opt,name=storage,proto3" json:"storage,omitempty"`
	Status           string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Displayname      string `protobuf:"bytes,7,opt,name=displayname,proto3" json:"displayname,omitempty"`
	Imioverride      bool   `protobuf:"varint,8,opt,name=imioverride,proto3" json:"imioverride,omitempty"`
	Description      string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Category         string `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	Family           string `protobuf:"bytes,11,opt,name=family,proto3" json:"family,omitempty"`
	Iksadminkey      string `protobuf:"bytes,12,opt,name=iksadminkey,proto3" json:"iksadminkey,omitempty"`
}

func (x *UpdateInstanceTypeRequest) Reset() {
	*x = UpdateInstanceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceTypeRequest) ProtoMessage() {}

func (x *UpdateInstanceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceTypeRequest) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateInstanceTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateInstanceTypeRequest) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *UpdateInstanceTypeRequest) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *UpdateInstanceTypeRequest) GetNodeprovidername() string {
	if x != nil {
		return x.Nodeprovidername
	}
	return ""
}

func (x *UpdateInstanceTypeRequest) GetStorage() int32 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *UpdateInstanceTypeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateInstanceTypeRequest) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *UpdateInstanceTypeRequest) GetImioverride() bool {
	if x != nil {
		return x.Imioverride
	}
	return false
}

func (x *UpdateInstanceTypeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateInstanceTypeRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpdateInstanceTypeRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *UpdateInstanceTypeRequest) GetIksadminkey() string {
	if x != nil {
		return x.Iksadminkey
	}
	return ""
}

type GetInstanceTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceTypeResponse []*InstanceTypeResponse `protobuf:"bytes,1,rep,name=instanceTypeResponse,proto3" json:"instanceTypeResponse,omitempty"`
}

func (x *GetInstanceTypesResponse) Reset() {
	*x = GetInstanceTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceTypesResponse) ProtoMessage() {}

func (x *GetInstanceTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceTypesResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceTypesResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{62}
}

func (x *GetInstanceTypesResponse) GetInstanceTypeResponse() []*InstanceTypeResponse {
	if x != nil {
		return x.InstanceTypeResponse
	}
	return nil
}

type GetInstanceTypeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputeResponse  []*InstanceTypeResponse `protobuf:"bytes,1,rep,name=computeResponse,proto3" json:"computeResponse,omitempty"`
	States           []string                `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	Nodeprovidername []string                `protobuf:"bytes,3,rep,name=nodeprovidername,proto3" json:"nodeprovidername,omitempty"`
}

func (x *GetInstanceTypeInfoResponse) Reset() {
	*x = GetInstanceTypeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceTypeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceTypeInfoResponse) ProtoMessage() {}

func (x *GetInstanceTypeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceTypeInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceTypeInfoResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{63}
}

func (x *GetInstanceTypeInfoResponse) GetComputeResponse() []*InstanceTypeResponse {
	if x != nil {
		return x.ComputeResponse
	}
	return nil
}

func (x *GetInstanceTypeInfoResponse) GetStates() []string {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *GetInstanceTypeInfoResponse) GetNodeprovidername() []string {
	if x != nil {
		return x.Nodeprovidername
	}
	return nil
}

type GetInstanceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IksInstanceType     *InstanceTypeResponse `protobuf:"bytes,1,opt,name=iksInstanceType,proto3" json:"iksInstanceType,omitempty"`
	ComputeInstanceType *InstanceTypeResponse `protobuf:"bytes,2,opt,name=computeInstanceType,proto3" json:"computeInstanceType,omitempty"`
}

func (x *GetInstanceTypeResponse) Reset() {
	*x = GetInstanceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceTypeResponse) ProtoMessage() {}

func (x *GetInstanceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceTypeResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceTypeResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{64}
}

func (x *GetInstanceTypeResponse) GetIksInstanceType() *InstanceTypeResponse {
	if x != nil {
		return x.IksInstanceType
	}
	return nil
}

func (x *GetInstanceTypeResponse) GetComputeInstanceType() *InstanceTypeResponse {
	if x != nil {
		return x.ComputeInstanceType
	}
	return nil
}

type InstanceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instancetypename                       string         `protobuf:"bytes,1,opt,name=instancetypename,proto3" json:"instancetypename,omitempty"`
	Memory                                 int32          `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Cpu                                    int32          `protobuf:"varint,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Nodeprovidername                       string         `protobuf:"bytes,4,opt,name=nodeprovidername,proto3" json:"nodeprovidername,omitempty"`
	Storage                                int32          `protobuf:"varint,5,opt,name=storage,proto3" json:"storage,omitempty"`
	Status                                 string         `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Displayname                            string         `protobuf:"bytes,7,opt,name=displayname,proto3" json:"displayname,omitempty"`
	Imioverride                            bool           `protobuf:"varint,8,opt,name=imioverride,proto3" json:"imioverride,omitempty"`
	Description                            string         `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Category                               string         `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	Family                                 string         `protobuf:"bytes,11,opt,name=family,proto3" json:"family,omitempty"`
	IksDB                                  bool           `protobuf:"varint,12,opt,name=iksDB,proto3" json:"iksDB,omitempty"`
	ImiResponse                            []*IMIResponse `protobuf:"bytes,13,rep,name=imiResponse,proto3" json:"imiResponse,omitempty"`
	Instacetypeimik8Scompatibilityresponse []*IMIResponse `protobuf:"bytes,14,rep,name=instacetypeimik8scompatibilityresponse,proto3" json:"instacetypeimik8scompatibilityresponse,omitempty"`
	Cposimageinstances                     []string       `protobuf:"bytes,15,rep,name=cposimageinstances,proto3" json:"cposimageinstances,omitempty"`
	Iscompatabilityactiveinstance          bool           `protobuf:"varint,16,opt,name=iscompatabilityactiveinstance,proto3" json:"iscompatabilityactiveinstance,omitempty"`
}

func (x *InstanceTypeResponse) Reset() {
	*x = InstanceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeResponse) ProtoMessage() {}

func (x *InstanceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeResponse.ProtoReflect.Descriptor instead.
func (*InstanceTypeResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{65}
}

func (x *InstanceTypeResponse) GetInstancetypename() string {
	if x != nil {
		return x.Instancetypename
	}
	return ""
}

func (x *InstanceTypeResponse) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *InstanceTypeResponse) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *InstanceTypeResponse) GetNodeprovidername() string {
	if x != nil {
		return x.Nodeprovidername
	}
	return ""
}

func (x *InstanceTypeResponse) GetStorage() int32 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *InstanceTypeResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InstanceTypeResponse) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *InstanceTypeResponse) GetImioverride() bool {
	if x != nil {
		return x.Imioverride
	}
	return false
}

func (x *InstanceTypeResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstanceTypeResponse) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *InstanceTypeResponse) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *InstanceTypeResponse) GetIksDB() bool {
	if x != nil {
		return x.IksDB
	}
	return false
}

func (x *InstanceTypeResponse) GetImiResponse() []*IMIResponse {
	if x != nil {
		return x.ImiResponse
	}
	return nil
}

func (x *InstanceTypeResponse) GetInstacetypeimik8Scompatibilityresponse() []*IMIResponse {
	if x != nil {
		return x.Instacetypeimik8Scompatibilityresponse
	}
	return nil
}

func (x *InstanceTypeResponse) GetCposimageinstances() []string {
	if x != nil {
		return x.Cposimageinstances
	}
	return nil
}

func (x *InstanceTypeResponse) GetIscompatabilityactiveinstance() bool {
	if x != nil {
		return x.Iscompatabilityactiveinstance
	}
	return false
}

type AdminFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sourceip      []string `protobuf:"bytes,1,rep,name=sourceip,proto3" json:"sourceip,omitempty"`
	State         string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Destinationip string   `protobuf:"bytes,3,opt,name=destinationip,proto3" json:"destinationip,omitempty"`
	Port          int32    `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Vipid         int32    `protobuf:"varint,5,opt,name=vipid,proto3" json:"vipid,omitempty"`
	Vipname       string   `protobuf:"bytes,6,opt,name=vipname,proto3" json:"vipname,omitempty"`
	Viptype       string   `protobuf:"bytes,7,opt,name=viptype,proto3" json:"viptype,omitempty"`
	Protocol      []string `protobuf:"bytes,8,rep,name=protocol,proto3" json:"protocol,omitempty"`
	Internalport  int32    `protobuf:"varint,9,opt,name=internalport,proto3" json:"internalport,omitempty"`
}

func (x *AdminFirewallRuleResponse) Reset() {
	*x = AdminFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminFirewallRuleResponse) ProtoMessage() {}

func (x *AdminFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*AdminFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{66}
}

func (x *AdminFirewallRuleResponse) GetSourceip() []string {
	if x != nil {
		return x.Sourceip
	}
	return nil
}

func (x *AdminFirewallRuleResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AdminFirewallRuleResponse) GetDestinationip() string {
	if x != nil {
		return x.Destinationip
	}
	return ""
}

func (x *AdminFirewallRuleResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AdminFirewallRuleResponse) GetVipid() int32 {
	if x != nil {
		return x.Vipid
	}
	return 0
}

func (x *AdminFirewallRuleResponse) GetVipname() string {
	if x != nil {
		return x.Vipname
	}
	return ""
}

func (x *AdminFirewallRuleResponse) GetViptype() string {
	if x != nil {
		return x.Viptype
	}
	return ""
}

func (x *AdminFirewallRuleResponse) GetProtocol() []string {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *AdminFirewallRuleResponse) GetInternalport() int32 {
	if x != nil {
		return x.Internalport
	}
	return 0
}

type GetAdminFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Getfirewallresponse []*AdminFirewallRuleResponse `protobuf:"bytes,1,rep,name=getfirewallresponse,proto3" json:"getfirewallresponse,omitempty"`
}

func (x *GetAdminFirewallRuleResponse) Reset() {
	*x = GetAdminFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iks_admin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminFirewallRuleResponse) ProtoMessage() {}

func (x *GetAdminFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iks_admin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*GetAdminFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_iks_admin_proto_rawDescGZIP(), []int{67}
}

func (x *GetAdminFirewallRuleResponse) GetGetfirewallresponse() []*AdminFirewallRuleResponse {
	if x != nil {
		return x.Getfirewallresponse
	}
	return nil
}

var File_iks_admin_proto protoreflect.FileDescriptor

var file_iks_admin_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6b, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x69, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x05, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x73, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x0d, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x06,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x6b,
	0x38, 0x73, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6b, 0x38, 0x73, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x6b, 0x38, 0x73, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x38, 0x73, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1,
	0x03, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x70, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x70, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x70, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x70, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x38,
	0x73, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6b, 0x38, 0x73, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x6b, 0x38, 0x73, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x38, 0x73, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x63, 0x69,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x63, 0x69, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x69, 0x64, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x60, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x02,
	0x6c, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x02, 0x6c,
	0x62, 0x22, 0x4f, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x62, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x02, 0x6c, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x02,
	0x6c, 0x62, 0x22, 0x4e, 0x0a, 0x0d, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x62, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6c, 0x62, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x73, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x62,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x6c, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x02, 0x6c, 0x62, 0x22, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x62, 0x69, 0x64, 0x22, 0xf5, 0x01,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x6d, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x65, 0x6b, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x65, 0x6b, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x0b, 0x77, 0x65, 0x6b, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x57, 0x65, 0x6b, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6d,
	0x69, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6d, 0x69, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x69, 0x6d, 0x69, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6d, 0x69, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6d, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d,
	0x69, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x73,
	0x68, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x73, 0x68, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x22, 0x7e, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x32, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x8c, 0x03, 0x0a, 0x0a, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x6b, 0x65, 0x79, 0x22, 0x55, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0xbf, 0x05, 0x0a, 0x0b, 0x49,
	0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x73, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x69, 0x6d, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x69, 0x6d, 0x69, 0x12, 0x4f, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x6b, 0x38, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69,
	0x6d, 0x69, 0x6b, 0x38, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x70,
	0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x70, 0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x6b, 0x38, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x6b, 0x38, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x46, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x69, 0x6d, 0x69, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d, 0x49, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x6d, 0x69, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x08, 0x4f, 0x53,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x27, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x49, 0x4d, 0x49, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x53, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x07,
	0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x22,
	0x23, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x4d,
	0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x22, 0xcd,
	0x02, 0x0a, 0x19, 0x49, 0x4d, 0x49, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x22, 0xe8,
	0x01, 0x0a, 0x1a, 0x49, 0x4d, 0x49, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x19, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x4d, 0x49, 0x4b, 0x38, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x7d, 0x0a, 0x26, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x6b, 0x38, 0x73,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x4d, 0x49, 0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69,
	0x6d, 0x69, 0x6b, 0x38, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6b,
	0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x22, 0x90, 0x01, 0x0a,
	0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x4d, 0x49,
	0x4b, 0x38, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22,
	0xc0, 0x02, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x4d, 0x49, 0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x70, 0x6f, 0x73, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x70, 0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6b, 0x38, 0x73,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x70, 0x69, 0x6d,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x70, 0x69, 0x6d, 0x69, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6d, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6d, 0x69, 0x22, 0xf2, 0x01, 0x0a, 0x12, 0x4b, 0x38, 0x73,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x70, 0x69, 0x6d, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x70, 0x69, 0x6d,
	0x69, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6d, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6d, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x22, 0x23, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6b,
	0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6b, 0x38, 0x73,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x70, 0x69, 0x6d, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x70, 0x69, 0x6d, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6d,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6d, 0x69,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36,
	0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x27, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x62, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x0e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x73, 0x68, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6b, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x73, 0x68, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x6b, 0x65, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x1f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x16, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xa2, 0x03, 0x0a, 0x17, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x61,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6c, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6c, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x76, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x76, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0xee, 0x03, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28,
	0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x32, 0x28, 0x00,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6c, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28,
	0x00, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6c, 0x62,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x76, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0x80, 0x04, 0x28, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x76, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x6d, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x1a, 0x05, 0x18, 0x80, 0x04, 0x28, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x76, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79,
	0x22, 0x2f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65,
	0x79, 0x22, 0x40, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x22, 0xb9, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x69, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d,
	0x69, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x22,
	0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79,
	0x22, 0xf3, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6d, 0x69, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x6d, 0x69, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6b, 0x73, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x6b, 0x65, 0x79, 0x22, 0x6b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x69, 0x6b,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0f, 0x69, 0x6b, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x92, 0x05, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x69, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d, 0x69, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6b, 0x73, 0x44, 0x42,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6b, 0x73, 0x44, 0x42, 0x12, 0x34, 0x0a,
	0x0b, 0x69, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x69, 0x6d, 0x69, 0x6b, 0x38, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d, 0x49, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x6b, 0x38, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x70, 0x6f, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x70, 0x6f,
	0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x1d, 0x69, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x69, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x69, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x72, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x67, 0x65, 0x74,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x67, 0x65, 0x74, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcd, 0x27,
	0x0a, 0x08, 0x49, 0x6b, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x6a, 0x0a, 0x18, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x4b, 0x53, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x51, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x4d, 0x49, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x69, 0x6d, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x49, 0x4d, 0x49, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6d, 0x69, 0x73, 0x12,
	0x55, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x49, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6d, 0x69, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x49,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x49, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x69, 0x6d, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x06, 0x50, 0x75,
	0x74, 0x49, 0x4d, 0x49, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6d, 0x69, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x4d, 0x49, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x6f, 0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d, 0x49, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x38, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4d,
	0x49, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x38, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x69, 0x6d, 0x69, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6b, 0x38, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x4d, 0x49, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x4d,
	0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b,
	0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6d, 0x69, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x73, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b,
	0x38, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b,
	0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x38, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6b, 0x38, 0x73,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x70, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x4b, 0x38, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x38, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x1a, 0x20, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6b, 0x38, 0x73, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x6a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6b, 0x38, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x67, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x12,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x4f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x68, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x41, 0x64, 0x64,
	0x4f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x1a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0x67, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x12,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x5e, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x43, 0x50, 0x4e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x1a, 0x3f, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0xab,
	0x01, 0x0a, 0x1a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c,
	0x22, 0x47, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x84,
	0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x1a,
	0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x62, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6c, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35,
	0x1a, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6c, 0x62, 0x73, 0x2f, 0x7b, 0x6c, 0x62, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6c, 0x62, 0x73, 0x12, 0x7d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6c, 0x62,
	0x73, 0x2f, 0x7b, 0x6c, 0x62, 0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6c, 0x62, 0x73, 0x2f, 0x7b,
	0x6c, 0x62, 0x69, 0x64, 0x7d, 0x12, 0x7c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x73, 0x68, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3d, 0x22, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0xa8, 0x01, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x1a, 0x38, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b,
	0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x7b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x7f, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x1a,
	0x22, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x4d, 0x49,
	0x54, 0x6f, 0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x4d, 0x49, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x4d, 0x49, 0x4b, 0x38, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a,
	0x26, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x6b, 0x38, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x2a, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6b, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x5e, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b, 0x05, 0x12, 0x03, 0x69, 0x6b, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iks_admin_proto_rawDescOnce sync.Once
	file_iks_admin_proto_rawDescData = file_iks_admin_proto_rawDesc
)

func file_iks_admin_proto_rawDescGZIP() []byte {
	file_iks_admin_proto_rawDescOnce.Do(func() {
		file_iks_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_iks_admin_proto_rawDescData)
	})
	return file_iks_admin_proto_rawDescData
}

var file_iks_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_iks_admin_proto_goTypes = []interface{}{
	(*GetClusterAdmin)(nil),                 // 0: proto.GetClusterAdmin
	(*GetClustersAdmin)(nil),                // 1: proto.GetClustersAdmin
	(*ClustersResponseAdmin)(nil),           // 2: proto.ClustersResponseAdmin
	(*ClusterCerts)(nil),                    // 3: proto.ClusterCerts
	(*NetworkAdmin)(nil),                    // 4: proto.NetworkAdmin
	(*Loadbalancer)(nil),                    // 5: proto.Loadbalancer
	(*PostLoadbalancerRequest)(nil),         // 6: proto.PostLoadbalancerRequest
	(*LoadbalancerResponse)(nil),            // 7: proto.LoadbalancerResponse
	(*LoadBalancers)(nil),                   // 8: proto.LoadBalancers
	(*PutLoadbalancerRequest)(nil),          // 9: proto.PutLoadbalancerRequest
	(*GetLbRequest)(nil),                    // 10: proto.GetLbRequest
	(*Node)(nil),                            // 11: proto.Node
	(*WekaStorageStatusAdmin)(nil),          // 12: proto.WekaStorageStatusAdmin
	(*Nodegroup)(nil),                       // 13: proto.Nodegroup
	(*AddOnAdmin)(nil),                      // 14: proto.AddOnAdmin
	(*Snapshot)(nil),                        // 15: proto.Snapshot
	(*Backup)(nil),                          // 16: proto.Backup
	(*AdminClusterID)(nil),                  // 17: proto.AdminClusterID
	(*IMIRequest)(nil),                      // 18: proto.IMIRequest
	(*Component)(nil),                       // 19: proto.Component
	(*IMIResponse)(nil),                     // 20: proto.IMIResponse
	(*GetIMIResponse)(nil),                  // 21: proto.GetIMIResponse
	(*Runtimes)(nil),                        // 22: proto.Runtimes
	(*OSImages)(nil),                        // 23: proto.OSImages
	(*Providers)(nil),                       // 24: proto.Providers
	(*States)(nil),                          // 25: proto.States
	(*GetIMIsInfoResponse)(nil),             // 26: proto.GetIMIsInfoResponse
	(*UpdateIMIRequest)(nil),                // 27: proto.UpdateIMIRequest
	(*GetIMIRequest)(nil),                   // 28: proto.GetIMIRequest
	(*DeleteIMIRequest)(nil),                // 29: proto.DeleteIMIRequest
	(*IMIInstanceTypeK8SRequest)(nil),       // 30: proto.IMIInstanceTypeK8sRequest
	(*IMIInstanceTypeK8SResponse)(nil),      // 31: proto.IMIInstanceTypeK8sResponse
	(*InstanceTypeIMIK8SRequest)(nil),       // 32: proto.InstanceTypeIMIK8sRequest
	(*InstanceTypeIMIK8SResponse)(nil),      // 33: proto.InstanceTypeIMIK8sResponse
	(*InstacetypeIMIK8SCompatibility)(nil),  // 34: proto.InstacetypeIMIK8sCompatibility
	(*Createk8SversionRequest)(nil),         // 35: proto.Createk8sversionRequest
	(*K8SversionResponse)(nil),              // 36: proto.K8sversionResponse
	(*GetK8SRequest)(nil),                   // 37: proto.GetK8sRequest
	(*GetK8SVersionResponse)(nil),           // 38: proto.GetK8sVersionResponse
	(*UpdateK8SRequest)(nil),                // 39: proto.UpdateK8sRequest
	(*CreateAddonAdminRequest)(nil),         // 40: proto.CreateAddonAdminRequest
	(*Keyvaluepair)(nil),                    // 41: proto.Keyvaluepair
	(*AddonResponse)(nil),                   // 42: proto.AddonResponse
	(*GetAddOnResponse)(nil),                // 43: proto.GetAddOnResponse
	(*GetAddOnAdminRequest)(nil),            // 44: proto.GetAddOnAdminRequest
	(*UpdateAddOnAdminRequest)(nil),         // 45: proto.UpdateAddOnAdminRequest
	(*PutNodegroupRequest)(nil),             // 46: proto.PutNodegroupRequest
	(*UpgradeControlPlaneRequest)(nil),      // 47: proto.UpgradeControlPlaneRequest
	(*GetNodegroupResponse)(nil),            // 48: proto.GetNodegroupResponse
	(*GetEventResponse)(nil),                // 49: proto.GetEventResponse
	(*PostSnapshotRequest)(nil),             // 50: proto.PostSnapshotRequest
	(*PostSnapshotResponse)(nil),            // 51: proto.PostSnapshotResponse
	(*ClusterSSHKeys)(nil),                  // 52: proto.ClusterSSHKeys
	(*CloudAccountApproveListResponse)(nil), // 53: proto.CloudAccountApproveListResponse
	(*CloudAccountApproveList)(nil),         // 54: proto.CloudAccountApproveList
	(*CloudAccountApproveListRequest)(nil),  // 55: proto.CloudAccountApproveListRequest
	(*UserRequest)(nil),                     // 56: proto.UserRequest
	(*UserResponse)(nil),                    // 57: proto.UserResponse
	(*CreateInstanceTypeRequest)(nil),       // 58: proto.CreateInstanceTypeRequest
	(*GetInstanceTypeRequest)(nil),          // 59: proto.GetInstanceTypeRequest
	(*DeleteInstanceTypeRequest)(nil),       // 60: proto.DeleteInstanceTypeRequest
	(*UpdateInstanceTypeRequest)(nil),       // 61: proto.UpdateInstanceTypeRequest
	(*GetInstanceTypesResponse)(nil),        // 62: proto.GetInstanceTypesResponse
	(*GetInstanceTypeInfoResponse)(nil),     // 63: proto.GetInstanceTypeInfoResponse
	(*GetInstanceTypeResponse)(nil),         // 64: proto.GetInstanceTypeResponse
	(*InstanceTypeResponse)(nil),            // 65: proto.InstanceTypeResponse
	(*AdminFirewallRuleResponse)(nil),       // 66: proto.AdminFirewallRuleResponse
	(*GetAdminFirewallRuleResponse)(nil),    // 67: proto.GetAdminFirewallRuleResponse
	(*ClusterStorageStatus)(nil),            // 68: proto.ClusterStorageStatus
	(*SshKey)(nil),                          // 69: proto.SshKey
	(*NodegroupSummary)(nil),                // 70: proto.NodegroupSummary
	(*ResourceLimits)(nil),                  // 71: proto.ResourceLimits
	(*emptypb.Empty)(nil),                   // 72: google.protobuf.Empty
}
var file_iks_admin_proto_depIdxs = []int32{
	3,  // 0: proto.GetClusterAdmin.certsexpiring:type_name -> proto.ClusterCerts
	4,  // 1: proto.GetClusterAdmin.network:type_name -> proto.NetworkAdmin
	13, // 2: proto.GetClusterAdmin.nodegroups:type_name -> proto.Nodegroup
	14, // 3: proto.GetClusterAdmin.addons:type_name -> proto.AddOnAdmin
	15, // 4: proto.GetClusterAdmin.snapshot:type_name -> proto.Snapshot
	16, // 5: proto.GetClusterAdmin.backup:type_name -> proto.Backup
	68, // 6: proto.GetClusterAdmin.storages:type_name -> proto.ClusterStorageStatus
	2,  // 7: proto.GetClustersAdmin.response:type_name -> proto.ClustersResponseAdmin
	13, // 8: proto.ClustersResponseAdmin.nodegroups:type_name -> proto.Nodegroup
	5,  // 9: proto.NetworkAdmin.loadbalancer:type_name -> proto.Loadbalancer
	5,  // 10: proto.PostLoadbalancerRequest.lb:type_name -> proto.Loadbalancer
	5,  // 11: proto.LoadbalancerResponse.lb:type_name -> proto.Loadbalancer
	7,  // 12: proto.LoadBalancers.lbresponses:type_name -> proto.LoadbalancerResponse
	5,  // 13: proto.PutLoadbalancerRequest.lb:type_name -> proto.Loadbalancer
	12, // 14: proto.Node.wekaStorage:type_name -> proto.WekaStorageStatusAdmin
	11, // 15: proto.Nodegroup.nodes:type_name -> proto.Node
	69, // 16: proto.Nodegroup.sshkey:type_name -> proto.SshKey
	70, // 17: proto.Nodegroup.nodegroupsummary:type_name -> proto.NodegroupSummary
	41, // 18: proto.AddOnAdmin.args:type_name -> proto.Keyvaluepair
	41, // 19: proto.AddOnAdmin.tags:type_name -> proto.Keyvaluepair
	19, // 20: proto.IMIRequest.components:type_name -> proto.Component
	19, // 21: proto.IMIResponse.components:type_name -> proto.Component
	65, // 22: proto.IMIResponse.instanceTypeResponse:type_name -> proto.InstanceTypeResponse
	65, // 23: proto.IMIResponse.instacetypeimik8scompatibilityresponse:type_name -> proto.InstanceTypeResponse
	20, // 24: proto.GetIMIResponse.imiresponse:type_name -> proto.IMIResponse
	22, // 25: proto.GetIMIsInfoResponse.runtime:type_name -> proto.Runtimes
	23, // 26: proto.GetIMIsInfoResponse.osimage:type_name -> proto.OSImages
	24, // 27: proto.GetIMIsInfoResponse.provider:type_name -> proto.Providers
	25, // 28: proto.GetIMIsInfoResponse.state:type_name -> proto.States
	19, // 29: proto.UpdateIMIRequest.components:type_name -> proto.Component
	34, // 30: proto.InstanceTypeIMIK8sRequest.instacetypeimik8scompatibilityresponse:type_name -> proto.InstacetypeIMIK8sCompatibility
	36, // 31: proto.GetK8sVersionResponse.k8sversions:type_name -> proto.K8sversionResponse
	41, // 32: proto.CreateAddonAdminRequest.args:type_name -> proto.Keyvaluepair
	41, // 33: proto.CreateAddonAdminRequest.tags:type_name -> proto.Keyvaluepair
	41, // 34: proto.AddonResponse.args:type_name -> proto.Keyvaluepair
	41, // 35: proto.AddonResponse.tags:type_name -> proto.Keyvaluepair
	42, // 36: proto.GetAddOnResponse.addonresponse:type_name -> proto.AddonResponse
	41, // 37: proto.UpdateAddOnAdminRequest.args:type_name -> proto.Keyvaluepair
	41, // 38: proto.UpdateAddOnAdminRequest.tags:type_name -> proto.Keyvaluepair
	13, // 39: proto.GetNodegroupResponse.nodegroups:type_name -> proto.Nodegroup
	54, // 40: proto.CloudAccountApproveListResponse.approveListResponse:type_name -> proto.CloudAccountApproveList
	71, // 41: proto.CloudAccountApproveListResponse.existingresourcelimits:type_name -> proto.ResourceLimits
	65, // 42: proto.GetInstanceTypesResponse.instanceTypeResponse:type_name -> proto.InstanceTypeResponse
	65, // 43: proto.GetInstanceTypeInfoResponse.computeResponse:type_name -> proto.InstanceTypeResponse
	65, // 44: proto.GetInstanceTypeResponse.iksInstanceType:type_name -> proto.InstanceTypeResponse
	65, // 45: proto.GetInstanceTypeResponse.computeInstanceType:type_name -> proto.InstanceTypeResponse
	20, // 46: proto.InstanceTypeResponse.imiResponse:type_name -> proto.IMIResponse
	20, // 47: proto.InstanceTypeResponse.instacetypeimik8scompatibilityresponse:type_name -> proto.IMIResponse
	66, // 48: proto.GetAdminFirewallRuleResponse.getfirewallresponse:type_name -> proto.AdminFirewallRuleResponse
	56, // 49: proto.IksAdmin.AuthenticateIKSAdminUser:input_type -> proto.UserRequest
	18, // 50: proto.IksAdmin.CreateIMI:input_type -> proto.IMIRequest
	72, // 51: proto.IksAdmin.GetIMIs:input_type -> google.protobuf.Empty
	28, // 52: proto.IksAdmin.GetIMI:input_type -> proto.GetIMIRequest
	72, // 53: proto.IksAdmin.GetIMIsInfo:input_type -> google.protobuf.Empty
	27, // 54: proto.IksAdmin.PutIMI:input_type -> proto.UpdateIMIRequest
	30, // 55: proto.IksAdmin.UpdateIMIInstanceTypeToK8sCompatibility:input_type -> proto.IMIInstanceTypeK8sRequest
	29, // 56: proto.IksAdmin.DeleteIMI:input_type -> proto.DeleteIMIRequest
	35, // 57: proto.IksAdmin.CreateK8SVersion:input_type -> proto.Createk8sversionRequest
	72, // 58: proto.IksAdmin.GetK8SVersions:input_type -> google.protobuf.Empty
	37, // 59: proto.IksAdmin.GetK8SVersion:input_type -> proto.GetK8sRequest
	39, // 60: proto.IksAdmin.PutK8SVersion:input_type -> proto.UpdateK8sRequest
	37, // 61: proto.IksAdmin.DeleteK8SVersion:input_type -> proto.GetK8sRequest
	40, // 62: proto.IksAdmin.CreateNewAddOn:input_type -> proto.CreateAddonAdminRequest
	72, // 63: proto.IksAdmin.GetAddOns:input_type -> google.protobuf.Empty
	44, // 64: proto.IksAdmin.GetAddOn:input_type -> proto.GetAddOnAdminRequest
	45, // 65: proto.IksAdmin.PutAddOn:input_type -> proto.UpdateAddOnAdminRequest
	44, // 66: proto.IksAdmin.DeleteAddOn:input_type -> proto.GetAddOnAdminRequest
	72, // 67: proto.IksAdmin.GetClusters:input_type -> google.protobuf.Empty
	17, // 68: proto.IksAdmin.GetCluster:input_type -> proto.AdminClusterID
	46, // 69: proto.IksAdmin.PutCPNodegroup:input_type -> proto.PutNodegroupRequest
	47, // 70: proto.IksAdmin.UpgradeClusterControlPlane:input_type -> proto.UpgradeControlPlaneRequest
	17, // 71: proto.IksAdmin.GetEvents:input_type -> proto.AdminClusterID
	50, // 72: proto.IksAdmin.ClusterSnapshot:input_type -> proto.PostSnapshotRequest
	17, // 73: proto.IksAdmin.ClusterRecreate:input_type -> proto.AdminClusterID
	6,  // 74: proto.IksAdmin.PostLoadBalancer:input_type -> proto.PostLoadbalancerRequest
	9,  // 75: proto.IksAdmin.PutLoadBalancer:input_type -> proto.PutLoadbalancerRequest
	17, // 76: proto.IksAdmin.GetLoadBalancers:input_type -> proto.AdminClusterID
	10, // 77: proto.IksAdmin.GetLoadBalancer:input_type -> proto.GetLbRequest
	10, // 78: proto.IksAdmin.DeleteLoadBalancer:input_type -> proto.GetLbRequest
	17, // 79: proto.IksAdmin.GetControlPlaneSSHKeys:input_type -> proto.AdminClusterID
	72, // 80: proto.IksAdmin.GetCloudAccountApproveList:input_type -> google.protobuf.Empty
	55, // 81: proto.IksAdmin.PostCloudAccountApproveList:input_type -> proto.CloudAccountApproveListRequest
	55, // 82: proto.IksAdmin.PutCloudAccountApproveList:input_type -> proto.CloudAccountApproveListRequest
	58, // 83: proto.IksAdmin.CreateInstanceTypes:input_type -> proto.CreateInstanceTypeRequest
	72, // 84: proto.IksAdmin.GetInstanceTypes:input_type -> google.protobuf.Empty
	59, // 85: proto.IksAdmin.GetInstanceType:input_type -> proto.GetInstanceTypeRequest
	72, // 86: proto.IksAdmin.GetInstanceTypeInfo:input_type -> google.protobuf.Empty
	61, // 87: proto.IksAdmin.PutInstanceType:input_type -> proto.UpdateInstanceTypeRequest
	32, // 88: proto.IksAdmin.UpdateInstanceTypeIMIToK8sCompatibility:input_type -> proto.InstanceTypeIMIK8sRequest
	60, // 89: proto.IksAdmin.DeleteInstanceType:input_type -> proto.DeleteInstanceTypeRequest
	17, // 90: proto.IksAdmin.GetFirewallRule:input_type -> proto.AdminClusterID
	57, // 91: proto.IksAdmin.AuthenticateIKSAdminUser:output_type -> proto.UserResponse
	20, // 92: proto.IksAdmin.CreateIMI:output_type -> proto.IMIResponse
	21, // 93: proto.IksAdmin.GetIMIs:output_type -> proto.GetIMIResponse
	20, // 94: proto.IksAdmin.GetIMI:output_type -> proto.IMIResponse
	26, // 95: proto.IksAdmin.GetIMIsInfo:output_type -> proto.GetIMIsInfoResponse
	20, // 96: proto.IksAdmin.PutIMI:output_type -> proto.IMIResponse
	31, // 97: proto.IksAdmin.UpdateIMIInstanceTypeToK8sCompatibility:output_type -> proto.IMIInstanceTypeK8sResponse
	72, // 98: proto.IksAdmin.DeleteIMI:output_type -> google.protobuf.Empty
	36, // 99: proto.IksAdmin.CreateK8SVersion:output_type -> proto.K8sversionResponse
	38, // 100: proto.IksAdmin.GetK8SVersions:output_type -> proto.GetK8sVersionResponse
	36, // 101: proto.IksAdmin.GetK8SVersion:output_type -> proto.K8sversionResponse
	36, // 102: proto.IksAdmin.PutK8SVersion:output_type -> proto.K8sversionResponse
	72, // 103: proto.IksAdmin.DeleteK8SVersion:output_type -> google.protobuf.Empty
	42, // 104: proto.IksAdmin.CreateNewAddOn:output_type -> proto.AddonResponse
	43, // 105: proto.IksAdmin.GetAddOns:output_type -> proto.GetAddOnResponse
	42, // 106: proto.IksAdmin.GetAddOn:output_type -> proto.AddonResponse
	42, // 107: proto.IksAdmin.PutAddOn:output_type -> proto.AddonResponse
	72, // 108: proto.IksAdmin.DeleteAddOn:output_type -> google.protobuf.Empty
	1,  // 109: proto.IksAdmin.GetClusters:output_type -> proto.GetClustersAdmin
	0,  // 110: proto.IksAdmin.GetCluster:output_type -> proto.GetClusterAdmin
	13, // 111: proto.IksAdmin.PutCPNodegroup:output_type -> proto.Nodegroup
	72, // 112: proto.IksAdmin.UpgradeClusterControlPlane:output_type -> google.protobuf.Empty
	49, // 113: proto.IksAdmin.GetEvents:output_type -> proto.GetEventResponse
	51, // 114: proto.IksAdmin.ClusterSnapshot:output_type -> proto.PostSnapshotResponse
	72, // 115: proto.IksAdmin.ClusterRecreate:output_type -> google.protobuf.Empty
	7,  // 116: proto.IksAdmin.PostLoadBalancer:output_type -> proto.LoadbalancerResponse
	7,  // 117: proto.IksAdmin.PutLoadBalancer:output_type -> proto.LoadbalancerResponse
	8,  // 118: proto.IksAdmin.GetLoadBalancers:output_type -> proto.LoadBalancers
	7,  // 119: proto.IksAdmin.GetLoadBalancer:output_type -> proto.LoadbalancerResponse
	72, // 120: proto.IksAdmin.DeleteLoadBalancer:output_type -> google.protobuf.Empty
	52, // 121: proto.IksAdmin.GetControlPlaneSSHKeys:output_type -> proto.ClusterSSHKeys
	53, // 122: proto.IksAdmin.GetCloudAccountApproveList:output_type -> proto.CloudAccountApproveListResponse
	54, // 123: proto.IksAdmin.PostCloudAccountApproveList:output_type -> proto.CloudAccountApproveList
	54, // 124: proto.IksAdmin.PutCloudAccountApproveList:output_type -> proto.CloudAccountApproveList
	65, // 125: proto.IksAdmin.CreateInstanceTypes:output_type -> proto.InstanceTypeResponse
	62, // 126: proto.IksAdmin.GetInstanceTypes:output_type -> proto.GetInstanceTypesResponse
	64, // 127: proto.IksAdmin.GetInstanceType:output_type -> proto.GetInstanceTypeResponse
	63, // 128: proto.IksAdmin.GetInstanceTypeInfo:output_type -> proto.GetInstanceTypeInfoResponse
	65, // 129: proto.IksAdmin.PutInstanceType:output_type -> proto.InstanceTypeResponse
	33, // 130: proto.IksAdmin.UpdateInstanceTypeIMIToK8sCompatibility:output_type -> proto.InstanceTypeIMIK8sResponse
	72, // 131: proto.IksAdmin.DeleteInstanceType:output_type -> google.protobuf.Empty
	67, // 132: proto.IksAdmin.GetFirewallRule:output_type -> proto.GetAdminFirewallRuleResponse
	91, // [91:133] is the sub-list for method output_type
	49, // [49:91] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_iks_admin_proto_init() }
func file_iks_admin_proto_init() {
	if File_iks_admin_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_iks_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iks_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClustersAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClustersResponseAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loadbalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLoadbalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadbalancerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutLoadbalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WekaStorageStatusAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodegroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOnAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminClusterID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIMIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runtimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Providers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*States); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIMIsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIMIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIMIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIMIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMIInstanceTypeK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMIInstanceTypeK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeIMIK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeIMIK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstacetypeIMIK8SCompatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Createk8SversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddonAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyvaluepair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddOnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddOnAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddOnAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNodegroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeControlPlaneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodegroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSSHKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountApproveListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountApproveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountApproveListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceTypeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iks_admin_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iks_admin_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_iks_admin_proto_msgTypes[47].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iks_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iks_admin_proto_goTypes,
		DependencyIndexes: file_iks_admin_proto_depIdxs,
		MessageInfos:      file_iks_admin_proto_msgTypes,
	}.Build()
	File_iks_admin_proto = out.File
	file_iks_admin_proto_rawDesc = nil
	file_iks_admin_proto_goTypes = nil
	file_iks_admin_proto_depIdxs = nil
}
