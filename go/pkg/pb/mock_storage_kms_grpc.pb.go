// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/storage_kms_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockStorageKMSPrivateServiceClient is a mock of StorageKMSPrivateServiceClient interface.
type MockStorageKMSPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageKMSPrivateServiceClientMockRecorder
}

// MockStorageKMSPrivateServiceClientMockRecorder is the mock recorder for MockStorageKMSPrivateServiceClient.
type MockStorageKMSPrivateServiceClientMockRecorder struct {
	mock *MockStorageKMSPrivateServiceClient
}

// NewMockStorageKMSPrivateServiceClient creates a new mock instance.
func NewMockStorageKMSPrivateServiceClient(ctrl *gomock.Controller) *MockStorageKMSPrivateServiceClient {
	mock := &MockStorageKMSPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockStorageKMSPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageKMSPrivateServiceClient) EXPECT() *MockStorageKMSPrivateServiceClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageKMSPrivateServiceClient) Delete(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageKMSPrivateServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageKMSPrivateServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockStorageKMSPrivateServiceClient) Get(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageKMSPrivateServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageKMSPrivateServiceClient)(nil).Get), varargs...)
}

// PingPrivate mocks base method.
func (m *MockStorageKMSPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPrivate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockStorageKMSPrivateServiceClientMockRecorder) PingPrivate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockStorageKMSPrivateServiceClient)(nil).PingPrivate), varargs...)
}

// Put mocks base method.
func (m *MockStorageKMSPrivateServiceClient) Put(ctx context.Context, in *StoreSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockStorageKMSPrivateServiceClientMockRecorder) Put(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorageKMSPrivateServiceClient)(nil).Put), varargs...)
}

// MockStorageKMSPrivateServiceServer is a mock of StorageKMSPrivateServiceServer interface.
type MockStorageKMSPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageKMSPrivateServiceServerMockRecorder
}

// MockStorageKMSPrivateServiceServerMockRecorder is the mock recorder for MockStorageKMSPrivateServiceServer.
type MockStorageKMSPrivateServiceServerMockRecorder struct {
	mock *MockStorageKMSPrivateServiceServer
}

// NewMockStorageKMSPrivateServiceServer creates a new mock instance.
func NewMockStorageKMSPrivateServiceServer(ctrl *gomock.Controller) *MockStorageKMSPrivateServiceServer {
	mock := &MockStorageKMSPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockStorageKMSPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageKMSPrivateServiceServer) EXPECT() *MockStorageKMSPrivateServiceServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageKMSPrivateServiceServer) Delete(arg0 context.Context, arg1 *DeleteSecretRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageKMSPrivateServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageKMSPrivateServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockStorageKMSPrivateServiceServer) Get(arg0 context.Context, arg1 *GetSecretRequest) (*GetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageKMSPrivateServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageKMSPrivateServiceServer)(nil).Get), arg0, arg1)
}

// PingPrivate mocks base method.
func (m *MockStorageKMSPrivateServiceServer) PingPrivate(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPrivate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPrivate indicates an expected call of PingPrivate.
func (mr *MockStorageKMSPrivateServiceServerMockRecorder) PingPrivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPrivate", reflect.TypeOf((*MockStorageKMSPrivateServiceServer)(nil).PingPrivate), arg0, arg1)
}

// Put mocks base method.
func (m *MockStorageKMSPrivateServiceServer) Put(arg0 context.Context, arg1 *StoreSecretRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockStorageKMSPrivateServiceServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorageKMSPrivateServiceServer)(nil).Put), arg0, arg1)
}

// mustEmbedUnimplementedStorageKMSPrivateServiceServer mocks base method.
func (m *MockStorageKMSPrivateServiceServer) mustEmbedUnimplementedStorageKMSPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageKMSPrivateServiceServer")
}

// mustEmbedUnimplementedStorageKMSPrivateServiceServer indicates an expected call of mustEmbedUnimplementedStorageKMSPrivateServiceServer.
func (mr *MockStorageKMSPrivateServiceServerMockRecorder) mustEmbedUnimplementedStorageKMSPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageKMSPrivateServiceServer", reflect.TypeOf((*MockStorageKMSPrivateServiceServer)(nil).mustEmbedUnimplementedStorageKMSPrivateServiceServer))
}

// MockUnsafeStorageKMSPrivateServiceServer is a mock of UnsafeStorageKMSPrivateServiceServer interface.
type MockUnsafeStorageKMSPrivateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStorageKMSPrivateServiceServerMockRecorder
}

// MockUnsafeStorageKMSPrivateServiceServerMockRecorder is the mock recorder for MockUnsafeStorageKMSPrivateServiceServer.
type MockUnsafeStorageKMSPrivateServiceServerMockRecorder struct {
	mock *MockUnsafeStorageKMSPrivateServiceServer
}

// NewMockUnsafeStorageKMSPrivateServiceServer creates a new mock instance.
func NewMockUnsafeStorageKMSPrivateServiceServer(ctrl *gomock.Controller) *MockUnsafeStorageKMSPrivateServiceServer {
	mock := &MockUnsafeStorageKMSPrivateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStorageKMSPrivateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStorageKMSPrivateServiceServer) EXPECT() *MockUnsafeStorageKMSPrivateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStorageKMSPrivateServiceServer mocks base method.
func (m *MockUnsafeStorageKMSPrivateServiceServer) mustEmbedUnimplementedStorageKMSPrivateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageKMSPrivateServiceServer")
}

// mustEmbedUnimplementedStorageKMSPrivateServiceServer indicates an expected call of mustEmbedUnimplementedStorageKMSPrivateServiceServer.
func (mr *MockUnsafeStorageKMSPrivateServiceServerMockRecorder) mustEmbedUnimplementedStorageKMSPrivateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageKMSPrivateServiceServer", reflect.TypeOf((*MockUnsafeStorageKMSPrivateServiceServer)(nil).mustEmbedUnimplementedStorageKMSPrivateServiceServer))
}
