// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: storage_admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageAdminServiceClient is the client API for StorageAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageAdminServiceClient interface {
	// GetResourceUsage returns the usage for a cloudaccount
	GetResourceUsage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StorageGetResourceUsageResponse, error)
	InsertStorageQuotaByAccount(ctx context.Context, in *InsertStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*StorageQuotaByAccount, error)
	UpdateStorageQuotaByAccount(ctx context.Context, in *UpdateStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*StorageQuotaByAccount, error)
	DeleteStorageQuotaByAccount(ctx context.Context, in *DeleteStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStorageQuotaByAccount(ctx context.Context, in *GetStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*StorageQuotasByAccount, error)
	GetAllStorageQuota(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StorageQuotas, error)
}

type storageAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageAdminServiceClient(cc grpc.ClientConnInterface) StorageAdminServiceClient {
	return &storageAdminServiceClient{cc}
}

func (c *storageAdminServiceClient) GetResourceUsage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StorageGetResourceUsageResponse, error) {
	out := new(StorageGetResourceUsageResponse)
	err := c.cc.Invoke(ctx, "/proto.StorageAdminService/GetResourceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAdminServiceClient) InsertStorageQuotaByAccount(ctx context.Context, in *InsertStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*StorageQuotaByAccount, error) {
	out := new(StorageQuotaByAccount)
	err := c.cc.Invoke(ctx, "/proto.StorageAdminService/InsertStorageQuotaByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAdminServiceClient) UpdateStorageQuotaByAccount(ctx context.Context, in *UpdateStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*StorageQuotaByAccount, error) {
	out := new(StorageQuotaByAccount)
	err := c.cc.Invoke(ctx, "/proto.StorageAdminService/UpdateStorageQuotaByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAdminServiceClient) DeleteStorageQuotaByAccount(ctx context.Context, in *DeleteStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.StorageAdminService/DeleteStorageQuotaByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAdminServiceClient) GetStorageQuotaByAccount(ctx context.Context, in *GetStorageQuotaByAccountRequest, opts ...grpc.CallOption) (*StorageQuotasByAccount, error) {
	out := new(StorageQuotasByAccount)
	err := c.cc.Invoke(ctx, "/proto.StorageAdminService/GetStorageQuotaByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAdminServiceClient) GetAllStorageQuota(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StorageQuotas, error) {
	out := new(StorageQuotas)
	err := c.cc.Invoke(ctx, "/proto.StorageAdminService/GetAllStorageQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageAdminServiceServer is the server API for StorageAdminService service.
// All implementations must embed UnimplementedStorageAdminServiceServer
// for forward compatibility
type StorageAdminServiceServer interface {
	// GetResourceUsage returns the usage for a cloudaccount
	GetResourceUsage(context.Context, *emptypb.Empty) (*StorageGetResourceUsageResponse, error)
	InsertStorageQuotaByAccount(context.Context, *InsertStorageQuotaByAccountRequest) (*StorageQuotaByAccount, error)
	UpdateStorageQuotaByAccount(context.Context, *UpdateStorageQuotaByAccountRequest) (*StorageQuotaByAccount, error)
	DeleteStorageQuotaByAccount(context.Context, *DeleteStorageQuotaByAccountRequest) (*emptypb.Empty, error)
	GetStorageQuotaByAccount(context.Context, *GetStorageQuotaByAccountRequest) (*StorageQuotasByAccount, error)
	GetAllStorageQuota(context.Context, *emptypb.Empty) (*StorageQuotas, error)
	mustEmbedUnimplementedStorageAdminServiceServer()
}

// UnimplementedStorageAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageAdminServiceServer struct {
}

func (UnimplementedStorageAdminServiceServer) GetResourceUsage(context.Context, *emptypb.Empty) (*StorageGetResourceUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceUsage not implemented")
}
func (UnimplementedStorageAdminServiceServer) InsertStorageQuotaByAccount(context.Context, *InsertStorageQuotaByAccountRequest) (*StorageQuotaByAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertStorageQuotaByAccount not implemented")
}
func (UnimplementedStorageAdminServiceServer) UpdateStorageQuotaByAccount(context.Context, *UpdateStorageQuotaByAccountRequest) (*StorageQuotaByAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageQuotaByAccount not implemented")
}
func (UnimplementedStorageAdminServiceServer) DeleteStorageQuotaByAccount(context.Context, *DeleteStorageQuotaByAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageQuotaByAccount not implemented")
}
func (UnimplementedStorageAdminServiceServer) GetStorageQuotaByAccount(context.Context, *GetStorageQuotaByAccountRequest) (*StorageQuotasByAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageQuotaByAccount not implemented")
}
func (UnimplementedStorageAdminServiceServer) GetAllStorageQuota(context.Context, *emptypb.Empty) (*StorageQuotas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStorageQuota not implemented")
}
func (UnimplementedStorageAdminServiceServer) mustEmbedUnimplementedStorageAdminServiceServer() {}

// UnsafeStorageAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageAdminServiceServer will
// result in compilation errors.
type UnsafeStorageAdminServiceServer interface {
	mustEmbedUnimplementedStorageAdminServiceServer()
}

func RegisterStorageAdminServiceServer(s grpc.ServiceRegistrar, srv StorageAdminServiceServer) {
	s.RegisterService(&StorageAdminService_ServiceDesc, srv)
}

func _StorageAdminService_GetResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdminServiceServer).GetResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageAdminService/GetResourceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdminServiceServer).GetResourceUsage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAdminService_InsertStorageQuotaByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertStorageQuotaByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdminServiceServer).InsertStorageQuotaByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageAdminService/InsertStorageQuotaByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdminServiceServer).InsertStorageQuotaByAccount(ctx, req.(*InsertStorageQuotaByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAdminService_UpdateStorageQuotaByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageQuotaByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdminServiceServer).UpdateStorageQuotaByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageAdminService/UpdateStorageQuotaByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdminServiceServer).UpdateStorageQuotaByAccount(ctx, req.(*UpdateStorageQuotaByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAdminService_DeleteStorageQuotaByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageQuotaByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdminServiceServer).DeleteStorageQuotaByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageAdminService/DeleteStorageQuotaByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdminServiceServer).DeleteStorageQuotaByAccount(ctx, req.(*DeleteStorageQuotaByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAdminService_GetStorageQuotaByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageQuotaByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdminServiceServer).GetStorageQuotaByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageAdminService/GetStorageQuotaByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdminServiceServer).GetStorageQuotaByAccount(ctx, req.(*GetStorageQuotaByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAdminService_GetAllStorageQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdminServiceServer).GetAllStorageQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageAdminService/GetAllStorageQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdminServiceServer).GetAllStorageQuota(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageAdminService_ServiceDesc is the grpc.ServiceDesc for StorageAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StorageAdminService",
	HandlerType: (*StorageAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceUsage",
			Handler:    _StorageAdminService_GetResourceUsage_Handler,
		},
		{
			MethodName: "InsertStorageQuotaByAccount",
			Handler:    _StorageAdminService_InsertStorageQuotaByAccount_Handler,
		},
		{
			MethodName: "UpdateStorageQuotaByAccount",
			Handler:    _StorageAdminService_UpdateStorageQuotaByAccount_Handler,
		},
		{
			MethodName: "DeleteStorageQuotaByAccount",
			Handler:    _StorageAdminService_DeleteStorageQuotaByAccount_Handler,
		},
		{
			MethodName: "GetStorageQuotaByAccount",
			Handler:    _StorageAdminService_GetStorageQuotaByAccount_Handler,
		},
		{
			MethodName: "GetAllStorageQuota",
			Handler:    _StorageAdminService_GetAllStorageQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_admin.proto",
}
