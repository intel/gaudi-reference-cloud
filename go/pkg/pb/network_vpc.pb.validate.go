// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network_vpc.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VPCCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCCreateRequestMultiError, or nil if none found.
func (m *VPCCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCCreateRequestMultiError(errors)
	}

	return nil
}

// VPCCreateRequestMultiError is an error wrapping multiple validation errors
// returned by VPCCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type VPCCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCCreateRequestMultiError) AllErrors() []error { return m }

// VPCCreateRequestValidationError is the validation error returned by
// VPCCreateRequest.Validate if the designated constraints aren't met.
type VPCCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCCreateRequestValidationError) ErrorName() string { return "VPCCreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e VPCCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCCreateRequestValidationError{}

// Validate checks the field values on VPCGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VPCGetRequestMultiError, or
// nil if none found.
func (m *VPCGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCGetRequestMultiError(errors)
	}

	return nil
}

// VPCGetRequestMultiError is an error wrapping multiple validation errors
// returned by VPCGetRequest.ValidateAll() if the designated constraints
// aren't met.
type VPCGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCGetRequestMultiError) AllErrors() []error { return m }

// VPCGetRequestValidationError is the validation error returned by
// VPCGetRequest.Validate if the designated constraints aren't met.
type VPCGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCGetRequestValidationError) ErrorName() string { return "VPCGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e VPCGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCGetRequestValidationError{}

// Validate checks the field values on VPCSearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCSearchRequestMultiError, or nil if none found.
func (m *VPCSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCSearchRequestMultiError(errors)
	}

	return nil
}

// VPCSearchRequestMultiError is an error wrapping multiple validation errors
// returned by VPCSearchRequest.ValidateAll() if the designated constraints
// aren't met.
type VPCSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCSearchRequestMultiError) AllErrors() []error { return m }

// VPCSearchRequestValidationError is the validation error returned by
// VPCSearchRequest.Validate if the designated constraints aren't met.
type VPCSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCSearchRequestValidationError) ErrorName() string { return "VPCSearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e VPCSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCSearchRequestValidationError{}

// Validate checks the field values on VPCMetadataSearch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCMetadataSearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCMetadataSearchMultiError, or nil if none found.
func (m *VPCMetadataSearch) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCMetadataSearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return VPCMetadataSearchMultiError(errors)
	}

	return nil
}

// VPCMetadataSearchMultiError is an error wrapping multiple validation errors
// returned by VPCMetadataSearch.ValidateAll() if the designated constraints
// aren't met.
type VPCMetadataSearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMetadataSearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMetadataSearchMultiError) AllErrors() []error { return m }

// VPCMetadataSearchValidationError is the validation error returned by
// VPCMetadataSearch.Validate if the designated constraints aren't met.
type VPCMetadataSearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCMetadataSearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCMetadataSearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCMetadataSearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCMetadataSearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCMetadataSearchValidationError) ErrorName() string {
	return "VPCMetadataSearchValidationError"
}

// Error satisfies the builtin error interface
func (e VPCMetadataSearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCMetadataSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCMetadataSearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCMetadataSearchValidationError{}

// Validate checks the field values on VPCSearchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCSearchResponseMultiError, or nil if none found.
func (m *VPCSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VPCSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VPCSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VPCSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VPCSearchResponseMultiError(errors)
	}

	return nil
}

// VPCSearchResponseMultiError is an error wrapping multiple validation errors
// returned by VPCSearchResponse.ValidateAll() if the designated constraints
// aren't met.
type VPCSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCSearchResponseMultiError) AllErrors() []error { return m }

// VPCSearchResponseValidationError is the validation error returned by
// VPCSearchResponse.Validate if the designated constraints aren't met.
type VPCSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCSearchResponseValidationError) ErrorName() string {
	return "VPCSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VPCSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCSearchResponseValidationError{}

// Validate checks the field values on VPCMetadataCreate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCMetadataCreateMultiError, or nil if none found.
func (m *VPCMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return VPCMetadataCreateMultiError(errors)
	}

	return nil
}

// VPCMetadataCreateMultiError is an error wrapping multiple validation errors
// returned by VPCMetadataCreate.ValidateAll() if the designated constraints
// aren't met.
type VPCMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMetadataCreateMultiError) AllErrors() []error { return m }

// VPCMetadataCreateValidationError is the validation error returned by
// VPCMetadataCreate.Validate if the designated constraints aren't met.
type VPCMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCMetadataCreateValidationError) ErrorName() string {
	return "VPCMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e VPCMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCMetadataCreateValidationError{}

// Validate checks the field values on VPC with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *VPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPC with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VPCMultiError, or nil if none found.
func (m *VPC) ValidateAll() error {
	return m.validate(true)
}

func (m *VPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCMultiError(errors)
	}

	return nil
}

// VPCMultiError is an error wrapping multiple validation errors returned by
// VPC.ValidateAll() if the designated constraints aren't met.
type VPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMultiError) AllErrors() []error { return m }

// VPCValidationError is the validation error returned by VPC.Validate if the
// designated constraints aren't met.
type VPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCValidationError) ErrorName() string { return "VPCValidationError" }

// Error satisfies the builtin error interface
func (e VPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCValidationError{}

// Validate checks the field values on VPCMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VPCMetadataMultiError, or
// nil if none found.
func (m *VPCMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCMetadataValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCMetadataMultiError(errors)
	}

	return nil
}

// VPCMetadataMultiError is an error wrapping multiple validation errors
// returned by VPCMetadata.ValidateAll() if the designated constraints aren't met.
type VPCMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMetadataMultiError) AllErrors() []error { return m }

// VPCMetadataValidationError is the validation error returned by
// VPCMetadata.Validate if the designated constraints aren't met.
type VPCMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCMetadataValidationError) ErrorName() string { return "VPCMetadataValidationError" }

// Error satisfies the builtin error interface
func (e VPCMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCMetadataValidationError{}

// Validate checks the field values on VPCSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VPCSpecMultiError, or nil if none found.
func (m *VPCSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CidrBlock

	if len(errors) > 0 {
		return VPCSpecMultiError(errors)
	}

	return nil
}

// VPCSpecMultiError is an error wrapping multiple validation errors returned
// by VPCSpec.ValidateAll() if the designated constraints aren't met.
type VPCSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCSpecMultiError) AllErrors() []error { return m }

// VPCSpecValidationError is the validation error returned by VPCSpec.Validate
// if the designated constraints aren't met.
type VPCSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCSpecValidationError) ErrorName() string { return "VPCSpecValidationError" }

// Error satisfies the builtin error interface
func (e VPCSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCSpecValidationError{}

// Validate checks the field values on VPCStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VPCStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VPCStatusMultiError, or nil
// if none found.
func (m *VPCStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if len(errors) > 0 {
		return VPCStatusMultiError(errors)
	}

	return nil
}

// VPCStatusMultiError is an error wrapping multiple validation errors returned
// by VPCStatus.ValidateAll() if the designated constraints aren't met.
type VPCStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCStatusMultiError) AllErrors() []error { return m }

// VPCStatusValidationError is the validation error returned by
// VPCStatus.Validate if the designated constraints aren't met.
type VPCStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCStatusValidationError) ErrorName() string { return "VPCStatusValidationError" }

// Error satisfies the builtin error interface
func (e VPCStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCStatusValidationError{}

// Validate checks the field values on VPCDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCDeleteRequestMultiError, or nil if none found.
func (m *VPCDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCDeleteRequestMultiError(errors)
	}

	return nil
}

// VPCDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by VPCDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type VPCDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCDeleteRequestMultiError) AllErrors() []error { return m }

// VPCDeleteRequestValidationError is the validation error returned by
// VPCDeleteRequest.Validate if the designated constraints aren't met.
type VPCDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCDeleteRequestValidationError) ErrorName() string { return "VPCDeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e VPCDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCDeleteRequestValidationError{}

// Validate checks the field values on VPCMetadataReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VPCMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCMetadataReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCMetadataReferenceMultiError, or nil if none found.
func (m *VPCMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Reserved1

	switch v := m.NameOrId.(type) {
	case *VPCMetadataReference_ResourceId:
		if v == nil {
			err := VPCMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	case *VPCMetadataReference_Name:
		if v == nil {
			err := VPCMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return VPCMetadataReferenceMultiError(errors)
	}

	return nil
}

// VPCMetadataReferenceMultiError is an error wrapping multiple validation
// errors returned by VPCMetadataReference.ValidateAll() if the designated
// constraints aren't met.
type VPCMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMetadataReferenceMultiError) AllErrors() []error { return m }

// VPCMetadataReferenceValidationError is the validation error returned by
// VPCMetadataReference.Validate if the designated constraints aren't met.
type VPCMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCMetadataReferenceValidationError) ErrorName() string {
	return "VPCMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e VPCMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCMetadataReferenceValidationError{}

// Validate checks the field values on VPCUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCUpdateRequestMultiError, or nil if none found.
func (m *VPCUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VPCUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VPCUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VPCUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VPCUpdateRequestMultiError(errors)
	}

	return nil
}

// VPCUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by VPCUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type VPCUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCUpdateRequestMultiError) AllErrors() []error { return m }

// VPCUpdateRequestValidationError is the validation error returned by
// VPCUpdateRequest.Validate if the designated constraints aren't met.
type VPCUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCUpdateRequestValidationError) ErrorName() string { return "VPCUpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e VPCUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCUpdateRequestValidationError{}

// Validate checks the field values on VPCMetadataUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VPCMetadataUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VPCMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VPCMetadataUpdateMultiError, or nil if none found.
func (m *VPCMetadataUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *VPCMetadataUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	// no validation rules for Reserved1

	switch v := m.NameOrId.(type) {
	case *VPCMetadataUpdate_Name:
		if v == nil {
			err := VPCMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *VPCMetadataUpdate_ResourceId:
		if v == nil {
			err := VPCMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return VPCMetadataUpdateMultiError(errors)
	}

	return nil
}

// VPCMetadataUpdateMultiError is an error wrapping multiple validation errors
// returned by VPCMetadataUpdate.ValidateAll() if the designated constraints
// aren't met.
type VPCMetadataUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VPCMetadataUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VPCMetadataUpdateMultiError) AllErrors() []error { return m }

// VPCMetadataUpdateValidationError is the validation error returned by
// VPCMetadataUpdate.Validate if the designated constraints aren't met.
type VPCMetadataUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCMetadataUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCMetadataUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCMetadataUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCMetadataUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCMetadataUpdateValidationError) ErrorName() string {
	return "VPCMetadataUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e VPCMetadataUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCMetadataUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCMetadataUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCMetadataUpdateValidationError{}
