// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: cloudcredits.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudCreditReason int32

const (
	CloudCreditReason_CREDITS_UNSPECIFIED CloudCreditReason = 0
	CloudCreditReason_CREDITS_INITIAL     CloudCreditReason = 1
	CloudCreditReason_CREDITS_PURCHASED   CloudCreditReason = 2
	CloudCreditReason_CREDITS_COUPON      CloudCreditReason = 3
)

// Enum value maps for CloudCreditReason.
var (
	CloudCreditReason_name = map[int32]string{
		0: "CREDITS_UNSPECIFIED",
		1: "CREDITS_INITIAL",
		2: "CREDITS_PURCHASED",
		3: "CREDITS_COUPON",
	}
	CloudCreditReason_value = map[string]int32{
		"CREDITS_UNSPECIFIED": 0,
		"CREDITS_INITIAL":     1,
		"CREDITS_PURCHASED":   2,
		"CREDITS_COUPON":      3,
	}
)

func (x CloudCreditReason) Enum() *CloudCreditReason {
	p := new(CloudCreditReason)
	*p = x
	return p
}

func (x CloudCreditReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudCreditReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudcredits_proto_enumTypes[0].Descriptor()
}

func (CloudCreditReason) Type() protoreflect.EnumType {
	return &file_cloudcredits_proto_enumTypes[0]
}

func (x CloudCreditReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudCreditReason.Descriptor instead.
func (CloudCreditReason) EnumDescriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{0}
}

type CloudCreditsState int32

const (
	CloudCreditsState_CLOUD_CREDITS_STATE_UNSPECIFIED       CloudCreditsState = 0
	CloudCreditsState_CLOUD_CREDITS_STATE_AVAILABLE         CloudCreditsState = 1
	CloudCreditsState_CLOUD_CREDITS_STATE_THRESHOLD_REACHED CloudCreditsState = 2
	CloudCreditsState_CLOUD_CREDITS_STATE_USED              CloudCreditsState = 3
	CloudCreditsState_CLOUD_CREDITS_STATE_EXPIRED           CloudCreditsState = 4
	CloudCreditsState_CLOUD_CREDITS_STATE_OUTDATED          CloudCreditsState = 5
)

// Enum value maps for CloudCreditsState.
var (
	CloudCreditsState_name = map[int32]string{
		0: "CLOUD_CREDITS_STATE_UNSPECIFIED",
		1: "CLOUD_CREDITS_STATE_AVAILABLE",
		2: "CLOUD_CREDITS_STATE_THRESHOLD_REACHED",
		3: "CLOUD_CREDITS_STATE_USED",
		4: "CLOUD_CREDITS_STATE_EXPIRED",
		5: "CLOUD_CREDITS_STATE_OUTDATED",
	}
	CloudCreditsState_value = map[string]int32{
		"CLOUD_CREDITS_STATE_UNSPECIFIED":       0,
		"CLOUD_CREDITS_STATE_AVAILABLE":         1,
		"CLOUD_CREDITS_STATE_THRESHOLD_REACHED": 2,
		"CLOUD_CREDITS_STATE_USED":              3,
		"CLOUD_CREDITS_STATE_EXPIRED":           4,
		"CLOUD_CREDITS_STATE_OUTDATED":          5,
	}
)

func (x CloudCreditsState) Enum() *CloudCreditsState {
	p := new(CloudCreditsState)
	*p = x
	return p
}

func (x CloudCreditsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudCreditsState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudcredits_proto_enumTypes[1].Descriptor()
}

func (CloudCreditsState) Type() protoreflect.EnumType {
	return &file_cloudcredits_proto_enumTypes[1]
}

func (x CloudCreditsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudCreditsState.Descriptor instead.
func (CloudCreditsState) EnumDescriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{1}
}

type CouponFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     *string                `protobuf:"bytes,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Redeemed *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=redeemed,proto3,oneof" json:"redeemed,omitempty"`
	Creator  *string                `protobuf:"bytes,3,opt,name=creator,proto3,oneof" json:"creator,omitempty"`
}

func (x *CouponFilter) Reset() {
	*x = CouponFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponFilter) ProtoMessage() {}

func (x *CouponFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponFilter.ProtoReflect.Descriptor instead.
func (*CouponFilter) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{0}
}

func (x *CouponFilter) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *CouponFilter) GetRedeemed() *timestamppb.Timestamp {
	if x != nil {
		return x.Redeemed
	}
	return nil
}

func (x *CouponFilter) GetCreator() string {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return ""
}

type CouponResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coupons     []*Coupon           `protobuf:"bytes,1,rep,name=coupons,proto3" json:"coupons,omitempty"`
	Redemptions []*CouponRedemption `protobuf:"bytes,2,rep,name=redemptions,proto3" json:"redemptions,omitempty"`
}

func (x *CouponResponse) Reset() {
	*x = CouponResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponResponse) ProtoMessage() {}

func (x *CouponResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponResponse.ProtoReflect.Descriptor instead.
func (*CouponResponse) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{1}
}

func (x *CouponResponse) GetCoupons() []*Coupon {
	if x != nil {
		return x.Coupons
	}
	return nil
}

func (x *CouponResponse) GetRedemptions() []*CouponRedemption {
	if x != nil {
		return x.Redemptions
	}
	return nil
}

type CloudCreditsCouponRedeem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CloudAccountId string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *CloudCreditsCouponRedeem) Reset() {
	*x = CloudCreditsCouponRedeem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudCreditsCouponRedeem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCreditsCouponRedeem) ProtoMessage() {}

func (x *CloudCreditsCouponRedeem) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCreditsCouponRedeem.ProtoReflect.Descriptor instead.
func (*CloudCreditsCouponRedeem) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{2}
}

func (x *CloudCreditsCouponRedeem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CloudCreditsCouponRedeem) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type CouponDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Disabled *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *CouponDisable) Reset() {
	*x = CouponDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponDisable) ProtoMessage() {}

func (x *CouponDisable) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponDisable.ProtoReflect.Descriptor instead.
func (*CouponDisable) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{3}
}

func (x *CouponDisable) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CouponDisable) GetDisabled() *timestamppb.Timestamp {
	if x != nil {
		return x.Disabled
	}
	return nil
}

type CouponCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	Expires    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
	Amount     uint32                 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	NumUses    uint32                 `protobuf:"varint,6,opt,name=numUses,proto3" json:"numUses,omitempty"`
	Creator    string                 `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	IsStandard *bool                  `protobuf:"varint,8,opt,name=isStandard,proto3,oneof" json:"isStandard,omitempty"`
}

func (x *CouponCreate) Reset() {
	*x = CouponCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponCreate) ProtoMessage() {}

func (x *CouponCreate) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponCreate.ProtoReflect.Descriptor instead.
func (*CouponCreate) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{4}
}

func (x *CouponCreate) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CouponCreate) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *CouponCreate) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CouponCreate) GetNumUses() uint32 {
	if x != nil {
		return x.NumUses
	}
	return 0
}

func (x *CouponCreate) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CouponCreate) GetIsStandard() bool {
	if x != nil && x.IsStandard != nil {
		return *x.IsStandard
	}
	return false
}

type CouponRedemption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CloudAccountId string                 `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Redeemed       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=redeemed,proto3" json:"redeemed,omitempty"`
	Installed      bool                   `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty"`
	Creator        string                 `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *CouponRedemption) Reset() {
	*x = CouponRedemption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponRedemption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponRedemption) ProtoMessage() {}

func (x *CouponRedemption) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponRedemption.ProtoReflect.Descriptor instead.
func (*CouponRedemption) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{5}
}

func (x *CouponRedemption) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CouponRedemption) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CouponRedemption) GetRedeemed() *timestamppb.Timestamp {
	if x != nil {
		return x.Redeemed
	}
	return nil
}

func (x *CouponRedemption) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *CouponRedemption) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type Coupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Creator     string                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Start       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	Expires     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expires,proto3" json:"expires,omitempty"`
	Disabled    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Amount      uint32                 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	NumUses     uint32                 `protobuf:"varint,8,opt,name=numUses,proto3" json:"numUses,omitempty"`
	NumRedeemed uint32                 `protobuf:"varint,9,opt,name=numRedeemed,proto3" json:"numRedeemed,omitempty"`
	Redemptions []*CouponRedemption    `protobuf:"bytes,10,rep,name=redemptions,proto3" json:"redemptions,omitempty"`
	IsStandard  *bool                  `protobuf:"varint,11,opt,name=isStandard,proto3,oneof" json:"isStandard,omitempty"`
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{6}
}

func (x *Coupon) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Coupon) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Coupon) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Coupon) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Coupon) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *Coupon) GetDisabled() *timestamppb.Timestamp {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *Coupon) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Coupon) GetNumUses() uint32 {
	if x != nil {
		return x.NumUses
	}
	return 0
}

func (x *Coupon) GetNumRedeemed() uint32 {
	if x != nil {
		return x.NumRedeemed
	}
	return 0
}

func (x *Coupon) GetRedemptions() []*CouponRedemption {
	if x != nil {
		return x.Redemptions
	}
	return nil
}

func (x *Coupon) GetIsStandard() bool {
	if x != nil && x.IsStandard != nil {
		return *x.IsStandard
	}
	return false
}

type CreditInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Expiry          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	CloudAccountId  string                 `protobuf:"bytes,4,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	OriginalAmount  float64                `protobuf:"fixed64,5,opt,name=originalAmount,proto3" json:"originalAmount,omitempty"`
	CouponCode      string                 `protobuf:"bytes,6,opt,name=couponCode,proto3" json:"couponCode,omitempty"`
	RemainingAmount float64                `protobuf:"fixed64,7,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	Reason          CloudCreditReason      `protobuf:"varint,8,opt,name=reason,proto3,enum=proto.CloudCreditReason" json:"reason,omitempty"`
}

func (x *CreditInstall) Reset() {
	*x = CreditInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditInstall) ProtoMessage() {}

func (x *CreditInstall) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditInstall.ProtoReflect.Descriptor instead.
func (*CreditInstall) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{7}
}

func (x *CreditInstall) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreditInstall) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *CreditInstall) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CreditInstall) GetOriginalAmount() float64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *CreditInstall) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *CreditInstall) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *CreditInstall) GetReason() CloudCreditReason {
	if x != nil {
		return x.Reason
	}
	return CloudCreditReason_CREDITS_UNSPECIFIED
}

type CreditFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	History        *bool  `protobuf:"varint,2,opt,name=history,proto3,oneof" json:"history,omitempty"`
}

func (x *CreditFilter) Reset() {
	*x = CreditFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditFilter) ProtoMessage() {}

func (x *CreditFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditFilter.ProtoReflect.Descriptor instead.
func (*CreditFilter) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{8}
}

func (x *CreditFilter) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CreditFilter) GetHistory() bool {
	if x != nil && x.History != nil {
		return *x.History
	}
	return false
}

type CreditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRemainingAmount float64                `protobuf:"fixed64,1,opt,name=totalRemainingAmount,proto3" json:"totalRemainingAmount,omitempty"`
	TotalUsedAmount      float64                `protobuf:"fixed64,2,opt,name=totalUsedAmount,proto3" json:"totalUsedAmount,omitempty"`
	TotalUnAppliedAmount float64                `protobuf:"fixed64,3,opt,name=totalUnAppliedAmount,proto3" json:"totalUnAppliedAmount,omitempty"`
	LastUpdated          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	ExpirationDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	Credits              []*Credit              `protobuf:"bytes,6,rep,name=credits,proto3" json:"credits,omitempty"`
}

func (x *CreditResponse) Reset() {
	*x = CreditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditResponse) ProtoMessage() {}

func (x *CreditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditResponse.ProtoReflect.Descriptor instead.
func (*CreditResponse) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{9}
}

func (x *CreditResponse) GetTotalRemainingAmount() float64 {
	if x != nil {
		return x.TotalRemainingAmount
	}
	return 0
}

func (x *CreditResponse) GetTotalUsedAmount() float64 {
	if x != nil {
		return x.TotalUsedAmount
	}
	return 0
}

func (x *CreditResponse) GetTotalUnAppliedAmount() float64 {
	if x != nil {
		return x.TotalUnAppliedAmount
	}
	return 0
}

func (x *CreditResponse) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *CreditResponse) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *CreditResponse) GetCredits() []*Credit {
	if x != nil {
		return x.Credits
	}
	return nil
}

type Credit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	Expiration      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	CloudAccountId  string                 `protobuf:"bytes,4,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	OriginalAmount  float64                `protobuf:"fixed64,5,opt,name=originalAmount,proto3" json:"originalAmount,omitempty"`
	RemainingAmount float64                `protobuf:"fixed64,6,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	CouponCode      string                 `protobuf:"bytes,7,opt,name=couponCode,proto3" json:"couponCode,omitempty"`
	AmountUsed      float64                `protobuf:"fixed64,8,opt,name=amountUsed,proto3" json:"amountUsed,omitempty"`
	Reason          CloudCreditReason      `protobuf:"varint,9,opt,name=reason,proto3,enum=proto.CloudCreditReason" json:"reason,omitempty"`
}

func (x *Credit) Reset() {
	*x = Credit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credit) ProtoMessage() {}

func (x *Credit) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credit.ProtoReflect.Descriptor instead.
func (*Credit) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{10}
}

func (x *Credit) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Credit) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Credit) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *Credit) GetOriginalAmount() float64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *Credit) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *Credit) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *Credit) GetAmountUsed() float64 {
	if x != nil {
		return x.AmountUsed
	}
	return 0
}

func (x *Credit) GetReason() CloudCreditReason {
	if x != nil {
		return x.Reason
	}
	return CloudCreditReason_CREDITS_UNSPECIFIED
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{11}
}

func (x *Account) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type UnappliedCreditBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnappliedAmount float64 `protobuf:"fixed64,1,opt,name=unappliedAmount,proto3" json:"unappliedAmount,omitempty"`
}

func (x *UnappliedCreditBalance) Reset() {
	*x = UnappliedCreditBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnappliedCreditBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnappliedCreditBalance) ProtoMessage() {}

func (x *UnappliedCreditBalance) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnappliedCreditBalance.ProtoReflect.Descriptor instead.
func (*UnappliedCreditBalance) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{12}
}

func (x *UnappliedCreditBalance) GetUnappliedAmount() float64 {
	if x != nil {
		return x.UnappliedAmount
	}
	return 0
}

type UnappliedCredits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId  string                 `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	RemainingAmount float64                `protobuf:"fixed64,2,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	Expiration      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *UnappliedCredits) Reset() {
	*x = UnappliedCredits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnappliedCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnappliedCredits) ProtoMessage() {}

func (x *UnappliedCredits) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnappliedCredits.ProtoReflect.Descriptor instead.
func (*UnappliedCredits) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{13}
}

func (x *UnappliedCredits) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UnappliedCredits) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *UnappliedCredits) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type MigratedCredits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *MigratedCredits) Reset() {
	*x = MigratedCredits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigratedCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigratedCredits) ProtoMessage() {}

func (x *MigratedCredits) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigratedCredits.ProtoReflect.Descriptor instead.
func (*MigratedCredits) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{14}
}

func (x *MigratedCredits) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type CreditsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string                 `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	State          CloudCreditsState      `protobuf:"varint,2,opt,name=state,proto3,enum=proto.CloudCreditsState" json:"state,omitempty"`
	EventAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=eventAt,proto3" json:"eventAt,omitempty"`
}

func (x *CreditsState) Reset() {
	*x = CreditsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditsState) ProtoMessage() {}

func (x *CreditsState) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditsState.ProtoReflect.Descriptor instead.
func (*CreditsState) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{15}
}

func (x *CreditsState) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CreditsState) GetState() CloudCreditsState {
	if x != nil {
		return x.State
	}
	return CloudCreditsState_CLOUD_CREDITS_STATE_UNSPECIFIED
}

func (x *CreditsState) GetEventAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EventAt
	}
	return nil
}

type CreditsStateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *CreditsStateFilter) Reset() {
	*x = CreditsStateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditsStateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditsStateFilter) ProtoMessage() {}

func (x *CreditsStateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditsStateFilter.ProtoReflect.Descriptor instead.
func (*CreditsStateFilter) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{16}
}

func (x *CreditsStateFilter) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type CreditsStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     CloudCreditsState      `protobuf:"varint,1,opt,name=state,proto3,enum=proto.CloudCreditsState" json:"state,omitempty"`
	EventAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=eventAt,proto3" json:"eventAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CreditsStateResponse) Reset() {
	*x = CreditsStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudcredits_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditsStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditsStateResponse) ProtoMessage() {}

func (x *CreditsStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudcredits_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditsStateResponse.ProtoReflect.Descriptor instead.
func (*CreditsStateResponse) Descriptor() ([]byte, []int) {
	return file_cloudcredits_proto_rawDescGZIP(), []int{17}
}

func (x *CreditsStateResponse) GetState() CloudCreditsState {
	if x != nil {
		return x.State
	}
	return CloudCreditsState_CLOUD_CREDITS_STATE_UNSPECIFIED
}

func (x *CreditsStateResponse) GetEventAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EventAt
	}
	return nil
}

func (x *CreditsStateResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_cloudcredits_proto protoreflect.FileDescriptor

var file_cloudcredits_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x74, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x0b, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5b,
	0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x55, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xcf, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x55, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xcd, 0x02, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xee, 0x02, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3f, 0x0a,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x42,
	0x0a, 0x16, 0x55, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a,
	0x0f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x6c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x53, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x50,
	0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xe7, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x32, 0xe3,
	0x07, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x2f, 0x75, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x48, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x39, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x22, 0x08, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x6e,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x74,
	0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0x32, 0xa9, 0x03, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7d, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x12, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x3a, 0x01,
	0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48,
	0x01, 0x12, 0x51, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x07, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a,
	0x42, 0x55, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudcredits_proto_rawDescOnce sync.Once
	file_cloudcredits_proto_rawDescData = file_cloudcredits_proto_rawDesc
)

func file_cloudcredits_proto_rawDescGZIP() []byte {
	file_cloudcredits_proto_rawDescOnce.Do(func() {
		file_cloudcredits_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudcredits_proto_rawDescData)
	})
	return file_cloudcredits_proto_rawDescData
}

var file_cloudcredits_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloudcredits_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_cloudcredits_proto_goTypes = []interface{}{
	(CloudCreditReason)(0),           // 0: proto.CloudCreditReason
	(CloudCreditsState)(0),           // 1: proto.CloudCreditsState
	(*CouponFilter)(nil),             // 2: proto.CouponFilter
	(*CouponResponse)(nil),           // 3: proto.CouponResponse
	(*CloudCreditsCouponRedeem)(nil), // 4: proto.CloudCreditsCouponRedeem
	(*CouponDisable)(nil),            // 5: proto.CouponDisable
	(*CouponCreate)(nil),             // 6: proto.CouponCreate
	(*CouponRedemption)(nil),         // 7: proto.CouponRedemption
	(*Coupon)(nil),                   // 8: proto.Coupon
	(*CreditInstall)(nil),            // 9: proto.CreditInstall
	(*CreditFilter)(nil),             // 10: proto.CreditFilter
	(*CreditResponse)(nil),           // 11: proto.CreditResponse
	(*Credit)(nil),                   // 12: proto.Credit
	(*Account)(nil),                  // 13: proto.Account
	(*UnappliedCreditBalance)(nil),   // 14: proto.UnappliedCreditBalance
	(*UnappliedCredits)(nil),         // 15: proto.UnappliedCredits
	(*MigratedCredits)(nil),          // 16: proto.MigratedCredits
	(*CreditsState)(nil),             // 17: proto.CreditsState
	(*CreditsStateFilter)(nil),       // 18: proto.CreditsStateFilter
	(*CreditsStateResponse)(nil),     // 19: proto.CreditsStateResponse
	(*timestamppb.Timestamp)(nil),    // 20: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),            // 21: google.protobuf.Empty
}
var file_cloudcredits_proto_depIdxs = []int32{
	20, // 0: proto.CouponFilter.redeemed:type_name -> google.protobuf.Timestamp
	8,  // 1: proto.CouponResponse.coupons:type_name -> proto.Coupon
	7,  // 2: proto.CouponResponse.redemptions:type_name -> proto.CouponRedemption
	20, // 3: proto.CouponDisable.disabled:type_name -> google.protobuf.Timestamp
	20, // 4: proto.CouponCreate.start:type_name -> google.protobuf.Timestamp
	20, // 5: proto.CouponCreate.expires:type_name -> google.protobuf.Timestamp
	20, // 6: proto.CouponRedemption.redeemed:type_name -> google.protobuf.Timestamp
	20, // 7: proto.Coupon.created:type_name -> google.protobuf.Timestamp
	20, // 8: proto.Coupon.start:type_name -> google.protobuf.Timestamp
	20, // 9: proto.Coupon.expires:type_name -> google.protobuf.Timestamp
	20, // 10: proto.Coupon.disabled:type_name -> google.protobuf.Timestamp
	7,  // 11: proto.Coupon.redemptions:type_name -> proto.CouponRedemption
	20, // 12: proto.CreditInstall.createdAt:type_name -> google.protobuf.Timestamp
	20, // 13: proto.CreditInstall.expiry:type_name -> google.protobuf.Timestamp
	0,  // 14: proto.CreditInstall.reason:type_name -> proto.CloudCreditReason
	20, // 15: proto.CreditResponse.lastUpdated:type_name -> google.protobuf.Timestamp
	20, // 16: proto.CreditResponse.expirationDate:type_name -> google.protobuf.Timestamp
	12, // 17: proto.CreditResponse.credits:type_name -> proto.Credit
	20, // 18: proto.Credit.created:type_name -> google.protobuf.Timestamp
	20, // 19: proto.Credit.expiration:type_name -> google.protobuf.Timestamp
	0,  // 20: proto.Credit.reason:type_name -> proto.CloudCreditReason
	20, // 21: proto.UnappliedCredits.expiration:type_name -> google.protobuf.Timestamp
	1,  // 22: proto.CreditsState.state:type_name -> proto.CloudCreditsState
	20, // 23: proto.CreditsState.eventAt:type_name -> google.protobuf.Timestamp
	1,  // 24: proto.CreditsStateResponse.state:type_name -> proto.CloudCreditsState
	20, // 25: proto.CreditsStateResponse.eventAt:type_name -> google.protobuf.Timestamp
	20, // 26: proto.CreditsStateResponse.updatedAt:type_name -> google.protobuf.Timestamp
	21, // 27: proto.CloudCreditsCreditService.Ping:input_type -> google.protobuf.Empty
	12, // 28: proto.CloudCreditsCreditService.Create:input_type -> proto.Credit
	10, // 29: proto.CloudCreditsCreditService.ReadCredits:input_type -> proto.CreditFilter
	13, // 30: proto.CloudCreditsCreditService.ReadUnappliedCreditBalance:input_type -> proto.Account
	13, // 31: proto.CloudCreditsCreditService.ReadInternal:input_type -> proto.Account
	15, // 32: proto.CloudCreditsCreditService.CreditMigrate:input_type -> proto.UnappliedCredits
	16, // 33: proto.CloudCreditsCreditService.DeleteMigratedCredit:input_type -> proto.MigratedCredits
	17, // 34: proto.CloudCreditsCreditService.CreateCreditStateLog:input_type -> proto.CreditsState
	18, // 35: proto.CloudCreditsCreditService.ReadCreditStateLog:input_type -> proto.CreditsStateFilter
	4,  // 36: proto.CloudCreditsCouponService.Redeem:input_type -> proto.CloudCreditsCouponRedeem
	6,  // 37: proto.CloudCreditsCouponService.Create:input_type -> proto.CouponCreate
	2,  // 38: proto.CloudCreditsCouponService.Read:input_type -> proto.CouponFilter
	5,  // 39: proto.CloudCreditsCouponService.Disable:input_type -> proto.CouponDisable
	21, // 40: proto.CloudCreditsCreditService.Ping:output_type -> google.protobuf.Empty
	21, // 41: proto.CloudCreditsCreditService.Create:output_type -> google.protobuf.Empty
	11, // 42: proto.CloudCreditsCreditService.ReadCredits:output_type -> proto.CreditResponse
	14, // 43: proto.CloudCreditsCreditService.ReadUnappliedCreditBalance:output_type -> proto.UnappliedCreditBalance
	12, // 44: proto.CloudCreditsCreditService.ReadInternal:output_type -> proto.Credit
	21, // 45: proto.CloudCreditsCreditService.CreditMigrate:output_type -> google.protobuf.Empty
	21, // 46: proto.CloudCreditsCreditService.DeleteMigratedCredit:output_type -> google.protobuf.Empty
	21, // 47: proto.CloudCreditsCreditService.CreateCreditStateLog:output_type -> google.protobuf.Empty
	19, // 48: proto.CloudCreditsCreditService.ReadCreditStateLog:output_type -> proto.CreditsStateResponse
	21, // 49: proto.CloudCreditsCouponService.Redeem:output_type -> google.protobuf.Empty
	8,  // 50: proto.CloudCreditsCouponService.Create:output_type -> proto.Coupon
	3,  // 51: proto.CloudCreditsCouponService.Read:output_type -> proto.CouponResponse
	21, // 52: proto.CloudCreditsCouponService.Disable:output_type -> google.protobuf.Empty
	40, // [40:53] is the sub-list for method output_type
	27, // [27:40] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_cloudcredits_proto_init() }
func file_cloudcredits_proto_init() {
	if File_cloudcredits_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloudcredits_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudCreditsCouponRedeem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponRedemption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnappliedCreditBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnappliedCredits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigratedCredits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditsStateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudcredits_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditsStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloudcredits_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_cloudcredits_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_cloudcredits_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_cloudcredits_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudcredits_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cloudcredits_proto_goTypes,
		DependencyIndexes: file_cloudcredits_proto_depIdxs,
		EnumInfos:         file_cloudcredits_proto_enumTypes,
		MessageInfos:      file_cloudcredits_proto_msgTypes,
	}.Build()
	File_cloudcredits_proto = out.File
	file_cloudcredits_proto_rawDesc = nil
	file_cloudcredits_proto_goTypes = nil
	file_cloudcredits_proto_depIdxs = nil
}
