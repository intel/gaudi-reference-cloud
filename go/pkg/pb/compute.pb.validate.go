// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: compute.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SshPublicKeyCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SshPublicKeyCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKeyCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshPublicKeyCreateRequestMultiError, or nil if none found.
func (m *SshPublicKeyCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKeyCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SshPublicKeyCreateRequestMultiError(errors)
	}

	return nil
}

// SshPublicKeyCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SshPublicKeyCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type SshPublicKeyCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeyCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeyCreateRequestMultiError) AllErrors() []error { return m }

// SshPublicKeyCreateRequestValidationError is the validation error returned by
// SshPublicKeyCreateRequest.Validate if the designated constraints aren't met.
type SshPublicKeyCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeyCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeyCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeyCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeyCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeyCreateRequestValidationError) ErrorName() string {
	return "SshPublicKeyCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SshPublicKeyCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKeyCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeyCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeyCreateRequestValidationError{}

// Validate checks the field values on SshPublicKeyGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SshPublicKeyGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKeyGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshPublicKeyGetRequestMultiError, or nil if none found.
func (m *SshPublicKeyGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKeyGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SshPublicKeyGetRequestMultiError(errors)
	}

	return nil
}

// SshPublicKeyGetRequestMultiError is an error wrapping multiple validation
// errors returned by SshPublicKeyGetRequest.ValidateAll() if the designated
// constraints aren't met.
type SshPublicKeyGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeyGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeyGetRequestMultiError) AllErrors() []error { return m }

// SshPublicKeyGetRequestValidationError is the validation error returned by
// SshPublicKeyGetRequest.Validate if the designated constraints aren't met.
type SshPublicKeyGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeyGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeyGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeyGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeyGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeyGetRequestValidationError) ErrorName() string {
	return "SshPublicKeyGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SshPublicKeyGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKeyGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeyGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeyGetRequestValidationError{}

// Validate checks the field values on SshPublicKeySearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SshPublicKeySearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKeySearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshPublicKeySearchRequestMultiError, or nil if none found.
func (m *SshPublicKeySearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKeySearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeySearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeySearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeySearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SshPublicKeySearchRequestMultiError(errors)
	}

	return nil
}

// SshPublicKeySearchRequestMultiError is an error wrapping multiple validation
// errors returned by SshPublicKeySearchRequest.ValidateAll() if the
// designated constraints aren't met.
type SshPublicKeySearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeySearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeySearchRequestMultiError) AllErrors() []error { return m }

// SshPublicKeySearchRequestValidationError is the validation error returned by
// SshPublicKeySearchRequest.Validate if the designated constraints aren't met.
type SshPublicKeySearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeySearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeySearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeySearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeySearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeySearchRequestValidationError) ErrorName() string {
	return "SshPublicKeySearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SshPublicKeySearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKeySearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeySearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeySearchRequestValidationError{}

// Validate checks the field values on SshPublicKeySearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SshPublicKeySearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKeySearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshPublicKeySearchResponseMultiError, or nil if none found.
func (m *SshPublicKeySearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKeySearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SshPublicKeySearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SshPublicKeySearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SshPublicKeySearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SshPublicKeySearchResponseMultiError(errors)
	}

	return nil
}

// SshPublicKeySearchResponseMultiError is an error wrapping multiple
// validation errors returned by SshPublicKeySearchResponse.ValidateAll() if
// the designated constraints aren't met.
type SshPublicKeySearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeySearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeySearchResponseMultiError) AllErrors() []error { return m }

// SshPublicKeySearchResponseValidationError is the validation error returned
// by SshPublicKeySearchResponse.Validate if the designated constraints aren't met.
type SshPublicKeySearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeySearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeySearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeySearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeySearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeySearchResponseValidationError) ErrorName() string {
	return "SshPublicKeySearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SshPublicKeySearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKeySearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeySearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeySearchResponseValidationError{}

// Validate checks the field values on SshPublicKeyUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SshPublicKeyUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKeyUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshPublicKeyUpdateRequestMultiError, or nil if none found.
func (m *SshPublicKeyUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKeyUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyUpdateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SshPublicKeyUpdateRequestMultiError(errors)
	}

	return nil
}

// SshPublicKeyUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by SshPublicKeyUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type SshPublicKeyUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeyUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeyUpdateRequestMultiError) AllErrors() []error { return m }

// SshPublicKeyUpdateRequestValidationError is the validation error returned by
// SshPublicKeyUpdateRequest.Validate if the designated constraints aren't met.
type SshPublicKeyUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeyUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeyUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeyUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeyUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeyUpdateRequestValidationError) ErrorName() string {
	return "SshPublicKeyUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SshPublicKeyUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKeyUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeyUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeyUpdateRequestValidationError{}

// Validate checks the field values on SshPublicKeyDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SshPublicKeyDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKeyDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshPublicKeyDeleteRequestMultiError, or nil if none found.
func (m *SshPublicKeyDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKeyDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SshPublicKeyDeleteRequestMultiError(errors)
	}

	return nil
}

// SshPublicKeyDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SshPublicKeyDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type SshPublicKeyDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeyDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeyDeleteRequestMultiError) AllErrors() []error { return m }

// SshPublicKeyDeleteRequestValidationError is the validation error returned by
// SshPublicKeyDeleteRequest.Validate if the designated constraints aren't met.
type SshPublicKeyDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeyDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeyDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeyDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeyDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeyDeleteRequestValidationError) ErrorName() string {
	return "SshPublicKeyDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SshPublicKeyDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKeyDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeyDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeyDeleteRequestValidationError{}

// Validate checks the field values on SshPublicKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SshPublicKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SshPublicKeyMultiError, or
// nil if none found.
func (m *SshPublicKey) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SshPublicKeyValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SshPublicKeyValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SshPublicKeyValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SshPublicKeyMultiError(errors)
	}

	return nil
}

// SshPublicKeyMultiError is an error wrapping multiple validation errors
// returned by SshPublicKey.ValidateAll() if the designated constraints aren't met.
type SshPublicKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeyMultiError) AllErrors() []error { return m }

// SshPublicKeyValidationError is the validation error returned by
// SshPublicKey.Validate if the designated constraints aren't met.
type SshPublicKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeyValidationError) ErrorName() string { return "SshPublicKeyValidationError" }

// Error satisfies the builtin error interface
func (e SshPublicKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeyValidationError{}

// Validate checks the field values on SshPublicKeySpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SshPublicKeySpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshPublicKeySpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshPublicKeySpecMultiError, or nil if none found.
func (m *SshPublicKeySpec) ValidateAll() error {
	return m.validate(true)
}

func (m *SshPublicKeySpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SshPublicKey

	// no validation rules for OwnerEmail

	if len(errors) > 0 {
		return SshPublicKeySpecMultiError(errors)
	}

	return nil
}

// SshPublicKeySpecMultiError is an error wrapping multiple validation errors
// returned by SshPublicKeySpec.ValidateAll() if the designated constraints
// aren't met.
type SshPublicKeySpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshPublicKeySpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshPublicKeySpecMultiError) AllErrors() []error { return m }

// SshPublicKeySpecValidationError is the validation error returned by
// SshPublicKeySpec.Validate if the designated constraints aren't met.
type SshPublicKeySpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshPublicKeySpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshPublicKeySpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshPublicKeySpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshPublicKeySpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshPublicKeySpecValidationError) ErrorName() string { return "SshPublicKeySpecValidationError" }

// Error satisfies the builtin error interface
func (e SshPublicKeySpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshPublicKeySpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshPublicKeySpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshPublicKeySpecValidationError{}

// Validate checks the field values on ResourceMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMetadataMultiError, or nil if none found.
func (m *ResourceMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowDelete

	if len(errors) > 0 {
		return ResourceMetadataMultiError(errors)
	}

	return nil
}

// ResourceMetadataMultiError is an error wrapping multiple validation errors
// returned by ResourceMetadata.ValidateAll() if the designated constraints
// aren't met.
type ResourceMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMetadataMultiError) AllErrors() []error { return m }

// ResourceMetadataValidationError is the validation error returned by
// ResourceMetadata.Validate if the designated constraints aren't met.
type ResourceMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMetadataValidationError) ErrorName() string { return "ResourceMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ResourceMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMetadataValidationError{}

// Validate checks the field values on ResourceMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMetadataCreateMultiError, or nil if none found.
func (m *ResourceMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	if len(errors) > 0 {
		return ResourceMetadataCreateMultiError(errors)
	}

	return nil
}

// ResourceMetadataCreateMultiError is an error wrapping multiple validation
// errors returned by ResourceMetadataCreate.ValidateAll() if the designated
// constraints aren't met.
type ResourceMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMetadataCreateMultiError) AllErrors() []error { return m }

// ResourceMetadataCreateValidationError is the validation error returned by
// ResourceMetadataCreate.Validate if the designated constraints aren't met.
type ResourceMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMetadataCreateValidationError) ErrorName() string {
	return "ResourceMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMetadataCreateValidationError{}

// Validate checks the field values on ResourceMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceMetadataUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMetadataUpdateMultiError, or nil if none found.
func (m *ResourceMetadataUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMetadataUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	switch v := m.NameOrId.(type) {
	case *ResourceMetadataUpdate_Name:
		if v == nil {
			err := ResourceMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *ResourceMetadataUpdate_ResourceId:
		if v == nil {
			err := ResourceMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ResourceMetadataUpdateMultiError(errors)
	}

	return nil
}

// ResourceMetadataUpdateMultiError is an error wrapping multiple validation
// errors returned by ResourceMetadataUpdate.ValidateAll() if the designated
// constraints aren't met.
type ResourceMetadataUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMetadataUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMetadataUpdateMultiError) AllErrors() []error { return m }

// ResourceMetadataUpdateValidationError is the validation error returned by
// ResourceMetadataUpdate.Validate if the designated constraints aren't met.
type ResourceMetadataUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMetadataUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMetadataUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMetadataUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMetadataUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMetadataUpdateValidationError) ErrorName() string {
	return "ResourceMetadataUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceMetadataUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMetadataUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMetadataUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMetadataUpdateValidationError{}

// Validate checks the field values on ResourceMetadataReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMetadataReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMetadataReferenceMultiError, or nil if none found.
func (m *ResourceMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	switch v := m.NameOrId.(type) {
	case *ResourceMetadataReference_Name:
		if v == nil {
			err := ResourceMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *ResourceMetadataReference_ResourceId:
		if v == nil {
			err := ResourceMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ResourceMetadataReferenceMultiError(errors)
	}

	return nil
}

// ResourceMetadataReferenceMultiError is an error wrapping multiple validation
// errors returned by ResourceMetadataReference.ValidateAll() if the
// designated constraints aren't met.
type ResourceMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMetadataReferenceMultiError) AllErrors() []error { return m }

// ResourceMetadataReferenceValidationError is the validation error returned by
// ResourceMetadataReference.Validate if the designated constraints aren't met.
type ResourceMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMetadataReferenceValidationError) ErrorName() string {
	return "ResourceMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMetadataReferenceValidationError{}

// Validate checks the field values on ResourceMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceMetadataSearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMetadataSearchMultiError, or nil if none found.
func (m *ResourceMetadataSearch) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMetadataSearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	if len(errors) > 0 {
		return ResourceMetadataSearchMultiError(errors)
	}

	return nil
}

// ResourceMetadataSearchMultiError is an error wrapping multiple validation
// errors returned by ResourceMetadataSearch.ValidateAll() if the designated
// constraints aren't met.
type ResourceMetadataSearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMetadataSearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMetadataSearchMultiError) AllErrors() []error { return m }

// ResourceMetadataSearchValidationError is the validation error returned by
// ResourceMetadataSearch.Validate if the designated constraints aren't met.
type ResourceMetadataSearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMetadataSearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMetadataSearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMetadataSearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMetadataSearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMetadataSearchValidationError) ErrorName() string {
	return "ResourceMetadataSearchValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceMetadataSearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMetadataSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMetadataSearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMetadataSearchValidationError{}

// Validate checks the field values on InstanceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceCreateRequestMultiError, or nil if none found.
func (m *InstanceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceCreateRequestMultiError(errors)
	}

	return nil
}

// InstanceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceCreateRequestMultiError) AllErrors() []error { return m }

// InstanceCreateRequestValidationError is the validation error returned by
// InstanceCreateRequest.Validate if the designated constraints aren't met.
type InstanceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceCreateRequestValidationError) ErrorName() string {
	return "InstanceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceCreateRequestValidationError{}

// Validate checks the field values on InstanceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGetRequestMultiError, or nil if none found.
func (m *InstanceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGetRequestMultiError(errors)
	}

	return nil
}

// InstanceGetRequestMultiError is an error wrapping multiple validation errors
// returned by InstanceGetRequest.ValidateAll() if the designated constraints
// aren't met.
type InstanceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGetRequestMultiError) AllErrors() []error { return m }

// InstanceGetRequestValidationError is the validation error returned by
// InstanceGetRequest.Validate if the designated constraints aren't met.
type InstanceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGetRequestValidationError) ErrorName() string {
	return "InstanceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGetRequestValidationError{}

// Validate checks the field values on InstanceSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceSearchRequestMultiError, or nil if none found.
func (m *InstanceSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceSearchRequestMultiError(errors)
	}

	return nil
}

// InstanceSearchRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceSearchRequestMultiError) AllErrors() []error { return m }

// InstanceSearchRequestValidationError is the validation error returned by
// InstanceSearchRequest.Validate if the designated constraints aren't met.
type InstanceSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSearchRequestValidationError) ErrorName() string {
	return "InstanceSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSearchRequestValidationError{}

// Validate checks the field values on InstanceSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceSearchResponseMultiError, or nil if none found.
func (m *InstanceSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceSearchResponseMultiError(errors)
	}

	return nil
}

// InstanceSearchResponseMultiError is an error wrapping multiple validation
// errors returned by InstanceSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type InstanceSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceSearchResponseMultiError) AllErrors() []error { return m }

// InstanceSearchResponseValidationError is the validation error returned by
// InstanceSearchResponse.Validate if the designated constraints aren't met.
type InstanceSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSearchResponseValidationError) ErrorName() string {
	return "InstanceSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSearchResponseValidationError{}

// Validate checks the field values on InstanceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceUpdateRequestMultiError, or nil if none found.
func (m *InstanceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceUpdateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceUpdateRequestMultiError(errors)
	}

	return nil
}

// InstanceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceUpdateRequestMultiError) AllErrors() []error { return m }

// InstanceUpdateRequestValidationError is the validation error returned by
// InstanceUpdateRequest.Validate if the designated constraints aren't met.
type InstanceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceUpdateRequestValidationError) ErrorName() string {
	return "InstanceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceUpdateRequestValidationError{}

// Validate checks the field values on InstanceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceDeleteRequestMultiError, or nil if none found.
func (m *InstanceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceDeleteRequestMultiError(errors)
	}

	return nil
}

// InstanceDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceDeleteRequestMultiError) AllErrors() []error { return m }

// InstanceDeleteRequestValidationError is the validation error returned by
// InstanceDeleteRequest.Validate if the designated constraints aren't met.
type InstanceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceDeleteRequestValidationError) ErrorName() string {
	return "InstanceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceDeleteRequestValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Instance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceMultiError, or nil
// if none found.
func (m *Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceMultiError(errors)
	}

	return nil
}

// InstanceMultiError is an error wrapping multiple validation errors returned
// by Instance.ValidateAll() if the designated constraints aren't met.
type InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMultiError) AllErrors() []error { return m }

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on NetworkInterface with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetworkInterface) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkInterface with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetworkInterfaceMultiError, or nil if none found.
func (m *NetworkInterface) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkInterface) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for VNet

	if len(errors) > 0 {
		return NetworkInterfaceMultiError(errors)
	}

	return nil
}

// NetworkInterfaceMultiError is an error wrapping multiple validation errors
// returned by NetworkInterface.ValidateAll() if the designated constraints
// aren't met.
type NetworkInterfaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkInterfaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkInterfaceMultiError) AllErrors() []error { return m }

// NetworkInterfaceValidationError is the validation error returned by
// NetworkInterface.Validate if the designated constraints aren't met.
type NetworkInterfaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkInterfaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkInterfaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkInterfaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkInterfaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkInterfaceValidationError) ErrorName() string { return "NetworkInterfaceValidationError" }

// Error satisfies the builtin error interface
func (e NetworkInterfaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkInterface.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkInterfaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkInterfaceValidationError{}

// Validate checks the field values on LabelSelector with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelSelectorMultiError, or
// nil if none found.
func (m *LabelSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MatchLabels

	if len(errors) > 0 {
		return LabelSelectorMultiError(errors)
	}

	return nil
}

// LabelSelectorMultiError is an error wrapping multiple validation errors
// returned by LabelSelector.ValidateAll() if the designated constraints
// aren't met.
type LabelSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelSelectorMultiError) AllErrors() []error { return m }

// LabelSelectorValidationError is the validation error returned by
// LabelSelector.Validate if the designated constraints aren't met.
type LabelSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelSelectorValidationError) ErrorName() string { return "LabelSelectorValidationError" }

// Error satisfies the builtin error interface
func (e LabelSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelSelectorValidationError{}

// Validate checks the field values on TopologySpreadConstraints with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopologySpreadConstraints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopologySpreadConstraints with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopologySpreadConstraintsMultiError, or nil if none found.
func (m *TopologySpreadConstraints) ValidateAll() error {
	return m.validate(true)
}

func (m *TopologySpreadConstraints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLabelSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopologySpreadConstraintsValidationError{
					field:  "LabelSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopologySpreadConstraintsValidationError{
					field:  "LabelSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabelSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopologySpreadConstraintsValidationError{
				field:  "LabelSelector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TopologySpreadConstraintsMultiError(errors)
	}

	return nil
}

// TopologySpreadConstraintsMultiError is an error wrapping multiple validation
// errors returned by TopologySpreadConstraints.ValidateAll() if the
// designated constraints aren't met.
type TopologySpreadConstraintsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopologySpreadConstraintsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopologySpreadConstraintsMultiError) AllErrors() []error { return m }

// TopologySpreadConstraintsValidationError is the validation error returned by
// TopologySpreadConstraints.Validate if the designated constraints aren't met.
type TopologySpreadConstraintsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopologySpreadConstraintsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopologySpreadConstraintsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopologySpreadConstraintsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopologySpreadConstraintsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopologySpreadConstraintsValidationError) ErrorName() string {
	return "TopologySpreadConstraintsValidationError"
}

// Error satisfies the builtin error interface
func (e TopologySpreadConstraintsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopologySpreadConstraints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopologySpreadConstraintsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopologySpreadConstraintsValidationError{}

// Validate checks the field values on InstanceSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstanceSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceSpecMultiError, or
// nil if none found.
func (m *InstanceSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	// no validation rules for InstanceType

	// no validation rules for MachineImage

	// no validation rules for RunStrategy

	for idx, item := range m.GetInterfaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceSpecValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceSpecValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceSpecValidationError{
					field:  fmt.Sprintf("Interfaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopologySpreadConstraints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceSpecValidationError{
						field:  fmt.Sprintf("TopologySpreadConstraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceSpecValidationError{
						field:  fmt.Sprintf("TopologySpreadConstraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceSpecValidationError{
					field:  fmt.Sprintf("TopologySpreadConstraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserData

	// no validation rules for InstanceGroup

	// no validation rules for QuickConnectEnabled

	if len(errors) > 0 {
		return InstanceSpecMultiError(errors)
	}

	return nil
}

// InstanceSpecMultiError is an error wrapping multiple validation errors
// returned by InstanceSpec.ValidateAll() if the designated constraints aren't met.
type InstanceSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceSpecMultiError) AllErrors() []error { return m }

// InstanceSpecValidationError is the validation error returned by
// InstanceSpec.Validate if the designated constraints aren't met.
type InstanceSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSpecValidationError) ErrorName() string { return "InstanceSpecValidationError" }

// Error satisfies the builtin error interface
func (e InstanceSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSpecValidationError{}

// Validate checks the field values on InstanceMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstanceMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceMetadataMultiError, or nil if none found.
func (m *InstanceMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceMetadataValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceMetadataMultiError(errors)
	}

	return nil
}

// InstanceMetadataMultiError is an error wrapping multiple validation errors
// returned by InstanceMetadata.ValidateAll() if the designated constraints
// aren't met.
type InstanceMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMetadataMultiError) AllErrors() []error { return m }

// InstanceMetadataValidationError is the validation error returned by
// InstanceMetadata.Validate if the designated constraints aren't met.
type InstanceMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceMetadataValidationError) ErrorName() string { return "InstanceMetadataValidationError" }

// Error satisfies the builtin error interface
func (e InstanceMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceMetadataValidationError{}

// Validate checks the field values on InstanceMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceMetadataCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceMetadataCreateMultiError, or nil if none found.
func (m *InstanceMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Reserved1

	// no validation rules for ProductId

	if len(errors) > 0 {
		return InstanceMetadataCreateMultiError(errors)
	}

	return nil
}

// InstanceMetadataCreateMultiError is an error wrapping multiple validation
// errors returned by InstanceMetadataCreate.ValidateAll() if the designated
// constraints aren't met.
type InstanceMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMetadataCreateMultiError) AllErrors() []error { return m }

// InstanceMetadataCreateValidationError is the validation error returned by
// InstanceMetadataCreate.Validate if the designated constraints aren't met.
type InstanceMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceMetadataCreateValidationError) ErrorName() string {
	return "InstanceMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceMetadataCreateValidationError{}

// Validate checks the field values on InstanceMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceMetadataUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceMetadataUpdateMultiError, or nil if none found.
func (m *InstanceMetadataUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceMetadataUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	// no validation rules for Reserved1

	switch v := m.NameOrId.(type) {
	case *InstanceMetadataUpdate_Name:
		if v == nil {
			err := InstanceMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *InstanceMetadataUpdate_ResourceId:
		if v == nil {
			err := InstanceMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InstanceMetadataUpdateMultiError(errors)
	}

	return nil
}

// InstanceMetadataUpdateMultiError is an error wrapping multiple validation
// errors returned by InstanceMetadataUpdate.ValidateAll() if the designated
// constraints aren't met.
type InstanceMetadataUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMetadataUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMetadataUpdateMultiError) AllErrors() []error { return m }

// InstanceMetadataUpdateValidationError is the validation error returned by
// InstanceMetadataUpdate.Validate if the designated constraints aren't met.
type InstanceMetadataUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceMetadataUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceMetadataUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceMetadataUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceMetadataUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceMetadataUpdateValidationError) ErrorName() string {
	return "InstanceMetadataUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceMetadataUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceMetadataUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceMetadataUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceMetadataUpdateValidationError{}

// Validate checks the field values on InstanceMetadataReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceMetadataReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceMetadataReferenceMultiError, or nil if none found.
func (m *InstanceMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Reserved1

	switch v := m.NameOrId.(type) {
	case *InstanceMetadataReference_Name:
		if v == nil {
			err := InstanceMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *InstanceMetadataReference_ResourceId:
		if v == nil {
			err := InstanceMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InstanceMetadataReferenceMultiError(errors)
	}

	return nil
}

// InstanceMetadataReferenceMultiError is an error wrapping multiple validation
// errors returned by InstanceMetadataReference.ValidateAll() if the
// designated constraints aren't met.
type InstanceMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMetadataReferenceMultiError) AllErrors() []error { return m }

// InstanceMetadataReferenceValidationError is the validation error returned by
// InstanceMetadataReference.Validate if the designated constraints aren't met.
type InstanceMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceMetadataReferenceValidationError) ErrorName() string {
	return "InstanceMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceMetadataReferenceValidationError{}

// Validate checks the field values on InstanceMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceMetadataSearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceMetadataSearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceMetadataSearchMultiError, or nil if none found.
func (m *InstanceMetadataSearch) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceMetadataSearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	// no validation rules for Reserved1

	// no validation rules for InstanceGroup

	// no validation rules for InstanceGroupFilter

	if len(errors) > 0 {
		return InstanceMetadataSearchMultiError(errors)
	}

	return nil
}

// InstanceMetadataSearchMultiError is an error wrapping multiple validation
// errors returned by InstanceMetadataSearch.ValidateAll() if the designated
// constraints aren't met.
type InstanceMetadataSearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMetadataSearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMetadataSearchMultiError) AllErrors() []error { return m }

// InstanceMetadataSearchValidationError is the validation error returned by
// InstanceMetadataSearch.Validate if the designated constraints aren't met.
type InstanceMetadataSearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceMetadataSearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceMetadataSearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceMetadataSearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceMetadataSearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceMetadataSearchValidationError) ErrorName() string {
	return "InstanceMetadataSearchValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceMetadataSearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceMetadataSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceMetadataSearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceMetadataSearchValidationError{}

// Validate checks the field values on InstanceStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstanceStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceStatusMultiError,
// or nil if none found.
func (m *InstanceStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	for idx, item := range m.GetInterfaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceStatusValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceStatusValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceStatusValidationError{
					field:  fmt.Sprintf("Interfaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSshProxy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceStatusValidationError{
					field:  "SshProxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceStatusValidationError{
					field:  "SshProxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSshProxy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceStatusValidationError{
				field:  "SshProxy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserName

	if len(errors) > 0 {
		return InstanceStatusMultiError(errors)
	}

	return nil
}

// InstanceStatusMultiError is an error wrapping multiple validation errors
// returned by InstanceStatus.ValidateAll() if the designated constraints
// aren't met.
type InstanceStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceStatusMultiError) AllErrors() []error { return m }

// InstanceStatusValidationError is the validation error returned by
// InstanceStatus.Validate if the designated constraints aren't met.
type InstanceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceStatusValidationError) ErrorName() string { return "InstanceStatusValidationError" }

// Error satisfies the builtin error interface
func (e InstanceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceStatusValidationError{}

// Validate checks the field values on InstanceInterfaceStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceInterfaceStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceInterfaceStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceInterfaceStatusMultiError, or nil if none found.
func (m *InstanceInterfaceStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceInterfaceStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for VNet

	// no validation rules for DnsName

	// no validation rules for PrefixLength

	// no validation rules for Subnet

	// no validation rules for Gateway

	if len(errors) > 0 {
		return InstanceInterfaceStatusMultiError(errors)
	}

	return nil
}

// InstanceInterfaceStatusMultiError is an error wrapping multiple validation
// errors returned by InstanceInterfaceStatus.ValidateAll() if the designated
// constraints aren't met.
type InstanceInterfaceStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceInterfaceStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceInterfaceStatusMultiError) AllErrors() []error { return m }

// InstanceInterfaceStatusValidationError is the validation error returned by
// InstanceInterfaceStatus.Validate if the designated constraints aren't met.
type InstanceInterfaceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceInterfaceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceInterfaceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceInterfaceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceInterfaceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceInterfaceStatusValidationError) ErrorName() string {
	return "InstanceInterfaceStatusValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceInterfaceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceInterfaceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceInterfaceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceInterfaceStatusValidationError{}

// Validate checks the field values on SshProxyTunnelStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SshProxyTunnelStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SshProxyTunnelStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SshProxyTunnelStatusMultiError, or nil if none found.
func (m *SshProxyTunnelStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *SshProxyTunnelStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyUser

	// no validation rules for ProxyAddress

	// no validation rules for ProxyPort

	if len(errors) > 0 {
		return SshProxyTunnelStatusMultiError(errors)
	}

	return nil
}

// SshProxyTunnelStatusMultiError is an error wrapping multiple validation
// errors returned by SshProxyTunnelStatus.ValidateAll() if the designated
// constraints aren't met.
type SshProxyTunnelStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshProxyTunnelStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshProxyTunnelStatusMultiError) AllErrors() []error { return m }

// SshProxyTunnelStatusValidationError is the validation error returned by
// SshProxyTunnelStatus.Validate if the designated constraints aren't met.
type SshProxyTunnelStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshProxyTunnelStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshProxyTunnelStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshProxyTunnelStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshProxyTunnelStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshProxyTunnelStatusValidationError) ErrorName() string {
	return "SshProxyTunnelStatusValidationError"
}

// Error satisfies the builtin error interface
func (e SshProxyTunnelStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSshProxyTunnelStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshProxyTunnelStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshProxyTunnelStatusValidationError{}

// Validate checks the field values on InstanceGroupCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupCreateRequestMultiError, or nil if none found.
func (m *InstanceGroupCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupCreateRequestMultiError(errors)
	}

	return nil
}

// InstanceGroupCreateRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupCreateRequestMultiError) AllErrors() []error { return m }

// InstanceGroupCreateRequestValidationError is the validation error returned
// by InstanceGroupCreateRequest.Validate if the designated constraints aren't met.
type InstanceGroupCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupCreateRequestValidationError) ErrorName() string {
	return "InstanceGroupCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupCreateRequestValidationError{}

// Validate checks the field values on InstanceGroupUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupUpdateRequestMultiError, or nil if none found.
func (m *InstanceGroupUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupUpdateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupUpdateRequestMultiError(errors)
	}

	return nil
}

// InstanceGroupUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupUpdateRequestMultiError) AllErrors() []error { return m }

// InstanceGroupUpdateRequestValidationError is the validation error returned
// by InstanceGroupUpdateRequest.Validate if the designated constraints aren't met.
type InstanceGroupUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupUpdateRequestValidationError) ErrorName() string {
	return "InstanceGroupUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupUpdateRequestValidationError{}

// Validate checks the field values on InstanceGroupMemberDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InstanceGroupMemberDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupMemberDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstanceGroupMemberDeleteRequestMultiError, or nil if none found.
func (m *InstanceGroupMemberDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupMemberDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupMemberDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupMemberDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupMemberDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.InstanceNameOrId.(type) {
	case *InstanceGroupMemberDeleteRequest_InstanceName:
		if v == nil {
			err := InstanceGroupMemberDeleteRequestValidationError{
				field:  "InstanceNameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for InstanceName
	case *InstanceGroupMemberDeleteRequest_InstanceResourceId:
		if v == nil {
			err := InstanceGroupMemberDeleteRequestValidationError{
				field:  "InstanceNameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for InstanceResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InstanceGroupMemberDeleteRequestMultiError(errors)
	}

	return nil
}

// InstanceGroupMemberDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// InstanceGroupMemberDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupMemberDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMemberDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMemberDeleteRequestMultiError) AllErrors() []error { return m }

// InstanceGroupMemberDeleteRequestValidationError is the validation error
// returned by InstanceGroupMemberDeleteRequest.Validate if the designated
// constraints aren't met.
type InstanceGroupMemberDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupMemberDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupMemberDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupMemberDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupMemberDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupMemberDeleteRequestValidationError) ErrorName() string {
	return "InstanceGroupMemberDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupMemberDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupMemberDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupMemberDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupMemberDeleteRequestValidationError{}

// Validate checks the field values on InstanceGroupScaleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupScaleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupScaleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupScaleRequestMultiError, or nil if none found.
func (m *InstanceGroupScaleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupScaleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupScaleRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupScaleRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupScaleRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupScaleRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupScaleRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupScaleRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupScaleRequestMultiError(errors)
	}

	return nil
}

// InstanceGroupScaleRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceGroupScaleRequest.ValidateAll() if the
// designated constraints aren't met.
type InstanceGroupScaleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupScaleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupScaleRequestMultiError) AllErrors() []error { return m }

// InstanceGroupScaleRequestValidationError is the validation error returned by
// InstanceGroupScaleRequest.Validate if the designated constraints aren't met.
type InstanceGroupScaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupScaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupScaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupScaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupScaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupScaleRequestValidationError) ErrorName() string {
	return "InstanceGroupScaleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupScaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupScaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupScaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupScaleRequestValidationError{}

// Validate checks the field values on InstanceGroupScaleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupScaleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupScaleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupScaleResponseMultiError, or nil if none found.
func (m *InstanceGroupScaleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupScaleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupScaleResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupScaleResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupScaleResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupScaleResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupScaleResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupScaleResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupScaleResponseMultiError(errors)
	}

	return nil
}

// InstanceGroupScaleResponseMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupScaleResponse.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupScaleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupScaleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupScaleResponseMultiError) AllErrors() []error { return m }

// InstanceGroupScaleResponseValidationError is the validation error returned
// by InstanceGroupScaleResponse.Validate if the designated constraints aren't met.
type InstanceGroupScaleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupScaleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupScaleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupScaleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupScaleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupScaleResponseValidationError) ErrorName() string {
	return "InstanceGroupScaleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupScaleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupScaleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupScaleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupScaleResponseValidationError{}

// Validate checks the field values on InstanceGroupScaleStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupScaleStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupScaleStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupScaleStatusMultiError, or nil if none found.
func (m *InstanceGroupScaleStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupScaleStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentCount

	// no validation rules for DesiredCount

	// no validation rules for ReadyCount

	if len(errors) > 0 {
		return InstanceGroupScaleStatusMultiError(errors)
	}

	return nil
}

// InstanceGroupScaleStatusMultiError is an error wrapping multiple validation
// errors returned by InstanceGroupScaleStatus.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupScaleStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupScaleStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupScaleStatusMultiError) AllErrors() []error { return m }

// InstanceGroupScaleStatusValidationError is the validation error returned by
// InstanceGroupScaleStatus.Validate if the designated constraints aren't met.
type InstanceGroupScaleStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupScaleStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupScaleStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupScaleStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupScaleStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupScaleStatusValidationError) ErrorName() string {
	return "InstanceGroupScaleStatusValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupScaleStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupScaleStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupScaleStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupScaleStatusValidationError{}

// Validate checks the field values on InstanceGroupSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupSpecMultiError, or nil if none found.
func (m *InstanceGroupSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstanceSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupSpecValidationError{
					field:  "InstanceSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupSpecValidationError{
					field:  "InstanceSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstanceSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupSpecValidationError{
				field:  "InstanceSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceCount

	if len(errors) > 0 {
		return InstanceGroupSpecMultiError(errors)
	}

	return nil
}

// InstanceGroupSpecMultiError is an error wrapping multiple validation errors
// returned by InstanceGroupSpec.ValidateAll() if the designated constraints
// aren't met.
type InstanceGroupSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupSpecMultiError) AllErrors() []error { return m }

// InstanceGroupSpecValidationError is the validation error returned by
// InstanceGroupSpec.Validate if the designated constraints aren't met.
type InstanceGroupSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupSpecValidationError) ErrorName() string {
	return "InstanceGroupSpecValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupSpecValidationError{}

// Validate checks the field values on InstanceGroupSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupSearchRequestMultiError, or nil if none found.
func (m *InstanceGroupSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupSearchRequestMultiError(errors)
	}

	return nil
}

// InstanceGroupSearchRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupSearchRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupSearchRequestMultiError) AllErrors() []error { return m }

// InstanceGroupSearchRequestValidationError is the validation error returned
// by InstanceGroupSearchRequest.Validate if the designated constraints aren't met.
type InstanceGroupSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupSearchRequestValidationError) ErrorName() string {
	return "InstanceGroupSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupSearchRequestValidationError{}

// Validate checks the field values on InstanceGroupSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupSearchResponseMultiError, or nil if none found.
func (m *InstanceGroupSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceGroupSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceGroupSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceGroupSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceGroupSearchResponseMultiError(errors)
	}

	return nil
}

// InstanceGroupSearchResponseMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupSearchResponse.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupSearchResponseMultiError) AllErrors() []error { return m }

// InstanceGroupSearchResponseValidationError is the validation error returned
// by InstanceGroupSearchResponse.Validate if the designated constraints
// aren't met.
type InstanceGroupSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupSearchResponseValidationError) ErrorName() string {
	return "InstanceGroupSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupSearchResponseValidationError{}

// Validate checks the field values on InstanceGroupDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupDeleteRequestMultiError, or nil if none found.
func (m *InstanceGroupDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupDeleteRequestMultiError(errors)
	}

	return nil
}

// InstanceGroupDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupDeleteRequestMultiError) AllErrors() []error { return m }

// InstanceGroupDeleteRequestValidationError is the validation error returned
// by InstanceGroupDeleteRequest.Validate if the designated constraints aren't met.
type InstanceGroupDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupDeleteRequestValidationError) ErrorName() string {
	return "InstanceGroupDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupDeleteRequestValidationError{}

// Validate checks the field values on InstanceGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstanceGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceGroupMultiError, or
// nil if none found.
func (m *InstanceGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupMultiError(errors)
	}

	return nil
}

// InstanceGroupMultiError is an error wrapping multiple validation errors
// returned by InstanceGroup.ValidateAll() if the designated constraints
// aren't met.
type InstanceGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMultiError) AllErrors() []error { return m }

// InstanceGroupValidationError is the validation error returned by
// InstanceGroup.Validate if the designated constraints aren't met.
type InstanceGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupValidationError) ErrorName() string { return "InstanceGroupValidationError" }

// Error satisfies the builtin error interface
func (e InstanceGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupValidationError{}

// Validate checks the field values on InstanceGroupMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupMetadataMultiError, or nil if none found.
func (m *InstanceGroupMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Reserved2

	if len(errors) > 0 {
		return InstanceGroupMetadataMultiError(errors)
	}

	return nil
}

// InstanceGroupMetadataMultiError is an error wrapping multiple validation
// errors returned by InstanceGroupMetadata.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMetadataMultiError) AllErrors() []error { return m }

// InstanceGroupMetadataValidationError is the validation error returned by
// InstanceGroupMetadata.Validate if the designated constraints aren't met.
type InstanceGroupMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupMetadataValidationError) ErrorName() string {
	return "InstanceGroupMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupMetadataValidationError{}

// Validate checks the field values on InstanceGroupMetadataCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupMetadataCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupMetadataCreateMultiError, or nil if none found.
func (m *InstanceGroupMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ProductId

	// no validation rules for Reserved3

	if len(errors) > 0 {
		return InstanceGroupMetadataCreateMultiError(errors)
	}

	return nil
}

// InstanceGroupMetadataCreateMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupMetadataCreate.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMetadataCreateMultiError) AllErrors() []error { return m }

// InstanceGroupMetadataCreateValidationError is the validation error returned
// by InstanceGroupMetadataCreate.Validate if the designated constraints
// aren't met.
type InstanceGroupMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupMetadataCreateValidationError) ErrorName() string {
	return "InstanceGroupMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupMetadataCreateValidationError{}

// Validate checks the field values on InstanceGroupMetadataUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupMetadataUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupMetadataUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupMetadataUpdateMultiError, or nil if none found.
func (m *InstanceGroupMetadataUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupMetadataUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Reserved3

	if len(errors) > 0 {
		return InstanceGroupMetadataUpdateMultiError(errors)
	}

	return nil
}

// InstanceGroupMetadataUpdateMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupMetadataUpdate.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupMetadataUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMetadataUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMetadataUpdateMultiError) AllErrors() []error { return m }

// InstanceGroupMetadataUpdateValidationError is the validation error returned
// by InstanceGroupMetadataUpdate.Validate if the designated constraints
// aren't met.
type InstanceGroupMetadataUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupMetadataUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupMetadataUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupMetadataUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupMetadataUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupMetadataUpdateValidationError) ErrorName() string {
	return "InstanceGroupMetadataUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupMetadataUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupMetadataUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupMetadataUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupMetadataUpdateValidationError{}

// Validate checks the field values on InstanceGroupMetadataReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupMetadataReference with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstanceGroupMetadataReferenceMultiError, or nil if none found.
func (m *InstanceGroupMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	switch v := m.NameOrId.(type) {
	case *InstanceGroupMetadataReference_Name:
		if v == nil {
			err := InstanceGroupMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InstanceGroupMetadataReferenceMultiError(errors)
	}

	return nil
}

// InstanceGroupMetadataReferenceMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupMetadataReference.ValidateAll()
// if the designated constraints aren't met.
type InstanceGroupMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMetadataReferenceMultiError) AllErrors() []error { return m }

// InstanceGroupMetadataReferenceValidationError is the validation error
// returned by InstanceGroupMetadataReference.Validate if the designated
// constraints aren't met.
type InstanceGroupMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupMetadataReferenceValidationError) ErrorName() string {
	return "InstanceGroupMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupMetadataReferenceValidationError{}

// Validate checks the field values on InstanceGroupMetadataSearch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupMetadataSearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupMetadataSearch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupMetadataSearchMultiError, or nil if none found.
func (m *InstanceGroupMetadataSearch) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupMetadataSearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return InstanceGroupMetadataSearchMultiError(errors)
	}

	return nil
}

// InstanceGroupMetadataSearchMultiError is an error wrapping multiple
// validation errors returned by InstanceGroupMetadataSearch.ValidateAll() if
// the designated constraints aren't met.
type InstanceGroupMetadataSearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMetadataSearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMetadataSearchMultiError) AllErrors() []error { return m }

// InstanceGroupMetadataSearchValidationError is the validation error returned
// by InstanceGroupMetadataSearch.Validate if the designated constraints
// aren't met.
type InstanceGroupMetadataSearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupMetadataSearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupMetadataSearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupMetadataSearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupMetadataSearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupMetadataSearchValidationError) ErrorName() string {
	return "InstanceGroupMetadataSearchValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupMetadataSearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupMetadataSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupMetadataSearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupMetadataSearchValidationError{}

// Validate checks the field values on InstanceGroupStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupStatusMultiError, or nil if none found.
func (m *InstanceGroupStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadyCount

	if len(errors) > 0 {
		return InstanceGroupStatusMultiError(errors)
	}

	return nil
}

// InstanceGroupStatusMultiError is an error wrapping multiple validation
// errors returned by InstanceGroupStatus.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupStatusMultiError) AllErrors() []error { return m }

// InstanceGroupStatusValidationError is the validation error returned by
// InstanceGroupStatus.Validate if the designated constraints aren't met.
type InstanceGroupStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupStatusValidationError) ErrorName() string {
	return "InstanceGroupStatusValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupStatusValidationError{}

// Validate checks the field values on InstanceTypeDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTypeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTypeDeleteRequestMultiError, or nil if none found.
func (m *InstanceTypeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceTypeDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceTypeDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceTypeDeleteRequestMultiError(errors)
	}

	return nil
}

// InstanceTypeDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceTypeDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type InstanceTypeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeDeleteRequestMultiError) AllErrors() []error { return m }

// InstanceTypeDeleteRequestValidationError is the validation error returned by
// InstanceTypeDeleteRequest.Validate if the designated constraints aren't met.
type InstanceTypeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeDeleteRequestValidationError) ErrorName() string {
	return "InstanceTypeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTypeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeDeleteRequestValidationError{}

// Validate checks the field values on InstanceTypeGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTypeGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTypeGetRequestMultiError, or nil if none found.
func (m *InstanceTypeGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceTypeGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceTypeGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceTypeGetRequestMultiError(errors)
	}

	return nil
}

// InstanceTypeGetRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceTypeGetRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceTypeGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeGetRequestMultiError) AllErrors() []error { return m }

// InstanceTypeGetRequestValidationError is the validation error returned by
// InstanceTypeGetRequest.Validate if the designated constraints aren't met.
type InstanceTypeGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeGetRequestValidationError) ErrorName() string {
	return "InstanceTypeGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTypeGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeGetRequestValidationError{}

// Validate checks the field values on InstanceTypeSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTypeSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTypeSearchRequestMultiError, or nil if none found.
func (m *InstanceTypeSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstanceTypeSearchRequestMultiError(errors)
	}

	return nil
}

// InstanceTypeSearchRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceTypeSearchRequest.ValidateAll() if the
// designated constraints aren't met.
type InstanceTypeSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeSearchRequestMultiError) AllErrors() []error { return m }

// InstanceTypeSearchRequestValidationError is the validation error returned by
// InstanceTypeSearchRequest.Validate if the designated constraints aren't met.
type InstanceTypeSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeSearchRequestValidationError) ErrorName() string {
	return "InstanceTypeSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTypeSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeSearchRequestValidationError{}

// Validate checks the field values on InstanceTypeSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTypeSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTypeSearchResponseMultiError, or nil if none found.
func (m *InstanceTypeSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceTypeSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceTypeSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceTypeSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceTypeSearchResponseMultiError(errors)
	}

	return nil
}

// InstanceTypeSearchResponseMultiError is an error wrapping multiple
// validation errors returned by InstanceTypeSearchResponse.ValidateAll() if
// the designated constraints aren't met.
type InstanceTypeSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeSearchResponseMultiError) AllErrors() []error { return m }

// InstanceTypeSearchResponseValidationError is the validation error returned
// by InstanceTypeSearchResponse.Validate if the designated constraints aren't met.
type InstanceTypeSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeSearchResponseValidationError) ErrorName() string {
	return "InstanceTypeSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTypeSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeSearchResponseValidationError{}

// Validate checks the field values on InstanceType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstanceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceTypeMultiError, or
// nil if none found.
func (m *InstanceType) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceTypeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceTypeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceTypeValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceTypeValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceTypeMultiError(errors)
	}

	return nil
}

// InstanceTypeMultiError is an error wrapping multiple validation errors
// returned by InstanceType.ValidateAll() if the designated constraints aren't met.
type InstanceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeMultiError) AllErrors() []error { return m }

// InstanceTypeValidationError is the validation error returned by
// InstanceType.Validate if the designated constraints aren't met.
type InstanceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeValidationError) ErrorName() string { return "InstanceTypeValidationError" }

// Error satisfies the builtin error interface
func (e InstanceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeValidationError{}

// Validate checks the field values on InstanceTypeSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstanceTypeSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTypeSpecMultiError, or nil if none found.
func (m *InstanceTypeSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for InstanceCategory

	if all {
		switch v := interface{}(m.GetCpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceTypeSpecValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceTypeSpecValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeSpecValidationError{
				field:  "Cpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceTypeSpecValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceTypeSpecValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeSpecValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDisks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceTypeSpecValidationError{
						field:  fmt.Sprintf("Disks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceTypeSpecValidationError{
						field:  fmt.Sprintf("Disks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceTypeSpecValidationError{
					field:  fmt.Sprintf("Disks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetGpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceTypeSpecValidationError{
					field:  "Gpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceTypeSpecValidationError{
					field:  "Gpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeSpecValidationError{
				field:  "Gpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HbmMode

	if len(errors) > 0 {
		return InstanceTypeSpecMultiError(errors)
	}

	return nil
}

// InstanceTypeSpecMultiError is an error wrapping multiple validation errors
// returned by InstanceTypeSpec.ValidateAll() if the designated constraints
// aren't met.
type InstanceTypeSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeSpecMultiError) AllErrors() []error { return m }

// InstanceTypeSpecValidationError is the validation error returned by
// InstanceTypeSpec.Validate if the designated constraints aren't met.
type InstanceTypeSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeSpecValidationError) ErrorName() string { return "InstanceTypeSpecValidationError" }

// Error satisfies the builtin error interface
func (e InstanceTypeSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeSpecValidationError{}

// Validate checks the field values on CpuSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CpuSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CpuSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CpuSpecMultiError, or nil if none found.
func (m *CpuSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *CpuSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cores

	// no validation rules for Id

	// no validation rules for ModelName

	// no validation rules for Sockets

	// no validation rules for Threads

	if len(errors) > 0 {
		return CpuSpecMultiError(errors)
	}

	return nil
}

// CpuSpecMultiError is an error wrapping multiple validation errors returned
// by CpuSpec.ValidateAll() if the designated constraints aren't met.
type CpuSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CpuSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CpuSpecMultiError) AllErrors() []error { return m }

// CpuSpecValidationError is the validation error returned by CpuSpec.Validate
// if the designated constraints aren't met.
type CpuSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CpuSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CpuSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CpuSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CpuSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CpuSpecValidationError) ErrorName() string { return "CpuSpecValidationError" }

// Error satisfies the builtin error interface
func (e CpuSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCpuSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CpuSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CpuSpecValidationError{}

// Validate checks the field values on GpuSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GpuSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GpuSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GpuSpecMultiError, or nil if none found.
func (m *GpuSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *GpuSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelName

	// no validation rules for Count

	if len(errors) > 0 {
		return GpuSpecMultiError(errors)
	}

	return nil
}

// GpuSpecMultiError is an error wrapping multiple validation errors returned
// by GpuSpec.ValidateAll() if the designated constraints aren't met.
type GpuSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GpuSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GpuSpecMultiError) AllErrors() []error { return m }

// GpuSpecValidationError is the validation error returned by GpuSpec.Validate
// if the designated constraints aren't met.
type GpuSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GpuSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GpuSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GpuSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GpuSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GpuSpecValidationError) ErrorName() string { return "GpuSpecValidationError" }

// Error satisfies the builtin error interface
func (e GpuSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGpuSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GpuSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GpuSpecValidationError{}

// Validate checks the field values on MemorySpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemorySpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemorySpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemorySpecMultiError, or
// nil if none found.
func (m *MemorySpec) ValidateAll() error {
	return m.validate(true)
}

func (m *MemorySpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for DimmSize

	// no validation rules for DimmCount

	// no validation rules for Speed

	if len(errors) > 0 {
		return MemorySpecMultiError(errors)
	}

	return nil
}

// MemorySpecMultiError is an error wrapping multiple validation errors
// returned by MemorySpec.ValidateAll() if the designated constraints aren't met.
type MemorySpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemorySpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemorySpecMultiError) AllErrors() []error { return m }

// MemorySpecValidationError is the validation error returned by
// MemorySpec.Validate if the designated constraints aren't met.
type MemorySpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemorySpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemorySpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemorySpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemorySpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemorySpecValidationError) ErrorName() string { return "MemorySpecValidationError" }

// Error satisfies the builtin error interface
func (e MemorySpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemorySpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemorySpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemorySpecValidationError{}

// Validate checks the field values on DiskSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiskSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiskSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiskSpecMultiError, or nil
// if none found.
func (m *DiskSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *DiskSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	if len(errors) > 0 {
		return DiskSpecMultiError(errors)
	}

	return nil
}

// DiskSpecMultiError is an error wrapping multiple validation errors returned
// by DiskSpec.ValidateAll() if the designated constraints aren't met.
type DiskSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiskSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiskSpecMultiError) AllErrors() []error { return m }

// DiskSpecValidationError is the validation error returned by
// DiskSpec.Validate if the designated constraints aren't met.
type DiskSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiskSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiskSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiskSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiskSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiskSpecValidationError) ErrorName() string { return "DiskSpecValidationError" }

// Error satisfies the builtin error interface
func (e DiskSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiskSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiskSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiskSpecValidationError{}

// Validate checks the field values on MachineImageDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineImageDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineImageDeleteRequestMultiError, or nil if none found.
func (m *MachineImageDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineImageDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineImageDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineImageDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineImageDeleteRequestMultiError(errors)
	}

	return nil
}

// MachineImageDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by MachineImageDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type MachineImageDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageDeleteRequestMultiError) AllErrors() []error { return m }

// MachineImageDeleteRequestValidationError is the validation error returned by
// MachineImageDeleteRequest.Validate if the designated constraints aren't met.
type MachineImageDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageDeleteRequestValidationError) ErrorName() string {
	return "MachineImageDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageDeleteRequestValidationError{}

// Validate checks the field values on MachineImageGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineImageGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineImageGetRequestMultiError, or nil if none found.
func (m *MachineImageGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineImageGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineImageGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineImageGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineImageGetRequestMultiError(errors)
	}

	return nil
}

// MachineImageGetRequestMultiError is an error wrapping multiple validation
// errors returned by MachineImageGetRequest.ValidateAll() if the designated
// constraints aren't met.
type MachineImageGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageGetRequestMultiError) AllErrors() []error { return m }

// MachineImageGetRequestValidationError is the validation error returned by
// MachineImageGetRequest.Validate if the designated constraints aren't met.
type MachineImageGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageGetRequestValidationError) ErrorName() string {
	return "MachineImageGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageGetRequestValidationError{}

// Validate checks the field values on MachineImageSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineImageSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineImageSearchRequestMultiError, or nil if none found.
func (m *MachineImageSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineImageSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineImageSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineImageSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineImageSearchRequestMultiError(errors)
	}

	return nil
}

// MachineImageSearchRequestMultiError is an error wrapping multiple validation
// errors returned by MachineImageSearchRequest.ValidateAll() if the
// designated constraints aren't met.
type MachineImageSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageSearchRequestMultiError) AllErrors() []error { return m }

// MachineImageSearchRequestValidationError is the validation error returned by
// MachineImageSearchRequest.Validate if the designated constraints aren't met.
type MachineImageSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageSearchRequestValidationError) ErrorName() string {
	return "MachineImageSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageSearchRequestValidationError{}

// Validate checks the field values on MachineImageSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineImageSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineImageSearchResponseMultiError, or nil if none found.
func (m *MachineImageSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MachineImageSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MachineImageSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MachineImageSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MachineImageSearchResponseMultiError(errors)
	}

	return nil
}

// MachineImageSearchResponseMultiError is an error wrapping multiple
// validation errors returned by MachineImageSearchResponse.ValidateAll() if
// the designated constraints aren't met.
type MachineImageSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageSearchResponseMultiError) AllErrors() []error { return m }

// MachineImageSearchResponseValidationError is the validation error returned
// by MachineImageSearchResponse.Validate if the designated constraints aren't met.
type MachineImageSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageSearchResponseValidationError) ErrorName() string {
	return "MachineImageSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageSearchResponseValidationError{}

// Validate checks the field values on MachineImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MachineImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MachineImageMultiError, or
// nil if none found.
func (m *MachineImage) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineImageValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineImageValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineImageValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineImageValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineImageValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineImageValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineImageMultiError(errors)
	}

	return nil
}

// MachineImageMultiError is an error wrapping multiple validation errors
// returned by MachineImage.ValidateAll() if the designated constraints aren't met.
type MachineImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageMultiError) AllErrors() []error { return m }

// MachineImageValidationError is the validation error returned by
// MachineImage.Validate if the designated constraints aren't met.
type MachineImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageValidationError) ErrorName() string { return "MachineImageValidationError" }

// Error satisfies the builtin error interface
func (e MachineImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageValidationError{}

// Validate checks the field values on MachineImageSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MachineImageSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineImageSpecMultiError, or nil if none found.
func (m *MachineImageSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for UserName

	// no validation rules for Icon

	// no validation rules for Md5Sum

	// no validation rules for Sha256Sum

	// no validation rules for Sha512Sum

	// no validation rules for Labels

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MachineImageSpecValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MachineImageSpecValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MachineImageSpecValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Hidden

	// no validation rules for VirtualSizeBytes

	if len(errors) > 0 {
		return MachineImageSpecMultiError(errors)
	}

	return nil
}

// MachineImageSpecMultiError is an error wrapping multiple validation errors
// returned by MachineImageSpec.ValidateAll() if the designated constraints
// aren't met.
type MachineImageSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageSpecMultiError) AllErrors() []error { return m }

// MachineImageSpecValidationError is the validation error returned by
// MachineImageSpec.Validate if the designated constraints aren't met.
type MachineImageSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageSpecValidationError) ErrorName() string { return "MachineImageSpecValidationError" }

// Error satisfies the builtin error interface
func (e MachineImageSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageSpecValidationError{}

// Validate checks the field values on MachineImageComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineImageComponent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineImageComponentMultiError, or nil if none found.
func (m *MachineImageComponent) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageComponent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Version

	// no validation rules for Description

	// no validation rules for InfoUrl

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return MachineImageComponentMultiError(errors)
	}

	return nil
}

// MachineImageComponentMultiError is an error wrapping multiple validation
// errors returned by MachineImageComponent.ValidateAll() if the designated
// constraints aren't met.
type MachineImageComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageComponentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageComponentMultiError) AllErrors() []error { return m }

// MachineImageComponentValidationError is the validation error returned by
// MachineImageComponent.Validate if the designated constraints aren't met.
type MachineImageComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageComponentValidationError) ErrorName() string {
	return "MachineImageComponentValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageComponentValidationError{}

// Validate checks the field values on VNetPutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VNetPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetPutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VNetPutRequestMultiError,
// or nil if none found.
func (m *VNetPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetPutRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetPutRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetPutRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetPutRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetPutRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetPutRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetPutRequestMultiError(errors)
	}

	return nil
}

// VNetPutRequestMultiError is an error wrapping multiple validation errors
// returned by VNetPutRequest.ValidateAll() if the designated constraints
// aren't met.
type VNetPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetPutRequestMultiError) AllErrors() []error { return m }

// VNetPutRequestValidationError is the validation error returned by
// VNetPutRequest.Validate if the designated constraints aren't met.
type VNetPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetPutRequestValidationError) ErrorName() string { return "VNetPutRequestValidationError" }

// Error satisfies the builtin error interface
func (e VNetPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetPutRequestValidationError{}

// Validate checks the field values on VNetGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VNetGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VNetGetRequestMultiError,
// or nil if none found.
func (m *VNetGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetGetRequestMultiError(errors)
	}

	return nil
}

// VNetGetRequestMultiError is an error wrapping multiple validation errors
// returned by VNetGetRequest.ValidateAll() if the designated constraints
// aren't met.
type VNetGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetGetRequestMultiError) AllErrors() []error { return m }

// VNetGetRequestValidationError is the validation error returned by
// VNetGetRequest.Validate if the designated constraints aren't met.
type VNetGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetGetRequestValidationError) ErrorName() string { return "VNetGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e VNetGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetGetRequestValidationError{}

// Validate checks the field values on VNetSearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VNetSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetSearchRequestMultiError, or nil if none found.
func (m *VNetSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetSearchRequestMultiError(errors)
	}

	return nil
}

// VNetSearchRequestMultiError is an error wrapping multiple validation errors
// returned by VNetSearchRequest.ValidateAll() if the designated constraints
// aren't met.
type VNetSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetSearchRequestMultiError) AllErrors() []error { return m }

// VNetSearchRequestValidationError is the validation error returned by
// VNetSearchRequest.Validate if the designated constraints aren't met.
type VNetSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetSearchRequestValidationError) ErrorName() string {
	return "VNetSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VNetSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetSearchRequestValidationError{}

// Validate checks the field values on VNetSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetSearchResponseMultiError, or nil if none found.
func (m *VNetSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VNetSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VNetSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VNetSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VNetSearchResponseMultiError(errors)
	}

	return nil
}

// VNetSearchResponseMultiError is an error wrapping multiple validation errors
// returned by VNetSearchResponse.ValidateAll() if the designated constraints
// aren't met.
type VNetSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetSearchResponseMultiError) AllErrors() []error { return m }

// VNetSearchResponseValidationError is the validation error returned by
// VNetSearchResponse.Validate if the designated constraints aren't met.
type VNetSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetSearchResponseValidationError) ErrorName() string {
	return "VNetSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VNetSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetSearchResponseValidationError{}

// Validate checks the field values on VNetDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VNetDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetDeleteRequestMultiError, or nil if none found.
func (m *VNetDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetDeleteRequestMultiError(errors)
	}

	return nil
}

// VNetDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by VNetDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type VNetDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetDeleteRequestMultiError) AllErrors() []error { return m }

// VNetDeleteRequestValidationError is the validation error returned by
// VNetDeleteRequest.Validate if the designated constraints aren't met.
type VNetDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetDeleteRequestValidationError) ErrorName() string {
	return "VNetDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VNetDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetDeleteRequestValidationError{}

// Validate checks the field values on VNet with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *VNet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VNetMultiError, or nil if none found.
func (m *VNet) ValidateAll() error {
	return m.validate(true)
}

func (m *VNet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetMultiError(errors)
	}

	return nil
}

// VNetMultiError is an error wrapping multiple validation errors returned by
// VNet.ValidateAll() if the designated constraints aren't met.
type VNetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetMultiError) AllErrors() []error { return m }

// VNetValidationError is the validation error returned by VNet.Validate if the
// designated constraints aren't met.
type VNetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetValidationError) ErrorName() string { return "VNetValidationError" }

// Error satisfies the builtin error interface
func (e VNetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetValidationError{}

// Validate checks the field values on VNetSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VNetSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VNetSpecMultiError, or nil
// if none found.
func (m *VNetSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	// no validation rules for PrefixLength

	if len(errors) > 0 {
		return VNetSpecMultiError(errors)
	}

	return nil
}

// VNetSpecMultiError is an error wrapping multiple validation errors returned
// by VNetSpec.ValidateAll() if the designated constraints aren't met.
type VNetSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetSpecMultiError) AllErrors() []error { return m }

// VNetSpecValidationError is the validation error returned by
// VNetSpec.Validate if the designated constraints aren't met.
type VNetSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetSpecValidationError) ErrorName() string { return "VNetSpecValidationError" }

// Error satisfies the builtin error interface
func (e VNetSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetSpecValidationError{}

// Validate checks the field values on LoadBalancerCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerCreateRequestMultiError, or nil if none found.
func (m *LoadBalancerCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerCreateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerCreateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerCreateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerCreateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerCreateRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerCreateRequestMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type LoadBalancerCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerCreateRequestMultiError) AllErrors() []error { return m }

// LoadBalancerCreateRequestValidationError is the validation error returned by
// LoadBalancerCreateRequest.Validate if the designated constraints aren't met.
type LoadBalancerCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerCreateRequestValidationError) ErrorName() string {
	return "LoadBalancerCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerCreateRequestValidationError{}

// Validate checks the field values on LoadBalancerGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerGetRequestMultiError, or nil if none found.
func (m *LoadBalancerGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerGetRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerGetRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerGetRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerGetRequestMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerGetRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerGetRequestMultiError) AllErrors() []error { return m }

// LoadBalancerGetRequestValidationError is the validation error returned by
// LoadBalancerGetRequest.Validate if the designated constraints aren't met.
type LoadBalancerGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerGetRequestValidationError) ErrorName() string {
	return "LoadBalancerGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerGetRequestValidationError{}

// Validate checks the field values on LoadBalancerSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerSearchRequestMultiError, or nil if none found.
func (m *LoadBalancerSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerSearchRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerSearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerSearchRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerSearchRequestMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerSearchRequest.ValidateAll() if the
// designated constraints aren't met.
type LoadBalancerSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerSearchRequestMultiError) AllErrors() []error { return m }

// LoadBalancerSearchRequestValidationError is the validation error returned by
// LoadBalancerSearchRequest.Validate if the designated constraints aren't met.
type LoadBalancerSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerSearchRequestValidationError) ErrorName() string {
	return "LoadBalancerSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerSearchRequestValidationError{}

// Validate checks the field values on LoadBalancerSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerSearchResponseMultiError, or nil if none found.
func (m *LoadBalancerSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoadBalancerSearchResponseMultiError(errors)
	}

	return nil
}

// LoadBalancerSearchResponseMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerSearchResponse.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerSearchResponseMultiError) AllErrors() []error { return m }

// LoadBalancerSearchResponseValidationError is the validation error returned
// by LoadBalancerSearchResponse.Validate if the designated constraints aren't met.
type LoadBalancerSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerSearchResponseValidationError) ErrorName() string {
	return "LoadBalancerSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerSearchResponseValidationError{}

// Validate checks the field values on LoadBalancerUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerUpdateRequestMultiError, or nil if none found.
func (m *LoadBalancerUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerUpdateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerUpdateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerUpdateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerUpdateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerUpdateRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type LoadBalancerUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerUpdateRequestMultiError) AllErrors() []error { return m }

// LoadBalancerUpdateRequestValidationError is the validation error returned by
// LoadBalancerUpdateRequest.Validate if the designated constraints aren't met.
type LoadBalancerUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerUpdateRequestValidationError) ErrorName() string {
	return "LoadBalancerUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerUpdateRequestValidationError{}

// Validate checks the field values on LoadBalancerDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerDeleteRequestMultiError, or nil if none found.
func (m *LoadBalancerDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerDeleteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerDeleteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerDeleteRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type LoadBalancerDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerDeleteRequestMultiError) AllErrors() []error { return m }

// LoadBalancerDeleteRequestValidationError is the validation error returned by
// LoadBalancerDeleteRequest.Validate if the designated constraints aren't met.
type LoadBalancerDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerDeleteRequestValidationError) ErrorName() string {
	return "LoadBalancerDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerDeleteRequestValidationError{}

// Validate checks the field values on LoadBalancer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoadBalancer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoadBalancerMultiError, or
// nil if none found.
func (m *LoadBalancer) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerMultiError(errors)
	}

	return nil
}

// LoadBalancerMultiError is an error wrapping multiple validation errors
// returned by LoadBalancer.ValidateAll() if the designated constraints aren't met.
type LoadBalancerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMultiError) AllErrors() []error { return m }

// LoadBalancerValidationError is the validation error returned by
// LoadBalancer.Validate if the designated constraints aren't met.
type LoadBalancerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerValidationError) ErrorName() string { return "LoadBalancerValidationError" }

// Error satisfies the builtin error interface
func (e LoadBalancerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerValidationError{}

// Validate checks the field values on LoadBalancerSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerSpecMultiError, or nil if none found.
func (m *LoadBalancerSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetListeners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerSpecValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerSpecValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerSpecValidationError{
					field:  fmt.Sprintf("Listeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecurity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerSpecValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerSpecValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerSpecValidationError{
				field:  "Security",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerSpecMultiError(errors)
	}

	return nil
}

// LoadBalancerSpecMultiError is an error wrapping multiple validation errors
// returned by LoadBalancerSpec.ValidateAll() if the designated constraints
// aren't met.
type LoadBalancerSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerSpecMultiError) AllErrors() []error { return m }

// LoadBalancerSpecValidationError is the validation error returned by
// LoadBalancerSpec.Validate if the designated constraints aren't met.
type LoadBalancerSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerSpecValidationError) ErrorName() string { return "LoadBalancerSpecValidationError" }

// Error satisfies the builtin error interface
func (e LoadBalancerSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerSpecValidationError{}

// Validate checks the field values on LoadBalancerListener with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerListener) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerListener with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerListenerMultiError, or nil if none found.
func (m *LoadBalancerListener) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerListener) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPort(); val < 0 || val > 65535 {
		err := LoadBalancerListenerValidationError{
			field:  "Port",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPool()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerListenerValidationError{
					field:  "Pool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerListenerValidationError{
					field:  "Pool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPool()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerListenerValidationError{
				field:  "Pool",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerListenerMultiError(errors)
	}

	return nil
}

// LoadBalancerListenerMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerListener.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerListenerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerListenerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerListenerMultiError) AllErrors() []error { return m }

// LoadBalancerListenerValidationError is the validation error returned by
// LoadBalancerListener.Validate if the designated constraints aren't met.
type LoadBalancerListenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerListenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerListenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerListenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerListenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerListenerValidationError) ErrorName() string {
	return "LoadBalancerListenerValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerListenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerListener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerListenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerListenerValidationError{}

// Validate checks the field values on LoadBalancerPool with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerPool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerPool with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerPoolMultiError, or nil if none found.
func (m *LoadBalancerPool) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerPool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Port

	// no validation rules for Monitor

	// no validation rules for LoadBalancingMode

	// no validation rules for InstanceSelectors

	if len(errors) > 0 {
		return LoadBalancerPoolMultiError(errors)
	}

	return nil
}

// LoadBalancerPoolMultiError is an error wrapping multiple validation errors
// returned by LoadBalancerPool.ValidateAll() if the designated constraints
// aren't met.
type LoadBalancerPoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerPoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerPoolMultiError) AllErrors() []error { return m }

// LoadBalancerPoolValidationError is the validation error returned by
// LoadBalancerPool.Validate if the designated constraints aren't met.
type LoadBalancerPoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerPoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerPoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerPoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerPoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerPoolValidationError) ErrorName() string { return "LoadBalancerPoolValidationError" }

// Error satisfies the builtin error interface
func (e LoadBalancerPoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerPool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerPoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerPoolValidationError{}

// Validate checks the field values on LoadBalancerSpecUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerSpecUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerSpecUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerSpecUpdateMultiError, or nil if none found.
func (m *LoadBalancerSpecUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerSpecUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetListeners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerSpecUpdateValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerSpecUpdateValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerSpecUpdateValidationError{
					field:  fmt.Sprintf("Listeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecurity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerSpecUpdateValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerSpecUpdateValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerSpecUpdateValidationError{
				field:  "Security",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerSpecUpdateMultiError(errors)
	}

	return nil
}

// LoadBalancerSpecUpdateMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerSpecUpdate.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerSpecUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerSpecUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerSpecUpdateMultiError) AllErrors() []error { return m }

// LoadBalancerSpecUpdateValidationError is the validation error returned by
// LoadBalancerSpecUpdate.Validate if the designated constraints aren't met.
type LoadBalancerSpecUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerSpecUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerSpecUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerSpecUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerSpecUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerSpecUpdateValidationError) ErrorName() string {
	return "LoadBalancerSpecUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerSpecUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerSpecUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerSpecUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerSpecUpdateValidationError{}

// Validate checks the field values on LoadBalancerMetadataCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerMetadataCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerMetadataCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerMetadataCreateMultiError, or nil if none found.
func (m *LoadBalancerMetadataCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerMetadataCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return LoadBalancerMetadataCreateMultiError(errors)
	}

	return nil
}

// LoadBalancerMetadataCreateMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerMetadataCreate.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerMetadataCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMetadataCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMetadataCreateMultiError) AllErrors() []error { return m }

// LoadBalancerMetadataCreateValidationError is the validation error returned
// by LoadBalancerMetadataCreate.Validate if the designated constraints aren't met.
type LoadBalancerMetadataCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerMetadataCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerMetadataCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerMetadataCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerMetadataCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerMetadataCreateValidationError) ErrorName() string {
	return "LoadBalancerMetadataCreateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerMetadataCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerMetadataCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerMetadataCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerMetadataCreateValidationError{}

// Validate checks the field values on LoadBalancerMetadataUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerMetadataUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerMetadataUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerMetadataUpdateMultiError, or nil if none found.
func (m *LoadBalancerMetadataUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerMetadataUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	// no validation rules for Reserved1

	switch v := m.NameOrId.(type) {
	case *LoadBalancerMetadataUpdate_Name:
		if v == nil {
			err := LoadBalancerMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *LoadBalancerMetadataUpdate_ResourceId:
		if v == nil {
			err := LoadBalancerMetadataUpdateValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LoadBalancerMetadataUpdateMultiError(errors)
	}

	return nil
}

// LoadBalancerMetadataUpdateMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerMetadataUpdate.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerMetadataUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMetadataUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMetadataUpdateMultiError) AllErrors() []error { return m }

// LoadBalancerMetadataUpdateValidationError is the validation error returned
// by LoadBalancerMetadataUpdate.Validate if the designated constraints aren't met.
type LoadBalancerMetadataUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerMetadataUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerMetadataUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerMetadataUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerMetadataUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerMetadataUpdateValidationError) ErrorName() string {
	return "LoadBalancerMetadataUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerMetadataUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerMetadataUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerMetadataUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerMetadataUpdateValidationError{}

// Validate checks the field values on LoadBalancerMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerMetadataMultiError, or nil if none found.
func (m *LoadBalancerMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerMetadataValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerMetadataValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerMetadataValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerMetadataValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return LoadBalancerMetadataMultiError(errors)
	}

	return nil
}

// LoadBalancerMetadataMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerMetadata.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMetadataMultiError) AllErrors() []error { return m }

// LoadBalancerMetadataValidationError is the validation error returned by
// LoadBalancerMetadata.Validate if the designated constraints aren't met.
type LoadBalancerMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerMetadataValidationError) ErrorName() string {
	return "LoadBalancerMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerMetadataValidationError{}

// Validate checks the field values on LoadBalancerMetadataReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerMetadataReference with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LoadBalancerMetadataReferenceMultiError, or nil if none found.
func (m *LoadBalancerMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceVersion

	// no validation rules for Reserved1

	switch v := m.NameOrId.(type) {
	case *LoadBalancerMetadataReference_Name:
		if v == nil {
			err := LoadBalancerMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *LoadBalancerMetadataReference_ResourceId:
		if v == nil {
			err := LoadBalancerMetadataReferenceValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LoadBalancerMetadataReferenceMultiError(errors)
	}

	return nil
}

// LoadBalancerMetadataReferenceMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerMetadataReference.ValidateAll()
// if the designated constraints aren't met.
type LoadBalancerMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMetadataReferenceMultiError) AllErrors() []error { return m }

// LoadBalancerMetadataReferenceValidationError is the validation error
// returned by LoadBalancerMetadataReference.Validate if the designated
// constraints aren't met.
type LoadBalancerMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerMetadataReferenceValidationError) ErrorName() string {
	return "LoadBalancerMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerMetadataReferenceValidationError{}

// Validate checks the field values on LoadBalancerMetadataSearch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerMetadataSearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerMetadataSearch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerMetadataSearchMultiError, or nil if none found.
func (m *LoadBalancerMetadataSearch) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerMetadataSearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Labels

	// no validation rules for Reserved1

	if len(errors) > 0 {
		return LoadBalancerMetadataSearchMultiError(errors)
	}

	return nil
}

// LoadBalancerMetadataSearchMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerMetadataSearch.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerMetadataSearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMetadataSearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMetadataSearchMultiError) AllErrors() []error { return m }

// LoadBalancerMetadataSearchValidationError is the validation error returned
// by LoadBalancerMetadataSearch.Validate if the designated constraints aren't met.
type LoadBalancerMetadataSearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerMetadataSearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerMetadataSearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerMetadataSearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerMetadataSearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerMetadataSearchValidationError) ErrorName() string {
	return "LoadBalancerMetadataSearchValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerMetadataSearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerMetadataSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerMetadataSearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerMetadataSearchValidationError{}

// Validate checks the field values on LoadBalancerStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerStatusMultiError, or nil if none found.
func (m *LoadBalancerStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerStatusValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerStatusValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerStatusValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetListeners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerStatusValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerStatusValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerStatusValidationError{
					field:  fmt.Sprintf("Listeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	// no validation rules for Vip

	// no validation rules for Message

	if len(errors) > 0 {
		return LoadBalancerStatusMultiError(errors)
	}

	return nil
}

// LoadBalancerStatusMultiError is an error wrapping multiple validation errors
// returned by LoadBalancerStatus.ValidateAll() if the designated constraints
// aren't met.
type LoadBalancerStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerStatusMultiError) AllErrors() []error { return m }

// LoadBalancerStatusValidationError is the validation error returned by
// LoadBalancerStatus.Validate if the designated constraints aren't met.
type LoadBalancerStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerStatusValidationError) ErrorName() string {
	return "LoadBalancerStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerStatusValidationError{}

// Validate checks the field values on LoadBalancerSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerSecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerSecurityMultiError, or nil if none found.
func (m *LoadBalancerSecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerSecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoadBalancerSecurityMultiError(errors)
	}

	return nil
}

// LoadBalancerSecurityMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerSecurity.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerSecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerSecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerSecurityMultiError) AllErrors() []error { return m }

// LoadBalancerSecurityValidationError is the validation error returned by
// LoadBalancerSecurity.Validate if the designated constraints aren't met.
type LoadBalancerSecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerSecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerSecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerSecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerSecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerSecurityValidationError) ErrorName() string {
	return "LoadBalancerSecurityValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerSecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerSecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerSecurityValidationError{}

// Validate checks the field values on LoadBalancerListenerStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerListenerStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerListenerStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerListenerStatusMultiError, or nil if none found.
func (m *LoadBalancerListenerStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerListenerStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for VipID

	// no validation rules for Message

	for idx, item := range m.GetPoolMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerListenerStatusValidationError{
						field:  fmt.Sprintf("PoolMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerListenerStatusValidationError{
						field:  fmt.Sprintf("PoolMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerListenerStatusValidationError{
					field:  fmt.Sprintf("PoolMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PoolID

	// no validation rules for State

	// no validation rules for Port

	if len(errors) > 0 {
		return LoadBalancerListenerStatusMultiError(errors)
	}

	return nil
}

// LoadBalancerListenerStatusMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerListenerStatus.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerListenerStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerListenerStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerListenerStatusMultiError) AllErrors() []error { return m }

// LoadBalancerListenerStatusValidationError is the validation error returned
// by LoadBalancerListenerStatus.Validate if the designated constraints aren't met.
type LoadBalancerListenerStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerListenerStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerListenerStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerListenerStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerListenerStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerListenerStatusValidationError) ErrorName() string {
	return "LoadBalancerListenerStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerListenerStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerListenerStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerListenerStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerListenerStatusValidationError{}

// Validate checks the field values on LoadBalancerPoolStatusMember with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerPoolStatusMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerPoolStatusMember with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerPoolStatusMemberMultiError, or nil if none found.
func (m *LoadBalancerPoolStatusMember) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerPoolStatusMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceRef

	// no validation rules for Ip

	if len(errors) > 0 {
		return LoadBalancerPoolStatusMemberMultiError(errors)
	}

	return nil
}

// LoadBalancerPoolStatusMemberMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerPoolStatusMember.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerPoolStatusMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerPoolStatusMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerPoolStatusMemberMultiError) AllErrors() []error { return m }

// LoadBalancerPoolStatusMemberValidationError is the validation error returned
// by LoadBalancerPoolStatusMember.Validate if the designated constraints
// aren't met.
type LoadBalancerPoolStatusMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerPoolStatusMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerPoolStatusMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerPoolStatusMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerPoolStatusMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerPoolStatusMemberValidationError) ErrorName() string {
	return "LoadBalancerPoolStatusMemberValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerPoolStatusMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerPoolStatusMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerPoolStatusMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerPoolStatusMemberValidationError{}

// Validate checks the field values on LoadBalancerConditionsStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerConditionsStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerConditionsStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerConditionsStatusMultiError, or nil if none found.
func (m *LoadBalancerConditionsStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerConditionsStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetListeners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerConditionsStatusValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerConditionsStatusValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerConditionsStatusValidationError{
					field:  fmt.Sprintf("Listeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for FirewallRuleCreated

	if len(errors) > 0 {
		return LoadBalancerConditionsStatusMultiError(errors)
	}

	return nil
}

// LoadBalancerConditionsStatusMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerConditionsStatus.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerConditionsStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerConditionsStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerConditionsStatusMultiError) AllErrors() []error { return m }

// LoadBalancerConditionsStatusValidationError is the validation error returned
// by LoadBalancerConditionsStatus.Validate if the designated constraints
// aren't met.
type LoadBalancerConditionsStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerConditionsStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerConditionsStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerConditionsStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerConditionsStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerConditionsStatusValidationError) ErrorName() string {
	return "LoadBalancerConditionsStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerConditionsStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerConditionsStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerConditionsStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerConditionsStatusValidationError{}

// Validate checks the field values on LoadBalancerConditionsListenerStatus
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LoadBalancerConditionsListenerStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerConditionsListenerStatus
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadBalancerConditionsListenerStatusMultiError, or nil if none found.
func (m *LoadBalancerConditionsListenerStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerConditionsListenerStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Port

	// no validation rules for PoolCreated

	// no validation rules for VipCreated

	// no validation rules for VipPoolLinked

	if len(errors) > 0 {
		return LoadBalancerConditionsListenerStatusMultiError(errors)
	}

	return nil
}

// LoadBalancerConditionsListenerStatusMultiError is an error wrapping multiple
// validation errors returned by
// LoadBalancerConditionsListenerStatus.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerConditionsListenerStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerConditionsListenerStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerConditionsListenerStatusMultiError) AllErrors() []error { return m }

// LoadBalancerConditionsListenerStatusValidationError is the validation error
// returned by LoadBalancerConditionsListenerStatus.Validate if the designated
// constraints aren't met.
type LoadBalancerConditionsListenerStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerConditionsListenerStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerConditionsListenerStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerConditionsListenerStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerConditionsListenerStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerConditionsListenerStatusValidationError) ErrorName() string {
	return "LoadBalancerConditionsListenerStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerConditionsListenerStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerConditionsListenerStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerConditionsListenerStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerConditionsListenerStatusValidationError{}

// Validate checks the field values on InstanceTypeDeleteRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InstanceTypeDeleteRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeDeleteRequest_Metadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InstanceTypeDeleteRequest_MetadataMultiError, or nil if none found.
func (m *InstanceTypeDeleteRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeDeleteRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return InstanceTypeDeleteRequest_MetadataMultiError(errors)
	}

	return nil
}

// InstanceTypeDeleteRequest_MetadataMultiError is an error wrapping multiple
// validation errors returned by
// InstanceTypeDeleteRequest_Metadata.ValidateAll() if the designated
// constraints aren't met.
type InstanceTypeDeleteRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeDeleteRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeDeleteRequest_MetadataMultiError) AllErrors() []error { return m }

// InstanceTypeDeleteRequest_MetadataValidationError is the validation error
// returned by InstanceTypeDeleteRequest_Metadata.Validate if the designated
// constraints aren't met.
type InstanceTypeDeleteRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeDeleteRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeDeleteRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeDeleteRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeDeleteRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeDeleteRequest_MetadataValidationError) ErrorName() string {
	return "InstanceTypeDeleteRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTypeDeleteRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeDeleteRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeDeleteRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeDeleteRequest_MetadataValidationError{}

// Validate checks the field values on InstanceTypeGetRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTypeGetRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTypeGetRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstanceTypeGetRequest_MetadataMultiError, or nil if none found.
func (m *InstanceTypeGetRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTypeGetRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return InstanceTypeGetRequest_MetadataMultiError(errors)
	}

	return nil
}

// InstanceTypeGetRequest_MetadataMultiError is an error wrapping multiple
// validation errors returned by InstanceTypeGetRequest_Metadata.ValidateAll()
// if the designated constraints aren't met.
type InstanceTypeGetRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTypeGetRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTypeGetRequest_MetadataMultiError) AllErrors() []error { return m }

// InstanceTypeGetRequest_MetadataValidationError is the validation error
// returned by InstanceTypeGetRequest_Metadata.Validate if the designated
// constraints aren't met.
type InstanceTypeGetRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeGetRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeGetRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeGetRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeGetRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeGetRequest_MetadataValidationError) ErrorName() string {
	return "InstanceTypeGetRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTypeGetRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTypeGetRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeGetRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeGetRequest_MetadataValidationError{}

// Validate checks the field values on InstanceType_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceType_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceType_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceType_MetadataMultiError, or nil if none found.
func (m *InstanceType_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceType_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return InstanceType_MetadataMultiError(errors)
	}

	return nil
}

// InstanceType_MetadataMultiError is an error wrapping multiple validation
// errors returned by InstanceType_Metadata.ValidateAll() if the designated
// constraints aren't met.
type InstanceType_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceType_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceType_MetadataMultiError) AllErrors() []error { return m }

// InstanceType_MetadataValidationError is the validation error returned by
// InstanceType_Metadata.Validate if the designated constraints aren't met.
type InstanceType_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceType_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceType_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceType_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceType_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceType_MetadataValidationError) ErrorName() string {
	return "InstanceType_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceType_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceType_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceType_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceType_MetadataValidationError{}

// Validate checks the field values on MachineImageDeleteRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MachineImageDeleteRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageDeleteRequest_Metadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MachineImageDeleteRequest_MetadataMultiError, or nil if none found.
func (m *MachineImageDeleteRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageDeleteRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return MachineImageDeleteRequest_MetadataMultiError(errors)
	}

	return nil
}

// MachineImageDeleteRequest_MetadataMultiError is an error wrapping multiple
// validation errors returned by
// MachineImageDeleteRequest_Metadata.ValidateAll() if the designated
// constraints aren't met.
type MachineImageDeleteRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageDeleteRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageDeleteRequest_MetadataMultiError) AllErrors() []error { return m }

// MachineImageDeleteRequest_MetadataValidationError is the validation error
// returned by MachineImageDeleteRequest_Metadata.Validate if the designated
// constraints aren't met.
type MachineImageDeleteRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageDeleteRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageDeleteRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageDeleteRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageDeleteRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageDeleteRequest_MetadataValidationError) ErrorName() string {
	return "MachineImageDeleteRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageDeleteRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageDeleteRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageDeleteRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageDeleteRequest_MetadataValidationError{}

// Validate checks the field values on MachineImageGetRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineImageGetRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageGetRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MachineImageGetRequest_MetadataMultiError, or nil if none found.
func (m *MachineImageGetRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageGetRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return MachineImageGetRequest_MetadataMultiError(errors)
	}

	return nil
}

// MachineImageGetRequest_MetadataMultiError is an error wrapping multiple
// validation errors returned by MachineImageGetRequest_Metadata.ValidateAll()
// if the designated constraints aren't met.
type MachineImageGetRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageGetRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageGetRequest_MetadataMultiError) AllErrors() []error { return m }

// MachineImageGetRequest_MetadataValidationError is the validation error
// returned by MachineImageGetRequest_Metadata.Validate if the designated
// constraints aren't met.
type MachineImageGetRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageGetRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageGetRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageGetRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageGetRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageGetRequest_MetadataValidationError) ErrorName() string {
	return "MachineImageGetRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageGetRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageGetRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageGetRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageGetRequest_MetadataValidationError{}

// Validate checks the field values on MachineImageSearchRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MachineImageSearchRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImageSearchRequest_Metadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MachineImageSearchRequest_MetadataMultiError, or nil if none found.
func (m *MachineImageSearchRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImageSearchRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceType

	if len(errors) > 0 {
		return MachineImageSearchRequest_MetadataMultiError(errors)
	}

	return nil
}

// MachineImageSearchRequest_MetadataMultiError is an error wrapping multiple
// validation errors returned by
// MachineImageSearchRequest_Metadata.ValidateAll() if the designated
// constraints aren't met.
type MachineImageSearchRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImageSearchRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImageSearchRequest_MetadataMultiError) AllErrors() []error { return m }

// MachineImageSearchRequest_MetadataValidationError is the validation error
// returned by MachineImageSearchRequest_Metadata.Validate if the designated
// constraints aren't met.
type MachineImageSearchRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImageSearchRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImageSearchRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImageSearchRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImageSearchRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImageSearchRequest_MetadataValidationError) ErrorName() string {
	return "MachineImageSearchRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImageSearchRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImageSearchRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImageSearchRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImageSearchRequest_MetadataValidationError{}

// Validate checks the field values on MachineImage_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineImage_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineImage_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineImage_MetadataMultiError, or nil if none found.
func (m *MachineImage_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineImage_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return MachineImage_MetadataMultiError(errors)
	}

	return nil
}

// MachineImage_MetadataMultiError is an error wrapping multiple validation
// errors returned by MachineImage_Metadata.ValidateAll() if the designated
// constraints aren't met.
type MachineImage_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineImage_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineImage_MetadataMultiError) AllErrors() []error { return m }

// MachineImage_MetadataValidationError is the validation error returned by
// MachineImage_Metadata.Validate if the designated constraints aren't met.
type MachineImage_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineImage_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineImage_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineImage_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineImage_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineImage_MetadataValidationError) ErrorName() string {
	return "MachineImage_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e MachineImage_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineImage_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineImage_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineImage_MetadataValidationError{}

// Validate checks the field values on VNetPutRequest_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetPutRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetPutRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetPutRequest_MetadataMultiError, or nil if none found.
func (m *VNetPutRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetPutRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	if len(errors) > 0 {
		return VNetPutRequest_MetadataMultiError(errors)
	}

	return nil
}

// VNetPutRequest_MetadataMultiError is an error wrapping multiple validation
// errors returned by VNetPutRequest_Metadata.ValidateAll() if the designated
// constraints aren't met.
type VNetPutRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetPutRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetPutRequest_MetadataMultiError) AllErrors() []error { return m }

// VNetPutRequest_MetadataValidationError is the validation error returned by
// VNetPutRequest_Metadata.Validate if the designated constraints aren't met.
type VNetPutRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetPutRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetPutRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetPutRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetPutRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetPutRequest_MetadataValidationError) ErrorName() string {
	return "VNetPutRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e VNetPutRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetPutRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetPutRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetPutRequest_MetadataValidationError{}

// Validate checks the field values on VNetGetRequest_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetGetRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetGetRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetGetRequest_MetadataMultiError, or nil if none found.
func (m *VNetGetRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetGetRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	switch v := m.NameOrId.(type) {
	case *VNetGetRequest_Metadata_Name:
		if v == nil {
			err := VNetGetRequest_MetadataValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *VNetGetRequest_Metadata_ResourceId:
		if v == nil {
			err := VNetGetRequest_MetadataValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return VNetGetRequest_MetadataMultiError(errors)
	}

	return nil
}

// VNetGetRequest_MetadataMultiError is an error wrapping multiple validation
// errors returned by VNetGetRequest_Metadata.ValidateAll() if the designated
// constraints aren't met.
type VNetGetRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetGetRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetGetRequest_MetadataMultiError) AllErrors() []error { return m }

// VNetGetRequest_MetadataValidationError is the validation error returned by
// VNetGetRequest_Metadata.Validate if the designated constraints aren't met.
type VNetGetRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetGetRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetGetRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetGetRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetGetRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetGetRequest_MetadataValidationError) ErrorName() string {
	return "VNetGetRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e VNetGetRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetGetRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetGetRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetGetRequest_MetadataValidationError{}

// Validate checks the field values on VNetSearchRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetSearchRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetSearchRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetSearchRequest_MetadataMultiError, or nil if none found.
func (m *VNetSearchRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetSearchRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return VNetSearchRequest_MetadataMultiError(errors)
	}

	return nil
}

// VNetSearchRequest_MetadataMultiError is an error wrapping multiple
// validation errors returned by VNetSearchRequest_Metadata.ValidateAll() if
// the designated constraints aren't met.
type VNetSearchRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetSearchRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetSearchRequest_MetadataMultiError) AllErrors() []error { return m }

// VNetSearchRequest_MetadataValidationError is the validation error returned
// by VNetSearchRequest_Metadata.Validate if the designated constraints aren't met.
type VNetSearchRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetSearchRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetSearchRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetSearchRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetSearchRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetSearchRequest_MetadataValidationError) ErrorName() string {
	return "VNetSearchRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e VNetSearchRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetSearchRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetSearchRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetSearchRequest_MetadataValidationError{}

// Validate checks the field values on VNetDeleteRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetDeleteRequest_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetDeleteRequest_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetDeleteRequest_MetadataMultiError, or nil if none found.
func (m *VNetDeleteRequest_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetDeleteRequest_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	switch v := m.NameOrId.(type) {
	case *VNetDeleteRequest_Metadata_Name:
		if v == nil {
			err := VNetDeleteRequest_MetadataValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *VNetDeleteRequest_Metadata_ResourceId:
		if v == nil {
			err := VNetDeleteRequest_MetadataValidationError{
				field:  "NameOrId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ResourceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return VNetDeleteRequest_MetadataMultiError(errors)
	}

	return nil
}

// VNetDeleteRequest_MetadataMultiError is an error wrapping multiple
// validation errors returned by VNetDeleteRequest_Metadata.ValidateAll() if
// the designated constraints aren't met.
type VNetDeleteRequest_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetDeleteRequest_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetDeleteRequest_MetadataMultiError) AllErrors() []error { return m }

// VNetDeleteRequest_MetadataValidationError is the validation error returned
// by VNetDeleteRequest_Metadata.Validate if the designated constraints aren't met.
type VNetDeleteRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetDeleteRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetDeleteRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetDeleteRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetDeleteRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetDeleteRequest_MetadataValidationError) ErrorName() string {
	return "VNetDeleteRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e VNetDeleteRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetDeleteRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetDeleteRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetDeleteRequest_MetadataValidationError{}

// Validate checks the field values on VNet_Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VNet_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNet_Metadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VNet_MetadataMultiError, or
// nil if none found.
func (m *VNet_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VNet_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return VNet_MetadataMultiError(errors)
	}

	return nil
}

// VNet_MetadataMultiError is an error wrapping multiple validation errors
// returned by VNet_Metadata.ValidateAll() if the designated constraints
// aren't met.
type VNet_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNet_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNet_MetadataMultiError) AllErrors() []error { return m }

// VNet_MetadataValidationError is the validation error returned by
// VNet_Metadata.Validate if the designated constraints aren't met.
type VNet_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNet_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNet_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNet_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNet_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNet_MetadataValidationError) ErrorName() string { return "VNet_MetadataValidationError" }

// Error satisfies the builtin error interface
func (e VNet_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNet_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNet_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNet_MetadataValidationError{}
