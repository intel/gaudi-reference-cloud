// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cloudcredits.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CouponFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponFilterMultiError, or
// nil if none found.
func (m *CouponFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Redeemed != nil {

		if all {
			switch v := interface{}(m.GetRedeemed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponFilterValidationError{
						field:  "Redeemed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponFilterValidationError{
						field:  "Redeemed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRedeemed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponFilterValidationError{
					field:  "Redeemed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Creator != nil {
		// no validation rules for Creator
	}

	if len(errors) > 0 {
		return CouponFilterMultiError(errors)
	}

	return nil
}

// CouponFilterMultiError is an error wrapping multiple validation errors
// returned by CouponFilter.ValidateAll() if the designated constraints aren't met.
type CouponFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponFilterMultiError) AllErrors() []error { return m }

// CouponFilterValidationError is the validation error returned by
// CouponFilter.Validate if the designated constraints aren't met.
type CouponFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponFilterValidationError) ErrorName() string { return "CouponFilterValidationError" }

// Error satisfies the builtin error interface
func (e CouponFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponFilterValidationError{}

// Validate checks the field values on CouponResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponResponseMultiError,
// or nil if none found.
func (m *CouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponResponseValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRedemptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponResponseValidationError{
						field:  fmt.Sprintf("Redemptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponResponseValidationError{
						field:  fmt.Sprintf("Redemptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponResponseValidationError{
					field:  fmt.Sprintf("Redemptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CouponResponseMultiError(errors)
	}

	return nil
}

// CouponResponseMultiError is an error wrapping multiple validation errors
// returned by CouponResponse.ValidateAll() if the designated constraints
// aren't met.
type CouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponResponseMultiError) AllErrors() []error { return m }

// CouponResponseValidationError is the validation error returned by
// CouponResponse.Validate if the designated constraints aren't met.
type CouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponResponseValidationError) ErrorName() string { return "CouponResponseValidationError" }

// Error satisfies the builtin error interface
func (e CouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponResponseValidationError{}

// Validate checks the field values on CloudCreditsCouponRedeem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudCreditsCouponRedeem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudCreditsCouponRedeem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudCreditsCouponRedeemMultiError, or nil if none found.
func (m *CloudCreditsCouponRedeem) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudCreditsCouponRedeem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return CloudCreditsCouponRedeemMultiError(errors)
	}

	return nil
}

// CloudCreditsCouponRedeemMultiError is an error wrapping multiple validation
// errors returned by CloudCreditsCouponRedeem.ValidateAll() if the designated
// constraints aren't met.
type CloudCreditsCouponRedeemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudCreditsCouponRedeemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudCreditsCouponRedeemMultiError) AllErrors() []error { return m }

// CloudCreditsCouponRedeemValidationError is the validation error returned by
// CloudCreditsCouponRedeem.Validate if the designated constraints aren't met.
type CloudCreditsCouponRedeemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudCreditsCouponRedeemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudCreditsCouponRedeemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudCreditsCouponRedeemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudCreditsCouponRedeemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudCreditsCouponRedeemValidationError) ErrorName() string {
	return "CloudCreditsCouponRedeemValidationError"
}

// Error satisfies the builtin error interface
func (e CloudCreditsCouponRedeemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudCreditsCouponRedeem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudCreditsCouponRedeemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudCreditsCouponRedeemValidationError{}

// Validate checks the field values on CouponDisable with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponDisable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponDisable with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponDisableMultiError, or
// nil if none found.
func (m *CouponDisable) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponDisable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetDisabled()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponDisableValidationError{
					field:  "Disabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponDisableValidationError{
					field:  "Disabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisabled()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponDisableValidationError{
				field:  "Disabled",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CouponDisableMultiError(errors)
	}

	return nil
}

// CouponDisableMultiError is an error wrapping multiple validation errors
// returned by CouponDisable.ValidateAll() if the designated constraints
// aren't met.
type CouponDisableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponDisableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponDisableMultiError) AllErrors() []error { return m }

// CouponDisableValidationError is the validation error returned by
// CouponDisable.Validate if the designated constraints aren't met.
type CouponDisableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponDisableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponDisableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponDisableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponDisableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponDisableValidationError) ErrorName() string { return "CouponDisableValidationError" }

// Error satisfies the builtin error interface
func (e CouponDisableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponDisable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponDisableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponDisableValidationError{}

// Validate checks the field values on CouponCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponCreate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponCreateMultiError, or
// nil if none found.
func (m *CouponCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponCreateValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponCreateValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponCreateValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponCreateValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponCreateValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponCreateValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Amount

	// no validation rules for NumUses

	// no validation rules for Creator

	if m.IsStandard != nil {
		// no validation rules for IsStandard
	}

	if len(errors) > 0 {
		return CouponCreateMultiError(errors)
	}

	return nil
}

// CouponCreateMultiError is an error wrapping multiple validation errors
// returned by CouponCreate.ValidateAll() if the designated constraints aren't met.
type CouponCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponCreateMultiError) AllErrors() []error { return m }

// CouponCreateValidationError is the validation error returned by
// CouponCreate.Validate if the designated constraints aren't met.
type CouponCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponCreateValidationError) ErrorName() string { return "CouponCreateValidationError" }

// Error satisfies the builtin error interface
func (e CouponCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponCreateValidationError{}

// Validate checks the field values on CouponRedemption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouponRedemption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponRedemption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponRedemptionMultiError, or nil if none found.
func (m *CouponRedemption) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponRedemption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetRedeemed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponRedemptionValidationError{
					field:  "Redeemed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponRedemptionValidationError{
					field:  "Redeemed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedeemed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponRedemptionValidationError{
				field:  "Redeemed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Installed

	// no validation rules for Creator

	if len(errors) > 0 {
		return CouponRedemptionMultiError(errors)
	}

	return nil
}

// CouponRedemptionMultiError is an error wrapping multiple validation errors
// returned by CouponRedemption.ValidateAll() if the designated constraints
// aren't met.
type CouponRedemptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponRedemptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponRedemptionMultiError) AllErrors() []error { return m }

// CouponRedemptionValidationError is the validation error returned by
// CouponRedemption.Validate if the designated constraints aren't met.
type CouponRedemptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponRedemptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponRedemptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponRedemptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponRedemptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponRedemptionValidationError) ErrorName() string { return "CouponRedemptionValidationError" }

// Error satisfies the builtin error interface
func (e CouponRedemptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponRedemption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponRedemptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponRedemptionValidationError{}

// Validate checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CouponMultiError, or nil if none found.
func (m *Coupon) ValidateAll() error {
	return m.validate(true)
}

func (m *Coupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Creator

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDisabled()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Disabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "Disabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisabled()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "Disabled",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Amount

	// no validation rules for NumUses

	// no validation rules for NumRedeemed

	for idx, item := range m.GetRedemptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponValidationError{
						field:  fmt.Sprintf("Redemptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponValidationError{
						field:  fmt.Sprintf("Redemptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponValidationError{
					field:  fmt.Sprintf("Redemptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.IsStandard != nil {
		// no validation rules for IsStandard
	}

	if len(errors) > 0 {
		return CouponMultiError(errors)
	}

	return nil
}

// CouponMultiError is an error wrapping multiple validation errors returned by
// Coupon.ValidateAll() if the designated constraints aren't met.
type CouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponMultiError) AllErrors() []error { return m }

// CouponValidationError is the validation error returned by Coupon.Validate if
// the designated constraints aren't met.
type CouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponValidationError) ErrorName() string { return "CouponValidationError" }

// Error satisfies the builtin error interface
func (e CouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponValidationError{}

// Validate checks the field values on CreditInstall with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditInstall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditInstall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditInstallMultiError, or
// nil if none found.
func (m *CreditInstall) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditInstall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditInstallValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditInstallValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditInstallValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditInstallValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditInstallValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditInstallValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	// no validation rules for OriginalAmount

	// no validation rules for CouponCode

	// no validation rules for RemainingAmount

	// no validation rules for Reason

	if len(errors) > 0 {
		return CreditInstallMultiError(errors)
	}

	return nil
}

// CreditInstallMultiError is an error wrapping multiple validation errors
// returned by CreditInstall.ValidateAll() if the designated constraints
// aren't met.
type CreditInstallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditInstallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditInstallMultiError) AllErrors() []error { return m }

// CreditInstallValidationError is the validation error returned by
// CreditInstall.Validate if the designated constraints aren't met.
type CreditInstallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditInstallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditInstallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditInstallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditInstallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditInstallValidationError) ErrorName() string { return "CreditInstallValidationError" }

// Error satisfies the builtin error interface
func (e CreditInstallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditInstall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditInstallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditInstallValidationError{}

// Validate checks the field values on CreditFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditFilterMultiError, or
// nil if none found.
func (m *CreditFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if m.History != nil {
		// no validation rules for History
	}

	if len(errors) > 0 {
		return CreditFilterMultiError(errors)
	}

	return nil
}

// CreditFilterMultiError is an error wrapping multiple validation errors
// returned by CreditFilter.ValidateAll() if the designated constraints aren't met.
type CreditFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditFilterMultiError) AllErrors() []error { return m }

// CreditFilterValidationError is the validation error returned by
// CreditFilter.Validate if the designated constraints aren't met.
type CreditFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditFilterValidationError) ErrorName() string { return "CreditFilterValidationError" }

// Error satisfies the builtin error interface
func (e CreditFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditFilterValidationError{}

// Validate checks the field values on CreditResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditResponseMultiError,
// or nil if none found.
func (m *CreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalRemainingAmount

	// no validation rules for TotalUsedAmount

	// no validation rules for TotalUnAppliedAmount

	if all {
		switch v := interface{}(m.GetLastUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditResponseValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditResponseValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditResponseValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditResponseValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditResponseValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditResponseValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCredits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreditResponseValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreditResponseValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreditResponseValidationError{
					field:  fmt.Sprintf("Credits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreditResponseMultiError(errors)
	}

	return nil
}

// CreditResponseMultiError is an error wrapping multiple validation errors
// returned by CreditResponse.ValidateAll() if the designated constraints
// aren't met.
type CreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditResponseMultiError) AllErrors() []error { return m }

// CreditResponseValidationError is the validation error returned by
// CreditResponse.Validate if the designated constraints aren't met.
type CreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditResponseValidationError) ErrorName() string { return "CreditResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditResponseValidationError{}

// Validate checks the field values on Credit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Credit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CreditMultiError, or nil if none found.
func (m *Credit) ValidateAll() error {
	return m.validate(true)
}

func (m *Credit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	// no validation rules for OriginalAmount

	// no validation rules for RemainingAmount

	// no validation rules for CouponCode

	// no validation rules for AmountUsed

	// no validation rules for Reason

	if len(errors) > 0 {
		return CreditMultiError(errors)
	}

	return nil
}

// CreditMultiError is an error wrapping multiple validation errors returned by
// Credit.ValidateAll() if the designated constraints aren't met.
type CreditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditMultiError) AllErrors() []error { return m }

// CreditValidationError is the validation error returned by Credit.Validate if
// the designated constraints aren't met.
type CreditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditValidationError) ErrorName() string { return "CreditValidationError" }

// Error satisfies the builtin error interface
func (e CreditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on UnappliedCreditBalance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnappliedCreditBalance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnappliedCreditBalance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnappliedCreditBalanceMultiError, or nil if none found.
func (m *UnappliedCreditBalance) ValidateAll() error {
	return m.validate(true)
}

func (m *UnappliedCreditBalance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnappliedAmount

	if len(errors) > 0 {
		return UnappliedCreditBalanceMultiError(errors)
	}

	return nil
}

// UnappliedCreditBalanceMultiError is an error wrapping multiple validation
// errors returned by UnappliedCreditBalance.ValidateAll() if the designated
// constraints aren't met.
type UnappliedCreditBalanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnappliedCreditBalanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnappliedCreditBalanceMultiError) AllErrors() []error { return m }

// UnappliedCreditBalanceValidationError is the validation error returned by
// UnappliedCreditBalance.Validate if the designated constraints aren't met.
type UnappliedCreditBalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnappliedCreditBalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnappliedCreditBalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnappliedCreditBalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnappliedCreditBalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnappliedCreditBalanceValidationError) ErrorName() string {
	return "UnappliedCreditBalanceValidationError"
}

// Error satisfies the builtin error interface
func (e UnappliedCreditBalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnappliedCreditBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnappliedCreditBalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnappliedCreditBalanceValidationError{}

// Validate checks the field values on UnappliedCredits with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnappliedCredits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnappliedCredits with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnappliedCreditsMultiError, or nil if none found.
func (m *UnappliedCredits) ValidateAll() error {
	return m.validate(true)
}

func (m *UnappliedCredits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for RemainingAmount

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnappliedCreditsValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnappliedCreditsValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnappliedCreditsValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnappliedCreditsMultiError(errors)
	}

	return nil
}

// UnappliedCreditsMultiError is an error wrapping multiple validation errors
// returned by UnappliedCredits.ValidateAll() if the designated constraints
// aren't met.
type UnappliedCreditsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnappliedCreditsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnappliedCreditsMultiError) AllErrors() []error { return m }

// UnappliedCreditsValidationError is the validation error returned by
// UnappliedCredits.Validate if the designated constraints aren't met.
type UnappliedCreditsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnappliedCreditsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnappliedCreditsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnappliedCreditsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnappliedCreditsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnappliedCreditsValidationError) ErrorName() string { return "UnappliedCreditsValidationError" }

// Error satisfies the builtin error interface
func (e UnappliedCreditsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnappliedCredits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnappliedCreditsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnappliedCreditsValidationError{}

// Validate checks the field values on MigratedCredits with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MigratedCredits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MigratedCredits with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MigratedCreditsMultiError, or nil if none found.
func (m *MigratedCredits) ValidateAll() error {
	return m.validate(true)
}

func (m *MigratedCredits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return MigratedCreditsMultiError(errors)
	}

	return nil
}

// MigratedCreditsMultiError is an error wrapping multiple validation errors
// returned by MigratedCredits.ValidateAll() if the designated constraints
// aren't met.
type MigratedCreditsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MigratedCreditsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MigratedCreditsMultiError) AllErrors() []error { return m }

// MigratedCreditsValidationError is the validation error returned by
// MigratedCredits.Validate if the designated constraints aren't met.
type MigratedCreditsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigratedCreditsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigratedCreditsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigratedCreditsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigratedCreditsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigratedCreditsValidationError) ErrorName() string { return "MigratedCreditsValidationError" }

// Error satisfies the builtin error interface
func (e MigratedCreditsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigratedCredits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigratedCreditsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigratedCreditsValidationError{}

// Validate checks the field values on CreditsState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditsState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditsState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditsStateMultiError, or
// nil if none found.
func (m *CreditsState) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditsState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetEventAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditsStateValidationError{
					field:  "EventAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditsStateValidationError{
					field:  "EventAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditsStateValidationError{
				field:  "EventAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreditsStateMultiError(errors)
	}

	return nil
}

// CreditsStateMultiError is an error wrapping multiple validation errors
// returned by CreditsState.ValidateAll() if the designated constraints aren't met.
type CreditsStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditsStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditsStateMultiError) AllErrors() []error { return m }

// CreditsStateValidationError is the validation error returned by
// CreditsState.Validate if the designated constraints aren't met.
type CreditsStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditsStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditsStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditsStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditsStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditsStateValidationError) ErrorName() string { return "CreditsStateValidationError" }

// Error satisfies the builtin error interface
func (e CreditsStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditsState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditsStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditsStateValidationError{}

// Validate checks the field values on CreditsStateFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreditsStateFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditsStateFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditsStateFilterMultiError, or nil if none found.
func (m *CreditsStateFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditsStateFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return CreditsStateFilterMultiError(errors)
	}

	return nil
}

// CreditsStateFilterMultiError is an error wrapping multiple validation errors
// returned by CreditsStateFilter.ValidateAll() if the designated constraints
// aren't met.
type CreditsStateFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditsStateFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditsStateFilterMultiError) AllErrors() []error { return m }

// CreditsStateFilterValidationError is the validation error returned by
// CreditsStateFilter.Validate if the designated constraints aren't met.
type CreditsStateFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditsStateFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditsStateFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditsStateFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditsStateFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditsStateFilterValidationError) ErrorName() string {
	return "CreditsStateFilterValidationError"
}

// Error satisfies the builtin error interface
func (e CreditsStateFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditsStateFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditsStateFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditsStateFilterValidationError{}

// Validate checks the field values on CreditsStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreditsStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditsStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditsStateResponseMultiError, or nil if none found.
func (m *CreditsStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditsStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetEventAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditsStateResponseValidationError{
					field:  "EventAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditsStateResponseValidationError{
					field:  "EventAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditsStateResponseValidationError{
				field:  "EventAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditsStateResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditsStateResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditsStateResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreditsStateResponseMultiError(errors)
	}

	return nil
}

// CreditsStateResponseMultiError is an error wrapping multiple validation
// errors returned by CreditsStateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreditsStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditsStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditsStateResponseMultiError) AllErrors() []error { return m }

// CreditsStateResponseValidationError is the validation error returned by
// CreditsStateResponse.Validate if the designated constraints aren't met.
type CreditsStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditsStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditsStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditsStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditsStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditsStateResponseValidationError) ErrorName() string {
	return "CreditsStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreditsStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditsStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditsStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditsStateResponseValidationError{}
