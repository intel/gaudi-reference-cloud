// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dpai_hms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DpaiHmsConfGroupServiceClient is the client API for DpaiHmsConfGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiHmsConfGroupServiceClient interface {
	DpaiHmsConfGroupCreate(ctx context.Context, in *DpaiHmsConfGroupCreateRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupList(ctx context.Context, in *DpaiHmsConfGroupListRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroupListResponse, error)
	DpaiHmsConfGroupGetById(ctx context.Context, in *DpaiHmsConfGroupGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupGetByName(ctx context.Context, in *DpaiHmsConfGroupGetByNameRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupUpdate(ctx context.Context, in *DpaiHmsConfGroupUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupDelete(ctx context.Context, in *DpaiHmsConfGroupDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroupDeleteResponse, error)
}

type dpaiHmsConfGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiHmsConfGroupServiceClient(cc grpc.ClientConnInterface) DpaiHmsConfGroupServiceClient {
	return &dpaiHmsConfGroupServiceClient{cc}
}

func (c *dpaiHmsConfGroupServiceClient) DpaiHmsConfGroupCreate(ctx context.Context, in *DpaiHmsConfGroupCreateRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error) {
	out := new(DpaiHmsConfGroup)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfGroupServiceClient) DpaiHmsConfGroupList(ctx context.Context, in *DpaiHmsConfGroupListRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroupListResponse, error) {
	out := new(DpaiHmsConfGroupListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfGroupServiceClient) DpaiHmsConfGroupGetById(ctx context.Context, in *DpaiHmsConfGroupGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error) {
	out := new(DpaiHmsConfGroup)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfGroupServiceClient) DpaiHmsConfGroupGetByName(ctx context.Context, in *DpaiHmsConfGroupGetByNameRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error) {
	out := new(DpaiHmsConfGroup)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfGroupServiceClient) DpaiHmsConfGroupUpdate(ctx context.Context, in *DpaiHmsConfGroupUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroup, error) {
	out := new(DpaiHmsConfGroup)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfGroupServiceClient) DpaiHmsConfGroupDelete(ctx context.Context, in *DpaiHmsConfGroupDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsConfGroupDeleteResponse, error) {
	out := new(DpaiHmsConfGroupDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiHmsConfGroupServiceServer is the server API for DpaiHmsConfGroupService service.
// All implementations must embed UnimplementedDpaiHmsConfGroupServiceServer
// for forward compatibility
type DpaiHmsConfGroupServiceServer interface {
	DpaiHmsConfGroupCreate(context.Context, *DpaiHmsConfGroupCreateRequest) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupList(context.Context, *DpaiHmsConfGroupListRequest) (*DpaiHmsConfGroupListResponse, error)
	DpaiHmsConfGroupGetById(context.Context, *DpaiHmsConfGroupGetByIdRequest) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupGetByName(context.Context, *DpaiHmsConfGroupGetByNameRequest) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupUpdate(context.Context, *DpaiHmsConfGroupUpdateRequest) (*DpaiHmsConfGroup, error)
	DpaiHmsConfGroupDelete(context.Context, *DpaiHmsConfGroupDeleteRequest) (*DpaiHmsConfGroupDeleteResponse, error)
	mustEmbedUnimplementedDpaiHmsConfGroupServiceServer()
}

// UnimplementedDpaiHmsConfGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiHmsConfGroupServiceServer struct {
}

func (UnimplementedDpaiHmsConfGroupServiceServer) DpaiHmsConfGroupCreate(context.Context, *DpaiHmsConfGroupCreateRequest) (*DpaiHmsConfGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfGroupCreate not implemented")
}
func (UnimplementedDpaiHmsConfGroupServiceServer) DpaiHmsConfGroupList(context.Context, *DpaiHmsConfGroupListRequest) (*DpaiHmsConfGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfGroupList not implemented")
}
func (UnimplementedDpaiHmsConfGroupServiceServer) DpaiHmsConfGroupGetById(context.Context, *DpaiHmsConfGroupGetByIdRequest) (*DpaiHmsConfGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfGroupGetById not implemented")
}
func (UnimplementedDpaiHmsConfGroupServiceServer) DpaiHmsConfGroupGetByName(context.Context, *DpaiHmsConfGroupGetByNameRequest) (*DpaiHmsConfGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfGroupGetByName not implemented")
}
func (UnimplementedDpaiHmsConfGroupServiceServer) DpaiHmsConfGroupUpdate(context.Context, *DpaiHmsConfGroupUpdateRequest) (*DpaiHmsConfGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfGroupUpdate not implemented")
}
func (UnimplementedDpaiHmsConfGroupServiceServer) DpaiHmsConfGroupDelete(context.Context, *DpaiHmsConfGroupDeleteRequest) (*DpaiHmsConfGroupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfGroupDelete not implemented")
}
func (UnimplementedDpaiHmsConfGroupServiceServer) mustEmbedUnimplementedDpaiHmsConfGroupServiceServer() {
}

// UnsafeDpaiHmsConfGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiHmsConfGroupServiceServer will
// result in compilation errors.
type UnsafeDpaiHmsConfGroupServiceServer interface {
	mustEmbedUnimplementedDpaiHmsConfGroupServiceServer()
}

func RegisterDpaiHmsConfGroupServiceServer(s grpc.ServiceRegistrar, srv DpaiHmsConfGroupServiceServer) {
	s.RegisterService(&DpaiHmsConfGroupService_ServiceDesc, srv)
}

func _DpaiHmsConfGroupService_DpaiHmsConfGroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupCreate(ctx, req.(*DpaiHmsConfGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfGroupService_DpaiHmsConfGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupList(ctx, req.(*DpaiHmsConfGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfGroupService_DpaiHmsConfGroupGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfGroupGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupGetById(ctx, req.(*DpaiHmsConfGroupGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfGroupService_DpaiHmsConfGroupGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfGroupGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupGetByName(ctx, req.(*DpaiHmsConfGroupGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfGroupService_DpaiHmsConfGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfGroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupUpdate(ctx, req.(*DpaiHmsConfGroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfGroupService_DpaiHmsConfGroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfGroupService/DpaiHmsConfGroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfGroupServiceServer).DpaiHmsConfGroupDelete(ctx, req.(*DpaiHmsConfGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiHmsConfGroupService_ServiceDesc is the grpc.ServiceDesc for DpaiHmsConfGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiHmsConfGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiHmsConfGroupService",
	HandlerType: (*DpaiHmsConfGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiHmsConfGroupCreate",
			Handler:    _DpaiHmsConfGroupService_DpaiHmsConfGroupCreate_Handler,
		},
		{
			MethodName: "DpaiHmsConfGroupList",
			Handler:    _DpaiHmsConfGroupService_DpaiHmsConfGroupList_Handler,
		},
		{
			MethodName: "DpaiHmsConfGroupGetById",
			Handler:    _DpaiHmsConfGroupService_DpaiHmsConfGroupGetById_Handler,
		},
		{
			MethodName: "DpaiHmsConfGroupGetByName",
			Handler:    _DpaiHmsConfGroupService_DpaiHmsConfGroupGetByName_Handler,
		},
		{
			MethodName: "DpaiHmsConfGroupUpdate",
			Handler:    _DpaiHmsConfGroupService_DpaiHmsConfGroupUpdate_Handler,
		},
		{
			MethodName: "DpaiHmsConfGroupDelete",
			Handler:    _DpaiHmsConfGroupService_DpaiHmsConfGroupDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_hms.proto",
}

// DpaiHmsConfServiceClient is the client API for DpaiHmsConfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiHmsConfServiceClient interface {
	DpaiHmsConfCreate(ctx context.Context, in *DpaiHmsConfCreateRequest, opts ...grpc.CallOption) (*DpaiHmsConf, error)
	DpaiHmsConfList(ctx context.Context, in *DpaiHmsConfListRequest, opts ...grpc.CallOption) (*DpaiHmsConfListResponse, error)
	DpaiHmsConfListByGroupId(ctx context.Context, in *DpaiHmsConfListByGroupIdRequest, opts ...grpc.CallOption) (*DpaiHmsConfListResponse, error)
	DpaiHmsConfGetById(ctx context.Context, in *DpaiHmsConfGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsConf, error)
	DpaiHmsConfUpdate(ctx context.Context, in *DpaiHmsConfUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsConf, error)
	DpaiHmsConfDelete(ctx context.Context, in *DpaiHmsConfDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsConfDeleteResponse, error)
	DpaiHmsConfDeleteByHmsId(ctx context.Context, in *DpaiHmsConfDeleteByHmsIdRequest, opts ...grpc.CallOption) (*DpaiHmsConfDeleteResponse, error)
}

type dpaiHmsConfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiHmsConfServiceClient(cc grpc.ClientConnInterface) DpaiHmsConfServiceClient {
	return &dpaiHmsConfServiceClient{cc}
}

func (c *dpaiHmsConfServiceClient) DpaiHmsConfCreate(ctx context.Context, in *DpaiHmsConfCreateRequest, opts ...grpc.CallOption) (*DpaiHmsConf, error) {
	out := new(DpaiHmsConf)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfService/DpaiHmsConfCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfServiceClient) DpaiHmsConfList(ctx context.Context, in *DpaiHmsConfListRequest, opts ...grpc.CallOption) (*DpaiHmsConfListResponse, error) {
	out := new(DpaiHmsConfListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfService/DpaiHmsConfList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfServiceClient) DpaiHmsConfListByGroupId(ctx context.Context, in *DpaiHmsConfListByGroupIdRequest, opts ...grpc.CallOption) (*DpaiHmsConfListResponse, error) {
	out := new(DpaiHmsConfListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfService/DpaiHmsConfListByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfServiceClient) DpaiHmsConfGetById(ctx context.Context, in *DpaiHmsConfGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsConf, error) {
	out := new(DpaiHmsConf)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfService/DpaiHmsConfGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfServiceClient) DpaiHmsConfUpdate(ctx context.Context, in *DpaiHmsConfUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsConf, error) {
	out := new(DpaiHmsConf)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfService/DpaiHmsConfUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfServiceClient) DpaiHmsConfDelete(ctx context.Context, in *DpaiHmsConfDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsConfDeleteResponse, error) {
	out := new(DpaiHmsConfDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfService/DpaiHmsConfDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsConfServiceClient) DpaiHmsConfDeleteByHmsId(ctx context.Context, in *DpaiHmsConfDeleteByHmsIdRequest, opts ...grpc.CallOption) (*DpaiHmsConfDeleteResponse, error) {
	out := new(DpaiHmsConfDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsConfService/DpaiHmsConfDeleteByHmsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiHmsConfServiceServer is the server API for DpaiHmsConfService service.
// All implementations must embed UnimplementedDpaiHmsConfServiceServer
// for forward compatibility
type DpaiHmsConfServiceServer interface {
	DpaiHmsConfCreate(context.Context, *DpaiHmsConfCreateRequest) (*DpaiHmsConf, error)
	DpaiHmsConfList(context.Context, *DpaiHmsConfListRequest) (*DpaiHmsConfListResponse, error)
	DpaiHmsConfListByGroupId(context.Context, *DpaiHmsConfListByGroupIdRequest) (*DpaiHmsConfListResponse, error)
	DpaiHmsConfGetById(context.Context, *DpaiHmsConfGetByIdRequest) (*DpaiHmsConf, error)
	DpaiHmsConfUpdate(context.Context, *DpaiHmsConfUpdateRequest) (*DpaiHmsConf, error)
	DpaiHmsConfDelete(context.Context, *DpaiHmsConfDeleteRequest) (*DpaiHmsConfDeleteResponse, error)
	DpaiHmsConfDeleteByHmsId(context.Context, *DpaiHmsConfDeleteByHmsIdRequest) (*DpaiHmsConfDeleteResponse, error)
	mustEmbedUnimplementedDpaiHmsConfServiceServer()
}

// UnimplementedDpaiHmsConfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiHmsConfServiceServer struct {
}

func (UnimplementedDpaiHmsConfServiceServer) DpaiHmsConfCreate(context.Context, *DpaiHmsConfCreateRequest) (*DpaiHmsConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfCreate not implemented")
}
func (UnimplementedDpaiHmsConfServiceServer) DpaiHmsConfList(context.Context, *DpaiHmsConfListRequest) (*DpaiHmsConfListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfList not implemented")
}
func (UnimplementedDpaiHmsConfServiceServer) DpaiHmsConfListByGroupId(context.Context, *DpaiHmsConfListByGroupIdRequest) (*DpaiHmsConfListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfListByGroupId not implemented")
}
func (UnimplementedDpaiHmsConfServiceServer) DpaiHmsConfGetById(context.Context, *DpaiHmsConfGetByIdRequest) (*DpaiHmsConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfGetById not implemented")
}
func (UnimplementedDpaiHmsConfServiceServer) DpaiHmsConfUpdate(context.Context, *DpaiHmsConfUpdateRequest) (*DpaiHmsConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfUpdate not implemented")
}
func (UnimplementedDpaiHmsConfServiceServer) DpaiHmsConfDelete(context.Context, *DpaiHmsConfDeleteRequest) (*DpaiHmsConfDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfDelete not implemented")
}
func (UnimplementedDpaiHmsConfServiceServer) DpaiHmsConfDeleteByHmsId(context.Context, *DpaiHmsConfDeleteByHmsIdRequest) (*DpaiHmsConfDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsConfDeleteByHmsId not implemented")
}
func (UnimplementedDpaiHmsConfServiceServer) mustEmbedUnimplementedDpaiHmsConfServiceServer() {}

// UnsafeDpaiHmsConfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiHmsConfServiceServer will
// result in compilation errors.
type UnsafeDpaiHmsConfServiceServer interface {
	mustEmbedUnimplementedDpaiHmsConfServiceServer()
}

func RegisterDpaiHmsConfServiceServer(s grpc.ServiceRegistrar, srv DpaiHmsConfServiceServer) {
	s.RegisterService(&DpaiHmsConfService_ServiceDesc, srv)
}

func _DpaiHmsConfService_DpaiHmsConfCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfService/DpaiHmsConfCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfCreate(ctx, req.(*DpaiHmsConfCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfService_DpaiHmsConfList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfService/DpaiHmsConfList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfList(ctx, req.(*DpaiHmsConfListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfService_DpaiHmsConfListByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfListByGroupIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfListByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfService/DpaiHmsConfListByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfListByGroupId(ctx, req.(*DpaiHmsConfListByGroupIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfService_DpaiHmsConfGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfService/DpaiHmsConfGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfGetById(ctx, req.(*DpaiHmsConfGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfService_DpaiHmsConfUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfService/DpaiHmsConfUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfUpdate(ctx, req.(*DpaiHmsConfUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfService_DpaiHmsConfDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfService/DpaiHmsConfDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfDelete(ctx, req.(*DpaiHmsConfDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsConfService_DpaiHmsConfDeleteByHmsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsConfDeleteByHmsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfDeleteByHmsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsConfService/DpaiHmsConfDeleteByHmsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsConfServiceServer).DpaiHmsConfDeleteByHmsId(ctx, req.(*DpaiHmsConfDeleteByHmsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiHmsConfService_ServiceDesc is the grpc.ServiceDesc for DpaiHmsConfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiHmsConfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiHmsConfService",
	HandlerType: (*DpaiHmsConfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiHmsConfCreate",
			Handler:    _DpaiHmsConfService_DpaiHmsConfCreate_Handler,
		},
		{
			MethodName: "DpaiHmsConfList",
			Handler:    _DpaiHmsConfService_DpaiHmsConfList_Handler,
		},
		{
			MethodName: "DpaiHmsConfListByGroupId",
			Handler:    _DpaiHmsConfService_DpaiHmsConfListByGroupId_Handler,
		},
		{
			MethodName: "DpaiHmsConfGetById",
			Handler:    _DpaiHmsConfService_DpaiHmsConfGetById_Handler,
		},
		{
			MethodName: "DpaiHmsConfUpdate",
			Handler:    _DpaiHmsConfService_DpaiHmsConfUpdate_Handler,
		},
		{
			MethodName: "DpaiHmsConfDelete",
			Handler:    _DpaiHmsConfService_DpaiHmsConfDelete_Handler,
		},
		{
			MethodName: "DpaiHmsConfDeleteByHmsId",
			Handler:    _DpaiHmsConfService_DpaiHmsConfDeleteByHmsId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_hms.proto",
}

// DpaiHmsSizeServiceClient is the client API for DpaiHmsSizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiHmsSizeServiceClient interface {
	DpaiHmsSizeCreate(ctx context.Context, in *DpaiHmsSizeCreateRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error)
	DpaiHmsSizeList(ctx context.Context, in *DpaiHmsSizeListRequest, opts ...grpc.CallOption) (*DpaiHmsSizeListResponse, error)
	DpaiHmsSizeGetById(ctx context.Context, in *DpaiHmsSizeGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error)
	DpaiHmsSizeGetByName(ctx context.Context, in *DpaiHmsSizeGetByNameRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error)
	DpaiHmsSizeUpdate(ctx context.Context, in *DpaiHmsSizeUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error)
	DpaiHmsSizeDelete(ctx context.Context, in *DpaiHmsSizeDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsSizeDeleteResponse, error)
}

type dpaiHmsSizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiHmsSizeServiceClient(cc grpc.ClientConnInterface) DpaiHmsSizeServiceClient {
	return &dpaiHmsSizeServiceClient{cc}
}

func (c *dpaiHmsSizeServiceClient) DpaiHmsSizeCreate(ctx context.Context, in *DpaiHmsSizeCreateRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error) {
	out := new(DpaiHmsSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsSizeService/DpaiHmsSizeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsSizeServiceClient) DpaiHmsSizeList(ctx context.Context, in *DpaiHmsSizeListRequest, opts ...grpc.CallOption) (*DpaiHmsSizeListResponse, error) {
	out := new(DpaiHmsSizeListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsSizeService/DpaiHmsSizeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsSizeServiceClient) DpaiHmsSizeGetById(ctx context.Context, in *DpaiHmsSizeGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error) {
	out := new(DpaiHmsSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsSizeService/DpaiHmsSizeGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsSizeServiceClient) DpaiHmsSizeGetByName(ctx context.Context, in *DpaiHmsSizeGetByNameRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error) {
	out := new(DpaiHmsSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsSizeService/DpaiHmsSizeGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsSizeServiceClient) DpaiHmsSizeUpdate(ctx context.Context, in *DpaiHmsSizeUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsSize, error) {
	out := new(DpaiHmsSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsSizeService/DpaiHmsSizeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsSizeServiceClient) DpaiHmsSizeDelete(ctx context.Context, in *DpaiHmsSizeDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsSizeDeleteResponse, error) {
	out := new(DpaiHmsSizeDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsSizeService/DpaiHmsSizeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiHmsSizeServiceServer is the server API for DpaiHmsSizeService service.
// All implementations must embed UnimplementedDpaiHmsSizeServiceServer
// for forward compatibility
type DpaiHmsSizeServiceServer interface {
	DpaiHmsSizeCreate(context.Context, *DpaiHmsSizeCreateRequest) (*DpaiHmsSize, error)
	DpaiHmsSizeList(context.Context, *DpaiHmsSizeListRequest) (*DpaiHmsSizeListResponse, error)
	DpaiHmsSizeGetById(context.Context, *DpaiHmsSizeGetByIdRequest) (*DpaiHmsSize, error)
	DpaiHmsSizeGetByName(context.Context, *DpaiHmsSizeGetByNameRequest) (*DpaiHmsSize, error)
	DpaiHmsSizeUpdate(context.Context, *DpaiHmsSizeUpdateRequest) (*DpaiHmsSize, error)
	DpaiHmsSizeDelete(context.Context, *DpaiHmsSizeDeleteRequest) (*DpaiHmsSizeDeleteResponse, error)
	mustEmbedUnimplementedDpaiHmsSizeServiceServer()
}

// UnimplementedDpaiHmsSizeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiHmsSizeServiceServer struct {
}

func (UnimplementedDpaiHmsSizeServiceServer) DpaiHmsSizeCreate(context.Context, *DpaiHmsSizeCreateRequest) (*DpaiHmsSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsSizeCreate not implemented")
}
func (UnimplementedDpaiHmsSizeServiceServer) DpaiHmsSizeList(context.Context, *DpaiHmsSizeListRequest) (*DpaiHmsSizeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsSizeList not implemented")
}
func (UnimplementedDpaiHmsSizeServiceServer) DpaiHmsSizeGetById(context.Context, *DpaiHmsSizeGetByIdRequest) (*DpaiHmsSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsSizeGetById not implemented")
}
func (UnimplementedDpaiHmsSizeServiceServer) DpaiHmsSizeGetByName(context.Context, *DpaiHmsSizeGetByNameRequest) (*DpaiHmsSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsSizeGetByName not implemented")
}
func (UnimplementedDpaiHmsSizeServiceServer) DpaiHmsSizeUpdate(context.Context, *DpaiHmsSizeUpdateRequest) (*DpaiHmsSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsSizeUpdate not implemented")
}
func (UnimplementedDpaiHmsSizeServiceServer) DpaiHmsSizeDelete(context.Context, *DpaiHmsSizeDeleteRequest) (*DpaiHmsSizeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsSizeDelete not implemented")
}
func (UnimplementedDpaiHmsSizeServiceServer) mustEmbedUnimplementedDpaiHmsSizeServiceServer() {}

// UnsafeDpaiHmsSizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiHmsSizeServiceServer will
// result in compilation errors.
type UnsafeDpaiHmsSizeServiceServer interface {
	mustEmbedUnimplementedDpaiHmsSizeServiceServer()
}

func RegisterDpaiHmsSizeServiceServer(s grpc.ServiceRegistrar, srv DpaiHmsSizeServiceServer) {
	s.RegisterService(&DpaiHmsSizeService_ServiceDesc, srv)
}

func _DpaiHmsSizeService_DpaiHmsSizeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsSizeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsSizeService/DpaiHmsSizeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeCreate(ctx, req.(*DpaiHmsSizeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsSizeService_DpaiHmsSizeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsSizeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsSizeService/DpaiHmsSizeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeList(ctx, req.(*DpaiHmsSizeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsSizeService_DpaiHmsSizeGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsSizeGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsSizeService/DpaiHmsSizeGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeGetById(ctx, req.(*DpaiHmsSizeGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsSizeService_DpaiHmsSizeGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsSizeGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsSizeService/DpaiHmsSizeGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeGetByName(ctx, req.(*DpaiHmsSizeGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsSizeService_DpaiHmsSizeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsSizeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsSizeService/DpaiHmsSizeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeUpdate(ctx, req.(*DpaiHmsSizeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsSizeService_DpaiHmsSizeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsSizeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsSizeService/DpaiHmsSizeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsSizeServiceServer).DpaiHmsSizeDelete(ctx, req.(*DpaiHmsSizeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiHmsSizeService_ServiceDesc is the grpc.ServiceDesc for DpaiHmsSizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiHmsSizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiHmsSizeService",
	HandlerType: (*DpaiHmsSizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiHmsSizeCreate",
			Handler:    _DpaiHmsSizeService_DpaiHmsSizeCreate_Handler,
		},
		{
			MethodName: "DpaiHmsSizeList",
			Handler:    _DpaiHmsSizeService_DpaiHmsSizeList_Handler,
		},
		{
			MethodName: "DpaiHmsSizeGetById",
			Handler:    _DpaiHmsSizeService_DpaiHmsSizeGetById_Handler,
		},
		{
			MethodName: "DpaiHmsSizeGetByName",
			Handler:    _DpaiHmsSizeService_DpaiHmsSizeGetByName_Handler,
		},
		{
			MethodName: "DpaiHmsSizeUpdate",
			Handler:    _DpaiHmsSizeService_DpaiHmsSizeUpdate_Handler,
		},
		{
			MethodName: "DpaiHmsSizeDelete",
			Handler:    _DpaiHmsSizeService_DpaiHmsSizeDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_hms.proto",
}

// DpaiHmsVersionServiceClient is the client API for DpaiHmsVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiHmsVersionServiceClient interface {
	DpaiHmsVersionCreate(ctx context.Context, in *DpaiHmsVersionCreateRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error)
	DpaiHmsVersionList(ctx context.Context, in *DpaiHmsVersionListRequest, opts ...grpc.CallOption) (*DpaiHmsVersionListResponse, error)
	DpaiHmsVersionGetById(ctx context.Context, in *DpaiHmsVersionGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error)
	DpaiHmsVersionGetByName(ctx context.Context, in *DpaiHmsVersionGetByNameRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error)
	DpaiHmsVersionUpdate(ctx context.Context, in *DpaiHmsVersionUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error)
	DpaiHmsVersionDelete(ctx context.Context, in *DpaiHmsVersionDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsVersionDeleteResponse, error)
}

type dpaiHmsVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiHmsVersionServiceClient(cc grpc.ClientConnInterface) DpaiHmsVersionServiceClient {
	return &dpaiHmsVersionServiceClient{cc}
}

func (c *dpaiHmsVersionServiceClient) DpaiHmsVersionCreate(ctx context.Context, in *DpaiHmsVersionCreateRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error) {
	out := new(DpaiHmsVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsVersionService/DpaiHmsVersionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsVersionServiceClient) DpaiHmsVersionList(ctx context.Context, in *DpaiHmsVersionListRequest, opts ...grpc.CallOption) (*DpaiHmsVersionListResponse, error) {
	out := new(DpaiHmsVersionListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsVersionService/DpaiHmsVersionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsVersionServiceClient) DpaiHmsVersionGetById(ctx context.Context, in *DpaiHmsVersionGetByIdRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error) {
	out := new(DpaiHmsVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsVersionService/DpaiHmsVersionGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsVersionServiceClient) DpaiHmsVersionGetByName(ctx context.Context, in *DpaiHmsVersionGetByNameRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error) {
	out := new(DpaiHmsVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsVersionService/DpaiHmsVersionGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsVersionServiceClient) DpaiHmsVersionUpdate(ctx context.Context, in *DpaiHmsVersionUpdateRequest, opts ...grpc.CallOption) (*DpaiHmsVersion, error) {
	out := new(DpaiHmsVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsVersionService/DpaiHmsVersionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsVersionServiceClient) DpaiHmsVersionDelete(ctx context.Context, in *DpaiHmsVersionDeleteRequest, opts ...grpc.CallOption) (*DpaiHmsVersionDeleteResponse, error) {
	out := new(DpaiHmsVersionDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsVersionService/DpaiHmsVersionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiHmsVersionServiceServer is the server API for DpaiHmsVersionService service.
// All implementations must embed UnimplementedDpaiHmsVersionServiceServer
// for forward compatibility
type DpaiHmsVersionServiceServer interface {
	DpaiHmsVersionCreate(context.Context, *DpaiHmsVersionCreateRequest) (*DpaiHmsVersion, error)
	DpaiHmsVersionList(context.Context, *DpaiHmsVersionListRequest) (*DpaiHmsVersionListResponse, error)
	DpaiHmsVersionGetById(context.Context, *DpaiHmsVersionGetByIdRequest) (*DpaiHmsVersion, error)
	DpaiHmsVersionGetByName(context.Context, *DpaiHmsVersionGetByNameRequest) (*DpaiHmsVersion, error)
	DpaiHmsVersionUpdate(context.Context, *DpaiHmsVersionUpdateRequest) (*DpaiHmsVersion, error)
	DpaiHmsVersionDelete(context.Context, *DpaiHmsVersionDeleteRequest) (*DpaiHmsVersionDeleteResponse, error)
	mustEmbedUnimplementedDpaiHmsVersionServiceServer()
}

// UnimplementedDpaiHmsVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiHmsVersionServiceServer struct {
}

func (UnimplementedDpaiHmsVersionServiceServer) DpaiHmsVersionCreate(context.Context, *DpaiHmsVersionCreateRequest) (*DpaiHmsVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsVersionCreate not implemented")
}
func (UnimplementedDpaiHmsVersionServiceServer) DpaiHmsVersionList(context.Context, *DpaiHmsVersionListRequest) (*DpaiHmsVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsVersionList not implemented")
}
func (UnimplementedDpaiHmsVersionServiceServer) DpaiHmsVersionGetById(context.Context, *DpaiHmsVersionGetByIdRequest) (*DpaiHmsVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsVersionGetById not implemented")
}
func (UnimplementedDpaiHmsVersionServiceServer) DpaiHmsVersionGetByName(context.Context, *DpaiHmsVersionGetByNameRequest) (*DpaiHmsVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsVersionGetByName not implemented")
}
func (UnimplementedDpaiHmsVersionServiceServer) DpaiHmsVersionUpdate(context.Context, *DpaiHmsVersionUpdateRequest) (*DpaiHmsVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsVersionUpdate not implemented")
}
func (UnimplementedDpaiHmsVersionServiceServer) DpaiHmsVersionDelete(context.Context, *DpaiHmsVersionDeleteRequest) (*DpaiHmsVersionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsVersionDelete not implemented")
}
func (UnimplementedDpaiHmsVersionServiceServer) mustEmbedUnimplementedDpaiHmsVersionServiceServer() {}

// UnsafeDpaiHmsVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiHmsVersionServiceServer will
// result in compilation errors.
type UnsafeDpaiHmsVersionServiceServer interface {
	mustEmbedUnimplementedDpaiHmsVersionServiceServer()
}

func RegisterDpaiHmsVersionServiceServer(s grpc.ServiceRegistrar, srv DpaiHmsVersionServiceServer) {
	s.RegisterService(&DpaiHmsVersionService_ServiceDesc, srv)
}

func _DpaiHmsVersionService_DpaiHmsVersionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsVersionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsVersionService/DpaiHmsVersionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionCreate(ctx, req.(*DpaiHmsVersionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsVersionService_DpaiHmsVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsVersionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsVersionService/DpaiHmsVersionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionList(ctx, req.(*DpaiHmsVersionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsVersionService_DpaiHmsVersionGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsVersionGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsVersionService/DpaiHmsVersionGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionGetById(ctx, req.(*DpaiHmsVersionGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsVersionService_DpaiHmsVersionGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsVersionGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsVersionService/DpaiHmsVersionGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionGetByName(ctx, req.(*DpaiHmsVersionGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsVersionService_DpaiHmsVersionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsVersionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsVersionService/DpaiHmsVersionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionUpdate(ctx, req.(*DpaiHmsVersionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsVersionService_DpaiHmsVersionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsVersionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsVersionService/DpaiHmsVersionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsVersionServiceServer).DpaiHmsVersionDelete(ctx, req.(*DpaiHmsVersionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiHmsVersionService_ServiceDesc is the grpc.ServiceDesc for DpaiHmsVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiHmsVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiHmsVersionService",
	HandlerType: (*DpaiHmsVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiHmsVersionCreate",
			Handler:    _DpaiHmsVersionService_DpaiHmsVersionCreate_Handler,
		},
		{
			MethodName: "DpaiHmsVersionList",
			Handler:    _DpaiHmsVersionService_DpaiHmsVersionList_Handler,
		},
		{
			MethodName: "DpaiHmsVersionGetById",
			Handler:    _DpaiHmsVersionService_DpaiHmsVersionGetById_Handler,
		},
		{
			MethodName: "DpaiHmsVersionGetByName",
			Handler:    _DpaiHmsVersionService_DpaiHmsVersionGetByName_Handler,
		},
		{
			MethodName: "DpaiHmsVersionUpdate",
			Handler:    _DpaiHmsVersionService_DpaiHmsVersionUpdate_Handler,
		},
		{
			MethodName: "DpaiHmsVersionDelete",
			Handler:    _DpaiHmsVersionService_DpaiHmsVersionDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_hms.proto",
}

// DpaiHmsServiceClient is the client API for DpaiHmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiHmsServiceClient interface {
	DpaiHmsCreate(ctx context.Context, in *DpaiHmsCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	DpaiHmsList(ctx context.Context, in *DpaiHmsListRequest, opts ...grpc.CallOption) (*DpaiHmsListResponse, error)
	DpaiHmsGetById(ctx context.Context, in *DpaiHmsGetByIdRequest, opts ...grpc.CallOption) (*DpaiHms, error)
	DpaiHmsGetByName(ctx context.Context, in *DpaiHmsGetByNameRequest, opts ...grpc.CallOption) (*DpaiHms, error)
	DpaiHmsUpdate(ctx context.Context, in *DpaiHmsUpdateRequest, opts ...grpc.CallOption) (*DpaiHms, error)
	DpaiHmsDelete(ctx context.Context, in *DpaiHmsDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// Additional actions
	DpaiHmsListUpgrade(ctx context.Context, in *DpaiHmsListUpgradeRequest, opts ...grpc.CallOption) (*DpaiHmsVersionListResponse, error)
	DpaiHmsUpgrade(ctx context.Context, in *DpaiHmsUpgradeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	DpaiHmsRestart(ctx context.Context, in *DpaiHmsRestartRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	DpaiHmsResize(ctx context.Context, in *DpaiHmsResizeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
}

type dpaiHmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiHmsServiceClient(cc grpc.ClientConnInterface) DpaiHmsServiceClient {
	return &dpaiHmsServiceClient{cc}
}

func (c *dpaiHmsServiceClient) DpaiHmsCreate(ctx context.Context, in *DpaiHmsCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsList(ctx context.Context, in *DpaiHmsListRequest, opts ...grpc.CallOption) (*DpaiHmsListResponse, error) {
	out := new(DpaiHmsListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsGetById(ctx context.Context, in *DpaiHmsGetByIdRequest, opts ...grpc.CallOption) (*DpaiHms, error) {
	out := new(DpaiHms)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsGetByName(ctx context.Context, in *DpaiHmsGetByNameRequest, opts ...grpc.CallOption) (*DpaiHms, error) {
	out := new(DpaiHms)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsUpdate(ctx context.Context, in *DpaiHmsUpdateRequest, opts ...grpc.CallOption) (*DpaiHms, error) {
	out := new(DpaiHms)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsDelete(ctx context.Context, in *DpaiHmsDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsListUpgrade(ctx context.Context, in *DpaiHmsListUpgradeRequest, opts ...grpc.CallOption) (*DpaiHmsVersionListResponse, error) {
	out := new(DpaiHmsVersionListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsListUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsUpgrade(ctx context.Context, in *DpaiHmsUpgradeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsRestart(ctx context.Context, in *DpaiHmsRestartRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiHmsServiceClient) DpaiHmsResize(ctx context.Context, in *DpaiHmsResizeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiHmsService/DpaiHmsResize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiHmsServiceServer is the server API for DpaiHmsService service.
// All implementations must embed UnimplementedDpaiHmsServiceServer
// for forward compatibility
type DpaiHmsServiceServer interface {
	DpaiHmsCreate(context.Context, *DpaiHmsCreateRequest) (*DpaiDeploymentResponse, error)
	DpaiHmsList(context.Context, *DpaiHmsListRequest) (*DpaiHmsListResponse, error)
	DpaiHmsGetById(context.Context, *DpaiHmsGetByIdRequest) (*DpaiHms, error)
	DpaiHmsGetByName(context.Context, *DpaiHmsGetByNameRequest) (*DpaiHms, error)
	DpaiHmsUpdate(context.Context, *DpaiHmsUpdateRequest) (*DpaiHms, error)
	DpaiHmsDelete(context.Context, *DpaiHmsDeleteRequest) (*DpaiDeploymentResponse, error)
	// Additional actions
	DpaiHmsListUpgrade(context.Context, *DpaiHmsListUpgradeRequest) (*DpaiHmsVersionListResponse, error)
	DpaiHmsUpgrade(context.Context, *DpaiHmsUpgradeRequest) (*DpaiDeploymentResponse, error)
	DpaiHmsRestart(context.Context, *DpaiHmsRestartRequest) (*DpaiDeploymentResponse, error)
	DpaiHmsResize(context.Context, *DpaiHmsResizeRequest) (*DpaiDeploymentResponse, error)
	mustEmbedUnimplementedDpaiHmsServiceServer()
}

// UnimplementedDpaiHmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiHmsServiceServer struct {
}

func (UnimplementedDpaiHmsServiceServer) DpaiHmsCreate(context.Context, *DpaiHmsCreateRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsCreate not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsList(context.Context, *DpaiHmsListRequest) (*DpaiHmsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsList not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsGetById(context.Context, *DpaiHmsGetByIdRequest) (*DpaiHms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsGetById not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsGetByName(context.Context, *DpaiHmsGetByNameRequest) (*DpaiHms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsGetByName not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsUpdate(context.Context, *DpaiHmsUpdateRequest) (*DpaiHms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsUpdate not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsDelete(context.Context, *DpaiHmsDeleteRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsDelete not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsListUpgrade(context.Context, *DpaiHmsListUpgradeRequest) (*DpaiHmsVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsListUpgrade not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsUpgrade(context.Context, *DpaiHmsUpgradeRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsUpgrade not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsRestart(context.Context, *DpaiHmsRestartRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsRestart not implemented")
}
func (UnimplementedDpaiHmsServiceServer) DpaiHmsResize(context.Context, *DpaiHmsResizeRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiHmsResize not implemented")
}
func (UnimplementedDpaiHmsServiceServer) mustEmbedUnimplementedDpaiHmsServiceServer() {}

// UnsafeDpaiHmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiHmsServiceServer will
// result in compilation errors.
type UnsafeDpaiHmsServiceServer interface {
	mustEmbedUnimplementedDpaiHmsServiceServer()
}

func RegisterDpaiHmsServiceServer(s grpc.ServiceRegistrar, srv DpaiHmsServiceServer) {
	s.RegisterService(&DpaiHmsService_ServiceDesc, srv)
}

func _DpaiHmsService_DpaiHmsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsCreate(ctx, req.(*DpaiHmsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsList(ctx, req.(*DpaiHmsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsGetById(ctx, req.(*DpaiHmsGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsGetByName(ctx, req.(*DpaiHmsGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsUpdate(ctx, req.(*DpaiHmsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsDelete(ctx, req.(*DpaiHmsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsListUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsListUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsListUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsListUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsListUpgrade(ctx, req.(*DpaiHmsListUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsUpgrade(ctx, req.(*DpaiHmsUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsRestart(ctx, req.(*DpaiHmsRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiHmsService_DpaiHmsResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiHmsResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiHmsServiceServer).DpaiHmsResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiHmsService/DpaiHmsResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiHmsServiceServer).DpaiHmsResize(ctx, req.(*DpaiHmsResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiHmsService_ServiceDesc is the grpc.ServiceDesc for DpaiHmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiHmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiHmsService",
	HandlerType: (*DpaiHmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiHmsCreate",
			Handler:    _DpaiHmsService_DpaiHmsCreate_Handler,
		},
		{
			MethodName: "DpaiHmsList",
			Handler:    _DpaiHmsService_DpaiHmsList_Handler,
		},
		{
			MethodName: "DpaiHmsGetById",
			Handler:    _DpaiHmsService_DpaiHmsGetById_Handler,
		},
		{
			MethodName: "DpaiHmsGetByName",
			Handler:    _DpaiHmsService_DpaiHmsGetByName_Handler,
		},
		{
			MethodName: "DpaiHmsUpdate",
			Handler:    _DpaiHmsService_DpaiHmsUpdate_Handler,
		},
		{
			MethodName: "DpaiHmsDelete",
			Handler:    _DpaiHmsService_DpaiHmsDelete_Handler,
		},
		{
			MethodName: "DpaiHmsListUpgrade",
			Handler:    _DpaiHmsService_DpaiHmsListUpgrade_Handler,
		},
		{
			MethodName: "DpaiHmsUpgrade",
			Handler:    _DpaiHmsService_DpaiHmsUpgrade_Handler,
		},
		{
			MethodName: "DpaiHmsRestart",
			Handler:    _DpaiHmsService_DpaiHmsRestart_Handler,
		},
		{
			MethodName: "DpaiHmsResize",
			Handler:    _DpaiHmsService_DpaiHmsResize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_hms.proto",
}
