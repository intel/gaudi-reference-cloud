// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dpai_postgres.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DpaiPostgresSizeServiceClient is the client API for DpaiPostgresSizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiPostgresSizeServiceClient interface {
	DpaiPostgresSizeCreate(ctx context.Context, in *DpaiPostgresSizeCreateRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error)
	// List all the DPAI Postgres Sizes
	DpaiPostgresSizeList(ctx context.Context, in *DpaiPostgresSizeListRequest, opts ...grpc.CallOption) (*DpaiPostgresSizeListResponse, error)
	// Get the DPAI Postgres Size by ID
	DpaiPostgresSizeGetById(ctx context.Context, in *DpaiPostgresSizeGetByIdRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error)
	// Get the DPAI Postgres Size by name
	DpaiPostgresSizeGetByName(ctx context.Context, in *DpaiPostgresSizeGetByNameRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error)
	DpaiPostgresSizeUpdate(ctx context.Context, in *DpaiPostgresSizeUpdateRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error)
	DpaiPostgresSizeDelete(ctx context.Context, in *DpaiPostgresSizeDeleteRequest, opts ...grpc.CallOption) (*DpaiPostgresSizeDeleteResponse, error)
}

type dpaiPostgresSizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiPostgresSizeServiceClient(cc grpc.ClientConnInterface) DpaiPostgresSizeServiceClient {
	return &dpaiPostgresSizeServiceClient{cc}
}

func (c *dpaiPostgresSizeServiceClient) DpaiPostgresSizeCreate(ctx context.Context, in *DpaiPostgresSizeCreateRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error) {
	out := new(DpaiPostgresSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresSizeService/DpaiPostgresSizeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresSizeServiceClient) DpaiPostgresSizeList(ctx context.Context, in *DpaiPostgresSizeListRequest, opts ...grpc.CallOption) (*DpaiPostgresSizeListResponse, error) {
	out := new(DpaiPostgresSizeListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresSizeService/DpaiPostgresSizeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresSizeServiceClient) DpaiPostgresSizeGetById(ctx context.Context, in *DpaiPostgresSizeGetByIdRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error) {
	out := new(DpaiPostgresSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresSizeService/DpaiPostgresSizeGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresSizeServiceClient) DpaiPostgresSizeGetByName(ctx context.Context, in *DpaiPostgresSizeGetByNameRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error) {
	out := new(DpaiPostgresSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresSizeService/DpaiPostgresSizeGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresSizeServiceClient) DpaiPostgresSizeUpdate(ctx context.Context, in *DpaiPostgresSizeUpdateRequest, opts ...grpc.CallOption) (*DpaiPostgresSize, error) {
	out := new(DpaiPostgresSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresSizeService/DpaiPostgresSizeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresSizeServiceClient) DpaiPostgresSizeDelete(ctx context.Context, in *DpaiPostgresSizeDeleteRequest, opts ...grpc.CallOption) (*DpaiPostgresSizeDeleteResponse, error) {
	out := new(DpaiPostgresSizeDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresSizeService/DpaiPostgresSizeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiPostgresSizeServiceServer is the server API for DpaiPostgresSizeService service.
// All implementations must embed UnimplementedDpaiPostgresSizeServiceServer
// for forward compatibility
type DpaiPostgresSizeServiceServer interface {
	DpaiPostgresSizeCreate(context.Context, *DpaiPostgresSizeCreateRequest) (*DpaiPostgresSize, error)
	// List all the DPAI Postgres Sizes
	DpaiPostgresSizeList(context.Context, *DpaiPostgresSizeListRequest) (*DpaiPostgresSizeListResponse, error)
	// Get the DPAI Postgres Size by ID
	DpaiPostgresSizeGetById(context.Context, *DpaiPostgresSizeGetByIdRequest) (*DpaiPostgresSize, error)
	// Get the DPAI Postgres Size by name
	DpaiPostgresSizeGetByName(context.Context, *DpaiPostgresSizeGetByNameRequest) (*DpaiPostgresSize, error)
	DpaiPostgresSizeUpdate(context.Context, *DpaiPostgresSizeUpdateRequest) (*DpaiPostgresSize, error)
	DpaiPostgresSizeDelete(context.Context, *DpaiPostgresSizeDeleteRequest) (*DpaiPostgresSizeDeleteResponse, error)
	mustEmbedUnimplementedDpaiPostgresSizeServiceServer()
}

// UnimplementedDpaiPostgresSizeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiPostgresSizeServiceServer struct {
}

func (UnimplementedDpaiPostgresSizeServiceServer) DpaiPostgresSizeCreate(context.Context, *DpaiPostgresSizeCreateRequest) (*DpaiPostgresSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresSizeCreate not implemented")
}
func (UnimplementedDpaiPostgresSizeServiceServer) DpaiPostgresSizeList(context.Context, *DpaiPostgresSizeListRequest) (*DpaiPostgresSizeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresSizeList not implemented")
}
func (UnimplementedDpaiPostgresSizeServiceServer) DpaiPostgresSizeGetById(context.Context, *DpaiPostgresSizeGetByIdRequest) (*DpaiPostgresSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresSizeGetById not implemented")
}
func (UnimplementedDpaiPostgresSizeServiceServer) DpaiPostgresSizeGetByName(context.Context, *DpaiPostgresSizeGetByNameRequest) (*DpaiPostgresSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresSizeGetByName not implemented")
}
func (UnimplementedDpaiPostgresSizeServiceServer) DpaiPostgresSizeUpdate(context.Context, *DpaiPostgresSizeUpdateRequest) (*DpaiPostgresSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresSizeUpdate not implemented")
}
func (UnimplementedDpaiPostgresSizeServiceServer) DpaiPostgresSizeDelete(context.Context, *DpaiPostgresSizeDeleteRequest) (*DpaiPostgresSizeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresSizeDelete not implemented")
}
func (UnimplementedDpaiPostgresSizeServiceServer) mustEmbedUnimplementedDpaiPostgresSizeServiceServer() {
}

// UnsafeDpaiPostgresSizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiPostgresSizeServiceServer will
// result in compilation errors.
type UnsafeDpaiPostgresSizeServiceServer interface {
	mustEmbedUnimplementedDpaiPostgresSizeServiceServer()
}

func RegisterDpaiPostgresSizeServiceServer(s grpc.ServiceRegistrar, srv DpaiPostgresSizeServiceServer) {
	s.RegisterService(&DpaiPostgresSizeService_ServiceDesc, srv)
}

func _DpaiPostgresSizeService_DpaiPostgresSizeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresSizeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresSizeService/DpaiPostgresSizeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeCreate(ctx, req.(*DpaiPostgresSizeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresSizeService_DpaiPostgresSizeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresSizeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresSizeService/DpaiPostgresSizeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeList(ctx, req.(*DpaiPostgresSizeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresSizeService_DpaiPostgresSizeGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresSizeGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresSizeService/DpaiPostgresSizeGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeGetById(ctx, req.(*DpaiPostgresSizeGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresSizeService_DpaiPostgresSizeGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresSizeGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresSizeService/DpaiPostgresSizeGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeGetByName(ctx, req.(*DpaiPostgresSizeGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresSizeService_DpaiPostgresSizeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresSizeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresSizeService/DpaiPostgresSizeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeUpdate(ctx, req.(*DpaiPostgresSizeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresSizeService_DpaiPostgresSizeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresSizeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresSizeService/DpaiPostgresSizeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresSizeServiceServer).DpaiPostgresSizeDelete(ctx, req.(*DpaiPostgresSizeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiPostgresSizeService_ServiceDesc is the grpc.ServiceDesc for DpaiPostgresSizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiPostgresSizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiPostgresSizeService",
	HandlerType: (*DpaiPostgresSizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiPostgresSizeCreate",
			Handler:    _DpaiPostgresSizeService_DpaiPostgresSizeCreate_Handler,
		},
		{
			MethodName: "DpaiPostgresSizeList",
			Handler:    _DpaiPostgresSizeService_DpaiPostgresSizeList_Handler,
		},
		{
			MethodName: "DpaiPostgresSizeGetById",
			Handler:    _DpaiPostgresSizeService_DpaiPostgresSizeGetById_Handler,
		},
		{
			MethodName: "DpaiPostgresSizeGetByName",
			Handler:    _DpaiPostgresSizeService_DpaiPostgresSizeGetByName_Handler,
		},
		{
			MethodName: "DpaiPostgresSizeUpdate",
			Handler:    _DpaiPostgresSizeService_DpaiPostgresSizeUpdate_Handler,
		},
		{
			MethodName: "DpaiPostgresSizeDelete",
			Handler:    _DpaiPostgresSizeService_DpaiPostgresSizeDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_postgres.proto",
}

// DpaiPostgresVersionServiceClient is the client API for DpaiPostgresVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiPostgresVersionServiceClient interface {
	DpaiPostgresVersionCreate(ctx context.Context, in *DpaiPostgresVersionCreateRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error)
	// list all the DPAI Postgres Versions
	DpaiPostgresVersionList(ctx context.Context, in *DpaiPostgresVersionListRequest, opts ...grpc.CallOption) (*DpaiPostgresVersionListResponse, error)
	// Get the DPAI Postgres Version by ID
	DpaiPostgresVersionGetById(ctx context.Context, in *DpaiPostgresVersionGetByIdRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error)
	// Get a DPAI Postgres Version by Name
	DpaiPostgresVersionGetByName(ctx context.Context, in *DpaiPostgresVersionGetByNameRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error)
	DpaiPostgresVersionUpdate(ctx context.Context, in *DpaiPostgresVersionUpdateRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error)
	DpaiPostgresVersionDelete(ctx context.Context, in *DpaiPostgresVersionDeleteRequest, opts ...grpc.CallOption) (*DpaiPostgresVersionDeleteResponse, error)
}

type dpaiPostgresVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiPostgresVersionServiceClient(cc grpc.ClientConnInterface) DpaiPostgresVersionServiceClient {
	return &dpaiPostgresVersionServiceClient{cc}
}

func (c *dpaiPostgresVersionServiceClient) DpaiPostgresVersionCreate(ctx context.Context, in *DpaiPostgresVersionCreateRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error) {
	out := new(DpaiPostgresVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresVersionService/DpaiPostgresVersionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresVersionServiceClient) DpaiPostgresVersionList(ctx context.Context, in *DpaiPostgresVersionListRequest, opts ...grpc.CallOption) (*DpaiPostgresVersionListResponse, error) {
	out := new(DpaiPostgresVersionListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresVersionService/DpaiPostgresVersionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresVersionServiceClient) DpaiPostgresVersionGetById(ctx context.Context, in *DpaiPostgresVersionGetByIdRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error) {
	out := new(DpaiPostgresVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresVersionService/DpaiPostgresVersionGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresVersionServiceClient) DpaiPostgresVersionGetByName(ctx context.Context, in *DpaiPostgresVersionGetByNameRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error) {
	out := new(DpaiPostgresVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresVersionService/DpaiPostgresVersionGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresVersionServiceClient) DpaiPostgresVersionUpdate(ctx context.Context, in *DpaiPostgresVersionUpdateRequest, opts ...grpc.CallOption) (*DpaiPostgresVersion, error) {
	out := new(DpaiPostgresVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresVersionService/DpaiPostgresVersionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresVersionServiceClient) DpaiPostgresVersionDelete(ctx context.Context, in *DpaiPostgresVersionDeleteRequest, opts ...grpc.CallOption) (*DpaiPostgresVersionDeleteResponse, error) {
	out := new(DpaiPostgresVersionDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresVersionService/DpaiPostgresVersionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiPostgresVersionServiceServer is the server API for DpaiPostgresVersionService service.
// All implementations must embed UnimplementedDpaiPostgresVersionServiceServer
// for forward compatibility
type DpaiPostgresVersionServiceServer interface {
	DpaiPostgresVersionCreate(context.Context, *DpaiPostgresVersionCreateRequest) (*DpaiPostgresVersion, error)
	// list all the DPAI Postgres Versions
	DpaiPostgresVersionList(context.Context, *DpaiPostgresVersionListRequest) (*DpaiPostgresVersionListResponse, error)
	// Get the DPAI Postgres Version by ID
	DpaiPostgresVersionGetById(context.Context, *DpaiPostgresVersionGetByIdRequest) (*DpaiPostgresVersion, error)
	// Get a DPAI Postgres Version by Name
	DpaiPostgresVersionGetByName(context.Context, *DpaiPostgresVersionGetByNameRequest) (*DpaiPostgresVersion, error)
	DpaiPostgresVersionUpdate(context.Context, *DpaiPostgresVersionUpdateRequest) (*DpaiPostgresVersion, error)
	DpaiPostgresVersionDelete(context.Context, *DpaiPostgresVersionDeleteRequest) (*DpaiPostgresVersionDeleteResponse, error)
	mustEmbedUnimplementedDpaiPostgresVersionServiceServer()
}

// UnimplementedDpaiPostgresVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiPostgresVersionServiceServer struct {
}

func (UnimplementedDpaiPostgresVersionServiceServer) DpaiPostgresVersionCreate(context.Context, *DpaiPostgresVersionCreateRequest) (*DpaiPostgresVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresVersionCreate not implemented")
}
func (UnimplementedDpaiPostgresVersionServiceServer) DpaiPostgresVersionList(context.Context, *DpaiPostgresVersionListRequest) (*DpaiPostgresVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresVersionList not implemented")
}
func (UnimplementedDpaiPostgresVersionServiceServer) DpaiPostgresVersionGetById(context.Context, *DpaiPostgresVersionGetByIdRequest) (*DpaiPostgresVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresVersionGetById not implemented")
}
func (UnimplementedDpaiPostgresVersionServiceServer) DpaiPostgresVersionGetByName(context.Context, *DpaiPostgresVersionGetByNameRequest) (*DpaiPostgresVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresVersionGetByName not implemented")
}
func (UnimplementedDpaiPostgresVersionServiceServer) DpaiPostgresVersionUpdate(context.Context, *DpaiPostgresVersionUpdateRequest) (*DpaiPostgresVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresVersionUpdate not implemented")
}
func (UnimplementedDpaiPostgresVersionServiceServer) DpaiPostgresVersionDelete(context.Context, *DpaiPostgresVersionDeleteRequest) (*DpaiPostgresVersionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresVersionDelete not implemented")
}
func (UnimplementedDpaiPostgresVersionServiceServer) mustEmbedUnimplementedDpaiPostgresVersionServiceServer() {
}

// UnsafeDpaiPostgresVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiPostgresVersionServiceServer will
// result in compilation errors.
type UnsafeDpaiPostgresVersionServiceServer interface {
	mustEmbedUnimplementedDpaiPostgresVersionServiceServer()
}

func RegisterDpaiPostgresVersionServiceServer(s grpc.ServiceRegistrar, srv DpaiPostgresVersionServiceServer) {
	s.RegisterService(&DpaiPostgresVersionService_ServiceDesc, srv)
}

func _DpaiPostgresVersionService_DpaiPostgresVersionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresVersionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresVersionService/DpaiPostgresVersionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionCreate(ctx, req.(*DpaiPostgresVersionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresVersionService_DpaiPostgresVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresVersionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresVersionService/DpaiPostgresVersionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionList(ctx, req.(*DpaiPostgresVersionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresVersionService_DpaiPostgresVersionGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresVersionGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresVersionService/DpaiPostgresVersionGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionGetById(ctx, req.(*DpaiPostgresVersionGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresVersionService_DpaiPostgresVersionGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresVersionGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresVersionService/DpaiPostgresVersionGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionGetByName(ctx, req.(*DpaiPostgresVersionGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresVersionService_DpaiPostgresVersionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresVersionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresVersionService/DpaiPostgresVersionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionUpdate(ctx, req.(*DpaiPostgresVersionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresVersionService_DpaiPostgresVersionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresVersionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresVersionService/DpaiPostgresVersionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresVersionServiceServer).DpaiPostgresVersionDelete(ctx, req.(*DpaiPostgresVersionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiPostgresVersionService_ServiceDesc is the grpc.ServiceDesc for DpaiPostgresVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiPostgresVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiPostgresVersionService",
	HandlerType: (*DpaiPostgresVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiPostgresVersionCreate",
			Handler:    _DpaiPostgresVersionService_DpaiPostgresVersionCreate_Handler,
		},
		{
			MethodName: "DpaiPostgresVersionList",
			Handler:    _DpaiPostgresVersionService_DpaiPostgresVersionList_Handler,
		},
		{
			MethodName: "DpaiPostgresVersionGetById",
			Handler:    _DpaiPostgresVersionService_DpaiPostgresVersionGetById_Handler,
		},
		{
			MethodName: "DpaiPostgresVersionGetByName",
			Handler:    _DpaiPostgresVersionService_DpaiPostgresVersionGetByName_Handler,
		},
		{
			MethodName: "DpaiPostgresVersionUpdate",
			Handler:    _DpaiPostgresVersionService_DpaiPostgresVersionUpdate_Handler,
		},
		{
			MethodName: "DpaiPostgresVersionDelete",
			Handler:    _DpaiPostgresVersionService_DpaiPostgresVersionDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_postgres.proto",
}

// DpaiPostgresServiceClient is the client API for DpaiPostgresService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiPostgresServiceClient interface {
	// Create a new DPAI Postgres Database.
	DpaiPostgresCreate(ctx context.Context, in *DpaiPostgresCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// List the DPAI Postgres Databases in the given workspace.
	DpaiPostgresList(ctx context.Context, in *DpaiPostgresListRequest, opts ...grpc.CallOption) (*DpaiPostgresListResponse, error)
	// Get the DPAI Postgres Database by its ID.
	DpaiPostgresGetById(ctx context.Context, in *DpaiPostgresGetByIdRequest, opts ...grpc.CallOption) (*DpaiPostgres, error)
	// Get the DPAI Postgres Database by its name.
	DpaiPostgresGetByName(ctx context.Context, in *DpaiPostgresGetByNameRequest, opts ...grpc.CallOption) (*DpaiPostgres, error)
	// Update the DPAI Postgres Database metadata information.
	DpaiPostgresUpdate(ctx context.Context, in *DpaiPostgresUpdateRequest, opts ...grpc.CallOption) (*DpaiPostgres, error)
	// Delete the DPAI Postgres Database.
	DpaiPostgresDelete(ctx context.Context, in *DpaiPostgresDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// List all the possible upgradable versions for the given DPAI Postgres Database.
	DpaiPostgresListUpgrade(ctx context.Context, in *DpaiPostgresListUpgradeRequest, opts ...grpc.CallOption) (*DpaiPostgresVersionListResponse, error)
	// Upgrade the DPAI Postgres Database.
	DpaiPostgresUpgrade(ctx context.Context, in *DpaiPostgresUpgradeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// Restart the DPAI Postgres Database.
	DpaiPostgresRestart(ctx context.Context, in *DpaiPostgresRestartRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// Resize the DPAI Postgres Database.
	DpaiPostgresResize(ctx context.Context, in *DpaiPostgresResizeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
}

type dpaiPostgresServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiPostgresServiceClient(cc grpc.ClientConnInterface) DpaiPostgresServiceClient {
	return &dpaiPostgresServiceClient{cc}
}

func (c *dpaiPostgresServiceClient) DpaiPostgresCreate(ctx context.Context, in *DpaiPostgresCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresList(ctx context.Context, in *DpaiPostgresListRequest, opts ...grpc.CallOption) (*DpaiPostgresListResponse, error) {
	out := new(DpaiPostgresListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresGetById(ctx context.Context, in *DpaiPostgresGetByIdRequest, opts ...grpc.CallOption) (*DpaiPostgres, error) {
	out := new(DpaiPostgres)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresGetByName(ctx context.Context, in *DpaiPostgresGetByNameRequest, opts ...grpc.CallOption) (*DpaiPostgres, error) {
	out := new(DpaiPostgres)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresUpdate(ctx context.Context, in *DpaiPostgresUpdateRequest, opts ...grpc.CallOption) (*DpaiPostgres, error) {
	out := new(DpaiPostgres)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresDelete(ctx context.Context, in *DpaiPostgresDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresListUpgrade(ctx context.Context, in *DpaiPostgresListUpgradeRequest, opts ...grpc.CallOption) (*DpaiPostgresVersionListResponse, error) {
	out := new(DpaiPostgresVersionListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresListUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresUpgrade(ctx context.Context, in *DpaiPostgresUpgradeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresRestart(ctx context.Context, in *DpaiPostgresRestartRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiPostgresServiceClient) DpaiPostgresResize(ctx context.Context, in *DpaiPostgresResizeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiPostgresService/DpaiPostgresResize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiPostgresServiceServer is the server API for DpaiPostgresService service.
// All implementations must embed UnimplementedDpaiPostgresServiceServer
// for forward compatibility
type DpaiPostgresServiceServer interface {
	// Create a new DPAI Postgres Database.
	DpaiPostgresCreate(context.Context, *DpaiPostgresCreateRequest) (*DpaiDeploymentResponse, error)
	// List the DPAI Postgres Databases in the given workspace.
	DpaiPostgresList(context.Context, *DpaiPostgresListRequest) (*DpaiPostgresListResponse, error)
	// Get the DPAI Postgres Database by its ID.
	DpaiPostgresGetById(context.Context, *DpaiPostgresGetByIdRequest) (*DpaiPostgres, error)
	// Get the DPAI Postgres Database by its name.
	DpaiPostgresGetByName(context.Context, *DpaiPostgresGetByNameRequest) (*DpaiPostgres, error)
	// Update the DPAI Postgres Database metadata information.
	DpaiPostgresUpdate(context.Context, *DpaiPostgresUpdateRequest) (*DpaiPostgres, error)
	// Delete the DPAI Postgres Database.
	DpaiPostgresDelete(context.Context, *DpaiPostgresDeleteRequest) (*DpaiDeploymentResponse, error)
	// List all the possible upgradable versions for the given DPAI Postgres Database.
	DpaiPostgresListUpgrade(context.Context, *DpaiPostgresListUpgradeRequest) (*DpaiPostgresVersionListResponse, error)
	// Upgrade the DPAI Postgres Database.
	DpaiPostgresUpgrade(context.Context, *DpaiPostgresUpgradeRequest) (*DpaiDeploymentResponse, error)
	// Restart the DPAI Postgres Database.
	DpaiPostgresRestart(context.Context, *DpaiPostgresRestartRequest) (*DpaiDeploymentResponse, error)
	// Resize the DPAI Postgres Database.
	DpaiPostgresResize(context.Context, *DpaiPostgresResizeRequest) (*DpaiDeploymentResponse, error)
	mustEmbedUnimplementedDpaiPostgresServiceServer()
}

// UnimplementedDpaiPostgresServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiPostgresServiceServer struct {
}

func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresCreate(context.Context, *DpaiPostgresCreateRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresCreate not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresList(context.Context, *DpaiPostgresListRequest) (*DpaiPostgresListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresList not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresGetById(context.Context, *DpaiPostgresGetByIdRequest) (*DpaiPostgres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresGetById not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresGetByName(context.Context, *DpaiPostgresGetByNameRequest) (*DpaiPostgres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresGetByName not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresUpdate(context.Context, *DpaiPostgresUpdateRequest) (*DpaiPostgres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresUpdate not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresDelete(context.Context, *DpaiPostgresDeleteRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresDelete not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresListUpgrade(context.Context, *DpaiPostgresListUpgradeRequest) (*DpaiPostgresVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresListUpgrade not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresUpgrade(context.Context, *DpaiPostgresUpgradeRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresUpgrade not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresRestart(context.Context, *DpaiPostgresRestartRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresRestart not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) DpaiPostgresResize(context.Context, *DpaiPostgresResizeRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiPostgresResize not implemented")
}
func (UnimplementedDpaiPostgresServiceServer) mustEmbedUnimplementedDpaiPostgresServiceServer() {}

// UnsafeDpaiPostgresServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiPostgresServiceServer will
// result in compilation errors.
type UnsafeDpaiPostgresServiceServer interface {
	mustEmbedUnimplementedDpaiPostgresServiceServer()
}

func RegisterDpaiPostgresServiceServer(s grpc.ServiceRegistrar, srv DpaiPostgresServiceServer) {
	s.RegisterService(&DpaiPostgresService_ServiceDesc, srv)
}

func _DpaiPostgresService_DpaiPostgresCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresCreate(ctx, req.(*DpaiPostgresCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresList(ctx, req.(*DpaiPostgresListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresGetById(ctx, req.(*DpaiPostgresGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresGetByName(ctx, req.(*DpaiPostgresGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresUpdate(ctx, req.(*DpaiPostgresUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresDelete(ctx, req.(*DpaiPostgresDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresListUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresListUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresListUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresListUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresListUpgrade(ctx, req.(*DpaiPostgresListUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresUpgrade(ctx, req.(*DpaiPostgresUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresRestart(ctx, req.(*DpaiPostgresRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiPostgresService_DpaiPostgresResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiPostgresResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiPostgresService/DpaiPostgresResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiPostgresServiceServer).DpaiPostgresResize(ctx, req.(*DpaiPostgresResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiPostgresService_ServiceDesc is the grpc.ServiceDesc for DpaiPostgresService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiPostgresService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiPostgresService",
	HandlerType: (*DpaiPostgresServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiPostgresCreate",
			Handler:    _DpaiPostgresService_DpaiPostgresCreate_Handler,
		},
		{
			MethodName: "DpaiPostgresList",
			Handler:    _DpaiPostgresService_DpaiPostgresList_Handler,
		},
		{
			MethodName: "DpaiPostgresGetById",
			Handler:    _DpaiPostgresService_DpaiPostgresGetById_Handler,
		},
		{
			MethodName: "DpaiPostgresGetByName",
			Handler:    _DpaiPostgresService_DpaiPostgresGetByName_Handler,
		},
		{
			MethodName: "DpaiPostgresUpdate",
			Handler:    _DpaiPostgresService_DpaiPostgresUpdate_Handler,
		},
		{
			MethodName: "DpaiPostgresDelete",
			Handler:    _DpaiPostgresService_DpaiPostgresDelete_Handler,
		},
		{
			MethodName: "DpaiPostgresListUpgrade",
			Handler:    _DpaiPostgresService_DpaiPostgresListUpgrade_Handler,
		},
		{
			MethodName: "DpaiPostgresUpgrade",
			Handler:    _DpaiPostgresService_DpaiPostgresUpgrade_Handler,
		},
		{
			MethodName: "DpaiPostgresRestart",
			Handler:    _DpaiPostgresService_DpaiPostgresRestart_Handler,
		},
		{
			MethodName: "DpaiPostgresResize",
			Handler:    _DpaiPostgresService_DpaiPostgresResize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_postgres.proto",
}
