// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: user-credentials.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCredentialsServiceClient is the client API for UserCredentialsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCredentialsServiceClient interface {
	GetUserCredentials(ctx context.Context, in *GetUserCredentialRequest, opts ...grpc.CallOption) (*GetUserCredentialResponse, error)
	CreateUserCredentials(ctx context.Context, in *CreateUserCredentialsRequest, opts ...grpc.CallOption) (*ClientCredentials, error)
	RemoveUserCredentials(ctx context.Context, in *DeleteUserCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RevokeUserCredentials(ctx context.Context, in *RevokeUserCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveMemberUserCredentials(ctx context.Context, in *RemoveMemberUserCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userCredentialsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCredentialsServiceClient(cc grpc.ClientConnInterface) UserCredentialsServiceClient {
	return &userCredentialsServiceClient{cc}
}

func (c *userCredentialsServiceClient) GetUserCredentials(ctx context.Context, in *GetUserCredentialRequest, opts ...grpc.CallOption) (*GetUserCredentialResponse, error) {
	out := new(GetUserCredentialResponse)
	err := c.cc.Invoke(ctx, "/proto.UserCredentialsService/GetUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialsServiceClient) CreateUserCredentials(ctx context.Context, in *CreateUserCredentialsRequest, opts ...grpc.CallOption) (*ClientCredentials, error) {
	out := new(ClientCredentials)
	err := c.cc.Invoke(ctx, "/proto.UserCredentialsService/CreateUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialsServiceClient) RemoveUserCredentials(ctx context.Context, in *DeleteUserCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.UserCredentialsService/RemoveUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialsServiceClient) RevokeUserCredentials(ctx context.Context, in *RevokeUserCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.UserCredentialsService/RevokeUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialsServiceClient) RemoveMemberUserCredentials(ctx context.Context, in *RemoveMemberUserCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.UserCredentialsService/RemoveMemberUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialsServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.UserCredentialsService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCredentialsServiceServer is the server API for UserCredentialsService service.
// All implementations must embed UnimplementedUserCredentialsServiceServer
// for forward compatibility
type UserCredentialsServiceServer interface {
	GetUserCredentials(context.Context, *GetUserCredentialRequest) (*GetUserCredentialResponse, error)
	CreateUserCredentials(context.Context, *CreateUserCredentialsRequest) (*ClientCredentials, error)
	RemoveUserCredentials(context.Context, *DeleteUserCredentialsRequest) (*emptypb.Empty, error)
	RevokeUserCredentials(context.Context, *RevokeUserCredentialsRequest) (*emptypb.Empty, error)
	RemoveMemberUserCredentials(context.Context, *RemoveMemberUserCredentialsRequest) (*emptypb.Empty, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserCredentialsServiceServer()
}

// UnimplementedUserCredentialsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserCredentialsServiceServer struct {
}

func (UnimplementedUserCredentialsServiceServer) GetUserCredentials(context.Context, *GetUserCredentialRequest) (*GetUserCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCredentials not implemented")
}
func (UnimplementedUserCredentialsServiceServer) CreateUserCredentials(context.Context, *CreateUserCredentialsRequest) (*ClientCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCredentials not implemented")
}
func (UnimplementedUserCredentialsServiceServer) RemoveUserCredentials(context.Context, *DeleteUserCredentialsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserCredentials not implemented")
}
func (UnimplementedUserCredentialsServiceServer) RevokeUserCredentials(context.Context, *RevokeUserCredentialsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUserCredentials not implemented")
}
func (UnimplementedUserCredentialsServiceServer) RemoveMemberUserCredentials(context.Context, *RemoveMemberUserCredentialsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberUserCredentials not implemented")
}
func (UnimplementedUserCredentialsServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserCredentialsServiceServer) mustEmbedUnimplementedUserCredentialsServiceServer() {
}

// UnsafeUserCredentialsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCredentialsServiceServer will
// result in compilation errors.
type UnsafeUserCredentialsServiceServer interface {
	mustEmbedUnimplementedUserCredentialsServiceServer()
}

func RegisterUserCredentialsServiceServer(s grpc.ServiceRegistrar, srv UserCredentialsServiceServer) {
	s.RegisterService(&UserCredentialsService_ServiceDesc, srv)
}

func _UserCredentialsService_GetUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServiceServer).GetUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCredentialsService/GetUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServiceServer).GetUserCredentials(ctx, req.(*GetUserCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialsService_CreateUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServiceServer).CreateUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCredentialsService/CreateUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServiceServer).CreateUserCredentials(ctx, req.(*CreateUserCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialsService_RemoveUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServiceServer).RemoveUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCredentialsService/RemoveUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServiceServer).RemoveUserCredentials(ctx, req.(*DeleteUserCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialsService_RevokeUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServiceServer).RevokeUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCredentialsService/RevokeUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServiceServer).RevokeUserCredentials(ctx, req.(*RevokeUserCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialsService_RemoveMemberUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberUserCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServiceServer).RemoveMemberUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCredentialsService/RemoveMemberUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServiceServer).RemoveMemberUserCredentials(ctx, req.(*RemoveMemberUserCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialsService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCredentialsService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCredentialsService_ServiceDesc is the grpc.ServiceDesc for UserCredentialsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCredentialsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserCredentialsService",
	HandlerType: (*UserCredentialsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserCredentials",
			Handler:    _UserCredentialsService_GetUserCredentials_Handler,
		},
		{
			MethodName: "CreateUserCredentials",
			Handler:    _UserCredentialsService_CreateUserCredentials_Handler,
		},
		{
			MethodName: "RemoveUserCredentials",
			Handler:    _UserCredentialsService_RemoveUserCredentials_Handler,
		},
		{
			MethodName: "RevokeUserCredentials",
			Handler:    _UserCredentialsService_RevokeUserCredentials_Handler,
		},
		{
			MethodName: "RemoveMemberUserCredentials",
			Handler:    _UserCredentialsService_RemoveMemberUserCredentials_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _UserCredentialsService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-credentials.proto",
}
