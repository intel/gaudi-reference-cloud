// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dpai_deployment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DpaiDeploymentServiceClient is the client API for DpaiDeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiDeploymentServiceClient interface {
	// Create a new DPAI Deployment
	DpaiDeploymentCreate(ctx context.Context, in *DpaiDeploymentCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentCreateResponse, error)
	// List all the DPAI deployments in the given cloud Account
	DpaiDeploymentList(ctx context.Context, in *DpaiDeploymentListRequest, opts ...grpc.CallOption) (*DpaiDeploymentListResponse, error)
	// Get the DPAI Deployment details by ID
	DpaiDeploymentGet(ctx context.Context, in *DpaiDeploymentGetRequest, opts ...grpc.CallOption) (*DpaiDeployment, error)
	// Delete the DPAI deployment
	DpaiDeploymentDelete(ctx context.Context, in *DpaiDeploymentDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentDeleteResponse, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dpaiDeploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiDeploymentServiceClient(cc grpc.ClientConnInterface) DpaiDeploymentServiceClient {
	return &dpaiDeploymentServiceClient{cc}
}

func (c *dpaiDeploymentServiceClient) DpaiDeploymentCreate(ctx context.Context, in *DpaiDeploymentCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentCreateResponse, error) {
	out := new(DpaiDeploymentCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentService/DpaiDeploymentCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentServiceClient) DpaiDeploymentList(ctx context.Context, in *DpaiDeploymentListRequest, opts ...grpc.CallOption) (*DpaiDeploymentListResponse, error) {
	out := new(DpaiDeploymentListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentService/DpaiDeploymentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentServiceClient) DpaiDeploymentGet(ctx context.Context, in *DpaiDeploymentGetRequest, opts ...grpc.CallOption) (*DpaiDeployment, error) {
	out := new(DpaiDeployment)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentService/DpaiDeploymentGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentServiceClient) DpaiDeploymentDelete(ctx context.Context, in *DpaiDeploymentDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentDeleteResponse, error) {
	out := new(DpaiDeploymentDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentService/DpaiDeploymentDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiDeploymentServiceServer is the server API for DpaiDeploymentService service.
// All implementations must embed UnimplementedDpaiDeploymentServiceServer
// for forward compatibility
type DpaiDeploymentServiceServer interface {
	// Create a new DPAI Deployment
	DpaiDeploymentCreate(context.Context, *DpaiDeploymentCreateRequest) (*DpaiDeploymentCreateResponse, error)
	// List all the DPAI deployments in the given cloud Account
	DpaiDeploymentList(context.Context, *DpaiDeploymentListRequest) (*DpaiDeploymentListResponse, error)
	// Get the DPAI Deployment details by ID
	DpaiDeploymentGet(context.Context, *DpaiDeploymentGetRequest) (*DpaiDeployment, error)
	// Delete the DPAI deployment
	DpaiDeploymentDelete(context.Context, *DpaiDeploymentDeleteRequest) (*DpaiDeploymentDeleteResponse, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDpaiDeploymentServiceServer()
}

// UnimplementedDpaiDeploymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiDeploymentServiceServer struct {
}

func (UnimplementedDpaiDeploymentServiceServer) DpaiDeploymentCreate(context.Context, *DpaiDeploymentCreateRequest) (*DpaiDeploymentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentCreate not implemented")
}
func (UnimplementedDpaiDeploymentServiceServer) DpaiDeploymentList(context.Context, *DpaiDeploymentListRequest) (*DpaiDeploymentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentList not implemented")
}
func (UnimplementedDpaiDeploymentServiceServer) DpaiDeploymentGet(context.Context, *DpaiDeploymentGetRequest) (*DpaiDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentGet not implemented")
}
func (UnimplementedDpaiDeploymentServiceServer) DpaiDeploymentDelete(context.Context, *DpaiDeploymentDeleteRequest) (*DpaiDeploymentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentDelete not implemented")
}
func (UnimplementedDpaiDeploymentServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDpaiDeploymentServiceServer) mustEmbedUnimplementedDpaiDeploymentServiceServer() {}

// UnsafeDpaiDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiDeploymentServiceServer will
// result in compilation errors.
type UnsafeDpaiDeploymentServiceServer interface {
	mustEmbedUnimplementedDpaiDeploymentServiceServer()
}

func RegisterDpaiDeploymentServiceServer(s grpc.ServiceRegistrar, srv DpaiDeploymentServiceServer) {
	s.RegisterService(&DpaiDeploymentService_ServiceDesc, srv)
}

func _DpaiDeploymentService_DpaiDeploymentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentService/DpaiDeploymentCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentCreate(ctx, req.(*DpaiDeploymentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentService_DpaiDeploymentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentService/DpaiDeploymentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentList(ctx, req.(*DpaiDeploymentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentService_DpaiDeploymentGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentService/DpaiDeploymentGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentGet(ctx, req.(*DpaiDeploymentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentService_DpaiDeploymentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentService/DpaiDeploymentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentServiceServer).DpaiDeploymentDelete(ctx, req.(*DpaiDeploymentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiDeploymentService_ServiceDesc is the grpc.ServiceDesc for DpaiDeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiDeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiDeploymentService",
	HandlerType: (*DpaiDeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiDeploymentCreate",
			Handler:    _DpaiDeploymentService_DpaiDeploymentCreate_Handler,
		},
		{
			MethodName: "DpaiDeploymentList",
			Handler:    _DpaiDeploymentService_DpaiDeploymentList_Handler,
		},
		{
			MethodName: "DpaiDeploymentGet",
			Handler:    _DpaiDeploymentService_DpaiDeploymentGet_Handler,
		},
		{
			MethodName: "DpaiDeploymentDelete",
			Handler:    _DpaiDeploymentService_DpaiDeploymentDelete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DpaiDeploymentService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_deployment.proto",
}

// DpaiDeploymentTaskServiceClient is the client API for DpaiDeploymentTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiDeploymentTaskServiceClient interface {
	// Create a new Task in the DPAI Deployment
	DpaiDeploymentTaskCreate(ctx context.Context, in *DpaiDeploymentTaskCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskCreateResponse, error)
	// List all the Tasks in the DPAI Deployment.
	DpaiDeploymentTaskList(ctx context.Context, in *DpaiDeploymentTaskListRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskListResponse, error)
	// Get the DPAI Deployment Task by ID
	DpaiDeploymentTaskGet(ctx context.Context, in *DpaiDeploymentTaskGetRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskGetResponse, error)
	// Update the DPAI Deployment Task.
	DpaiDeploymentTaskUpdate(ctx context.Context, in *DpaiDeploymentTaskUpdateRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskUpdateResponse, error)
	// Delete the DPAI Deployment Task.
	DpaiDeploymentTaskDelete(ctx context.Context, in *DpaiDeploymentTaskDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskDeleteResponse, error)
}

type dpaiDeploymentTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiDeploymentTaskServiceClient(cc grpc.ClientConnInterface) DpaiDeploymentTaskServiceClient {
	return &dpaiDeploymentTaskServiceClient{cc}
}

func (c *dpaiDeploymentTaskServiceClient) DpaiDeploymentTaskCreate(ctx context.Context, in *DpaiDeploymentTaskCreateRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskCreateResponse, error) {
	out := new(DpaiDeploymentTaskCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentTaskServiceClient) DpaiDeploymentTaskList(ctx context.Context, in *DpaiDeploymentTaskListRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskListResponse, error) {
	out := new(DpaiDeploymentTaskListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentTaskServiceClient) DpaiDeploymentTaskGet(ctx context.Context, in *DpaiDeploymentTaskGetRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskGetResponse, error) {
	out := new(DpaiDeploymentTaskGetResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentTaskServiceClient) DpaiDeploymentTaskUpdate(ctx context.Context, in *DpaiDeploymentTaskUpdateRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskUpdateResponse, error) {
	out := new(DpaiDeploymentTaskUpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiDeploymentTaskServiceClient) DpaiDeploymentTaskDelete(ctx context.Context, in *DpaiDeploymentTaskDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentTaskDeleteResponse, error) {
	out := new(DpaiDeploymentTaskDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiDeploymentTaskServiceServer is the server API for DpaiDeploymentTaskService service.
// All implementations must embed UnimplementedDpaiDeploymentTaskServiceServer
// for forward compatibility
type DpaiDeploymentTaskServiceServer interface {
	// Create a new Task in the DPAI Deployment
	DpaiDeploymentTaskCreate(context.Context, *DpaiDeploymentTaskCreateRequest) (*DpaiDeploymentTaskCreateResponse, error)
	// List all the Tasks in the DPAI Deployment.
	DpaiDeploymentTaskList(context.Context, *DpaiDeploymentTaskListRequest) (*DpaiDeploymentTaskListResponse, error)
	// Get the DPAI Deployment Task by ID
	DpaiDeploymentTaskGet(context.Context, *DpaiDeploymentTaskGetRequest) (*DpaiDeploymentTaskGetResponse, error)
	// Update the DPAI Deployment Task.
	DpaiDeploymentTaskUpdate(context.Context, *DpaiDeploymentTaskUpdateRequest) (*DpaiDeploymentTaskUpdateResponse, error)
	// Delete the DPAI Deployment Task.
	DpaiDeploymentTaskDelete(context.Context, *DpaiDeploymentTaskDeleteRequest) (*DpaiDeploymentTaskDeleteResponse, error)
	mustEmbedUnimplementedDpaiDeploymentTaskServiceServer()
}

// UnimplementedDpaiDeploymentTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiDeploymentTaskServiceServer struct {
}

func (UnimplementedDpaiDeploymentTaskServiceServer) DpaiDeploymentTaskCreate(context.Context, *DpaiDeploymentTaskCreateRequest) (*DpaiDeploymentTaskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentTaskCreate not implemented")
}
func (UnimplementedDpaiDeploymentTaskServiceServer) DpaiDeploymentTaskList(context.Context, *DpaiDeploymentTaskListRequest) (*DpaiDeploymentTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentTaskList not implemented")
}
func (UnimplementedDpaiDeploymentTaskServiceServer) DpaiDeploymentTaskGet(context.Context, *DpaiDeploymentTaskGetRequest) (*DpaiDeploymentTaskGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentTaskGet not implemented")
}
func (UnimplementedDpaiDeploymentTaskServiceServer) DpaiDeploymentTaskUpdate(context.Context, *DpaiDeploymentTaskUpdateRequest) (*DpaiDeploymentTaskUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentTaskUpdate not implemented")
}
func (UnimplementedDpaiDeploymentTaskServiceServer) DpaiDeploymentTaskDelete(context.Context, *DpaiDeploymentTaskDeleteRequest) (*DpaiDeploymentTaskDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiDeploymentTaskDelete not implemented")
}
func (UnimplementedDpaiDeploymentTaskServiceServer) mustEmbedUnimplementedDpaiDeploymentTaskServiceServer() {
}

// UnsafeDpaiDeploymentTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiDeploymentTaskServiceServer will
// result in compilation errors.
type UnsafeDpaiDeploymentTaskServiceServer interface {
	mustEmbedUnimplementedDpaiDeploymentTaskServiceServer()
}

func RegisterDpaiDeploymentTaskServiceServer(s grpc.ServiceRegistrar, srv DpaiDeploymentTaskServiceServer) {
	s.RegisterService(&DpaiDeploymentTaskService_ServiceDesc, srv)
}

func _DpaiDeploymentTaskService_DpaiDeploymentTaskCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentTaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskCreate(ctx, req.(*DpaiDeploymentTaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentTaskService_DpaiDeploymentTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskList(ctx, req.(*DpaiDeploymentTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentTaskService_DpaiDeploymentTaskGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentTaskGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskGet(ctx, req.(*DpaiDeploymentTaskGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentTaskService_DpaiDeploymentTaskUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentTaskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskUpdate(ctx, req.(*DpaiDeploymentTaskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiDeploymentTaskService_DpaiDeploymentTaskDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiDeploymentTaskDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiDeploymentTaskService/DpaiDeploymentTaskDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiDeploymentTaskServiceServer).DpaiDeploymentTaskDelete(ctx, req.(*DpaiDeploymentTaskDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiDeploymentTaskService_ServiceDesc is the grpc.ServiceDesc for DpaiDeploymentTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiDeploymentTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiDeploymentTaskService",
	HandlerType: (*DpaiDeploymentTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiDeploymentTaskCreate",
			Handler:    _DpaiDeploymentTaskService_DpaiDeploymentTaskCreate_Handler,
		},
		{
			MethodName: "DpaiDeploymentTaskList",
			Handler:    _DpaiDeploymentTaskService_DpaiDeploymentTaskList_Handler,
		},
		{
			MethodName: "DpaiDeploymentTaskGet",
			Handler:    _DpaiDeploymentTaskService_DpaiDeploymentTaskGet_Handler,
		},
		{
			MethodName: "DpaiDeploymentTaskUpdate",
			Handler:    _DpaiDeploymentTaskService_DpaiDeploymentTaskUpdate_Handler,
		},
		{
			MethodName: "DpaiDeploymentTaskDelete",
			Handler:    _DpaiDeploymentTaskService_DpaiDeploymentTaskDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_deployment.proto",
}
