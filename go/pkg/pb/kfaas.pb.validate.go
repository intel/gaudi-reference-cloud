// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kfaas.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on KubeFlowDeploymentCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubeFlowDeploymentCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeFlowDeploymentCreate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubeFlowDeploymentCreateMultiError, or nil if none found.
func (m *KubeFlowDeploymentCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeFlowDeploymentCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentName

	// no validation rules for KfVersion

	// no validation rules for K8SClusterID

	// no validation rules for K8SClusterName

	// no validation rules for StorageClassName

	// no validation rules for CreatedDate

	// no validation rules for CloudAccountId

	// no validation rules for Status

	if len(errors) > 0 {
		return KubeFlowDeploymentCreateMultiError(errors)
	}

	return nil
}

// KubeFlowDeploymentCreateMultiError is an error wrapping multiple validation
// errors returned by KubeFlowDeploymentCreate.ValidateAll() if the designated
// constraints aren't met.
type KubeFlowDeploymentCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeFlowDeploymentCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeFlowDeploymentCreateMultiError) AllErrors() []error { return m }

// KubeFlowDeploymentCreateValidationError is the validation error returned by
// KubeFlowDeploymentCreate.Validate if the designated constraints aren't met.
type KubeFlowDeploymentCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeFlowDeploymentCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeFlowDeploymentCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeFlowDeploymentCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeFlowDeploymentCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeFlowDeploymentCreateValidationError) ErrorName() string {
	return "KubeFlowDeploymentCreateValidationError"
}

// Error satisfies the builtin error interface
func (e KubeFlowDeploymentCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeFlowDeploymentCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeFlowDeploymentCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeFlowDeploymentCreateValidationError{}

// Validate checks the field values on KubeFlowDeployment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubeFlowDeployment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeFlowDeployment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubeFlowDeploymentMultiError, or nil if none found.
func (m *KubeFlowDeployment) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeFlowDeployment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	// no validation rules for DeploymentName

	// no validation rules for KfVersion

	// no validation rules for K8SClusterID

	// no validation rules for K8SClusterName

	// no validation rules for StorageClassName

	// no validation rules for CreatedDate

	// no validation rules for CloudAccountId

	// no validation rules for Status

	if len(errors) > 0 {
		return KubeFlowDeploymentMultiError(errors)
	}

	return nil
}

// KubeFlowDeploymentMultiError is an error wrapping multiple validation errors
// returned by KubeFlowDeployment.ValidateAll() if the designated constraints
// aren't met.
type KubeFlowDeploymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeFlowDeploymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeFlowDeploymentMultiError) AllErrors() []error { return m }

// KubeFlowDeploymentValidationError is the validation error returned by
// KubeFlowDeployment.Validate if the designated constraints aren't met.
type KubeFlowDeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeFlowDeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeFlowDeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeFlowDeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeFlowDeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeFlowDeploymentValidationError) ErrorName() string {
	return "KubeFlowDeploymentValidationError"
}

// Error satisfies the builtin error interface
func (e KubeFlowDeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeFlowDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeFlowDeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeFlowDeploymentValidationError{}

// Validate checks the field values on ListKubeFlowDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKubeFlowDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKubeFlowDeploymentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListKubeFlowDeploymentRequestMultiError, or nil if none found.
func (m *ListKubeFlowDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKubeFlowDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return ListKubeFlowDeploymentRequestMultiError(errors)
	}

	return nil
}

// ListKubeFlowDeploymentRequestMultiError is an error wrapping multiple
// validation errors returned by ListKubeFlowDeploymentRequest.ValidateAll()
// if the designated constraints aren't met.
type ListKubeFlowDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKubeFlowDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKubeFlowDeploymentRequestMultiError) AllErrors() []error { return m }

// ListKubeFlowDeploymentRequestValidationError is the validation error
// returned by ListKubeFlowDeploymentRequest.Validate if the designated
// constraints aren't met.
type ListKubeFlowDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKubeFlowDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKubeFlowDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKubeFlowDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKubeFlowDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKubeFlowDeploymentRequestValidationError) ErrorName() string {
	return "ListKubeFlowDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKubeFlowDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKubeFlowDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKubeFlowDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKubeFlowDeploymentRequestValidationError{}

// Validate checks the field values on ListKubeFlowDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKubeFlowDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKubeFlowDeploymentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListKubeFlowDeploymentResponseMultiError, or nil if none found.
func (m *ListKubeFlowDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKubeFlowDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResponse() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKubeFlowDeploymentResponseValidationError{
						field:  fmt.Sprintf("Response[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKubeFlowDeploymentResponseValidationError{
						field:  fmt.Sprintf("Response[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKubeFlowDeploymentResponseValidationError{
					field:  fmt.Sprintf("Response[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListKubeFlowDeploymentResponseMultiError(errors)
	}

	return nil
}

// ListKubeFlowDeploymentResponseMultiError is an error wrapping multiple
// validation errors returned by ListKubeFlowDeploymentResponse.ValidateAll()
// if the designated constraints aren't met.
type ListKubeFlowDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKubeFlowDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKubeFlowDeploymentResponseMultiError) AllErrors() []error { return m }

// ListKubeFlowDeploymentResponseValidationError is the validation error
// returned by ListKubeFlowDeploymentResponse.Validate if the designated
// constraints aren't met.
type ListKubeFlowDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKubeFlowDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKubeFlowDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKubeFlowDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKubeFlowDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKubeFlowDeploymentResponseValidationError) ErrorName() string {
	return "ListKubeFlowDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKubeFlowDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKubeFlowDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKubeFlowDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKubeFlowDeploymentResponseValidationError{}

// Validate checks the field values on CreateKubeFlowDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKubeFlowDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKubeFlowDeploymentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKubeFlowDeploymentRequestMultiError, or nil if none found.
func (m *CreateKubeFlowDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKubeFlowDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentName

	// no validation rules for KfVersion

	// no validation rules for K8SClusterID

	// no validation rules for K8SClusterName

	// no validation rules for StorageClassName

	// no validation rules for CloudAccountId

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateKubeFlowDeploymentRequestMultiError(errors)
	}

	return nil
}

// CreateKubeFlowDeploymentRequestMultiError is an error wrapping multiple
// validation errors returned by CreateKubeFlowDeploymentRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateKubeFlowDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKubeFlowDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKubeFlowDeploymentRequestMultiError) AllErrors() []error { return m }

// CreateKubeFlowDeploymentRequestValidationError is the validation error
// returned by CreateKubeFlowDeploymentRequest.Validate if the designated
// constraints aren't met.
type CreateKubeFlowDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKubeFlowDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKubeFlowDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKubeFlowDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKubeFlowDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKubeFlowDeploymentRequestValidationError) ErrorName() string {
	return "CreateKubeFlowDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKubeFlowDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKubeFlowDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKubeFlowDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKubeFlowDeploymentRequestValidationError{}

// Validate checks the field values on CreateKubeFlowDeploymentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKubeFlowDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKubeFlowDeploymentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKubeFlowDeploymentResponseMultiError, or nil if none found.
func (m *CreateKubeFlowDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKubeFlowDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	if len(errors) > 0 {
		return CreateKubeFlowDeploymentResponseMultiError(errors)
	}

	return nil
}

// CreateKubeFlowDeploymentResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateKubeFlowDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateKubeFlowDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKubeFlowDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKubeFlowDeploymentResponseMultiError) AllErrors() []error { return m }

// CreateKubeFlowDeploymentResponseValidationError is the validation error
// returned by CreateKubeFlowDeploymentResponse.Validate if the designated
// constraints aren't met.
type CreateKubeFlowDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKubeFlowDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKubeFlowDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKubeFlowDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKubeFlowDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKubeFlowDeploymentResponseValidationError) ErrorName() string {
	return "CreateKubeFlowDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKubeFlowDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKubeFlowDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKubeFlowDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKubeFlowDeploymentResponseValidationError{}

// Validate checks the field values on GetUserCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCredentialsRequestMultiError, or nil if none found.
func (m *GetUserCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return GetUserCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetUserCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserCredentialsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetUserCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCredentialsRequestMultiError) AllErrors() []error { return m }

// GetUserCredentialsRequestValidationError is the validation error returned by
// GetUserCredentialsRequest.Validate if the designated constraints aren't met.
type GetUserCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCredentialsRequestValidationError) ErrorName() string {
	return "GetUserCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCredentialsRequestValidationError{}

// Validate checks the field values on GetUserCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCredentialsResponseMultiError, or nil if none found.
func (m *GetUserCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetUserCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserCredentialsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCredentialsResponseMultiError) AllErrors() []error { return m }

// GetUserCredentialsResponseValidationError is the validation error returned
// by GetUserCredentialsResponse.Validate if the designated constraints aren't met.
type GetUserCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCredentialsResponseValidationError) ErrorName() string {
	return "GetUserCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCredentialsResponseValidationError{}

// Validate checks the field values on GetExternalIPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExternalIPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExternalIPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExternalIPRequestMultiError, or nil if none found.
func (m *GetExternalIPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExternalIPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return GetExternalIPRequestMultiError(errors)
	}

	return nil
}

// GetExternalIPRequestMultiError is an error wrapping multiple validation
// errors returned by GetExternalIPRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExternalIPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExternalIPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExternalIPRequestMultiError) AllErrors() []error { return m }

// GetExternalIPRequestValidationError is the validation error returned by
// GetExternalIPRequest.Validate if the designated constraints aren't met.
type GetExternalIPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalIPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalIPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalIPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalIPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalIPRequestValidationError) ErrorName() string {
	return "GetExternalIPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalIPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalIPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalIPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalIPRequestValidationError{}

// Validate checks the field values on GetExternalIPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExternalIPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExternalIPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExternalIPResponseMultiError, or nil if none found.
func (m *GetExternalIPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExternalIPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	if len(errors) > 0 {
		return GetExternalIPResponseMultiError(errors)
	}

	return nil
}

// GetExternalIPResponseMultiError is an error wrapping multiple validation
// errors returned by GetExternalIPResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExternalIPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExternalIPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExternalIPResponseMultiError) AllErrors() []error { return m }

// GetExternalIPResponseValidationError is the validation error returned by
// GetExternalIPResponse.Validate if the designated constraints aren't met.
type GetExternalIPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalIPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalIPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalIPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalIPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalIPResponseValidationError) ErrorName() string {
	return "GetExternalIPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalIPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalIPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalIPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalIPResponseValidationError{}

// Validate checks the field values on GetKFStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKFStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKFStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKFStatusRequestMultiError, or nil if none found.
func (m *GetKFStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKFStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	// no validation rules for CloudAccountId

	// no validation rules for Namespace

	if len(errors) > 0 {
		return GetKFStatusRequestMultiError(errors)
	}

	return nil
}

// GetKFStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetKFStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetKFStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKFStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKFStatusRequestMultiError) AllErrors() []error { return m }

// GetKFStatusRequestValidationError is the validation error returned by
// GetKFStatusRequest.Validate if the designated constraints aren't met.
type GetKFStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKFStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKFStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKFStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKFStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKFStatusRequestValidationError) ErrorName() string {
	return "GetKFStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKFStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKFStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKFStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKFStatusRequestValidationError{}

// Validate checks the field values on KFStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KFStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KFStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KFStatusMultiError, or nil
// if none found.
func (m *KFStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *KFStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pod

	// no validation rules for Status

	// no validation rules for Namespace

	if len(errors) > 0 {
		return KFStatusMultiError(errors)
	}

	return nil
}

// KFStatusMultiError is an error wrapping multiple validation errors returned
// by KFStatus.ValidateAll() if the designated constraints aren't met.
type KFStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KFStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KFStatusMultiError) AllErrors() []error { return m }

// KFStatusValidationError is the validation error returned by
// KFStatus.Validate if the designated constraints aren't met.
type KFStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KFStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KFStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KFStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KFStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KFStatusValidationError) ErrorName() string { return "KFStatusValidationError" }

// Error satisfies the builtin error interface
func (e KFStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKFStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KFStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KFStatusValidationError{}

// Validate checks the field values on GetKFStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKFStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKFStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKFStatusResponseMultiError, or nil if none found.
func (m *GetKFStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKFStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetKFStatusResponseValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetKFStatusResponseValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetKFStatusResponseValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetKFStatusResponseMultiError(errors)
	}

	return nil
}

// GetKFStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetKFStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetKFStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKFStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKFStatusResponseMultiError) AllErrors() []error { return m }

// GetKFStatusResponseValidationError is the validation error returned by
// GetKFStatusResponse.Validate if the designated constraints aren't met.
type GetKFStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKFStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKFStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKFStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKFStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKFStatusResponseValidationError) ErrorName() string {
	return "GetKFStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKFStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKFStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKFStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKFStatusResponseValidationError{}

// Validate checks the field values on DeleteKubeFlowDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteKubeFlowDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKubeFlowDeploymentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteKubeFlowDeploymentRequestMultiError, or nil if none found.
func (m *DeleteKubeFlowDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKubeFlowDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DeleteKubeFlowDeploymentRequestMultiError(errors)
	}

	return nil
}

// DeleteKubeFlowDeploymentRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteKubeFlowDeploymentRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteKubeFlowDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKubeFlowDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKubeFlowDeploymentRequestMultiError) AllErrors() []error { return m }

// DeleteKubeFlowDeploymentRequestValidationError is the validation error
// returned by DeleteKubeFlowDeploymentRequest.Validate if the designated
// constraints aren't met.
type DeleteKubeFlowDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKubeFlowDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKubeFlowDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKubeFlowDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKubeFlowDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKubeFlowDeploymentRequestValidationError) ErrorName() string {
	return "DeleteKubeFlowDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKubeFlowDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKubeFlowDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKubeFlowDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKubeFlowDeploymentRequestValidationError{}

// Validate checks the field values on DeleteKubeFlowDeploymentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteKubeFlowDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKubeFlowDeploymentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteKubeFlowDeploymentResponseMultiError, or nil if none found.
func (m *DeleteKubeFlowDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKubeFlowDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteKubeFlowDeploymentResponseMultiError(errors)
	}

	return nil
}

// DeleteKubeFlowDeploymentResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteKubeFlowDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteKubeFlowDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKubeFlowDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKubeFlowDeploymentResponseMultiError) AllErrors() []error { return m }

// DeleteKubeFlowDeploymentResponseValidationError is the validation error
// returned by DeleteKubeFlowDeploymentResponse.Validate if the designated
// constraints aren't met.
type DeleteKubeFlowDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKubeFlowDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKubeFlowDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKubeFlowDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKubeFlowDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKubeFlowDeploymentResponseValidationError) ErrorName() string {
	return "DeleteKubeFlowDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKubeFlowDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKubeFlowDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKubeFlowDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKubeFlowDeploymentResponseValidationError{}

// Validate checks the field values on ExecuteKFPreCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteKFPreCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteKFPreCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteKFPreCheckRequestMultiError, or nil if none found.
func (m *ExecuteKFPreCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteKFPreCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for K8SClusterID

	// no validation rules for CloudAccountId

	// no validation rules for Check

	if len(errors) > 0 {
		return ExecuteKFPreCheckRequestMultiError(errors)
	}

	return nil
}

// ExecuteKFPreCheckRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteKFPreCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecuteKFPreCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteKFPreCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteKFPreCheckRequestMultiError) AllErrors() []error { return m }

// ExecuteKFPreCheckRequestValidationError is the validation error returned by
// ExecuteKFPreCheckRequest.Validate if the designated constraints aren't met.
type ExecuteKFPreCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteKFPreCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteKFPreCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteKFPreCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteKFPreCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteKFPreCheckRequestValidationError) ErrorName() string {
	return "ExecuteKFPreCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteKFPreCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteKFPreCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteKFPreCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteKFPreCheckRequestValidationError{}

// Validate checks the field values on ExecuteKFPreCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteKFPreCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteKFPreCheckResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteKFPreCheckResponseMultiError, or nil if none found.
func (m *ExecuteKFPreCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteKFPreCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ExecuteKFPreCheckResponseMultiError(errors)
	}

	return nil
}

// ExecuteKFPreCheckResponseMultiError is an error wrapping multiple validation
// errors returned by ExecuteKFPreCheckResponse.ValidateAll() if the
// designated constraints aren't met.
type ExecuteKFPreCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteKFPreCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteKFPreCheckResponseMultiError) AllErrors() []error { return m }

// ExecuteKFPreCheckResponseValidationError is the validation error returned by
// ExecuteKFPreCheckResponse.Validate if the designated constraints aren't met.
type ExecuteKFPreCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteKFPreCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteKFPreCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteKFPreCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteKFPreCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteKFPreCheckResponseValidationError) ErrorName() string {
	return "ExecuteKFPreCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteKFPreCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteKFPreCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteKFPreCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteKFPreCheckResponseValidationError{}

// Validate checks the field values on GetJobStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobStatusRequestMultiError, or nil if none found.
func (m *GetJobStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	// no validation rules for CloudAccountId

	// no validation rules for Job

	if len(errors) > 0 {
		return GetJobStatusRequestMultiError(errors)
	}

	return nil
}

// GetJobStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobStatusRequestMultiError) AllErrors() []error { return m }

// GetJobStatusRequestValidationError is the validation error returned by
// GetJobStatusRequest.Validate if the designated constraints aren't met.
type GetJobStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobStatusRequestValidationError) ErrorName() string {
	return "GetJobStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobStatusRequestValidationError{}

// Validate checks the field values on GetJobStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobStatusResponseMultiError, or nil if none found.
func (m *GetJobStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetJobStatusResponseMultiError(errors)
	}

	return nil
}

// GetJobStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobStatusResponseMultiError) AllErrors() []error { return m }

// GetJobStatusResponseValidationError is the validation error returned by
// GetJobStatusResponse.Validate if the designated constraints aren't met.
type GetJobStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobStatusResponseValidationError) ErrorName() string {
	return "GetJobStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobStatusResponseValidationError{}
