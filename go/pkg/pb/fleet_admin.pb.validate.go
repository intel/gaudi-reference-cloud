// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fleet_admin.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on
// SearchComputeNodePoolsForInstanceSchedulingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchComputeNodePoolsForInstanceSchedulingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchComputeNodePoolsForInstanceSchedulingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SearchComputeNodePoolsForInstanceSchedulingRequestMultiError, or nil if
// none found.
func (m *SearchComputeNodePoolsForInstanceSchedulingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchComputeNodePoolsForInstanceSchedulingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return SearchComputeNodePoolsForInstanceSchedulingRequestMultiError(errors)
	}

	return nil
}

// SearchComputeNodePoolsForInstanceSchedulingRequestMultiError is an error
// wrapping multiple validation errors returned by
// SearchComputeNodePoolsForInstanceSchedulingRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchComputeNodePoolsForInstanceSchedulingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchComputeNodePoolsForInstanceSchedulingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchComputeNodePoolsForInstanceSchedulingRequestMultiError) AllErrors() []error { return m }

// SearchComputeNodePoolsForInstanceSchedulingRequestValidationError is the
// validation error returned by
// SearchComputeNodePoolsForInstanceSchedulingRequest.Validate if the
// designated constraints aren't met.
type SearchComputeNodePoolsForInstanceSchedulingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchComputeNodePoolsForInstanceSchedulingRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SearchComputeNodePoolsForInstanceSchedulingRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SearchComputeNodePoolsForInstanceSchedulingRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SearchComputeNodePoolsForInstanceSchedulingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchComputeNodePoolsForInstanceSchedulingRequestValidationError) ErrorName() string {
	return "SearchComputeNodePoolsForInstanceSchedulingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchComputeNodePoolsForInstanceSchedulingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchComputeNodePoolsForInstanceSchedulingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchComputeNodePoolsForInstanceSchedulingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchComputeNodePoolsForInstanceSchedulingRequestValidationError{}

// Validate checks the field values on
// SearchComputeNodePoolsForInstanceSchedulingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchComputeNodePoolsForInstanceSchedulingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchComputeNodePoolsForInstanceSchedulingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SearchComputeNodePoolsForInstanceSchedulingResponseMultiError, or nil if
// none found.
func (m *SearchComputeNodePoolsForInstanceSchedulingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchComputeNodePoolsForInstanceSchedulingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComputeNodePools() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchComputeNodePoolsForInstanceSchedulingResponseValidationError{
						field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchComputeNodePoolsForInstanceSchedulingResponseValidationError{
						field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchComputeNodePoolsForInstanceSchedulingResponseValidationError{
					field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchComputeNodePoolsForInstanceSchedulingResponseMultiError(errors)
	}

	return nil
}

// SearchComputeNodePoolsForInstanceSchedulingResponseMultiError is an error
// wrapping multiple validation errors returned by
// SearchComputeNodePoolsForInstanceSchedulingResponse.ValidateAll() if the
// designated constraints aren't met.
type SearchComputeNodePoolsForInstanceSchedulingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchComputeNodePoolsForInstanceSchedulingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchComputeNodePoolsForInstanceSchedulingResponseMultiError) AllErrors() []error { return m }

// SearchComputeNodePoolsForInstanceSchedulingResponseValidationError is the
// validation error returned by
// SearchComputeNodePoolsForInstanceSchedulingResponse.Validate if the
// designated constraints aren't met.
type SearchComputeNodePoolsForInstanceSchedulingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchComputeNodePoolsForInstanceSchedulingResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SearchComputeNodePoolsForInstanceSchedulingResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SearchComputeNodePoolsForInstanceSchedulingResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SearchComputeNodePoolsForInstanceSchedulingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchComputeNodePoolsForInstanceSchedulingResponseValidationError) ErrorName() string {
	return "SearchComputeNodePoolsForInstanceSchedulingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchComputeNodePoolsForInstanceSchedulingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchComputeNodePoolsForInstanceSchedulingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchComputeNodePoolsForInstanceSchedulingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchComputeNodePoolsForInstanceSchedulingResponseValidationError{}

// Validate checks the field values on
// UpdateComputeNodePoolsForCloudAccountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateComputeNodePoolsForCloudAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateComputeNodePoolsForCloudAccountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateComputeNodePoolsForCloudAccountRequestMultiError, or nil if none found.
func (m *UpdateComputeNodePoolsForCloudAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateComputeNodePoolsForCloudAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	for idx, item := range m.GetComputeNodePools() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateComputeNodePoolsForCloudAccountRequestValidationError{
						field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateComputeNodePoolsForCloudAccountRequestValidationError{
						field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateComputeNodePoolsForCloudAccountRequestValidationError{
					field:  fmt.Sprintf("ComputeNodePools[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateAdmin

	if len(errors) > 0 {
		return UpdateComputeNodePoolsForCloudAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateComputeNodePoolsForCloudAccountRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateComputeNodePoolsForCloudAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateComputeNodePoolsForCloudAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateComputeNodePoolsForCloudAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateComputeNodePoolsForCloudAccountRequestMultiError) AllErrors() []error { return m }

// UpdateComputeNodePoolsForCloudAccountRequestValidationError is the
// validation error returned by
// UpdateComputeNodePoolsForCloudAccountRequest.Validate if the designated
// constraints aren't met.
type UpdateComputeNodePoolsForCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateComputeNodePoolsForCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateComputeNodePoolsForCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateComputeNodePoolsForCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateComputeNodePoolsForCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateComputeNodePoolsForCloudAccountRequestValidationError) ErrorName() string {
	return "UpdateComputeNodePoolsForCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateComputeNodePoolsForCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateComputeNodePoolsForCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateComputeNodePoolsForCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateComputeNodePoolsForCloudAccountRequestValidationError{}

// Validate checks the field values on ComputeNodePoolForInstanceScheduling
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ComputeNodePoolForInstanceScheduling) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComputeNodePoolForInstanceScheduling
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ComputeNodePoolForInstanceSchedulingMultiError, or nil if none found.
func (m *ComputeNodePoolForInstanceScheduling) ValidateAll() error {
	return m.validate(true)
}

func (m *ComputeNodePoolForInstanceScheduling) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	if len(errors) > 0 {
		return ComputeNodePoolForInstanceSchedulingMultiError(errors)
	}

	return nil
}

// ComputeNodePoolForInstanceSchedulingMultiError is an error wrapping multiple
// validation errors returned by
// ComputeNodePoolForInstanceScheduling.ValidateAll() if the designated
// constraints aren't met.
type ComputeNodePoolForInstanceSchedulingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComputeNodePoolForInstanceSchedulingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComputeNodePoolForInstanceSchedulingMultiError) AllErrors() []error { return m }

// ComputeNodePoolForInstanceSchedulingValidationError is the validation error
// returned by ComputeNodePoolForInstanceScheduling.Validate if the designated
// constraints aren't met.
type ComputeNodePoolForInstanceSchedulingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputeNodePoolForInstanceSchedulingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputeNodePoolForInstanceSchedulingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputeNodePoolForInstanceSchedulingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputeNodePoolForInstanceSchedulingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputeNodePoolForInstanceSchedulingValidationError) ErrorName() string {
	return "ComputeNodePoolForInstanceSchedulingValidationError"
}

// Error satisfies the builtin error interface
func (e ComputeNodePoolForInstanceSchedulingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputeNodePoolForInstanceScheduling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputeNodePoolForInstanceSchedulingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputeNodePoolForInstanceSchedulingValidationError{}

// Validate checks the field values on GetResourcePatchesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcePatchesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcePatchesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcePatchesRequestMultiError, or nil if none found.
func (m *GetResourcePatchesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcePatchesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	if len(errors) > 0 {
		return GetResourcePatchesRequestMultiError(errors)
	}

	return nil
}

// GetResourcePatchesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourcePatchesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetResourcePatchesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcePatchesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcePatchesRequestMultiError) AllErrors() []error { return m }

// GetResourcePatchesRequestValidationError is the validation error returned by
// GetResourcePatchesRequest.Validate if the designated constraints aren't met.
type GetResourcePatchesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcePatchesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcePatchesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcePatchesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcePatchesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcePatchesRequestValidationError) ErrorName() string {
	return "GetResourcePatchesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcePatchesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcePatchesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcePatchesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcePatchesRequestValidationError{}

// Validate checks the field values on ResourcePatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourcePatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcePatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourcePatchMultiError, or
// nil if none found.
func (m *ResourcePatch) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcePatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeName

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetGvr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourcePatchValidationError{
					field:  "Gvr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourcePatchValidationError{
					field:  "Gvr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGvr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcePatchValidationError{
				field:  "Gvr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return ResourcePatchMultiError(errors)
	}

	return nil
}

// ResourcePatchMultiError is an error wrapping multiple validation errors
// returned by ResourcePatch.ValidateAll() if the designated constraints
// aren't met.
type ResourcePatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcePatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcePatchMultiError) AllErrors() []error { return m }

// ResourcePatchValidationError is the validation error returned by
// ResourcePatch.Validate if the designated constraints aren't met.
type ResourcePatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcePatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcePatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcePatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcePatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcePatchValidationError) ErrorName() string { return "ResourcePatchValidationError" }

// Error satisfies the builtin error interface
func (e ResourcePatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcePatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcePatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcePatchValidationError{}

// Validate checks the field values on GetResourcePatchesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcePatchesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcePatchesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcePatchesResponseMultiError, or nil if none found.
func (m *GetResourcePatchesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcePatchesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResourcePatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResourcePatchesResponseValidationError{
						field:  fmt.Sprintf("ResourcePatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResourcePatchesResponseValidationError{
						field:  fmt.Sprintf("ResourcePatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResourcePatchesResponseValidationError{
					field:  fmt.Sprintf("ResourcePatches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetResourcePatchesResponseMultiError(errors)
	}

	return nil
}

// GetResourcePatchesResponseMultiError is an error wrapping multiple
// validation errors returned by GetResourcePatchesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetResourcePatchesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcePatchesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcePatchesResponseMultiError) AllErrors() []error { return m }

// GetResourcePatchesResponseValidationError is the validation error returned
// by GetResourcePatchesResponse.Validate if the designated constraints aren't met.
type GetResourcePatchesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcePatchesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcePatchesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcePatchesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcePatchesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcePatchesResponseValidationError) ErrorName() string {
	return "GetResourcePatchesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcePatchesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcePatchesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcePatchesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcePatchesResponseValidationError{}

// Validate checks the field values on ReportNodeStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportNodeStatisticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportNodeStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportNodeStatisticsRequestMultiError, or nil if none found.
func (m *ReportNodeStatisticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportNodeStatisticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchedulerNodeStatistics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportNodeStatisticsRequestValidationError{
						field:  fmt.Sprintf("SchedulerNodeStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportNodeStatisticsRequestValidationError{
						field:  fmt.Sprintf("SchedulerNodeStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportNodeStatisticsRequestValidationError{
					field:  fmt.Sprintf("SchedulerNodeStatistics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportNodeStatisticsRequestMultiError(errors)
	}

	return nil
}

// ReportNodeStatisticsRequestMultiError is an error wrapping multiple
// validation errors returned by ReportNodeStatisticsRequest.ValidateAll() if
// the designated constraints aren't met.
type ReportNodeStatisticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportNodeStatisticsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportNodeStatisticsRequestMultiError) AllErrors() []error { return m }

// ReportNodeStatisticsRequestValidationError is the validation error returned
// by ReportNodeStatisticsRequest.Validate if the designated constraints
// aren't met.
type ReportNodeStatisticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportNodeStatisticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportNodeStatisticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportNodeStatisticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportNodeStatisticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportNodeStatisticsRequestValidationError) ErrorName() string {
	return "ReportNodeStatisticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportNodeStatisticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportNodeStatisticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportNodeStatisticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportNodeStatisticsRequestValidationError{}
