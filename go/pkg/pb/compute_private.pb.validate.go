// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: compute_private.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoadBalancerSearchStreamPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LoadBalancerSearchStreamPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LoadBalancerSearchStreamPrivateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// LoadBalancerSearchStreamPrivateRequestMultiError, or nil if none found.
func (m *LoadBalancerSearchStreamPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerSearchStreamPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoadBalancerSearchStreamPrivateRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerSearchStreamPrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// LoadBalancerSearchStreamPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerSearchStreamPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerSearchStreamPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerSearchStreamPrivateRequestMultiError) AllErrors() []error { return m }

// LoadBalancerSearchStreamPrivateRequestValidationError is the validation
// error returned by LoadBalancerSearchStreamPrivateRequest.Validate if the
// designated constraints aren't met.
type LoadBalancerSearchStreamPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerSearchStreamPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerSearchStreamPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerSearchStreamPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerSearchStreamPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerSearchStreamPrivateRequestValidationError) ErrorName() string {
	return "LoadBalancerSearchStreamPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerSearchStreamPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerSearchStreamPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerSearchStreamPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerSearchStreamPrivateRequestValidationError{}

// Validate checks the field values on LoadBalancerWatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerWatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerWatchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerWatchRequestMultiError, or nil if none found.
func (m *LoadBalancerWatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerWatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return LoadBalancerWatchRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerWatchRequestMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerWatchRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerWatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerWatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerWatchRequestMultiError) AllErrors() []error { return m }

// LoadBalancerWatchRequestValidationError is the validation error returned by
// LoadBalancerWatchRequest.Validate if the designated constraints aren't met.
type LoadBalancerWatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerWatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerWatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerWatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerWatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerWatchRequestValidationError) ErrorName() string {
	return "LoadBalancerWatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerWatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerWatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerWatchRequestValidationError{}

// Validate checks the field values on LoadBalancerWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerWatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerWatchResponseMultiError, or nil if none found.
func (m *LoadBalancerWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerWatchResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerWatchResponseMultiError(errors)
	}

	return nil
}

// LoadBalancerWatchResponseMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerWatchResponse.ValidateAll() if the
// designated constraints aren't met.
type LoadBalancerWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerWatchResponseMultiError) AllErrors() []error { return m }

// LoadBalancerWatchResponseValidationError is the validation error returned by
// LoadBalancerWatchResponse.Validate if the designated constraints aren't met.
type LoadBalancerWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerWatchResponseValidationError) ErrorName() string {
	return "LoadBalancerWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerWatchResponseValidationError{}

// Validate checks the field values on InstanceCreatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceCreatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceCreatePrivateRequestMultiError, or nil if none found.
func (m *InstanceCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// InstanceCreatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceCreatePrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceCreatePrivateRequestMultiError) AllErrors() []error { return m }

// InstanceCreatePrivateRequestValidationError is the validation error returned
// by InstanceCreatePrivateRequest.Validate if the designated constraints
// aren't met.
type InstanceCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceCreatePrivateRequestValidationError) ErrorName() string {
	return "InstanceCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceCreatePrivateRequestValidationError{}

// Validate checks the field values on InstanceMetadataCreatePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceMetadataCreatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceMetadataCreatePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstanceMetadataCreatePrivateMultiError, or nil if none found.
func (m *InstanceMetadataCreatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceMetadataCreatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for Labels

	// no validation rules for SkipQuotaCheck

	if len(errors) > 0 {
		return InstanceMetadataCreatePrivateMultiError(errors)
	}

	return nil
}

// InstanceMetadataCreatePrivateMultiError is an error wrapping multiple
// validation errors returned by InstanceMetadataCreatePrivate.ValidateAll()
// if the designated constraints aren't met.
type InstanceMetadataCreatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMetadataCreatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMetadataCreatePrivateMultiError) AllErrors() []error { return m }

// InstanceMetadataCreatePrivateValidationError is the validation error
// returned by InstanceMetadataCreatePrivate.Validate if the designated
// constraints aren't met.
type InstanceMetadataCreatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceMetadataCreatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceMetadataCreatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceMetadataCreatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceMetadataCreatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceMetadataCreatePrivateValidationError) ErrorName() string {
	return "InstanceMetadataCreatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceMetadataCreatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceMetadataCreatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceMetadataCreatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceMetadataCreatePrivateValidationError{}

// Validate checks the field values on InstanceCreateMultiplePrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *InstanceCreateMultiplePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceCreateMultiplePrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InstanceCreateMultiplePrivateRequestMultiError, or nil if none found.
func (m *InstanceCreateMultiplePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceCreateMultiplePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceCreateMultiplePrivateRequestValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceCreateMultiplePrivateRequestValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceCreateMultiplePrivateRequestValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return InstanceCreateMultiplePrivateRequestMultiError(errors)
	}

	return nil
}

// InstanceCreateMultiplePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// InstanceCreateMultiplePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceCreateMultiplePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceCreateMultiplePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceCreateMultiplePrivateRequestMultiError) AllErrors() []error { return m }

// InstanceCreateMultiplePrivateRequestValidationError is the validation error
// returned by InstanceCreateMultiplePrivateRequest.Validate if the designated
// constraints aren't met.
type InstanceCreateMultiplePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceCreateMultiplePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceCreateMultiplePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceCreateMultiplePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceCreateMultiplePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceCreateMultiplePrivateRequestValidationError) ErrorName() string {
	return "InstanceCreateMultiplePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceCreateMultiplePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceCreateMultiplePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceCreateMultiplePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceCreateMultiplePrivateRequestValidationError{}

// Validate checks the field values on InstanceCreateMultiplePrivateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *InstanceCreateMultiplePrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceCreateMultiplePrivateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InstanceCreateMultiplePrivateResponseMultiError, or nil if none found.
func (m *InstanceCreateMultiplePrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceCreateMultiplePrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceCreateMultiplePrivateResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceCreateMultiplePrivateResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceCreateMultiplePrivateResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceCreateMultiplePrivateResponseMultiError(errors)
	}

	return nil
}

// InstanceCreateMultiplePrivateResponseMultiError is an error wrapping
// multiple validation errors returned by
// InstanceCreateMultiplePrivateResponse.ValidateAll() if the designated
// constraints aren't met.
type InstanceCreateMultiplePrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceCreateMultiplePrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceCreateMultiplePrivateResponseMultiError) AllErrors() []error { return m }

// InstanceCreateMultiplePrivateResponseValidationError is the validation error
// returned by InstanceCreateMultiplePrivateResponse.Validate if the
// designated constraints aren't met.
type InstanceCreateMultiplePrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceCreateMultiplePrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceCreateMultiplePrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceCreateMultiplePrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceCreateMultiplePrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceCreateMultiplePrivateResponseValidationError) ErrorName() string {
	return "InstanceCreateMultiplePrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceCreateMultiplePrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceCreateMultiplePrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceCreateMultiplePrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceCreateMultiplePrivateResponseValidationError{}

// Validate checks the field values on InstanceUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceUpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceUpdateStatusRequestMultiError, or nil if none found.
func (m *InstanceUpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceUpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceUpdateStatusRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceUpdateStatusRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceUpdateStatusRequestMultiError(errors)
	}

	return nil
}

// InstanceUpdateStatusRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceUpdateStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceUpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceUpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceUpdateStatusRequestMultiError) AllErrors() []error { return m }

// InstanceUpdateStatusRequestValidationError is the validation error returned
// by InstanceUpdateStatusRequest.Validate if the designated constraints
// aren't met.
type InstanceUpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceUpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceUpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceUpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceUpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceUpdateStatusRequestValidationError) ErrorName() string {
	return "InstanceUpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceUpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceUpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceUpdateStatusRequestValidationError{}

// Validate checks the field values on InstanceUpdatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceUpdatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceUpdatePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceUpdatePrivateRequestMultiError, or nil if none found.
func (m *InstanceUpdatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceUpdatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceUpdatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceUpdatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceUpdatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceUpdatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceUpdatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceUpdatePrivateRequestMultiError(errors)
	}

	return nil
}

// InstanceUpdatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceUpdatePrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceUpdatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceUpdatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceUpdatePrivateRequestMultiError) AllErrors() []error { return m }

// InstanceUpdatePrivateRequestValidationError is the validation error returned
// by InstanceUpdatePrivateRequest.Validate if the designated constraints
// aren't met.
type InstanceUpdatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceUpdatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceUpdatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceUpdatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceUpdatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceUpdatePrivateRequestValidationError) ErrorName() string {
	return "InstanceUpdatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceUpdatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceUpdatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceUpdatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceUpdatePrivateRequestValidationError{}

// Validate checks the field values on InstanceSearchPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceSearchPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceSearchPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceSearchPrivateRequestMultiError, or nil if none found.
func (m *InstanceSearchPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceSearchPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceSearchPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceSearchPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceSearchPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceSearchPrivateRequestMultiError(errors)
	}

	return nil
}

// InstanceSearchPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceSearchPrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceSearchPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceSearchPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceSearchPrivateRequestMultiError) AllErrors() []error { return m }

// InstanceSearchPrivateRequestValidationError is the validation error returned
// by InstanceSearchPrivateRequest.Validate if the designated constraints
// aren't met.
type InstanceSearchPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSearchPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSearchPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSearchPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSearchPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSearchPrivateRequestValidationError) ErrorName() string {
	return "InstanceSearchPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSearchPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSearchPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSearchPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSearchPrivateRequestValidationError{}

// Validate checks the field values on InstanceSearchPrivateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceSearchPrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceSearchPrivateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstanceSearchPrivateResponseMultiError, or nil if none found.
func (m *InstanceSearchPrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceSearchPrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceSearchPrivateResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceSearchPrivateResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceSearchPrivateResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceSearchPrivateResponseMultiError(errors)
	}

	return nil
}

// InstanceSearchPrivateResponseMultiError is an error wrapping multiple
// validation errors returned by InstanceSearchPrivateResponse.ValidateAll()
// if the designated constraints aren't met.
type InstanceSearchPrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceSearchPrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceSearchPrivateResponseMultiError) AllErrors() []error { return m }

// InstanceSearchPrivateResponseValidationError is the validation error
// returned by InstanceSearchPrivateResponse.Validate if the designated
// constraints aren't met.
type InstanceSearchPrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSearchPrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSearchPrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSearchPrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSearchPrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSearchPrivateResponseValidationError) ErrorName() string {
	return "InstanceSearchPrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSearchPrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSearchPrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSearchPrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSearchPrivateResponseValidationError{}

// Validate checks the field values on InstanceSearchStreamPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InstanceSearchStreamPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceSearchStreamPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InstanceSearchStreamPrivateRequestMultiError, or nil if none found.
func (m *InstanceSearchStreamPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceSearchStreamPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstanceSearchStreamPrivateRequestMultiError(errors)
	}

	return nil
}

// InstanceSearchStreamPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// InstanceSearchStreamPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceSearchStreamPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceSearchStreamPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceSearchStreamPrivateRequestMultiError) AllErrors() []error { return m }

// InstanceSearchStreamPrivateRequestValidationError is the validation error
// returned by InstanceSearchStreamPrivateRequest.Validate if the designated
// constraints aren't met.
type InstanceSearchStreamPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSearchStreamPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSearchStreamPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSearchStreamPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSearchStreamPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSearchStreamPrivateRequestValidationError) ErrorName() string {
	return "InstanceSearchStreamPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSearchStreamPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSearchStreamPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSearchStreamPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSearchStreamPrivateRequestValidationError{}

// Validate checks the field values on InstanceWatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceWatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceWatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceWatchRequestMultiError, or nil if none found.
func (m *InstanceWatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceWatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return InstanceWatchRequestMultiError(errors)
	}

	return nil
}

// InstanceWatchRequestMultiError is an error wrapping multiple validation
// errors returned by InstanceWatchRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceWatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceWatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceWatchRequestMultiError) AllErrors() []error { return m }

// InstanceWatchRequestValidationError is the validation error returned by
// InstanceWatchRequest.Validate if the designated constraints aren't met.
type InstanceWatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceWatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceWatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceWatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceWatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceWatchRequestValidationError) ErrorName() string {
	return "InstanceWatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceWatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceWatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceWatchRequestValidationError{}

// Validate checks the field values on InstanceWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceWatchResponseMultiError, or nil if none found.
func (m *InstanceWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceWatchResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceWatchResponseMultiError(errors)
	}

	return nil
}

// InstanceWatchResponseMultiError is an error wrapping multiple validation
// errors returned by InstanceWatchResponse.ValidateAll() if the designated
// constraints aren't met.
type InstanceWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceWatchResponseMultiError) AllErrors() []error { return m }

// InstanceWatchResponseValidationError is the validation error returned by
// InstanceWatchResponse.Validate if the designated constraints aren't met.
type InstanceWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceWatchResponseValidationError) ErrorName() string {
	return "InstanceWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceWatchResponseValidationError{}

// Validate checks the field values on InstanceRemoveFinalizerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceRemoveFinalizerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceRemoveFinalizerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstanceRemoveFinalizerRequestMultiError, or nil if none found.
func (m *InstanceRemoveFinalizerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceRemoveFinalizerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceRemoveFinalizerRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceRemoveFinalizerRequestMultiError(errors)
	}

	return nil
}

// InstanceRemoveFinalizerRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceRemoveFinalizerRequest.ValidateAll()
// if the designated constraints aren't met.
type InstanceRemoveFinalizerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceRemoveFinalizerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceRemoveFinalizerRequestMultiError) AllErrors() []error { return m }

// InstanceRemoveFinalizerRequestValidationError is the validation error
// returned by InstanceRemoveFinalizerRequest.Validate if the designated
// constraints aren't met.
type InstanceRemoveFinalizerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceRemoveFinalizerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceRemoveFinalizerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceRemoveFinalizerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceRemoveFinalizerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceRemoveFinalizerRequestValidationError) ErrorName() string {
	return "InstanceRemoveFinalizerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceRemoveFinalizerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceRemoveFinalizerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceRemoveFinalizerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceRemoveFinalizerRequestValidationError{}

// Validate checks the field values on InstanceIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceIdReferenceMultiError, or nil if none found.
func (m *InstanceIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return InstanceIdReferenceMultiError(errors)
	}

	return nil
}

// InstanceIdReferenceMultiError is an error wrapping multiple validation
// errors returned by InstanceIdReference.ValidateAll() if the designated
// constraints aren't met.
type InstanceIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceIdReferenceMultiError) AllErrors() []error { return m }

// InstanceIdReferenceValidationError is the validation error returned by
// InstanceIdReference.Validate if the designated constraints aren't met.
type InstanceIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceIdReferenceValidationError) ErrorName() string {
	return "InstanceIdReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceIdReferenceValidationError{}

// Validate checks the field values on InstancePrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstancePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstancePrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstancePrivateMultiError, or nil if none found.
func (m *InstancePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstancePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstancePrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstancePrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstancePrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstancePrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstancePrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstancePrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstancePrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstancePrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstancePrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstancePrivateMultiError(errors)
	}

	return nil
}

// InstancePrivateMultiError is an error wrapping multiple validation errors
// returned by InstancePrivate.ValidateAll() if the designated constraints
// aren't met.
type InstancePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstancePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstancePrivateMultiError) AllErrors() []error { return m }

// InstancePrivateValidationError is the validation error returned by
// InstancePrivate.Validate if the designated constraints aren't met.
type InstancePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstancePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstancePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstancePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstancePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstancePrivateValidationError) ErrorName() string { return "InstancePrivateValidationError" }

// Error satisfies the builtin error interface
func (e InstancePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstancePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstancePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstancePrivateValidationError{}

// Validate checks the field values on InstanceMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceMetadataPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceMetadataPrivateMultiError, or nil if none found.
func (m *InstanceMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceMetadataPrivateValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipQuotaCheck

	if len(errors) > 0 {
		return InstanceMetadataPrivateMultiError(errors)
	}

	return nil
}

// InstanceMetadataPrivateMultiError is an error wrapping multiple validation
// errors returned by InstanceMetadataPrivate.ValidateAll() if the designated
// constraints aren't met.
type InstanceMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMetadataPrivateMultiError) AllErrors() []error { return m }

// InstanceMetadataPrivateValidationError is the validation error returned by
// InstanceMetadataPrivate.Validate if the designated constraints aren't met.
type InstanceMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceMetadataPrivateValidationError) ErrorName() string {
	return "InstanceMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceMetadataPrivateValidationError{}

// Validate checks the field values on InstanceDeletePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceDeletePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceDeletePrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceDeletePrivateRequestMultiError, or nil if none found.
func (m *InstanceDeletePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceDeletePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceDeletePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceDeletePrivateRequestMultiError(errors)
	}

	return nil
}

// InstanceDeletePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by InstanceDeletePrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type InstanceDeletePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceDeletePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceDeletePrivateRequestMultiError) AllErrors() []error { return m }

// InstanceDeletePrivateRequestValidationError is the validation error returned
// by InstanceDeletePrivateRequest.Validate if the designated constraints
// aren't met.
type InstanceDeletePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceDeletePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceDeletePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceDeletePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceDeletePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceDeletePrivateRequestValidationError) ErrorName() string {
	return "InstanceDeletePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceDeletePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceDeletePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceDeletePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceDeletePrivateRequestValidationError{}

// Validate checks the field values on InstanceSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceSpecPrivateMultiError, or nil if none found.
func (m *InstanceSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityZone

	// no validation rules for InstanceType

	// no validation rules for MachineImage

	// no validation rules for RunStrategy

	for idx, item := range m.GetInterfaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceSpecPrivateValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceSpecPrivateValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceSpecPrivateValidationError{
					field:  fmt.Sprintf("Interfaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopologySpreadConstraints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceSpecPrivateValidationError{
						field:  fmt.Sprintf("TopologySpreadConstraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceSpecPrivateValidationError{
						field:  fmt.Sprintf("TopologySpreadConstraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceSpecPrivateValidationError{
					field:  fmt.Sprintf("TopologySpreadConstraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserData

	// no validation rules for InstanceGroup

	// no validation rules for InstanceGroupSize

	// no validation rules for QuickConnectEnabled

	if all {
		switch v := interface{}(m.GetInstanceTypeSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceSpecPrivateValidationError{
					field:  "InstanceTypeSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceSpecPrivateValidationError{
					field:  "InstanceTypeSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstanceTypeSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceSpecPrivateValidationError{
				field:  "InstanceTypeSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMachineImageSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceSpecPrivateValidationError{
					field:  "MachineImageSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceSpecPrivateValidationError{
					field:  "MachineImageSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMachineImageSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceSpecPrivateValidationError{
				field:  "MachineImageSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSshPublicKeySpecs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceSpecPrivateValidationError{
						field:  fmt.Sprintf("SshPublicKeySpecs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceSpecPrivateValidationError{
						field:  fmt.Sprintf("SshPublicKeySpecs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceSpecPrivateValidationError{
					field:  fmt.Sprintf("SshPublicKeySpecs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClusterGroupId

	// no validation rules for ClusterId

	// no validation rules for Region

	// no validation rules for NodeId

	// no validation rules for ServiceType

	// no validation rules for Partition

	// no validation rules for NetworkMode

	// no validation rules for SuperComputeGroupId

	if len(errors) > 0 {
		return InstanceSpecPrivateMultiError(errors)
	}

	return nil
}

// InstanceSpecPrivateMultiError is an error wrapping multiple validation
// errors returned by InstanceSpecPrivate.ValidateAll() if the designated
// constraints aren't met.
type InstanceSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceSpecPrivateMultiError) AllErrors() []error { return m }

// InstanceSpecPrivateValidationError is the validation error returned by
// InstanceSpecPrivate.Validate if the designated constraints aren't met.
type InstanceSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSpecPrivateValidationError) ErrorName() string {
	return "InstanceSpecPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSpecPrivateValidationError{}

// Validate checks the field values on NetworkInterfacePrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NetworkInterfacePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkInterfacePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetworkInterfacePrivateMultiError, or nil if none found.
func (m *NetworkInterfacePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkInterfacePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for VNet

	// no validation rules for DnsName

	if len(errors) > 0 {
		return NetworkInterfacePrivateMultiError(errors)
	}

	return nil
}

// NetworkInterfacePrivateMultiError is an error wrapping multiple validation
// errors returned by NetworkInterfacePrivate.ValidateAll() if the designated
// constraints aren't met.
type NetworkInterfacePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkInterfacePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkInterfacePrivateMultiError) AllErrors() []error { return m }

// NetworkInterfacePrivateValidationError is the validation error returned by
// NetworkInterfacePrivate.Validate if the designated constraints aren't met.
type NetworkInterfacePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkInterfacePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkInterfacePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkInterfacePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkInterfacePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkInterfacePrivateValidationError) ErrorName() string {
	return "NetworkInterfacePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkInterfacePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkInterfacePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkInterfacePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkInterfacePrivateValidationError{}

// Validate checks the field values on InstanceStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceStatusPrivateMultiError, or nil if none found.
func (m *InstanceStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	for idx, item := range m.GetInterfaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceStatusPrivateValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceStatusPrivateValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceStatusPrivateValidationError{
					field:  fmt.Sprintf("Interfaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSshProxy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceStatusPrivateValidationError{
					field:  "SshProxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceStatusPrivateValidationError{
					field:  "SshProxy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSshProxy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceStatusPrivateValidationError{
				field:  "SshProxy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserName

	if len(errors) > 0 {
		return InstanceStatusPrivateMultiError(errors)
	}

	return nil
}

// InstanceStatusPrivateMultiError is an error wrapping multiple validation
// errors returned by InstanceStatusPrivate.ValidateAll() if the designated
// constraints aren't met.
type InstanceStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceStatusPrivateMultiError) AllErrors() []error { return m }

// InstanceStatusPrivateValidationError is the validation error returned by
// InstanceStatusPrivate.Validate if the designated constraints aren't met.
type InstanceStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceStatusPrivateValidationError) ErrorName() string {
	return "InstanceStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceStatusPrivateValidationError{}

// Validate checks the field values on InstanceInterfaceStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceInterfaceStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceInterfaceStatusPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstanceInterfaceStatusPrivateMultiError, or nil if none found.
func (m *InstanceInterfaceStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceInterfaceStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for VNet

	// no validation rules for DnsName

	// no validation rules for PrefixLength

	// no validation rules for Subnet

	// no validation rules for Gateway

	// no validation rules for VlanId

	if len(errors) > 0 {
		return InstanceInterfaceStatusPrivateMultiError(errors)
	}

	return nil
}

// InstanceInterfaceStatusPrivateMultiError is an error wrapping multiple
// validation errors returned by InstanceInterfaceStatusPrivate.ValidateAll()
// if the designated constraints aren't met.
type InstanceInterfaceStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceInterfaceStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceInterfaceStatusPrivateMultiError) AllErrors() []error { return m }

// InstanceInterfaceStatusPrivateValidationError is the validation error
// returned by InstanceInterfaceStatusPrivate.Validate if the designated
// constraints aren't met.
type InstanceInterfaceStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceInterfaceStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceInterfaceStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceInterfaceStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceInterfaceStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceInterfaceStatusPrivateValidationError) ErrorName() string {
	return "InstanceInterfaceStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceInterfaceStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceInterfaceStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceInterfaceStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceInterfaceStatusPrivateValidationError{}

// Validate checks the field values on InstanceGroupCreatePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InstanceGroupCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupCreatePrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InstanceGroupCreatePrivateRequestMultiError, or nil if none found.
func (m *InstanceGroupCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return InstanceGroupCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// InstanceGroupCreatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// InstanceGroupCreatePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupCreatePrivateRequestMultiError) AllErrors() []error { return m }

// InstanceGroupCreatePrivateRequestValidationError is the validation error
// returned by InstanceGroupCreatePrivateRequest.Validate if the designated
// constraints aren't met.
type InstanceGroupCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupCreatePrivateRequestValidationError) ErrorName() string {
	return "InstanceGroupCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupCreatePrivateRequestValidationError{}

// Validate checks the field values on InstanceGroupMetadataCreatePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InstanceGroupMetadataCreatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupMetadataCreatePrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InstanceGroupMetadataCreatePrivateMultiError, or nil if none found.
func (m *InstanceGroupMetadataCreatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupMetadataCreatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for SkipQuotaCheck

	if len(errors) > 0 {
		return InstanceGroupMetadataCreatePrivateMultiError(errors)
	}

	return nil
}

// InstanceGroupMetadataCreatePrivateMultiError is an error wrapping multiple
// validation errors returned by
// InstanceGroupMetadataCreatePrivate.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupMetadataCreatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupMetadataCreatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupMetadataCreatePrivateMultiError) AllErrors() []error { return m }

// InstanceGroupMetadataCreatePrivateValidationError is the validation error
// returned by InstanceGroupMetadataCreatePrivate.Validate if the designated
// constraints aren't met.
type InstanceGroupMetadataCreatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupMetadataCreatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupMetadataCreatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupMetadataCreatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupMetadataCreatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupMetadataCreatePrivateValidationError) ErrorName() string {
	return "InstanceGroupMetadataCreatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupMetadataCreatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupMetadataCreatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupMetadataCreatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupMetadataCreatePrivateValidationError{}

// Validate checks the field values on InstanceGroupSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupSpecPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupSpecPrivateMultiError, or nil if none found.
func (m *InstanceGroupSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceCount

	if all {
		switch v := interface{}(m.GetInstanceSpecPrivate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupSpecPrivateValidationError{
					field:  "InstanceSpecPrivate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupSpecPrivateValidationError{
					field:  "InstanceSpecPrivate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstanceSpecPrivate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupSpecPrivateValidationError{
				field:  "InstanceSpecPrivate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupSpecPrivateValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupSpecPrivateValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupSpecPrivateValidationError{
				field:  "Placement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceGroupSpecPrivateMultiError(errors)
	}

	return nil
}

// InstanceGroupSpecPrivateMultiError is an error wrapping multiple validation
// errors returned by InstanceGroupSpecPrivate.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupSpecPrivateMultiError) AllErrors() []error { return m }

// InstanceGroupSpecPrivateValidationError is the validation error returned by
// InstanceGroupSpecPrivate.Validate if the designated constraints aren't met.
type InstanceGroupSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupSpecPrivateValidationError) ErrorName() string {
	return "InstanceGroupSpecPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupSpecPrivateValidationError{}

// Validate checks the field values on InstanceGroupPlacement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceGroupPlacement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupPlacement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceGroupPlacementMultiError, or nil if none found.
func (m *InstanceGroupPlacement) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupPlacement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstanceGroupPlacementMultiError(errors)
	}

	return nil
}

// InstanceGroupPlacementMultiError is an error wrapping multiple validation
// errors returned by InstanceGroupPlacement.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupPlacementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupPlacementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupPlacementMultiError) AllErrors() []error { return m }

// InstanceGroupPlacementValidationError is the validation error returned by
// InstanceGroupPlacement.Validate if the designated constraints aren't met.
type InstanceGroupPlacementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupPlacementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupPlacementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupPlacementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupPlacementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupPlacementValidationError) ErrorName() string {
	return "InstanceGroupPlacementValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupPlacementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupPlacement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupPlacementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupPlacementValidationError{}

// Validate checks the field values on InstanceGroupPrivateCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InstanceGroupPrivateCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceGroupPrivateCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InstanceGroupPrivateCreateResponseMultiError, or nil if none found.
func (m *InstanceGroupPrivateCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceGroupPrivateCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupPrivateCreateResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupPrivateCreateResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupPrivateCreateResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceGroupPrivateCreateResponseValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceGroupPrivateCreateResponseValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceGroupPrivateCreateResponseValidationError{
				field:  "Placement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceGroupPrivateCreateResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceGroupPrivateCreateResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceGroupPrivateCreateResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceGroupPrivateCreateResponseMultiError(errors)
	}

	return nil
}

// InstanceGroupPrivateCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// InstanceGroupPrivateCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type InstanceGroupPrivateCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceGroupPrivateCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceGroupPrivateCreateResponseMultiError) AllErrors() []error { return m }

// InstanceGroupPrivateCreateResponseValidationError is the validation error
// returned by InstanceGroupPrivateCreateResponse.Validate if the designated
// constraints aren't met.
type InstanceGroupPrivateCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceGroupPrivateCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceGroupPrivateCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceGroupPrivateCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceGroupPrivateCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceGroupPrivateCreateResponseValidationError) ErrorName() string {
	return "InstanceGroupPrivateCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceGroupPrivateCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceGroupPrivateCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceGroupPrivateCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceGroupPrivateCreateResponseValidationError{}

// Validate checks the field values on ScheduleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleRequestMultiError, or nil if none found.
func (m *ScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleRequestValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleRequestValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleRequestValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return ScheduleRequestMultiError(errors)
	}

	return nil
}

// ScheduleRequestMultiError is an error wrapping multiple validation errors
// returned by ScheduleRequest.ValidateAll() if the designated constraints
// aren't met.
type ScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleRequestMultiError) AllErrors() []error { return m }

// ScheduleRequestValidationError is the validation error returned by
// ScheduleRequest.Validate if the designated constraints aren't met.
type ScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleRequestValidationError) ErrorName() string { return "ScheduleRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleRequestValidationError{}

// Validate checks the field values on ScheduleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleResponseMultiError, or nil if none found.
func (m *ScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInstanceResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleResponseValidationError{
						field:  fmt.Sprintf("InstanceResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleResponseValidationError{
						field:  fmt.Sprintf("InstanceResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleResponseValidationError{
					field:  fmt.Sprintf("InstanceResults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ScheduleResponseMultiError(errors)
	}

	return nil
}

// ScheduleResponseMultiError is an error wrapping multiple validation errors
// returned by ScheduleResponse.ValidateAll() if the designated constraints
// aren't met.
type ScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleResponseMultiError) AllErrors() []error { return m }

// ScheduleResponseValidationError is the validation error returned by
// ScheduleResponse.Validate if the designated constraints aren't met.
type ScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleResponseValidationError) ErrorName() string { return "ScheduleResponseValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleResponseValidationError{}

// Validate checks the field values on ScheduleInstanceResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleInstanceResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleInstanceResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleInstanceResultMultiError, or nil if none found.
func (m *ScheduleInstanceResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleInstanceResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for NodeId

	// no validation rules for Partition

	// no validation rules for GroupId

	// no validation rules for NetworkMode

	// no validation rules for SuperComputeGroupId

	if len(errors) > 0 {
		return ScheduleInstanceResultMultiError(errors)
	}

	return nil
}

// ScheduleInstanceResultMultiError is an error wrapping multiple validation
// errors returned by ScheduleInstanceResult.ValidateAll() if the designated
// constraints aren't met.
type ScheduleInstanceResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleInstanceResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleInstanceResultMultiError) AllErrors() []error { return m }

// ScheduleInstanceResultValidationError is the validation error returned by
// ScheduleInstanceResult.Validate if the designated constraints aren't met.
type ScheduleInstanceResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleInstanceResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleInstanceResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleInstanceResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleInstanceResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleInstanceResultValidationError) ErrorName() string {
	return "ScheduleInstanceResultValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleInstanceResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleInstanceResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleInstanceResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleInstanceResultValidationError{}

// Validate checks the field values on CreateSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubnetRequestMultiError, or nil if none found.
func (m *CreateSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	// no validation rules for AddressSpace

	// no validation rules for Subnet

	// no validation rules for PrefixLength

	// no validation rules for Gateway

	// no validation rules for VlanId

	// no validation rules for GenerateAddressesMethod

	// no validation rules for VlanDomain

	if len(errors) > 0 {
		return CreateSubnetRequestMultiError(errors)
	}

	return nil
}

// CreateSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubnetRequestMultiError) AllErrors() []error { return m }

// CreateSubnetRequestValidationError is the validation error returned by
// CreateSubnetRequest.Validate if the designated constraints aren't met.
type CreateSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubnetRequestValidationError) ErrorName() string {
	return "CreateSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubnetRequestValidationError{}

// Validate checks the field values on CreateSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubnetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubnetResponseMultiError, or nil if none found.
func (m *CreateSubnetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubnetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSubnetResponseMultiError(errors)
	}

	return nil
}

// CreateSubnetResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSubnetResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSubnetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubnetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubnetResponseMultiError) AllErrors() []error { return m }

// CreateSubnetResponseValidationError is the validation error returned by
// CreateSubnetResponse.Validate if the designated constraints aren't met.
type CreateSubnetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubnetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubnetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubnetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubnetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubnetResponseValidationError) ErrorName() string {
	return "CreateSubnetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubnetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubnetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubnetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubnetResponseValidationError{}

// Validate checks the field values on DeleteSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubnetRequestMultiError, or nil if none found.
func (m *DeleteSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	// no validation rules for AddressSpace

	// no validation rules for Subnet

	// no validation rules for PrefixLength

	if len(errors) > 0 {
		return DeleteSubnetRequestMultiError(errors)
	}

	return nil
}

// DeleteSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubnetRequestMultiError) AllErrors() []error { return m }

// DeleteSubnetRequestValidationError is the validation error returned by
// DeleteSubnetRequest.Validate if the designated constraints aren't met.
type DeleteSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubnetRequestValidationError) ErrorName() string {
	return "DeleteSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubnetRequestValidationError{}

// Validate checks the field values on SearchSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSubnetRequestMultiError, or nil if none found.
func (m *SearchSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SearchSubnetRequestMultiError(errors)
	}

	return nil
}

// SearchSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by SearchSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSubnetRequestMultiError) AllErrors() []error { return m }

// SearchSubnetRequestValidationError is the validation error returned by
// SearchSubnetRequest.Validate if the designated constraints aren't met.
type SearchSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSubnetRequestValidationError) ErrorName() string {
	return "SearchSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSubnetRequestValidationError{}

// Validate checks the field values on ReserveSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveSubnetRequestMultiError, or nil if none found.
func (m *ReserveSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubnetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReserveSubnetRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReserveSubnetRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubnetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReserveSubnetRequestValidationError{
				field:  "SubnetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReserveSubnetRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReserveSubnetRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReserveSubnetRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReserveSubnetRequestMultiError(errors)
	}

	return nil
}

// ReserveSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type ReserveSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveSubnetRequestMultiError) AllErrors() []error { return m }

// ReserveSubnetRequestValidationError is the validation error returned by
// ReserveSubnetRequest.Validate if the designated constraints aren't met.
type ReserveSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveSubnetRequestValidationError) ErrorName() string {
	return "ReserveSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveSubnetRequestValidationError{}

// Validate checks the field values on ReleaseSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseSubnetRequestMultiError, or nil if none found.
func (m *ReleaseSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubnetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseSubnetRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseSubnetRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubnetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseSubnetRequestValidationError{
				field:  "SubnetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseSubnetRequestMultiError(errors)
	}

	return nil
}

// ReleaseSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseSubnetRequestMultiError) AllErrors() []error { return m }

// ReleaseSubnetRequestValidationError is the validation error returned by
// ReleaseSubnetRequest.Validate if the designated constraints aren't met.
type ReleaseSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseSubnetRequestValidationError) ErrorName() string {
	return "ReleaseSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseSubnetRequestValidationError{}

// Validate checks the field values on SubnetReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubnetReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetReferenceMultiError, or nil if none found.
func (m *SubnetReference) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubnetConsumerId

	if len(errors) > 0 {
		return SubnetReferenceMultiError(errors)
	}

	return nil
}

// SubnetReferenceMultiError is an error wrapping multiple validation errors
// returned by SubnetReference.ValidateAll() if the designated constraints
// aren't met.
type SubnetReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetReferenceMultiError) AllErrors() []error { return m }

// SubnetReferenceValidationError is the validation error returned by
// SubnetReference.Validate if the designated constraints aren't met.
type SubnetReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetReferenceValidationError) ErrorName() string { return "SubnetReferenceValidationError" }

// Error satisfies the builtin error interface
func (e SubnetReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetReferenceValidationError{}

// Validate checks the field values on Subnet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subnet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subnet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SubnetMultiError, or nil if none found.
func (m *Subnet) ValidateAll() error {
	return m.validate(true)
}

func (m *Subnet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	// no validation rules for AddressSpace

	// no validation rules for Subnet

	// no validation rules for PrefixLength

	// no validation rules for Gateway

	// no validation rules for VlanId

	// no validation rules for VlanDomain

	// no validation rules for SubnetConsumerId

	if len(errors) > 0 {
		return SubnetMultiError(errors)
	}

	return nil
}

// SubnetMultiError is an error wrapping multiple validation errors returned by
// Subnet.ValidateAll() if the designated constraints aren't met.
type SubnetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetMultiError) AllErrors() []error { return m }

// SubnetValidationError is the validation error returned by Subnet.Validate if
// the designated constraints aren't met.
type SubnetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetValidationError) ErrorName() string { return "SubnetValidationError" }

// Error satisfies the builtin error interface
func (e SubnetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetValidationError{}

// Validate checks the field values on ReserveAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveAddressRequestMultiError, or nil if none found.
func (m *ReserveAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubnetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReserveAddressRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReserveAddressRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubnetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReserveAddressRequestValidationError{
				field:  "SubnetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddressReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReserveAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReserveAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReserveAddressRequestValidationError{
				field:  "AddressReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReserveAddressRequestMultiError(errors)
	}

	return nil
}

// ReserveAddressRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type ReserveAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveAddressRequestMultiError) AllErrors() []error { return m }

// ReserveAddressRequestValidationError is the validation error returned by
// ReserveAddressRequest.Validate if the designated constraints aren't met.
type ReserveAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveAddressRequestValidationError) ErrorName() string {
	return "ReserveAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveAddressRequestValidationError{}

// Validate checks the field values on ReleaseAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseAddressRequestMultiError, or nil if none found.
func (m *ReleaseAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubnetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseAddressRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseAddressRequestValidationError{
					field:  "SubnetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubnetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseAddressRequestValidationError{
				field:  "SubnetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddressReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseAddressRequestValidationError{
				field:  "AddressReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseAddressRequestMultiError(errors)
	}

	return nil
}

// ReleaseAddressRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseAddressRequestMultiError) AllErrors() []error { return m }

// ReleaseAddressRequestValidationError is the validation error returned by
// ReleaseAddressRequest.Validate if the designated constraints aren't met.
type ReleaseAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseAddressRequestValidationError) ErrorName() string {
	return "ReleaseAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseAddressRequestValidationError{}

// Validate checks the field values on AddressReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddressReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressReferenceMultiError, or nil if none found.
func (m *AddressReference) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressConsumerId

	// no validation rules for Address

	if len(errors) > 0 {
		return AddressReferenceMultiError(errors)
	}

	return nil
}

// AddressReferenceMultiError is an error wrapping multiple validation errors
// returned by AddressReference.ValidateAll() if the designated constraints
// aren't met.
type AddressReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressReferenceMultiError) AllErrors() []error { return m }

// AddressReferenceValidationError is the validation error returned by
// AddressReference.Validate if the designated constraints aren't met.
type AddressReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressReferenceValidationError) ErrorName() string { return "AddressReferenceValidationError" }

// Error satisfies the builtin error interface
func (e AddressReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressReferenceValidationError{}

// Validate checks the field values on ReserveAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveAddressResponseMultiError, or nil if none found.
func (m *ReserveAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return ReserveAddressResponseMultiError(errors)
	}

	return nil
}

// ReserveAddressResponseMultiError is an error wrapping multiple validation
// errors returned by ReserveAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type ReserveAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveAddressResponseMultiError) AllErrors() []error { return m }

// ReserveAddressResponseValidationError is the validation error returned by
// ReserveAddressResponse.Validate if the designated constraints aren't met.
type ReserveAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveAddressResponseValidationError) ErrorName() string {
	return "ReserveAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveAddressResponseValidationError{}

// Validate checks the field values on SubnetStatisticsRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubnetStatisticsRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubnetStatisticsRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubnetStatisticsRecordMultiError, or nil if none found.
func (m *SubnetStatisticsRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *SubnetStatisticsRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	// no validation rules for AddressSpace

	// no validation rules for PrefixLength

	// no validation rules for VlanDomain

	// no validation rules for TotalSubnets

	// no validation rules for TotalConsumedSubnets

	if len(errors) > 0 {
		return SubnetStatisticsRecordMultiError(errors)
	}

	return nil
}

// SubnetStatisticsRecordMultiError is an error wrapping multiple validation
// errors returned by SubnetStatisticsRecord.ValidateAll() if the designated
// constraints aren't met.
type SubnetStatisticsRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubnetStatisticsRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubnetStatisticsRecordMultiError) AllErrors() []error { return m }

// SubnetStatisticsRecordValidationError is the validation error returned by
// SubnetStatisticsRecord.Validate if the designated constraints aren't met.
type SubnetStatisticsRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetStatisticsRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetStatisticsRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetStatisticsRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetStatisticsRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetStatisticsRecordValidationError) ErrorName() string {
	return "SubnetStatisticsRecordValidationError"
}

// Error satisfies the builtin error interface
func (e SubnetStatisticsRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetStatisticsRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetStatisticsRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetStatisticsRecordValidationError{}

// Validate checks the field values on GetSubnetStatisticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubnetStatisticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubnetStatisticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubnetStatisticsResponseMultiError, or nil if none found.
func (m *GetSubnetStatisticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubnetStatisticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubnetStatistics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubnetStatisticsResponseValidationError{
						field:  fmt.Sprintf("SubnetStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubnetStatisticsResponseValidationError{
						field:  fmt.Sprintf("SubnetStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubnetStatisticsResponseValidationError{
					field:  fmt.Sprintf("SubnetStatistics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubnetStatisticsResponseMultiError(errors)
	}

	return nil
}

// GetSubnetStatisticsResponseMultiError is an error wrapping multiple
// validation errors returned by GetSubnetStatisticsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSubnetStatisticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubnetStatisticsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubnetStatisticsResponseMultiError) AllErrors() []error { return m }

// GetSubnetStatisticsResponseValidationError is the validation error returned
// by GetSubnetStatisticsResponse.Validate if the designated constraints
// aren't met.
type GetSubnetStatisticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubnetStatisticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubnetStatisticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubnetStatisticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubnetStatisticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubnetStatisticsResponseValidationError) ErrorName() string {
	return "GetSubnetStatisticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubnetStatisticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubnetStatisticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubnetStatisticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubnetStatisticsResponseValidationError{}

// Validate checks the field values on VNetReserveSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetReserveSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetReserveSubnetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetReserveSubnetRequestMultiError, or nil if none found.
func (m *VNetReserveSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetReserveSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVNetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetReserveSubnetRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetReserveSubnetRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVNetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetReserveSubnetRequestValidationError{
				field:  "VNetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VlanDomain

	// no validation rules for AddressSpace

	// no validation rules for MaximumPrefixLength

	if len(errors) > 0 {
		return VNetReserveSubnetRequestMultiError(errors)
	}

	return nil
}

// VNetReserveSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by VNetReserveSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type VNetReserveSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetReserveSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetReserveSubnetRequestMultiError) AllErrors() []error { return m }

// VNetReserveSubnetRequestValidationError is the validation error returned by
// VNetReserveSubnetRequest.Validate if the designated constraints aren't met.
type VNetReserveSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetReserveSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetReserveSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetReserveSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetReserveSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetReserveSubnetRequestValidationError) ErrorName() string {
	return "VNetReserveSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VNetReserveSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetReserveSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetReserveSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetReserveSubnetRequestValidationError{}

// Validate checks the field values on VNetReleaseSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetReleaseSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetReleaseSubnetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetReleaseSubnetRequestMultiError, or nil if none found.
func (m *VNetReleaseSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetReleaseSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVNetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetReleaseSubnetRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetReleaseSubnetRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVNetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetReleaseSubnetRequestValidationError{
				field:  "VNetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetReleaseSubnetRequestMultiError(errors)
	}

	return nil
}

// VNetReleaseSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by VNetReleaseSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type VNetReleaseSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetReleaseSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetReleaseSubnetRequestMultiError) AllErrors() []error { return m }

// VNetReleaseSubnetRequestValidationError is the validation error returned by
// VNetReleaseSubnetRequest.Validate if the designated constraints aren't met.
type VNetReleaseSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetReleaseSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetReleaseSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetReleaseSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetReleaseSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetReleaseSubnetRequestValidationError) ErrorName() string {
	return "VNetReleaseSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VNetReleaseSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetReleaseSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetReleaseSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetReleaseSubnetRequestValidationError{}

// Validate checks the field values on VNetReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VNetReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VNetReferenceMultiError, or
// nil if none found.
func (m *VNetReference) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	if len(errors) > 0 {
		return VNetReferenceMultiError(errors)
	}

	return nil
}

// VNetReferenceMultiError is an error wrapping multiple validation errors
// returned by VNetReference.ValidateAll() if the designated constraints
// aren't met.
type VNetReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetReferenceMultiError) AllErrors() []error { return m }

// VNetReferenceValidationError is the validation error returned by
// VNetReference.Validate if the designated constraints aren't met.
type VNetReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetReferenceValidationError) ErrorName() string { return "VNetReferenceValidationError" }

// Error satisfies the builtin error interface
func (e VNetReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetReferenceValidationError{}

// Validate checks the field values on VNetPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VNetPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VNetPrivateMultiError, or
// nil if none found.
func (m *VNetPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetPrivateMultiError(errors)
	}

	return nil
}

// VNetPrivateMultiError is an error wrapping multiple validation errors
// returned by VNetPrivate.ValidateAll() if the designated constraints aren't met.
type VNetPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetPrivateMultiError) AllErrors() []error { return m }

// VNetPrivateValidationError is the validation error returned by
// VNetPrivate.Validate if the designated constraints aren't met.
type VNetPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetPrivateValidationError) ErrorName() string { return "VNetPrivateValidationError" }

// Error satisfies the builtin error interface
func (e VNetPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetPrivateValidationError{}

// Validate checks the field values on VNetSpecPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VNetSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetSpecPrivateMultiError, or nil if none found.
func (m *VNetSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	// no validation rules for Subnet

	// no validation rules for PrefixLength

	// no validation rules for Gateway

	// no validation rules for VlanId

	// no validation rules for VlanDomain

	// no validation rules for AddressSpace

	if len(errors) > 0 {
		return VNetSpecPrivateMultiError(errors)
	}

	return nil
}

// VNetSpecPrivateMultiError is an error wrapping multiple validation errors
// returned by VNetSpecPrivate.ValidateAll() if the designated constraints
// aren't met.
type VNetSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetSpecPrivateMultiError) AllErrors() []error { return m }

// VNetSpecPrivateValidationError is the validation error returned by
// VNetSpecPrivate.Validate if the designated constraints aren't met.
type VNetSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetSpecPrivateValidationError) ErrorName() string { return "VNetSpecPrivateValidationError" }

// Error satisfies the builtin error interface
func (e VNetSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetSpecPrivateValidationError{}

// Validate checks the field values on VNetReserveAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetReserveAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetReserveAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetReserveAddressRequestMultiError, or nil if none found.
func (m *VNetReserveAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetReserveAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVNetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetReserveAddressRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetReserveAddressRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVNetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetReserveAddressRequestValidationError{
				field:  "VNetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddressReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetReserveAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetReserveAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetReserveAddressRequestValidationError{
				field:  "AddressReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetReserveAddressRequestMultiError(errors)
	}

	return nil
}

// VNetReserveAddressRequestMultiError is an error wrapping multiple validation
// errors returned by VNetReserveAddressRequest.ValidateAll() if the
// designated constraints aren't met.
type VNetReserveAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetReserveAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetReserveAddressRequestMultiError) AllErrors() []error { return m }

// VNetReserveAddressRequestValidationError is the validation error returned by
// VNetReserveAddressRequest.Validate if the designated constraints aren't met.
type VNetReserveAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetReserveAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetReserveAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetReserveAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetReserveAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetReserveAddressRequestValidationError) ErrorName() string {
	return "VNetReserveAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VNetReserveAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetReserveAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetReserveAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetReserveAddressRequestValidationError{}

// Validate checks the field values on VNetReleaseAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetReleaseAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetReleaseAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetReleaseAddressRequestMultiError, or nil if none found.
func (m *VNetReleaseAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetReleaseAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVNetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetReleaseAddressRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetReleaseAddressRequestValidationError{
					field:  "VNetReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVNetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetReleaseAddressRequestValidationError{
				field:  "VNetReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddressReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VNetReleaseAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VNetReleaseAddressRequestValidationError{
					field:  "AddressReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VNetReleaseAddressRequestValidationError{
				field:  "AddressReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VNetReleaseAddressRequestMultiError(errors)
	}

	return nil
}

// VNetReleaseAddressRequestMultiError is an error wrapping multiple validation
// errors returned by VNetReleaseAddressRequest.ValidateAll() if the
// designated constraints aren't met.
type VNetReleaseAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetReleaseAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetReleaseAddressRequestMultiError) AllErrors() []error { return m }

// VNetReleaseAddressRequestValidationError is the validation error returned by
// VNetReleaseAddressRequest.Validate if the designated constraints aren't met.
type VNetReleaseAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetReleaseAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetReleaseAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetReleaseAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetReleaseAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetReleaseAddressRequestValidationError) ErrorName() string {
	return "VNetReleaseAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VNetReleaseAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetReleaseAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetReleaseAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetReleaseAddressRequestValidationError{}

// Validate checks the field values on VNetAddressReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetAddressReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetAddressReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetAddressReferenceMultiError, or nil if none found.
func (m *VNetAddressReference) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetAddressReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressConsumerId

	// no validation rules for Address

	if len(errors) > 0 {
		return VNetAddressReferenceMultiError(errors)
	}

	return nil
}

// VNetAddressReferenceMultiError is an error wrapping multiple validation
// errors returned by VNetAddressReference.ValidateAll() if the designated
// constraints aren't met.
type VNetAddressReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetAddressReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetAddressReferenceMultiError) AllErrors() []error { return m }

// VNetAddressReferenceValidationError is the validation error returned by
// VNetAddressReference.Validate if the designated constraints aren't met.
type VNetAddressReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetAddressReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetAddressReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetAddressReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetAddressReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetAddressReferenceValidationError) ErrorName() string {
	return "VNetAddressReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e VNetAddressReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetAddressReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetAddressReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetAddressReferenceValidationError{}

// Validate checks the field values on VNetReserveAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetReserveAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetReserveAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetReserveAddressResponseMultiError, or nil if none found.
func (m *VNetReserveAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetReserveAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return VNetReserveAddressResponseMultiError(errors)
	}

	return nil
}

// VNetReserveAddressResponseMultiError is an error wrapping multiple
// validation errors returned by VNetReserveAddressResponse.ValidateAll() if
// the designated constraints aren't met.
type VNetReserveAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetReserveAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetReserveAddressResponseMultiError) AllErrors() []error { return m }

// VNetReserveAddressResponseValidationError is the validation error returned
// by VNetReserveAddressResponse.Validate if the designated constraints aren't met.
type VNetReserveAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetReserveAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetReserveAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetReserveAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetReserveAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetReserveAddressResponseValidationError) ErrorName() string {
	return "VNetReserveAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VNetReserveAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetReserveAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetReserveAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetReserveAddressResponseValidationError{}

// Validate checks the field values on LoadBalancerCreatePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadBalancerCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerCreatePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LoadBalancerCreatePrivateRequestMultiError, or nil if none found.
func (m *LoadBalancerCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerCreatePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// LoadBalancerCreatePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerCreatePrivateRequestMultiError) AllErrors() []error { return m }

// LoadBalancerCreatePrivateRequestValidationError is the validation error
// returned by LoadBalancerCreatePrivateRequest.Validate if the designated
// constraints aren't met.
type LoadBalancerCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerCreatePrivateRequestValidationError) ErrorName() string {
	return "LoadBalancerCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerCreatePrivateRequestValidationError{}

// Validate checks the field values on LoadBalancerMetadataCreatePrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadBalancerMetadataCreatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerMetadataCreatePrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadBalancerMetadataCreatePrivateMultiError, or nil if none found.
func (m *LoadBalancerMetadataCreatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerMetadataCreatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for Labels

	// no validation rules for SkipQuotaCheck

	if len(errors) > 0 {
		return LoadBalancerMetadataCreatePrivateMultiError(errors)
	}

	return nil
}

// LoadBalancerMetadataCreatePrivateMultiError is an error wrapping multiple
// validation errors returned by
// LoadBalancerMetadataCreatePrivate.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerMetadataCreatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMetadataCreatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMetadataCreatePrivateMultiError) AllErrors() []error { return m }

// LoadBalancerMetadataCreatePrivateValidationError is the validation error
// returned by LoadBalancerMetadataCreatePrivate.Validate if the designated
// constraints aren't met.
type LoadBalancerMetadataCreatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerMetadataCreatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerMetadataCreatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerMetadataCreatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerMetadataCreatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerMetadataCreatePrivateValidationError) ErrorName() string {
	return "LoadBalancerMetadataCreatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerMetadataCreatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerMetadataCreatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerMetadataCreatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerMetadataCreatePrivateValidationError{}

// Validate checks the field values on LoadBalancerUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerUpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerUpdateStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LoadBalancerUpdateStatusRequestMultiError, or nil if none found.
func (m *LoadBalancerUpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerUpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerUpdateStatusRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerUpdateStatusRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerUpdateStatusRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerUpdateStatusRequestMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerUpdateStatusRequest.ValidateAll()
// if the designated constraints aren't met.
type LoadBalancerUpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerUpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerUpdateStatusRequestMultiError) AllErrors() []error { return m }

// LoadBalancerUpdateStatusRequestValidationError is the validation error
// returned by LoadBalancerUpdateStatusRequest.Validate if the designated
// constraints aren't met.
type LoadBalancerUpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerUpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerUpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerUpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerUpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerUpdateStatusRequestValidationError) ErrorName() string {
	return "LoadBalancerUpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerUpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerUpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerUpdateStatusRequestValidationError{}

// Validate checks the field values on LoadBalancerPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerPrivateMultiError, or nil if none found.
func (m *LoadBalancerPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerPrivateMultiError(errors)
	}

	return nil
}

// LoadBalancerPrivateMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerPrivate.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerPrivateMultiError) AllErrors() []error { return m }

// LoadBalancerPrivateValidationError is the validation error returned by
// LoadBalancerPrivate.Validate if the designated constraints aren't met.
type LoadBalancerPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerPrivateValidationError) ErrorName() string {
	return "LoadBalancerPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerPrivateValidationError{}

// Validate checks the field values on LoadBalancerMetadataPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerMetadataPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerMetadataPrivateMultiError, or nil if none found.
func (m *LoadBalancerMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerMetadataPrivateValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerMetadataPrivateMultiError(errors)
	}

	return nil
}

// LoadBalancerMetadataPrivateMultiError is an error wrapping multiple
// validation errors returned by LoadBalancerMetadataPrivate.ValidateAll() if
// the designated constraints aren't met.
type LoadBalancerMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerMetadataPrivateMultiError) AllErrors() []error { return m }

// LoadBalancerMetadataPrivateValidationError is the validation error returned
// by LoadBalancerMetadataPrivate.Validate if the designated constraints
// aren't met.
type LoadBalancerMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerMetadataPrivateValidationError) ErrorName() string {
	return "LoadBalancerMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerMetadataPrivateValidationError{}

// Validate checks the field values on LoadBalancerRemoveFinalizerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadBalancerRemoveFinalizerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerRemoveFinalizerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadBalancerRemoveFinalizerRequestMultiError, or nil if none found.
func (m *LoadBalancerRemoveFinalizerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerRemoveFinalizerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerRemoveFinalizerRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerRemoveFinalizerRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerRemoveFinalizerRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerRemoveFinalizerRequestMultiError is an error wrapping multiple
// validation errors returned by
// LoadBalancerRemoveFinalizerRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerRemoveFinalizerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerRemoveFinalizerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerRemoveFinalizerRequestMultiError) AllErrors() []error { return m }

// LoadBalancerRemoveFinalizerRequestValidationError is the validation error
// returned by LoadBalancerRemoveFinalizerRequest.Validate if the designated
// constraints aren't met.
type LoadBalancerRemoveFinalizerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerRemoveFinalizerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerRemoveFinalizerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerRemoveFinalizerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerRemoveFinalizerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerRemoveFinalizerRequestValidationError) ErrorName() string {
	return "LoadBalancerRemoveFinalizerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerRemoveFinalizerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerRemoveFinalizerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerRemoveFinalizerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerRemoveFinalizerRequestValidationError{}

// Validate checks the field values on LoadBalancerIdReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerIdReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerIdReferenceMultiError, or nil if none found.
func (m *LoadBalancerIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return LoadBalancerIdReferenceMultiError(errors)
	}

	return nil
}

// LoadBalancerIdReferenceMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerIdReference.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerIdReferenceMultiError) AllErrors() []error { return m }

// LoadBalancerIdReferenceValidationError is the validation error returned by
// LoadBalancerIdReference.Validate if the designated constraints aren't met.
type LoadBalancerIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerIdReferenceValidationError) ErrorName() string {
	return "LoadBalancerIdReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerIdReferenceValidationError{}

// Validate checks the field values on LoadBalancerDeletePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadBalancerDeletePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerDeletePrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LoadBalancerDeletePrivateRequestMultiError, or nil if none found.
func (m *LoadBalancerDeletePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerDeletePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerDeletePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerDeletePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerDeletePrivateRequestMultiError(errors)
	}

	return nil
}

// LoadBalancerDeletePrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// LoadBalancerDeletePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerDeletePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerDeletePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerDeletePrivateRequestMultiError) AllErrors() []error { return m }

// LoadBalancerDeletePrivateRequestValidationError is the validation error
// returned by LoadBalancerDeletePrivateRequest.Validate if the designated
// constraints aren't met.
type LoadBalancerDeletePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerDeletePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerDeletePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerDeletePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerDeletePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerDeletePrivateRequestValidationError) ErrorName() string {
	return "LoadBalancerDeletePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerDeletePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerDeletePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerDeletePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerDeletePrivateRequestValidationError{}

// Validate checks the field values on LoadBalancerSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerSpecPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerSpecPrivateMultiError, or nil if none found.
func (m *LoadBalancerSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetListeners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerSpecPrivateValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerSpecPrivateValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerSpecPrivateValidationError{
					field:  fmt.Sprintf("Listeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecurity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerSpecPrivateValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerSpecPrivateValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerSpecPrivateValidationError{
				field:  "Security",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadBalancerSpecPrivateMultiError(errors)
	}

	return nil
}

// LoadBalancerSpecPrivateMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerSpecPrivate.ValidateAll() if the designated
// constraints aren't met.
type LoadBalancerSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerSpecPrivateMultiError) AllErrors() []error { return m }

// LoadBalancerSpecPrivateValidationError is the validation error returned by
// LoadBalancerSpecPrivate.Validate if the designated constraints aren't met.
type LoadBalancerSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerSpecPrivateValidationError) ErrorName() string {
	return "LoadBalancerSpecPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerSpecPrivateValidationError{}

// Validate checks the field values on LoadBalancerStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadBalancerStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadBalancerStatusPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadBalancerStatusPrivateMultiError, or nil if none found.
func (m *LoadBalancerStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadBalancerStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadBalancerStatusPrivateValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadBalancerStatusPrivateValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadBalancerStatusPrivateValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetListeners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadBalancerStatusPrivateValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadBalancerStatusPrivateValidationError{
						field:  fmt.Sprintf("Listeners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadBalancerStatusPrivateValidationError{
					field:  fmt.Sprintf("Listeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	// no validation rules for Vip

	// no validation rules for Message

	if len(errors) > 0 {
		return LoadBalancerStatusPrivateMultiError(errors)
	}

	return nil
}

// LoadBalancerStatusPrivateMultiError is an error wrapping multiple validation
// errors returned by LoadBalancerStatusPrivate.ValidateAll() if the
// designated constraints aren't met.
type LoadBalancerStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadBalancerStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadBalancerStatusPrivateMultiError) AllErrors() []error { return m }

// LoadBalancerStatusPrivateValidationError is the validation error returned by
// LoadBalancerStatusPrivate.Validate if the designated constraints aren't met.
type LoadBalancerStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerStatusPrivateValidationError) ErrorName() string {
	return "LoadBalancerStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadBalancerStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancerStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerStatusPrivateValidationError{}

// Validate checks the field values on ReserveSubnetRequest_Spec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveSubnetRequest_Spec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveSubnetRequest_Spec with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveSubnetRequest_SpecMultiError, or nil if none found.
func (m *ReserveSubnetRequest_Spec) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveSubnetRequest_Spec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AvailabilityZone

	// no validation rules for PrefixLengthHint

	// no validation rules for VlanDomain

	// no validation rules for AddressSpace

	if len(errors) > 0 {
		return ReserveSubnetRequest_SpecMultiError(errors)
	}

	return nil
}

// ReserveSubnetRequest_SpecMultiError is an error wrapping multiple validation
// errors returned by ReserveSubnetRequest_Spec.ValidateAll() if the
// designated constraints aren't met.
type ReserveSubnetRequest_SpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveSubnetRequest_SpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveSubnetRequest_SpecMultiError) AllErrors() []error { return m }

// ReserveSubnetRequest_SpecValidationError is the validation error returned by
// ReserveSubnetRequest_Spec.Validate if the designated constraints aren't met.
type ReserveSubnetRequest_SpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveSubnetRequest_SpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveSubnetRequest_SpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveSubnetRequest_SpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveSubnetRequest_SpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveSubnetRequest_SpecValidationError) ErrorName() string {
	return "ReserveSubnetRequest_SpecValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveSubnetRequest_SpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveSubnetRequest_Spec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveSubnetRequest_SpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveSubnetRequest_SpecValidationError{}

// Validate checks the field values on VNetPrivate_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VNetPrivate_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VNetPrivate_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VNetPrivate_MetadataMultiError, or nil if none found.
func (m *VNetPrivate_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VNetPrivate_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return VNetPrivate_MetadataMultiError(errors)
	}

	return nil
}

// VNetPrivate_MetadataMultiError is an error wrapping multiple validation
// errors returned by VNetPrivate_Metadata.ValidateAll() if the designated
// constraints aren't met.
type VNetPrivate_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VNetPrivate_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VNetPrivate_MetadataMultiError) AllErrors() []error { return m }

// VNetPrivate_MetadataValidationError is the validation error returned by
// VNetPrivate_Metadata.Validate if the designated constraints aren't met.
type VNetPrivate_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VNetPrivate_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VNetPrivate_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VNetPrivate_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VNetPrivate_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VNetPrivate_MetadataValidationError) ErrorName() string {
	return "VNetPrivate_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e VNetPrivate_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVNetPrivate_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VNetPrivate_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VNetPrivate_MetadataValidationError{}
