// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cloudaccount-enroll.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CloudAccountEnrollRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountEnrollRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountEnrollRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountEnrollRequestMultiError, or nil if none found.
func (m *CloudAccountEnrollRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountEnrollRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Premium

	// no validation rules for TermsStatus

	if len(errors) > 0 {
		return CloudAccountEnrollRequestMultiError(errors)
	}

	return nil
}

// CloudAccountEnrollRequestMultiError is an error wrapping multiple validation
// errors returned by CloudAccountEnrollRequest.ValidateAll() if the
// designated constraints aren't met.
type CloudAccountEnrollRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountEnrollRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountEnrollRequestMultiError) AllErrors() []error { return m }

// CloudAccountEnrollRequestValidationError is the validation error returned by
// CloudAccountEnrollRequest.Validate if the designated constraints aren't met.
type CloudAccountEnrollRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountEnrollRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountEnrollRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountEnrollRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountEnrollRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountEnrollRequestValidationError) ErrorName() string {
	return "CloudAccountEnrollRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountEnrollRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountEnrollRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountEnrollRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountEnrollRequestValidationError{}

// Validate checks the field values on CloudAccountUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountUpgradeRequestMultiError, or nil if none found.
func (m *CloudAccountUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for CloudAccountUpgradeToType

	if m.Code != nil {
		// no validation rules for Code
	}

	if len(errors) > 0 {
		return CloudAccountUpgradeRequestMultiError(errors)
	}

	return nil
}

// CloudAccountUpgradeRequestMultiError is an error wrapping multiple
// validation errors returned by CloudAccountUpgradeRequest.ValidateAll() if
// the designated constraints aren't met.
type CloudAccountUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountUpgradeRequestMultiError) AllErrors() []error { return m }

// CloudAccountUpgradeRequestValidationError is the validation error returned
// by CloudAccountUpgradeRequest.Validate if the designated constraints aren't met.
type CloudAccountUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountUpgradeRequestValidationError) ErrorName() string {
	return "CloudAccountUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountUpgradeRequestValidationError{}

// Validate checks the field values on CloudAccountUpgradeWithCreditCardRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloudAccountUpgradeWithCreditCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CloudAccountUpgradeWithCreditCardRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CloudAccountUpgradeWithCreditCardRequestMultiError, or nil if none found.
func (m *CloudAccountUpgradeWithCreditCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountUpgradeWithCreditCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for CloudAccountUpgradeToType

	if len(errors) > 0 {
		return CloudAccountUpgradeWithCreditCardRequestMultiError(errors)
	}

	return nil
}

// CloudAccountUpgradeWithCreditCardRequestMultiError is an error wrapping
// multiple validation errors returned by
// CloudAccountUpgradeWithCreditCardRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudAccountUpgradeWithCreditCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountUpgradeWithCreditCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountUpgradeWithCreditCardRequestMultiError) AllErrors() []error { return m }

// CloudAccountUpgradeWithCreditCardRequestValidationError is the validation
// error returned by CloudAccountUpgradeWithCreditCardRequest.Validate if the
// designated constraints aren't met.
type CloudAccountUpgradeWithCreditCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountUpgradeWithCreditCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountUpgradeWithCreditCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountUpgradeWithCreditCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountUpgradeWithCreditCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountUpgradeWithCreditCardRequestValidationError) ErrorName() string {
	return "CloudAccountUpgradeWithCreditCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountUpgradeWithCreditCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountUpgradeWithCreditCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountUpgradeWithCreditCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountUpgradeWithCreditCardRequestValidationError{}

// Validate checks the field values on CloudAccountEnrollResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountEnrollResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountEnrollResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountEnrollResponseMultiError, or nil if none found.
func (m *CloudAccountEnrollResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountEnrollResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Registered

	// no validation rules for HaveCloudAccount

	// no validation rules for HaveBillingAccount

	// no validation rules for Enrolled

	// no validation rules for Action

	// no validation rules for CloudAccountId

	// no validation rules for CloudAccountType

	// no validation rules for IsMember

	if len(errors) > 0 {
		return CloudAccountEnrollResponseMultiError(errors)
	}

	return nil
}

// CloudAccountEnrollResponseMultiError is an error wrapping multiple
// validation errors returned by CloudAccountEnrollResponse.ValidateAll() if
// the designated constraints aren't met.
type CloudAccountEnrollResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountEnrollResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountEnrollResponseMultiError) AllErrors() []error { return m }

// CloudAccountEnrollResponseValidationError is the validation error returned
// by CloudAccountEnrollResponse.Validate if the designated constraints aren't met.
type CloudAccountEnrollResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountEnrollResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountEnrollResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountEnrollResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountEnrollResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountEnrollResponseValidationError) ErrorName() string {
	return "CloudAccountEnrollResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountEnrollResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountEnrollResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountEnrollResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountEnrollResponseValidationError{}

// Validate checks the field values on CloudAccountUpgradeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountUpgradeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountUpgradeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountUpgradeResponseMultiError, or nil if none found.
func (m *CloudAccountUpgradeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountUpgradeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for CloudAccountId

	// no validation rules for CloudAccountType

	if len(errors) > 0 {
		return CloudAccountUpgradeResponseMultiError(errors)
	}

	return nil
}

// CloudAccountUpgradeResponseMultiError is an error wrapping multiple
// validation errors returned by CloudAccountUpgradeResponse.ValidateAll() if
// the designated constraints aren't met.
type CloudAccountUpgradeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountUpgradeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountUpgradeResponseMultiError) AllErrors() []error { return m }

// CloudAccountUpgradeResponseValidationError is the validation error returned
// by CloudAccountUpgradeResponse.Validate if the designated constraints
// aren't met.
type CloudAccountUpgradeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountUpgradeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountUpgradeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountUpgradeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountUpgradeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountUpgradeResponseValidationError) ErrorName() string {
	return "CloudAccountUpgradeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountUpgradeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountUpgradeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountUpgradeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountUpgradeResponseValidationError{}
