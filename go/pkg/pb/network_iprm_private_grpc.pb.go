// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: network_iprm_private.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPRMPrivateServiceClient is the client API for IPRMPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPRMPrivateServiceClient interface {
	// Reserve a port.
	ReservePort(ctx context.Context, in *ReservePortRequest, opts ...grpc.CallOption) (*PortPrivate, error)
	// release port.
	ReleasePort(ctx context.Context, in *ReleasePortRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List Ports as a stream.
	// This returns all non-deleted ports as messages with WatchDeltaType=Updated,
	// followed by a single WatchDeltaType=Bookmark with the last-seen resourceVersion.
	SearchStreamPrivate(ctx context.Context, in *PortSearchStreamPrivateRequest, opts ...grpc.CallOption) (IPRMPrivateService_SearchStreamPrivateClient, error)
	// Return a stream of changes to vpcs using messages with WatchDeltaType=Updated or Deleted.
	// Messages with WatchDeltaType=Bookmark and the last-seen resourceVersion will be sent periodically.
	Watch(ctx context.Context, in *PortWatchRequest, opts ...grpc.CallOption) (IPRMPrivateService_WatchClient, error)
	// Update the resource status.
	UpdateStatus(ctx context.Context, in *PortUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a Port record from DB
	GetPortPrivate(ctx context.Context, in *GetPortPrivateRequest, opts ...grpc.CallOption) (*PortPrivate, error)
	// PingPrivate always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iPRMPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPRMPrivateServiceClient(cc grpc.ClientConnInterface) IPRMPrivateServiceClient {
	return &iPRMPrivateServiceClient{cc}
}

func (c *iPRMPrivateServiceClient) ReservePort(ctx context.Context, in *ReservePortRequest, opts ...grpc.CallOption) (*PortPrivate, error) {
	out := new(PortPrivate)
	err := c.cc.Invoke(ctx, "/proto.IPRMPrivateService/ReservePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRMPrivateServiceClient) ReleasePort(ctx context.Context, in *ReleasePortRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IPRMPrivateService/ReleasePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRMPrivateServiceClient) SearchStreamPrivate(ctx context.Context, in *PortSearchStreamPrivateRequest, opts ...grpc.CallOption) (IPRMPrivateService_SearchStreamPrivateClient, error) {
	stream, err := c.cc.NewStream(ctx, &IPRMPrivateService_ServiceDesc.Streams[0], "/proto.IPRMPrivateService/SearchStreamPrivate", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPRMPrivateServiceSearchStreamPrivateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IPRMPrivateService_SearchStreamPrivateClient interface {
	Recv() (*PortWatchResponse, error)
	grpc.ClientStream
}

type iPRMPrivateServiceSearchStreamPrivateClient struct {
	grpc.ClientStream
}

func (x *iPRMPrivateServiceSearchStreamPrivateClient) Recv() (*PortWatchResponse, error) {
	m := new(PortWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iPRMPrivateServiceClient) Watch(ctx context.Context, in *PortWatchRequest, opts ...grpc.CallOption) (IPRMPrivateService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &IPRMPrivateService_ServiceDesc.Streams[1], "/proto.IPRMPrivateService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPRMPrivateServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IPRMPrivateService_WatchClient interface {
	Recv() (*PortWatchResponse, error)
	grpc.ClientStream
}

type iPRMPrivateServiceWatchClient struct {
	grpc.ClientStream
}

func (x *iPRMPrivateServiceWatchClient) Recv() (*PortWatchResponse, error) {
	m := new(PortWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iPRMPrivateServiceClient) UpdateStatus(ctx context.Context, in *PortUpdateStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IPRMPrivateService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRMPrivateServiceClient) GetPortPrivate(ctx context.Context, in *GetPortPrivateRequest, opts ...grpc.CallOption) (*PortPrivate, error) {
	out := new(PortPrivate)
	err := c.cc.Invoke(ctx, "/proto.IPRMPrivateService/GetPortPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRMPrivateServiceClient) PingPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IPRMPrivateService/PingPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPRMPrivateServiceServer is the server API for IPRMPrivateService service.
// All implementations must embed UnimplementedIPRMPrivateServiceServer
// for forward compatibility
type IPRMPrivateServiceServer interface {
	// Reserve a port.
	ReservePort(context.Context, *ReservePortRequest) (*PortPrivate, error)
	// release port.
	ReleasePort(context.Context, *ReleasePortRequest) (*emptypb.Empty, error)
	// List Ports as a stream.
	// This returns all non-deleted ports as messages with WatchDeltaType=Updated,
	// followed by a single WatchDeltaType=Bookmark with the last-seen resourceVersion.
	SearchStreamPrivate(*PortSearchStreamPrivateRequest, IPRMPrivateService_SearchStreamPrivateServer) error
	// Return a stream of changes to vpcs using messages with WatchDeltaType=Updated or Deleted.
	// Messages with WatchDeltaType=Bookmark and the last-seen resourceVersion will be sent periodically.
	Watch(*PortWatchRequest, IPRMPrivateService_WatchServer) error
	// Update the resource status.
	UpdateStatus(context.Context, *PortUpdateStatusRequest) (*emptypb.Empty, error)
	// Retrieve a Port record from DB
	GetPortPrivate(context.Context, *GetPortPrivateRequest) (*PortPrivate, error)
	// PingPrivate always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedIPRMPrivateServiceServer()
}

// UnimplementedIPRMPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIPRMPrivateServiceServer struct {
}

func (UnimplementedIPRMPrivateServiceServer) ReservePort(context.Context, *ReservePortRequest) (*PortPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReservePort not implemented")
}
func (UnimplementedIPRMPrivateServiceServer) ReleasePort(context.Context, *ReleasePortRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePort not implemented")
}
func (UnimplementedIPRMPrivateServiceServer) SearchStreamPrivate(*PortSearchStreamPrivateRequest, IPRMPrivateService_SearchStreamPrivateServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchStreamPrivate not implemented")
}
func (UnimplementedIPRMPrivateServiceServer) Watch(*PortWatchRequest, IPRMPrivateService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedIPRMPrivateServiceServer) UpdateStatus(context.Context, *PortUpdateStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedIPRMPrivateServiceServer) GetPortPrivate(context.Context, *GetPortPrivateRequest) (*PortPrivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortPrivate not implemented")
}
func (UnimplementedIPRMPrivateServiceServer) PingPrivate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPrivate not implemented")
}
func (UnimplementedIPRMPrivateServiceServer) mustEmbedUnimplementedIPRMPrivateServiceServer() {}

// UnsafeIPRMPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPRMPrivateServiceServer will
// result in compilation errors.
type UnsafeIPRMPrivateServiceServer interface {
	mustEmbedUnimplementedIPRMPrivateServiceServer()
}

func RegisterIPRMPrivateServiceServer(s grpc.ServiceRegistrar, srv IPRMPrivateServiceServer) {
	s.RegisterService(&IPRMPrivateService_ServiceDesc, srv)
}

func _IPRMPrivateService_ReservePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRMPrivateServiceServer).ReservePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IPRMPrivateService/ReservePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRMPrivateServiceServer).ReservePort(ctx, req.(*ReservePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRMPrivateService_ReleasePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRMPrivateServiceServer).ReleasePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IPRMPrivateService/ReleasePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRMPrivateServiceServer).ReleasePort(ctx, req.(*ReleasePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRMPrivateService_SearchStreamPrivate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortSearchStreamPrivateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IPRMPrivateServiceServer).SearchStreamPrivate(m, &iPRMPrivateServiceSearchStreamPrivateServer{stream})
}

type IPRMPrivateService_SearchStreamPrivateServer interface {
	Send(*PortWatchResponse) error
	grpc.ServerStream
}

type iPRMPrivateServiceSearchStreamPrivateServer struct {
	grpc.ServerStream
}

func (x *iPRMPrivateServiceSearchStreamPrivateServer) Send(m *PortWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IPRMPrivateService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IPRMPrivateServiceServer).Watch(m, &iPRMPrivateServiceWatchServer{stream})
}

type IPRMPrivateService_WatchServer interface {
	Send(*PortWatchResponse) error
	grpc.ServerStream
}

type iPRMPrivateServiceWatchServer struct {
	grpc.ServerStream
}

func (x *iPRMPrivateServiceWatchServer) Send(m *PortWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IPRMPrivateService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRMPrivateServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IPRMPrivateService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRMPrivateServiceServer).UpdateStatus(ctx, req.(*PortUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRMPrivateService_GetPortPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRMPrivateServiceServer).GetPortPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IPRMPrivateService/GetPortPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRMPrivateServiceServer).GetPortPrivate(ctx, req.(*GetPortPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRMPrivateService_PingPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRMPrivateServiceServer).PingPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IPRMPrivateService/PingPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRMPrivateServiceServer).PingPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IPRMPrivateService_ServiceDesc is the grpc.ServiceDesc for IPRMPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPRMPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IPRMPrivateService",
	HandlerType: (*IPRMPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReservePort",
			Handler:    _IPRMPrivateService_ReservePort_Handler,
		},
		{
			MethodName: "ReleasePort",
			Handler:    _IPRMPrivateService_ReleasePort_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _IPRMPrivateService_UpdateStatus_Handler,
		},
		{
			MethodName: "GetPortPrivate",
			Handler:    _IPRMPrivateService_GetPortPrivate_Handler,
		},
		{
			MethodName: "PingPrivate",
			Handler:    _IPRMPrivateService_PingPrivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchStreamPrivate",
			Handler:       _IPRMPrivateService_SearchStreamPrivate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _IPRMPrivateService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network_iprm_private.proto",
}
