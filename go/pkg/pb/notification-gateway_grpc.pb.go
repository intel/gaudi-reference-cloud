// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: notification-gateway.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationGatewayServiceClient is the client API for NotificationGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationGatewayServiceClient interface {
	// register as a event provider
	Create(ctx context.Context, in *CreateEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send email notifications
	SendEmailNotification(ctx context.Context, in *CreateEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// this will be short lived - short polling
	Read(ctx context.Context, in *EventsFilter, opts ...grpc.CallOption) (*Events, error)
	// to subscribe to long polling
	Subscribe(ctx context.Context, in *EventsSubscribe, opts ...grpc.CallOption) (NotificationGatewayService_SubscribeClient, error)
	DismissEvent(ctx context.Context, in *EventsFilter, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error)
	SubscribeEvents(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (*SubscribeEventResponse, error)
	ReceiveEvents(ctx context.Context, in *ReceiveEventRequest, opts ...grpc.CallOption) (*ReceiveEventResponse, error)
	DeleteEvents(ctx context.Context, in *DeleteEventRequestList, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notificationGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationGatewayServiceClient(cc grpc.ClientConnInterface) NotificationGatewayServiceClient {
	return &notificationGatewayServiceClient{cc}
}

func (c *notificationGatewayServiceClient) Create(ctx context.Context, in *CreateEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationGatewayServiceClient) SendEmailNotification(ctx context.Context, in *CreateEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/sendEmailNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationGatewayServiceClient) Read(ctx context.Context, in *EventsFilter, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationGatewayServiceClient) Subscribe(ctx context.Context, in *EventsSubscribe, opts ...grpc.CallOption) (NotificationGatewayService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationGatewayService_ServiceDesc.Streams[0], "/proto.NotificationGatewayService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationGatewayServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationGatewayService_SubscribeClient interface {
	Recv() (*Events, error)
	grpc.ClientStream
}

type notificationGatewayServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *notificationGatewayServiceSubscribeClient) Recv() (*Events, error) {
	m := new(Events)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationGatewayServiceClient) DismissEvent(ctx context.Context, in *EventsFilter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/DismissEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationGatewayServiceClient) PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/PublishEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationGatewayServiceClient) SubscribeEvents(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (*SubscribeEventResponse, error) {
	out := new(SubscribeEventResponse)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/SubscribeEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationGatewayServiceClient) ReceiveEvents(ctx context.Context, in *ReceiveEventRequest, opts ...grpc.CallOption) (*ReceiveEventResponse, error) {
	out := new(ReceiveEventResponse)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/ReceiveEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationGatewayServiceClient) DeleteEvents(ctx context.Context, in *DeleteEventRequestList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.NotificationGatewayService/DeleteEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationGatewayServiceServer is the server API for NotificationGatewayService service.
// All implementations must embed UnimplementedNotificationGatewayServiceServer
// for forward compatibility
type NotificationGatewayServiceServer interface {
	// register as a event provider
	Create(context.Context, *CreateEvent) (*emptypb.Empty, error)
	// Send email notifications
	SendEmailNotification(context.Context, *CreateEvent) (*emptypb.Empty, error)
	// this will be short lived - short polling
	Read(context.Context, *EventsFilter) (*Events, error)
	// to subscribe to long polling
	Subscribe(*EventsSubscribe, NotificationGatewayService_SubscribeServer) error
	DismissEvent(context.Context, *EventsFilter) (*emptypb.Empty, error)
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	SubscribeEvents(context.Context, *SubscribeEventRequest) (*SubscribeEventResponse, error)
	ReceiveEvents(context.Context, *ReceiveEventRequest) (*ReceiveEventResponse, error)
	DeleteEvents(context.Context, *DeleteEventRequestList) (*emptypb.Empty, error)
	mustEmbedUnimplementedNotificationGatewayServiceServer()
}

// UnimplementedNotificationGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationGatewayServiceServer struct {
}

func (UnimplementedNotificationGatewayServiceServer) Create(context.Context, *CreateEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) SendEmailNotification(context.Context, *CreateEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailNotification not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) Read(context.Context, *EventsFilter) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) Subscribe(*EventsSubscribe, NotificationGatewayService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) DismissEvent(context.Context, *EventsFilter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissEvent not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) SubscribeEvents(context.Context, *SubscribeEventRequest) (*SubscribeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) ReceiveEvents(context.Context, *ReceiveEventRequest) (*ReceiveEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveEvents not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) DeleteEvents(context.Context, *DeleteEventRequestList) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvents not implemented")
}
func (UnimplementedNotificationGatewayServiceServer) mustEmbedUnimplementedNotificationGatewayServiceServer() {
}

// UnsafeNotificationGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationGatewayServiceServer will
// result in compilation errors.
type UnsafeNotificationGatewayServiceServer interface {
	mustEmbedUnimplementedNotificationGatewayServiceServer()
}

func RegisterNotificationGatewayServiceServer(s grpc.ServiceRegistrar, srv NotificationGatewayServiceServer) {
	s.RegisterService(&NotificationGatewayService_ServiceDesc, srv)
}

func _NotificationGatewayService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).Create(ctx, req.(*CreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationGatewayService_SendEmailNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).SendEmailNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/sendEmailNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).SendEmailNotification(ctx, req.(*CreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationGatewayService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).Read(ctx, req.(*EventsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationGatewayService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsSubscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationGatewayServiceServer).Subscribe(m, &notificationGatewayServiceSubscribeServer{stream})
}

type NotificationGatewayService_SubscribeServer interface {
	Send(*Events) error
	grpc.ServerStream
}

type notificationGatewayServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *notificationGatewayServiceSubscribeServer) Send(m *Events) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationGatewayService_DismissEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).DismissEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/DismissEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).DismissEvent(ctx, req.(*EventsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationGatewayService_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/PublishEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).PublishEvent(ctx, req.(*PublishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationGatewayService_SubscribeEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).SubscribeEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/SubscribeEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).SubscribeEvents(ctx, req.(*SubscribeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationGatewayService_ReceiveEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).ReceiveEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/ReceiveEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).ReceiveEvents(ctx, req.(*ReceiveEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationGatewayService_DeleteEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationGatewayServiceServer).DeleteEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NotificationGatewayService/DeleteEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationGatewayServiceServer).DeleteEvents(ctx, req.(*DeleteEventRequestList))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationGatewayService_ServiceDesc is the grpc.ServiceDesc for NotificationGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NotificationGatewayService",
	HandlerType: (*NotificationGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NotificationGatewayService_Create_Handler,
		},
		{
			MethodName: "sendEmailNotification",
			Handler:    _NotificationGatewayService_SendEmailNotification_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NotificationGatewayService_Read_Handler,
		},
		{
			MethodName: "DismissEvent",
			Handler:    _NotificationGatewayService_DismissEvent_Handler,
		},
		{
			MethodName: "PublishEvent",
			Handler:    _NotificationGatewayService_PublishEvent_Handler,
		},
		{
			MethodName: "SubscribeEvents",
			Handler:    _NotificationGatewayService_SubscribeEvents_Handler,
		},
		{
			MethodName: "ReceiveEvents",
			Handler:    _NotificationGatewayService_ReceiveEvents_Handler,
		},
		{
			MethodName: "DeleteEvents",
			Handler:    _NotificationGatewayService_DeleteEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _NotificationGatewayService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification-gateway.proto",
}

// EmailNotificationServiceClient is the client API for EmailNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailNotificationServiceClient interface {
	SendUserEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
}

type emailNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailNotificationServiceClient(cc grpc.ClientConnInterface) EmailNotificationServiceClient {
	return &emailNotificationServiceClient{cc}
}

func (c *emailNotificationServiceClient) SendUserEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/proto.EmailNotificationService/SendUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailNotificationServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/proto.EmailNotificationService/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailNotificationServiceServer is the server API for EmailNotificationService service.
// All implementations must embed UnimplementedEmailNotificationServiceServer
// for forward compatibility
type EmailNotificationServiceServer interface {
	SendUserEmail(context.Context, *EmailRequest) (*EmailResponse, error)
	SendEmail(context.Context, *SendEmailRequest) (*EmailResponse, error)
	mustEmbedUnimplementedEmailNotificationServiceServer()
}

// UnimplementedEmailNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailNotificationServiceServer struct {
}

func (UnimplementedEmailNotificationServiceServer) SendUserEmail(context.Context, *EmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserEmail not implemented")
}
func (UnimplementedEmailNotificationServiceServer) SendEmail(context.Context, *SendEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailNotificationServiceServer) mustEmbedUnimplementedEmailNotificationServiceServer() {
}

// UnsafeEmailNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailNotificationServiceServer will
// result in compilation errors.
type UnsafeEmailNotificationServiceServer interface {
	mustEmbedUnimplementedEmailNotificationServiceServer()
}

func RegisterEmailNotificationServiceServer(s grpc.ServiceRegistrar, srv EmailNotificationServiceServer) {
	s.RegisterService(&EmailNotificationService_ServiceDesc, srv)
}

func _EmailNotificationService_SendUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailNotificationServiceServer).SendUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmailNotificationService/SendUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailNotificationServiceServer).SendUserEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailNotificationService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailNotificationServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmailNotificationService/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailNotificationServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailNotificationService_ServiceDesc is the grpc.ServiceDesc for EmailNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EmailNotificationService",
	HandlerType: (*EmailNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendUserEmail",
			Handler:    _EmailNotificationService_SendUserEmail_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _EmailNotificationService_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification-gateway.proto",
}
