// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: quota_management.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceQuotaRegistrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceQuotaRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceQuotaRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ServiceQuotaRegistrationRequestMultiError, or nil if none found.
func (m *ServiceQuotaRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceQuotaRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Region

	for idx, item := range m.GetServiceResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceQuotaRegistrationRequestValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceQuotaRegistrationRequestValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceQuotaRegistrationRequestValidationError{
					field:  fmt.Sprintf("ServiceResources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceQuotaRegistrationRequestMultiError(errors)
	}

	return nil
}

// ServiceQuotaRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by ServiceQuotaRegistrationRequest.ValidateAll()
// if the designated constraints aren't met.
type ServiceQuotaRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceQuotaRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceQuotaRegistrationRequestMultiError) AllErrors() []error { return m }

// ServiceQuotaRegistrationRequestValidationError is the validation error
// returned by ServiceQuotaRegistrationRequest.Validate if the designated
// constraints aren't met.
type ServiceQuotaRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceQuotaRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceQuotaRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceQuotaRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceQuotaRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceQuotaRegistrationRequestValidationError) ErrorName() string {
	return "ServiceQuotaRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceQuotaRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceQuotaRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceQuotaRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceQuotaRegistrationRequestValidationError{}

// Validate checks the field values on ServiceQuotaRegistrationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServiceQuotaRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceQuotaRegistrationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ServiceQuotaRegistrationResponseMultiError, or nil if none found.
func (m *ServiceQuotaRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceQuotaRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for Region

	for idx, item := range m.GetServiceResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceQuotaRegistrationResponseValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceQuotaRegistrationResponseValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceQuotaRegistrationResponseValidationError{
					field:  fmt.Sprintf("ServiceResources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceQuotaRegistrationResponseMultiError(errors)
	}

	return nil
}

// ServiceQuotaRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by
// ServiceQuotaRegistrationResponse.ValidateAll() if the designated
// constraints aren't met.
type ServiceQuotaRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceQuotaRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceQuotaRegistrationResponseMultiError) AllErrors() []error { return m }

// ServiceQuotaRegistrationResponseValidationError is the validation error
// returned by ServiceQuotaRegistrationResponse.Validate if the designated
// constraints aren't met.
type ServiceQuotaRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceQuotaRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceQuotaRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceQuotaRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceQuotaRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceQuotaRegistrationResponseValidationError) ErrorName() string {
	return "ServiceQuotaRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceQuotaRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceQuotaRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceQuotaRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceQuotaRegistrationResponseValidationError{}

// Validate checks the field values on ServicesListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServicesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicesListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServicesListRequestMultiError, or nil if none found.
func (m *ServicesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filters

	if len(errors) > 0 {
		return ServicesListRequestMultiError(errors)
	}

	return nil
}

// ServicesListRequestMultiError is an error wrapping multiple validation
// errors returned by ServicesListRequest.ValidateAll() if the designated
// constraints aren't met.
type ServicesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesListRequestMultiError) AllErrors() []error { return m }

// ServicesListRequestValidationError is the validation error returned by
// ServicesListRequest.Validate if the designated constraints aren't met.
type ServicesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesListRequestValidationError) ErrorName() string {
	return "ServicesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServicesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesListRequestValidationError{}

// Validate checks the field values on ServicesListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServicesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicesListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServicesListResponseMultiError, or nil if none found.
func (m *ServicesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServicesListResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServicesListResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServicesListResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServicesListResponseMultiError(errors)
	}

	return nil
}

// ServicesListResponseMultiError is an error wrapping multiple validation
// errors returned by ServicesListResponse.ValidateAll() if the designated
// constraints aren't met.
type ServicesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesListResponseMultiError) AllErrors() []error { return m }

// ServicesListResponseValidationError is the validation error returned by
// ServicesListResponse.Validate if the designated constraints aren't met.
type ServicesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesListResponseValidationError) ErrorName() string {
	return "ServicesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServicesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesListResponseValidationError{}

// Validate checks the field values on ServiceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceDetailMultiError, or
// nil if none found.
func (m *ServiceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return ServiceDetailMultiError(errors)
	}

	return nil
}

// ServiceDetailMultiError is an error wrapping multiple validation errors
// returned by ServiceDetail.ValidateAll() if the designated constraints
// aren't met.
type ServiceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceDetailMultiError) AllErrors() []error { return m }

// ServiceDetailValidationError is the validation error returned by
// ServiceDetail.Validate if the designated constraints aren't met.
type ServiceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDetailValidationError) ErrorName() string { return "ServiceDetailValidationError" }

// Error satisfies the builtin error interface
func (e ServiceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDetailValidationError{}

// Validate checks the field values on ServiceResourcesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceResourcesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceResourcesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceResourcesListRequestMultiError, or nil if none found.
func (m *ServiceResourcesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceResourcesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return ServiceResourcesListRequestMultiError(errors)
	}

	return nil
}

// ServiceResourcesListRequestMultiError is an error wrapping multiple
// validation errors returned by ServiceResourcesListRequest.ValidateAll() if
// the designated constraints aren't met.
type ServiceResourcesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceResourcesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceResourcesListRequestMultiError) AllErrors() []error { return m }

// ServiceResourcesListRequestValidationError is the validation error returned
// by ServiceResourcesListRequest.Validate if the designated constraints
// aren't met.
type ServiceResourcesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceResourcesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceResourcesListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceResourcesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceResourcesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceResourcesListRequestValidationError) ErrorName() string {
	return "ServiceResourcesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceResourcesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceResourcesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceResourcesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceResourcesListRequestValidationError{}

// Validate checks the field values on ServiceResourcesListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceResourcesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceResourcesListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceResourcesListResponseMultiError, or nil if none found.
func (m *ServiceResourcesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceResourcesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	for idx, item := range m.GetServiceResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceResourcesListResponseValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceResourcesListResponseValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceResourcesListResponseValidationError{
					field:  fmt.Sprintf("ServiceResources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceResourcesListResponseMultiError(errors)
	}

	return nil
}

// ServiceResourcesListResponseMultiError is an error wrapping multiple
// validation errors returned by ServiceResourcesListResponse.ValidateAll() if
// the designated constraints aren't met.
type ServiceResourcesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceResourcesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceResourcesListResponseMultiError) AllErrors() []error { return m }

// ServiceResourcesListResponseValidationError is the validation error returned
// by ServiceResourcesListResponse.Validate if the designated constraints
// aren't met.
type ServiceResourcesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceResourcesListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceResourcesListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceResourcesListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceResourcesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceResourcesListResponseValidationError) ErrorName() string {
	return "ServiceResourcesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceResourcesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceResourcesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceResourcesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceResourcesListResponseValidationError{}

// Validate checks the field values on ServiceResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceResourceMultiError, or nil if none found.
func (m *ServiceResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for QuotaUnit

	// no validation rules for MaxLimit

	if len(errors) > 0 {
		return ServiceResourceMultiError(errors)
	}

	return nil
}

// ServiceResourceMultiError is an error wrapping multiple validation errors
// returned by ServiceResource.ValidateAll() if the designated constraints
// aren't met.
type ServiceResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceResourceMultiError) AllErrors() []error { return m }

// ServiceResourceValidationError is the validation error returned by
// ServiceResource.Validate if the designated constraints aren't met.
type ServiceResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceResourceValidationError) ErrorName() string { return "ServiceResourceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceResourceValidationError{}

// Validate checks the field values on ServiceResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceResourceRequestMultiError, or nil if none found.
func (m *ServiceResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ResourceName

	if len(errors) > 0 {
		return ServiceResourceRequestMultiError(errors)
	}

	return nil
}

// ServiceResourceRequestMultiError is an error wrapping multiple validation
// errors returned by ServiceResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type ServiceResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceResourceRequestMultiError) AllErrors() []error { return m }

// ServiceResourceRequestValidationError is the validation error returned by
// ServiceResourceRequest.Validate if the designated constraints aren't met.
type ServiceResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceResourceRequestValidationError) ErrorName() string {
	return "ServiceResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceResourceRequestValidationError{}

// Validate checks the field values on ServiceResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceResourceResponseMultiError, or nil if none found.
func (m *ServiceResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	if all {
		switch v := interface{}(m.GetServiceResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceResourceResponseValidationError{
					field:  "ServiceResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceResourceResponseValidationError{
					field:  "ServiceResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceResourceResponseValidationError{
				field:  "ServiceResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceResourceResponseMultiError(errors)
	}

	return nil
}

// ServiceResourceResponseMultiError is an error wrapping multiple validation
// errors returned by ServiceResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type ServiceResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceResourceResponseMultiError) AllErrors() []error { return m }

// ServiceResourceResponseValidationError is the validation error returned by
// ServiceResourceResponse.Validate if the designated constraints aren't met.
type ServiceResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceResourceResponseValidationError) ErrorName() string {
	return "ServiceResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceResourceResponseValidationError{}

// Validate checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaConfigMultiError, or
// nil if none found.
func (m *QuotaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limits

	// no validation rules for QuotaUnit

	if len(errors) > 0 {
		return QuotaConfigMultiError(errors)
	}

	return nil
}

// QuotaConfigMultiError is an error wrapping multiple validation errors
// returned by QuotaConfig.ValidateAll() if the designated constraints aren't met.
type QuotaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaConfigMultiError) AllErrors() []error { return m }

// QuotaConfigValidationError is the validation error returned by
// QuotaConfig.Validate if the designated constraints aren't met.
type QuotaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaConfigValidationError) ErrorName() string { return "QuotaConfigValidationError" }

// Error satisfies the builtin error interface
func (e QuotaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaConfigValidationError{}

// Validate checks the field values on UpdateServiceRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateServiceRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServiceRegistrationRequestMultiError, or nil if none found.
func (m *UpdateServiceRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	for idx, item := range m.GetServiceResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateServiceRegistrationRequestValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateServiceRegistrationRequestValidationError{
						field:  fmt.Sprintf("ServiceResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateServiceRegistrationRequestValidationError{
					field:  fmt.Sprintf("ServiceResources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateServiceRegistrationRequestMultiError(errors)
	}

	return nil
}

// UpdateServiceRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateServiceRegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateServiceRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceRegistrationRequestMultiError) AllErrors() []error { return m }

// UpdateServiceRegistrationRequestValidationError is the validation error
// returned by UpdateServiceRegistrationRequest.Validate if the designated
// constraints aren't met.
type UpdateServiceRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceRegistrationRequestValidationError) ErrorName() string {
	return "UpdateServiceRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceRegistrationRequestValidationError{}

// Validate checks the field values on CreateServiceQuotaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceQuotaRequestMultiError, or nil if none found.
func (m *CreateServiceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetServiceQuotaResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceQuotaRequestValidationError{
					field:  "ServiceQuotaResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceQuotaRequestValidationError{
					field:  "ServiceQuotaResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceQuotaResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceQuotaRequestValidationError{
				field:  "ServiceQuotaResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceQuotaRequestMultiError(errors)
	}

	return nil
}

// CreateServiceQuotaRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServiceQuotaRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateServiceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceQuotaRequestMultiError) AllErrors() []error { return m }

// CreateServiceQuotaRequestValidationError is the validation error returned by
// CreateServiceQuotaRequest.Validate if the designated constraints aren't met.
type CreateServiceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceQuotaRequestValidationError) ErrorName() string {
	return "CreateServiceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceQuotaRequestValidationError{}

// Validate checks the field values on CreateServiceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceQuotaResponseMultiError, or nil if none found.
func (m *CreateServiceQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for Region

	if all {
		switch v := interface{}(m.GetServiceQuotaResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceQuotaResponseValidationError{
					field:  "ServiceQuotaResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceQuotaResponseValidationError{
					field:  "ServiceQuotaResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceQuotaResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceQuotaResponseValidationError{
				field:  "ServiceQuotaResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceQuotaResponseMultiError(errors)
	}

	return nil
}

// CreateServiceQuotaResponseMultiError is an error wrapping multiple
// validation errors returned by CreateServiceQuotaResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceQuotaResponseMultiError) AllErrors() []error { return m }

// CreateServiceQuotaResponseValidationError is the validation error returned
// by CreateServiceQuotaResponse.Validate if the designated constraints aren't met.
type CreateServiceQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceQuotaResponseValidationError) ErrorName() string {
	return "CreateServiceQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceQuotaResponseValidationError{}

// Validate checks the field values on ServiceQuotaResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceQuotaResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceQuotaResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceQuotaResourceMultiError, or nil if none found.
func (m *ServiceQuotaResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceQuotaResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	if all {
		switch v := interface{}(m.GetQuotaConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceQuotaResourceValidationError{
				field:  "QuotaConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceQuotaResourceValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RuleId

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceQuotaResourceValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceQuotaResourceValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceQuotaResourceValidationError{
				field:  "UpdatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceQuotaResourceMultiError(errors)
	}

	return nil
}

// ServiceQuotaResourceMultiError is an error wrapping multiple validation
// errors returned by ServiceQuotaResource.ValidateAll() if the designated
// constraints aren't met.
type ServiceQuotaResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceQuotaResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceQuotaResourceMultiError) AllErrors() []error { return m }

// ServiceQuotaResourceValidationError is the validation error returned by
// ServiceQuotaResource.Validate if the designated constraints aren't met.
type ServiceQuotaResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceQuotaResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceQuotaResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceQuotaResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceQuotaResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceQuotaResourceValidationError) ErrorName() string {
	return "ServiceQuotaResourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceQuotaResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceQuotaResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceQuotaResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceQuotaResourceValidationError{}

// Validate checks the field values on QuotaScope with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaScope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaScope with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaScopeMultiError, or
// nil if none found.
func (m *QuotaScope) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaScope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeValue

	if len(errors) > 0 {
		return QuotaScopeMultiError(errors)
	}

	return nil
}

// QuotaScopeMultiError is an error wrapping multiple validation errors
// returned by QuotaScope.ValidateAll() if the designated constraints aren't met.
type QuotaScopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaScopeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaScopeMultiError) AllErrors() []error { return m }

// QuotaScopeValidationError is the validation error returned by
// QuotaScope.Validate if the designated constraints aren't met.
type QuotaScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaScopeValidationError) ErrorName() string { return "QuotaScopeValidationError" }

// Error satisfies the builtin error interface
func (e QuotaScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaScopeValidationError{}

// Validate checks the field values on ServiceQuotaResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceQuotaResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceQuotaResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceQuotaResourceRequestMultiError, or nil if none found.
func (m *ServiceQuotaResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceQuotaResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ResourceType

	if len(errors) > 0 {
		return ServiceQuotaResourceRequestMultiError(errors)
	}

	return nil
}

// ServiceQuotaResourceRequestMultiError is an error wrapping multiple
// validation errors returned by ServiceQuotaResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type ServiceQuotaResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceQuotaResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceQuotaResourceRequestMultiError) AllErrors() []error { return m }

// ServiceQuotaResourceRequestValidationError is the validation error returned
// by ServiceQuotaResourceRequest.Validate if the designated constraints
// aren't met.
type ServiceQuotaResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceQuotaResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceQuotaResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceQuotaResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceQuotaResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceQuotaResourceRequestValidationError) ErrorName() string {
	return "ServiceQuotaResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceQuotaResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceQuotaResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceQuotaResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceQuotaResourceRequestValidationError{}

// Validate checks the field values on ServiceQuotaResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceQuotaResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceQuotaResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceQuotaResourceResponseMultiError, or nil if none found.
func (m *ServiceQuotaResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceQuotaResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	for idx, item := range m.GetServiceQuotaResource() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceQuotaResourceResponseValidationError{
						field:  fmt.Sprintf("ServiceQuotaResource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceQuotaResourceResponseValidationError{
						field:  fmt.Sprintf("ServiceQuotaResource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceQuotaResourceResponseValidationError{
					field:  fmt.Sprintf("ServiceQuotaResource[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceQuotaResourceResponseMultiError(errors)
	}

	return nil
}

// ServiceQuotaResourceResponseMultiError is an error wrapping multiple
// validation errors returned by ServiceQuotaResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type ServiceQuotaResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceQuotaResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceQuotaResourceResponseMultiError) AllErrors() []error { return m }

// ServiceQuotaResourceResponseValidationError is the validation error returned
// by ServiceQuotaResourceResponse.Validate if the designated constraints
// aren't met.
type ServiceQuotaResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceQuotaResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceQuotaResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceQuotaResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceQuotaResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceQuotaResourceResponseValidationError) ErrorName() string {
	return "ServiceQuotaResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceQuotaResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceQuotaResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceQuotaResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceQuotaResourceResponseValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceRequestMultiError, or nil if none found.
func (m *DeleteServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return DeleteServiceRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceRequestMultiError) AllErrors() []error { return m }

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on DeleteServiceQuotaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceQuotaRequestMultiError, or nil if none found.
func (m *DeleteServiceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ResourceType

	// no validation rules for RuleId

	if len(errors) > 0 {
		return DeleteServiceQuotaRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceQuotaRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceQuotaRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteServiceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceQuotaRequestMultiError) AllErrors() []error { return m }

// DeleteServiceQuotaRequestValidationError is the validation error returned by
// DeleteServiceQuotaRequest.Validate if the designated constraints aren't met.
type DeleteServiceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceQuotaRequestValidationError) ErrorName() string {
	return "DeleteServiceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceQuotaRequestValidationError{}

// Validate checks the field values on UpdateQuotaServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuotaServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuotaServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQuotaServiceRequestMultiError, or nil if none found.
func (m *UpdateQuotaServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuotaServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ResourceType

	// no validation rules for RuleId

	if all {
		switch v := interface{}(m.GetQuotaConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuotaServiceRequestValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuotaServiceRequestValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuotaServiceRequestValidationError{
				field:  "QuotaConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return UpdateQuotaServiceRequestMultiError(errors)
	}

	return nil
}

// UpdateQuotaServiceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateQuotaServiceRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateQuotaServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuotaServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuotaServiceRequestMultiError) AllErrors() []error { return m }

// UpdateQuotaServiceRequestValidationError is the validation error returned by
// UpdateQuotaServiceRequest.Validate if the designated constraints aren't met.
type UpdateQuotaServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuotaServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuotaServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuotaServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuotaServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuotaServiceRequestValidationError) ErrorName() string {
	return "UpdateQuotaServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuotaServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuotaServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuotaServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuotaServiceRequestValidationError{}

// Validate checks the field values on UpdateQuotaServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuotaServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuotaServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQuotaServiceResponseMultiError, or nil if none found.
func (m *UpdateQuotaServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuotaServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetServiceQuotaResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuotaServiceResponseValidationError{
					field:  "ServiceQuotaResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuotaServiceResponseValidationError{
					field:  "ServiceQuotaResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceQuotaResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuotaServiceResponseValidationError{
				field:  "ServiceQuotaResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateQuotaServiceResponseMultiError(errors)
	}

	return nil
}

// UpdateQuotaServiceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateQuotaServiceResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateQuotaServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuotaServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuotaServiceResponseMultiError) AllErrors() []error { return m }

// UpdateQuotaServiceResponseValidationError is the validation error returned
// by UpdateQuotaServiceResponse.Validate if the designated constraints aren't met.
type UpdateQuotaServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuotaServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuotaServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuotaServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuotaServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuotaServiceResponseValidationError) ErrorName() string {
	return "UpdateQuotaServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuotaServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuotaServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuotaServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuotaServiceResponseValidationError{}

// Validate checks the field values on ListServiceQuotaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceQuotaRequestMultiError, or nil if none found.
func (m *ListServiceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for Filters

	if len(errors) > 0 {
		return ListServiceQuotaRequestMultiError(errors)
	}

	return nil
}

// ListServiceQuotaRequestMultiError is an error wrapping multiple validation
// errors returned by ListServiceQuotaRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServiceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceQuotaRequestMultiError) AllErrors() []error { return m }

// ListServiceQuotaRequestValidationError is the validation error returned by
// ListServiceQuotaRequest.Validate if the designated constraints aren't met.
type ListServiceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceQuotaRequestValidationError) ErrorName() string {
	return "ListServiceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceQuotaRequestValidationError{}

// Validate checks the field values on ListAllServiceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllServiceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllServiceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllServiceQuotaRequestMultiError, or nil if none found.
func (m *ListAllServiceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllServiceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filters

	if len(errors) > 0 {
		return ListAllServiceQuotaRequestMultiError(errors)
	}

	return nil
}

// ListAllServiceQuotaRequestMultiError is an error wrapping multiple
// validation errors returned by ListAllServiceQuotaRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAllServiceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllServiceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllServiceQuotaRequestMultiError) AllErrors() []error { return m }

// ListAllServiceQuotaRequestValidationError is the validation error returned
// by ListAllServiceQuotaRequest.Validate if the designated constraints aren't met.
type ListAllServiceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllServiceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllServiceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllServiceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllServiceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllServiceQuotaRequestValidationError) ErrorName() string {
	return "ListAllServiceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllServiceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllServiceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllServiceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllServiceQuotaRequestValidationError{}

// Validate checks the field values on ListServiceQuotaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceQuotaResponseMultiError, or nil if none found.
func (m *ListServiceQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	for idx, item := range m.GetServiceQuotaAllResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceQuotaResponseValidationError{
						field:  fmt.Sprintf("ServiceQuotaAllResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceQuotaResponseValidationError{
						field:  fmt.Sprintf("ServiceQuotaAllResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceQuotaResponseValidationError{
					field:  fmt.Sprintf("ServiceQuotaAllResources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceQuotaResponseMultiError(errors)
	}

	return nil
}

// ListServiceQuotaResponseMultiError is an error wrapping multiple validation
// errors returned by ListServiceQuotaResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServiceQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceQuotaResponseMultiError) AllErrors() []error { return m }

// ListServiceQuotaResponseValidationError is the validation error returned by
// ListServiceQuotaResponse.Validate if the designated constraints aren't met.
type ListServiceQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceQuotaResponseValidationError) ErrorName() string {
	return "ListServiceQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceQuotaResponseValidationError{}

// Validate checks the field values on ListAllServiceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllServiceQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllServiceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllServiceQuotaResponseMultiError, or nil if none found.
func (m *ListAllServiceQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllServiceQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAllServicesQuotaResponse() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllServiceQuotaResponseValidationError{
						field:  fmt.Sprintf("AllServicesQuotaResponse[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllServiceQuotaResponseValidationError{
						field:  fmt.Sprintf("AllServicesQuotaResponse[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllServiceQuotaResponseValidationError{
					field:  fmt.Sprintf("AllServicesQuotaResponse[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllServiceQuotaResponseMultiError(errors)
	}

	return nil
}

// ListAllServiceQuotaResponseMultiError is an error wrapping multiple
// validation errors returned by ListAllServiceQuotaResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAllServiceQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllServiceQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllServiceQuotaResponseMultiError) AllErrors() []error { return m }

// ListAllServiceQuotaResponseValidationError is the validation error returned
// by ListAllServiceQuotaResponse.Validate if the designated constraints
// aren't met.
type ListAllServiceQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllServiceQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllServiceQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllServiceQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllServiceQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllServiceQuotaResponseValidationError) ErrorName() string {
	return "ListAllServiceQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllServiceQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllServiceQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllServiceQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllServiceQuotaResponseValidationError{}
