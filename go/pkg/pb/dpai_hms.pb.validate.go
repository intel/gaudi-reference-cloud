// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dpai_hms.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DpaiHmsDeploymentMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsDeploymentMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsDeploymentMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsDeploymentMetaMultiError, or nil if none found.
func (m *DpaiHmsDeploymentMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsDeploymentMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	// no validation rules for BackendDatabaseId

	// no validation rules for NodeGroupId

	if all {
		switch v := interface{}(m.GetDeploymentStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsDeploymentMetaValidationError{
				field:  "DeploymentStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsDeploymentMetaMultiError(errors)
	}

	return nil
}

// DpaiHmsDeploymentMetaMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsDeploymentMeta.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsDeploymentMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsDeploymentMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsDeploymentMetaMultiError) AllErrors() []error { return m }

// DpaiHmsDeploymentMetaValidationError is the validation error returned by
// DpaiHmsDeploymentMeta.Validate if the designated constraints aren't met.
type DpaiHmsDeploymentMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsDeploymentMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsDeploymentMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsDeploymentMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsDeploymentMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsDeploymentMetaValidationError) ErrorName() string {
	return "DpaiHmsDeploymentMetaValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsDeploymentMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsDeploymentMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsDeploymentMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsDeploymentMetaValidationError{}

// Validate checks the field values on DpaiHmsObjectStoreProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsObjectStoreProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsObjectStoreProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsObjectStorePropertiesMultiError, or nil if none found.
func (m *DpaiHmsObjectStoreProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsObjectStoreProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StorageEndpoint

	// no validation rules for WarehouseDirectory

	// no validation rules for StorageAccessKey

	// no validation rules for StorageAccessSecret

	if all {
		switch v := interface{}(m.GetStorageAccessKeySecretReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsObjectStorePropertiesValidationError{
					field:  "StorageAccessKeySecretReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsObjectStorePropertiesValidationError{
					field:  "StorageAccessKeySecretReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageAccessKeySecretReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsObjectStorePropertiesValidationError{
				field:  "StorageAccessKeySecretReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStorageAccessSecretSecretReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsObjectStorePropertiesValidationError{
					field:  "StorageAccessSecretSecretReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsObjectStorePropertiesValidationError{
					field:  "StorageAccessSecretSecretReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageAccessSecretSecretReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsObjectStorePropertiesValidationError{
				field:  "StorageAccessSecretSecretReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsObjectStorePropertiesMultiError(errors)
	}

	return nil
}

// DpaiHmsObjectStorePropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsObjectStoreProperties.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsObjectStorePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsObjectStorePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsObjectStorePropertiesMultiError) AllErrors() []error { return m }

// DpaiHmsObjectStorePropertiesValidationError is the validation error returned
// by DpaiHmsObjectStoreProperties.Validate if the designated constraints
// aren't met.
type DpaiHmsObjectStorePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsObjectStorePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsObjectStorePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsObjectStorePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsObjectStorePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsObjectStorePropertiesValidationError) ErrorName() string {
	return "DpaiHmsObjectStorePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsObjectStorePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsObjectStoreProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsObjectStorePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsObjectStorePropertiesValidationError{}

// Validate checks the field values on DpaiHmsConfGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupMultiError, or nil if none found.
func (m *DpaiHmsConfGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsConfGroupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsConfGroupValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsConfGroupValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsConfGroupMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupMultiError is an error wrapping multiple validation errors
// returned by DpaiHmsConfGroup.ValidateAll() if the designated constraints
// aren't met.
type DpaiHmsConfGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupValidationError is the validation error returned by
// DpaiHmsConfGroup.Validate if the designated constraints aren't met.
type DpaiHmsConfGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupValidationError) ErrorName() string { return "DpaiHmsConfGroupValidationError" }

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupValidationError{}

// Validate checks the field values on DpaiHmsConfGroupCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroupCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupCreateRequestMultiError, or nil if none found.
func (m *DpaiHmsConfGroupCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for CreatedBy

	if len(errors) > 0 {
		return DpaiHmsConfGroupCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfGroupCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsConfGroupCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupCreateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupCreateRequestValidationError is the validation error
// returned by DpaiHmsConfGroupCreateRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsConfGroupCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupCreateRequestValidationError) ErrorName() string {
	return "DpaiHmsConfGroupCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupCreateRequestValidationError{}

// Validate checks the field values on DpaiHmsConfGroupListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupListRequestMultiError, or nil if none found.
func (m *DpaiHmsConfGroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DpaiHmsConfGroupListRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupListRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfGroupListRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsConfGroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupListRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupListRequestValidationError is the validation error returned
// by DpaiHmsConfGroupListRequest.Validate if the designated constraints
// aren't met.
type DpaiHmsConfGroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupListRequestValidationError) ErrorName() string {
	return "DpaiHmsConfGroupListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupListRequestValidationError{}

// Validate checks the field values on DpaiHmsConfGroupListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroupListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupListResponseMultiError, or nil if none found.
func (m *DpaiHmsConfGroupListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiHmsConfGroupListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiHmsConfGroupListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiHmsConfGroupListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiHmsConfGroupListResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfGroupListResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsConfGroupListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupListResponseMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupListResponseValidationError is the validation error returned
// by DpaiHmsConfGroupListResponse.Validate if the designated constraints
// aren't met.
type DpaiHmsConfGroupListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupListResponseValidationError) ErrorName() string {
	return "DpaiHmsConfGroupListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupListResponseValidationError{}

// Validate checks the field values on DpaiHmsConfGroupGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroupGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupGetByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupGetByIdRequestMultiError, or nil if none found.
func (m *DpaiHmsConfGroupGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsConfGroupGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfGroupGetByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsConfGroupGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupGetByIdRequestValidationError is the validation error
// returned by DpaiHmsConfGroupGetByIdRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsConfGroupGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupGetByIdRequestValidationError) ErrorName() string {
	return "DpaiHmsConfGroupGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupGetByIdRequestValidationError{}

// Validate checks the field values on DpaiHmsConfGroupGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiHmsConfGroupGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupGetByNameRequestMultiError, or nil if none found.
func (m *DpaiHmsConfGroupGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DpaiHmsConfGroupGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiHmsConfGroupGetByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsConfGroupGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupGetByNameRequestValidationError is the validation error
// returned by DpaiHmsConfGroupGetByNameRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsConfGroupGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupGetByNameRequestValidationError) ErrorName() string {
	return "DpaiHmsConfGroupGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupGetByNameRequestValidationError{}

// Validate checks the field values on DpaiHmsConfGroupUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroupUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupUpdateRequestMultiError, or nil if none found.
func (m *DpaiHmsConfGroupUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return DpaiHmsConfGroupUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfGroupUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsConfGroupUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupUpdateRequestValidationError is the validation error
// returned by DpaiHmsConfGroupUpdateRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsConfGroupUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupUpdateRequestValidationError) ErrorName() string {
	return "DpaiHmsConfGroupUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupUpdateRequestValidationError{}

// Validate checks the field values on DpaiHmsConfGroupDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroupDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupDeleteRequestMultiError, or nil if none found.
func (m *DpaiHmsConfGroupDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsConfGroupDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfGroupDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsConfGroupDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupDeleteRequestValidationError is the validation error
// returned by DpaiHmsConfGroupDeleteRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsConfGroupDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupDeleteRequestValidationError) ErrorName() string {
	return "DpaiHmsConfGroupDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupDeleteRequestValidationError{}

// Validate checks the field values on DpaiHmsConfGroupDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGroupDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGroupDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGroupDeleteResponseMultiError, or nil if none found.
func (m *DpaiHmsConfGroupDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGroupDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiHmsConfGroupDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGroupDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfGroupDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsConfGroupDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGroupDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGroupDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiHmsConfGroupDeleteResponseValidationError is the validation error
// returned by DpaiHmsConfGroupDeleteResponse.Validate if the designated
// constraints aren't met.
type DpaiHmsConfGroupDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGroupDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGroupDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGroupDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGroupDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGroupDeleteResponseValidationError) ErrorName() string {
	return "DpaiHmsConfGroupDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGroupDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGroupDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGroupDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGroupDeleteResponseValidationError{}

// Validate checks the field values on DpaiHmsConf with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConf with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiHmsConfMultiError, or
// nil if none found.
func (m *DpaiHmsConf) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for HmsId

	// no validation rules for GroupId

	// no validation rules for Key

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsConfValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsConfValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsConfValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsConfMultiError(errors)
	}

	return nil
}

// DpaiHmsConfMultiError is an error wrapping multiple validation errors
// returned by DpaiHmsConf.ValidateAll() if the designated constraints aren't met.
type DpaiHmsConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfMultiError) AllErrors() []error { return m }

// DpaiHmsConfValidationError is the validation error returned by
// DpaiHmsConf.Validate if the designated constraints aren't met.
type DpaiHmsConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfValidationError) ErrorName() string { return "DpaiHmsConfValidationError" }

// Error satisfies the builtin error interface
func (e DpaiHmsConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfValidationError{}

// Validate checks the field values on DpaiHmsConfCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfCreateRequestMultiError, or nil if none found.
func (m *DpaiHmsConfCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HmsId

	// no validation rules for GroupId

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for CreatedBy

	if len(errors) > 0 {
		return DpaiHmsConfCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfCreateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsConfCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsConfCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfCreateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfCreateRequestValidationError is the validation error returned by
// DpaiHmsConfCreateRequest.Validate if the designated constraints aren't met.
type DpaiHmsConfCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfCreateRequestValidationError) ErrorName() string {
	return "DpaiHmsConfCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfCreateRequestValidationError{}

// Validate checks the field values on DpaiHmsConfListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfListRequestMultiError, or nil if none found.
func (m *DpaiHmsConfListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HmsId

	if len(errors) > 0 {
		return DpaiHmsConfListRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfListRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsConfListRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsConfListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfListRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfListRequestValidationError is the validation error returned by
// DpaiHmsConfListRequest.Validate if the designated constraints aren't met.
type DpaiHmsConfListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfListRequestValidationError) ErrorName() string {
	return "DpaiHmsConfListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfListRequestValidationError{}

// Validate checks the field values on DpaiHmsConfListByGroupIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfListByGroupIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfListByGroupIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfListByGroupIdRequestMultiError, or nil if none found.
func (m *DpaiHmsConfListByGroupIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfListByGroupIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HmsId

	// no validation rules for GroupId

	if len(errors) > 0 {
		return DpaiHmsConfListByGroupIdRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfListByGroupIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfListByGroupIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsConfListByGroupIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfListByGroupIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfListByGroupIdRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfListByGroupIdRequestValidationError is the validation error
// returned by DpaiHmsConfListByGroupIdRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsConfListByGroupIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfListByGroupIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfListByGroupIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfListByGroupIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfListByGroupIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfListByGroupIdRequestValidationError) ErrorName() string {
	return "DpaiHmsConfListByGroupIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfListByGroupIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfListByGroupIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfListByGroupIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfListByGroupIdRequestValidationError{}

// Validate checks the field values on DpaiHmsConfListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfListResponseMultiError, or nil if none found.
func (m *DpaiHmsConfListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiHmsConfListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiHmsConfListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiHmsConfListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiHmsConfListResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsConfListResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsConfListResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsConfListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfListResponseMultiError) AllErrors() []error { return m }

// DpaiHmsConfListResponseValidationError is the validation error returned by
// DpaiHmsConfListResponse.Validate if the designated constraints aren't met.
type DpaiHmsConfListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfListResponseValidationError) ErrorName() string {
	return "DpaiHmsConfListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfListResponseValidationError{}

// Validate checks the field values on DpaiHmsConfGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfGetByIdRequestMultiError, or nil if none found.
func (m *DpaiHmsConfGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HmsId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsConfGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfGetByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsConfGetByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiHmsConfGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfGetByIdRequestValidationError is the validation error returned by
// DpaiHmsConfGetByIdRequest.Validate if the designated constraints aren't met.
type DpaiHmsConfGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfGetByIdRequestValidationError) ErrorName() string {
	return "DpaiHmsConfGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfGetByIdRequestValidationError{}

// Validate checks the field values on DpaiHmsConfUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfUpdateRequestMultiError, or nil if none found.
func (m *DpaiHmsConfUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return DpaiHmsConfUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsConfUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsConfUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfUpdateRequestValidationError is the validation error returned by
// DpaiHmsConfUpdateRequest.Validate if the designated constraints aren't met.
type DpaiHmsConfUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfUpdateRequestValidationError) ErrorName() string {
	return "DpaiHmsConfUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfUpdateRequestValidationError{}

// Validate checks the field values on DpaiHmsConfDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfDeleteRequestMultiError, or nil if none found.
func (m *DpaiHmsConfDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsConfDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsConfDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsConfDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfDeleteRequestValidationError is the validation error returned by
// DpaiHmsConfDeleteRequest.Validate if the designated constraints aren't met.
type DpaiHmsConfDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfDeleteRequestValidationError) ErrorName() string {
	return "DpaiHmsConfDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfDeleteRequestValidationError{}

// Validate checks the field values on DpaiHmsConfDeleteByHmsIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfDeleteByHmsIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfDeleteByHmsIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsConfDeleteByHmsIdRequestMultiError, or nil if none found.
func (m *DpaiHmsConfDeleteByHmsIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfDeleteByHmsIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HmsId

	if len(errors) > 0 {
		return DpaiHmsConfDeleteByHmsIdRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsConfDeleteByHmsIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsConfDeleteByHmsIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsConfDeleteByHmsIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfDeleteByHmsIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfDeleteByHmsIdRequestMultiError) AllErrors() []error { return m }

// DpaiHmsConfDeleteByHmsIdRequestValidationError is the validation error
// returned by DpaiHmsConfDeleteByHmsIdRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsConfDeleteByHmsIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfDeleteByHmsIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfDeleteByHmsIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfDeleteByHmsIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfDeleteByHmsIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfDeleteByHmsIdRequestValidationError) ErrorName() string {
	return "DpaiHmsConfDeleteByHmsIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfDeleteByHmsIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfDeleteByHmsIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfDeleteByHmsIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfDeleteByHmsIdRequestValidationError{}

// Validate checks the field values on DpaiHmsConfDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsConfDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsConfDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsConfDeleteResponseMultiError, or nil if none found.
func (m *DpaiHmsConfDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsConfDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiHmsConfDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsConfDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsConfDeleteResponse.ValidateAll() if the
// designated constraints aren't met.
type DpaiHmsConfDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsConfDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsConfDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiHmsConfDeleteResponseValidationError is the validation error returned by
// DpaiHmsConfDeleteResponse.Validate if the designated constraints aren't met.
type DpaiHmsConfDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsConfDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsConfDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsConfDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsConfDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsConfDeleteResponseValidationError) ErrorName() string {
	return "DpaiHmsConfDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsConfDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsConfDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsConfDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsConfDeleteResponseValidationError{}

// Validate checks the field values on DpaiHmsSize with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSize with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiHmsSizeMultiError, or
// nil if none found.
func (m *DpaiHmsSize) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for NumberOfInstancesDefault

	// no validation rules for NumberOfInstancesMin

	// no validation rules for NumberOfInstancesMax

	// no validation rules for InstanceTypeId

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuRequest

	// no validation rules for ResourceMemoryLimit

	// no validation rules for ResourceMemoryRequest

	// no validation rules for BackendDatabaseSizeId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsSizeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsSizeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsSizeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsSizeMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeMultiError is an error wrapping multiple validation errors
// returned by DpaiHmsSize.ValidateAll() if the designated constraints aren't met.
type DpaiHmsSizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeMultiError) AllErrors() []error { return m }

// DpaiHmsSizeValidationError is the validation error returned by
// DpaiHmsSize.Validate if the designated constraints aren't met.
type DpaiHmsSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeValidationError) ErrorName() string { return "DpaiHmsSizeValidationError" }

// Error satisfies the builtin error interface
func (e DpaiHmsSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeValidationError{}

// Validate checks the field values on DpaiHmsSizeCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeCreateRequestMultiError, or nil if none found.
func (m *DpaiHmsSizeCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for NumberOfInstancesDefault

	// no validation rules for NumberOfInstancesMin

	// no validation rules for NumberOfInstancesMax

	// no validation rules for InstanceTypeId

	// no validation rules for CreatedBy

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuRequest

	// no validation rules for ResourceMemoryLimit

	// no validation rules for ResourceMemoryRequest

	// no validation rules for BackendDatabaseSizeId

	if len(errors) > 0 {
		return DpaiHmsSizeCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeCreateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsSizeCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeCreateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsSizeCreateRequestValidationError is the validation error returned by
// DpaiHmsSizeCreateRequest.Validate if the designated constraints aren't met.
type DpaiHmsSizeCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeCreateRequestValidationError) ErrorName() string {
	return "DpaiHmsSizeCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeCreateRequestValidationError{}

// Validate checks the field values on DpaiHmsSizeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeListRequestMultiError, or nil if none found.
func (m *DpaiHmsSizeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DpaiHmsSizeListRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeListRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeListRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsSizeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeListRequestMultiError) AllErrors() []error { return m }

// DpaiHmsSizeListRequestValidationError is the validation error returned by
// DpaiHmsSizeListRequest.Validate if the designated constraints aren't met.
type DpaiHmsSizeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeListRequestValidationError) ErrorName() string {
	return "DpaiHmsSizeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeListRequestValidationError{}

// Validate checks the field values on DpaiHmsSizeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeListResponseMultiError, or nil if none found.
func (m *DpaiHmsSizeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiHmsSizeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiHmsSizeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiHmsSizeListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiHmsSizeListResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeListResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeListResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsSizeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeListResponseMultiError) AllErrors() []error { return m }

// DpaiHmsSizeListResponseValidationError is the validation error returned by
// DpaiHmsSizeListResponse.Validate if the designated constraints aren't met.
type DpaiHmsSizeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeListResponseValidationError) ErrorName() string {
	return "DpaiHmsSizeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeListResponseValidationError{}

// Validate checks the field values on DpaiHmsSizeGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeGetByIdRequestMultiError, or nil if none found.
func (m *DpaiHmsSizeGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsSizeGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeGetByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeGetByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiHmsSizeGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiHmsSizeGetByIdRequestValidationError is the validation error returned by
// DpaiHmsSizeGetByIdRequest.Validate if the designated constraints aren't met.
type DpaiHmsSizeGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeGetByIdRequestValidationError) ErrorName() string {
	return "DpaiHmsSizeGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeGetByIdRequestValidationError{}

// Validate checks the field values on DpaiHmsSizeGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeGetByNameRequestMultiError, or nil if none found.
func (m *DpaiHmsSizeGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DpaiHmsSizeGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsSizeGetByNameRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsSizeGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiHmsSizeGetByNameRequestValidationError is the validation error returned
// by DpaiHmsSizeGetByNameRequest.Validate if the designated constraints
// aren't met.
type DpaiHmsSizeGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeGetByNameRequestValidationError) ErrorName() string {
	return "DpaiHmsSizeGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeGetByNameRequestValidationError{}

// Validate checks the field values on DpaiHmsSizeUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeUpdateRequestMultiError, or nil if none found.
func (m *DpaiHmsSizeUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for NumberOfInstancesDefault

	// no validation rules for NumberOfInstancesMin

	// no validation rules for NumberOfInstancesMax

	// no validation rules for InstanceTypeId

	// no validation rules for CreatedBy

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuRequest

	// no validation rules for ResourceMemoryLimit

	// no validation rules for ResourceMemoryRequest

	// no validation rules for BackendDatabaseSizeId

	if len(errors) > 0 {
		return DpaiHmsSizeUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsSizeUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsSizeUpdateRequestValidationError is the validation error returned by
// DpaiHmsSizeUpdateRequest.Validate if the designated constraints aren't met.
type DpaiHmsSizeUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeUpdateRequestValidationError) ErrorName() string {
	return "DpaiHmsSizeUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeUpdateRequestValidationError{}

// Validate checks the field values on DpaiHmsSizeDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeDeleteRequestMultiError, or nil if none found.
func (m *DpaiHmsSizeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsSizeDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsSizeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiHmsSizeDeleteRequestValidationError is the validation error returned by
// DpaiHmsSizeDeleteRequest.Validate if the designated constraints aren't met.
type DpaiHmsSizeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeDeleteRequestValidationError) ErrorName() string {
	return "DpaiHmsSizeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeDeleteRequestValidationError{}

// Validate checks the field values on DpaiHmsSizeDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizeDeleteResponseMultiError, or nil if none found.
func (m *DpaiHmsSizeDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiHmsSizeDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsSizeDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeDeleteResponse.ValidateAll() if the
// designated constraints aren't met.
type DpaiHmsSizeDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizeDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizeDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiHmsSizeDeleteResponseValidationError is the validation error returned by
// DpaiHmsSizeDeleteResponse.Validate if the designated constraints aren't met.
type DpaiHmsSizeDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizeDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizeDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizeDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizeDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizeDeleteResponseValidationError) ErrorName() string {
	return "DpaiHmsSizeDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizeDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizeDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizeDeleteResponseValidationError{}

// Validate checks the field values on DpaiHmsVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiHmsVersionMultiError,
// or nil if none found.
func (m *DpaiHmsVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for HmsVersion

	// no validation rules for BackendDatabaseVersionId

	if all {
		switch v := interface{}(m.GetImageReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsVersionValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsVersionValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsVersionValidationError{
				field:  "ImageReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsVersionValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsVersionValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsVersionValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackwardCompatibleFrom

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsVersionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsVersionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsVersionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsVersionMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionMultiError is an error wrapping multiple validation errors
// returned by DpaiHmsVersion.ValidateAll() if the designated constraints
// aren't met.
type DpaiHmsVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionMultiError) AllErrors() []error { return m }

// DpaiHmsVersionValidationError is the validation error returned by
// DpaiHmsVersion.Validate if the designated constraints aren't met.
type DpaiHmsVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionValidationError) ErrorName() string { return "DpaiHmsVersionValidationError" }

// Error satisfies the builtin error interface
func (e DpaiHmsVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionValidationError{}

// Validate checks the field values on DpaiHmsVersionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionCreateRequestMultiError, or nil if none found.
func (m *DpaiHmsVersionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for HmsVersion

	// no validation rules for BackendDatabaseVersionId

	if all {
		switch v := interface{}(m.GetImageReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsVersionCreateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsVersionCreateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsVersionCreateRequestValidationError{
				field:  "ImageReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsVersionCreateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsVersionCreateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsVersionCreateRequestValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackwardCompatibleFrom

	if len(errors) > 0 {
		return DpaiHmsVersionCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsVersionCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsVersionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionCreateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsVersionCreateRequestValidationError is the validation error returned
// by DpaiHmsVersionCreateRequest.Validate if the designated constraints
// aren't met.
type DpaiHmsVersionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionCreateRequestValidationError) ErrorName() string {
	return "DpaiHmsVersionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionCreateRequestValidationError{}

// Validate checks the field values on DpaiHmsVersionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionListRequestMultiError, or nil if none found.
func (m *DpaiHmsVersionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DpaiHmsVersionListRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionListRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsVersionListRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiHmsVersionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionListRequestMultiError) AllErrors() []error { return m }

// DpaiHmsVersionListRequestValidationError is the validation error returned by
// DpaiHmsVersionListRequest.Validate if the designated constraints aren't met.
type DpaiHmsVersionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionListRequestValidationError) ErrorName() string {
	return "DpaiHmsVersionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionListRequestValidationError{}

// Validate checks the field values on DpaiHmsVersionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionListResponseMultiError, or nil if none found.
func (m *DpaiHmsVersionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiHmsVersionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiHmsVersionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiHmsVersionListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiHmsVersionListResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsVersionListResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsVersionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionListResponseMultiError) AllErrors() []error { return m }

// DpaiHmsVersionListResponseValidationError is the validation error returned
// by DpaiHmsVersionListResponse.Validate if the designated constraints aren't met.
type DpaiHmsVersionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionListResponseValidationError) ErrorName() string {
	return "DpaiHmsVersionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionListResponseValidationError{}

// Validate checks the field values on DpaiHmsVersionGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionGetByIdRequestMultiError, or nil if none found.
func (m *DpaiHmsVersionGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsVersionGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsVersionGetByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsVersionGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiHmsVersionGetByIdRequestValidationError is the validation error returned
// by DpaiHmsVersionGetByIdRequest.Validate if the designated constraints
// aren't met.
type DpaiHmsVersionGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionGetByIdRequestValidationError) ErrorName() string {
	return "DpaiHmsVersionGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionGetByIdRequestValidationError{}

// Validate checks the field values on DpaiHmsVersionGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionGetByNameRequestMultiError, or nil if none found.
func (m *DpaiHmsVersionGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DpaiHmsVersionGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsVersionGetByNameRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiHmsVersionGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiHmsVersionGetByNameRequestValidationError is the validation error
// returned by DpaiHmsVersionGetByNameRequest.Validate if the designated
// constraints aren't met.
type DpaiHmsVersionGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionGetByNameRequestValidationError) ErrorName() string {
	return "DpaiHmsVersionGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionGetByNameRequestValidationError{}

// Validate checks the field values on DpaiHmsVersionUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionUpdateRequestMultiError, or nil if none found.
func (m *DpaiHmsVersionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetImageReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsVersionUpdateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsVersionUpdateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsVersionUpdateRequestValidationError{
				field:  "ImageReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsVersionUpdateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsVersionUpdateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsVersionUpdateRequestValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackwardCompatibleFrom

	if len(errors) > 0 {
		return DpaiHmsVersionUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsVersionUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsVersionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsVersionUpdateRequestValidationError is the validation error returned
// by DpaiHmsVersionUpdateRequest.Validate if the designated constraints
// aren't met.
type DpaiHmsVersionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionUpdateRequestValidationError) ErrorName() string {
	return "DpaiHmsVersionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionUpdateRequestValidationError{}

// Validate checks the field values on DpaiHmsVersionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionDeleteRequestMultiError, or nil if none found.
func (m *DpaiHmsVersionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsVersionDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsVersionDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsVersionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiHmsVersionDeleteRequestValidationError is the validation error returned
// by DpaiHmsVersionDeleteRequest.Validate if the designated constraints
// aren't met.
type DpaiHmsVersionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionDeleteRequestValidationError) ErrorName() string {
	return "DpaiHmsVersionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionDeleteRequestValidationError{}

// Validate checks the field values on DpaiHmsVersionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsVersionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsVersionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsVersionDeleteResponseMultiError, or nil if none found.
func (m *DpaiHmsVersionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsVersionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiHmsVersionDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsVersionDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiHmsVersionDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiHmsVersionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsVersionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsVersionDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiHmsVersionDeleteResponseValidationError is the validation error returned
// by DpaiHmsVersionDeleteResponse.Validate if the designated constraints
// aren't met.
type DpaiHmsVersionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsVersionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsVersionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsVersionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsVersionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsVersionDeleteResponseValidationError) ErrorName() string {
	return "DpaiHmsVersionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsVersionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsVersionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsVersionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsVersionDeleteResponseValidationError{}

// Validate checks the field values on DpaiHmsSizeProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsSizeProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsSizeProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsSizePropertiesMultiError, or nil if none found.
func (m *DpaiHmsSizeProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsSizeProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SizeId

	// no validation rules for NumberOfInstances

	if len(errors) > 0 {
		return DpaiHmsSizePropertiesMultiError(errors)
	}

	return nil
}

// DpaiHmsSizePropertiesMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsSizeProperties.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsSizePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsSizePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsSizePropertiesMultiError) AllErrors() []error { return m }

// DpaiHmsSizePropertiesValidationError is the validation error returned by
// DpaiHmsSizeProperties.Validate if the designated constraints aren't met.
type DpaiHmsSizePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsSizePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsSizePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsSizePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsSizePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsSizePropertiesValidationError) ErrorName() string {
	return "DpaiHmsSizePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsSizePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsSizeProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsSizePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsSizePropertiesValidationError{}

// Validate checks the field values on DpaiHms with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiHms) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHms with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DpaiHmsMultiError, or nil if none found.
func (m *DpaiHms) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHms) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkspaceId

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for VersionId

	// no validation rules for Description

	// no validation rules for Tags

	if all {
		switch v := interface{}(m.GetSizeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSizeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsValidationError{
				field:  "SizeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObjectStoreProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "ObjectStoreProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "ObjectStoreProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObjectStoreProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsValidationError{
				field:  "ObjectStoreProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Endpoint

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeploymentMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsValidationError{
				field:  "DeploymentMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsMultiError(errors)
	}

	return nil
}

// DpaiHmsMultiError is an error wrapping multiple validation errors returned
// by DpaiHms.ValidateAll() if the designated constraints aren't met.
type DpaiHmsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsMultiError) AllErrors() []error { return m }

// DpaiHmsValidationError is the validation error returned by DpaiHms.Validate
// if the designated constraints aren't met.
type DpaiHmsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsValidationError) ErrorName() string { return "DpaiHmsValidationError" }

// Error satisfies the builtin error interface
func (e DpaiHmsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsValidationError{}

// Validate checks the field values on DpaiHmsCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsCreateRequestMultiError, or nil if none found.
func (m *DpaiHmsCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkspaceId

	// no validation rules for Name

	// no validation rules for VersionId

	if all {
		switch v := interface{}(m.GetSizeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsCreateRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsCreateRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSizeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsCreateRequestValidationError{
				field:  "SizeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for Tags

	if all {
		switch v := interface{}(m.GetObjectStoreProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiHmsCreateRequestValidationError{
					field:  "ObjectStoreProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiHmsCreateRequestValidationError{
					field:  "ObjectStoreProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObjectStoreProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiHmsCreateRequestValidationError{
				field:  "ObjectStoreProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiHmsCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsCreateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsCreateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsCreateRequestValidationError is the validation error returned by
// DpaiHmsCreateRequest.Validate if the designated constraints aren't met.
type DpaiHmsCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsCreateRequestValidationError) ErrorName() string {
	return "DpaiHmsCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsCreateRequestValidationError{}

// Validate checks the field values on DpaiHmsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsListRequestMultiError, or nil if none found.
func (m *DpaiHmsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return DpaiHmsListRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsListRequestMultiError is an error wrapping multiple validation errors
// returned by DpaiHmsListRequest.ValidateAll() if the designated constraints
// aren't met.
type DpaiHmsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsListRequestMultiError) AllErrors() []error { return m }

// DpaiHmsListRequestValidationError is the validation error returned by
// DpaiHmsListRequest.Validate if the designated constraints aren't met.
type DpaiHmsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsListRequestValidationError) ErrorName() string {
	return "DpaiHmsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsListRequestValidationError{}

// Validate checks the field values on DpaiHmsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsListResponseMultiError, or nil if none found.
func (m *DpaiHmsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiHmsListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiHmsListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiHmsListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiHmsListResponseMultiError(errors)
	}

	return nil
}

// DpaiHmsListResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsListResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsListResponseMultiError) AllErrors() []error { return m }

// DpaiHmsListResponseValidationError is the validation error returned by
// DpaiHmsListResponse.Validate if the designated constraints aren't met.
type DpaiHmsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsListResponseValidationError) ErrorName() string {
	return "DpaiHmsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsListResponseValidationError{}

// Validate checks the field values on DpaiHmsGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsGetByIdRequestMultiError, or nil if none found.
func (m *DpaiHmsGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsGetByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsGetByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiHmsGetByIdRequestValidationError is the validation error returned by
// DpaiHmsGetByIdRequest.Validate if the designated constraints aren't met.
type DpaiHmsGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsGetByIdRequestValidationError) ErrorName() string {
	return "DpaiHmsGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsGetByIdRequestValidationError{}

// Validate checks the field values on DpaiHmsGetByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsGetByNameRequestMultiError, or nil if none found.
func (m *DpaiHmsGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return DpaiHmsGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsGetByNameRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsGetByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiHmsGetByNameRequestValidationError is the validation error returned by
// DpaiHmsGetByNameRequest.Validate if the designated constraints aren't met.
type DpaiHmsGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsGetByNameRequestValidationError) ErrorName() string {
	return "DpaiHmsGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsGetByNameRequestValidationError{}

// Validate checks the field values on DpaiHmsDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsDeleteRequestMultiError, or nil if none found.
func (m *DpaiHmsDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiHmsDeleteRequestValidationError is the validation error returned by
// DpaiHmsDeleteRequest.Validate if the designated constraints aren't met.
type DpaiHmsDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsDeleteRequestValidationError) ErrorName() string {
	return "DpaiHmsDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsDeleteRequestValidationError{}

// Validate checks the field values on DpaiHmsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsUpdateRequestMultiError, or nil if none found.
func (m *DpaiHmsUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for Tags

	if len(errors) > 0 {
		return DpaiHmsUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiHmsUpdateRequestValidationError is the validation error returned by
// DpaiHmsUpdateRequest.Validate if the designated constraints aren't met.
type DpaiHmsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsUpdateRequestValidationError) ErrorName() string {
	return "DpaiHmsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsUpdateRequestValidationError{}

// Validate checks the field values on DpaiHmsRestartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsRestartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsRestartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsRestartRequestMultiError, or nil if none found.
func (m *DpaiHmsRestartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsRestartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsRestartRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsRestartRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsRestartRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsRestartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsRestartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsRestartRequestMultiError) AllErrors() []error { return m }

// DpaiHmsRestartRequestValidationError is the validation error returned by
// DpaiHmsRestartRequest.Validate if the designated constraints aren't met.
type DpaiHmsRestartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsRestartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsRestartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsRestartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsRestartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsRestartRequestValidationError) ErrorName() string {
	return "DpaiHmsRestartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsRestartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsRestartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsRestartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsRestartRequestValidationError{}

// Validate checks the field values on DpaiHmsResizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsResizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsResizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsResizeRequestMultiError, or nil if none found.
func (m *DpaiHmsResizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsResizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SizeId

	// no validation rules for NumberOfInstances

	if len(errors) > 0 {
		return DpaiHmsResizeRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsResizeRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsResizeRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsResizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsResizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsResizeRequestMultiError) AllErrors() []error { return m }

// DpaiHmsResizeRequestValidationError is the validation error returned by
// DpaiHmsResizeRequest.Validate if the designated constraints aren't met.
type DpaiHmsResizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsResizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsResizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsResizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsResizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsResizeRequestValidationError) ErrorName() string {
	return "DpaiHmsResizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsResizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsResizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsResizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsResizeRequestValidationError{}

// Validate checks the field values on DpaiHmsListUpgradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsListUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsListUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsListUpgradeRequestMultiError, or nil if none found.
func (m *DpaiHmsListUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsListUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiHmsListUpgradeRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsListUpgradeRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsListUpgradeRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiHmsListUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsListUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsListUpgradeRequestMultiError) AllErrors() []error { return m }

// DpaiHmsListUpgradeRequestValidationError is the validation error returned by
// DpaiHmsListUpgradeRequest.Validate if the designated constraints aren't met.
type DpaiHmsListUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsListUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsListUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsListUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsListUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsListUpgradeRequestValidationError) ErrorName() string {
	return "DpaiHmsListUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsListUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsListUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsListUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsListUpgradeRequestValidationError{}

// Validate checks the field values on DpaiHmsUpgradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiHmsUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiHmsUpgradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiHmsUpgradeRequestMultiError, or nil if none found.
func (m *DpaiHmsUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiHmsUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for VersionId

	if len(errors) > 0 {
		return DpaiHmsUpgradeRequestMultiError(errors)
	}

	return nil
}

// DpaiHmsUpgradeRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiHmsUpgradeRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiHmsUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiHmsUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiHmsUpgradeRequestMultiError) AllErrors() []error { return m }

// DpaiHmsUpgradeRequestValidationError is the validation error returned by
// DpaiHmsUpgradeRequest.Validate if the designated constraints aren't met.
type DpaiHmsUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiHmsUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiHmsUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiHmsUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiHmsUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiHmsUpgradeRequestValidationError) ErrorName() string {
	return "DpaiHmsUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiHmsUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiHmsUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiHmsUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiHmsUpgradeRequestValidationError{}
