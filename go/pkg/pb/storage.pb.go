// This file contains PRIVATE services that are intended for IDC infrastructure (controllers)
// and trusted parties. It is not a part of the public API.
// After updating this file, run "make generate".
//
// See:
//  - https://developers.google.com/protocol-buffers/docs/proto3
//  - https://github.com/googleapis/googleapis/blob/master/google/api/http.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: storage.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilesystemType int32

const (
	FilesystemType_Unspecified       FilesystemType = 0
	FilesystemType_ComputeGeneral    FilesystemType = 1
	FilesystemType_ComputeKubernetes FilesystemType = 2
)

// Enum value maps for FilesystemType.
var (
	FilesystemType_name = map[int32]string{
		0: "Unspecified",
		1: "ComputeGeneral",
		2: "ComputeKubernetes",
	}
	FilesystemType_value = map[string]int32{
		"Unspecified":       0,
		"ComputeGeneral":    1,
		"ComputeKubernetes": 2,
	}
)

func (x FilesystemType) Enum() *FilesystemType {
	p := new(FilesystemType)
	*p = x
	return p
}

func (x FilesystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[0].Descriptor()
}

func (FilesystemType) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[0]
}

func (x FilesystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemType.Descriptor instead.
func (FilesystemType) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{0}
}

type FilesystemStorageClass int32

const (
	// stoarge classes
	FilesystemStorageClass_GeneralPurpose FilesystemStorageClass = 0
	// AI Workload optimized storage class
	FilesystemStorageClass_AIOptimized FilesystemStorageClass = 1
	// stoarge classes
	FilesystemStorageClass_GeneralPurposeStd FilesystemStorageClass = 2
)

// Enum value maps for FilesystemStorageClass.
var (
	FilesystemStorageClass_name = map[int32]string{
		0: "GeneralPurpose",
		1: "AIOptimized",
		2: "GeneralPurposeStd",
	}
	FilesystemStorageClass_value = map[string]int32{
		"GeneralPurpose":    0,
		"AIOptimized":       1,
		"GeneralPurposeStd": 2,
	}
)

func (x FilesystemStorageClass) Enum() *FilesystemStorageClass {
	p := new(FilesystemStorageClass)
	*p = x
	return p
}

func (x FilesystemStorageClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemStorageClass) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[1].Descriptor()
}

func (FilesystemStorageClass) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[1]
}

func (x FilesystemStorageClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemStorageClass.Descriptor instead.
func (FilesystemStorageClass) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{1}
}

type FilesystemAccessModes int32

const (
	// Read-Write
	FilesystemAccessModes_ReadWrite FilesystemAccessModes = 0
	// Read-Only
	FilesystemAccessModes_ReadOnly FilesystemAccessModes = 1
	// ReadWriteOnce
	FilesystemAccessModes_ReadWriteOnce FilesystemAccessModes = 2
)

// Enum value maps for FilesystemAccessModes.
var (
	FilesystemAccessModes_name = map[int32]string{
		0: "ReadWrite",
		1: "ReadOnly",
		2: "ReadWriteOnce",
	}
	FilesystemAccessModes_value = map[string]int32{
		"ReadWrite":     0,
		"ReadOnly":      1,
		"ReadWriteOnce": 2,
	}
)

func (x FilesystemAccessModes) Enum() *FilesystemAccessModes {
	p := new(FilesystemAccessModes)
	*p = x
	return p
}

func (x FilesystemAccessModes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemAccessModes) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[2].Descriptor()
}

func (FilesystemAccessModes) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[2]
}

func (x FilesystemAccessModes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemAccessModes.Descriptor instead.
func (FilesystemAccessModes) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{2}
}

type FilesystemMountProtocols int32

const (
	// Weka
	FilesystemMountProtocols_Weka FilesystemMountProtocols = 0
	// NFS
	FilesystemMountProtocols_NFS FilesystemMountProtocols = 1
)

// Enum value maps for FilesystemMountProtocols.
var (
	FilesystemMountProtocols_name = map[int32]string{
		0: "Weka",
		1: "NFS",
	}
	FilesystemMountProtocols_value = map[string]int32{
		"Weka": 0,
		"NFS":  1,
	}
)

func (x FilesystemMountProtocols) Enum() *FilesystemMountProtocols {
	p := new(FilesystemMountProtocols)
	*p = x
	return p
}

func (x FilesystemMountProtocols) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemMountProtocols) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[3].Descriptor()
}

func (FilesystemMountProtocols) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[3]
}

func (x FilesystemMountProtocols) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemMountProtocols.Descriptor instead.
func (FilesystemMountProtocols) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{3}
}

type FilesystemPhase int32

const (
	// The system is provisioning filesystem volume.
	// Default.
	FilesystemPhase_FSProvisioning FilesystemPhase = 0
	// The filesystem volume is provisioned and ready to mount.
	FilesystemPhase_FSReady FilesystemPhase = 1
	// The filesystem volume is in process of being deleted.
	FilesystemPhase_FSDeleting FilesystemPhase = 2
	// The filesystem volume is deleted.
	FilesystemPhase_FSDeleted FilesystemPhase = 3
	// The filesystem volume creation failed.
	FilesystemPhase_FSFailed FilesystemPhase = 4
	// The filesystem volume is being updated
	FilesystemPhase_FSUpdating FilesystemPhase = 5
)

// Enum value maps for FilesystemPhase.
var (
	FilesystemPhase_name = map[int32]string{
		0: "FSProvisioning",
		1: "FSReady",
		2: "FSDeleting",
		3: "FSDeleted",
		4: "FSFailed",
		5: "FSUpdating",
	}
	FilesystemPhase_value = map[string]int32{
		"FSProvisioning": 0,
		"FSReady":        1,
		"FSDeleting":     2,
		"FSDeleted":      3,
		"FSFailed":       4,
		"FSUpdating":     5,
	}
)

func (x FilesystemPhase) Enum() *FilesystemPhase {
	p := new(FilesystemPhase)
	*p = x
	return p
}

func (x FilesystemPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[4].Descriptor()
}

func (FilesystemPhase) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[4]
}

func (x FilesystemPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemPhase.Descriptor instead.
func (FilesystemPhase) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{4}
}

type BucketAccessPolicy int32

const (
	// If policy was not provided, will default to `ACCESS_POLICY_NONE` on creation
	BucketAccessPolicy_UNSPECIFIED BucketAccessPolicy = 0
	// No access by default, equals to private, explicit IAM policy need to be attached
	BucketAccessPolicy_NONE BucketAccessPolicy = 1
	// Read only public access
	BucketAccessPolicy_READ BucketAccessPolicy = 2
	// Read/Write public access
	BucketAccessPolicy_READ_WRITE BucketAccessPolicy = 3
)

// Enum value maps for BucketAccessPolicy.
var (
	BucketAccessPolicy_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NONE",
		2: "READ",
		3: "READ_WRITE",
	}
	BucketAccessPolicy_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NONE":        1,
		"READ":        2,
		"READ_WRITE":  3,
	}
)

func (x BucketAccessPolicy) Enum() *BucketAccessPolicy {
	p := new(BucketAccessPolicy)
	*p = x
	return p
}

func (x BucketAccessPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketAccessPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[5].Descriptor()
}

func (BucketAccessPolicy) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[5]
}

func (x BucketAccessPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketAccessPolicy.Descriptor instead.
func (BucketAccessPolicy) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{5}
}

type BucketPhase int32

const (
	// The system is provisioning bucket.
	// Default.
	BucketPhase_BucketProvisioning BucketPhase = 0
	// The bucket is provisioned and ready to mount.
	BucketPhase_BucketReady BucketPhase = 1
	// The bucket is in process of being deleted.
	BucketPhase_BucketDeleting BucketPhase = 2
	// The bucket is deleted.
	BucketPhase_BucketDeleted BucketPhase = 3
	// The bucket creation failed.
	BucketPhase_BucketFailed BucketPhase = 4
)

// Enum value maps for BucketPhase.
var (
	BucketPhase_name = map[int32]string{
		0: "BucketProvisioning",
		1: "BucketReady",
		2: "BucketDeleting",
		3: "BucketDeleted",
		4: "BucketFailed",
	}
	BucketPhase_value = map[string]int32{
		"BucketProvisioning": 0,
		"BucketReady":        1,
		"BucketDeleting":     2,
		"BucketDeleted":      3,
		"BucketFailed":       4,
	}
)

func (x BucketPhase) Enum() *BucketPhase {
	p := new(BucketPhase)
	*p = x
	return p
}

func (x BucketPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[6].Descriptor()
}

func (BucketPhase) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[6]
}

func (x BucketPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketPhase.Descriptor instead.
func (BucketPhase) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{6}
}

type BucketLifecycleRuleSPhase int32

const (
	BucketLifecycleRuleSPhase_LFRuleProvisioning BucketLifecycleRuleSPhase = 0
	BucketLifecycleRuleSPhase_LFRuleReady        BucketLifecycleRuleSPhase = 1
	BucketLifecycleRuleSPhase_LFRuleFailed       BucketLifecycleRuleSPhase = 2
	BucketLifecycleRuleSPhase_LFRuleDeleting     BucketLifecycleRuleSPhase = 3
)

// Enum value maps for BucketLifecycleRuleSPhase.
var (
	BucketLifecycleRuleSPhase_name = map[int32]string{
		0: "LFRuleProvisioning",
		1: "LFRuleReady",
		2: "LFRuleFailed",
		3: "LFRuleDeleting",
	}
	BucketLifecycleRuleSPhase_value = map[string]int32{
		"LFRuleProvisioning": 0,
		"LFRuleReady":        1,
		"LFRuleFailed":       2,
		"LFRuleDeleting":     3,
	}
)

func (x BucketLifecycleRuleSPhase) Enum() *BucketLifecycleRuleSPhase {
	p := new(BucketLifecycleRuleSPhase)
	*p = x
	return p
}

func (x BucketLifecycleRuleSPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketLifecycleRuleSPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[7].Descriptor()
}

func (BucketLifecycleRuleSPhase) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[7]
}

func (x BucketLifecycleRuleSPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketLifecycleRuleSPhase.Descriptor instead.
func (BucketLifecycleRuleSPhase) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{7}
}

type ObjectBucketActions int32

const (
	ObjectBucketActions_GetBucketLocation          ObjectBucketActions = 0
	ObjectBucketActions_GetBucketPolicy            ObjectBucketActions = 1
	ObjectBucketActions_ListBucket                 ObjectBucketActions = 2
	ObjectBucketActions_ListBucketMultipartUploads ObjectBucketActions = 3
	ObjectBucketActions_ListMultipartUploadParts   ObjectBucketActions = 4
	ObjectBucketActions_GetBucketTagging           ObjectBucketActions = 5
)

// Enum value maps for ObjectBucketActions.
var (
	ObjectBucketActions_name = map[int32]string{
		0: "GetBucketLocation",
		1: "GetBucketPolicy",
		2: "ListBucket",
		3: "ListBucketMultipartUploads",
		4: "ListMultipartUploadParts",
		5: "GetBucketTagging",
	}
	ObjectBucketActions_value = map[string]int32{
		"GetBucketLocation":          0,
		"GetBucketPolicy":            1,
		"ListBucket":                 2,
		"ListBucketMultipartUploads": 3,
		"ListMultipartUploadParts":   4,
		"GetBucketTagging":           5,
	}
)

func (x ObjectBucketActions) Enum() *ObjectBucketActions {
	p := new(ObjectBucketActions)
	*p = x
	return p
}

func (x ObjectBucketActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectBucketActions) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[8].Descriptor()
}

func (ObjectBucketActions) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[8]
}

func (x ObjectBucketActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectBucketActions.Descriptor instead.
func (ObjectBucketActions) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{8}
}

type BucketPermission int32

const (
	// Equal to granting:
	// ```
	// s3:GetObject
	// ```
	BucketPermission_ReadBucket BucketPermission = 0
	// Equal to granting:
	// ```
	// s3:AbortMultipartUpload
	// s3:PutObject
	// ```
	BucketPermission_WriteBucket BucketPermission = 1
	// Equal to granting:
	// ```
	// s3:DeleteObject
	// ```
	BucketPermission_DeleteBucket BucketPermission = 2
)

// Enum value maps for BucketPermission.
var (
	BucketPermission_name = map[int32]string{
		0: "ReadBucket",
		1: "WriteBucket",
		2: "DeleteBucket",
	}
	BucketPermission_value = map[string]int32{
		"ReadBucket":   0,
		"WriteBucket":  1,
		"DeleteBucket": 2,
	}
)

func (x BucketPermission) Enum() *BucketPermission {
	p := new(BucketPermission)
	*p = x
	return p
}

func (x BucketPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[9].Descriptor()
}

func (BucketPermission) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[9]
}

func (x BucketPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketPermission.Descriptor instead.
func (BucketPermission) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{9}
}

type ObjectUserPhase int32

const (
	// The system is provisioning bucket.
	// Default.
	ObjectUserPhase_ObjectUserProvisioning ObjectUserPhase = 0
	// The user is provisioned and ready to mount.
	ObjectUserPhase_ObjectUserReady ObjectUserPhase = 1
	// The user is in process of being deleted.
	ObjectUserPhase_ObjectUserDeleting ObjectUserPhase = 2
	// The user is deleted.
	ObjectUserPhase_ObjectUserDeleted ObjectUserPhase = 3
	// The user creation failed.
	ObjectUserPhase_ObjectUserFailed ObjectUserPhase = 4
)

// Enum value maps for ObjectUserPhase.
var (
	ObjectUserPhase_name = map[int32]string{
		0: "ObjectUserProvisioning",
		1: "ObjectUserReady",
		2: "ObjectUserDeleting",
		3: "ObjectUserDeleted",
		4: "ObjectUserFailed",
	}
	ObjectUserPhase_value = map[string]int32{
		"ObjectUserProvisioning": 0,
		"ObjectUserReady":        1,
		"ObjectUserDeleting":     2,
		"ObjectUserDeleted":      3,
		"ObjectUserFailed":       4,
	}
)

func (x ObjectUserPhase) Enum() *ObjectUserPhase {
	p := new(ObjectUserPhase)
	*p = x
	return p
}

func (x ObjectUserPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectUserPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[10].Descriptor()
}

func (ObjectUserPhase) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[10]
}

func (x ObjectUserPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectUserPhase.Descriptor instead.
func (ObjectUserPhase) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{10}
}

type FilesystemCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataCreate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpec           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *FilesystemCreateRequest) Reset() {
	*x = FilesystemCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemCreateRequest) ProtoMessage() {}

func (x *FilesystemCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemCreateRequest.ProtoReflect.Descriptor instead.
func (*FilesystemCreateRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{0}
}

func (x *FilesystemCreateRequest) GetMetadata() *FilesystemMetadataCreate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemCreateRequest) GetSpec() *FilesystemSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FilesystemGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemGetRequest) Reset() {
	*x = FilesystemGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemGetRequest) ProtoMessage() {}

func (x *FilesystemGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemGetRequest.ProtoReflect.Descriptor instead.
func (*FilesystemGetRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{1}
}

func (x *FilesystemGetRequest) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FilesystemGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemGetUserRequest) Reset() {
	*x = FilesystemGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemGetUserRequest) ProtoMessage() {}

func (x *FilesystemGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemGetUserRequest.ProtoReflect.Descriptor instead.
func (*FilesystemGetUserRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{2}
}

func (x *FilesystemGetUserRequest) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FilesystemGetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filesystem user name
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Filesystem user password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FilesystemGetUserResponse) Reset() {
	*x = FilesystemGetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemGetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemGetUserResponse) ProtoMessage() {}

func (x *FilesystemGetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemGetUserResponse.ProtoReflect.Descriptor instead.
func (*FilesystemGetUserResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{3}
}

func (x *FilesystemGetUserResponse) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FilesystemGetUserResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FilesystemSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataSearch `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemSearchRequest) Reset() {
	*x = FilesystemSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSearchRequest) ProtoMessage() {}

func (x *FilesystemSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSearchRequest.ProtoReflect.Descriptor instead.
func (*FilesystemSearchRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{4}
}

func (x *FilesystemSearchRequest) GetMetadata() *FilesystemMetadataSearch {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FilesystemSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Filesystem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FilesystemSearchResponse) Reset() {
	*x = FilesystemSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSearchResponse) ProtoMessage() {}

func (x *FilesystemSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSearchResponse.ProtoReflect.Descriptor instead.
func (*FilesystemSearchResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{5}
}

func (x *FilesystemSearchResponse) GetItems() []*Filesystem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FilesystemUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataUpdate `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The entire spec will be replaced.
	Spec *FilesystemSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *FilesystemUpdateRequest) Reset() {
	*x = FilesystemUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemUpdateRequest) ProtoMessage() {}

func (x *FilesystemUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemUpdateRequest.ProtoReflect.Descriptor instead.
func (*FilesystemUpdateRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{6}
}

func (x *FilesystemUpdateRequest) GetMetadata() *FilesystemMetadataUpdate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FilesystemUpdateRequest) GetSpec() *FilesystemSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FilesystemDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadataReference `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FilesystemDeleteRequest) Reset() {
	*x = FilesystemDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDeleteRequest) ProtoMessage() {}

func (x *FilesystemDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDeleteRequest.ProtoReflect.Descriptor instead.
func (*FilesystemDeleteRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{7}
}

func (x *FilesystemDeleteRequest) GetMetadata() *FilesystemMetadataReference {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *FilesystemMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *FilesystemSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *FilesystemStatus   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{8}
}

func (x *Filesystem) GetMetadata() *FilesystemMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Filesystem) GetSpec() *FilesystemSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Filesystem) GetStatus() *FilesystemStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type FilesystemSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented.
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// Requested size in GB
	Request *FilesystemCapacity `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// storage class - Not Implemented
	StorageClass FilesystemStorageClass `protobuf:"varint,3,opt,name=storageClass,proto3,enum=proto.FilesystemStorageClass" json:"storageClass,omitempty"`
	// Filesystem type - GeneralCompute (VM, BM) or K8s
	FilesystemType FilesystemType `protobuf:"varint,4,opt,name=filesystemType,proto3,enum=proto.FilesystemType" json:"filesystemType,omitempty"`
	// Access mode - Not Implemented
	AccessModes FilesystemAccessModes `protobuf:"varint,5,opt,name=accessModes,proto3,enum=proto.FilesystemAccessModes" json:"accessModes,omitempty"`
	// Mount protocols -- Currently supports only weka
	MountProtocol FilesystemMountProtocols `protobuf:"varint,6,opt,name=mountProtocol,proto3,enum=proto.FilesystemMountProtocols" json:"mountProtocol,omitempty"`
	// Encryption flag
	Encrypted bool `protobuf:"varint,7,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// The name of the Instance type
	InstanceType string `protobuf:"bytes,8,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *FilesystemSpec) Reset() {
	*x = FilesystemSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSpec) ProtoMessage() {}

func (x *FilesystemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSpec.ProtoReflect.Descriptor instead.
func (*FilesystemSpec) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{9}
}

func (x *FilesystemSpec) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *FilesystemSpec) GetRequest() *FilesystemCapacity {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FilesystemSpec) GetStorageClass() FilesystemStorageClass {
	if x != nil {
		return x.StorageClass
	}
	return FilesystemStorageClass_GeneralPurpose
}

func (x *FilesystemSpec) GetFilesystemType() FilesystemType {
	if x != nil {
		return x.FilesystemType
	}
	return FilesystemType_Unspecified
}

func (x *FilesystemSpec) GetAccessModes() FilesystemAccessModes {
	if x != nil {
		return x.AccessModes
	}
	return FilesystemAccessModes_ReadWrite
}

func (x *FilesystemSpec) GetMountProtocol() FilesystemMountProtocols {
	if x != nil {
		return x.MountProtocol
	}
	return FilesystemMountProtocols_Weka
}

func (x *FilesystemSpec) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *FilesystemSpec) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type FilesystemSpecUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested size in GB
	Request *FilesystemCapacity `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *FilesystemSpecUpdate) Reset() {
	*x = FilesystemSpecUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemSpecUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSpecUpdate) ProtoMessage() {}

func (x *FilesystemSpecUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSpecUpdate.ProtoReflect.Descriptor instead.
func (*FilesystemSpecUpdate) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{10}
}

func (x *FilesystemSpecUpdate) GetRequest() *FilesystemCapacity {
	if x != nil {
		return x.Request
	}
	return nil
}

type FilesystemCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filesystem capacity in GB
	Storage string `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *FilesystemCapacity) Reset() {
	*x = FilesystemCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemCapacity) ProtoMessage() {}

func (x *FilesystemCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemCapacity.ProtoReflect.Descriptor instead.
func (*FilesystemCapacity) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{11}
}

func (x *FilesystemCapacity) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

type FilesystemMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	Description     string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	Labels            map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
}

func (x *FilesystemMetadata) Reset() {
	*x = FilesystemMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMetadata) ProtoMessage() {}

func (x *FilesystemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMetadata.ProtoReflect.Descriptor instead.
func (*FilesystemMetadata) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{12}
}

func (x *FilesystemMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *FilesystemMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemMetadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *FilesystemMetadata) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *FilesystemMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FilesystemMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FilesystemMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *FilesystemMetadata) GetUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTimestamp
	}
	return nil
}

func (x *FilesystemMetadata) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

type FilesystemMetadataCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name will be generated if empty.
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FilesystemMetadataCreate) Reset() {
	*x = FilesystemMetadataCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMetadataCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMetadataCreate) ProtoMessage() {}

func (x *FilesystemMetadataCreate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMetadataCreate.ProtoReflect.Descriptor instead.
func (*FilesystemMetadataCreate) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{13}
}

func (x *FilesystemMetadataCreate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *FilesystemMetadataCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilesystemMetadataCreate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FilesystemMetadataCreate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type FilesystemMetadataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*FilesystemMetadataUpdate_Name
	//	*FilesystemMetadataUpdate_ResourceId
	NameOrId isFilesystemMetadataUpdate_NameOrId `protobuf_oneof:"nameOrId"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The entire set of labels will be replaced with these labels.
	// Not implemented.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FilesystemMetadataUpdate) Reset() {
	*x = FilesystemMetadataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMetadataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMetadataUpdate) ProtoMessage() {}

func (x *FilesystemMetadataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMetadataUpdate.ProtoReflect.Descriptor instead.
func (*FilesystemMetadataUpdate) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{14}
}

func (x *FilesystemMetadataUpdate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *FilesystemMetadataUpdate) GetNameOrId() isFilesystemMetadataUpdate_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *FilesystemMetadataUpdate) GetName() string {
	if x, ok := x.GetNameOrId().(*FilesystemMetadataUpdate_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FilesystemMetadataUpdate) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*FilesystemMetadataUpdate_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

func (x *FilesystemMetadataUpdate) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *FilesystemMetadataUpdate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isFilesystemMetadataUpdate_NameOrId interface {
	isFilesystemMetadataUpdate_NameOrId()
}

type FilesystemMetadataUpdate_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type FilesystemMetadataUpdate_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*FilesystemMetadataUpdate_Name) isFilesystemMetadataUpdate_NameOrId() {}

func (*FilesystemMetadataUpdate_ResourceId) isFilesystemMetadataUpdate_NameOrId() {}

// A reference to a single filesystem volume.
type FilesystemMetadataReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*FilesystemMetadataReference_Name
	//	*FilesystemMetadataReference_ResourceId
	NameOrId isFilesystemMetadataReference_NameOrId `protobuf_oneof:"nameOrId"`
	// If provided, the existing record must have this resourceVersion for the request to succeed.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
}

func (x *FilesystemMetadataReference) Reset() {
	*x = FilesystemMetadataReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMetadataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMetadataReference) ProtoMessage() {}

func (x *FilesystemMetadataReference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMetadataReference.ProtoReflect.Descriptor instead.
func (*FilesystemMetadataReference) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{15}
}

func (x *FilesystemMetadataReference) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *FilesystemMetadataReference) GetNameOrId() isFilesystemMetadataReference_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *FilesystemMetadataReference) GetName() string {
	if x, ok := x.GetNameOrId().(*FilesystemMetadataReference_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FilesystemMetadataReference) GetResourceId() string {
	if x, ok := x.GetNameOrId().(*FilesystemMetadataReference_ResourceId); ok {
		return x.ResourceId
	}
	return ""
}

func (x *FilesystemMetadataReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type isFilesystemMetadataReference_NameOrId interface {
	isFilesystemMetadataReference_NameOrId()
}

type FilesystemMetadataReference_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type FilesystemMetadataReference_ResourceId struct {
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3,oneof"`
}

func (*FilesystemMetadataReference_Name) isFilesystemMetadataReference_NameOrId() {}

func (*FilesystemMetadataReference_ResourceId) isFilesystemMetadataReference_NameOrId() {}

type FilesystemMetadataSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// If not empty, only return instances that have these key/value pairs.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// filter by filesystem type
	FilterType FilesystemType `protobuf:"varint,3,opt,name=filterType,proto3,enum=proto.FilesystemType" json:"filterType,omitempty"`
}

func (x *FilesystemMetadataSearch) Reset() {
	*x = FilesystemMetadataSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMetadataSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMetadataSearch) ProtoMessage() {}

func (x *FilesystemMetadataSearch) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMetadataSearch.ProtoReflect.Descriptor instead.
func (*FilesystemMetadataSearch) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{16}
}

func (x *FilesystemMetadataSearch) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *FilesystemMetadataSearch) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FilesystemMetadataSearch) GetFilterType() FilesystemType {
	if x != nil {
		return x.FilterType
	}
	return FilesystemType_Unspecified
}

type FilesystemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filesystem phase.
	Phase FilesystemPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.FilesystemPhase" json:"phase,omitempty"`
	// Additional details about the state or any error conditions.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A mount interface with backend server
	Mount *FilesystemMountStatus `protobuf:"bytes,3,opt,name=mount,proto3" json:"mount,omitempty"`
	// Volume Security group
	SecurityGroup *VolumeSecurityGroup `protobuf:"bytes,4,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
}

func (x *FilesystemStatus) Reset() {
	*x = FilesystemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemStatus) ProtoMessage() {}

func (x *FilesystemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemStatus.ProtoReflect.Descriptor instead.
func (*FilesystemStatus) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{17}
}

func (x *FilesystemStatus) GetPhase() FilesystemPhase {
	if x != nil {
		return x.Phase
	}
	return FilesystemPhase_FSProvisioning
}

func (x *FilesystemStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FilesystemStatus) GetMount() *FilesystemMountStatus {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *FilesystemStatus) GetSecurityGroup() *VolumeSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

type FilesystemMountStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clusterName
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// clusterAddr
	ClusterAddr string `protobuf:"bytes,2,opt,name=clusterAddr,proto3" json:"clusterAddr,omitempty"`
	// cluster version when available
	ClusterVersion *string `protobuf:"bytes,3,opt,name=clusterVersion,proto3,oneof" json:"clusterVersion,omitempty"`
	// Name of the filesyste organization
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Username for this filesystem
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Name of the filesyste volume
	FilesystemName string `protobuf:"bytes,6,opt,name=filesystemName,proto3" json:"filesystemName,omitempty"`
	// volume mount path
	VolumePath string `protobuf:"bytes,7,opt,name=volumePath,proto3" json:"volumePath,omitempty"`
}

func (x *FilesystemMountStatus) Reset() {
	*x = FilesystemMountStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMountStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMountStatus) ProtoMessage() {}

func (x *FilesystemMountStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMountStatus.ProtoReflect.Descriptor instead.
func (*FilesystemMountStatus) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{18}
}

func (x *FilesystemMountStatus) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *FilesystemMountStatus) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *FilesystemMountStatus) GetClusterVersion() string {
	if x != nil && x.ClusterVersion != nil {
		return *x.ClusterVersion
	}
	return ""
}

func (x *FilesystemMountStatus) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FilesystemMountStatus) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FilesystemMountStatus) GetFilesystemName() string {
	if x != nil {
		return x.FilesystemName
	}
	return ""
}

func (x *FilesystemMountStatus) GetVolumePath() string {
	if x != nil {
		return x.VolumePath
	}
	return ""
}

type VolumeSecurityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkFilterAllow []*VolumeNetworkGroup `protobuf:"bytes,1,rep,name=networkFilterAllow,proto3" json:"networkFilterAllow,omitempty"`
}

func (x *VolumeSecurityGroup) Reset() {
	*x = VolumeSecurityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSecurityGroup) ProtoMessage() {}

func (x *VolumeSecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSecurityGroup.ProtoReflect.Descriptor instead.
func (*VolumeSecurityGroup) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{19}
}

func (x *VolumeSecurityGroup) GetNetworkFilterAllow() []*VolumeNetworkGroup {
	if x != nil {
		return x.NetworkFilterAllow
	}
	return nil
}

type VolumeNetworkGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet       string `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	PrefixLength int32  `protobuf:"varint,2,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	Gateway      string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *VolumeNetworkGroup) Reset() {
	*x = VolumeNetworkGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeNetworkGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeNetworkGroup) ProtoMessage() {}

func (x *VolumeNetworkGroup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeNetworkGroup.ProtoReflect.Descriptor instead.
func (*VolumeNetworkGroup) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{20}
}

func (x *VolumeNetworkGroup) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *VolumeNetworkGroup) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *VolumeNetworkGroup) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type ObjectBucketCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketCreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *ObjectBucketSpec           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ObjectBucketCreateRequest) Reset() {
	*x = ObjectBucketCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketCreateRequest) ProtoMessage() {}

func (x *ObjectBucketCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketCreateRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketCreateRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{21}
}

func (x *ObjectBucketCreateRequest) GetMetadata() *ObjectBucketCreateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectBucketCreateRequest) GetSpec() *ObjectBucketSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ObjectBucketCreateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Name will be generated if empty.
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectBucketCreateMetadata) Reset() {
	*x = ObjectBucketCreateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketCreateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketCreateMetadata) ProtoMessage() {}

func (x *ObjectBucketCreateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketCreateMetadata.ProtoReflect.Descriptor instead.
func (*ObjectBucketCreateMetadata) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{22}
}

func (x *ObjectBucketCreateMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectBucketCreateMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectBucketCreateMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectBucketCreateMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ObjectBucketSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented.
	AvailabilityZone string `protobuf:"bytes,1,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// Requested size in GB
	Request *StorageCapacityRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// Is bucket should be versioned, cannot be changed later
	Versioned bool `protobuf:"varint,3,opt,name=versioned,proto3" json:"versioned,omitempty"`
	// Default access policy for the bucket
	AccessPolicy BucketAccessPolicy `protobuf:"varint,4,opt,name=accessPolicy,proto3,enum=proto.BucketAccessPolicy" json:"accessPolicy,omitempty"`
	// The name of the Instance type
	InstanceType string `protobuf:"bytes,5,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *ObjectBucketSpec) Reset() {
	*x = ObjectBucketSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketSpec) ProtoMessage() {}

func (x *ObjectBucketSpec) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketSpec.ProtoReflect.Descriptor instead.
func (*ObjectBucketSpec) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{23}
}

func (x *ObjectBucketSpec) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *ObjectBucketSpec) GetRequest() *StorageCapacityRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ObjectBucketSpec) GetVersioned() bool {
	if x != nil {
		return x.Versioned
	}
	return false
}

func (x *ObjectBucketSpec) GetAccessPolicy() BucketAccessPolicy {
	if x != nil {
		return x.AccessPolicy
	}
	return BucketAccessPolicy_UNSPECIFIED
}

func (x *ObjectBucketSpec) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type StorageCapacityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *StorageCapacityRequest) Reset() {
	*x = StorageCapacityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageCapacityRequest) ProtoMessage() {}

func (x *StorageCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageCapacityRequest.ProtoReflect.Descriptor instead.
func (*StorageCapacityRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{24}
}

func (x *StorageCapacityRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type ObjectBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *ObjectBucketSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *ObjectBucketStatus   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ObjectBucket) Reset() {
	*x = ObjectBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucket) ProtoMessage() {}

func (x *ObjectBucket) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucket.ProtoReflect.Descriptor instead.
func (*ObjectBucket) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{25}
}

func (x *ObjectBucket) GetMetadata() *ObjectBucketMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectBucket) GetSpec() *ObjectBucketSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ObjectBucket) GetStatus() *ObjectBucketStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ObjectBucketMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId     string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// resourceVersion can be provided with Update and Delete for concurrency control.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	Description     string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Map of string keys and values that can be used to organize and categorize instances.
	Labels            map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
}

func (x *ObjectBucketMetadata) Reset() {
	*x = ObjectBucketMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketMetadata) ProtoMessage() {}

func (x *ObjectBucketMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketMetadata.ProtoReflect.Descriptor instead.
func (*ObjectBucketMetadata) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{26}
}

func (x *ObjectBucketMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectBucketMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectBucketMetadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ObjectBucketMetadata) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ObjectBucketMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectBucketMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectBucketMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *ObjectBucketMetadata) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

type ObjectBucketMetadataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*ObjectBucketMetadataRef_BucketName
	//	*ObjectBucketMetadataRef_BucketId
	NameOrId isObjectBucketMetadataRef_NameOrId `protobuf_oneof:"nameOrId"`
}

func (x *ObjectBucketMetadataRef) Reset() {
	*x = ObjectBucketMetadataRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketMetadataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketMetadataRef) ProtoMessage() {}

func (x *ObjectBucketMetadataRef) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketMetadataRef.ProtoReflect.Descriptor instead.
func (*ObjectBucketMetadataRef) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{27}
}

func (x *ObjectBucketMetadataRef) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *ObjectBucketMetadataRef) GetNameOrId() isObjectBucketMetadataRef_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *ObjectBucketMetadataRef) GetBucketName() string {
	if x, ok := x.GetNameOrId().(*ObjectBucketMetadataRef_BucketName); ok {
		return x.BucketName
	}
	return ""
}

func (x *ObjectBucketMetadataRef) GetBucketId() string {
	if x, ok := x.GetNameOrId().(*ObjectBucketMetadataRef_BucketId); ok {
		return x.BucketId
	}
	return ""
}

type isObjectBucketMetadataRef_NameOrId interface {
	isObjectBucketMetadataRef_NameOrId()
}

type ObjectBucketMetadataRef_BucketName struct {
	BucketName string `protobuf:"bytes,2,opt,name=bucketName,proto3,oneof"`
}

type ObjectBucketMetadataRef_BucketId struct {
	BucketId string `protobuf:"bytes,3,opt,name=bucketId,proto3,oneof"`
}

func (*ObjectBucketMetadataRef_BucketName) isObjectBucketMetadataRef_NameOrId() {}

func (*ObjectBucketMetadataRef_BucketId) isObjectBucketMetadataRef_NameOrId() {}

type ObjectBucketStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bucket phase.
	Phase BucketPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.BucketPhase" json:"phase,omitempty"`
	// Additional details about the state or any error conditions.
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Cluster *ObjectCluster `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// policy status for object bucket
	Policy        *BucketPolicyStatus  `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	SecurityGroup *BucketSecurityGroup `protobuf:"bytes,5,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
}

func (x *ObjectBucketStatus) Reset() {
	*x = ObjectBucketStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketStatus) ProtoMessage() {}

func (x *ObjectBucketStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketStatus.ProtoReflect.Descriptor instead.
func (*ObjectBucketStatus) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{28}
}

func (x *ObjectBucketStatus) GetPhase() BucketPhase {
	if x != nil {
		return x.Phase
	}
	return BucketPhase_BucketProvisioning
}

func (x *ObjectBucketStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ObjectBucketStatus) GetCluster() *ObjectCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ObjectBucketStatus) GetPolicy() *BucketPolicyStatus {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ObjectBucketStatus) GetSecurityGroup() *BucketSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

type BucketSecurityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkFilterAllow []*BucketNetworkGroup `protobuf:"bytes,1,rep,name=networkFilterAllow,proto3" json:"networkFilterAllow,omitempty"`
	NetworkFilterDeny  []*BucketNetworkGroup `protobuf:"bytes,2,rep,name=networkFilterDeny,proto3" json:"networkFilterDeny,omitempty"`
}

func (x *BucketSecurityGroup) Reset() {
	*x = BucketSecurityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketSecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketSecurityGroup) ProtoMessage() {}

func (x *BucketSecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketSecurityGroup.ProtoReflect.Descriptor instead.
func (*BucketSecurityGroup) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{29}
}

func (x *BucketSecurityGroup) GetNetworkFilterAllow() []*BucketNetworkGroup {
	if x != nil {
		return x.NetworkFilterAllow
	}
	return nil
}

func (x *BucketSecurityGroup) GetNetworkFilterDeny() []*BucketNetworkGroup {
	if x != nil {
		return x.NetworkFilterDeny
	}
	return nil
}

type BucketNetworkGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet       string `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	PrefixLength int32  `protobuf:"varint,2,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	Gateway      string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *BucketNetworkGroup) Reset() {
	*x = BucketNetworkGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketNetworkGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketNetworkGroup) ProtoMessage() {}

func (x *BucketNetworkGroup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketNetworkGroup.ProtoReflect.Descriptor instead.
func (*BucketNetworkGroup) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{30}
}

func (x *BucketNetworkGroup) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *BucketNetworkGroup) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *BucketNetworkGroup) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type ObjectBucketGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectBucketGetRequest) Reset() {
	*x = ObjectBucketGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketGetRequest) ProtoMessage() {}

func (x *ObjectBucketGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketGetRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketGetRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{31}
}

func (x *ObjectBucketGetRequest) GetMetadata() *ObjectBucketMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectBucketSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketSearchMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectBucketSearchRequest) Reset() {
	*x = ObjectBucketSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketSearchRequest) ProtoMessage() {}

func (x *ObjectBucketSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketSearchRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketSearchRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{32}
}

func (x *ObjectBucketSearchRequest) GetMetadata() *ObjectBucketSearchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectBucketSearchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// If not empty, only return instances that have these key/value pairs.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectBucketSearchMetadata) Reset() {
	*x = ObjectBucketSearchMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketSearchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketSearchMetadata) ProtoMessage() {}

func (x *ObjectBucketSearchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketSearchMetadata.ProtoReflect.Descriptor instead.
func (*ObjectBucketSearchMetadata) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{33}
}

func (x *ObjectBucketSearchMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectBucketSearchMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ObjectBucketSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ObjectBucket `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ObjectBucketSearchResponse) Reset() {
	*x = ObjectBucketSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketSearchResponse) ProtoMessage() {}

func (x *ObjectBucketSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketSearchResponse.ProtoReflect.Descriptor instead.
func (*ObjectBucketSearchResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{34}
}

func (x *ObjectBucketSearchResponse) GetItems() []*ObjectBucket {
	if x != nil {
		return x.Items
	}
	return nil
}

type ObjectBucketDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectBucketMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectBucketDeleteRequest) Reset() {
	*x = ObjectBucketDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectBucketDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectBucketDeleteRequest) ProtoMessage() {}

func (x *ObjectBucketDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectBucketDeleteRequest.ProtoReflect.Descriptor instead.
func (*ObjectBucketDeleteRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{35}
}

func (x *ObjectBucketDeleteRequest) GetMetadata() *ObjectBucketMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BucketPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleRules     []*BucketLifecycleRule `protobuf:"bytes,1,rep,name=lifecycleRules,proto3" json:"lifecycleRules,omitempty"`
	UserAccessPolicies []*BucketUserAccess    `protobuf:"bytes,2,rep,name=userAccessPolicies,proto3" json:"userAccessPolicies,omitempty"`
}

func (x *BucketPolicyStatus) Reset() {
	*x = BucketPolicyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketPolicyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketPolicyStatus) ProtoMessage() {}

func (x *BucketPolicyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketPolicyStatus.ProtoReflect.Descriptor instead.
func (*BucketPolicyStatus) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{36}
}

func (x *BucketPolicyStatus) GetLifecycleRules() []*BucketLifecycleRule {
	if x != nil {
		return x.LifecycleRules
	}
	return nil
}

func (x *BucketPolicyStatus) GetUserAccessPolicies() []*BucketUserAccess {
	if x != nil {
		return x.UserAccessPolicies
	}
	return nil
}

type BucketLifecycleRuleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *BucketLifecycleRuleSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *BucketLifecycleRuleCreateRequest) Reset() {
	*x = BucketLifecycleRuleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleCreateRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleCreateRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleCreateRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{37}
}

func (x *BucketLifecycleRuleCreateRequest) GetMetadata() *BucketLifecycleRuleMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketLifecycleRuleCreateRequest) GetSpec() *BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type BucketLifecycleRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *BucketLifecycleRuleSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *BucketLifecycleRuleStatus   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BucketLifecycleRule) Reset() {
	*x = BucketLifecycleRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRule) ProtoMessage() {}

func (x *BucketLifecycleRule) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRule.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRule) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{38}
}

func (x *BucketLifecycleRule) GetMetadata() *BucketLifecycleRuleMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketLifecycleRule) GetSpec() *BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BucketLifecycleRule) GetStatus() *BucketLifecycleRuleStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type BucketLifecycleRuleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId string                    `protobuf:"bytes,1,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	Phase  BucketLifecycleRuleSPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=proto.BucketLifecycleRuleSPhase" json:"phase,omitempty"`
}

func (x *BucketLifecycleRuleStatus) Reset() {
	*x = BucketLifecycleRuleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleStatus) ProtoMessage() {}

func (x *BucketLifecycleRuleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleStatus.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleStatus) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{39}
}

func (x *BucketLifecycleRuleStatus) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *BucketLifecycleRuleStatus) GetPhase() BucketLifecycleRuleSPhase {
	if x != nil {
		return x.Phase
	}
	return BucketLifecycleRuleSPhase_LFRuleProvisioning
}

type BucketLifecycleRuleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId    string                 `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	RuleName          string                 `protobuf:"bytes,2,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	ResourceId        string                 `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	BucketId          string                 `protobuf:"bytes,4,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	// Timestamp when resource was requested to be deleted.
	DeletionTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deletionTimestamp,proto3" json:"deletionTimestamp,omitempty"`
}

func (x *BucketLifecycleRuleMetadata) Reset() {
	*x = BucketLifecycleRuleMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleMetadata) ProtoMessage() {}

func (x *BucketLifecycleRuleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleMetadata.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleMetadata) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{40}
}

func (x *BucketLifecycleRuleMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *BucketLifecycleRuleMetadata) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *BucketLifecycleRuleMetadata) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *BucketLifecycleRuleMetadata) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *BucketLifecycleRuleMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *BucketLifecycleRuleMetadata) GetUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTimestamp
	}
	return nil
}

func (x *BucketLifecycleRuleMetadata) GetDeletionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTimestamp
	}
	return nil
}

type BucketLifecycleRuleMetadataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	BucketId       string `protobuf:"bytes,2,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	RuleId         string `protobuf:"bytes,3,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
}

func (x *BucketLifecycleRuleMetadataRef) Reset() {
	*x = BucketLifecycleRuleMetadataRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleMetadataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleMetadataRef) ProtoMessage() {}

func (x *BucketLifecycleRuleMetadataRef) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleMetadataRef.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleMetadataRef) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{41}
}

func (x *BucketLifecycleRuleMetadataRef) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *BucketLifecycleRuleMetadataRef) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *BucketLifecycleRuleMetadataRef) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

type BucketLifecycleRuleSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A path prefix. The rule will be restricted to objects with the specified prefix.
	// If not specified, the rule will apply to all objects in the bucket.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Expires `current` versions of objects after a specified number of days counted from object creation.
	ExpireDays uint32 `protobuf:"varint,2,opt,name=expireDays,proto3" json:"expireDays,omitempty"`
	// A number of days after which to permanently delete non-current versions of objects.
	// The number of days is timed from when the object becomes non-current, which is when a
	// versioned object is deleted or overwritten.
	NoncurrentExpireDays uint32 `protobuf:"varint,3,opt,name=noncurrentExpireDays,proto3" json:"noncurrentExpireDays,omitempty"`
	// Deletes versioned objects if there only delete marker as the only version
	DeleteMarker bool `protobuf:"varint,4,opt,name=deleteMarker,proto3" json:"deleteMarker,omitempty"`
}

func (x *BucketLifecycleRuleSpec) Reset() {
	*x = BucketLifecycleRuleSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleSpec) ProtoMessage() {}

func (x *BucketLifecycleRuleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleSpec.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleSpec) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{42}
}

func (x *BucketLifecycleRuleSpec) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BucketLifecycleRuleSpec) GetExpireDays() uint32 {
	if x != nil {
		return x.ExpireDays
	}
	return 0
}

func (x *BucketLifecycleRuleSpec) GetNoncurrentExpireDays() uint32 {
	if x != nil {
		return x.NoncurrentExpireDays
	}
	return 0
}

func (x *BucketLifecycleRuleSpec) GetDeleteMarker() bool {
	if x != nil {
		return x.DeleteMarker
	}
	return false
}

type BucketLifecycleRuleGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BucketLifecycleRuleGetRequest) Reset() {
	*x = BucketLifecycleRuleGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleGetRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleGetRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleGetRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{43}
}

func (x *BucketLifecycleRuleGetRequest) GetMetadata() *BucketLifecycleRuleMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BucketLifecycleRuleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *BucketLifecycleRuleSpec        `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *BucketLifecycleRuleUpdateRequest) Reset() {
	*x = BucketLifecycleRuleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleUpdateRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleUpdateRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{44}
}

func (x *BucketLifecycleRuleUpdateRequest) GetMetadata() *BucketLifecycleRuleMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketLifecycleRuleUpdateRequest) GetSpec() *BucketLifecycleRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type BucketLifecycleRuleDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BucketLifecycleRuleMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BucketLifecycleRuleDeleteRequest) Reset() {
	*x = BucketLifecycleRuleDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleDeleteRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleDeleteRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleDeleteRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{45}
}

func (x *BucketLifecycleRuleDeleteRequest) GetMetadata() *BucketLifecycleRuleMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BucketLifecycleRuleSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	BucketId       string `protobuf:"bytes,2,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
}

func (x *BucketLifecycleRuleSearchRequest) Reset() {
	*x = BucketLifecycleRuleSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleSearchRequest) ProtoMessage() {}

func (x *BucketLifecycleRuleSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleSearchRequest.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleSearchRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{46}
}

func (x *BucketLifecycleRuleSearchRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *BucketLifecycleRuleSearchRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

type BucketLifecycleRuleSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*BucketLifecycleRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *BucketLifecycleRuleSearchResponse) Reset() {
	*x = BucketLifecycleRuleSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLifecycleRuleSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLifecycleRuleSearchResponse) ProtoMessage() {}

func (x *BucketLifecycleRuleSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLifecycleRuleSearchResponse.ProtoReflect.Descriptor instead.
func (*BucketLifecycleRuleSearchResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{47}
}

func (x *BucketLifecycleRuleSearchResponse) GetRules() []*BucketLifecycleRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type BucketUserAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     []*ObjectUserPermissionSpec `protobuf:"bytes,2,rep,name=spec,proto3" json:"spec,omitempty"`
}

func (x *BucketUserAccess) Reset() {
	*x = BucketUserAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketUserAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketUserAccess) ProtoMessage() {}

func (x *BucketUserAccess) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketUserAccess.ProtoReflect.Descriptor instead.
func (*BucketUserAccess) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{48}
}

func (x *BucketUserAccess) GetMetadata() *ObjectUserMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketUserAccess) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CreateObjectUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataCreate   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     []*ObjectUserPermissionSpec `protobuf:"bytes,2,rep,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateObjectUserRequest) Reset() {
	*x = CreateObjectUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObjectUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectUserRequest) ProtoMessage() {}

func (x *CreateObjectUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectUserRequest.ProtoReflect.Descriptor instead.
func (*CreateObjectUserRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{49}
}

func (x *CreateObjectUserRequest) GetMetadata() *ObjectUserMetadataCreate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateObjectUserRequest) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ObjectUserPermissionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId   string                `protobuf:"bytes,1,opt,name=bucketId,proto3" json:"bucketId,omitempty"`
	Prefix     string                `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Permission []BucketPermission    `protobuf:"varint,3,rep,packed,name=permission,proto3,enum=proto.BucketPermission" json:"permission,omitempty"`
	Actions    []ObjectBucketActions `protobuf:"varint,4,rep,packed,name=actions,proto3,enum=proto.ObjectBucketActions" json:"actions,omitempty"`
}

func (x *ObjectUserPermissionSpec) Reset() {
	*x = ObjectUserPermissionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserPermissionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserPermissionSpec) ProtoMessage() {}

func (x *ObjectUserPermissionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserPermissionSpec.ProtoReflect.Descriptor instead.
func (*ObjectUserPermissionSpec) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{50}
}

func (x *ObjectUserPermissionSpec) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *ObjectUserPermissionSpec) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ObjectUserPermissionSpec) GetPermission() []BucketPermission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *ObjectUserPermissionSpec) GetActions() []ObjectBucketActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ObjectUserPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix      string                `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Permissions []BucketPermission    `protobuf:"varint,2,rep,packed,name=permissions,proto3,enum=proto.BucketPermission" json:"permissions,omitempty"`
	Actions     []ObjectBucketActions `protobuf:"varint,3,rep,packed,name=actions,proto3,enum=proto.ObjectBucketActions" json:"actions,omitempty"`
}

func (x *ObjectUserPolicy) Reset() {
	*x = ObjectUserPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserPolicy) ProtoMessage() {}

func (x *ObjectUserPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserPolicy.ProtoReflect.Descriptor instead.
func (*ObjectUserPolicy) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{51}
}

func (x *ObjectUserPolicy) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ObjectUserPolicy) GetPermissions() []BucketPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ObjectUserPolicy) GetActions() []ObjectBucketActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ObjectUserMetadataCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ObjectUserMetadataCreate) Reset() {
	*x = ObjectUserMetadataCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserMetadataCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserMetadataCreate) ProtoMessage() {}

func (x *ObjectUserMetadataCreate) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserMetadataCreate.ProtoReflect.Descriptor instead.
func (*ObjectUserMetadataCreate) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{52}
}

func (x *ObjectUserMetadataCreate) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectUserMetadataCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ObjectUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     []*ObjectUserPermissionSpec `protobuf:"bytes,2,rep,name=spec,proto3" json:"spec,omitempty"`
	Status   *ObjectUserStatus           `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ObjectUser) Reset() {
	*x = ObjectUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUser) ProtoMessage() {}

func (x *ObjectUser) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUser.ProtoReflect.Descriptor instead.
func (*ObjectUser) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{53}
}

func (x *ObjectUser) GetMetadata() *ObjectUserMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectUser) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ObjectUser) GetStatus() *ObjectUserStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ObjectUserMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId    string                 `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserId            string                 `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Labels            map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	DeleteTimestamp   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleteTimestamp,proto3" json:"deleteTimestamp,omitempty"`
}

func (x *ObjectUserMetadata) Reset() {
	*x = ObjectUserMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserMetadata) ProtoMessage() {}

func (x *ObjectUserMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserMetadata.ProtoReflect.Descriptor instead.
func (*ObjectUserMetadata) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{54}
}

func (x *ObjectUserMetadata) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *ObjectUserMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectUserMetadata) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ObjectUserMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectUserMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *ObjectUserMetadata) GetUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTimestamp
	}
	return nil
}

func (x *ObjectUserMetadata) GetDeleteTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTimestamp
	}
	return nil
}

type ObjectUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase     ObjectUserPhase  `protobuf:"varint,1,opt,name=phase,proto3,enum=proto.ObjectUserPhase" json:"phase,omitempty"`
	Principal *AccessPrincipal `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
}

func (x *ObjectUserStatus) Reset() {
	*x = ObjectUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserStatus) ProtoMessage() {}

func (x *ObjectUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserStatus.ProtoReflect.Descriptor instead.
func (*ObjectUserStatus) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{55}
}

func (x *ObjectUserStatus) GetPhase() ObjectUserPhase {
	if x != nil {
		return x.Phase
	}
	return ObjectUserPhase_ObjectUserProvisioning
}

func (x *ObjectUserStatus) GetPrincipal() *AccessPrincipal {
	if x != nil {
		return x.Principal
	}
	return nil
}

type AccessPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster     *ObjectCluster           `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Credentials *ObjectAccessCredentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *AccessPrincipal) Reset() {
	*x = AccessPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPrincipal) ProtoMessage() {}

func (x *AccessPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPrincipal.ProtoReflect.Descriptor instead.
func (*AccessPrincipal) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{56}
}

func (x *AccessPrincipal) GetCluster() *ObjectCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *AccessPrincipal) GetCredentials() *ObjectAccessCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type ObjectCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	AccessEndpoint string `protobuf:"bytes,2,opt,name=accessEndpoint,proto3" json:"accessEndpoint,omitempty"`
	ClusterName    string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *ObjectCluster) Reset() {
	*x = ObjectCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectCluster) ProtoMessage() {}

func (x *ObjectCluster) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectCluster.ProtoReflect.Descriptor instead.
func (*ObjectCluster) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{57}
}

func (x *ObjectCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ObjectCluster) GetAccessEndpoint() string {
	if x != nil {
		return x.AccessEndpoint
	}
	return ""
}

func (x *ObjectCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ObjectAccessCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey string `protobuf:"bytes,1,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
}

func (x *ObjectAccessCredentials) Reset() {
	*x = ObjectAccessCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAccessCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAccessCredentials) ProtoMessage() {}

func (x *ObjectAccessCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAccessCredentials.ProtoReflect.Descriptor instead.
func (*ObjectAccessCredentials) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{58}
}

func (x *ObjectAccessCredentials) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *ObjectAccessCredentials) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type ObjectUserMetadataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Types that are assignable to NameOrId:
	//
	//	*ObjectUserMetadataRef_UserName
	//	*ObjectUserMetadataRef_UserId
	NameOrId isObjectUserMetadataRef_NameOrId `protobuf_oneof:"nameOrId"`
}

func (x *ObjectUserMetadataRef) Reset() {
	*x = ObjectUserMetadataRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserMetadataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserMetadataRef) ProtoMessage() {}

func (x *ObjectUserMetadataRef) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserMetadataRef.ProtoReflect.Descriptor instead.
func (*ObjectUserMetadataRef) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{59}
}

func (x *ObjectUserMetadataRef) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (m *ObjectUserMetadataRef) GetNameOrId() isObjectUserMetadataRef_NameOrId {
	if m != nil {
		return m.NameOrId
	}
	return nil
}

func (x *ObjectUserMetadataRef) GetUserName() string {
	if x, ok := x.GetNameOrId().(*ObjectUserMetadataRef_UserName); ok {
		return x.UserName
	}
	return ""
}

func (x *ObjectUserMetadataRef) GetUserId() string {
	if x, ok := x.GetNameOrId().(*ObjectUserMetadataRef_UserId); ok {
		return x.UserId
	}
	return ""
}

type isObjectUserMetadataRef_NameOrId interface {
	isObjectUserMetadataRef_NameOrId()
}

type ObjectUserMetadataRef_UserName struct {
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3,oneof"`
}

type ObjectUserMetadataRef_UserId struct {
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3,oneof"`
}

func (*ObjectUserMetadataRef_UserName) isObjectUserMetadataRef_NameOrId() {}

func (*ObjectUserMetadataRef_UserId) isObjectUserMetadataRef_NameOrId() {}

type ObjectUserGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectUserGetRequest) Reset() {
	*x = ObjectUserGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserGetRequest) ProtoMessage() {}

func (x *ObjectUserGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserGetRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserGetRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{60}
}

func (x *ObjectUserGetRequest) GetMetadata() *ObjectUserMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectUserSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *ObjectUserSearchRequest) Reset() {
	*x = ObjectUserSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserSearchRequest) ProtoMessage() {}

func (x *ObjectUserSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserSearchRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserSearchRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{61}
}

func (x *ObjectUserSearchRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type ObjectUserSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*ObjectUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ObjectUserSearchResponse) Reset() {
	*x = ObjectUserSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserSearchResponse) ProtoMessage() {}

func (x *ObjectUserSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserSearchResponse.ProtoReflect.Descriptor instead.
func (*ObjectUserSearchResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{62}
}

func (x *ObjectUserSearchResponse) GetUsers() []*ObjectUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type ObjectUserDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectUserDeleteRequest) Reset() {
	*x = ObjectUserDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserDeleteRequest) ProtoMessage() {}

func (x *ObjectUserDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserDeleteRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserDeleteRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{63}
}

func (x *ObjectUserDeleteRequest) GetMetadata() *ObjectUserMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectUserUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataRef      `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     []*ObjectUserPermissionSpec `protobuf:"bytes,2,rep,name=spec,proto3" json:"spec,omitempty"`
}

func (x *ObjectUserUpdateRequest) Reset() {
	*x = ObjectUserUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserUpdateRequest) ProtoMessage() {}

func (x *ObjectUserUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserUpdateRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserUpdateRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{64}
}

func (x *ObjectUserUpdateRequest) GetMetadata() *ObjectUserMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ObjectUserUpdateRequest) GetSpec() []*ObjectUserPermissionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ObjectUserUpdateCredsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ObjectUserMetadataRef `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ObjectUserUpdateCredsRequest) Reset() {
	*x = ObjectUserUpdateCredsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUserUpdateCredsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUserUpdateCredsRequest) ProtoMessage() {}

func (x *ObjectUserUpdateCredsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUserUpdateCredsRequest.ProtoReflect.Descriptor instead.
func (*ObjectUserUpdateCredsRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{65}
}

func (x *ObjectUserUpdateCredsRequest) GetMetadata() *ObjectUserMetadataRef {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_storage_proto protoreflect.FileDescriptor

var file_storage_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x56, 0x0a, 0x14, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5a, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a,
	0x19, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x56, 0x0a, 0x17, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x43, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x59, 0x0a, 0x17, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x45,
	0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x10,
	0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x22, 0x98, 0x04, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02,
	0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b,
	0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x18,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x49, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x6a, 0x0a, 0x12, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x8a, 0x02, 0x0a, 0x1a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa,
	0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02,
	0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02,
	0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd6,
	0x03, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b,
	0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61, 0x6d,
	0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a,
	0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6e,
	0x79, 0x22, 0x6a, 0x0a, 0x12, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x54, 0x0a,
	0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x19, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd4, 0x01, 0x0a, 0x1a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd,
	0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x1a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x57, 0x0a, 0x19, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x42, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a,
	0x20, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6b, 0x0a, 0x19, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0x85, 0x03, 0x0a, 0x1b, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b,
	0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa9, 0x01,
	0x0a, 0x17, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x6e, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x1d, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01,
	0x0a, 0x20, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x65, 0x0a, 0x20, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x74, 0x0a, 0x20, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x21, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x7e, 0x0a,
	0x10, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8b, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xbd, 0x01, 0x0a, 0x18,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x10,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc6, 0x03, 0x0a, 0x12,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x83, 0x01, 0x0a,
	0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x17, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02,
	0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x61,
	0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b,
	0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x18, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x53,
	0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x58,
	0x0a, 0x1c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x4c, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x64, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x15,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x6e, 0x63, 0x65, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x65, 0x6b, 0x61, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x46, 0x53, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x53, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x53, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x53, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x53, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x53, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x05, 0x2a, 0x49, 0x0a, 0x12, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03,
	0x2a, 0x6f, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x04, 0x2a, 0x6a, 0x0a, 0x19, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x4c, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x46, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x46, 0x52, 0x75, 0x6c,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x46, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0xa5, 0x01,
	0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x10, 0x05, 0x2a, 0x45, 0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x02, 0x2a, 0x87, 0x01, 0x0a,
	0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x32, 0xc5, 0x0b, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa7, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x6a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3c, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x01, 0x2a, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x28, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xf9, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22,
	0xc1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa2, 0x01, 0x12, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a, 0x4e, 0x12, 0x4c, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x50, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x85, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xc7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa8, 0x01,
	0x1a, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x51, 0x1a, 0x4c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01,
	0x12, 0x84, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0xc1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa2, 0x01, 0x2a, 0x50, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x7d, 0x5a,
	0x4e, 0x2a, 0x4c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f,
	0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x9a, 0x02, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xac, 0x01,
	0x12, 0x55, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5a, 0x53, 0x12, 0x51, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x50, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xa2,
	0x1c, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x18, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x28, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12,
	0x8f, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0xcd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xae, 0x01, 0x12, 0x52, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x5a,
	0x58, 0x12, 0x56, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50,
	0x01, 0x12, 0xa8, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12,
	0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0x12, 0x98, 0x02, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xcd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xae,
	0x01, 0x2a, 0x52, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x69,
	0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x7d, 0x5a, 0x58, 0x2a, 0x56, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0xdd, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x65, 0x22, 0x60, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f,
	0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x72, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0x12, 0xea, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x12, 0x75, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x7d, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x2f,
	0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x38, 0x01, 0x12, 0xd6, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x4e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x72, 0x75, 0x6c, 0x65, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0x12, 0xf3, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x1a, 0x75, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x69, 0x64, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x38, 0x01, 0x12, 0xec, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x2a, 0x75, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x69, 0x64,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x38, 0x01, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3e, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x87, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xa6, 0x01, 0x12, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x5a, 0x54, 0x12, 0x52, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x50, 0x01, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x38, 0x01, 0x12, 0x92, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xc5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa6, 0x01, 0x2a, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x5a, 0x54, 0x2a, 0x52, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x50, 0x01, 0x12, 0x9f, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0xd1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xba, 0x01, 0x1a,
	0x55, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x5a, 0x5e, 0x1a, 0x59, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0x12, 0xad, 0x02, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x22, 0xd5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbe, 0x01, 0x1a, 0x5a, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5a, 0x60, 0x1a, 0x5e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x38, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x6d, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b, 0x14, 0x12, 0x12,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_proto_rawDescOnce sync.Once
	file_storage_proto_rawDescData = file_storage_proto_rawDesc
)

func file_storage_proto_rawDescGZIP() []byte {
	file_storage_proto_rawDescOnce.Do(func() {
		file_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_proto_rawDescData)
	})
	return file_storage_proto_rawDescData
}

var file_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_storage_proto_goTypes = []interface{}{
	(FilesystemType)(0),                       // 0: proto.FilesystemType
	(FilesystemStorageClass)(0),               // 1: proto.FilesystemStorageClass
	(FilesystemAccessModes)(0),                // 2: proto.FilesystemAccessModes
	(FilesystemMountProtocols)(0),             // 3: proto.FilesystemMountProtocols
	(FilesystemPhase)(0),                      // 4: proto.FilesystemPhase
	(BucketAccessPolicy)(0),                   // 5: proto.BucketAccessPolicy
	(BucketPhase)(0),                          // 6: proto.BucketPhase
	(BucketLifecycleRuleSPhase)(0),            // 7: proto.BucketLifecycleRuleSPhase
	(ObjectBucketActions)(0),                  // 8: proto.ObjectBucketActions
	(BucketPermission)(0),                     // 9: proto.BucketPermission
	(ObjectUserPhase)(0),                      // 10: proto.ObjectUserPhase
	(*FilesystemCreateRequest)(nil),           // 11: proto.FilesystemCreateRequest
	(*FilesystemGetRequest)(nil),              // 12: proto.FilesystemGetRequest
	(*FilesystemGetUserRequest)(nil),          // 13: proto.FilesystemGetUserRequest
	(*FilesystemGetUserResponse)(nil),         // 14: proto.FilesystemGetUserResponse
	(*FilesystemSearchRequest)(nil),           // 15: proto.FilesystemSearchRequest
	(*FilesystemSearchResponse)(nil),          // 16: proto.FilesystemSearchResponse
	(*FilesystemUpdateRequest)(nil),           // 17: proto.FilesystemUpdateRequest
	(*FilesystemDeleteRequest)(nil),           // 18: proto.FilesystemDeleteRequest
	(*Filesystem)(nil),                        // 19: proto.Filesystem
	(*FilesystemSpec)(nil),                    // 20: proto.FilesystemSpec
	(*FilesystemSpecUpdate)(nil),              // 21: proto.FilesystemSpecUpdate
	(*FilesystemCapacity)(nil),                // 22: proto.FilesystemCapacity
	(*FilesystemMetadata)(nil),                // 23: proto.FilesystemMetadata
	(*FilesystemMetadataCreate)(nil),          // 24: proto.FilesystemMetadataCreate
	(*FilesystemMetadataUpdate)(nil),          // 25: proto.FilesystemMetadataUpdate
	(*FilesystemMetadataReference)(nil),       // 26: proto.FilesystemMetadataReference
	(*FilesystemMetadataSearch)(nil),          // 27: proto.FilesystemMetadataSearch
	(*FilesystemStatus)(nil),                  // 28: proto.FilesystemStatus
	(*FilesystemMountStatus)(nil),             // 29: proto.FilesystemMountStatus
	(*VolumeSecurityGroup)(nil),               // 30: proto.VolumeSecurityGroup
	(*VolumeNetworkGroup)(nil),                // 31: proto.VolumeNetworkGroup
	(*ObjectBucketCreateRequest)(nil),         // 32: proto.ObjectBucketCreateRequest
	(*ObjectBucketCreateMetadata)(nil),        // 33: proto.ObjectBucketCreateMetadata
	(*ObjectBucketSpec)(nil),                  // 34: proto.ObjectBucketSpec
	(*StorageCapacityRequest)(nil),            // 35: proto.StorageCapacityRequest
	(*ObjectBucket)(nil),                      // 36: proto.ObjectBucket
	(*ObjectBucketMetadata)(nil),              // 37: proto.ObjectBucketMetadata
	(*ObjectBucketMetadataRef)(nil),           // 38: proto.ObjectBucketMetadataRef
	(*ObjectBucketStatus)(nil),                // 39: proto.ObjectBucketStatus
	(*BucketSecurityGroup)(nil),               // 40: proto.BucketSecurityGroup
	(*BucketNetworkGroup)(nil),                // 41: proto.BucketNetworkGroup
	(*ObjectBucketGetRequest)(nil),            // 42: proto.ObjectBucketGetRequest
	(*ObjectBucketSearchRequest)(nil),         // 43: proto.ObjectBucketSearchRequest
	(*ObjectBucketSearchMetadata)(nil),        // 44: proto.ObjectBucketSearchMetadata
	(*ObjectBucketSearchResponse)(nil),        // 45: proto.ObjectBucketSearchResponse
	(*ObjectBucketDeleteRequest)(nil),         // 46: proto.ObjectBucketDeleteRequest
	(*BucketPolicyStatus)(nil),                // 47: proto.BucketPolicyStatus
	(*BucketLifecycleRuleCreateRequest)(nil),  // 48: proto.BucketLifecycleRuleCreateRequest
	(*BucketLifecycleRule)(nil),               // 49: proto.BucketLifecycleRule
	(*BucketLifecycleRuleStatus)(nil),         // 50: proto.BucketLifecycleRuleStatus
	(*BucketLifecycleRuleMetadata)(nil),       // 51: proto.BucketLifecycleRuleMetadata
	(*BucketLifecycleRuleMetadataRef)(nil),    // 52: proto.BucketLifecycleRuleMetadataRef
	(*BucketLifecycleRuleSpec)(nil),           // 53: proto.BucketLifecycleRuleSpec
	(*BucketLifecycleRuleGetRequest)(nil),     // 54: proto.BucketLifecycleRuleGetRequest
	(*BucketLifecycleRuleUpdateRequest)(nil),  // 55: proto.BucketLifecycleRuleUpdateRequest
	(*BucketLifecycleRuleDeleteRequest)(nil),  // 56: proto.BucketLifecycleRuleDeleteRequest
	(*BucketLifecycleRuleSearchRequest)(nil),  // 57: proto.BucketLifecycleRuleSearchRequest
	(*BucketLifecycleRuleSearchResponse)(nil), // 58: proto.BucketLifecycleRuleSearchResponse
	(*BucketUserAccess)(nil),                  // 59: proto.BucketUserAccess
	(*CreateObjectUserRequest)(nil),           // 60: proto.CreateObjectUserRequest
	(*ObjectUserPermissionSpec)(nil),          // 61: proto.ObjectUserPermissionSpec
	(*ObjectUserPolicy)(nil),                  // 62: proto.ObjectUserPolicy
	(*ObjectUserMetadataCreate)(nil),          // 63: proto.ObjectUserMetadataCreate
	(*ObjectUser)(nil),                        // 64: proto.ObjectUser
	(*ObjectUserMetadata)(nil),                // 65: proto.ObjectUserMetadata
	(*ObjectUserStatus)(nil),                  // 66: proto.ObjectUserStatus
	(*AccessPrincipal)(nil),                   // 67: proto.AccessPrincipal
	(*ObjectCluster)(nil),                     // 68: proto.ObjectCluster
	(*ObjectAccessCredentials)(nil),           // 69: proto.ObjectAccessCredentials
	(*ObjectUserMetadataRef)(nil),             // 70: proto.ObjectUserMetadataRef
	(*ObjectUserGetRequest)(nil),              // 71: proto.ObjectUserGetRequest
	(*ObjectUserSearchRequest)(nil),           // 72: proto.ObjectUserSearchRequest
	(*ObjectUserSearchResponse)(nil),          // 73: proto.ObjectUserSearchResponse
	(*ObjectUserDeleteRequest)(nil),           // 74: proto.ObjectUserDeleteRequest
	(*ObjectUserUpdateRequest)(nil),           // 75: proto.ObjectUserUpdateRequest
	(*ObjectUserUpdateCredsRequest)(nil),      // 76: proto.ObjectUserUpdateCredsRequest
	nil,                                       // 77: proto.FilesystemMetadata.LabelsEntry
	nil,                                       // 78: proto.FilesystemMetadataCreate.LabelsEntry
	nil,                                       // 79: proto.FilesystemMetadataUpdate.LabelsEntry
	nil,                                       // 80: proto.FilesystemMetadataSearch.LabelsEntry
	nil,                                       // 81: proto.ObjectBucketCreateMetadata.LabelsEntry
	nil,                                       // 82: proto.ObjectBucketMetadata.LabelsEntry
	nil,                                       // 83: proto.ObjectBucketSearchMetadata.LabelsEntry
	nil,                                       // 84: proto.ObjectUserMetadata.LabelsEntry
	(*timestamppb.Timestamp)(nil),             // 85: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                     // 86: google.protobuf.Empty
}
var file_storage_proto_depIdxs = []int32{
	24,  // 0: proto.FilesystemCreateRequest.metadata:type_name -> proto.FilesystemMetadataCreate
	20,  // 1: proto.FilesystemCreateRequest.spec:type_name -> proto.FilesystemSpec
	26,  // 2: proto.FilesystemGetRequest.metadata:type_name -> proto.FilesystemMetadataReference
	26,  // 3: proto.FilesystemGetUserRequest.metadata:type_name -> proto.FilesystemMetadataReference
	27,  // 4: proto.FilesystemSearchRequest.metadata:type_name -> proto.FilesystemMetadataSearch
	19,  // 5: proto.FilesystemSearchResponse.items:type_name -> proto.Filesystem
	25,  // 6: proto.FilesystemUpdateRequest.metadata:type_name -> proto.FilesystemMetadataUpdate
	20,  // 7: proto.FilesystemUpdateRequest.spec:type_name -> proto.FilesystemSpec
	26,  // 8: proto.FilesystemDeleteRequest.metadata:type_name -> proto.FilesystemMetadataReference
	23,  // 9: proto.Filesystem.metadata:type_name -> proto.FilesystemMetadata
	20,  // 10: proto.Filesystem.spec:type_name -> proto.FilesystemSpec
	28,  // 11: proto.Filesystem.status:type_name -> proto.FilesystemStatus
	22,  // 12: proto.FilesystemSpec.request:type_name -> proto.FilesystemCapacity
	1,   // 13: proto.FilesystemSpec.storageClass:type_name -> proto.FilesystemStorageClass
	0,   // 14: proto.FilesystemSpec.filesystemType:type_name -> proto.FilesystemType
	2,   // 15: proto.FilesystemSpec.accessModes:type_name -> proto.FilesystemAccessModes
	3,   // 16: proto.FilesystemSpec.mountProtocol:type_name -> proto.FilesystemMountProtocols
	22,  // 17: proto.FilesystemSpecUpdate.request:type_name -> proto.FilesystemCapacity
	77,  // 18: proto.FilesystemMetadata.labels:type_name -> proto.FilesystemMetadata.LabelsEntry
	85,  // 19: proto.FilesystemMetadata.creationTimestamp:type_name -> google.protobuf.Timestamp
	85,  // 20: proto.FilesystemMetadata.updateTimestamp:type_name -> google.protobuf.Timestamp
	85,  // 21: proto.FilesystemMetadata.deletionTimestamp:type_name -> google.protobuf.Timestamp
	78,  // 22: proto.FilesystemMetadataCreate.labels:type_name -> proto.FilesystemMetadataCreate.LabelsEntry
	79,  // 23: proto.FilesystemMetadataUpdate.labels:type_name -> proto.FilesystemMetadataUpdate.LabelsEntry
	80,  // 24: proto.FilesystemMetadataSearch.labels:type_name -> proto.FilesystemMetadataSearch.LabelsEntry
	0,   // 25: proto.FilesystemMetadataSearch.filterType:type_name -> proto.FilesystemType
	4,   // 26: proto.FilesystemStatus.phase:type_name -> proto.FilesystemPhase
	29,  // 27: proto.FilesystemStatus.mount:type_name -> proto.FilesystemMountStatus
	30,  // 28: proto.FilesystemStatus.securityGroup:type_name -> proto.VolumeSecurityGroup
	31,  // 29: proto.VolumeSecurityGroup.networkFilterAllow:type_name -> proto.VolumeNetworkGroup
	33,  // 30: proto.ObjectBucketCreateRequest.metadata:type_name -> proto.ObjectBucketCreateMetadata
	34,  // 31: proto.ObjectBucketCreateRequest.spec:type_name -> proto.ObjectBucketSpec
	81,  // 32: proto.ObjectBucketCreateMetadata.labels:type_name -> proto.ObjectBucketCreateMetadata.LabelsEntry
	35,  // 33: proto.ObjectBucketSpec.request:type_name -> proto.StorageCapacityRequest
	5,   // 34: proto.ObjectBucketSpec.accessPolicy:type_name -> proto.BucketAccessPolicy
	37,  // 35: proto.ObjectBucket.metadata:type_name -> proto.ObjectBucketMetadata
	34,  // 36: proto.ObjectBucket.spec:type_name -> proto.ObjectBucketSpec
	39,  // 37: proto.ObjectBucket.status:type_name -> proto.ObjectBucketStatus
	82,  // 38: proto.ObjectBucketMetadata.labels:type_name -> proto.ObjectBucketMetadata.LabelsEntry
	85,  // 39: proto.ObjectBucketMetadata.creationTimestamp:type_name -> google.protobuf.Timestamp
	85,  // 40: proto.ObjectBucketMetadata.deletionTimestamp:type_name -> google.protobuf.Timestamp
	6,   // 41: proto.ObjectBucketStatus.phase:type_name -> proto.BucketPhase
	68,  // 42: proto.ObjectBucketStatus.cluster:type_name -> proto.ObjectCluster
	47,  // 43: proto.ObjectBucketStatus.policy:type_name -> proto.BucketPolicyStatus
	40,  // 44: proto.ObjectBucketStatus.securityGroup:type_name -> proto.BucketSecurityGroup
	41,  // 45: proto.BucketSecurityGroup.networkFilterAllow:type_name -> proto.BucketNetworkGroup
	41,  // 46: proto.BucketSecurityGroup.networkFilterDeny:type_name -> proto.BucketNetworkGroup
	38,  // 47: proto.ObjectBucketGetRequest.metadata:type_name -> proto.ObjectBucketMetadataRef
	44,  // 48: proto.ObjectBucketSearchRequest.metadata:type_name -> proto.ObjectBucketSearchMetadata
	83,  // 49: proto.ObjectBucketSearchMetadata.labels:type_name -> proto.ObjectBucketSearchMetadata.LabelsEntry
	36,  // 50: proto.ObjectBucketSearchResponse.items:type_name -> proto.ObjectBucket
	38,  // 51: proto.ObjectBucketDeleteRequest.metadata:type_name -> proto.ObjectBucketMetadataRef
	49,  // 52: proto.BucketPolicyStatus.lifecycleRules:type_name -> proto.BucketLifecycleRule
	59,  // 53: proto.BucketPolicyStatus.userAccessPolicies:type_name -> proto.BucketUserAccess
	51,  // 54: proto.BucketLifecycleRuleCreateRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadata
	53,  // 55: proto.BucketLifecycleRuleCreateRequest.spec:type_name -> proto.BucketLifecycleRuleSpec
	51,  // 56: proto.BucketLifecycleRule.metadata:type_name -> proto.BucketLifecycleRuleMetadata
	53,  // 57: proto.BucketLifecycleRule.spec:type_name -> proto.BucketLifecycleRuleSpec
	50,  // 58: proto.BucketLifecycleRule.status:type_name -> proto.BucketLifecycleRuleStatus
	7,   // 59: proto.BucketLifecycleRuleStatus.phase:type_name -> proto.BucketLifecycleRuleSPhase
	85,  // 60: proto.BucketLifecycleRuleMetadata.creationTimestamp:type_name -> google.protobuf.Timestamp
	85,  // 61: proto.BucketLifecycleRuleMetadata.updateTimestamp:type_name -> google.protobuf.Timestamp
	85,  // 62: proto.BucketLifecycleRuleMetadata.deletionTimestamp:type_name -> google.protobuf.Timestamp
	52,  // 63: proto.BucketLifecycleRuleGetRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadataRef
	52,  // 64: proto.BucketLifecycleRuleUpdateRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadataRef
	53,  // 65: proto.BucketLifecycleRuleUpdateRequest.spec:type_name -> proto.BucketLifecycleRuleSpec
	52,  // 66: proto.BucketLifecycleRuleDeleteRequest.metadata:type_name -> proto.BucketLifecycleRuleMetadataRef
	49,  // 67: proto.BucketLifecycleRuleSearchResponse.rules:type_name -> proto.BucketLifecycleRule
	65,  // 68: proto.BucketUserAccess.metadata:type_name -> proto.ObjectUserMetadata
	61,  // 69: proto.BucketUserAccess.spec:type_name -> proto.ObjectUserPermissionSpec
	63,  // 70: proto.CreateObjectUserRequest.metadata:type_name -> proto.ObjectUserMetadataCreate
	61,  // 71: proto.CreateObjectUserRequest.spec:type_name -> proto.ObjectUserPermissionSpec
	9,   // 72: proto.ObjectUserPermissionSpec.permission:type_name -> proto.BucketPermission
	8,   // 73: proto.ObjectUserPermissionSpec.actions:type_name -> proto.ObjectBucketActions
	9,   // 74: proto.ObjectUserPolicy.permissions:type_name -> proto.BucketPermission
	8,   // 75: proto.ObjectUserPolicy.actions:type_name -> proto.ObjectBucketActions
	65,  // 76: proto.ObjectUser.metadata:type_name -> proto.ObjectUserMetadata
	61,  // 77: proto.ObjectUser.spec:type_name -> proto.ObjectUserPermissionSpec
	66,  // 78: proto.ObjectUser.status:type_name -> proto.ObjectUserStatus
	84,  // 79: proto.ObjectUserMetadata.labels:type_name -> proto.ObjectUserMetadata.LabelsEntry
	85,  // 80: proto.ObjectUserMetadata.creationTimestamp:type_name -> google.protobuf.Timestamp
	85,  // 81: proto.ObjectUserMetadata.updateTimestamp:type_name -> google.protobuf.Timestamp
	85,  // 82: proto.ObjectUserMetadata.deleteTimestamp:type_name -> google.protobuf.Timestamp
	10,  // 83: proto.ObjectUserStatus.phase:type_name -> proto.ObjectUserPhase
	67,  // 84: proto.ObjectUserStatus.principal:type_name -> proto.AccessPrincipal
	68,  // 85: proto.AccessPrincipal.cluster:type_name -> proto.ObjectCluster
	69,  // 86: proto.AccessPrincipal.credentials:type_name -> proto.ObjectAccessCredentials
	70,  // 87: proto.ObjectUserGetRequest.metadata:type_name -> proto.ObjectUserMetadataRef
	64,  // 88: proto.ObjectUserSearchResponse.users:type_name -> proto.ObjectUser
	70,  // 89: proto.ObjectUserDeleteRequest.metadata:type_name -> proto.ObjectUserMetadataRef
	70,  // 90: proto.ObjectUserUpdateRequest.metadata:type_name -> proto.ObjectUserMetadataRef
	61,  // 91: proto.ObjectUserUpdateRequest.spec:type_name -> proto.ObjectUserPermissionSpec
	70,  // 92: proto.ObjectUserUpdateCredsRequest.metadata:type_name -> proto.ObjectUserMetadataRef
	11,  // 93: proto.FileStorageService.Create:input_type -> proto.FilesystemCreateRequest
	12,  // 94: proto.FileStorageService.Get:input_type -> proto.FilesystemGetRequest
	15,  // 95: proto.FileStorageService.Search:input_type -> proto.FilesystemSearchRequest
	17,  // 96: proto.FileStorageService.Update:input_type -> proto.FilesystemUpdateRequest
	18,  // 97: proto.FileStorageService.Delete:input_type -> proto.FilesystemDeleteRequest
	13,  // 98: proto.FileStorageService.GetUser:input_type -> proto.FilesystemGetUserRequest
	86,  // 99: proto.FileStorageService.Ping:input_type -> google.protobuf.Empty
	32,  // 100: proto.ObjectStorageService.CreateBucket:input_type -> proto.ObjectBucketCreateRequest
	42,  // 101: proto.ObjectStorageService.GetBucket:input_type -> proto.ObjectBucketGetRequest
	43,  // 102: proto.ObjectStorageService.SearchBucket:input_type -> proto.ObjectBucketSearchRequest
	46,  // 103: proto.ObjectStorageService.DeleteBucket:input_type -> proto.ObjectBucketDeleteRequest
	48,  // 104: proto.ObjectStorageService.CreateBucketLifecycleRule:input_type -> proto.BucketLifecycleRuleCreateRequest
	54,  // 105: proto.ObjectStorageService.GetBucketLifecycleRule:input_type -> proto.BucketLifecycleRuleGetRequest
	57,  // 106: proto.ObjectStorageService.SearchBucketLifecycleRule:input_type -> proto.BucketLifecycleRuleSearchRequest
	55,  // 107: proto.ObjectStorageService.UpdateBucketLifecycleRule:input_type -> proto.BucketLifecycleRuleUpdateRequest
	56,  // 108: proto.ObjectStorageService.DeleteBucketLifecycleRule:input_type -> proto.BucketLifecycleRuleDeleteRequest
	60,  // 109: proto.ObjectStorageService.CreateObjectUser:input_type -> proto.CreateObjectUserRequest
	71,  // 110: proto.ObjectStorageService.GetObjectUser:input_type -> proto.ObjectUserGetRequest
	72,  // 111: proto.ObjectStorageService.SearchObjectUser:input_type -> proto.ObjectUserSearchRequest
	74,  // 112: proto.ObjectStorageService.DeleteObjectUser:input_type -> proto.ObjectUserDeleteRequest
	75,  // 113: proto.ObjectStorageService.UpdateObjectUserPolicy:input_type -> proto.ObjectUserUpdateRequest
	76,  // 114: proto.ObjectStorageService.UpdateObjectUserCredentials:input_type -> proto.ObjectUserUpdateCredsRequest
	86,  // 115: proto.ObjectStorageService.Ping:input_type -> google.protobuf.Empty
	19,  // 116: proto.FileStorageService.Create:output_type -> proto.Filesystem
	19,  // 117: proto.FileStorageService.Get:output_type -> proto.Filesystem
	16,  // 118: proto.FileStorageService.Search:output_type -> proto.FilesystemSearchResponse
	19,  // 119: proto.FileStorageService.Update:output_type -> proto.Filesystem
	86,  // 120: proto.FileStorageService.Delete:output_type -> google.protobuf.Empty
	14,  // 121: proto.FileStorageService.GetUser:output_type -> proto.FilesystemGetUserResponse
	86,  // 122: proto.FileStorageService.Ping:output_type -> google.protobuf.Empty
	36,  // 123: proto.ObjectStorageService.CreateBucket:output_type -> proto.ObjectBucket
	36,  // 124: proto.ObjectStorageService.GetBucket:output_type -> proto.ObjectBucket
	45,  // 125: proto.ObjectStorageService.SearchBucket:output_type -> proto.ObjectBucketSearchResponse
	86,  // 126: proto.ObjectStorageService.DeleteBucket:output_type -> google.protobuf.Empty
	49,  // 127: proto.ObjectStorageService.CreateBucketLifecycleRule:output_type -> proto.BucketLifecycleRule
	49,  // 128: proto.ObjectStorageService.GetBucketLifecycleRule:output_type -> proto.BucketLifecycleRule
	58,  // 129: proto.ObjectStorageService.SearchBucketLifecycleRule:output_type -> proto.BucketLifecycleRuleSearchResponse
	49,  // 130: proto.ObjectStorageService.UpdateBucketLifecycleRule:output_type -> proto.BucketLifecycleRule
	86,  // 131: proto.ObjectStorageService.DeleteBucketLifecycleRule:output_type -> google.protobuf.Empty
	64,  // 132: proto.ObjectStorageService.CreateObjectUser:output_type -> proto.ObjectUser
	64,  // 133: proto.ObjectStorageService.GetObjectUser:output_type -> proto.ObjectUser
	73,  // 134: proto.ObjectStorageService.SearchObjectUser:output_type -> proto.ObjectUserSearchResponse
	86,  // 135: proto.ObjectStorageService.DeleteObjectUser:output_type -> google.protobuf.Empty
	64,  // 136: proto.ObjectStorageService.UpdateObjectUserPolicy:output_type -> proto.ObjectUser
	64,  // 137: proto.ObjectStorageService.UpdateObjectUserCredentials:output_type -> proto.ObjectUser
	86,  // 138: proto.ObjectStorageService.Ping:output_type -> google.protobuf.Empty
	116, // [116:139] is the sub-list for method output_type
	93,  // [93:116] is the sub-list for method input_type
	93,  // [93:93] is the sub-list for extension type_name
	93,  // [93:93] is the sub-list for extension extendee
	0,   // [0:93] is the sub-list for field type_name
}

func init() { file_storage_proto_init() }
func file_storage_proto_init() {
	if File_storage_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemGetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemSpecUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMetadataCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMetadataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMetadataReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMetadataSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMountStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSecurityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeNetworkGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketCreateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageCapacityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketMetadataRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketSecurityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketNetworkGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketSearchMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectBucketDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketPolicyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleMetadataRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLifecycleRuleSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketUserAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObjectUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserPermissionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserMetadataCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAccessCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserMetadataRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUserUpdateCredsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*FilesystemMetadataUpdate_Name)(nil),
		(*FilesystemMetadataUpdate_ResourceId)(nil),
	}
	file_storage_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*FilesystemMetadataReference_Name)(nil),
		(*FilesystemMetadataReference_ResourceId)(nil),
	}
	file_storage_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_storage_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*ObjectBucketMetadataRef_BucketName)(nil),
		(*ObjectBucketMetadataRef_BucketId)(nil),
	}
	file_storage_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*ObjectUserMetadataRef_UserName)(nil),
		(*ObjectUserMetadataRef_UserId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_storage_proto_goTypes,
		DependencyIndexes: file_storage_proto_depIdxs,
		EnumInfos:         file_storage_proto_enumTypes,
		MessageInfos:      file_storage_proto_msgTypes,
	}.Build()
	File_storage_proto = out.File
	file_storage_proto_rawDesc = nil
	file_storage_proto_goTypes = nil
	file_storage_proto_depIdxs = nil
}
