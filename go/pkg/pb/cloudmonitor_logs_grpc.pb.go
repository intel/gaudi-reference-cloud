// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: cloudmonitor_logs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudMonitorLogsServiceClient is the client API for CloudMonitorLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudMonitorLogsServiceClient interface {
	SearchAllLogs(ctx context.Context, in *SearchAllLogsRequest, opts ...grpc.CallOption) (*SearchAllLogsResponse, error)
	SearchLogsByTerm(ctx context.Context, in *SearchLogsByTermRequest, opts ...grpc.CallOption) (*SearchLogsByTermResponse, error)
	SearchPanelData(ctx context.Context, in *SearchPanelDataRequest, opts ...grpc.CallOption) (*SearchPanelDataResponse, error)
	SearchLogsByFilter(ctx context.Context, in *SearchLogsByFilterRequest, opts ...grpc.CallOption) (*SearchLogsByFilterResponse, error)
	SearchLogsByPhrase(ctx context.Context, in *SearchLogsByPhraseRequest, opts ...grpc.CallOption) (*SearchLogsByPhraseResponse, error)
	UserRegistration(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error)
}

type cloudMonitorLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudMonitorLogsServiceClient(cc grpc.ClientConnInterface) CloudMonitorLogsServiceClient {
	return &cloudMonitorLogsServiceClient{cc}
}

func (c *cloudMonitorLogsServiceClient) SearchAllLogs(ctx context.Context, in *SearchAllLogsRequest, opts ...grpc.CallOption) (*SearchAllLogsResponse, error) {
	out := new(SearchAllLogsResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorLogsService/SearchAllLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorLogsServiceClient) SearchLogsByTerm(ctx context.Context, in *SearchLogsByTermRequest, opts ...grpc.CallOption) (*SearchLogsByTermResponse, error) {
	out := new(SearchLogsByTermResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorLogsService/SearchLogsByTerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorLogsServiceClient) SearchPanelData(ctx context.Context, in *SearchPanelDataRequest, opts ...grpc.CallOption) (*SearchPanelDataResponse, error) {
	out := new(SearchPanelDataResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorLogsService/SearchPanelData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorLogsServiceClient) SearchLogsByFilter(ctx context.Context, in *SearchLogsByFilterRequest, opts ...grpc.CallOption) (*SearchLogsByFilterResponse, error) {
	out := new(SearchLogsByFilterResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorLogsService/SearchLogsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorLogsServiceClient) SearchLogsByPhrase(ctx context.Context, in *SearchLogsByPhraseRequest, opts ...grpc.CallOption) (*SearchLogsByPhraseResponse, error) {
	out := new(SearchLogsByPhraseResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorLogsService/SearchLogsByPhrase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorLogsServiceClient) UserRegistration(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error) {
	out := new(UserRegistrationResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorLogsService/UserRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudMonitorLogsServiceServer is the server API for CloudMonitorLogsService service.
// All implementations must embed UnimplementedCloudMonitorLogsServiceServer
// for forward compatibility
type CloudMonitorLogsServiceServer interface {
	SearchAllLogs(context.Context, *SearchAllLogsRequest) (*SearchAllLogsResponse, error)
	SearchLogsByTerm(context.Context, *SearchLogsByTermRequest) (*SearchLogsByTermResponse, error)
	SearchPanelData(context.Context, *SearchPanelDataRequest) (*SearchPanelDataResponse, error)
	SearchLogsByFilter(context.Context, *SearchLogsByFilterRequest) (*SearchLogsByFilterResponse, error)
	SearchLogsByPhrase(context.Context, *SearchLogsByPhraseRequest) (*SearchLogsByPhraseResponse, error)
	UserRegistration(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error)
	mustEmbedUnimplementedCloudMonitorLogsServiceServer()
}

// UnimplementedCloudMonitorLogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudMonitorLogsServiceServer struct {
}

func (UnimplementedCloudMonitorLogsServiceServer) SearchAllLogs(context.Context, *SearchAllLogsRequest) (*SearchAllLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAllLogs not implemented")
}
func (UnimplementedCloudMonitorLogsServiceServer) SearchLogsByTerm(context.Context, *SearchLogsByTermRequest) (*SearchLogsByTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogsByTerm not implemented")
}
func (UnimplementedCloudMonitorLogsServiceServer) SearchPanelData(context.Context, *SearchPanelDataRequest) (*SearchPanelDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPanelData not implemented")
}
func (UnimplementedCloudMonitorLogsServiceServer) SearchLogsByFilter(context.Context, *SearchLogsByFilterRequest) (*SearchLogsByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogsByFilter not implemented")
}
func (UnimplementedCloudMonitorLogsServiceServer) SearchLogsByPhrase(context.Context, *SearchLogsByPhraseRequest) (*SearchLogsByPhraseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogsByPhrase not implemented")
}
func (UnimplementedCloudMonitorLogsServiceServer) UserRegistration(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegistration not implemented")
}
func (UnimplementedCloudMonitorLogsServiceServer) mustEmbedUnimplementedCloudMonitorLogsServiceServer() {
}

// UnsafeCloudMonitorLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudMonitorLogsServiceServer will
// result in compilation errors.
type UnsafeCloudMonitorLogsServiceServer interface {
	mustEmbedUnimplementedCloudMonitorLogsServiceServer()
}

func RegisterCloudMonitorLogsServiceServer(s grpc.ServiceRegistrar, srv CloudMonitorLogsServiceServer) {
	s.RegisterService(&CloudMonitorLogsService_ServiceDesc, srv)
}

func _CloudMonitorLogsService_SearchAllLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorLogsServiceServer).SearchAllLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorLogsService/SearchAllLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorLogsServiceServer).SearchAllLogs(ctx, req.(*SearchAllLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorLogsService_SearchLogsByTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsByTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorLogsServiceServer).SearchLogsByTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorLogsService/SearchLogsByTerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorLogsServiceServer).SearchLogsByTerm(ctx, req.(*SearchLogsByTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorLogsService_SearchPanelData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPanelDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorLogsServiceServer).SearchPanelData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorLogsService/SearchPanelData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorLogsServiceServer).SearchPanelData(ctx, req.(*SearchPanelDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorLogsService_SearchLogsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorLogsServiceServer).SearchLogsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorLogsService/SearchLogsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorLogsServiceServer).SearchLogsByFilter(ctx, req.(*SearchLogsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorLogsService_SearchLogsByPhrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsByPhraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorLogsServiceServer).SearchLogsByPhrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorLogsService/SearchLogsByPhrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorLogsServiceServer).SearchLogsByPhrase(ctx, req.(*SearchLogsByPhraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorLogsService_UserRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorLogsServiceServer).UserRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorLogsService/UserRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorLogsServiceServer).UserRegistration(ctx, req.(*UserRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudMonitorLogsService_ServiceDesc is the grpc.ServiceDesc for CloudMonitorLogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudMonitorLogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudMonitorLogsService",
	HandlerType: (*CloudMonitorLogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAllLogs",
			Handler:    _CloudMonitorLogsService_SearchAllLogs_Handler,
		},
		{
			MethodName: "SearchLogsByTerm",
			Handler:    _CloudMonitorLogsService_SearchLogsByTerm_Handler,
		},
		{
			MethodName: "SearchPanelData",
			Handler:    _CloudMonitorLogsService_SearchPanelData_Handler,
		},
		{
			MethodName: "SearchLogsByFilter",
			Handler:    _CloudMonitorLogsService_SearchLogsByFilter_Handler,
		},
		{
			MethodName: "SearchLogsByPhrase",
			Handler:    _CloudMonitorLogsService_SearchLogsByPhrase_Handler,
		},
		{
			MethodName: "UserRegistration",
			Handler:    _CloudMonitorLogsService_UserRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudmonitor_logs.proto",
}
