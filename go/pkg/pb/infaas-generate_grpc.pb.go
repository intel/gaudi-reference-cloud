// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: infaas-generate.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextGeneratorClient is the client API for TextGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextGeneratorClient interface {
	GenerateStream(ctx context.Context, in *GenerateStreamRequest, opts ...grpc.CallOption) (TextGenerator_GenerateStreamClient, error)
	ChatCompletionStream(ctx context.Context, in *ChatCompletionStreamRequest, opts ...grpc.CallOption) (TextGenerator_ChatCompletionStreamClient, error)
}

type textGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewTextGeneratorClient(cc grpc.ClientConnInterface) TextGeneratorClient {
	return &textGeneratorClient{cc}
}

func (c *textGeneratorClient) GenerateStream(ctx context.Context, in *GenerateStreamRequest, opts ...grpc.CallOption) (TextGenerator_GenerateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGenerator_ServiceDesc.Streams[0], "/proto.TextGenerator/GenerateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &textGeneratorGenerateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextGenerator_GenerateStreamClient interface {
	Recv() (*GenerateStreamResponse, error)
	grpc.ClientStream
}

type textGeneratorGenerateStreamClient struct {
	grpc.ClientStream
}

func (x *textGeneratorGenerateStreamClient) Recv() (*GenerateStreamResponse, error) {
	m := new(GenerateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textGeneratorClient) ChatCompletionStream(ctx context.Context, in *ChatCompletionStreamRequest, opts ...grpc.CallOption) (TextGenerator_ChatCompletionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGenerator_ServiceDesc.Streams[1], "/proto.TextGenerator/ChatCompletionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &textGeneratorChatCompletionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextGenerator_ChatCompletionStreamClient interface {
	Recv() (*ChatCompletionStreamResponse, error)
	grpc.ClientStream
}

type textGeneratorChatCompletionStreamClient struct {
	grpc.ClientStream
}

func (x *textGeneratorChatCompletionStreamClient) Recv() (*ChatCompletionStreamResponse, error) {
	m := new(ChatCompletionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextGeneratorServer is the server API for TextGenerator service.
// All implementations must embed UnimplementedTextGeneratorServer
// for forward compatibility
type TextGeneratorServer interface {
	GenerateStream(*GenerateStreamRequest, TextGenerator_GenerateStreamServer) error
	ChatCompletionStream(*ChatCompletionStreamRequest, TextGenerator_ChatCompletionStreamServer) error
	mustEmbedUnimplementedTextGeneratorServer()
}

// UnimplementedTextGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedTextGeneratorServer struct {
}

func (UnimplementedTextGeneratorServer) GenerateStream(*GenerateStreamRequest, TextGenerator_GenerateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateStream not implemented")
}
func (UnimplementedTextGeneratorServer) ChatCompletionStream(*ChatCompletionStreamRequest, TextGenerator_ChatCompletionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletionStream not implemented")
}
func (UnimplementedTextGeneratorServer) mustEmbedUnimplementedTextGeneratorServer() {}

// UnsafeTextGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextGeneratorServer will
// result in compilation errors.
type UnsafeTextGeneratorServer interface {
	mustEmbedUnimplementedTextGeneratorServer()
}

func RegisterTextGeneratorServer(s grpc.ServiceRegistrar, srv TextGeneratorServer) {
	s.RegisterService(&TextGenerator_ServiceDesc, srv)
}

func _TextGenerator_GenerateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextGeneratorServer).GenerateStream(m, &textGeneratorGenerateStreamServer{stream})
}

type TextGenerator_GenerateStreamServer interface {
	Send(*GenerateStreamResponse) error
	grpc.ServerStream
}

type textGeneratorGenerateStreamServer struct {
	grpc.ServerStream
}

func (x *textGeneratorGenerateStreamServer) Send(m *GenerateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TextGenerator_ChatCompletionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextGeneratorServer).ChatCompletionStream(m, &textGeneratorChatCompletionStreamServer{stream})
}

type TextGenerator_ChatCompletionStreamServer interface {
	Send(*ChatCompletionStreamResponse) error
	grpc.ServerStream
}

type textGeneratorChatCompletionStreamServer struct {
	grpc.ServerStream
}

func (x *textGeneratorChatCompletionStreamServer) Send(m *ChatCompletionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TextGenerator_ServiceDesc is the grpc.ServiceDesc for TextGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TextGenerator",
	HandlerType: (*TextGeneratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateStream",
			Handler:       _TextGenerator_GenerateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChatCompletionStream",
			Handler:       _TextGenerator_ChatCompletionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "infaas-generate.proto",
}
