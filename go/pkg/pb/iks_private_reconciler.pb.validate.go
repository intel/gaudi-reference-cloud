// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iks_private_reconciler.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClusterDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterDeletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterDeletionRequestMultiError, or nil if none found.
func (m *ClusterDeletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterDeletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return ClusterDeletionRequestMultiError(errors)
	}

	return nil
}

// ClusterDeletionRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterDeletionRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterDeletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterDeletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterDeletionRequestMultiError) AllErrors() []error { return m }

// ClusterDeletionRequestValidationError is the validation error returned by
// ClusterDeletionRequest.Validate if the designated constraints aren't met.
type ClusterDeletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterDeletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterDeletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterDeletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterDeletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterDeletionRequestValidationError) ErrorName() string {
	return "ClusterDeletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterDeletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterDeletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterDeletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterDeletionRequestValidationError{}

// Validate checks the field values on ClusterReconcilerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterReconcilerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterReconcilerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterReconcilerRequestMultiError, or nil if none found.
func (m *ClusterReconcilerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterReconcilerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if len(errors) > 0 {
		return ClusterReconcilerRequestMultiError(errors)
	}

	return nil
}

// ClusterReconcilerRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterReconcilerRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterReconcilerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterReconcilerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterReconcilerRequestMultiError) AllErrors() []error { return m }

// ClusterReconcilerRequestValidationError is the validation error returned by
// ClusterReconcilerRequest.Validate if the designated constraints aren't met.
type ClusterReconcilerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterReconcilerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterReconcilerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterReconcilerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterReconcilerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterReconcilerRequestValidationError) ErrorName() string {
	return "ClusterReconcilerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterReconcilerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterReconcilerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterReconcilerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterReconcilerRequestValidationError{}

// Validate checks the field values on ClusterReconcilerResponseCluster with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ClusterReconcilerResponseCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterReconcilerResponseCluster with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ClusterReconcilerResponseClusterMultiError, or nil if none found.
func (m *ClusterReconcilerResponseCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterReconcilerResponseCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for ClusterRevId

	// no validation rules for DesiredJson

	if len(errors) > 0 {
		return ClusterReconcilerResponseClusterMultiError(errors)
	}

	return nil
}

// ClusterReconcilerResponseClusterMultiError is an error wrapping multiple
// validation errors returned by
// ClusterReconcilerResponseCluster.ValidateAll() if the designated
// constraints aren't met.
type ClusterReconcilerResponseClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterReconcilerResponseClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterReconcilerResponseClusterMultiError) AllErrors() []error { return m }

// ClusterReconcilerResponseClusterValidationError is the validation error
// returned by ClusterReconcilerResponseCluster.Validate if the designated
// constraints aren't met.
type ClusterReconcilerResponseClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterReconcilerResponseClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterReconcilerResponseClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterReconcilerResponseClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterReconcilerResponseClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterReconcilerResponseClusterValidationError) ErrorName() string {
	return "ClusterReconcilerResponseClusterValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterReconcilerResponseClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterReconcilerResponseCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterReconcilerResponseClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterReconcilerResponseClusterValidationError{}

// Validate checks the field values on ClusterReconcilerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterReconcilerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterReconcilerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterReconcilerResponseMultiError, or nil if none found.
func (m *ClusterReconcilerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterReconcilerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterReconcilerResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterReconcilerResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterReconcilerResponseValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterReconcilerResponseMultiError(errors)
	}

	return nil
}

// ClusterReconcilerResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterReconcilerResponse.ValidateAll() if the
// designated constraints aren't met.
type ClusterReconcilerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterReconcilerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterReconcilerResponseMultiError) AllErrors() []error { return m }

// ClusterReconcilerResponseValidationError is the validation error returned by
// ClusterReconcilerResponse.Validate if the designated constraints aren't met.
type ClusterReconcilerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterReconcilerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterReconcilerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterReconcilerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterReconcilerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterReconcilerResponseValidationError) ErrorName() string {
	return "ClusterReconcilerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterReconcilerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterReconcilerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterReconcilerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterReconcilerResponseValidationError{}

// Validate checks the field values on UpdateClusterStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClusterStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClusterStateRequestMultiError, or nil if none found.
func (m *UpdateClusterStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateClusterStateRequestMultiError(errors)
	}

	return nil
}

// UpdateClusterStateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateClusterStateRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateClusterStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterStateRequestMultiError) AllErrors() []error { return m }

// UpdateClusterStateRequestValidationError is the validation error returned by
// UpdateClusterStateRequest.Validate if the designated constraints aren't met.
type UpdateClusterStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterStateRequestValidationError) ErrorName() string {
	return "UpdateClusterStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterStateRequestValidationError{}

// Validate checks the field values on UpdateClusterChangeAppliedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateClusterChangeAppliedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterChangeAppliedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateClusterChangeAppliedRequestMultiError, or nil if none found.
func (m *UpdateClusterChangeAppliedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterChangeAppliedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterrevId

	// no validation rules for ChangeApplied

	if len(errors) > 0 {
		return UpdateClusterChangeAppliedRequestMultiError(errors)
	}

	return nil
}

// UpdateClusterChangeAppliedRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateClusterChangeAppliedRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateClusterChangeAppliedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterChangeAppliedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterChangeAppliedRequestMultiError) AllErrors() []error { return m }

// UpdateClusterChangeAppliedRequestValidationError is the validation error
// returned by UpdateClusterChangeAppliedRequest.Validate if the designated
// constraints aren't met.
type UpdateClusterChangeAppliedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterChangeAppliedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterChangeAppliedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterChangeAppliedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterChangeAppliedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterChangeAppliedRequestValidationError) ErrorName() string {
	return "UpdateClusterChangeAppliedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterChangeAppliedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterChangeAppliedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterChangeAppliedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterChangeAppliedRequestValidationError{}

// Validate checks the field values on NodeStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NodeStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeStatusRequestMultiError, or nil if none found.
func (m *NodeStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IpAddress

	// no validation rules for InstanceIMI

	// no validation rules for KubeletVersion

	// no validation rules for KubeProxyVersion

	// no validation rules for CreationTime

	// no validation rules for State

	// no validation rules for LastUpdate

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for DnsName

	if all {
		switch v := interface{}(m.GetWekaStorage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeStatusRequestValidationError{
					field:  "WekaStorage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeStatusRequestValidationError{
					field:  "WekaStorage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWekaStorage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeStatusRequestValidationError{
				field:  "WekaStorage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NodeStatusRequestMultiError(errors)
	}

	return nil
}

// NodeStatusRequestMultiError is an error wrapping multiple validation errors
// returned by NodeStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type NodeStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeStatusRequestMultiError) AllErrors() []error { return m }

// NodeStatusRequestValidationError is the validation error returned by
// NodeStatusRequest.Validate if the designated constraints aren't met.
type NodeStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeStatusRequestValidationError) ErrorName() string {
	return "NodeStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NodeStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeStatusRequestValidationError{}

// Validate checks the field values on NodeGroupStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NodeGroupStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeGroupStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeGroupStatusRequestMultiError, or nil if none found.
func (m *NodeGroupStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeGroupStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Count

	// no validation rules for Type

	// no validation rules for State

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeGroupStatusRequestValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeGroupStatusRequestValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeGroupStatusRequestValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return NodeGroupStatusRequestMultiError(errors)
	}

	return nil
}

// NodeGroupStatusRequestMultiError is an error wrapping multiple validation
// errors returned by NodeGroupStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type NodeGroupStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeGroupStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeGroupStatusRequestMultiError) AllErrors() []error { return m }

// NodeGroupStatusRequestValidationError is the validation error returned by
// NodeGroupStatusRequest.Validate if the designated constraints aren't met.
type NodeGroupStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeGroupStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeGroupStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeGroupStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeGroupStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeGroupStatusRequestValidationError) ErrorName() string {
	return "NodeGroupStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NodeGroupStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeGroupStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeGroupStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeGroupStatusRequestValidationError{}

// Validate checks the field values on AddonStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonStatusRequestMultiError, or nil if none found.
func (m *AddonStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for State

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for LastUpdate

	// no validation rules for Artifact

	if len(errors) > 0 {
		return AddonStatusRequestMultiError(errors)
	}

	return nil
}

// AddonStatusRequestMultiError is an error wrapping multiple validation errors
// returned by AddonStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type AddonStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonStatusRequestMultiError) AllErrors() []error { return m }

// AddonStatusRequestValidationError is the validation error returned by
// AddonStatusRequest.Validate if the designated constraints aren't met.
type AddonStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonStatusRequestValidationError) ErrorName() string {
	return "AddonStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonStatusRequestValidationError{}

// Validate checks the field values on IlbStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IlbStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IlbStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IlbStatusRequestMultiError, or nil if none found.
func (m *IlbStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IlbStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Vip

	// no validation rules for State

	// no validation rules for PoolID

	// no validation rules for VipID

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IlbStatusRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IlbStatusRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IlbStatusRequestValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return IlbStatusRequestMultiError(errors)
	}

	return nil
}

// IlbStatusRequestMultiError is an error wrapping multiple validation errors
// returned by IlbStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type IlbStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IlbStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IlbStatusRequestMultiError) AllErrors() []error { return m }

// IlbStatusRequestValidationError is the validation error returned by
// IlbStatusRequest.Validate if the designated constraints aren't met.
type IlbStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IlbStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IlbStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IlbStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IlbStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IlbStatusRequestValidationError) ErrorName() string { return "IlbStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e IlbStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIlbStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IlbStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IlbStatusRequestValidationError{}

// Validate checks the field values on IlbConditionsStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IlbConditionsStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IlbConditionsStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IlbConditionsStatusRequestMultiError, or nil if none found.
func (m *IlbConditionsStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IlbConditionsStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolCreated

	// no validation rules for VipCreated

	// no validation rules for VipPoolLinked

	if len(errors) > 0 {
		return IlbConditionsStatusRequestMultiError(errors)
	}

	return nil
}

// IlbConditionsStatusRequestMultiError is an error wrapping multiple
// validation errors returned by IlbConditionsStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type IlbConditionsStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IlbConditionsStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IlbConditionsStatusRequestMultiError) AllErrors() []error { return m }

// IlbConditionsStatusRequestValidationError is the validation error returned
// by IlbConditionsStatusRequest.Validate if the designated constraints aren't met.
type IlbConditionsStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IlbConditionsStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IlbConditionsStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IlbConditionsStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IlbConditionsStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IlbConditionsStatusRequestValidationError) ErrorName() string {
	return "IlbConditionsStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IlbConditionsStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIlbConditionsStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IlbConditionsStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IlbConditionsStatusRequestValidationError{}

// Validate checks the field values on StorageStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageStatusRequestMultiError, or nil if none found.
func (m *StorageStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceName

	// no validation rules for NamespaceCreated

	// no validation rules for NamespaceState

	// no validation rules for Provider

	// no validation rules for Size

	// no validation rules for SecretCreated

	// no validation rules for StorageState

	// no validation rules for Message

	// no validation rules for Reason

	if len(errors) > 0 {
		return StorageStatusRequestMultiError(errors)
	}

	return nil
}

// StorageStatusRequestMultiError is an error wrapping multiple validation
// errors returned by StorageStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageStatusRequestMultiError) AllErrors() []error { return m }

// StorageStatusRequestValidationError is the validation error returned by
// StorageStatusRequest.Validate if the designated constraints aren't met.
type StorageStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageStatusRequestValidationError) ErrorName() string {
	return "StorageStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageStatusRequestValidationError{}

// Validate checks the field values on FirewallStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FirewallStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FirewallStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FirewallStatusRequestMultiError, or nil if none found.
func (m *FirewallStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FirewallStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Firewallstate

	// no validation rules for Destinationip

	// no validation rules for Port

	// no validation rules for Protocol

	if len(errors) > 0 {
		return FirewallStatusRequestMultiError(errors)
	}

	return nil
}

// FirewallStatusRequestMultiError is an error wrapping multiple validation
// errors returned by FirewallStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type FirewallStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FirewallStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FirewallStatusRequestMultiError) AllErrors() []error { return m }

// FirewallStatusRequestValidationError is the validation error returned by
// FirewallStatusRequest.Validate if the designated constraints aren't met.
type FirewallStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirewallStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirewallStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirewallStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirewallStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirewallStatusRequestValidationError) ErrorName() string {
	return "FirewallStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FirewallStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirewallStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirewallStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirewallStatusRequestValidationError{}

// Validate checks the field values on ClusterStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterStatusRequestMultiError, or nil if none found.
func (m *ClusterStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for LastUpdate

	// no validation rules for Reason

	// no validation rules for Message

	for idx, item := range m.GetNodegroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Nodegroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Nodegroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterStatusRequestValidationError{
					field:  fmt.Sprintf("Nodegroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAddons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Addons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Addons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterStatusRequestValidationError{
					field:  fmt.Sprintf("Addons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIlbs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Ilbs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Ilbs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterStatusRequestValidationError{
					field:  fmt.Sprintf("Ilbs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStorages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Storages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Storages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterStatusRequestValidationError{
					field:  fmt.Sprintf("Storages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFirewall() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Firewall[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterStatusRequestValidationError{
						field:  fmt.Sprintf("Firewall[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterStatusRequestValidationError{
					field:  fmt.Sprintf("Firewall[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterStatusRequestMultiError(errors)
	}

	return nil
}

// ClusterStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterStatusRequestMultiError) AllErrors() []error { return m }

// ClusterStatusRequestValidationError is the validation error returned by
// ClusterStatusRequest.Validate if the designated constraints aren't met.
type ClusterStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterStatusRequestValidationError) ErrorName() string {
	return "ClusterStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterStatusRequestValidationError{}

// Validate checks the field values on UpdateClusterStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClusterStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClusterStatusRequestMultiError, or nil if none found.
func (m *UpdateClusterStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetClusterStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateClusterStatusRequestValidationError{
					field:  "ClusterStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateClusterStatusRequestValidationError{
					field:  "ClusterStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClusterStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterStatusRequestValidationError{
				field:  "ClusterStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateClusterStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateClusterStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateClusterStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateClusterStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterStatusRequestMultiError) AllErrors() []error { return m }

// UpdateClusterStatusRequestValidationError is the validation error returned
// by UpdateClusterStatusRequest.Validate if the designated constraints aren't met.
type UpdateClusterStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterStatusRequestValidationError) ErrorName() string {
	return "UpdateClusterStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterStatusRequestValidationError{}

// Validate checks the field values on UpdateClusterCertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClusterCertsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterCertsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClusterCertsRequestMultiError, or nil if none found.
func (m *UpdateClusterCertsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterCertsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for CaCert

	// no validation rules for CaKey

	// no validation rules for EtcdCaCert

	// no validation rules for EtcdCaKey

	// no validation rules for EtcdCaRotationKey

	// no validation rules for SaPub

	// no validation rules for SaKey

	// no validation rules for CpRegistrationCmd

	// no validation rules for WrkRegistrationCmd

	if len(errors) > 0 {
		return UpdateClusterCertsRequestMultiError(errors)
	}

	return nil
}

// UpdateClusterCertsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateClusterCertsRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateClusterCertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterCertsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterCertsRequestMultiError) AllErrors() []error { return m }

// UpdateClusterCertsRequestValidationError is the validation error returned by
// UpdateClusterCertsRequest.Validate if the designated constraints aren't met.
type UpdateClusterCertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterCertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterCertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterCertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterCertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterCertsRequestValidationError) ErrorName() string {
	return "UpdateClusterCertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterCertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterCertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterCertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterCertsRequestValidationError{}
