// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dpai_workspace.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DpaiWorkspaceDeploymentMeta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceDeploymentMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceDeploymentMeta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceDeploymentMetaMultiError, or nil if none found.
func (m *DpaiWorkspaceDeploymentMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceDeploymentMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	// no validation rules for IksId

	// no validation rules for ManagementNodeGroupId

	if all {
		switch v := interface{}(m.GetDeploymentStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiWorkspaceDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiWorkspaceDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiWorkspaceDeploymentMetaValidationError{
				field:  "DeploymentStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiWorkspaceDeploymentMetaMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceDeploymentMetaMultiError is an error wrapping multiple
// validation errors returned by DpaiWorkspaceDeploymentMeta.ValidateAll() if
// the designated constraints aren't met.
type DpaiWorkspaceDeploymentMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceDeploymentMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceDeploymentMetaMultiError) AllErrors() []error { return m }

// DpaiWorkspaceDeploymentMetaValidationError is the validation error returned
// by DpaiWorkspaceDeploymentMeta.Validate if the designated constraints
// aren't met.
type DpaiWorkspaceDeploymentMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceDeploymentMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceDeploymentMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceDeploymentMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceDeploymentMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceDeploymentMetaValidationError) ErrorName() string {
	return "DpaiWorkspaceDeploymentMetaValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceDeploymentMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceDeploymentMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceDeploymentMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceDeploymentMetaValidationError{}

// Validate checks the field values on DpaiWorkspaceServices with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceServices) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceServices with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceServicesMultiError, or nil if none found.
func (m *DpaiWorkspaceServices) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceServices) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for VersionId

	if all {
		switch v := interface{}(m.GetDeploymentStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiWorkspaceServicesValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiWorkspaceServicesValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiWorkspaceServicesValidationError{
				field:  "DeploymentStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiWorkspaceServicesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiWorkspaceServicesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiWorkspaceServicesValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiWorkspaceServicesMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceServicesMultiError is an error wrapping multiple validation
// errors returned by DpaiWorkspaceServices.ValidateAll() if the designated
// constraints aren't met.
type DpaiWorkspaceServicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceServicesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceServicesMultiError) AllErrors() []error { return m }

// DpaiWorkspaceServicesValidationError is the validation error returned by
// DpaiWorkspaceServices.Validate if the designated constraints aren't met.
type DpaiWorkspaceServicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceServicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceServicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceServicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceServicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceServicesValidationError) ErrorName() string {
	return "DpaiWorkspaceServicesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceServicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceServices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceServicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceServicesValidationError{}

// Validate checks the field values on DpaiWorkspace with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspace with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiWorkspaceMultiError, or
// nil if none found.
func (m *DpaiWorkspace) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Region

	// no validation rules for Description

	// no validation rules for Tags

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiWorkspaceValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiWorkspaceValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiWorkspaceValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiWorkspaceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiWorkspaceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiWorkspaceValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeploymentMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiWorkspaceValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiWorkspaceValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiWorkspaceValidationError{
				field:  "DeploymentMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiWorkspaceMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceMultiError is an error wrapping multiple validation errors
// returned by DpaiWorkspace.ValidateAll() if the designated constraints
// aren't met.
type DpaiWorkspaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceMultiError) AllErrors() []error { return m }

// DpaiWorkspaceValidationError is the validation error returned by
// DpaiWorkspace.Validate if the designated constraints aren't met.
type DpaiWorkspaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceValidationError) ErrorName() string { return "DpaiWorkspaceValidationError" }

// Error satisfies the builtin error interface
func (e DpaiWorkspaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceValidationError{}

// Validate checks the field values on DpaiWorkspaceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceCreateRequestMultiError, or nil if none found.
func (m *DpaiWorkspaceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Region

	// no validation rules for Description

	// no validation rules for Tags

	// no validation rules for CreatedBy

	if len(errors) > 0 {
		return DpaiWorkspaceCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiWorkspaceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiWorkspaceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceCreateRequestMultiError) AllErrors() []error { return m }

// DpaiWorkspaceCreateRequestValidationError is the validation error returned
// by DpaiWorkspaceCreateRequest.Validate if the designated constraints aren't met.
type DpaiWorkspaceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceCreateRequestValidationError) ErrorName() string {
	return "DpaiWorkspaceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceCreateRequestValidationError{}

// Validate checks the field values on DpaiWorkspaceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceListRequestMultiError, or nil if none found.
func (m *DpaiWorkspaceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return DpaiWorkspaceListRequestMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceListRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiWorkspaceListRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiWorkspaceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceListRequestMultiError) AllErrors() []error { return m }

// DpaiWorkspaceListRequestValidationError is the validation error returned by
// DpaiWorkspaceListRequest.Validate if the designated constraints aren't met.
type DpaiWorkspaceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceListRequestValidationError) ErrorName() string {
	return "DpaiWorkspaceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceListRequestValidationError{}

// Validate checks the field values on DpaiWorkspaceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceListResponseMultiError, or nil if none found.
func (m *DpaiWorkspaceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiWorkspaceListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiWorkspaceListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiWorkspaceListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrevOffset

	// no validation rules for CurrOffset

	// no validation rules for NextOffset

	// no validation rules for LastOffset

	// no validation rules for Limit

	// no validation rules for TotalRecords

	if len(errors) > 0 {
		return DpaiWorkspaceListResponseMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceListResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiWorkspaceListResponse.ValidateAll() if the
// designated constraints aren't met.
type DpaiWorkspaceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceListResponseMultiError) AllErrors() []error { return m }

// DpaiWorkspaceListResponseValidationError is the validation error returned by
// DpaiWorkspaceListResponse.Validate if the designated constraints aren't met.
type DpaiWorkspaceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceListResponseValidationError) ErrorName() string {
	return "DpaiWorkspaceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceListResponseValidationError{}

// Validate checks the field values on DpaiWorkspaceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceGetRequestMultiError, or nil if none found.
func (m *DpaiWorkspaceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiWorkspaceGetRequestMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceGetRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiWorkspaceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiWorkspaceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceGetRequestMultiError) AllErrors() []error { return m }

// DpaiWorkspaceGetRequestValidationError is the validation error returned by
// DpaiWorkspaceGetRequest.Validate if the designated constraints aren't met.
type DpaiWorkspaceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceGetRequestValidationError) ErrorName() string {
	return "DpaiWorkspaceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceGetRequestValidationError{}

// Validate checks the field values on DpaiWorkspaceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceDeleteRequestMultiError, or nil if none found.
func (m *DpaiWorkspaceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiWorkspaceDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiWorkspaceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiWorkspaceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiWorkspaceDeleteRequestValidationError is the validation error returned
// by DpaiWorkspaceDeleteRequest.Validate if the designated constraints aren't met.
type DpaiWorkspaceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceDeleteRequestValidationError) ErrorName() string {
	return "DpaiWorkspaceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceDeleteRequestValidationError{}

// Validate checks the field values on DpaiWorkspaceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiWorkspaceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiWorkspaceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiWorkspaceUpdateRequestMultiError, or nil if none found.
func (m *DpaiWorkspaceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiWorkspaceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for Tags

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiWorkspaceUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiWorkspaceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiWorkspaceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiWorkspaceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiWorkspaceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiWorkspaceUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiWorkspaceUpdateRequestValidationError is the validation error returned
// by DpaiWorkspaceUpdateRequest.Validate if the designated constraints aren't met.
type DpaiWorkspaceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiWorkspaceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiWorkspaceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiWorkspaceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiWorkspaceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiWorkspaceUpdateRequestValidationError) ErrorName() string {
	return "DpaiWorkspaceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiWorkspaceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiWorkspaceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiWorkspaceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiWorkspaceUpdateRequestValidationError{}
