// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network_address_translation_private.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddressTranslationCreatePrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddressTranslationCreatePrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddressTranslationCreatePrivateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddressTranslationCreatePrivateRequestMultiError, or nil if none found.
func (m *AddressTranslationCreatePrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationCreatePrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationCreatePrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationCreatePrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationCreatePrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationCreatePrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationCreatePrivateRequestMultiError(errors)
	}

	return nil
}

// AddressTranslationCreatePrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// AddressTranslationCreatePrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationCreatePrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationCreatePrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationCreatePrivateRequestMultiError) AllErrors() []error { return m }

// AddressTranslationCreatePrivateRequestValidationError is the validation
// error returned by AddressTranslationCreatePrivateRequest.Validate if the
// designated constraints aren't met.
type AddressTranslationCreatePrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationCreatePrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationCreatePrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationCreatePrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationCreatePrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationCreatePrivateRequestValidationError) ErrorName() string {
	return "AddressTranslationCreatePrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationCreatePrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationCreatePrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationCreatePrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationCreatePrivateRequestValidationError{}

// Validate checks the field values on AddressTranslationGetPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddressTranslationGetPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationGetPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddressTranslationGetPrivateRequestMultiError, or nil if none found.
func (m *AddressTranslationGetPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationGetPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationGetPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationGetPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationGetPrivateRequestMultiError(errors)
	}

	return nil
}

// AddressTranslationGetPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddressTranslationGetPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationGetPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationGetPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationGetPrivateRequestMultiError) AllErrors() []error { return m }

// AddressTranslationGetPrivateRequestValidationError is the validation error
// returned by AddressTranslationGetPrivateRequest.Validate if the designated
// constraints aren't met.
type AddressTranslationGetPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationGetPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationGetPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationGetPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationGetPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationGetPrivateRequestValidationError) ErrorName() string {
	return "AddressTranslationGetPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationGetPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationGetPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationGetPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationGetPrivateRequestValidationError{}

// Validate checks the field values on AddressTranslationPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressTranslationPrivateMultiError, or nil if none found.
func (m *AddressTranslationPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationPrivateMultiError(errors)
	}

	return nil
}

// AddressTranslationPrivateMultiError is an error wrapping multiple validation
// errors returned by AddressTranslationPrivate.ValidateAll() if the
// designated constraints aren't met.
type AddressTranslationPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationPrivateMultiError) AllErrors() []error { return m }

// AddressTranslationPrivateValidationError is the validation error returned by
// AddressTranslationPrivate.Validate if the designated constraints aren't met.
type AddressTranslationPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationPrivateValidationError) ErrorName() string {
	return "AddressTranslationPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationPrivateValidationError{}

// Validate checks the field values on AddressTranslationIdReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationIdReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationIdReference with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddressTranslationIdReferenceMultiError, or nil if none found.
func (m *AddressTranslationIdReference) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationIdReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationIdReferenceValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationIdReferenceValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationIdReferenceValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationIdReferenceMultiError(errors)
	}

	return nil
}

// AddressTranslationIdReferenceMultiError is an error wrapping multiple
// validation errors returned by AddressTranslationIdReference.ValidateAll()
// if the designated constraints aren't met.
type AddressTranslationIdReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationIdReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationIdReferenceMultiError) AllErrors() []error { return m }

// AddressTranslationIdReferenceValidationError is the validation error
// returned by AddressTranslationIdReference.Validate if the designated
// constraints aren't met.
type AddressTranslationIdReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationIdReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationIdReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationIdReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationIdReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationIdReferenceValidationError) ErrorName() string {
	return "AddressTranslationIdReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationIdReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationIdReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationIdReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationIdReferenceValidationError{}

// Validate checks the field values on AddressTranslationMetadataCreatePrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddressTranslationMetadataCreatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddressTranslationMetadataCreatePrivate with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddressTranslationMetadataCreatePrivateMultiError, or nil if none found.
func (m *AddressTranslationMetadataCreatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationMetadataCreatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return AddressTranslationMetadataCreatePrivateMultiError(errors)
	}

	return nil
}

// AddressTranslationMetadataCreatePrivateMultiError is an error wrapping
// multiple validation errors returned by
// AddressTranslationMetadataCreatePrivate.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationMetadataCreatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationMetadataCreatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationMetadataCreatePrivateMultiError) AllErrors() []error { return m }

// AddressTranslationMetadataCreatePrivateValidationError is the validation
// error returned by AddressTranslationMetadataCreatePrivate.Validate if the
// designated constraints aren't met.
type AddressTranslationMetadataCreatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationMetadataCreatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationMetadataCreatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationMetadataCreatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationMetadataCreatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationMetadataCreatePrivateValidationError) ErrorName() string {
	return "AddressTranslationMetadataCreatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationMetadataCreatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationMetadataCreatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationMetadataCreatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationMetadataCreatePrivateValidationError{}

// Validate checks the field values on AddressTranslationMetadataPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddressTranslationMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationMetadataPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddressTranslationMetadataPrivateMultiError, or nil if none found.
func (m *AddressTranslationMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationMetadataPrivateValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationMetadataPrivateMultiError(errors)
	}

	return nil
}

// AddressTranslationMetadataPrivateMultiError is an error wrapping multiple
// validation errors returned by
// AddressTranslationMetadataPrivate.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationMetadataPrivateMultiError) AllErrors() []error { return m }

// AddressTranslationMetadataPrivateValidationError is the validation error
// returned by AddressTranslationMetadataPrivate.Validate if the designated
// constraints aren't met.
type AddressTranslationMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationMetadataPrivateValidationError) ErrorName() string {
	return "AddressTranslationMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationMetadataPrivateValidationError{}

// Validate checks the field values on AddressTranslationSpecPrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationSpecPrivate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddressTranslationSpecPrivateMultiError, or nil if none found.
func (m *AddressTranslationSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PortId

	// no validation rules for TranslationType

	// no validation rules for ProfileId

	// no validation rules for IpAddress

	// no validation rules for MacAddress

	if len(errors) > 0 {
		return AddressTranslationSpecPrivateMultiError(errors)
	}

	return nil
}

// AddressTranslationSpecPrivateMultiError is an error wrapping multiple
// validation errors returned by AddressTranslationSpecPrivate.ValidateAll()
// if the designated constraints aren't met.
type AddressTranslationSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationSpecPrivateMultiError) AllErrors() []error { return m }

// AddressTranslationSpecPrivateValidationError is the validation error
// returned by AddressTranslationSpecPrivate.Validate if the designated
// constraints aren't met.
type AddressTranslationSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationSpecPrivateValidationError) ErrorName() string {
	return "AddressTranslationSpecPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationSpecPrivateValidationError{}

// Validate checks the field values on AddressTranslationListPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddressTranslationListPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationListPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddressTranslationListPrivateRequestMultiError, or nil if none found.
func (m *AddressTranslationListPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationListPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationListPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationListPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationListPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationListPrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationListPrivateRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationListPrivateRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationListPrivateRequestMultiError(errors)
	}

	return nil
}

// AddressTranslationListPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddressTranslationListPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationListPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationListPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationListPrivateRequestMultiError) AllErrors() []error { return m }

// AddressTranslationListPrivateRequestValidationError is the validation error
// returned by AddressTranslationListPrivateRequest.Validate if the designated
// constraints aren't met.
type AddressTranslationListPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationListPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationListPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationListPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationListPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationListPrivateRequestValidationError) ErrorName() string {
	return "AddressTranslationListPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationListPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationListPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationListPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationListPrivateRequestValidationError{}

// Validate checks the field values on AddressTranslationListMetadataPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddressTranslationListMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationListMetadataPrivate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddressTranslationListMetadataPrivateMultiError, or nil if none found.
func (m *AddressTranslationListMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationListMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return AddressTranslationListMetadataPrivateMultiError(errors)
	}

	return nil
}

// AddressTranslationListMetadataPrivateMultiError is an error wrapping
// multiple validation errors returned by
// AddressTranslationListMetadataPrivate.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationListMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationListMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationListMetadataPrivateMultiError) AllErrors() []error { return m }

// AddressTranslationListMetadataPrivateValidationError is the validation error
// returned by AddressTranslationListMetadataPrivate.Validate if the
// designated constraints aren't met.
type AddressTranslationListMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationListMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationListMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationListMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationListMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationListMetadataPrivateValidationError) ErrorName() string {
	return "AddressTranslationListMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationListMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationListMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationListMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationListMetadataPrivateValidationError{}

// Validate checks the field values on AddressTranslationPrivateList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationPrivateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationPrivateList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddressTranslationPrivateListMultiError, or nil if none found.
func (m *AddressTranslationPrivateList) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationPrivateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressTranslationPrivateListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressTranslationPrivateListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressTranslationPrivateListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressTranslationPrivateListMultiError(errors)
	}

	return nil
}

// AddressTranslationPrivateListMultiError is an error wrapping multiple
// validation errors returned by AddressTranslationPrivateList.ValidateAll()
// if the designated constraints aren't met.
type AddressTranslationPrivateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationPrivateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationPrivateListMultiError) AllErrors() []error { return m }

// AddressTranslationPrivateListValidationError is the validation error
// returned by AddressTranslationPrivateList.Validate if the designated
// constraints aren't met.
type AddressTranslationPrivateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationPrivateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationPrivateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationPrivateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationPrivateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationPrivateListValidationError) ErrorName() string {
	return "AddressTranslationPrivateListValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationPrivateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationPrivateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationPrivateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationPrivateListValidationError{}

// Validate checks the field values on
// AddressTranslationUpdateStatusPrivateRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationUpdateStatusPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddressTranslationUpdateStatusPrivateRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AddressTranslationUpdateStatusPrivateRequestMultiError, or nil if none found.
func (m *AddressTranslationUpdateStatusPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationUpdateStatusPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationUpdateStatusPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationUpdateStatusPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationUpdateStatusPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationUpdateStatusPrivateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationUpdateStatusPrivateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationUpdateStatusPrivateRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationUpdateStatusPrivateRequestMultiError(errors)
	}

	return nil
}

// AddressTranslationUpdateStatusPrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// AddressTranslationUpdateStatusPrivateRequest.ValidateAll() if the
// designated constraints aren't met.
type AddressTranslationUpdateStatusPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationUpdateStatusPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationUpdateStatusPrivateRequestMultiError) AllErrors() []error { return m }

// AddressTranslationUpdateStatusPrivateRequestValidationError is the
// validation error returned by
// AddressTranslationUpdateStatusPrivateRequest.Validate if the designated
// constraints aren't met.
type AddressTranslationUpdateStatusPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationUpdateStatusPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationUpdateStatusPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationUpdateStatusPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationUpdateStatusPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationUpdateStatusPrivateRequestValidationError) ErrorName() string {
	return "AddressTranslationUpdateStatusPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationUpdateStatusPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationUpdateStatusPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationUpdateStatusPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationUpdateStatusPrivateRequestValidationError{}

// Validate checks the field values on AddressTranslationStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressTranslationStatusMultiError, or nil if none found.
func (m *AddressTranslationStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if len(errors) > 0 {
		return AddressTranslationStatusMultiError(errors)
	}

	return nil
}

// AddressTranslationStatusMultiError is an error wrapping multiple validation
// errors returned by AddressTranslationStatus.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationStatusMultiError) AllErrors() []error { return m }

// AddressTranslationStatusValidationError is the validation error returned by
// AddressTranslationStatus.Validate if the designated constraints aren't met.
type AddressTranslationStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationStatusValidationError) ErrorName() string {
	return "AddressTranslationStatusValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationStatusValidationError{}

// Validate checks the field values on
// AddressTranslationSearchStreamPrivateRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationSearchStreamPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddressTranslationSearchStreamPrivateRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AddressTranslationSearchStreamPrivateRequestMultiError, or nil if none found.
func (m *AddressTranslationSearchStreamPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationSearchStreamPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddressTranslationSearchStreamPrivateRequestMultiError(errors)
	}

	return nil
}

// AddressTranslationSearchStreamPrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// AddressTranslationSearchStreamPrivateRequest.ValidateAll() if the
// designated constraints aren't met.
type AddressTranslationSearchStreamPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationSearchStreamPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationSearchStreamPrivateRequestMultiError) AllErrors() []error { return m }

// AddressTranslationSearchStreamPrivateRequestValidationError is the
// validation error returned by
// AddressTranslationSearchStreamPrivateRequest.Validate if the designated
// constraints aren't met.
type AddressTranslationSearchStreamPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationSearchStreamPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationSearchStreamPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationSearchStreamPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationSearchStreamPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationSearchStreamPrivateRequestValidationError) ErrorName() string {
	return "AddressTranslationSearchStreamPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationSearchStreamPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationSearchStreamPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationSearchStreamPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationSearchStreamPrivateRequestValidationError{}

// Validate checks the field values on AddressTranslationWatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationWatchResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddressTranslationWatchResponseMultiError, or nil if none found.
func (m *AddressTranslationWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationWatchResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressTranslationWatchResponseMultiError(errors)
	}

	return nil
}

// AddressTranslationWatchResponseMultiError is an error wrapping multiple
// validation errors returned by AddressTranslationWatchResponse.ValidateAll()
// if the designated constraints aren't met.
type AddressTranslationWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationWatchResponseMultiError) AllErrors() []error { return m }

// AddressTranslationWatchResponseValidationError is the validation error
// returned by AddressTranslationWatchResponse.Validate if the designated
// constraints aren't met.
type AddressTranslationWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationWatchResponseValidationError) ErrorName() string {
	return "AddressTranslationWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationWatchResponseValidationError{}

// Validate checks the field values on AddressTranslationPrivateWatchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddressTranslationPrivateWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddressTranslationPrivateWatchResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddressTranslationPrivateWatchResponseMultiError, or nil if none found.
func (m *AddressTranslationPrivateWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationPrivateWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressTranslationPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressTranslationPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressTranslationPrivateWatchResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Spec

	// no validation rules for Status

	if len(errors) > 0 {
		return AddressTranslationPrivateWatchResponseMultiError(errors)
	}

	return nil
}

// AddressTranslationPrivateWatchResponseMultiError is an error wrapping
// multiple validation errors returned by
// AddressTranslationPrivateWatchResponse.ValidateAll() if the designated
// constraints aren't met.
type AddressTranslationPrivateWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationPrivateWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationPrivateWatchResponseMultiError) AllErrors() []error { return m }

// AddressTranslationPrivateWatchResponseValidationError is the validation
// error returned by AddressTranslationPrivateWatchResponse.Validate if the
// designated constraints aren't met.
type AddressTranslationPrivateWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationPrivateWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationPrivateWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationPrivateWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationPrivateWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationPrivateWatchResponseValidationError) ErrorName() string {
	return "AddressTranslationPrivateWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationPrivateWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationPrivateWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationPrivateWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationPrivateWatchResponseValidationError{}

// Validate checks the field values on AddressTranslationWatchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressTranslationWatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressTranslationWatchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddressTranslationWatchRequestMultiError, or nil if none found.
func (m *AddressTranslationWatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressTranslationWatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return AddressTranslationWatchRequestMultiError(errors)
	}

	return nil
}

// AddressTranslationWatchRequestMultiError is an error wrapping multiple
// validation errors returned by AddressTranslationWatchRequest.ValidateAll()
// if the designated constraints aren't met.
type AddressTranslationWatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressTranslationWatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressTranslationWatchRequestMultiError) AllErrors() []error { return m }

// AddressTranslationWatchRequestValidationError is the validation error
// returned by AddressTranslationWatchRequest.Validate if the designated
// constraints aren't met.
type AddressTranslationWatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressTranslationWatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressTranslationWatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressTranslationWatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressTranslationWatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressTranslationWatchRequestValidationError) ErrorName() string {
	return "AddressTranslationWatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressTranslationWatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressTranslationWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressTranslationWatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressTranslationWatchRequestValidationError{}
