// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: iks_private_reconciler.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IksPrivateReconcilerClient is the client API for IksPrivateReconciler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IksPrivateReconcilerClient interface {
	GetClustersReconciler(ctx context.Context, in *ClusterReconcilerRequest, opts ...grpc.CallOption) (*ClusterReconcilerResponse, error)
	PutClusterStateReconciler(ctx context.Context, in *UpdateClusterStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutClusterChangeAppliedReconciler(ctx context.Context, in *UpdateClusterChangeAppliedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutClusterStatusReconciler(ctx context.Context, in *UpdateClusterStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutClusterCertsReconciler(ctx context.Context, in *UpdateClusterCertsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteClusterReconciler(ctx context.Context, in *ClusterDeletionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iksPrivateReconcilerClient struct {
	cc grpc.ClientConnInterface
}

func NewIksPrivateReconcilerClient(cc grpc.ClientConnInterface) IksPrivateReconcilerClient {
	return &iksPrivateReconcilerClient{cc}
}

func (c *iksPrivateReconcilerClient) GetClustersReconciler(ctx context.Context, in *ClusterReconcilerRequest, opts ...grpc.CallOption) (*ClusterReconcilerResponse, error) {
	out := new(ClusterReconcilerResponse)
	err := c.cc.Invoke(ctx, "/proto.IksPrivateReconciler/GetClustersReconciler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksPrivateReconcilerClient) PutClusterStateReconciler(ctx context.Context, in *UpdateClusterStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksPrivateReconciler/PutClusterStateReconciler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksPrivateReconcilerClient) PutClusterChangeAppliedReconciler(ctx context.Context, in *UpdateClusterChangeAppliedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksPrivateReconciler/PutClusterChangeAppliedReconciler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksPrivateReconcilerClient) PutClusterStatusReconciler(ctx context.Context, in *UpdateClusterStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksPrivateReconciler/PutClusterStatusReconciler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksPrivateReconcilerClient) PutClusterCertsReconciler(ctx context.Context, in *UpdateClusterCertsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksPrivateReconciler/PutClusterCertsReconciler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iksPrivateReconcilerClient) DeleteClusterReconciler(ctx context.Context, in *ClusterDeletionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.IksPrivateReconciler/DeleteClusterReconciler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IksPrivateReconcilerServer is the server API for IksPrivateReconciler service.
// All implementations must embed UnimplementedIksPrivateReconcilerServer
// for forward compatibility
type IksPrivateReconcilerServer interface {
	GetClustersReconciler(context.Context, *ClusterReconcilerRequest) (*ClusterReconcilerResponse, error)
	PutClusterStateReconciler(context.Context, *UpdateClusterStateRequest) (*emptypb.Empty, error)
	PutClusterChangeAppliedReconciler(context.Context, *UpdateClusterChangeAppliedRequest) (*emptypb.Empty, error)
	PutClusterStatusReconciler(context.Context, *UpdateClusterStatusRequest) (*emptypb.Empty, error)
	PutClusterCertsReconciler(context.Context, *UpdateClusterCertsRequest) (*emptypb.Empty, error)
	DeleteClusterReconciler(context.Context, *ClusterDeletionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIksPrivateReconcilerServer()
}

// UnimplementedIksPrivateReconcilerServer must be embedded to have forward compatible implementations.
type UnimplementedIksPrivateReconcilerServer struct {
}

func (UnimplementedIksPrivateReconcilerServer) GetClustersReconciler(context.Context, *ClusterReconcilerRequest) (*ClusterReconcilerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClustersReconciler not implemented")
}
func (UnimplementedIksPrivateReconcilerServer) PutClusterStateReconciler(context.Context, *UpdateClusterStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterStateReconciler not implemented")
}
func (UnimplementedIksPrivateReconcilerServer) PutClusterChangeAppliedReconciler(context.Context, *UpdateClusterChangeAppliedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterChangeAppliedReconciler not implemented")
}
func (UnimplementedIksPrivateReconcilerServer) PutClusterStatusReconciler(context.Context, *UpdateClusterStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterStatusReconciler not implemented")
}
func (UnimplementedIksPrivateReconcilerServer) PutClusterCertsReconciler(context.Context, *UpdateClusterCertsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterCertsReconciler not implemented")
}
func (UnimplementedIksPrivateReconcilerServer) DeleteClusterReconciler(context.Context, *ClusterDeletionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterReconciler not implemented")
}
func (UnimplementedIksPrivateReconcilerServer) mustEmbedUnimplementedIksPrivateReconcilerServer() {}

// UnsafeIksPrivateReconcilerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IksPrivateReconcilerServer will
// result in compilation errors.
type UnsafeIksPrivateReconcilerServer interface {
	mustEmbedUnimplementedIksPrivateReconcilerServer()
}

func RegisterIksPrivateReconcilerServer(s grpc.ServiceRegistrar, srv IksPrivateReconcilerServer) {
	s.RegisterService(&IksPrivateReconciler_ServiceDesc, srv)
}

func _IksPrivateReconciler_GetClustersReconciler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterReconcilerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksPrivateReconcilerServer).GetClustersReconciler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksPrivateReconciler/GetClustersReconciler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksPrivateReconcilerServer).GetClustersReconciler(ctx, req.(*ClusterReconcilerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksPrivateReconciler_PutClusterStateReconciler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksPrivateReconcilerServer).PutClusterStateReconciler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksPrivateReconciler/PutClusterStateReconciler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksPrivateReconcilerServer).PutClusterStateReconciler(ctx, req.(*UpdateClusterStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksPrivateReconciler_PutClusterChangeAppliedReconciler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterChangeAppliedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksPrivateReconcilerServer).PutClusterChangeAppliedReconciler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksPrivateReconciler/PutClusterChangeAppliedReconciler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksPrivateReconcilerServer).PutClusterChangeAppliedReconciler(ctx, req.(*UpdateClusterChangeAppliedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksPrivateReconciler_PutClusterStatusReconciler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksPrivateReconcilerServer).PutClusterStatusReconciler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksPrivateReconciler/PutClusterStatusReconciler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksPrivateReconcilerServer).PutClusterStatusReconciler(ctx, req.(*UpdateClusterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksPrivateReconciler_PutClusterCertsReconciler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksPrivateReconcilerServer).PutClusterCertsReconciler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksPrivateReconciler/PutClusterCertsReconciler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksPrivateReconcilerServer).PutClusterCertsReconciler(ctx, req.(*UpdateClusterCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IksPrivateReconciler_DeleteClusterReconciler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IksPrivateReconcilerServer).DeleteClusterReconciler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IksPrivateReconciler/DeleteClusterReconciler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IksPrivateReconcilerServer).DeleteClusterReconciler(ctx, req.(*ClusterDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IksPrivateReconciler_ServiceDesc is the grpc.ServiceDesc for IksPrivateReconciler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IksPrivateReconciler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IksPrivateReconciler",
	HandlerType: (*IksPrivateReconcilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClustersReconciler",
			Handler:    _IksPrivateReconciler_GetClustersReconciler_Handler,
		},
		{
			MethodName: "PutClusterStateReconciler",
			Handler:    _IksPrivateReconciler_PutClusterStateReconciler_Handler,
		},
		{
			MethodName: "PutClusterChangeAppliedReconciler",
			Handler:    _IksPrivateReconciler_PutClusterChangeAppliedReconciler_Handler,
		},
		{
			MethodName: "PutClusterStatusReconciler",
			Handler:    _IksPrivateReconciler_PutClusterStatusReconciler_Handler,
		},
		{
			MethodName: "PutClusterCertsReconciler",
			Handler:    _IksPrivateReconciler_PutClusterCertsReconciler_Handler,
		},
		{
			MethodName: "DeleteClusterReconciler",
			Handler:    _IksPrivateReconciler_DeleteClusterReconciler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iks_private_reconciler.proto",
}
