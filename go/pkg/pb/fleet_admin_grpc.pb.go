// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: fleet_admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FleetAdminServiceClient is the client API for FleetAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetAdminServiceClient interface {
	// Get the list of compute node pools that the CloudAccount is allowed to launch instances in.
	SearchComputeNodePoolsForInstanceScheduling(ctx context.Context, in *SearchComputeNodePoolsForInstanceSchedulingRequest, opts ...grpc.CallOption) (*SearchComputeNodePoolsForInstanceSchedulingResponse, error)
	// Update the list of compute node pools that the CloudAccount is allowed to launch instances in.
	// DEPRECATED. WILL BE REPLACED WITH AddCloudAccountToComputeNodePool AND DeleteCloudAccountFromComputeNodePool.
	UpdateComputeNodePoolsForCloudAccount(ctx context.Context, in *UpdateComputeNodePoolsForCloudAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the list of patches which needs to be applied on the resource (Nodes/BaremetalHosts)
	GetResourcePatches(ctx context.Context, in *GetResourcePatchesRequest, opts ...grpc.CallOption) (*GetResourcePatchesResponse, error)
	// Sync the Fleet Admin DB with latest NodeStatistics
	ReportNodeStatistics(ctx context.Context, in *ReportNodeStatisticsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fleetAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetAdminServiceClient(cc grpc.ClientConnInterface) FleetAdminServiceClient {
	return &fleetAdminServiceClient{cc}
}

func (c *fleetAdminServiceClient) SearchComputeNodePoolsForInstanceScheduling(ctx context.Context, in *SearchComputeNodePoolsForInstanceSchedulingRequest, opts ...grpc.CallOption) (*SearchComputeNodePoolsForInstanceSchedulingResponse, error) {
	out := new(SearchComputeNodePoolsForInstanceSchedulingResponse)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminService/SearchComputeNodePoolsForInstanceScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminServiceClient) UpdateComputeNodePoolsForCloudAccount(ctx context.Context, in *UpdateComputeNodePoolsForCloudAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminService/UpdateComputeNodePoolsForCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminServiceClient) GetResourcePatches(ctx context.Context, in *GetResourcePatchesRequest, opts ...grpc.CallOption) (*GetResourcePatchesResponse, error) {
	out := new(GetResourcePatchesResponse)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminService/GetResourcePatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetAdminServiceClient) ReportNodeStatistics(ctx context.Context, in *ReportNodeStatisticsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.FleetAdminService/ReportNodeStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetAdminServiceServer is the server API for FleetAdminService service.
// All implementations must embed UnimplementedFleetAdminServiceServer
// for forward compatibility
type FleetAdminServiceServer interface {
	// Get the list of compute node pools that the CloudAccount is allowed to launch instances in.
	SearchComputeNodePoolsForInstanceScheduling(context.Context, *SearchComputeNodePoolsForInstanceSchedulingRequest) (*SearchComputeNodePoolsForInstanceSchedulingResponse, error)
	// Update the list of compute node pools that the CloudAccount is allowed to launch instances in.
	// DEPRECATED. WILL BE REPLACED WITH AddCloudAccountToComputeNodePool AND DeleteCloudAccountFromComputeNodePool.
	UpdateComputeNodePoolsForCloudAccount(context.Context, *UpdateComputeNodePoolsForCloudAccountRequest) (*emptypb.Empty, error)
	// Ping returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Get the list of patches which needs to be applied on the resource (Nodes/BaremetalHosts)
	GetResourcePatches(context.Context, *GetResourcePatchesRequest) (*GetResourcePatchesResponse, error)
	// Sync the Fleet Admin DB with latest NodeStatistics
	ReportNodeStatistics(context.Context, *ReportNodeStatisticsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFleetAdminServiceServer()
}

// UnimplementedFleetAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFleetAdminServiceServer struct {
}

func (UnimplementedFleetAdminServiceServer) SearchComputeNodePoolsForInstanceScheduling(context.Context, *SearchComputeNodePoolsForInstanceSchedulingRequest) (*SearchComputeNodePoolsForInstanceSchedulingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchComputeNodePoolsForInstanceScheduling not implemented")
}
func (UnimplementedFleetAdminServiceServer) UpdateComputeNodePoolsForCloudAccount(context.Context, *UpdateComputeNodePoolsForCloudAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComputeNodePoolsForCloudAccount not implemented")
}
func (UnimplementedFleetAdminServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFleetAdminServiceServer) GetResourcePatches(context.Context, *GetResourcePatchesRequest) (*GetResourcePatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcePatches not implemented")
}
func (UnimplementedFleetAdminServiceServer) ReportNodeStatistics(context.Context, *ReportNodeStatisticsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNodeStatistics not implemented")
}
func (UnimplementedFleetAdminServiceServer) mustEmbedUnimplementedFleetAdminServiceServer() {}

// UnsafeFleetAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetAdminServiceServer will
// result in compilation errors.
type UnsafeFleetAdminServiceServer interface {
	mustEmbedUnimplementedFleetAdminServiceServer()
}

func RegisterFleetAdminServiceServer(s grpc.ServiceRegistrar, srv FleetAdminServiceServer) {
	s.RegisterService(&FleetAdminService_ServiceDesc, srv)
}

func _FleetAdminService_SearchComputeNodePoolsForInstanceScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchComputeNodePoolsForInstanceSchedulingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminServiceServer).SearchComputeNodePoolsForInstanceScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminService/SearchComputeNodePoolsForInstanceScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminServiceServer).SearchComputeNodePoolsForInstanceScheduling(ctx, req.(*SearchComputeNodePoolsForInstanceSchedulingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminService_UpdateComputeNodePoolsForCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComputeNodePoolsForCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminServiceServer).UpdateComputeNodePoolsForCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminService/UpdateComputeNodePoolsForCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminServiceServer).UpdateComputeNodePoolsForCloudAccount(ctx, req.(*UpdateComputeNodePoolsForCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminService_GetResourcePatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcePatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminServiceServer).GetResourcePatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminService/GetResourcePatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminServiceServer).GetResourcePatches(ctx, req.(*GetResourcePatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetAdminService_ReportNodeStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNodeStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetAdminServiceServer).ReportNodeStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FleetAdminService/ReportNodeStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetAdminServiceServer).ReportNodeStatistics(ctx, req.(*ReportNodeStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetAdminService_ServiceDesc is the grpc.ServiceDesc for FleetAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FleetAdminService",
	HandlerType: (*FleetAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchComputeNodePoolsForInstanceScheduling",
			Handler:    _FleetAdminService_SearchComputeNodePoolsForInstanceScheduling_Handler,
		},
		{
			MethodName: "UpdateComputeNodePoolsForCloudAccount",
			Handler:    _FleetAdminService_UpdateComputeNodePoolsForCloudAccount_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FleetAdminService_Ping_Handler,
		},
		{
			MethodName: "GetResourcePatches",
			Handler:    _FleetAdminService_GetResourcePatches_Handler,
		},
		{
			MethodName: "ReportNodeStatistics",
			Handler:    _FleetAdminService_ReportNodeStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleet_admin.proto",
}
