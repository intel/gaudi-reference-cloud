// This file contains PRIVATE services that are intended for IDC infrastructure (controllers)
// and trusted parties. It is not a part of the public API.
//
// After updating this file, run "make generate".
//
// See:
//  - https://protobuf.dev/programming-guides/proto3/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: fleet_admin_ui_server.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddCloudAccountToComputeNodePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	PoolId         string `protobuf:"bytes,2,opt,name=poolId,proto3" json:"poolId,omitempty"`
	CreateAdmin    string `protobuf:"bytes,3,opt,name=createAdmin,proto3" json:"createAdmin,omitempty"`
}

func (x *AddCloudAccountToComputeNodePoolRequest) Reset() {
	*x = AddCloudAccountToComputeNodePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCloudAccountToComputeNodePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCloudAccountToComputeNodePoolRequest) ProtoMessage() {}

func (x *AddCloudAccountToComputeNodePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCloudAccountToComputeNodePoolRequest.ProtoReflect.Descriptor instead.
func (*AddCloudAccountToComputeNodePoolRequest) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{0}
}

func (x *AddCloudAccountToComputeNodePoolRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *AddCloudAccountToComputeNodePoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *AddCloudAccountToComputeNodePoolRequest) GetCreateAdmin() string {
	if x != nil {
		return x.CreateAdmin
	}
	return ""
}

type SearchNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If not empty, only nodes in this pool will be returned.
	PoolId *string `protobuf:"bytes,1,opt,name=poolId,proto3,oneof" json:"poolId,omitempty"`
}

func (x *SearchNodesRequest) Reset() {
	*x = SearchNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodesRequest) ProtoMessage() {}

func (x *SearchNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodesRequest.ProtoReflect.Descriptor instead.
func (*SearchNodesRequest) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{1}
}

func (x *SearchNodesRequest) GetPoolId() string {
	if x != nil && x.PoolId != nil {
		return *x.PoolId
	}
	return ""
}

type SearchNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputeNodes []*SearchNodesResponse_ComputeNode `protobuf:"bytes,1,rep,name=computeNodes,proto3" json:"computeNodes,omitempty"`
}

func (x *SearchNodesResponse) Reset() {
	*x = SearchNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodesResponse) ProtoMessage() {}

func (x *SearchNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodesResponse.ProtoReflect.Descriptor instead.
func (*SearchNodesResponse) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{2}
}

func (x *SearchNodesResponse) GetComputeNodes() []*SearchNodesResponse_ComputeNode {
	if x != nil {
		return x.ComputeNodes
	}
	return nil
}

type UpdateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceTypesOverride *OverridePoliciesAndValues `protobuf:"bytes,1,opt,name=instanceTypesOverride,proto3" json:"instanceTypesOverride,omitempty"`
	// Each value is a poolId.
	ComputeNodePoolsOverride *OverridePoliciesAndValues `protobuf:"bytes,2,opt,name=computeNodePoolsOverride,proto3" json:"computeNodePoolsOverride,omitempty"`
	NodeId                   int32                      `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Region                   string                     `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AvailabilityZone         string                     `protobuf:"bytes,5,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateNodeRequest) GetInstanceTypesOverride() *OverridePoliciesAndValues {
	if x != nil {
		return x.InstanceTypesOverride
	}
	return nil
}

func (x *UpdateNodeRequest) GetComputeNodePoolsOverride() *OverridePoliciesAndValues {
	if x != nil {
		return x.ComputeNodePoolsOverride
	}
	return nil
}

func (x *UpdateNodeRequest) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UpdateNodeRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateNodeRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

type OverridePoliciesAndValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverridePolicies bool     `protobuf:"varint,1,opt,name=overridePolicies,proto3" json:"overridePolicies,omitempty"`
	OverrideValues   []string `protobuf:"bytes,2,rep,name=overrideValues,proto3" json:"overrideValues,omitempty"`
}

func (x *OverridePoliciesAndValues) Reset() {
	*x = OverridePoliciesAndValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverridePoliciesAndValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverridePoliciesAndValues) ProtoMessage() {}

func (x *OverridePoliciesAndValues) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverridePoliciesAndValues.ProtoReflect.Descriptor instead.
func (*OverridePoliciesAndValues) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{4}
}

func (x *OverridePoliciesAndValues) GetOverridePolicies() bool {
	if x != nil {
		return x.OverridePolicies
	}
	return false
}

func (x *OverridePoliciesAndValues) GetOverrideValues() []string {
	if x != nil {
		return x.OverrideValues
	}
	return nil
}

type SearchComputeNodePoolsForNodeAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputeNodePools []*ComputeNodePool `protobuf:"bytes,1,rep,name=computeNodePools,proto3" json:"computeNodePools,omitempty"`
}

func (x *SearchComputeNodePoolsForNodeAdminResponse) Reset() {
	*x = SearchComputeNodePoolsForNodeAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComputeNodePoolsForNodeAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComputeNodePoolsForNodeAdminResponse) ProtoMessage() {}

func (x *SearchComputeNodePoolsForNodeAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComputeNodePoolsForNodeAdminResponse.ProtoReflect.Descriptor instead.
func (*SearchComputeNodePoolsForNodeAdminResponse) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{5}
}

func (x *SearchComputeNodePoolsForNodeAdminResponse) GetComputeNodePools() []*ComputeNodePool {
	if x != nil {
		return x.ComputeNodePools
	}
	return nil
}

type ComputeNodePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                    string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	PoolName                  string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
	NumberOfNodes             int32  `protobuf:"varint,3,opt,name=numberOfNodes,proto3" json:"numberOfNodes,omitempty"`
	PoolAccountManagerAgsRole string `protobuf:"bytes,4,opt,name=poolAccountManagerAgsRole,proto3" json:"poolAccountManagerAgsRole,omitempty"`
}

func (x *ComputeNodePool) Reset() {
	*x = ComputeNodePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeNodePool) ProtoMessage() {}

func (x *ComputeNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeNodePool.ProtoReflect.Descriptor instead.
func (*ComputeNodePool) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{6}
}

func (x *ComputeNodePool) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *ComputeNodePool) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *ComputeNodePool) GetNumberOfNodes() int32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *ComputeNodePool) GetPoolAccountManagerAgsRole() string {
	if x != nil {
		return x.PoolAccountManagerAgsRole
	}
	return ""
}

type PutComputeNodePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                    string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	PoolName                  string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
	PoolAccountManagerAgsRole string `protobuf:"bytes,3,opt,name=poolAccountManagerAgsRole,proto3" json:"poolAccountManagerAgsRole,omitempty"`
}

func (x *PutComputeNodePoolRequest) Reset() {
	*x = PutComputeNodePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutComputeNodePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutComputeNodePoolRequest) ProtoMessage() {}

func (x *PutComputeNodePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutComputeNodePoolRequest.ProtoReflect.Descriptor instead.
func (*PutComputeNodePoolRequest) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{7}
}

func (x *PutComputeNodePoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *PutComputeNodePoolRequest) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *PutComputeNodePoolRequest) GetPoolAccountManagerAgsRole() string {
	if x != nil {
		return x.PoolAccountManagerAgsRole
	}
	return ""
}

type SearchComputeNodePoolsForPoolAccountManagerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputeNodePoolsForPoolAccountManager []*ComputeNodePoolForPoolAccountManager `protobuf:"bytes,1,rep,name=ComputeNodePoolsForPoolAccountManager,proto3" json:"ComputeNodePoolsForPoolAccountManager,omitempty"`
}

func (x *SearchComputeNodePoolsForPoolAccountManagerResponse) Reset() {
	*x = SearchComputeNodePoolsForPoolAccountManagerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComputeNodePoolsForPoolAccountManagerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComputeNodePoolsForPoolAccountManagerResponse) ProtoMessage() {}

func (x *SearchComputeNodePoolsForPoolAccountManagerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComputeNodePoolsForPoolAccountManagerResponse.ProtoReflect.Descriptor instead.
func (*SearchComputeNodePoolsForPoolAccountManagerResponse) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{8}
}

func (x *SearchComputeNodePoolsForPoolAccountManagerResponse) GetComputeNodePoolsForPoolAccountManager() []*ComputeNodePoolForPoolAccountManager {
	if x != nil {
		return x.ComputeNodePoolsForPoolAccountManager
	}
	return nil
}

type ComputeNodePoolForPoolAccountManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId   string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	PoolName string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
}

func (x *ComputeNodePoolForPoolAccountManager) Reset() {
	*x = ComputeNodePoolForPoolAccountManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeNodePoolForPoolAccountManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeNodePoolForPoolAccountManager) ProtoMessage() {}

func (x *ComputeNodePoolForPoolAccountManager) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeNodePoolForPoolAccountManager.ProtoReflect.Descriptor instead.
func (*ComputeNodePoolForPoolAccountManager) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{9}
}

func (x *ComputeNodePoolForPoolAccountManager) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *ComputeNodePoolForPoolAccountManager) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

type SearchCloudAccountsForComputeNodePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
}

func (x *SearchCloudAccountsForComputeNodePoolRequest) Reset() {
	*x = SearchCloudAccountsForComputeNodePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCloudAccountsForComputeNodePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCloudAccountsForComputeNodePoolRequest) ProtoMessage() {}

func (x *SearchCloudAccountsForComputeNodePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCloudAccountsForComputeNodePoolRequest.ProtoReflect.Descriptor instead.
func (*SearchCloudAccountsForComputeNodePoolRequest) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{10}
}

func (x *SearchCloudAccountsForComputeNodePoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type SearchCloudAccountsForComputeNodePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountsForComputeNodePool []*CloudAccountForComputeNodePool `protobuf:"bytes,1,rep,name=CloudAccountsForComputeNodePool,proto3" json:"CloudAccountsForComputeNodePool,omitempty"`
}

func (x *SearchCloudAccountsForComputeNodePoolResponse) Reset() {
	*x = SearchCloudAccountsForComputeNodePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCloudAccountsForComputeNodePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCloudAccountsForComputeNodePoolResponse) ProtoMessage() {}

func (x *SearchCloudAccountsForComputeNodePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCloudAccountsForComputeNodePoolResponse.ProtoReflect.Descriptor instead.
func (*SearchCloudAccountsForComputeNodePoolResponse) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{11}
}

func (x *SearchCloudAccountsForComputeNodePoolResponse) GetCloudAccountsForComputeNodePool() []*CloudAccountForComputeNodePool {
	if x != nil {
		return x.CloudAccountsForComputeNodePool
	}
	return nil
}

type CloudAccountForComputeNodePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	PoolId         string `protobuf:"bytes,2,opt,name=poolId,proto3" json:"poolId,omitempty"`
	CreateAdmin    string `protobuf:"bytes,3,opt,name=createAdmin,proto3" json:"createAdmin,omitempty"`
}

func (x *CloudAccountForComputeNodePool) Reset() {
	*x = CloudAccountForComputeNodePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountForComputeNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountForComputeNodePool) ProtoMessage() {}

func (x *CloudAccountForComputeNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountForComputeNodePool.ProtoReflect.Descriptor instead.
func (*CloudAccountForComputeNodePool) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{12}
}

func (x *CloudAccountForComputeNodePool) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CloudAccountForComputeNodePool) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *CloudAccountForComputeNodePool) GetCreateAdmin() string {
	if x != nil {
		return x.CreateAdmin
	}
	return ""
}

type DeleteCloudAccountFromComputeNodePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId         string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	CloudAccountId string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *DeleteCloudAccountFromComputeNodePoolRequest) Reset() {
	*x = DeleteCloudAccountFromComputeNodePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudAccountFromComputeNodePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudAccountFromComputeNodePoolRequest) ProtoMessage() {}

func (x *DeleteCloudAccountFromComputeNodePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudAccountFromComputeNodePoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudAccountFromComputeNodePoolRequest) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteCloudAccountFromComputeNodePoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *DeleteCloudAccountFromComputeNodePoolRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type SearchInstanceTypeStatsForNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int32 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *SearchInstanceTypeStatsForNodeRequest) Reset() {
	*x = SearchInstanceTypeStatsForNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstanceTypeStatsForNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstanceTypeStatsForNodeRequest) ProtoMessage() {}

func (x *SearchInstanceTypeStatsForNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstanceTypeStatsForNodeRequest.ProtoReflect.Descriptor instead.
func (*SearchInstanceTypeStatsForNodeRequest) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{14}
}

func (x *SearchInstanceTypeStatsForNodeRequest) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type SearchInstanceTypeStatsForNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeInstanceTypeStats []*NodeInstanceTypeStats `protobuf:"bytes,1,rep,name=NodeInstanceTypeStats,proto3" json:"NodeInstanceTypeStats,omitempty"`
}

func (x *SearchInstanceTypeStatsForNodeResponse) Reset() {
	*x = SearchInstanceTypeStatsForNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstanceTypeStatsForNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstanceTypeStatsForNodeResponse) ProtoMessage() {}

func (x *SearchInstanceTypeStatsForNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstanceTypeStatsForNodeResponse.ProtoReflect.Descriptor instead.
func (*SearchInstanceTypeStatsForNodeResponse) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{15}
}

func (x *SearchInstanceTypeStatsForNodeResponse) GetNodeInstanceTypeStats() []*NodeInstanceTypeStats {
	if x != nil {
		return x.NodeInstanceTypeStats
	}
	return nil
}

type NodeInstanceTypeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId            int32                `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	InstanceTypeStats []*InstanceTypeStats `protobuf:"bytes,2,rep,name=InstanceTypeStats,proto3" json:"InstanceTypeStats,omitempty"`
}

func (x *NodeInstanceTypeStats) Reset() {
	*x = NodeInstanceTypeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInstanceTypeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInstanceTypeStats) ProtoMessage() {}

func (x *NodeInstanceTypeStats) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInstanceTypeStats.ProtoReflect.Descriptor instead.
func (*NodeInstanceTypeStats) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{16}
}

func (x *NodeInstanceTypeStats) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeInstanceTypeStats) GetInstanceTypeStats() []*InstanceTypeStats {
	if x != nil {
		return x.InstanceTypeStats
	}
	return nil
}

type InstanceTypeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType     string `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	RunningInstances int32  `protobuf:"varint,2,opt,name=runningInstances,proto3" json:"runningInstances,omitempty"`
	MaxNewInstances  int32  `protobuf:"varint,3,opt,name=maxNewInstances,proto3" json:"maxNewInstances,omitempty"`
}

func (x *InstanceTypeStats) Reset() {
	*x = InstanceTypeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTypeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTypeStats) ProtoMessage() {}

func (x *InstanceTypeStats) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTypeStats.ProtoReflect.Descriptor instead.
func (*InstanceTypeStats) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceTypeStats) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *InstanceTypeStats) GetRunningInstances() int32 {
	if x != nil {
		return x.RunningInstances
	}
	return 0
}

func (x *InstanceTypeStats) GetMaxNewInstances() int32 {
	if x != nil {
		return x.MaxNewInstances
	}
	return 0
}

type SearchNodesResponse_ComputeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName                string   `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	AvailabilityZone        string   `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	InstanceTypes           []string `protobuf:"bytes,3,rep,name=instanceTypes,proto3" json:"instanceTypes,omitempty"`
	PoolIds                 []string `protobuf:"bytes,4,rep,name=poolIds,proto3" json:"poolIds,omitempty"`
	PercentageResourcesUsed float32  `protobuf:"fixed32,5,opt,name=percentageResourcesUsed,proto3" json:"percentageResourcesUsed,omitempty"`
	Region                  string   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	ClusterId               string   `protobuf:"bytes,7,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace               string   `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NodeId                  int32    `protobuf:"varint,9,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *SearchNodesResponse_ComputeNode) Reset() {
	*x = SearchNodesResponse_ComputeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_admin_ui_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodesResponse_ComputeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodesResponse_ComputeNode) ProtoMessage() {}

func (x *SearchNodesResponse_ComputeNode) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_admin_ui_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodesResponse_ComputeNode.ProtoReflect.Descriptor instead.
func (*SearchNodesResponse_ComputeNode) Descriptor() ([]byte, []int) {
	return file_fleet_admin_ui_server_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SearchNodesResponse_ComputeNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SearchNodesResponse_ComputeNode) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *SearchNodesResponse_ComputeNode) GetInstanceTypes() []string {
	if x != nil {
		return x.InstanceTypes
	}
	return nil
}

func (x *SearchNodesResponse_ComputeNode) GetPoolIds() []string {
	if x != nil {
		return x.PoolIds
	}
	return nil
}

func (x *SearchNodesResponse_ComputeNode) GetPercentageResourcesUsed() float32 {
	if x != nil {
		return x.PercentageResourcesUsed
	}
	return 0
}

func (x *SearchNodesResponse_ComputeNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SearchNodesResponse_ComputeNode) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SearchNodesResponse_ComputeNode) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SearchNodesResponse_ComputeNode) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

var File_fleet_admin_ui_server_proto protoreflect.FileDescriptor

var file_fleet_admin_ui_server_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x69,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x27, 0x41, 0x64, 0x64, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0xbb, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x38,
	0x0a, 0x17, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x15, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x5c, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x6f, 0x0a, 0x19,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x70, 0x0a,
	0x2a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x19, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x41, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x41, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x19,
	0x50, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x19, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x41, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x41, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x33,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x52, 0x25, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x2c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x2d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a,
	0x1f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x1f, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x82,
	0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x22, 0x6e, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x15, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x22, 0x77, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x11,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4e,
	0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x32, 0xc4, 0x0c, 0x0a, 0x13,
	0x46, 0x6c, 0x65, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x49, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x49, 0x2a, 0x47, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x12, 0x53, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x62, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x98,
	0x01, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x50, 0x75,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x1a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0xb8, 0x01, 0x0a, 0x2b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x25, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0xe0, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5a,
	0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x70, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b, 0x17, 0x12, 0x15, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x69, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fleet_admin_ui_server_proto_rawDescOnce sync.Once
	file_fleet_admin_ui_server_proto_rawDescData = file_fleet_admin_ui_server_proto_rawDesc
)

func file_fleet_admin_ui_server_proto_rawDescGZIP() []byte {
	file_fleet_admin_ui_server_proto_rawDescOnce.Do(func() {
		file_fleet_admin_ui_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_fleet_admin_ui_server_proto_rawDescData)
	})
	return file_fleet_admin_ui_server_proto_rawDescData
}

var file_fleet_admin_ui_server_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_fleet_admin_ui_server_proto_goTypes = []interface{}{
	(*AddCloudAccountToComputeNodePoolRequest)(nil),             // 0: proto.AddCloudAccountToComputeNodePoolRequest
	(*SearchNodesRequest)(nil),                                  // 1: proto.SearchNodesRequest
	(*SearchNodesResponse)(nil),                                 // 2: proto.SearchNodesResponse
	(*UpdateNodeRequest)(nil),                                   // 3: proto.UpdateNodeRequest
	(*OverridePoliciesAndValues)(nil),                           // 4: proto.OverridePoliciesAndValues
	(*SearchComputeNodePoolsForNodeAdminResponse)(nil),          // 5: proto.SearchComputeNodePoolsForNodeAdminResponse
	(*ComputeNodePool)(nil),                                     // 6: proto.ComputeNodePool
	(*PutComputeNodePoolRequest)(nil),                           // 7: proto.PutComputeNodePoolRequest
	(*SearchComputeNodePoolsForPoolAccountManagerResponse)(nil), // 8: proto.SearchComputeNodePoolsForPoolAccountManagerResponse
	(*ComputeNodePoolForPoolAccountManager)(nil),                // 9: proto.ComputeNodePoolForPoolAccountManager
	(*SearchCloudAccountsForComputeNodePoolRequest)(nil),        // 10: proto.SearchCloudAccountsForComputeNodePoolRequest
	(*SearchCloudAccountsForComputeNodePoolResponse)(nil),       // 11: proto.SearchCloudAccountsForComputeNodePoolResponse
	(*CloudAccountForComputeNodePool)(nil),                      // 12: proto.CloudAccountForComputeNodePool
	(*DeleteCloudAccountFromComputeNodePoolRequest)(nil),        // 13: proto.DeleteCloudAccountFromComputeNodePoolRequest
	(*SearchInstanceTypeStatsForNodeRequest)(nil),               // 14: proto.SearchInstanceTypeStatsForNodeRequest
	(*SearchInstanceTypeStatsForNodeResponse)(nil),              // 15: proto.SearchInstanceTypeStatsForNodeResponse
	(*NodeInstanceTypeStats)(nil),                               // 16: proto.NodeInstanceTypeStats
	(*InstanceTypeStats)(nil),                                   // 17: proto.InstanceTypeStats
	(*SearchNodesResponse_ComputeNode)(nil),                     // 18: proto.SearchNodesResponse.ComputeNode
	(*emptypb.Empty)(nil),                                       // 19: google.protobuf.Empty
}
var file_fleet_admin_ui_server_proto_depIdxs = []int32{
	18, // 0: proto.SearchNodesResponse.computeNodes:type_name -> proto.SearchNodesResponse.ComputeNode
	4,  // 1: proto.UpdateNodeRequest.instanceTypesOverride:type_name -> proto.OverridePoliciesAndValues
	4,  // 2: proto.UpdateNodeRequest.computeNodePoolsOverride:type_name -> proto.OverridePoliciesAndValues
	6,  // 3: proto.SearchComputeNodePoolsForNodeAdminResponse.computeNodePools:type_name -> proto.ComputeNodePool
	9,  // 4: proto.SearchComputeNodePoolsForPoolAccountManagerResponse.ComputeNodePoolsForPoolAccountManager:type_name -> proto.ComputeNodePoolForPoolAccountManager
	12, // 5: proto.SearchCloudAccountsForComputeNodePoolResponse.CloudAccountsForComputeNodePool:type_name -> proto.CloudAccountForComputeNodePool
	16, // 6: proto.SearchInstanceTypeStatsForNodeResponse.NodeInstanceTypeStats:type_name -> proto.NodeInstanceTypeStats
	17, // 7: proto.NodeInstanceTypeStats.InstanceTypeStats:type_name -> proto.InstanceTypeStats
	0,  // 8: proto.FleetAdminUIService.AddCloudAccountToComputeNodePool:input_type -> proto.AddCloudAccountToComputeNodePoolRequest
	13, // 9: proto.FleetAdminUIService.DeleteCloudAccountFromComputeNodePool:input_type -> proto.DeleteCloudAccountFromComputeNodePoolRequest
	19, // 10: proto.FleetAdminUIService.Ping:input_type -> google.protobuf.Empty
	1,  // 11: proto.FleetAdminUIService.SearchNodes:input_type -> proto.SearchNodesRequest
	3,  // 12: proto.FleetAdminUIService.UpdateNode:input_type -> proto.UpdateNodeRequest
	19, // 13: proto.FleetAdminUIService.SearchComputeNodePoolsForNodeAdmin:input_type -> google.protobuf.Empty
	7,  // 14: proto.FleetAdminUIService.PutComputeNodePool:input_type -> proto.PutComputeNodePoolRequest
	19, // 15: proto.FleetAdminUIService.SearchComputeNodePoolsForPoolAccountManager:input_type -> google.protobuf.Empty
	10, // 16: proto.FleetAdminUIService.SearchCloudAccountsForComputeNodePool:input_type -> proto.SearchCloudAccountsForComputeNodePoolRequest
	14, // 17: proto.FleetAdminUIService.SearchInstanceTypeStatsForNode:input_type -> proto.SearchInstanceTypeStatsForNodeRequest
	19, // 18: proto.FleetAdminUIService.AddCloudAccountToComputeNodePool:output_type -> google.protobuf.Empty
	19, // 19: proto.FleetAdminUIService.DeleteCloudAccountFromComputeNodePool:output_type -> google.protobuf.Empty
	19, // 20: proto.FleetAdminUIService.Ping:output_type -> google.protobuf.Empty
	2,  // 21: proto.FleetAdminUIService.SearchNodes:output_type -> proto.SearchNodesResponse
	19, // 22: proto.FleetAdminUIService.UpdateNode:output_type -> google.protobuf.Empty
	5,  // 23: proto.FleetAdminUIService.SearchComputeNodePoolsForNodeAdmin:output_type -> proto.SearchComputeNodePoolsForNodeAdminResponse
	19, // 24: proto.FleetAdminUIService.PutComputeNodePool:output_type -> google.protobuf.Empty
	8,  // 25: proto.FleetAdminUIService.SearchComputeNodePoolsForPoolAccountManager:output_type -> proto.SearchComputeNodePoolsForPoolAccountManagerResponse
	11, // 26: proto.FleetAdminUIService.SearchCloudAccountsForComputeNodePool:output_type -> proto.SearchCloudAccountsForComputeNodePoolResponse
	15, // 27: proto.FleetAdminUIService.SearchInstanceTypeStatsForNode:output_type -> proto.SearchInstanceTypeStatsForNodeResponse
	18, // [18:28] is the sub-list for method output_type
	8,  // [8:18] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_fleet_admin_ui_server_proto_init() }
func file_fleet_admin_ui_server_proto_init() {
	if File_fleet_admin_ui_server_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_fleet_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fleet_admin_ui_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCloudAccountToComputeNodePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverridePoliciesAndValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComputeNodePoolsForNodeAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeNodePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutComputeNodePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComputeNodePoolsForPoolAccountManagerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeNodePoolForPoolAccountManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCloudAccountsForComputeNodePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCloudAccountsForComputeNodePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountForComputeNodePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudAccountFromComputeNodePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstanceTypeStatsForNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstanceTypeStatsForNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInstanceTypeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTypeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_admin_ui_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodesResponse_ComputeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fleet_admin_ui_server_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fleet_admin_ui_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fleet_admin_ui_server_proto_goTypes,
		DependencyIndexes: file_fleet_admin_ui_server_proto_depIdxs,
		MessageInfos:      file_fleet_admin_ui_server_proto_msgTypes,
	}.Build()
	File_fleet_admin_ui_server_proto = out.File
	file_fleet_admin_ui_server_proto_rawDesc = nil
	file_fleet_admin_ui_server_proto_goTypes = nil
	file_fleet_admin_ui_server_proto_depIdxs = nil
}
