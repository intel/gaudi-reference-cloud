// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: billing-driver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingDriverUsageServiceClient is the client API for BillingDriverUsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingDriverUsageServiceClient interface {
	ReportUsage(ctx context.Context, opts ...grpc.CallOption) (BillingDriverUsageService_ReportUsageClient, error)
}

type billingDriverUsageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingDriverUsageServiceClient(cc grpc.ClientConnInterface) BillingDriverUsageServiceClient {
	return &billingDriverUsageServiceClient{cc}
}

func (c *billingDriverUsageServiceClient) ReportUsage(ctx context.Context, opts ...grpc.CallOption) (BillingDriverUsageService_ReportUsageClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingDriverUsageService_ServiceDesc.Streams[0], "/proto.BillingDriverUsageService/ReportUsage", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingDriverUsageServiceReportUsageClient{stream}
	return x, nil
}

type BillingDriverUsageService_ReportUsageClient interface {
	Send(*BillingDriverUsage) error
	Recv() (*BillingDriverUsageResult, error)
	grpc.ClientStream
}

type billingDriverUsageServiceReportUsageClient struct {
	grpc.ClientStream
}

func (x *billingDriverUsageServiceReportUsageClient) Send(m *BillingDriverUsage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *billingDriverUsageServiceReportUsageClient) Recv() (*BillingDriverUsageResult, error) {
	m := new(BillingDriverUsageResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BillingDriverUsageServiceServer is the server API for BillingDriverUsageService service.
// All implementations must embed UnimplementedBillingDriverUsageServiceServer
// for forward compatibility
type BillingDriverUsageServiceServer interface {
	ReportUsage(BillingDriverUsageService_ReportUsageServer) error
	mustEmbedUnimplementedBillingDriverUsageServiceServer()
}

// UnimplementedBillingDriverUsageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingDriverUsageServiceServer struct {
}

func (UnimplementedBillingDriverUsageServiceServer) ReportUsage(BillingDriverUsageService_ReportUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportUsage not implemented")
}
func (UnimplementedBillingDriverUsageServiceServer) mustEmbedUnimplementedBillingDriverUsageServiceServer() {
}

// UnsafeBillingDriverUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingDriverUsageServiceServer will
// result in compilation errors.
type UnsafeBillingDriverUsageServiceServer interface {
	mustEmbedUnimplementedBillingDriverUsageServiceServer()
}

func RegisterBillingDriverUsageServiceServer(s grpc.ServiceRegistrar, srv BillingDriverUsageServiceServer) {
	s.RegisterService(&BillingDriverUsageService_ServiceDesc, srv)
}

func _BillingDriverUsageService_ReportUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BillingDriverUsageServiceServer).ReportUsage(&billingDriverUsageServiceReportUsageServer{stream})
}

type BillingDriverUsageService_ReportUsageServer interface {
	Send(*BillingDriverUsageResult) error
	Recv() (*BillingDriverUsage, error)
	grpc.ServerStream
}

type billingDriverUsageServiceReportUsageServer struct {
	grpc.ServerStream
}

func (x *billingDriverUsageServiceReportUsageServer) Send(m *BillingDriverUsageResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *billingDriverUsageServiceReportUsageServer) Recv() (*BillingDriverUsage, error) {
	m := new(BillingDriverUsage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BillingDriverUsageService_ServiceDesc is the grpc.ServiceDesc for BillingDriverUsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingDriverUsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingDriverUsageService",
	HandlerType: (*BillingDriverUsageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportUsage",
			Handler:       _BillingDriverUsageService_ReportUsage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "billing-driver.proto",
}
