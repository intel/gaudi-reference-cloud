// This file contains PRIVATE services that are intended for IDC infrastructure (controllers)
// and trusted parties. It is not a part of the public API.
// After updating this file, run "make generate".
//
// See:
//  - https://developers.google.com/protocol-buffers/docs/proto3
//  - https://github.com/googleapis/googleapis/blob/master/google/api/http.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: storage_admin.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageGetResourceUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemUsages []*StorageFilesystemUsageResponse `protobuf:"bytes,2,rep,name=filesystemUsages,proto3" json:"filesystemUsages,omitempty"`
	BucketUsages     []*StorageBucketUsageResponse     `protobuf:"bytes,3,rep,name=bucketUsages,proto3" json:"bucketUsages,omitempty"`
}

func (x *StorageGetResourceUsageResponse) Reset() {
	*x = StorageGetResourceUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageGetResourceUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageGetResourceUsageResponse) ProtoMessage() {}

func (x *StorageGetResourceUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageGetResourceUsageResponse.ProtoReflect.Descriptor instead.
func (*StorageGetResourceUsageResponse) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{0}
}

func (x *StorageGetResourceUsageResponse) GetFilesystemUsages() []*StorageFilesystemUsageResponse {
	if x != nil {
		return x.FilesystemUsages
	}
	return nil
}

func (x *StorageGetResourceUsageResponse) GetBucketUsages() []*StorageBucketUsageResponse {
	if x != nil {
		return x.BucketUsages
	}
	return nil
}

type StorageFilesystemUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region name
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Cloudaccount Id
	CloudAccountId string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Storage tier
	AccountType string `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType,omitempty"` //enum
	// User email
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// Organization ID
	OrgId string `protobuf:"bytes,5,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Number of filesystems
	NumFilesystems string `protobuf:"bytes,6,opt,name=numFilesystems,proto3" json:"numFilesystems,omitempty"`
	// Total provisioned size in TB
	TotalProvisioned string `protobuf:"bytes,7,opt,name=totalProvisioned,proto3" json:"totalProvisioned,omitempty"`
	// Cluster where filesystem has been scheduled
	ClusterScheduled string `protobuf:"bytes,8,opt,name=clusterScheduled,proto3" json:"clusterScheduled,omitempty"`
	// Whether storage has any IKS volumes
	HasIksVolumes string `protobuf:"bytes,9,opt,name=hasIksVolumes,proto3" json:"hasIksVolumes,omitempty"`
}

func (x *StorageFilesystemUsageResponse) Reset() {
	*x = StorageFilesystemUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageFilesystemUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageFilesystemUsageResponse) ProtoMessage() {}

func (x *StorageFilesystemUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageFilesystemUsageResponse.ProtoReflect.Descriptor instead.
func (*StorageFilesystemUsageResponse) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{1}
}

func (x *StorageFilesystemUsageResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetNumFilesystems() string {
	if x != nil {
		return x.NumFilesystems
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetTotalProvisioned() string {
	if x != nil {
		return x.TotalProvisioned
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetClusterScheduled() string {
	if x != nil {
		return x.ClusterScheduled
	}
	return ""
}

func (x *StorageFilesystemUsageResponse) GetHasIksVolumes() string {
	if x != nil {
		return x.HasIksVolumes
	}
	return ""
}

type StorageBucketUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region name
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Cloudaccount Id
	CloudAccountId string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	// Storage tier
	AccountType string `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType,omitempty"`
	// User email
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// Number of buckets
	Buckets string `protobuf:"bytes,6,opt,name=buckets,proto3" json:"buckets,omitempty"`
	// Used Capacity Bytes
	UsedCapacity string `protobuf:"bytes,7,opt,name=usedCapacity,proto3" json:"usedCapacity,omitempty"`
	// Total provisioned size in TB
	BucketSize string `protobuf:"bytes,8,opt,name=bucketSize,proto3" json:"bucketSize,omitempty"`
	// Cluster where bucket has been scheduled
	ClusterScheduled string `protobuf:"bytes,9,opt,name=clusterScheduled,proto3" json:"clusterScheduled,omitempty"`
}

func (x *StorageBucketUsageResponse) Reset() {
	*x = StorageBucketUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageBucketUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageBucketUsageResponse) ProtoMessage() {}

func (x *StorageBucketUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageBucketUsageResponse.ProtoReflect.Descriptor instead.
func (*StorageBucketUsageResponse) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{2}
}

func (x *StorageBucketUsageResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StorageBucketUsageResponse) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *StorageBucketUsageResponse) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *StorageBucketUsageResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *StorageBucketUsageResponse) GetBuckets() string {
	if x != nil {
		return x.Buckets
	}
	return ""
}

func (x *StorageBucketUsageResponse) GetUsedCapacity() string {
	if x != nil {
		return x.UsedCapacity
	}
	return ""
}

func (x *StorageBucketUsageResponse) GetBucketSize() string {
	if x != nil {
		return x.BucketSize
	}
	return ""
}

func (x *StorageBucketUsageResponse) GetClusterScheduled() string {
	if x != nil {
		return x.ClusterScheduled
	}
	return ""
}

type StorageQuotas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultQuotaSection   []*DefaultQuotaSection   `protobuf:"bytes,1,rep,name=defaultQuotaSection,proto3" json:"defaultQuotaSection,omitempty"`
	StorageQuotaByAccount []*StorageQuotaByAccount `protobuf:"bytes,2,rep,name=storageQuotaByAccount,proto3" json:"storageQuotaByAccount,omitempty"`
}

func (x *StorageQuotas) Reset() {
	*x = StorageQuotas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageQuotas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageQuotas) ProtoMessage() {}

func (x *StorageQuotas) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageQuotas.ProtoReflect.Descriptor instead.
func (*StorageQuotas) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{3}
}

func (x *StorageQuotas) GetDefaultQuotaSection() []*DefaultQuotaSection {
	if x != nil {
		return x.DefaultQuotaSection
	}
	return nil
}

func (x *StorageQuotas) GetStorageQuotaByAccount() []*StorageQuotaByAccount {
	if x != nil {
		return x.StorageQuotaByAccount
	}
	return nil
}

type StorageQuotaByAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountType  string `protobuf:"bytes,1,opt,name=cloudAccountType,proto3" json:"cloudAccountType,omitempty"`
	CloudAccountId    string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Reason            string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	FilesizeQuotaInTB int64  `protobuf:"varint,4,opt,name=filesizeQuotaInTB,proto3" json:"filesizeQuotaInTB,omitempty"`
	FilevolumesQuota  int64  `protobuf:"varint,5,opt,name=filevolumesQuota,proto3" json:"filevolumesQuota,omitempty"`
	BucketsQuota      int64  `protobuf:"varint,6,opt,name=bucketsQuota,proto3" json:"bucketsQuota,omitempty"`
	IsDefault         bool   `protobuf:"varint,7,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
}

func (x *StorageQuotaByAccount) Reset() {
	*x = StorageQuotaByAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageQuotaByAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageQuotaByAccount) ProtoMessage() {}

func (x *StorageQuotaByAccount) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageQuotaByAccount.ProtoReflect.Descriptor instead.
func (*StorageQuotaByAccount) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{4}
}

func (x *StorageQuotaByAccount) GetCloudAccountType() string {
	if x != nil {
		return x.CloudAccountType
	}
	return ""
}

func (x *StorageQuotaByAccount) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *StorageQuotaByAccount) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StorageQuotaByAccount) GetFilesizeQuotaInTB() int64 {
	if x != nil {
		return x.FilesizeQuotaInTB
	}
	return 0
}

func (x *StorageQuotaByAccount) GetFilevolumesQuota() int64 {
	if x != nil {
		return x.FilevolumesQuota
	}
	return 0
}

func (x *StorageQuotaByAccount) GetBucketsQuota() int64 {
	if x != nil {
		return x.BucketsQuota
	}
	return 0
}

func (x *StorageQuotaByAccount) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type DefaultQuotaSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountType  string `protobuf:"bytes,1,opt,name=cloudAccountType,proto3" json:"cloudAccountType,omitempty"`
	FilesizeQuotaInTB int64  `protobuf:"varint,2,opt,name=filesizeQuotaInTB,proto3" json:"filesizeQuotaInTB,omitempty"`
	FilevolumesQuota  int64  `protobuf:"varint,3,opt,name=filevolumesQuota,proto3" json:"filevolumesQuota,omitempty"`
	BucketsQuota      int64  `protobuf:"varint,4,opt,name=bucketsQuota,proto3" json:"bucketsQuota,omitempty"`
}

func (x *DefaultQuotaSection) Reset() {
	*x = DefaultQuotaSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultQuotaSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultQuotaSection) ProtoMessage() {}

func (x *DefaultQuotaSection) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultQuotaSection.ProtoReflect.Descriptor instead.
func (*DefaultQuotaSection) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{5}
}

func (x *DefaultQuotaSection) GetCloudAccountType() string {
	if x != nil {
		return x.CloudAccountType
	}
	return ""
}

func (x *DefaultQuotaSection) GetFilesizeQuotaInTB() int64 {
	if x != nil {
		return x.FilesizeQuotaInTB
	}
	return 0
}

func (x *DefaultQuotaSection) GetFilevolumesQuota() int64 {
	if x != nil {
		return x.FilevolumesQuota
	}
	return 0
}

func (x *DefaultQuotaSection) GetBucketsQuota() int64 {
	if x != nil {
		return x.BucketsQuota
	}
	return 0
}

type InsertStorageQuotaByAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId    string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Reason            string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	FilesizeQuotaInTB int64  `protobuf:"varint,3,opt,name=filesizeQuotaInTB,proto3" json:"filesizeQuotaInTB,omitempty"`
	FilevolumesQuota  int64  `protobuf:"varint,4,opt,name=filevolumesQuota,proto3" json:"filevolumesQuota,omitempty"`
	BucketsQuota      int64  `protobuf:"varint,5,opt,name=bucketsQuota,proto3" json:"bucketsQuota,omitempty"`
}

func (x *InsertStorageQuotaByAccountRequest) Reset() {
	*x = InsertStorageQuotaByAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertStorageQuotaByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertStorageQuotaByAccountRequest) ProtoMessage() {}

func (x *InsertStorageQuotaByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertStorageQuotaByAccountRequest.ProtoReflect.Descriptor instead.
func (*InsertStorageQuotaByAccountRequest) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{6}
}

func (x *InsertStorageQuotaByAccountRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InsertStorageQuotaByAccountRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *InsertStorageQuotaByAccountRequest) GetFilesizeQuotaInTB() int64 {
	if x != nil {
		return x.FilesizeQuotaInTB
	}
	return 0
}

func (x *InsertStorageQuotaByAccountRequest) GetFilevolumesQuota() int64 {
	if x != nil {
		return x.FilevolumesQuota
	}
	return 0
}

func (x *InsertStorageQuotaByAccountRequest) GetBucketsQuota() int64 {
	if x != nil {
		return x.BucketsQuota
	}
	return 0
}

type UpdateStorageQuotaByAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId    string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Reason            string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	FilesizeQuotaInTB int64  `protobuf:"varint,3,opt,name=filesizeQuotaInTB,proto3" json:"filesizeQuotaInTB,omitempty"`
	FilevolumesQuota  int64  `protobuf:"varint,4,opt,name=filevolumesQuota,proto3" json:"filevolumesQuota,omitempty"`
	BucketsQuota      int64  `protobuf:"varint,5,opt,name=bucketsQuota,proto3" json:"bucketsQuota,omitempty"`
}

func (x *UpdateStorageQuotaByAccountRequest) Reset() {
	*x = UpdateStorageQuotaByAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStorageQuotaByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStorageQuotaByAccountRequest) ProtoMessage() {}

func (x *UpdateStorageQuotaByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStorageQuotaByAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateStorageQuotaByAccountRequest) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateStorageQuotaByAccountRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UpdateStorageQuotaByAccountRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateStorageQuotaByAccountRequest) GetFilesizeQuotaInTB() int64 {
	if x != nil {
		return x.FilesizeQuotaInTB
	}
	return 0
}

func (x *UpdateStorageQuotaByAccountRequest) GetFilevolumesQuota() int64 {
	if x != nil {
		return x.FilevolumesQuota
	}
	return 0
}

func (x *UpdateStorageQuotaByAccountRequest) GetBucketsQuota() int64 {
	if x != nil {
		return x.BucketsQuota
	}
	return 0
}

type DeleteStorageQuotaByAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *DeleteStorageQuotaByAccountRequest) Reset() {
	*x = DeleteStorageQuotaByAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStorageQuotaByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStorageQuotaByAccountRequest) ProtoMessage() {}

func (x *DeleteStorageQuotaByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStorageQuotaByAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteStorageQuotaByAccountRequest) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteStorageQuotaByAccountRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type GetStorageQuotaByAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *GetStorageQuotaByAccountRequest) Reset() {
	*x = GetStorageQuotaByAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStorageQuotaByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStorageQuotaByAccountRequest) ProtoMessage() {}

func (x *GetStorageQuotaByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStorageQuotaByAccountRequest.ProtoReflect.Descriptor instead.
func (*GetStorageQuotaByAccountRequest) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{9}
}

func (x *GetStorageQuotaByAccountRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type StorageQuotasByAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultQuota *StorageQuotaByAccount `protobuf:"bytes,1,opt,name=DefaultQuota,proto3" json:"DefaultQuota,omitempty"`
	UpdatedQuota *StorageQuotaByAccount `protobuf:"bytes,2,opt,name=UpdatedQuota,proto3" json:"UpdatedQuota,omitempty"`
}

func (x *StorageQuotasByAccount) Reset() {
	*x = StorageQuotasByAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageQuotasByAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageQuotasByAccount) ProtoMessage() {}

func (x *StorageQuotasByAccount) ProtoReflect() protoreflect.Message {
	mi := &file_storage_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageQuotasByAccount.ProtoReflect.Descriptor instead.
func (*StorageQuotasByAccount) Descriptor() ([]byte, []int) {
	return file_storage_admin_proto_rawDescGZIP(), []int{10}
}

func (x *StorageQuotasByAccount) GetDefaultQuota() *StorageQuotaByAccount {
	if x != nil {
		return x.DefaultQuota
	}
	return nil
}

func (x *StorageQuotasByAccount) GetUpdatedQuota() *StorageQuotaByAccount {
	if x != nil {
		return x.UpdatedQuota
	}
	return nil
}

var File_storage_admin_proto protoreflect.FileDescriptor

var file_storage_admin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x1f,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x1e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61,
	0x73, 0x49, 0x6b, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x49, 0x6b, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x52, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x15,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x42,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x42, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x42,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x42, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0xe2, 0x01, 0x0a, 0x22, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x49, 0x6e, 0x54, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x42, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0xe2,
	0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x54, 0x42, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x42, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x32, 0xd7, 0x06, 0x0a, 0x13,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x3a, 0x01, 0x2a,
	0x12, 0x99, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x7b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x12, 0x9a, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x12, 0x6a, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x73, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b, 0x1a,
	0x12, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_storage_admin_proto_rawDescOnce sync.Once
	file_storage_admin_proto_rawDescData = file_storage_admin_proto_rawDesc
)

func file_storage_admin_proto_rawDescGZIP() []byte {
	file_storage_admin_proto_rawDescOnce.Do(func() {
		file_storage_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_admin_proto_rawDescData)
	})
	return file_storage_admin_proto_rawDescData
}

var file_storage_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_storage_admin_proto_goTypes = []interface{}{
	(*StorageGetResourceUsageResponse)(nil),    // 0: proto.StorageGetResourceUsageResponse
	(*StorageFilesystemUsageResponse)(nil),     // 1: proto.StorageFilesystemUsageResponse
	(*StorageBucketUsageResponse)(nil),         // 2: proto.StorageBucketUsageResponse
	(*StorageQuotas)(nil),                      // 3: proto.StorageQuotas
	(*StorageQuotaByAccount)(nil),              // 4: proto.StorageQuotaByAccount
	(*DefaultQuotaSection)(nil),                // 5: proto.DefaultQuotaSection
	(*InsertStorageQuotaByAccountRequest)(nil), // 6: proto.InsertStorageQuotaByAccountRequest
	(*UpdateStorageQuotaByAccountRequest)(nil), // 7: proto.UpdateStorageQuotaByAccountRequest
	(*DeleteStorageQuotaByAccountRequest)(nil), // 8: proto.DeleteStorageQuotaByAccountRequest
	(*GetStorageQuotaByAccountRequest)(nil),    // 9: proto.GetStorageQuotaByAccountRequest
	(*StorageQuotasByAccount)(nil),             // 10: proto.StorageQuotasByAccount
	(*emptypb.Empty)(nil),                      // 11: google.protobuf.Empty
}
var file_storage_admin_proto_depIdxs = []int32{
	1,  // 0: proto.StorageGetResourceUsageResponse.filesystemUsages:type_name -> proto.StorageFilesystemUsageResponse
	2,  // 1: proto.StorageGetResourceUsageResponse.bucketUsages:type_name -> proto.StorageBucketUsageResponse
	5,  // 2: proto.StorageQuotas.defaultQuotaSection:type_name -> proto.DefaultQuotaSection
	4,  // 3: proto.StorageQuotas.storageQuotaByAccount:type_name -> proto.StorageQuotaByAccount
	4,  // 4: proto.StorageQuotasByAccount.DefaultQuota:type_name -> proto.StorageQuotaByAccount
	4,  // 5: proto.StorageQuotasByAccount.UpdatedQuota:type_name -> proto.StorageQuotaByAccount
	11, // 6: proto.StorageAdminService.GetResourceUsage:input_type -> google.protobuf.Empty
	6,  // 7: proto.StorageAdminService.InsertStorageQuotaByAccount:input_type -> proto.InsertStorageQuotaByAccountRequest
	7,  // 8: proto.StorageAdminService.UpdateStorageQuotaByAccount:input_type -> proto.UpdateStorageQuotaByAccountRequest
	8,  // 9: proto.StorageAdminService.DeleteStorageQuotaByAccount:input_type -> proto.DeleteStorageQuotaByAccountRequest
	9,  // 10: proto.StorageAdminService.GetStorageQuotaByAccount:input_type -> proto.GetStorageQuotaByAccountRequest
	11, // 11: proto.StorageAdminService.GetAllStorageQuota:input_type -> google.protobuf.Empty
	0,  // 12: proto.StorageAdminService.GetResourceUsage:output_type -> proto.StorageGetResourceUsageResponse
	4,  // 13: proto.StorageAdminService.InsertStorageQuotaByAccount:output_type -> proto.StorageQuotaByAccount
	4,  // 14: proto.StorageAdminService.UpdateStorageQuotaByAccount:output_type -> proto.StorageQuotaByAccount
	11, // 15: proto.StorageAdminService.DeleteStorageQuotaByAccount:output_type -> google.protobuf.Empty
	10, // 16: proto.StorageAdminService.GetStorageQuotaByAccount:output_type -> proto.StorageQuotasByAccount
	3,  // 17: proto.StorageAdminService.GetAllStorageQuota:output_type -> proto.StorageQuotas
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_storage_admin_proto_init() }
func file_storage_admin_proto_init() {
	if File_storage_admin_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageGetResourceUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageFilesystemUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageBucketUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageQuotas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageQuotaByAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultQuotaSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertStorageQuotaByAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStorageQuotaByAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStorageQuotaByAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStorageQuotaByAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageQuotasByAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storage_admin_proto_goTypes,
		DependencyIndexes: file_storage_admin_proto_depIdxs,
		MessageInfos:      file_storage_admin_proto_msgTypes,
	}.Build()
	File_storage_admin_proto = out.File
	file_storage_admin_proto_rawDesc = nil
	file_storage_admin_proto_goTypes = nil
	file_storage_admin_proto_depIdxs = nil
}
