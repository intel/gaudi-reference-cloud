// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: cloudmonitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudMonitorServiceClient is the client API for CloudMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudMonitorServiceClient interface {
	QueryResourcesMetrics(ctx context.Context, in *QueryResourcesMetricsRequest, opts ...grpc.CallOption) (*QueryResourcesMetricsResponse, error)
	EnableMonitor(ctx context.Context, in *EnableMonitorRequest, opts ...grpc.CallOption) (*EnableMonitorResponse, error)
	DisableMonitor(ctx context.Context, in *DisableMonitorRequest, opts ...grpc.CallOption) (*DisableMonitorResponse, error)
	GetMetricTypes(ctx context.Context, in *GetMetricTypesRequest, opts ...grpc.CallOption) (*GetMetricTypesResponse, error)
	GetIntervals(ctx context.Context, in *GetIntervalsRequest, opts ...grpc.CallOption) (*GetIntervalsResponse, error)
	GetResourceCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResourceCategoriesResponse, error)
}

type cloudMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudMonitorServiceClient(cc grpc.ClientConnInterface) CloudMonitorServiceClient {
	return &cloudMonitorServiceClient{cc}
}

func (c *cloudMonitorServiceClient) QueryResourcesMetrics(ctx context.Context, in *QueryResourcesMetricsRequest, opts ...grpc.CallOption) (*QueryResourcesMetricsResponse, error) {
	out := new(QueryResourcesMetricsResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorService/QueryResourcesMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorServiceClient) EnableMonitor(ctx context.Context, in *EnableMonitorRequest, opts ...grpc.CallOption) (*EnableMonitorResponse, error) {
	out := new(EnableMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorService/EnableMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorServiceClient) DisableMonitor(ctx context.Context, in *DisableMonitorRequest, opts ...grpc.CallOption) (*DisableMonitorResponse, error) {
	out := new(DisableMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorService/DisableMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorServiceClient) GetMetricTypes(ctx context.Context, in *GetMetricTypesRequest, opts ...grpc.CallOption) (*GetMetricTypesResponse, error) {
	out := new(GetMetricTypesResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorService/GetMetricTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorServiceClient) GetIntervals(ctx context.Context, in *GetIntervalsRequest, opts ...grpc.CallOption) (*GetIntervalsResponse, error) {
	out := new(GetIntervalsResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorService/GetIntervals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMonitorServiceClient) GetResourceCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResourceCategoriesResponse, error) {
	out := new(GetResourceCategoriesResponse)
	err := c.cc.Invoke(ctx, "/proto.CloudMonitorService/GetResourceCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudMonitorServiceServer is the server API for CloudMonitorService service.
// All implementations must embed UnimplementedCloudMonitorServiceServer
// for forward compatibility
type CloudMonitorServiceServer interface {
	QueryResourcesMetrics(context.Context, *QueryResourcesMetricsRequest) (*QueryResourcesMetricsResponse, error)
	EnableMonitor(context.Context, *EnableMonitorRequest) (*EnableMonitorResponse, error)
	DisableMonitor(context.Context, *DisableMonitorRequest) (*DisableMonitorResponse, error)
	GetMetricTypes(context.Context, *GetMetricTypesRequest) (*GetMetricTypesResponse, error)
	GetIntervals(context.Context, *GetIntervalsRequest) (*GetIntervalsResponse, error)
	GetResourceCategories(context.Context, *emptypb.Empty) (*GetResourceCategoriesResponse, error)
	mustEmbedUnimplementedCloudMonitorServiceServer()
}

// UnimplementedCloudMonitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudMonitorServiceServer struct {
}

func (UnimplementedCloudMonitorServiceServer) QueryResourcesMetrics(context.Context, *QueryResourcesMetricsRequest) (*QueryResourcesMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResourcesMetrics not implemented")
}
func (UnimplementedCloudMonitorServiceServer) EnableMonitor(context.Context, *EnableMonitorRequest) (*EnableMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMonitor not implemented")
}
func (UnimplementedCloudMonitorServiceServer) DisableMonitor(context.Context, *DisableMonitorRequest) (*DisableMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMonitor not implemented")
}
func (UnimplementedCloudMonitorServiceServer) GetMetricTypes(context.Context, *GetMetricTypesRequest) (*GetMetricTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricTypes not implemented")
}
func (UnimplementedCloudMonitorServiceServer) GetIntervals(context.Context, *GetIntervalsRequest) (*GetIntervalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntervals not implemented")
}
func (UnimplementedCloudMonitorServiceServer) GetResourceCategories(context.Context, *emptypb.Empty) (*GetResourceCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceCategories not implemented")
}
func (UnimplementedCloudMonitorServiceServer) mustEmbedUnimplementedCloudMonitorServiceServer() {}

// UnsafeCloudMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudMonitorServiceServer will
// result in compilation errors.
type UnsafeCloudMonitorServiceServer interface {
	mustEmbedUnimplementedCloudMonitorServiceServer()
}

func RegisterCloudMonitorServiceServer(s grpc.ServiceRegistrar, srv CloudMonitorServiceServer) {
	s.RegisterService(&CloudMonitorService_ServiceDesc, srv)
}

func _CloudMonitorService_QueryResourcesMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourcesMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorServiceServer).QueryResourcesMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorService/QueryResourcesMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorServiceServer).QueryResourcesMetrics(ctx, req.(*QueryResourcesMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorService_EnableMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorServiceServer).EnableMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorService/EnableMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorServiceServer).EnableMonitor(ctx, req.(*EnableMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorService_DisableMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorServiceServer).DisableMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorService/DisableMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorServiceServer).DisableMonitor(ctx, req.(*DisableMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorService_GetMetricTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorServiceServer).GetMetricTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorService/GetMetricTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorServiceServer).GetMetricTypes(ctx, req.(*GetMetricTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorService_GetIntervals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorServiceServer).GetIntervals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorService/GetIntervals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorServiceServer).GetIntervals(ctx, req.(*GetIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMonitorService_GetResourceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMonitorServiceServer).GetResourceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudMonitorService/GetResourceCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMonitorServiceServer).GetResourceCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudMonitorService_ServiceDesc is the grpc.ServiceDesc for CloudMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudMonitorService",
	HandlerType: (*CloudMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryResourcesMetrics",
			Handler:    _CloudMonitorService_QueryResourcesMetrics_Handler,
		},
		{
			MethodName: "EnableMonitor",
			Handler:    _CloudMonitorService_EnableMonitor_Handler,
		},
		{
			MethodName: "DisableMonitor",
			Handler:    _CloudMonitorService_DisableMonitor_Handler,
		},
		{
			MethodName: "GetMetricTypes",
			Handler:    _CloudMonitorService_GetMetricTypes_Handler,
		},
		{
			MethodName: "GetIntervals",
			Handler:    _CloudMonitorService_GetIntervals_Handler,
		},
		{
			MethodName: "GetResourceCategories",
			Handler:    _CloudMonitorService_GetResourceCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudmonitor.proto",
}
