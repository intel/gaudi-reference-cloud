// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: billing.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingAccountServiceClient is the client API for BillingAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingAccountServiceClient interface {
	Create(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DowngradePremiumtoStandard(ctx context.Context, in *BillingAccountDowngrade, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingAccountServiceClient(cc grpc.ClientConnInterface) BillingAccountServiceClient {
	return &billingAccountServiceClient{cc}
}

func (c *billingAccountServiceClient) Create(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingAccountService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingAccountServiceClient) DowngradePremiumtoStandard(ctx context.Context, in *BillingAccountDowngrade, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingAccountService/DowngradePremiumtoStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingAccountServiceServer is the server API for BillingAccountService service.
// All implementations must embed UnimplementedBillingAccountServiceServer
// for forward compatibility
type BillingAccountServiceServer interface {
	Create(context.Context, *BillingAccount) (*emptypb.Empty, error)
	DowngradePremiumtoStandard(context.Context, *BillingAccountDowngrade) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingAccountServiceServer()
}

// UnimplementedBillingAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingAccountServiceServer struct {
}

func (UnimplementedBillingAccountServiceServer) Create(context.Context, *BillingAccount) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBillingAccountServiceServer) DowngradePremiumtoStandard(context.Context, *BillingAccountDowngrade) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DowngradePremiumtoStandard not implemented")
}
func (UnimplementedBillingAccountServiceServer) mustEmbedUnimplementedBillingAccountServiceServer() {}

// UnsafeBillingAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingAccountServiceServer will
// result in compilation errors.
type UnsafeBillingAccountServiceServer interface {
	mustEmbedUnimplementedBillingAccountServiceServer()
}

func RegisterBillingAccountServiceServer(s grpc.ServiceRegistrar, srv BillingAccountServiceServer) {
	s.RegisterService(&BillingAccountService_ServiceDesc, srv)
}

func _BillingAccountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingAccountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingAccountService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingAccountServiceServer).Create(ctx, req.(*BillingAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingAccountService_DowngradePremiumtoStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccountDowngrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingAccountServiceServer).DowngradePremiumtoStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingAccountService/DowngradePremiumtoStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingAccountServiceServer).DowngradePremiumtoStandard(ctx, req.(*BillingAccountDowngrade))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingAccountService_ServiceDesc is the grpc.ServiceDesc for BillingAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingAccountService",
	HandlerType: (*BillingAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BillingAccountService_Create_Handler,
		},
		{
			MethodName: "DowngradePremiumtoStandard",
			Handler:    _BillingAccountService_DowngradePremiumtoStandard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// BillingOptionServiceClient is the client API for BillingOptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingOptionServiceClient interface {
	Read(ctx context.Context, in *BillingOptionFilter, opts ...grpc.CallOption) (*BillingOption, error)
}

type billingOptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingOptionServiceClient(cc grpc.ClientConnInterface) BillingOptionServiceClient {
	return &billingOptionServiceClient{cc}
}

func (c *billingOptionServiceClient) Read(ctx context.Context, in *BillingOptionFilter, opts ...grpc.CallOption) (*BillingOption, error) {
	out := new(BillingOption)
	err := c.cc.Invoke(ctx, "/proto.BillingOptionService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingOptionServiceServer is the server API for BillingOptionService service.
// All implementations must embed UnimplementedBillingOptionServiceServer
// for forward compatibility
type BillingOptionServiceServer interface {
	Read(context.Context, *BillingOptionFilter) (*BillingOption, error)
	mustEmbedUnimplementedBillingOptionServiceServer()
}

// UnimplementedBillingOptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingOptionServiceServer struct {
}

func (UnimplementedBillingOptionServiceServer) Read(context.Context, *BillingOptionFilter) (*BillingOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBillingOptionServiceServer) mustEmbedUnimplementedBillingOptionServiceServer() {}

// UnsafeBillingOptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingOptionServiceServer will
// result in compilation errors.
type UnsafeBillingOptionServiceServer interface {
	mustEmbedUnimplementedBillingOptionServiceServer()
}

func RegisterBillingOptionServiceServer(s grpc.ServiceRegistrar, srv BillingOptionServiceServer) {
	s.RegisterService(&BillingOptionService_ServiceDesc, srv)
}

func _BillingOptionService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingOptionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingOptionServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingOptionService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingOptionServiceServer).Read(ctx, req.(*BillingOptionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingOptionService_ServiceDesc is the grpc.ServiceDesc for BillingOptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingOptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingOptionService",
	HandlerType: (*BillingOptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _BillingOptionService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// BillingRateServiceClient is the client API for BillingRateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingRateServiceClient interface {
	Read(ctx context.Context, in *BillingRateFilter, opts ...grpc.CallOption) (BillingRateService_ReadClient, error)
}

type billingRateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingRateServiceClient(cc grpc.ClientConnInterface) BillingRateServiceClient {
	return &billingRateServiceClient{cc}
}

func (c *billingRateServiceClient) Read(ctx context.Context, in *BillingRateFilter, opts ...grpc.CallOption) (BillingRateService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingRateService_ServiceDesc.Streams[0], "/proto.BillingRateService/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingRateServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingRateService_ReadClient interface {
	Recv() (*BillingRate, error)
	grpc.ClientStream
}

type billingRateServiceReadClient struct {
	grpc.ClientStream
}

func (x *billingRateServiceReadClient) Recv() (*BillingRate, error) {
	m := new(BillingRate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BillingRateServiceServer is the server API for BillingRateService service.
// All implementations must embed UnimplementedBillingRateServiceServer
// for forward compatibility
type BillingRateServiceServer interface {
	Read(*BillingRateFilter, BillingRateService_ReadServer) error
	mustEmbedUnimplementedBillingRateServiceServer()
}

// UnimplementedBillingRateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingRateServiceServer struct {
}

func (UnimplementedBillingRateServiceServer) Read(*BillingRateFilter, BillingRateService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBillingRateServiceServer) mustEmbedUnimplementedBillingRateServiceServer() {}

// UnsafeBillingRateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingRateServiceServer will
// result in compilation errors.
type UnsafeBillingRateServiceServer interface {
	mustEmbedUnimplementedBillingRateServiceServer()
}

func RegisterBillingRateServiceServer(s grpc.ServiceRegistrar, srv BillingRateServiceServer) {
	s.RegisterService(&BillingRateService_ServiceDesc, srv)
}

func _BillingRateService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BillingRateFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingRateServiceServer).Read(m, &billingRateServiceReadServer{stream})
}

type BillingRateService_ReadServer interface {
	Send(*BillingRate) error
	grpc.ServerStream
}

type billingRateServiceReadServer struct {
	grpc.ServerStream
}

func (x *billingRateServiceReadServer) Send(m *BillingRate) error {
	return x.ServerStream.SendMsg(m)
}

// BillingRateService_ServiceDesc is the grpc.ServiceDesc for BillingRateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingRateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingRateService",
	HandlerType: (*BillingRateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _BillingRateService_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "billing.proto",
}

// BillingCreditServiceClient is the client API for BillingCreditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingCreditServiceClient interface {
	// Deprecated: Do not use.
	Create(ctx context.Context, in *BillingCredit, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	ReadInternal(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (BillingCreditService_ReadInternalClient, error)
	// Deprecated: Do not use.
	Read(ctx context.Context, in *BillingCreditFilter, opts ...grpc.CallOption) (*BillingCreditResponse, error)
	// Deprecated: Do not use.
	ReadUnappliedCreditBalance(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*BillingUnappliedCreditBalance, error)
	// Deprecated: Do not use.
	CreditMigrate(ctx context.Context, in *BillingUnappliedCredit, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	DeleteMigratedCredit(ctx context.Context, in *BillingMigratedCredit, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingCreditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingCreditServiceClient(cc grpc.ClientConnInterface) BillingCreditServiceClient {
	return &billingCreditServiceClient{cc}
}

// Deprecated: Do not use.
func (c *billingCreditServiceClient) Create(ctx context.Context, in *BillingCredit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingCreditService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingCreditServiceClient) ReadInternal(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (BillingCreditService_ReadInternalClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingCreditService_ServiceDesc.Streams[0], "/proto.BillingCreditService/ReadInternal", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingCreditServiceReadInternalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingCreditService_ReadInternalClient interface {
	Recv() (*BillingCredit, error)
	grpc.ClientStream
}

type billingCreditServiceReadInternalClient struct {
	grpc.ClientStream
}

func (x *billingCreditServiceReadInternalClient) Recv() (*BillingCredit, error) {
	m := new(BillingCredit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *billingCreditServiceClient) Read(ctx context.Context, in *BillingCreditFilter, opts ...grpc.CallOption) (*BillingCreditResponse, error) {
	out := new(BillingCreditResponse)
	err := c.cc.Invoke(ctx, "/proto.BillingCreditService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingCreditServiceClient) ReadUnappliedCreditBalance(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*BillingUnappliedCreditBalance, error) {
	out := new(BillingUnappliedCreditBalance)
	err := c.cc.Invoke(ctx, "/proto.BillingCreditService/ReadUnappliedCreditBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingCreditServiceClient) CreditMigrate(ctx context.Context, in *BillingUnappliedCredit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingCreditService/CreditMigrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingCreditServiceClient) DeleteMigratedCredit(ctx context.Context, in *BillingMigratedCredit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingCreditService/DeleteMigratedCredit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingCreditServiceServer is the server API for BillingCreditService service.
// All implementations must embed UnimplementedBillingCreditServiceServer
// for forward compatibility
type BillingCreditServiceServer interface {
	// Deprecated: Do not use.
	Create(context.Context, *BillingCredit) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	ReadInternal(*BillingAccount, BillingCreditService_ReadInternalServer) error
	// Deprecated: Do not use.
	Read(context.Context, *BillingCreditFilter) (*BillingCreditResponse, error)
	// Deprecated: Do not use.
	ReadUnappliedCreditBalance(context.Context, *BillingAccount) (*BillingUnappliedCreditBalance, error)
	// Deprecated: Do not use.
	CreditMigrate(context.Context, *BillingUnappliedCredit) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	DeleteMigratedCredit(context.Context, *BillingMigratedCredit) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingCreditServiceServer()
}

// UnimplementedBillingCreditServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingCreditServiceServer struct {
}

func (UnimplementedBillingCreditServiceServer) Create(context.Context, *BillingCredit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBillingCreditServiceServer) ReadInternal(*BillingAccount, BillingCreditService_ReadInternalServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadInternal not implemented")
}
func (UnimplementedBillingCreditServiceServer) Read(context.Context, *BillingCreditFilter) (*BillingCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBillingCreditServiceServer) ReadUnappliedCreditBalance(context.Context, *BillingAccount) (*BillingUnappliedCreditBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUnappliedCreditBalance not implemented")
}
func (UnimplementedBillingCreditServiceServer) CreditMigrate(context.Context, *BillingUnappliedCredit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditMigrate not implemented")
}
func (UnimplementedBillingCreditServiceServer) DeleteMigratedCredit(context.Context, *BillingMigratedCredit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMigratedCredit not implemented")
}
func (UnimplementedBillingCreditServiceServer) mustEmbedUnimplementedBillingCreditServiceServer() {}

// UnsafeBillingCreditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingCreditServiceServer will
// result in compilation errors.
type UnsafeBillingCreditServiceServer interface {
	mustEmbedUnimplementedBillingCreditServiceServer()
}

func RegisterBillingCreditServiceServer(s grpc.ServiceRegistrar, srv BillingCreditServiceServer) {
	s.RegisterService(&BillingCreditService_ServiceDesc, srv)
}

func _BillingCreditService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingCredit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCreditServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCreditService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCreditServiceServer).Create(ctx, req.(*BillingCredit))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCreditService_ReadInternal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BillingAccount)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingCreditServiceServer).ReadInternal(m, &billingCreditServiceReadInternalServer{stream})
}

type BillingCreditService_ReadInternalServer interface {
	Send(*BillingCredit) error
	grpc.ServerStream
}

type billingCreditServiceReadInternalServer struct {
	grpc.ServerStream
}

func (x *billingCreditServiceReadInternalServer) Send(m *BillingCredit) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingCreditService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingCreditFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCreditServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCreditService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCreditServiceServer).Read(ctx, req.(*BillingCreditFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCreditService_ReadUnappliedCreditBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCreditServiceServer).ReadUnappliedCreditBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCreditService/ReadUnappliedCreditBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCreditServiceServer).ReadUnappliedCreditBalance(ctx, req.(*BillingAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCreditService_CreditMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingUnappliedCredit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCreditServiceServer).CreditMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCreditService/CreditMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCreditServiceServer).CreditMigrate(ctx, req.(*BillingUnappliedCredit))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCreditService_DeleteMigratedCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingMigratedCredit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCreditServiceServer).DeleteMigratedCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCreditService/DeleteMigratedCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCreditServiceServer).DeleteMigratedCredit(ctx, req.(*BillingMigratedCredit))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingCreditService_ServiceDesc is the grpc.ServiceDesc for BillingCreditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingCreditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingCreditService",
	HandlerType: (*BillingCreditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BillingCreditService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _BillingCreditService_Read_Handler,
		},
		{
			MethodName: "ReadUnappliedCreditBalance",
			Handler:    _BillingCreditService_ReadUnappliedCreditBalance_Handler,
		},
		{
			MethodName: "CreditMigrate",
			Handler:    _BillingCreditService_CreditMigrate_Handler,
		},
		{
			MethodName: "DeleteMigratedCredit",
			Handler:    _BillingCreditService_DeleteMigratedCredit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadInternal",
			Handler:       _BillingCreditService_ReadInternal_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "billing.proto",
}

// BillingCouponServiceClient is the client API for BillingCouponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingCouponServiceClient interface {
	// Deprecated: Do not use.
	Create(ctx context.Context, in *BillingCouponCreate, opts ...grpc.CallOption) (*BillingCoupon, error)
	// Deprecated: Do not use.
	Read(ctx context.Context, in *BillingCouponFilter, opts ...grpc.CallOption) (*BillingCouponResponse, error)
	// Deprecated: Do not use.
	Redeem(ctx context.Context, in *BillingCouponRedeem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	Disable(ctx context.Context, in *BillingCouponDisable, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingCouponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingCouponServiceClient(cc grpc.ClientConnInterface) BillingCouponServiceClient {
	return &billingCouponServiceClient{cc}
}

// Deprecated: Do not use.
func (c *billingCouponServiceClient) Create(ctx context.Context, in *BillingCouponCreate, opts ...grpc.CallOption) (*BillingCoupon, error) {
	out := new(BillingCoupon)
	err := c.cc.Invoke(ctx, "/proto.BillingCouponService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingCouponServiceClient) Read(ctx context.Context, in *BillingCouponFilter, opts ...grpc.CallOption) (*BillingCouponResponse, error) {
	out := new(BillingCouponResponse)
	err := c.cc.Invoke(ctx, "/proto.BillingCouponService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingCouponServiceClient) Redeem(ctx context.Context, in *BillingCouponRedeem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingCouponService/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *billingCouponServiceClient) Disable(ctx context.Context, in *BillingCouponDisable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingCouponService/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingCouponServiceServer is the server API for BillingCouponService service.
// All implementations must embed UnimplementedBillingCouponServiceServer
// for forward compatibility
type BillingCouponServiceServer interface {
	// Deprecated: Do not use.
	Create(context.Context, *BillingCouponCreate) (*BillingCoupon, error)
	// Deprecated: Do not use.
	Read(context.Context, *BillingCouponFilter) (*BillingCouponResponse, error)
	// Deprecated: Do not use.
	Redeem(context.Context, *BillingCouponRedeem) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	Disable(context.Context, *BillingCouponDisable) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingCouponServiceServer()
}

// UnimplementedBillingCouponServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingCouponServiceServer struct {
}

func (UnimplementedBillingCouponServiceServer) Create(context.Context, *BillingCouponCreate) (*BillingCoupon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBillingCouponServiceServer) Read(context.Context, *BillingCouponFilter) (*BillingCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBillingCouponServiceServer) Redeem(context.Context, *BillingCouponRedeem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (UnimplementedBillingCouponServiceServer) Disable(context.Context, *BillingCouponDisable) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedBillingCouponServiceServer) mustEmbedUnimplementedBillingCouponServiceServer() {}

// UnsafeBillingCouponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingCouponServiceServer will
// result in compilation errors.
type UnsafeBillingCouponServiceServer interface {
	mustEmbedUnimplementedBillingCouponServiceServer()
}

func RegisterBillingCouponServiceServer(s grpc.ServiceRegistrar, srv BillingCouponServiceServer) {
	s.RegisterService(&BillingCouponService_ServiceDesc, srv)
}

func _BillingCouponService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingCouponCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCouponServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCouponService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCouponServiceServer).Create(ctx, req.(*BillingCouponCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCouponService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingCouponFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCouponServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCouponService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCouponServiceServer).Read(ctx, req.(*BillingCouponFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCouponService_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingCouponRedeem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCouponServiceServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCouponService/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCouponServiceServer).Redeem(ctx, req.(*BillingCouponRedeem))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCouponService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingCouponDisable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCouponServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingCouponService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCouponServiceServer).Disable(ctx, req.(*BillingCouponDisable))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingCouponService_ServiceDesc is the grpc.ServiceDesc for BillingCouponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingCouponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingCouponService",
	HandlerType: (*BillingCouponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BillingCouponService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _BillingCouponService_Read_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _BillingCouponService_Redeem_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _BillingCouponService_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// BillingInvoiceServiceClient is the client API for BillingInvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingInvoiceServiceClient interface {
	Read(ctx context.Context, in *BillingInvoiceFilter, opts ...grpc.CallOption) (*BillingInvoiceResponse, error)
	ReadDetail(ctx context.Context, in *InvoiceId, opts ...grpc.CallOption) (BillingInvoiceService_ReadDetailClient, error)
	ReadUnbilled(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (BillingInvoiceService_ReadUnbilledClient, error)
	ReadStatement(ctx context.Context, in *InvoiceId, opts ...grpc.CallOption) (*Statement, error)
}

type billingInvoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingInvoiceServiceClient(cc grpc.ClientConnInterface) BillingInvoiceServiceClient {
	return &billingInvoiceServiceClient{cc}
}

func (c *billingInvoiceServiceClient) Read(ctx context.Context, in *BillingInvoiceFilter, opts ...grpc.CallOption) (*BillingInvoiceResponse, error) {
	out := new(BillingInvoiceResponse)
	err := c.cc.Invoke(ctx, "/proto.BillingInvoiceService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingInvoiceServiceClient) ReadDetail(ctx context.Context, in *InvoiceId, opts ...grpc.CallOption) (BillingInvoiceService_ReadDetailClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingInvoiceService_ServiceDesc.Streams[0], "/proto.BillingInvoiceService/ReadDetail", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingInvoiceServiceReadDetailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingInvoiceService_ReadDetailClient interface {
	Recv() (*InvoiceDetail, error)
	grpc.ClientStream
}

type billingInvoiceServiceReadDetailClient struct {
	grpc.ClientStream
}

func (x *billingInvoiceServiceReadDetailClient) Recv() (*InvoiceDetail, error) {
	m := new(InvoiceDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingInvoiceServiceClient) ReadUnbilled(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (BillingInvoiceService_ReadUnbilledClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingInvoiceService_ServiceDesc.Streams[1], "/proto.BillingInvoiceService/ReadUnbilled", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingInvoiceServiceReadUnbilledClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingInvoiceService_ReadUnbilledClient interface {
	Recv() (*InvoiceDetail, error)
	grpc.ClientStream
}

type billingInvoiceServiceReadUnbilledClient struct {
	grpc.ClientStream
}

func (x *billingInvoiceServiceReadUnbilledClient) Recv() (*InvoiceDetail, error) {
	m := new(InvoiceDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingInvoiceServiceClient) ReadStatement(ctx context.Context, in *InvoiceId, opts ...grpc.CallOption) (*Statement, error) {
	out := new(Statement)
	err := c.cc.Invoke(ctx, "/proto.BillingInvoiceService/ReadStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingInvoiceServiceServer is the server API for BillingInvoiceService service.
// All implementations must embed UnimplementedBillingInvoiceServiceServer
// for forward compatibility
type BillingInvoiceServiceServer interface {
	Read(context.Context, *BillingInvoiceFilter) (*BillingInvoiceResponse, error)
	ReadDetail(*InvoiceId, BillingInvoiceService_ReadDetailServer) error
	ReadUnbilled(*BillingAccount, BillingInvoiceService_ReadUnbilledServer) error
	ReadStatement(context.Context, *InvoiceId) (*Statement, error)
	mustEmbedUnimplementedBillingInvoiceServiceServer()
}

// UnimplementedBillingInvoiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingInvoiceServiceServer struct {
}

func (UnimplementedBillingInvoiceServiceServer) Read(context.Context, *BillingInvoiceFilter) (*BillingInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBillingInvoiceServiceServer) ReadDetail(*InvoiceId, BillingInvoiceService_ReadDetailServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadDetail not implemented")
}
func (UnimplementedBillingInvoiceServiceServer) ReadUnbilled(*BillingAccount, BillingInvoiceService_ReadUnbilledServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadUnbilled not implemented")
}
func (UnimplementedBillingInvoiceServiceServer) ReadStatement(context.Context, *InvoiceId) (*Statement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStatement not implemented")
}
func (UnimplementedBillingInvoiceServiceServer) mustEmbedUnimplementedBillingInvoiceServiceServer() {}

// UnsafeBillingInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingInvoiceServiceServer will
// result in compilation errors.
type UnsafeBillingInvoiceServiceServer interface {
	mustEmbedUnimplementedBillingInvoiceServiceServer()
}

func RegisterBillingInvoiceServiceServer(s grpc.ServiceRegistrar, srv BillingInvoiceServiceServer) {
	s.RegisterService(&BillingInvoiceService_ServiceDesc, srv)
}

func _BillingInvoiceService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingInvoiceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingInvoiceServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingInvoiceService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingInvoiceServiceServer).Read(ctx, req.(*BillingInvoiceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingInvoiceService_ReadDetail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InvoiceId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingInvoiceServiceServer).ReadDetail(m, &billingInvoiceServiceReadDetailServer{stream})
}

type BillingInvoiceService_ReadDetailServer interface {
	Send(*InvoiceDetail) error
	grpc.ServerStream
}

type billingInvoiceServiceReadDetailServer struct {
	grpc.ServerStream
}

func (x *billingInvoiceServiceReadDetailServer) Send(m *InvoiceDetail) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingInvoiceService_ReadUnbilled_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BillingAccount)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingInvoiceServiceServer).ReadUnbilled(m, &billingInvoiceServiceReadUnbilledServer{stream})
}

type BillingInvoiceService_ReadUnbilledServer interface {
	Send(*InvoiceDetail) error
	grpc.ServerStream
}

type billingInvoiceServiceReadUnbilledServer struct {
	grpc.ServerStream
}

func (x *billingInvoiceServiceReadUnbilledServer) Send(m *InvoiceDetail) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingInvoiceService_ReadStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingInvoiceServiceServer).ReadStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingInvoiceService/ReadStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingInvoiceServiceServer).ReadStatement(ctx, req.(*InvoiceId))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingInvoiceService_ServiceDesc is the grpc.ServiceDesc for BillingInvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingInvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingInvoiceService",
	HandlerType: (*BillingInvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _BillingInvoiceService_Read_Handler,
		},
		{
			MethodName: "ReadStatement",
			Handler:    _BillingInvoiceService_ReadStatement_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadDetail",
			Handler:       _BillingInvoiceService_ReadDetail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadUnbilled",
			Handler:       _BillingInvoiceService_ReadUnbilled_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "billing.proto",
}

// BillingProductCatalogSyncServiceClient is the client API for BillingProductCatalogSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingProductCatalogSyncServiceClient interface {
	Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingProductCatalogSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingProductCatalogSyncServiceClient(cc grpc.ClientConnInterface) BillingProductCatalogSyncServiceClient {
	return &billingProductCatalogSyncServiceClient{cc}
}

func (c *billingProductCatalogSyncServiceClient) Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingProductCatalogSyncService/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingProductCatalogSyncServiceServer is the server API for BillingProductCatalogSyncService service.
// All implementations must embed UnimplementedBillingProductCatalogSyncServiceServer
// for forward compatibility
type BillingProductCatalogSyncServiceServer interface {
	Sync(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingProductCatalogSyncServiceServer()
}

// UnimplementedBillingProductCatalogSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingProductCatalogSyncServiceServer struct {
}

func (UnimplementedBillingProductCatalogSyncServiceServer) Sync(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedBillingProductCatalogSyncServiceServer) mustEmbedUnimplementedBillingProductCatalogSyncServiceServer() {
}

// UnsafeBillingProductCatalogSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingProductCatalogSyncServiceServer will
// result in compilation errors.
type UnsafeBillingProductCatalogSyncServiceServer interface {
	mustEmbedUnimplementedBillingProductCatalogSyncServiceServer()
}

func RegisterBillingProductCatalogSyncServiceServer(s grpc.ServiceRegistrar, srv BillingProductCatalogSyncServiceServer) {
	s.RegisterService(&BillingProductCatalogSyncService_ServiceDesc, srv)
}

func _BillingProductCatalogSyncService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingProductCatalogSyncServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingProductCatalogSyncService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingProductCatalogSyncServiceServer).Sync(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingProductCatalogSyncService_ServiceDesc is the grpc.ServiceDesc for BillingProductCatalogSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingProductCatalogSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingProductCatalogSyncService",
	HandlerType: (*BillingProductCatalogSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _BillingProductCatalogSyncService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// Implements assign_collections_acct_group_m, set_session_m
	AddPaymentPreProcessing(ctx context.Context, in *PrePaymentRequest, opts ...grpc.CallOption) (*PrePaymentResponse, error)
	// Implements update_acct_billing_group_m
	AddPaymentPostProcessing(ctx context.Context, in *PostPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) AddPaymentPreProcessing(ctx context.Context, in *PrePaymentRequest, opts ...grpc.CallOption) (*PrePaymentResponse, error) {
	out := new(PrePaymentResponse)
	err := c.cc.Invoke(ctx, "/proto.PaymentService/AddPaymentPreProcessing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AddPaymentPostProcessing(ctx context.Context, in *PostPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.PaymentService/AddPaymentPostProcessing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	// Implements assign_collections_acct_group_m, set_session_m
	AddPaymentPreProcessing(context.Context, *PrePaymentRequest) (*PrePaymentResponse, error)
	// Implements update_acct_billing_group_m
	AddPaymentPostProcessing(context.Context, *PostPaymentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) AddPaymentPreProcessing(context.Context, *PrePaymentRequest) (*PrePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentPreProcessing not implemented")
}
func (UnimplementedPaymentServiceServer) AddPaymentPostProcessing(context.Context, *PostPaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentPostProcessing not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_AddPaymentPreProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AddPaymentPreProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PaymentService/AddPaymentPreProcessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AddPaymentPreProcessing(ctx, req.(*PrePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AddPaymentPostProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AddPaymentPostProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PaymentService/AddPaymentPostProcessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AddPaymentPostProcessing(ctx, req.(*PostPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPaymentPreProcessing",
			Handler:    _PaymentService_AddPaymentPreProcessing_Handler,
		},
		{
			MethodName: "AddPaymentPostProcessing",
			Handler:    _PaymentService_AddPaymentPostProcessing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// BillingInstancesServiceClient is the client API for BillingInstancesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingInstancesServiceClient interface {
	Read(ctx context.Context, in *BillingPaidInstanceFilter, opts ...grpc.CallOption) (*BillingPaidInstanceResponse, error)
}

type billingInstancesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingInstancesServiceClient(cc grpc.ClientConnInterface) BillingInstancesServiceClient {
	return &billingInstancesServiceClient{cc}
}

func (c *billingInstancesServiceClient) Read(ctx context.Context, in *BillingPaidInstanceFilter, opts ...grpc.CallOption) (*BillingPaidInstanceResponse, error) {
	out := new(BillingPaidInstanceResponse)
	err := c.cc.Invoke(ctx, "/proto.BillingInstancesService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingInstancesServiceServer is the server API for BillingInstancesService service.
// All implementations must embed UnimplementedBillingInstancesServiceServer
// for forward compatibility
type BillingInstancesServiceServer interface {
	Read(context.Context, *BillingPaidInstanceFilter) (*BillingPaidInstanceResponse, error)
	mustEmbedUnimplementedBillingInstancesServiceServer()
}

// UnimplementedBillingInstancesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingInstancesServiceServer struct {
}

func (UnimplementedBillingInstancesServiceServer) Read(context.Context, *BillingPaidInstanceFilter) (*BillingPaidInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBillingInstancesServiceServer) mustEmbedUnimplementedBillingInstancesServiceServer() {
}

// UnsafeBillingInstancesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingInstancesServiceServer will
// result in compilation errors.
type UnsafeBillingInstancesServiceServer interface {
	mustEmbedUnimplementedBillingInstancesServiceServer()
}

func RegisterBillingInstancesServiceServer(s grpc.ServiceRegistrar, srv BillingInstancesServiceServer) {
	s.RegisterService(&BillingInstancesService_ServiceDesc, srv)
}

func _BillingInstancesService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingPaidInstanceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingInstancesServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingInstancesService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingInstancesServiceServer).Read(ctx, req.(*BillingPaidInstanceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingInstancesService_ServiceDesc is the grpc.ServiceDesc for BillingInstancesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingInstancesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingInstancesService",
	HandlerType: (*BillingInstancesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _BillingInstancesService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// BillingUsageServiceClient is the client API for BillingUsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingUsageServiceClient interface {
	Read(ctx context.Context, in *BillingUsageFilter, opts ...grpc.CallOption) (*BillingUsageResponse, error)
}

type billingUsageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingUsageServiceClient(cc grpc.ClientConnInterface) BillingUsageServiceClient {
	return &billingUsageServiceClient{cc}
}

func (c *billingUsageServiceClient) Read(ctx context.Context, in *BillingUsageFilter, opts ...grpc.CallOption) (*BillingUsageResponse, error) {
	out := new(BillingUsageResponse)
	err := c.cc.Invoke(ctx, "/proto.BillingUsageService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingUsageServiceServer is the server API for BillingUsageService service.
// All implementations must embed UnimplementedBillingUsageServiceServer
// for forward compatibility
type BillingUsageServiceServer interface {
	Read(context.Context, *BillingUsageFilter) (*BillingUsageResponse, error)
	mustEmbedUnimplementedBillingUsageServiceServer()
}

// UnimplementedBillingUsageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingUsageServiceServer struct {
}

func (UnimplementedBillingUsageServiceServer) Read(context.Context, *BillingUsageFilter) (*BillingUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBillingUsageServiceServer) mustEmbedUnimplementedBillingUsageServiceServer() {}

// UnsafeBillingUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingUsageServiceServer will
// result in compilation errors.
type UnsafeBillingUsageServiceServer interface {
	mustEmbedUnimplementedBillingUsageServiceServer()
}

func RegisterBillingUsageServiceServer(s grpc.ServiceRegistrar, srv BillingUsageServiceServer) {
	s.RegisterService(&BillingUsageService_ServiceDesc, srv)
}

func _BillingUsageService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingUsageFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingUsageServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingUsageService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingUsageServiceServer).Read(ctx, req.(*BillingUsageFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingUsageService_ServiceDesc is the grpc.ServiceDesc for BillingUsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingUsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingUsageService",
	HandlerType: (*BillingUsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _BillingUsageService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// BillingOpsActionServiceClient is the client API for BillingOpsActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingOpsActionServiceClient interface {
	Create(ctx context.Context, in *SchedulerAction, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingOpsActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingOpsActionServiceClient(cc grpc.ClientConnInterface) BillingOpsActionServiceClient {
	return &billingOpsActionServiceClient{cc}
}

func (c *billingOpsActionServiceClient) Create(ctx context.Context, in *SchedulerAction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingOpsActionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingOpsActionServiceServer is the server API for BillingOpsActionService service.
// All implementations must embed UnimplementedBillingOpsActionServiceServer
// for forward compatibility
type BillingOpsActionServiceServer interface {
	Create(context.Context, *SchedulerAction) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingOpsActionServiceServer()
}

// UnimplementedBillingOpsActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingOpsActionServiceServer struct {
}

func (UnimplementedBillingOpsActionServiceServer) Create(context.Context, *SchedulerAction) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBillingOpsActionServiceServer) mustEmbedUnimplementedBillingOpsActionServiceServer() {
}

// UnsafeBillingOpsActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingOpsActionServiceServer will
// result in compilation errors.
type UnsafeBillingOpsActionServiceServer interface {
	mustEmbedUnimplementedBillingOpsActionServiceServer()
}

func RegisterBillingOpsActionServiceServer(s grpc.ServiceRegistrar, srv BillingOpsActionServiceServer) {
	s.RegisterService(&BillingOpsActionService_ServiceDesc, srv)
}

func _BillingOpsActionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingOpsActionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingOpsActionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingOpsActionServiceServer).Create(ctx, req.(*SchedulerAction))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingOpsActionService_ServiceDesc is the grpc.ServiceDesc for BillingOpsActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingOpsActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingOpsActionService",
	HandlerType: (*BillingOpsActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BillingOpsActionService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

// BillingDeactivateInstancesServiceClient is the client API for BillingDeactivateInstancesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingDeactivateInstancesServiceClient interface {
	GetDeactivateInstances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeactivateInstancesResponse, error)
	GetDeactivateInstancesStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BillingDeactivateInstancesService_GetDeactivateInstancesStreamClient, error)
	GetDeactivatedServiceAccounts(ctx context.Context, in *GetDeactivatedAccountsRequest, opts ...grpc.CallOption) (BillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient, error)
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingDeactivateInstancesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingDeactivateInstancesServiceClient(cc grpc.ClientConnInterface) BillingDeactivateInstancesServiceClient {
	return &billingDeactivateInstancesServiceClient{cc}
}

func (c *billingDeactivateInstancesServiceClient) GetDeactivateInstances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeactivateInstancesResponse, error) {
	out := new(DeactivateInstancesResponse)
	err := c.cc.Invoke(ctx, "/proto.BillingDeactivateInstancesService/GetDeactivateInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDeactivateInstancesServiceClient) GetDeactivateInstancesStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BillingDeactivateInstancesService_GetDeactivateInstancesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingDeactivateInstancesService_ServiceDesc.Streams[0], "/proto.BillingDeactivateInstancesService/GetDeactivateInstancesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingDeactivateInstancesServiceGetDeactivateInstancesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingDeactivateInstancesService_GetDeactivateInstancesStreamClient interface {
	Recv() (*DeactivateInstancesResponse, error)
	grpc.ClientStream
}

type billingDeactivateInstancesServiceGetDeactivateInstancesStreamClient struct {
	grpc.ClientStream
}

func (x *billingDeactivateInstancesServiceGetDeactivateInstancesStreamClient) Recv() (*DeactivateInstancesResponse, error) {
	m := new(DeactivateInstancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingDeactivateInstancesServiceClient) GetDeactivatedServiceAccounts(ctx context.Context, in *GetDeactivatedAccountsRequest, opts ...grpc.CallOption) (BillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingDeactivateInstancesService_ServiceDesc.Streams[1], "/proto.BillingDeactivateInstancesService/GetDeactivatedServiceAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingDeactivateInstancesServiceGetDeactivatedServiceAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingDeactivateInstancesService_GetDeactivatedServiceAccountsClient interface {
	Recv() (*DeactivateAccounts, error)
	grpc.ClientStream
}

type billingDeactivateInstancesServiceGetDeactivatedServiceAccountsClient struct {
	grpc.ClientStream
}

func (x *billingDeactivateInstancesServiceGetDeactivatedServiceAccountsClient) Recv() (*DeactivateAccounts, error) {
	m := new(DeactivateAccounts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingDeactivateInstancesServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.BillingDeactivateInstancesService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingDeactivateInstancesServiceServer is the server API for BillingDeactivateInstancesService service.
// All implementations must embed UnimplementedBillingDeactivateInstancesServiceServer
// for forward compatibility
type BillingDeactivateInstancesServiceServer interface {
	GetDeactivateInstances(context.Context, *emptypb.Empty) (*DeactivateInstancesResponse, error)
	GetDeactivateInstancesStream(*emptypb.Empty, BillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) error
	GetDeactivatedServiceAccounts(*GetDeactivatedAccountsRequest, BillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) error
	// Ping always returns a successful response by the service implementation.
	// It can be used for testing connectivity to the service.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingDeactivateInstancesServiceServer()
}

// UnimplementedBillingDeactivateInstancesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingDeactivateInstancesServiceServer struct {
}

func (UnimplementedBillingDeactivateInstancesServiceServer) GetDeactivateInstances(context.Context, *emptypb.Empty) (*DeactivateInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeactivateInstances not implemented")
}
func (UnimplementedBillingDeactivateInstancesServiceServer) GetDeactivateInstancesStream(*emptypb.Empty, BillingDeactivateInstancesService_GetDeactivateInstancesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeactivateInstancesStream not implemented")
}
func (UnimplementedBillingDeactivateInstancesServiceServer) GetDeactivatedServiceAccounts(*GetDeactivatedAccountsRequest, BillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeactivatedServiceAccounts not implemented")
}
func (UnimplementedBillingDeactivateInstancesServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBillingDeactivateInstancesServiceServer) mustEmbedUnimplementedBillingDeactivateInstancesServiceServer() {
}

// UnsafeBillingDeactivateInstancesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingDeactivateInstancesServiceServer will
// result in compilation errors.
type UnsafeBillingDeactivateInstancesServiceServer interface {
	mustEmbedUnimplementedBillingDeactivateInstancesServiceServer()
}

func RegisterBillingDeactivateInstancesServiceServer(s grpc.ServiceRegistrar, srv BillingDeactivateInstancesServiceServer) {
	s.RegisterService(&BillingDeactivateInstancesService_ServiceDesc, srv)
}

func _BillingDeactivateInstancesService_GetDeactivateInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDeactivateInstancesServiceServer).GetDeactivateInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingDeactivateInstancesService/GetDeactivateInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDeactivateInstancesServiceServer).GetDeactivateInstances(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDeactivateInstancesService_GetDeactivateInstancesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingDeactivateInstancesServiceServer).GetDeactivateInstancesStream(m, &billingDeactivateInstancesServiceGetDeactivateInstancesStreamServer{stream})
}

type BillingDeactivateInstancesService_GetDeactivateInstancesStreamServer interface {
	Send(*DeactivateInstancesResponse) error
	grpc.ServerStream
}

type billingDeactivateInstancesServiceGetDeactivateInstancesStreamServer struct {
	grpc.ServerStream
}

func (x *billingDeactivateInstancesServiceGetDeactivateInstancesStreamServer) Send(m *DeactivateInstancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingDeactivateInstancesService_GetDeactivatedServiceAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeactivatedAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingDeactivateInstancesServiceServer).GetDeactivatedServiceAccounts(m, &billingDeactivateInstancesServiceGetDeactivatedServiceAccountsServer{stream})
}

type BillingDeactivateInstancesService_GetDeactivatedServiceAccountsServer interface {
	Send(*DeactivateAccounts) error
	grpc.ServerStream
}

type billingDeactivateInstancesServiceGetDeactivatedServiceAccountsServer struct {
	grpc.ServerStream
}

func (x *billingDeactivateInstancesServiceGetDeactivatedServiceAccountsServer) Send(m *DeactivateAccounts) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingDeactivateInstancesService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDeactivateInstancesServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BillingDeactivateInstancesService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDeactivateInstancesServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingDeactivateInstancesService_ServiceDesc is the grpc.ServiceDesc for BillingDeactivateInstancesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingDeactivateInstancesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BillingDeactivateInstancesService",
	HandlerType: (*BillingDeactivateInstancesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeactivateInstances",
			Handler:    _BillingDeactivateInstancesService_GetDeactivateInstances_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BillingDeactivateInstancesService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeactivateInstancesStream",
			Handler:       _BillingDeactivateInstancesService_GetDeactivateInstancesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeactivatedServiceAccounts",
			Handler:       _BillingDeactivateInstancesService_GetDeactivatedServiceAccounts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "billing.proto",
}
