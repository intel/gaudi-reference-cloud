// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dpai_deployment.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DpaiMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiMetaMultiError, or nil
// if none found.
func (m *DpaiMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiMetaValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiMetaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiMetaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiMetaValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return DpaiMetaMultiError(errors)
	}

	return nil
}

// DpaiMetaMultiError is an error wrapping multiple validation errors returned
// by DpaiMeta.ValidateAll() if the designated constraints aren't met.
type DpaiMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiMetaMultiError) AllErrors() []error { return m }

// DpaiMetaValidationError is the validation error returned by
// DpaiMeta.Validate if the designated constraints aren't met.
type DpaiMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiMetaValidationError) ErrorName() string { return "DpaiMetaValidationError" }

// Error satisfies the builtin error interface
func (e DpaiMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiMetaValidationError{}

// Validate checks the field values on DpaiDeploymentMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentMetaMultiError, or nil if none found.
func (m *DpaiDeploymentMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentMetaValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentMetaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentMetaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentMetaValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiDeploymentMetaMultiError(errors)
	}

	return nil
}

// DpaiDeploymentMetaMultiError is an error wrapping multiple validation errors
// returned by DpaiDeploymentMeta.ValidateAll() if the designated constraints
// aren't met.
type DpaiDeploymentMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentMetaMultiError) AllErrors() []error { return m }

// DpaiDeploymentMetaValidationError is the validation error returned by
// DpaiDeploymentMeta.Validate if the designated constraints aren't met.
type DpaiDeploymentMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentMetaValidationError) ErrorName() string {
	return "DpaiDeploymentMetaValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentMetaValidationError{}

// Validate checks the field values on DpaiDeploymentTaskMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskMetaMultiError, or nil if none found.
func (m *DpaiDeploymentTaskMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentTaskMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentTaskMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentTaskMetaValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentTaskMetaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentTaskMetaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentTaskMetaValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiDeploymentTaskMetaMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskMetaMultiError is an error wrapping multiple validation
// errors returned by DpaiDeploymentTaskMeta.ValidateAll() if the designated
// constraints aren't met.
type DpaiDeploymentTaskMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskMetaMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskMetaValidationError is the validation error returned by
// DpaiDeploymentTaskMeta.Validate if the designated constraints aren't met.
type DpaiDeploymentTaskMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskMetaValidationError) ErrorName() string {
	return "DpaiDeploymentTaskMetaValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskMetaValidationError{}

// Validate checks the field values on DpaiSecretReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiSecretReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiSecretReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiSecretReferenceMultiError, or nil if none found.
func (m *DpaiSecretReference) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiSecretReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SecretName

	// no validation rules for SecretKeyName

	if len(errors) > 0 {
		return DpaiSecretReferenceMultiError(errors)
	}

	return nil
}

// DpaiSecretReferenceMultiError is an error wrapping multiple validation
// errors returned by DpaiSecretReference.ValidateAll() if the designated
// constraints aren't met.
type DpaiSecretReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiSecretReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiSecretReferenceMultiError) AllErrors() []error { return m }

// DpaiSecretReferenceValidationError is the validation error returned by
// DpaiSecretReference.Validate if the designated constraints aren't met.
type DpaiSecretReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiSecretReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiSecretReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiSecretReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiSecretReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiSecretReferenceValidationError) ErrorName() string {
	return "DpaiSecretReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiSecretReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiSecretReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiSecretReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiSecretReferenceValidationError{}

// Validate checks the field values on DpaiImageReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiImageReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiImageReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiImageReferenceMultiError, or nil if none found.
func (m *DpaiImageReference) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiImageReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repository

	// no validation rules for Tag

	if len(errors) > 0 {
		return DpaiImageReferenceMultiError(errors)
	}

	return nil
}

// DpaiImageReferenceMultiError is an error wrapping multiple validation errors
// returned by DpaiImageReference.ValidateAll() if the designated constraints
// aren't met.
type DpaiImageReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiImageReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiImageReferenceMultiError) AllErrors() []error { return m }

// DpaiImageReferenceValidationError is the validation error returned by
// DpaiImageReference.Validate if the designated constraints aren't met.
type DpaiImageReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiImageReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiImageReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiImageReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiImageReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiImageReferenceValidationError) ErrorName() string {
	return "DpaiImageReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiImageReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiImageReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiImageReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiImageReferenceValidationError{}

// Validate checks the field values on DpaiChartReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiChartReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiChartReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiChartReferenceMultiError, or nil if none found.
func (m *DpaiChartReference) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiChartReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoUrl

	// no validation rules for ChartName

	// no validation rules for Version

	// no validation rules for RepoName

	// no validation rules for Username

	// no validation rules for SecretKey

	if len(errors) > 0 {
		return DpaiChartReferenceMultiError(errors)
	}

	return nil
}

// DpaiChartReferenceMultiError is an error wrapping multiple validation errors
// returned by DpaiChartReference.ValidateAll() if the designated constraints
// aren't met.
type DpaiChartReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiChartReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiChartReferenceMultiError) AllErrors() []error { return m }

// DpaiChartReferenceValidationError is the validation error returned by
// DpaiChartReference.Validate if the designated constraints aren't met.
type DpaiChartReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiChartReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiChartReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiChartReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiChartReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiChartReferenceValidationError) ErrorName() string {
	return "DpaiChartReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiChartReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiChartReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiChartReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiChartReferenceValidationError{}

// Validate checks the field values on DpaiDeploymentStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentStatusMultiError, or nil if none found.
func (m *DpaiDeploymentStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for DisplayName

	// no validation rules for Message

	if len(errors) > 0 {
		return DpaiDeploymentStatusMultiError(errors)
	}

	return nil
}

// DpaiDeploymentStatusMultiError is an error wrapping multiple validation
// errors returned by DpaiDeploymentStatus.ValidateAll() if the designated
// constraints aren't met.
type DpaiDeploymentStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentStatusMultiError) AllErrors() []error { return m }

// DpaiDeploymentStatusValidationError is the validation error returned by
// DpaiDeploymentStatus.Validate if the designated constraints aren't met.
type DpaiDeploymentStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentStatusValidationError) ErrorName() string {
	return "DpaiDeploymentStatusValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentStatusValidationError{}

// Validate checks the field values on DpaiDeployment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiDeployment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeployment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiDeploymentMultiError,
// or nil if none found.
func (m *DpaiDeployment) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeployment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WorkspaceId

	// no validation rules for ServiceId

	// no validation rules for ServiceType

	// no validation rules for ChangeIndicator

	// no validation rules for Input

	// no validation rules for Output

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentMultiError(errors)
	}

	return nil
}

// DpaiDeploymentMultiError is an error wrapping multiple validation errors
// returned by DpaiDeployment.ValidateAll() if the designated constraints
// aren't met.
type DpaiDeploymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentMultiError) AllErrors() []error { return m }

// DpaiDeploymentValidationError is the validation error returned by
// DpaiDeployment.Validate if the designated constraints aren't met.
type DpaiDeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentValidationError) ErrorName() string { return "DpaiDeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DpaiDeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentValidationError{}

// Validate checks the field values on DpaiDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentResponseMultiError, or nil if none found.
func (m *DpaiDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiDeploymentResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentResponseValidationError is the validation error returned by
// DpaiDeploymentResponse.Validate if the designated constraints aren't met.
type DpaiDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentResponseValidationError) ErrorName() string {
	return "DpaiDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentResponseValidationError{}

// Validate checks the field values on DpaiDeploymentCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentCreateRequestMultiError, or nil if none found.
func (m *DpaiDeploymentCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for WorkspaceId

	// no validation rules for ServiceId

	// no validation rules for ServiceType

	// no validation rules for ChangeIndicator

	// no validation rules for CreatedBy

	// no validation rules for Input

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return DpaiDeploymentCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiDeploymentCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentCreateRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentCreateRequestValidationError is the validation error returned
// by DpaiDeploymentCreateRequest.Validate if the designated constraints
// aren't met.
type DpaiDeploymentCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentCreateRequestValidationError) ErrorName() string {
	return "DpaiDeploymentCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentCreateRequestValidationError{}

// Validate checks the field values on DpaiDeploymentCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentCreateResponseMultiError, or nil if none found.
func (m *DpaiDeploymentCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return DpaiDeploymentCreateResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentCreateResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiDeploymentCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentCreateResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentCreateResponseValidationError is the validation error returned
// by DpaiDeploymentCreateResponse.Validate if the designated constraints
// aren't met.
type DpaiDeploymentCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentCreateResponseValidationError) ErrorName() string {
	return "DpaiDeploymentCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentCreateResponseValidationError{}

// Validate checks the field values on DpaiDeploymentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentListRequestMultiError, or nil if none found.
func (m *DpaiDeploymentListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for WorkspaceId

	// no validation rules for ServiceId

	// no validation rules for ServiceType

	// no validation rules for ChangeIndicator

	// no validation rules for ParentDeploymentId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return DpaiDeploymentListRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentListRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiDeploymentListRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiDeploymentListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentListRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentListRequestValidationError is the validation error returned by
// DpaiDeploymentListRequest.Validate if the designated constraints aren't met.
type DpaiDeploymentListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentListRequestValidationError) ErrorName() string {
	return "DpaiDeploymentListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentListRequestValidationError{}

// Validate checks the field values on DpaiDeploymentListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentListResponseMultiError, or nil if none found.
func (m *DpaiDeploymentListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiDeploymentListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiDeploymentListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiDeploymentListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrevOffset

	// no validation rules for CurrOffset

	// no validation rules for NextOffset

	// no validation rules for LastOffset

	// no validation rules for Limit

	// no validation rules for TotalRecords

	if len(errors) > 0 {
		return DpaiDeploymentListResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentListResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiDeploymentListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentListResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentListResponseValidationError is the validation error returned
// by DpaiDeploymentListResponse.Validate if the designated constraints aren't met.
type DpaiDeploymentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentListResponseValidationError) ErrorName() string {
	return "DpaiDeploymentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentListResponseValidationError{}

// Validate checks the field values on DpaiDeploymentGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentGetRequestMultiError, or nil if none found.
func (m *DpaiDeploymentGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentGetRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentGetRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiDeploymentGetRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiDeploymentGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentGetRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentGetRequestValidationError is the validation error returned by
// DpaiDeploymentGetRequest.Validate if the designated constraints aren't met.
type DpaiDeploymentGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentGetRequestValidationError) ErrorName() string {
	return "DpaiDeploymentGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentGetRequestValidationError{}

// Validate checks the field values on DpaiDeploymentUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentUpdateRequestMultiError, or nil if none found.
func (m *DpaiDeploymentUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentUpdateRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentUpdateRequestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentUpdateRequestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentUpdateRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiDeploymentUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentUpdateRequestValidationError is the validation error returned
// by DpaiDeploymentUpdateRequest.Validate if the designated constraints
// aren't met.
type DpaiDeploymentUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentUpdateRequestValidationError) ErrorName() string {
	return "DpaiDeploymentUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentUpdateRequestValidationError{}

// Validate checks the field values on DpaiDeploymentDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentDeleteRequestMultiError, or nil if none found.
func (m *DpaiDeploymentDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiDeploymentDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentDeleteRequestValidationError is the validation error returned
// by DpaiDeploymentDeleteRequest.Validate if the designated constraints
// aren't met.
type DpaiDeploymentDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentDeleteRequestValidationError) ErrorName() string {
	return "DpaiDeploymentDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentDeleteRequestValidationError{}

// Validate checks the field values on DpaiDeploymentDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentDeleteResponseMultiError, or nil if none found.
func (m *DpaiDeploymentDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiDeploymentDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiDeploymentDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentDeleteResponseValidationError is the validation error returned
// by DpaiDeploymentDeleteResponse.Validate if the designated constraints
// aren't met.
type DpaiDeploymentDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentDeleteResponseValidationError) ErrorName() string {
	return "DpaiDeploymentDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentDeleteResponseValidationError{}

// Validate checks the field values on DpaiDeploymentTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskMultiError, or nil if none found.
func (m *DpaiDeploymentTask) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeploymentId

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentTaskValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentTaskValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentTaskValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	// no validation rules for Input

	// no validation rules for Output

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentTaskValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentTaskValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentTaskValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiDeploymentTaskMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskMultiError is an error wrapping multiple validation errors
// returned by DpaiDeploymentTask.ValidateAll() if the designated constraints
// aren't met.
type DpaiDeploymentTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskValidationError is the validation error returned by
// DpaiDeploymentTask.Validate if the designated constraints aren't met.
type DpaiDeploymentTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskValidationError) ErrorName() string {
	return "DpaiDeploymentTaskValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskValidationError{}

// Validate checks the field values on DpaiDeploymentTaskCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskCreateRequestMultiError, or nil if none found.
func (m *DpaiDeploymentTaskCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentTaskCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentTaskCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiDeploymentTaskCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskCreateRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskCreateRequestValidationError is the validation error
// returned by DpaiDeploymentTaskCreateRequest.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskCreateRequestValidationError) ErrorName() string {
	return "DpaiDeploymentTaskCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskCreateRequestValidationError{}

// Validate checks the field values on DpaiDeploymentTaskCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiDeploymentTaskCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskCreateResponseMultiError, or nil if none found.
func (m *DpaiDeploymentTaskCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DpaiDeploymentTaskId

	if len(errors) > 0 {
		return DpaiDeploymentTaskCreateResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// DpaiDeploymentTaskCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiDeploymentTaskCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskCreateResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskCreateResponseValidationError is the validation error
// returned by DpaiDeploymentTaskCreateResponse.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskCreateResponseValidationError) ErrorName() string {
	return "DpaiDeploymentTaskCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskCreateResponseValidationError{}

// Validate checks the field values on DpaiDeploymentTaskListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskListRequestMultiError, or nil if none found.
func (m *DpaiDeploymentTaskListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentTaskListRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskListRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentTaskListRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiDeploymentTaskListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskListRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskListRequestValidationError is the validation error
// returned by DpaiDeploymentTaskListRequest.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskListRequestValidationError) ErrorName() string {
	return "DpaiDeploymentTaskListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskListRequestValidationError{}

// Validate checks the field values on DpaiDeploymentTaskListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskListResponseMultiError, or nil if none found.
func (m *DpaiDeploymentTaskListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiDeploymentTaskListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiDeploymentTaskListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiDeploymentTaskListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiDeploymentTaskListResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentTaskListResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiDeploymentTaskListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskListResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskListResponseValidationError is the validation error
// returned by DpaiDeploymentTaskListResponse.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskListResponseValidationError) ErrorName() string {
	return "DpaiDeploymentTaskListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskListResponseValidationError{}

// Validate checks the field values on DpaiDeploymentTaskGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskGetRequestMultiError, or nil if none found.
func (m *DpaiDeploymentTaskGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeploymentId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentTaskGetRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskGetRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentTaskGetRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiDeploymentTaskGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskGetRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskGetRequestValidationError is the validation error returned
// by DpaiDeploymentTaskGetRequest.Validate if the designated constraints
// aren't met.
type DpaiDeploymentTaskGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskGetRequestValidationError) ErrorName() string {
	return "DpaiDeploymentTaskGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskGetRequestValidationError{}

// Validate checks the field values on DpaiDeploymentTaskGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskGetResponseMultiError, or nil if none found.
func (m *DpaiDeploymentTaskGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDpaiDeploymentTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentTaskGetResponseValidationError{
					field:  "DpaiDeploymentTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentTaskGetResponseValidationError{
					field:  "DpaiDeploymentTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDpaiDeploymentTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentTaskGetResponseValidationError{
				field:  "DpaiDeploymentTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiDeploymentTaskGetResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskGetResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentTaskGetResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiDeploymentTaskGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskGetResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskGetResponseValidationError is the validation error
// returned by DpaiDeploymentTaskGetResponse.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskGetResponseValidationError) ErrorName() string {
	return "DpaiDeploymentTaskGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskGetResponseValidationError{}

// Validate checks the field values on DpaiDeploymentTaskUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskUpdateRequestMultiError, or nil if none found.
func (m *DpaiDeploymentTaskUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentTaskUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentTaskUpdateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentTaskUpdateRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	// no validation rules for DeploymentId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentTaskUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentTaskUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiDeploymentTaskUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskUpdateRequestValidationError is the validation error
// returned by DpaiDeploymentTaskUpdateRequest.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskUpdateRequestValidationError) ErrorName() string {
	return "DpaiDeploymentTaskUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskUpdateRequestValidationError{}

// Validate checks the field values on DpaiDeploymentTaskUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiDeploymentTaskUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskUpdateResponseMultiError, or nil if none found.
func (m *DpaiDeploymentTaskUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDpaiDeploymentTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiDeploymentTaskUpdateResponseValidationError{
					field:  "DpaiDeploymentTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiDeploymentTaskUpdateResponseValidationError{
					field:  "DpaiDeploymentTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDpaiDeploymentTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiDeploymentTaskUpdateResponseValidationError{
				field:  "DpaiDeploymentTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiDeploymentTaskUpdateResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by
// DpaiDeploymentTaskUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiDeploymentTaskUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskUpdateResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskUpdateResponseValidationError is the validation error
// returned by DpaiDeploymentTaskUpdateResponse.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskUpdateResponseValidationError) ErrorName() string {
	return "DpaiDeploymentTaskUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskUpdateResponseValidationError{}

// Validate checks the field values on DpaiDeploymentTaskDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiDeploymentTaskDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskDeleteRequestMultiError, or nil if none found.
func (m *DpaiDeploymentTaskDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeploymentId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiDeploymentTaskDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiDeploymentTaskDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiDeploymentTaskDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskDeleteRequestValidationError is the validation error
// returned by DpaiDeploymentTaskDeleteRequest.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskDeleteRequestValidationError) ErrorName() string {
	return "DpaiDeploymentTaskDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskDeleteRequestValidationError{}

// Validate checks the field values on DpaiDeploymentTaskDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiDeploymentTaskDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiDeploymentTaskDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiDeploymentTaskDeleteResponseMultiError, or nil if none found.
func (m *DpaiDeploymentTaskDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiDeploymentTaskDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiDeploymentTaskDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiDeploymentTaskDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// DpaiDeploymentTaskDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiDeploymentTaskDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiDeploymentTaskDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiDeploymentTaskDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiDeploymentTaskDeleteResponseValidationError is the validation error
// returned by DpaiDeploymentTaskDeleteResponse.Validate if the designated
// constraints aren't met.
type DpaiDeploymentTaskDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiDeploymentTaskDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiDeploymentTaskDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiDeploymentTaskDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiDeploymentTaskDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiDeploymentTaskDeleteResponseValidationError) ErrorName() string {
	return "DpaiDeploymentTaskDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiDeploymentTaskDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiDeploymentTaskDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiDeploymentTaskDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiDeploymentTaskDeleteResponseValidationError{}
