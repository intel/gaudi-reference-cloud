// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: annotations.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdcFieldOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdcFieldOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcFieldOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcFieldOptionsMultiError, or nil if none found.
func (m *IdcFieldOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcFieldOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccount

	// no validation rules for Product

	// no validation rules for GtsCheck

	// no validation rules for UserName

	// no validation rules for AuthzCheck

	// no validation rules for ProductAccess

	// no validation rules for OwnerCheck

	// no validation rules for CognitoClientId

	if len(errors) > 0 {
		return IdcFieldOptionsMultiError(errors)
	}

	return nil
}

// IdcFieldOptionsMultiError is an error wrapping multiple validation errors
// returned by IdcFieldOptions.ValidateAll() if the designated constraints
// aren't met.
type IdcFieldOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcFieldOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcFieldOptionsMultiError) AllErrors() []error { return m }

// IdcFieldOptionsValidationError is the validation error returned by
// IdcFieldOptions.Validate if the designated constraints aren't met.
type IdcFieldOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcFieldOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcFieldOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcFieldOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcFieldOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcFieldOptionsValidationError) ErrorName() string { return "IdcFieldOptionsValidationError" }

// Error satisfies the builtin error interface
func (e IdcFieldOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcFieldOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcFieldOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcFieldOptionsValidationError{}

// Validate checks the field values on IdcServiceAuthZ with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdcServiceAuthZ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcServiceAuthZ with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcServiceAuthZMultiError, or nil if none found.
func (m *IdcServiceAuthZ) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcServiceAuthZ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Server

	// no validation rules for SameRegion

	if len(errors) > 0 {
		return IdcServiceAuthZMultiError(errors)
	}

	return nil
}

// IdcServiceAuthZMultiError is an error wrapping multiple validation errors
// returned by IdcServiceAuthZ.ValidateAll() if the designated constraints
// aren't met.
type IdcServiceAuthZMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcServiceAuthZMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcServiceAuthZMultiError) AllErrors() []error { return m }

// IdcServiceAuthZValidationError is the validation error returned by
// IdcServiceAuthZ.Validate if the designated constraints aren't met.
type IdcServiceAuthZValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcServiceAuthZValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcServiceAuthZValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcServiceAuthZValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcServiceAuthZValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcServiceAuthZValidationError) ErrorName() string { return "IdcServiceAuthZValidationError" }

// Error satisfies the builtin error interface
func (e IdcServiceAuthZValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcServiceAuthZ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcServiceAuthZValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcServiceAuthZValidationError{}

// Validate checks the field values on IdcAuthZ with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdcAuthZ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcAuthZ with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdcAuthZMultiError, or nil
// if none found.
func (m *IdcAuthZ) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcAuthZ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccount

	// no validation rules for User

	// no validation rules for Product

	for idx, item := range m.GetService() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IdcAuthZValidationError{
						field:  fmt.Sprintf("Service[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IdcAuthZValidationError{
						field:  fmt.Sprintf("Service[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdcAuthZValidationError{
					field:  fmt.Sprintf("Service[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GtsCheck

	// no validation rules for UserName

	// no validation rules for AuthzCheck

	// no validation rules for ProductAccess

	// no validation rules for OwnerCheck

	// no validation rules for AppClientAccess

	if len(errors) > 0 {
		return IdcAuthZMultiError(errors)
	}

	return nil
}

// IdcAuthZMultiError is an error wrapping multiple validation errors returned
// by IdcAuthZ.ValidateAll() if the designated constraints aren't met.
type IdcAuthZMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcAuthZMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcAuthZMultiError) AllErrors() []error { return m }

// IdcAuthZValidationError is the validation error returned by
// IdcAuthZ.Validate if the designated constraints aren't met.
type IdcAuthZValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcAuthZValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcAuthZValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcAuthZValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcAuthZValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcAuthZValidationError) ErrorName() string { return "IdcAuthZValidationError" }

// Error satisfies the builtin error interface
func (e IdcAuthZValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcAuthZ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcAuthZValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcAuthZValidationError{}

// Validate checks the field values on IdcMethodOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdcMethodOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcMethodOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcMethodOptionsMultiError, or nil if none found.
func (m *IdcMethodOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcMethodOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuthz()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdcMethodOptionsValidationError{
					field:  "Authz",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdcMethodOptionsValidationError{
					field:  "Authz",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthz()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdcMethodOptionsValidationError{
				field:  "Authz",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StreamForever

	if len(errors) > 0 {
		return IdcMethodOptionsMultiError(errors)
	}

	return nil
}

// IdcMethodOptionsMultiError is an error wrapping multiple validation errors
// returned by IdcMethodOptions.ValidateAll() if the designated constraints
// aren't met.
type IdcMethodOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcMethodOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcMethodOptionsMultiError) AllErrors() []error { return m }

// IdcMethodOptionsValidationError is the validation error returned by
// IdcMethodOptions.Validate if the designated constraints aren't met.
type IdcMethodOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcMethodOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcMethodOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcMethodOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcMethodOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcMethodOptionsValidationError) ErrorName() string { return "IdcMethodOptionsValidationError" }

// Error satisfies the builtin error interface
func (e IdcMethodOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcMethodOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcMethodOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcMethodOptionsValidationError{}

// Validate checks the field values on IdcServiceOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdcServiceOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcServiceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdcServiceOptionsMultiError, or nil if none found.
func (m *IdcServiceOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcServiceOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyBillingDriver

	if len(errors) > 0 {
		return IdcServiceOptionsMultiError(errors)
	}

	return nil
}

// IdcServiceOptionsMultiError is an error wrapping multiple validation errors
// returned by IdcServiceOptions.ValidateAll() if the designated constraints
// aren't met.
type IdcServiceOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcServiceOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcServiceOptionsMultiError) AllErrors() []error { return m }

// IdcServiceOptionsValidationError is the validation error returned by
// IdcServiceOptions.Validate if the designated constraints aren't met.
type IdcServiceOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcServiceOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcServiceOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcServiceOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcServiceOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcServiceOptionsValidationError) ErrorName() string {
	return "IdcServiceOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e IdcServiceOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcServiceOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcServiceOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcServiceOptionsValidationError{}

// Validate checks the field values on IdcFileOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdcFileOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdcFileOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdcFileOptionsMultiError,
// or nil if none found.
func (m *IdcFileOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IdcFileOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deploy

	// no validation rules for Service

	if len(errors) > 0 {
		return IdcFileOptionsMultiError(errors)
	}

	return nil
}

// IdcFileOptionsMultiError is an error wrapping multiple validation errors
// returned by IdcFileOptions.ValidateAll() if the designated constraints
// aren't met.
type IdcFileOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdcFileOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdcFileOptionsMultiError) AllErrors() []error { return m }

// IdcFileOptionsValidationError is the validation error returned by
// IdcFileOptions.Validate if the designated constraints aren't met.
type IdcFileOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdcFileOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdcFileOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdcFileOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdcFileOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdcFileOptionsValidationError) ErrorName() string { return "IdcFileOptionsValidationError" }

// Error satisfies the builtin error interface
func (e IdcFileOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdcFileOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdcFileOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdcFileOptionsValidationError{}
