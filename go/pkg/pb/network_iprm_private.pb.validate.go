// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network_iprm_private.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PortSearchStreamPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortSearchStreamPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortSearchStreamPrivateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PortSearchStreamPrivateRequestMultiError, or nil if none found.
func (m *PortSearchStreamPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortSearchStreamPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PortSearchStreamPrivateRequestMultiError(errors)
	}

	return nil
}

// PortSearchStreamPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by PortSearchStreamPrivateRequest.ValidateAll()
// if the designated constraints aren't met.
type PortSearchStreamPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortSearchStreamPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortSearchStreamPrivateRequestMultiError) AllErrors() []error { return m }

// PortSearchStreamPrivateRequestValidationError is the validation error
// returned by PortSearchStreamPrivateRequest.Validate if the designated
// constraints aren't met.
type PortSearchStreamPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortSearchStreamPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortSearchStreamPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortSearchStreamPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortSearchStreamPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortSearchStreamPrivateRequestValidationError) ErrorName() string {
	return "PortSearchStreamPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PortSearchStreamPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortSearchStreamPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortSearchStreamPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortSearchStreamPrivateRequestValidationError{}

// Validate checks the field values on PortWatchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PortWatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortWatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortWatchRequestMultiError, or nil if none found.
func (m *PortWatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortWatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return PortWatchRequestMultiError(errors)
	}

	return nil
}

// PortWatchRequestMultiError is an error wrapping multiple validation errors
// returned by PortWatchRequest.ValidateAll() if the designated constraints
// aren't met.
type PortWatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortWatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortWatchRequestMultiError) AllErrors() []error { return m }

// PortWatchRequestValidationError is the validation error returned by
// PortWatchRequest.Validate if the designated constraints aren't met.
type PortWatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortWatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortWatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortWatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortWatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortWatchRequestValidationError) ErrorName() string { return "PortWatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e PortWatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortWatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortWatchRequestValidationError{}

// Validate checks the field values on PortWatchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PortWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortWatchResponseMultiError, or nil if none found.
func (m *PortWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PortWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortWatchResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortWatchResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PortWatchResponseMultiError(errors)
	}

	return nil
}

// PortWatchResponseMultiError is an error wrapping multiple validation errors
// returned by PortWatchResponse.ValidateAll() if the designated constraints
// aren't met.
type PortWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortWatchResponseMultiError) AllErrors() []error { return m }

// PortWatchResponseValidationError is the validation error returned by
// PortWatchResponse.Validate if the designated constraints aren't met.
type PortWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortWatchResponseValidationError) ErrorName() string {
	return "PortWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PortWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortWatchResponseValidationError{}

// Validate checks the field values on PortPrivateWatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortPrivateWatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortPrivateWatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortPrivateWatchResponseMultiError, or nil if none found.
func (m *PortPrivateWatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PortPrivateWatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortPrivateWatchResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortPrivateWatchResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Spec

	// no validation rules for Status

	if len(errors) > 0 {
		return PortPrivateWatchResponseMultiError(errors)
	}

	return nil
}

// PortPrivateWatchResponseMultiError is an error wrapping multiple validation
// errors returned by PortPrivateWatchResponse.ValidateAll() if the designated
// constraints aren't met.
type PortPrivateWatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortPrivateWatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortPrivateWatchResponseMultiError) AllErrors() []error { return m }

// PortPrivateWatchResponseValidationError is the validation error returned by
// PortPrivateWatchResponse.Validate if the designated constraints aren't met.
type PortPrivateWatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortPrivateWatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortPrivateWatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortPrivateWatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortPrivateWatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortPrivateWatchResponseValidationError) ErrorName() string {
	return "PortPrivateWatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PortPrivateWatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortPrivateWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortPrivateWatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortPrivateWatchResponseValidationError{}

// Validate checks the field values on ReservePortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReservePortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReservePortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReservePortRequestMultiError, or nil if none found.
func (m *ReservePortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReservePortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReservePortRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReservePortRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReservePortRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReservePortRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReservePortRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReservePortRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReservePortRequestMultiError(errors)
	}

	return nil
}

// ReservePortRequestMultiError is an error wrapping multiple validation errors
// returned by ReservePortRequest.ValidateAll() if the designated constraints
// aren't met.
type ReservePortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservePortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservePortRequestMultiError) AllErrors() []error { return m }

// ReservePortRequestValidationError is the validation error returned by
// ReservePortRequest.Validate if the designated constraints aren't met.
type ReservePortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservePortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservePortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservePortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservePortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservePortRequestValidationError) ErrorName() string {
	return "ReservePortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReservePortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservePortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservePortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservePortRequestValidationError{}

// Validate checks the field values on PortMetadataCreatePrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortMetadataCreatePrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortMetadataCreatePrivate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortMetadataCreatePrivateMultiError, or nil if none found.
func (m *PortMetadataCreatePrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *PortMetadataCreatePrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return PortMetadataCreatePrivateMultiError(errors)
	}

	return nil
}

// PortMetadataCreatePrivateMultiError is an error wrapping multiple validation
// errors returned by PortMetadataCreatePrivate.ValidateAll() if the
// designated constraints aren't met.
type PortMetadataCreatePrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortMetadataCreatePrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortMetadataCreatePrivateMultiError) AllErrors() []error { return m }

// PortMetadataCreatePrivateValidationError is the validation error returned by
// PortMetadataCreatePrivate.Validate if the designated constraints aren't met.
type PortMetadataCreatePrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortMetadataCreatePrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortMetadataCreatePrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortMetadataCreatePrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortMetadataCreatePrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortMetadataCreatePrivateValidationError) ErrorName() string {
	return "PortMetadataCreatePrivateValidationError"
}

// Error satisfies the builtin error interface
func (e PortMetadataCreatePrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortMetadataCreatePrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortMetadataCreatePrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortMetadataCreatePrivateValidationError{}

// Validate checks the field values on PortSpecPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PortSpecPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortSpecPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortSpecPrivateMultiError, or nil if none found.
func (m *PortSpecPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *PortSpecPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubnetId

	// no validation rules for IpuSerialNumber

	// no validation rules for ChassisId

	// no validation rules for IpAddress

	// no validation rules for MacAddress

	// no validation rules for SshEnabled

	// no validation rules for InternetAccess

	if len(errors) > 0 {
		return PortSpecPrivateMultiError(errors)
	}

	return nil
}

// PortSpecPrivateMultiError is an error wrapping multiple validation errors
// returned by PortSpecPrivate.ValidateAll() if the designated constraints
// aren't met.
type PortSpecPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortSpecPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortSpecPrivateMultiError) AllErrors() []error { return m }

// PortSpecPrivateValidationError is the validation error returned by
// PortSpecPrivate.Validate if the designated constraints aren't met.
type PortSpecPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortSpecPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortSpecPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortSpecPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortSpecPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortSpecPrivateValidationError) ErrorName() string { return "PortSpecPrivateValidationError" }

// Error satisfies the builtin error interface
func (e PortSpecPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortSpecPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortSpecPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortSpecPrivateValidationError{}

// Validate checks the field values on PortMetadataReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortMetadataReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortMetadataReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortMetadataReferenceMultiError, or nil if none found.
func (m *PortMetadataReference) ValidateAll() error {
	return m.validate(true)
}

func (m *PortMetadataReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if len(errors) > 0 {
		return PortMetadataReferenceMultiError(errors)
	}

	return nil
}

// PortMetadataReferenceMultiError is an error wrapping multiple validation
// errors returned by PortMetadataReference.ValidateAll() if the designated
// constraints aren't met.
type PortMetadataReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortMetadataReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortMetadataReferenceMultiError) AllErrors() []error { return m }

// PortMetadataReferenceValidationError is the validation error returned by
// PortMetadataReference.Validate if the designated constraints aren't met.
type PortMetadataReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortMetadataReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortMetadataReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortMetadataReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortMetadataReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortMetadataReferenceValidationError) ErrorName() string {
	return "PortMetadataReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e PortMetadataReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortMetadataReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortMetadataReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortMetadataReferenceValidationError{}

// Validate checks the field values on PortMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortMetadataPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortMetadataPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortMetadataPrivateMultiError, or nil if none found.
func (m *PortMetadataPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *PortMetadataPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ResourceId

	// no validation rules for ResourceVersion

	if all {
		switch v := interface{}(m.GetCreationTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortMetadataPrivateValidationError{
					field:  "CreationTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortMetadataPrivateValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletionTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortMetadataPrivateValidationError{
					field:  "DeletionTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletionTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortMetadataPrivateValidationError{
				field:  "DeletionTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortMetadataPrivateValidationError{
					field:  "DeletedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortMetadataPrivateValidationError{
				field:  "DeletedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PortMetadataPrivateMultiError(errors)
	}

	return nil
}

// PortMetadataPrivateMultiError is an error wrapping multiple validation
// errors returned by PortMetadataPrivate.ValidateAll() if the designated
// constraints aren't met.
type PortMetadataPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortMetadataPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortMetadataPrivateMultiError) AllErrors() []error { return m }

// PortMetadataPrivateValidationError is the validation error returned by
// PortMetadataPrivate.Validate if the designated constraints aren't met.
type PortMetadataPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortMetadataPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortMetadataPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortMetadataPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortMetadataPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortMetadataPrivateValidationError) ErrorName() string {
	return "PortMetadataPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e PortMetadataPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortMetadataPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortMetadataPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortMetadataPrivateValidationError{}

// Validate checks the field values on ReleasePortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleasePortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleasePortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleasePortRequestMultiError, or nil if none found.
func (m *ReleasePortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleasePortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleasePortRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleasePortRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleasePortRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleasePortRequestMultiError(errors)
	}

	return nil
}

// ReleasePortRequestMultiError is an error wrapping multiple validation errors
// returned by ReleasePortRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleasePortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleasePortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleasePortRequestMultiError) AllErrors() []error { return m }

// ReleasePortRequestValidationError is the validation error returned by
// ReleasePortRequest.Validate if the designated constraints aren't met.
type ReleasePortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleasePortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleasePortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleasePortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleasePortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleasePortRequestValidationError) ErrorName() string {
	return "ReleasePortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleasePortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleasePortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleasePortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleasePortRequestValidationError{}

// Validate checks the field values on PortStatusPrivate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PortStatusPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortStatusPrivate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortStatusPrivateMultiError, or nil if none found.
func (m *PortStatusPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *PortStatusPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for Message

	if len(errors) > 0 {
		return PortStatusPrivateMultiError(errors)
	}

	return nil
}

// PortStatusPrivateMultiError is an error wrapping multiple validation errors
// returned by PortStatusPrivate.ValidateAll() if the designated constraints
// aren't met.
type PortStatusPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortStatusPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortStatusPrivateMultiError) AllErrors() []error { return m }

// PortStatusPrivateValidationError is the validation error returned by
// PortStatusPrivate.Validate if the designated constraints aren't met.
type PortStatusPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortStatusPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortStatusPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortStatusPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortStatusPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortStatusPrivateValidationError) ErrorName() string {
	return "PortStatusPrivateValidationError"
}

// Error satisfies the builtin error interface
func (e PortStatusPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortStatusPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortStatusPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortStatusPrivateValidationError{}

// Validate checks the field values on PortPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PortPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PortPrivateMultiError, or
// nil if none found.
func (m *PortPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *PortPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortPrivateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortPrivateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortPrivateValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortPrivateValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortPrivateValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortPrivateValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PortPrivateMultiError(errors)
	}

	return nil
}

// PortPrivateMultiError is an error wrapping multiple validation errors
// returned by PortPrivate.ValidateAll() if the designated constraints aren't met.
type PortPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortPrivateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortPrivateMultiError) AllErrors() []error { return m }

// PortPrivateValidationError is the validation error returned by
// PortPrivate.Validate if the designated constraints aren't met.
type PortPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortPrivateValidationError) ErrorName() string { return "PortPrivateValidationError" }

// Error satisfies the builtin error interface
func (e PortPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortPrivateValidationError{}

// Validate checks the field values on PortUpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortUpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortUpdateStatusRequestMultiError, or nil if none found.
func (m *PortUpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortUpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortUpdateStatusRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdateStatusRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortUpdateStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdateStatusRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PortUpdateStatusRequestMultiError(errors)
	}

	return nil
}

// PortUpdateStatusRequestMultiError is an error wrapping multiple validation
// errors returned by PortUpdateStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type PortUpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortUpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortUpdateStatusRequestMultiError) AllErrors() []error { return m }

// PortUpdateStatusRequestValidationError is the validation error returned by
// PortUpdateStatusRequest.Validate if the designated constraints aren't met.
type PortUpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortUpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortUpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortUpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortUpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortUpdateStatusRequestValidationError) ErrorName() string {
	return "PortUpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PortUpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortUpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortUpdateStatusRequestValidationError{}

// Validate checks the field values on GetPortPrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPortPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPortPrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPortPrivateRequestMultiError, or nil if none found.
func (m *GetPortPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPortPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPortPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPortPrivateRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPortPrivateRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPortPrivateRequestMultiError(errors)
	}

	return nil
}

// GetPortPrivateRequestMultiError is an error wrapping multiple validation
// errors returned by GetPortPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPortPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPortPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPortPrivateRequestMultiError) AllErrors() []error { return m }

// GetPortPrivateRequestValidationError is the validation error returned by
// GetPortPrivateRequest.Validate if the designated constraints aren't met.
type GetPortPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPortPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPortPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPortPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPortPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPortPrivateRequestValidationError) ErrorName() string {
	return "GetPortPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPortPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPortPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPortPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPortPrivateRequestValidationError{}
