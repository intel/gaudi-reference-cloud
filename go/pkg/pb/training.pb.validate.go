// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: training.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClusterMultiError, or nil if none found.
func (m *Cluster) ValidateAll() error {
	return m.validate(true)
}

func (m *Cluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ClusterId

	// no validation rules for Description

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStorageNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterValidationError{
						field:  fmt.Sprintf("StorageNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterValidationError{
						field:  fmt.Sprintf("StorageNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("StorageNodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterMultiError(errors)
	}

	return nil
}

// ClusterMultiError is an error wrapping multiple validation errors returned
// by Cluster.ValidateAll() if the designated constraints aren't met.
type ClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterMultiError) AllErrors() []error { return m }

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

// Validate checks the field values on SlurmClusterCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SlurmClusterCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlurmClusterCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SlurmClusterCreateRequestMultiError, or nil if none found.
func (m *SlurmClusterCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SlurmClusterCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SlurmClusterCreateRequestValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SlurmClusterCreateRequestValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SlurmClusterCreateRequestValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SlurmClusterCreateRequestMultiError(errors)
	}

	return nil
}

// SlurmClusterCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SlurmClusterCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type SlurmClusterCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlurmClusterCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlurmClusterCreateRequestMultiError) AllErrors() []error { return m }

// SlurmClusterCreateRequestValidationError is the validation error returned by
// SlurmClusterCreateRequest.Validate if the designated constraints aren't met.
type SlurmClusterCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlurmClusterCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlurmClusterCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlurmClusterCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlurmClusterCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlurmClusterCreateRequestValidationError) ErrorName() string {
	return "SlurmClusterCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SlurmClusterCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlurmClusterCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlurmClusterCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlurmClusterCreateRequestValidationError{}

// Validate checks the field values on ClusterNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterNodeMultiError, or
// nil if none found.
func (m *ClusterNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for NodeId

	// no validation rules for ImageType

	// no validation rules for MachineType

	// no validation rules for Role

	// no validation rules for Labels

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterNodeValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterNodeValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterNodeValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterNodeMultiError(errors)
	}

	return nil
}

// ClusterNodeMultiError is an error wrapping multiple validation errors
// returned by ClusterNode.ValidateAll() if the designated constraints aren't met.
type ClusterNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterNodeMultiError) AllErrors() []error { return m }

// ClusterNodeValidationError is the validation error returned by
// ClusterNode.Validate if the designated constraints aren't met.
type ClusterNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterNodeValidationError) ErrorName() string { return "ClusterNodeValidationError" }

// Error satisfies the builtin error interface
func (e ClusterNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterNodeValidationError{}

// Validate checks the field values on StorageNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StorageNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StorageNodeMultiError, or
// nil if none found.
func (m *StorageNode) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FsResourceId

	// no validation rules for Name

	// no validation rules for Capacity

	// no validation rules for AccessMode

	// no validation rules for Mount

	// no validation rules for LocalMountDir

	// no validation rules for RemoteMountDir

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return StorageNodeMultiError(errors)
	}

	return nil
}

// StorageNodeMultiError is an error wrapping multiple validation errors
// returned by StorageNode.ValidateAll() if the designated constraints aren't met.
type StorageNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageNodeMultiError) AllErrors() []error { return m }

// StorageNodeValidationError is the validation error returned by
// StorageNode.Validate if the designated constraints aren't met.
type StorageNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageNodeValidationError) ErrorName() string { return "StorageNodeValidationError" }

// Error satisfies the builtin error interface
func (e StorageNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageNodeValidationError{}

// Validate checks the field values on SlurmClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SlurmClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlurmClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SlurmClusterRequestMultiError, or nil if none found.
func (m *SlurmClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SlurmClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return SlurmClusterRequestMultiError(errors)
	}

	return nil
}

// SlurmClusterRequestMultiError is an error wrapping multiple validation
// errors returned by SlurmClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type SlurmClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlurmClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlurmClusterRequestMultiError) AllErrors() []error { return m }

// SlurmClusterRequestValidationError is the validation error returned by
// SlurmClusterRequest.Validate if the designated constraints aren't met.
type SlurmClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlurmClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlurmClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlurmClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlurmClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlurmClusterRequestValidationError) ErrorName() string {
	return "SlurmClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SlurmClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlurmClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlurmClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlurmClusterRequestValidationError{}

// Validate checks the field values on SlurmClusterCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SlurmClusterCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlurmClusterCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SlurmClusterCreateResponseMultiError, or nil if none found.
func (m *SlurmClusterCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SlurmClusterCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	if len(errors) > 0 {
		return SlurmClusterCreateResponseMultiError(errors)
	}

	return nil
}

// SlurmClusterCreateResponseMultiError is an error wrapping multiple
// validation errors returned by SlurmClusterCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type SlurmClusterCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlurmClusterCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlurmClusterCreateResponseMultiError) AllErrors() []error { return m }

// SlurmClusterCreateResponseValidationError is the validation error returned
// by SlurmClusterCreateResponse.Validate if the designated constraints aren't met.
type SlurmClusterCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlurmClusterCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlurmClusterCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlurmClusterCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlurmClusterCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlurmClusterCreateResponseValidationError) ErrorName() string {
	return "SlurmClusterCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SlurmClusterCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlurmClusterCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlurmClusterCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlurmClusterCreateResponseValidationError{}

// Validate checks the field values on ClusterListOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClusterListOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterListOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterListOptionMultiError, or nil if none found.
func (m *ClusterListOption) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterListOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if m.ClusterName != nil {
		// no validation rules for ClusterName
	}

	if len(errors) > 0 {
		return ClusterListOptionMultiError(errors)
	}

	return nil
}

// ClusterListOptionMultiError is an error wrapping multiple validation errors
// returned by ClusterListOption.ValidateAll() if the designated constraints
// aren't met.
type ClusterListOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterListOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterListOptionMultiError) AllErrors() []error { return m }

// ClusterListOptionValidationError is the validation error returned by
// ClusterListOption.Validate if the designated constraints aren't met.
type ClusterListOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterListOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterListOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterListOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterListOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterListOptionValidationError) ErrorName() string {
	return "ClusterListOptionValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterListOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterListOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterListOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterListOptionValidationError{}

// Validate checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterInfoMultiError, or
// nil if none found.
func (m *ClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for ClusterId

	// no validation rules for Description

	if len(errors) > 0 {
		return ClusterInfoMultiError(errors)
	}

	return nil
}

// ClusterInfoMultiError is an error wrapping multiple validation errors
// returned by ClusterInfo.ValidateAll() if the designated constraints aren't met.
type ClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterInfoMultiError) AllErrors() []error { return m }

// ClusterInfoValidationError is the validation error returned by
// ClusterInfo.Validate if the designated constraints aren't met.
type ClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterInfoValidationError) ErrorName() string { return "ClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterInfoValidationError{}

// Validate checks the field values on SlurmClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SlurmClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlurmClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SlurmClusterResponseMultiError, or nil if none found.
func (m *SlurmClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SlurmClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SlurmClusterResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SlurmClusterResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SlurmClusterResponseValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SlurmClusterResponseMultiError(errors)
	}

	return nil
}

// SlurmClusterResponseMultiError is an error wrapping multiple validation
// errors returned by SlurmClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type SlurmClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlurmClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlurmClusterResponseMultiError) AllErrors() []error { return m }

// SlurmClusterResponseValidationError is the validation error returned by
// SlurmClusterResponse.Validate if the designated constraints aren't met.
type SlurmClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlurmClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlurmClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlurmClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlurmClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlurmClusterResponseValidationError) ErrorName() string {
	return "SlurmClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SlurmClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlurmClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlurmClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlurmClusterResponseValidationError{}

// Validate checks the field values on TrainingRegistrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainingRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingRegistrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingRegistrationRequestMultiError, or nil if none found.
func (m *TrainingRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for TrainingId

	// no validation rules for AccessType

	if len(errors) > 0 {
		return TrainingRegistrationRequestMultiError(errors)
	}

	return nil
}

// TrainingRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by TrainingRegistrationRequest.ValidateAll() if
// the designated constraints aren't met.
type TrainingRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingRegistrationRequestMultiError) AllErrors() []error { return m }

// TrainingRegistrationRequestValidationError is the validation error returned
// by TrainingRegistrationRequest.Validate if the designated constraints
// aren't met.
type TrainingRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingRegistrationRequestValidationError) ErrorName() string {
	return "TrainingRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingRegistrationRequestValidationError{}

// Validate checks the field values on TrainingRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainingRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingRegistrationResponseMultiError, or nil if none found.
func (m *TrainingRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for ExpiryDate

	if m.SshLoginInfo != nil {
		// no validation rules for SshLoginInfo
	}

	if m.JupyterLoginInfo != nil {
		// no validation rules for JupyterLoginInfo
	}

	if len(errors) > 0 {
		return TrainingRegistrationResponseMultiError(errors)
	}

	return nil
}

// TrainingRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by TrainingRegistrationResponse.ValidateAll() if
// the designated constraints aren't met.
type TrainingRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingRegistrationResponseMultiError) AllErrors() []error { return m }

// TrainingRegistrationResponseValidationError is the validation error returned
// by TrainingRegistrationResponse.Validate if the designated constraints
// aren't met.
type TrainingRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingRegistrationResponseValidationError) ErrorName() string {
	return "TrainingRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingRegistrationResponseValidationError{}

// Validate checks the field values on GetDataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDataRequestMultiError,
// or nil if none found.
func (m *GetDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return GetDataRequestMultiError(errors)
	}

	return nil
}

// GetDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataRequestMultiError) AllErrors() []error { return m }

// GetDataRequestValidationError is the validation error returned by
// GetDataRequest.Validate if the designated constraints aren't met.
type GetDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataRequestValidationError) ErrorName() string { return "GetDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataRequestValidationError{}

// Validate checks the field values on GetDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataResponseMultiError, or nil if none found.
func (m *GetDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExpiryDate

	if len(errors) > 0 {
		return GetDataResponseMultiError(errors)
	}

	return nil
}

// GetDataResponseMultiError is an error wrapping multiple validation errors
// returned by GetDataResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataResponseMultiError) AllErrors() []error { return m }

// GetDataResponseValidationError is the validation error returned by
// GetDataResponse.Validate if the designated constraints aren't met.
type GetDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataResponseValidationError) ErrorName() string { return "GetDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataResponseValidationError{}
