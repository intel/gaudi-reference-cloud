// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: security-insights.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidVendors int32

const (
	ValidVendors_UNSPECIFIED_KUBE_VENDOR ValidVendors = 0
	ValidVendors_OSS_KUBE_VENDOR         ValidVendors = 1
	ValidVendors_RANCHER_KUBE_VENDOR     ValidVendors = 2
)

// Enum value maps for ValidVendors.
var (
	ValidVendors_name = map[int32]string{
		0: "UNSPECIFIED_KUBE_VENDOR",
		1: "OSS_KUBE_VENDOR",
		2: "RANCHER_KUBE_VENDOR",
	}
	ValidVendors_value = map[string]int32{
		"UNSPECIFIED_KUBE_VENDOR": 0,
		"OSS_KUBE_VENDOR":         1,
		"RANCHER_KUBE_VENDOR":     2,
	}
)

func (x ValidVendors) Enum() *ValidVendors {
	p := new(ValidVendors)
	*p = x
	return p
}

func (x ValidVendors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidVendors) Descriptor() protoreflect.EnumDescriptor {
	return file_security_insights_proto_enumTypes[0].Descriptor()
}

func (ValidVendors) Type() protoreflect.EnumType {
	return &file_security_insights_proto_enumTypes[0]
}

func (x ValidVendors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidVendors.Descriptor instead.
func (ValidVendors) EnumDescriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{0}
}

type ValidSBOMFormats int32

const (
	ValidSBOMFormats_UNSPECIFIED_FORMAT ValidSBOMFormats = 0
	ValidSBOMFormats_SPDX_FORMAT        ValidSBOMFormats = 1
	ValidSBOMFormats_CYCLONEDX_FORMAT   ValidSBOMFormats = 2
)

// Enum value maps for ValidSBOMFormats.
var (
	ValidSBOMFormats_name = map[int32]string{
		0: "UNSPECIFIED_FORMAT",
		1: "SPDX_FORMAT",
		2: "CYCLONEDX_FORMAT",
	}
	ValidSBOMFormats_value = map[string]int32{
		"UNSPECIFIED_FORMAT": 0,
		"SPDX_FORMAT":        1,
		"CYCLONEDX_FORMAT":   2,
	}
)

func (x ValidSBOMFormats) Enum() *ValidSBOMFormats {
	p := new(ValidSBOMFormats)
	*p = x
	return p
}

func (x ValidSBOMFormats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidSBOMFormats) Descriptor() protoreflect.EnumDescriptor {
	return file_security_insights_proto_enumTypes[1].Descriptor()
}

func (ValidSBOMFormats) Type() protoreflect.EnumType {
	return &file_security_insights_proto_enumTypes[1]
}

func (x ValidSBOMFormats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidSBOMFormats.Descriptor instead.
func (ValidSBOMFormats) EnumDescriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{1}
}

type ComponentType int32

const (
	ComponentType_UNSPECIFIED_TYPE  ComponentType = 0
	ComponentType_OCI_IMAGE         ComponentType = 1
	ComponentType_GIT_REPO          ComponentType = 2
	ComponentType_COMPRESSED_BUNDLE ComponentType = 3
	ComponentType_FILE              ComponentType = 4
)

// Enum value maps for ComponentType.
var (
	ComponentType_name = map[int32]string{
		0: "UNSPECIFIED_TYPE",
		1: "OCI_IMAGE",
		2: "GIT_REPO",
		3: "COMPRESSED_BUNDLE",
		4: "FILE",
	}
	ComponentType_value = map[string]int32{
		"UNSPECIFIED_TYPE":  0,
		"OCI_IMAGE":         1,
		"GIT_REPO":          2,
		"COMPRESSED_BUNDLE": 3,
		"FILE":              4,
	}
)

func (x ComponentType) Enum() *ComponentType {
	p := new(ComponentType)
	*p = x
	return p
}

func (x ComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_security_insights_proto_enumTypes[2].Descriptor()
}

func (ComponentType) Type() protoreflect.EnumType {
	return &file_security_insights_proto_enumTypes[2]
}

func (x ComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentType.Descriptor instead.
func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{2}
}

type ReleaseComponent int32

const (
	ReleaseComponent_UNSPECIFIED_COMPONENT ReleaseComponent = 0
	ReleaseComponent_KUBERNETES            ReleaseComponent = 1
	ReleaseComponent_CALICO                ReleaseComponent = 2
	ReleaseComponent_CONTAINERD            ReleaseComponent = 3
	ReleaseComponent_RUNC                  ReleaseComponent = 4
)

// Enum value maps for ReleaseComponent.
var (
	ReleaseComponent_name = map[int32]string{
		0: "UNSPECIFIED_COMPONENT",
		1: "KUBERNETES",
		2: "CALICO",
		3: "CONTAINERD",
		4: "RUNC",
	}
	ReleaseComponent_value = map[string]int32{
		"UNSPECIFIED_COMPONENT": 0,
		"KUBERNETES":            1,
		"CALICO":                2,
		"CONTAINERD":            3,
		"RUNC":                  4,
	}
)

func (x ReleaseComponent) Enum() *ReleaseComponent {
	p := new(ReleaseComponent)
	*p = x
	return p
}

func (x ReleaseComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_security_insights_proto_enumTypes[3].Descriptor()
}

func (ReleaseComponent) Type() protoreflect.EnumType {
	return &file_security_insights_proto_enumTypes[3]
}

func (x ReleaseComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseComponent.Descriptor instead.
func (ReleaseComponent) EnumDescriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{3}
}

type ComponentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components map[string]*Releases `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComponentList) Reset() {
	*x = ComponentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentList) ProtoMessage() {}

func (x *ComponentList) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentList.ProtoReflect.Descriptor instead.
func (*ComponentList) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{0}
}

func (x *ComponentList) GetComponents() map[string]*Releases {
	if x != nil {
		return x.Components
	}
	return nil
}

type Releases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *Releases) Reset() {
	*x = Releases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Releases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Releases) ProtoMessage() {}

func (x *Releases) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Releases.ProtoReflect.Descriptor instead.
func (*Releases) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{1}
}

func (x *Releases) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type K8SReleaseMD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId        string                 `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Vendor           ValidVendors           `protobuf:"varint,2,opt,name=vendor,proto3,enum=proto.ValidVendors" json:"vendor,omitempty"`
	License          string                 `protobuf:"bytes,3,opt,name=license,proto3" json:"license,omitempty"`
	Purl             string                 `protobuf:"bytes,4,opt,name=purl,proto3" json:"purl,omitempty"`
	ReleaseTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=releaseTimestamp,proto3" json:"releaseTimestamp,omitempty"`
	EosTimestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=eosTimestamp,proto3" json:"eosTimestamp,omitempty"`
	EolTimestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=eolTimestamp,proto3" json:"eolTimestamp,omitempty"`
	Properties       map[string]string      `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Components       []*ReleaseComponents   `protobuf:"bytes,9,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *K8SReleaseMD) Reset() {
	*x = K8SReleaseMD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SReleaseMD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SReleaseMD) ProtoMessage() {}

func (x *K8SReleaseMD) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SReleaseMD.ProtoReflect.Descriptor instead.
func (*K8SReleaseMD) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{2}
}

func (x *K8SReleaseMD) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *K8SReleaseMD) GetVendor() ValidVendors {
	if x != nil {
		return x.Vendor
	}
	return ValidVendors_UNSPECIFIED_KUBE_VENDOR
}

func (x *K8SReleaseMD) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *K8SReleaseMD) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *K8SReleaseMD) GetReleaseTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseTimestamp
	}
	return nil
}

func (x *K8SReleaseMD) GetEosTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EosTimestamp
	}
	return nil
}

func (x *K8SReleaseMD) GetEolTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EolTimestamp
	}
	return nil
}

func (x *K8SReleaseMD) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *K8SReleaseMD) GetComponents() []*ReleaseComponents {
	if x != nil {
		return x.Components
	}
	return nil
}

type K8SReleaseMDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Releases []*K8SReleaseMD `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
}

func (x *K8SReleaseMDList) Reset() {
	*x = K8SReleaseMDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SReleaseMDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SReleaseMDList) ProtoMessage() {}

func (x *K8SReleaseMDList) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SReleaseMDList.ProtoReflect.Descriptor instead.
func (*K8SReleaseMDList) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{3}
}

func (x *K8SReleaseMDList) GetReleases() []*K8SReleaseMD {
	if x != nil {
		return x.Releases
	}
	return nil
}

type ReleaseComponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId   string                 `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Vendor      ValidVendors           `protobuf:"varint,2,opt,name=vendor,proto3,enum=proto.ValidVendors" json:"vendor,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version     string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Purl        string                 `protobuf:"bytes,5,opt,name=purl,proto3" json:"purl,omitempty"`
	Sha256      string                 `protobuf:"bytes,6,opt,name=sha256,proto3" json:"sha256,omitempty"`
	License     string                 `protobuf:"bytes,7,opt,name=License,proto3" json:"License,omitempty"`
	ReleaseTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ReleaseTime,proto3" json:"ReleaseTime,omitempty"`
	Type        ComponentType          `protobuf:"varint,9,opt,name=type,proto3,enum=proto.ComponentType" json:"type,omitempty"`
}

func (x *ReleaseComponents) Reset() {
	*x = ReleaseComponents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseComponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseComponents) ProtoMessage() {}

func (x *ReleaseComponents) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseComponents.ProtoReflect.Descriptor instead.
func (*ReleaseComponents) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{4}
}

func (x *ReleaseComponents) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *ReleaseComponents) GetVendor() ValidVendors {
	if x != nil {
		return x.Vendor
	}
	return ValidVendors_UNSPECIFIED_KUBE_VENDOR
}

func (x *ReleaseComponents) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseComponents) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseComponents) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *ReleaseComponents) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *ReleaseComponents) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *ReleaseComponents) GetReleaseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseTime
	}
	return nil
}

func (x *ReleaseComponents) GetType() ComponentType {
	if x != nil {
		return x.Type
	}
	return ComponentType_UNSPECIFIED_TYPE
}

type GetReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string           `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Component ReleaseComponent `protobuf:"varint,2,opt,name=component,proto3,enum=proto.ReleaseComponent" json:"component,omitempty"`
}

func (x *GetReleaseRequest) Reset() {
	*x = GetReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleaseRequest) ProtoMessage() {}

func (x *GetReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleaseRequest.ProtoReflect.Descriptor instead.
func (*GetReleaseRequest) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{5}
}

func (x *GetReleaseRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *GetReleaseRequest) GetComponent() ReleaseComponent {
	if x != nil {
		return x.Component
	}
	return ReleaseComponent_UNSPECIFIED_COMPONENT
}

type ReleaseFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       uint32           `protobuf:"varint,1,opt,name=top,proto3" json:"top,omitempty"`
	Component ReleaseComponent `protobuf:"varint,2,opt,name=component,proto3,enum=proto.ReleaseComponent" json:"component,omitempty"`
}

func (x *ReleaseFilter) Reset() {
	*x = ReleaseFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseFilter) ProtoMessage() {}

func (x *ReleaseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseFilter.ProtoReflect.Descriptor instead.
func (*ReleaseFilter) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{6}
}

func (x *ReleaseFilter) GetTop() uint32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ReleaseFilter) GetComponent() ReleaseComponent {
	if x != nil {
		return x.Component
	}
	return ReleaseComponent_UNSPECIFIED_COMPONENT
}

type ReleaseSBOM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Sbom      *SBOM  `protobuf:"bytes,2,opt,name=sbom,proto3" json:"sbom,omitempty"`
}

func (x *ReleaseSBOM) Reset() {
	*x = ReleaseSBOM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSBOM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSBOM) ProtoMessage() {}

func (x *ReleaseSBOM) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSBOM.ProtoReflect.Descriptor instead.
func (*ReleaseSBOM) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{7}
}

func (x *ReleaseSBOM) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *ReleaseSBOM) GetSbom() *SBOM {
	if x != nil {
		return x.Sbom
	}
	return nil
}

type SBOM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sbom            string                 `protobuf:"bytes,1,opt,name=sbom,proto3" json:"sbom,omitempty"`
	Format          ValidSBOMFormats       `protobuf:"varint,2,opt,name=format,proto3,enum=proto.ValidSBOMFormats" json:"format,omitempty"`
	CreateTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createTimestamp,proto3" json:"createTimestamp,omitempty"`
}

func (x *SBOM) Reset() {
	*x = SBOM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBOM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBOM) ProtoMessage() {}

func (x *SBOM) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBOM.ProtoReflect.Descriptor instead.
func (*SBOM) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{8}
}

func (x *SBOM) GetSbom() string {
	if x != nil {
		return x.Sbom
	}
	return ""
}

func (x *SBOM) GetFormat() ValidSBOMFormats {
	if x != nil {
		return x.Format
	}
	return ValidSBOMFormats_UNSPECIFIED_FORMAT
}

func (x *SBOM) GetCreateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTimestamp
	}
	return nil
}

type VulnerabilityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId        string                 `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	ComponentName    string                 `protobuf:"bytes,2,opt,name=componentName,proto3" json:"componentName,omitempty"`
	ComponentVersion string                 `protobuf:"bytes,3,opt,name=componentVersion,proto3" json:"componentVersion,omitempty"`
	ComponentSHA256  string                 `protobuf:"bytes,4,opt,name=componentSHA256,proto3" json:"componentSHA256,omitempty"`
	ScanTimestamp    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scanTimestamp,proto3" json:"scanTimestamp,omitempty"`
	ScanTool         string                 `protobuf:"bytes,6,opt,name=scanTool,proto3" json:"scanTool,omitempty"`
	Vulnerabilities  []*Vulnerability       `protobuf:"bytes,7,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
}

func (x *VulnerabilityReport) Reset() {
	*x = VulnerabilityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityReport) ProtoMessage() {}

func (x *VulnerabilityReport) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityReport.ProtoReflect.Descriptor instead.
func (*VulnerabilityReport) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{9}
}

func (x *VulnerabilityReport) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *VulnerabilityReport) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *VulnerabilityReport) GetComponentVersion() string {
	if x != nil {
		return x.ComponentVersion
	}
	return ""
}

func (x *VulnerabilityReport) GetComponentSHA256() string {
	if x != nil {
		return x.ComponentSHA256
	}
	return ""
}

func (x *VulnerabilityReport) GetScanTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ScanTimestamp
	}
	return nil
}

func (x *VulnerabilityReport) GetScanTool() string {
	if x != nil {
		return x.ScanTool
	}
	return ""
}

func (x *VulnerabilityReport) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

type VulnerabilitySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId          string                 `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	ComponentName      string                 `protobuf:"bytes,2,opt,name=componentName,proto3" json:"componentName,omitempty"`
	ComponentVersion   string                 `protobuf:"bytes,3,opt,name=componentVersion,proto3" json:"componentVersion,omitempty"`
	ComponentSHA256    string                 `protobuf:"bytes,4,opt,name=componentSHA256,proto3" json:"componentSHA256,omitempty"`
	ScanTimestamp      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scanTimestamp,proto3" json:"scanTimestamp,omitempty"`
	ScanTool           string                 `protobuf:"bytes,6,opt,name=scanTool,proto3" json:"scanTool,omitempty"`
	VulnerabilityCount map[string]uint32      `protobuf:"bytes,7,rep,name=vulnerabilityCount,proto3" json:"vulnerabilityCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *VulnerabilitySummary) Reset() {
	*x = VulnerabilitySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilitySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilitySummary) ProtoMessage() {}

func (x *VulnerabilitySummary) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilitySummary.ProtoReflect.Descriptor instead.
func (*VulnerabilitySummary) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{10}
}

func (x *VulnerabilitySummary) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *VulnerabilitySummary) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *VulnerabilitySummary) GetComponentVersion() string {
	if x != nil {
		return x.ComponentVersion
	}
	return ""
}

func (x *VulnerabilitySummary) GetComponentSHA256() string {
	if x != nil {
		return x.ComponentSHA256
	}
	return ""
}

func (x *VulnerabilitySummary) GetScanTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ScanTimestamp
	}
	return nil
}

func (x *VulnerabilitySummary) GetScanTool() string {
	if x != nil {
		return x.ScanTool
	}
	return ""
}

func (x *VulnerabilitySummary) GetVulnerabilityCount() map[string]uint32 {
	if x != nil {
		return x.VulnerabilityCount
	}
	return nil
}

type VulnerabilitiesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []*VulnerabilityReport `protobuf:"bytes,1,rep,name=report,proto3" json:"report,omitempty"`
}

func (x *VulnerabilitiesResult) Reset() {
	*x = VulnerabilitiesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilitiesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilitiesResult) ProtoMessage() {}

func (x *VulnerabilitiesResult) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilitiesResult.ProtoReflect.Descriptor instead.
func (*VulnerabilitiesResult) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{11}
}

func (x *VulnerabilitiesResult) GetReport() []*VulnerabilityReport {
	if x != nil {
		return x.Report
	}
	return nil
}

type CISReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId       string                 `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	ScanTimestamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=scanTimestamp,proto3" json:"scanTimestamp,omitempty"`
	ScanTool        string                 `protobuf:"bytes,3,opt,name=scanTool,proto3" json:"scanTool,omitempty"`
	Vulnerabilities *structpb.Struct       `protobuf:"bytes,4,opt,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
}

func (x *CISReport) Reset() {
	*x = CISReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CISReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CISReport) ProtoMessage() {}

func (x *CISReport) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CISReport.ProtoReflect.Descriptor instead.
func (*CISReport) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{12}
}

func (x *CISReport) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *CISReport) GetScanTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ScanTimestamp
	}
	return nil
}

func (x *CISReport) GetScanTool() string {
	if x != nil {
		return x.ScanTool
	}
	return ""
}

func (x *CISReport) GetVulnerabilities() *structpb.Struct {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

type Vulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description      string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AffectedPackage  string                 `protobuf:"bytes,3,opt,name=affectedPackage,proto3" json:"affectedPackage,omitempty"`
	AffectedVersions string                 `protobuf:"bytes,4,opt,name=affectedVersions,proto3" json:"affectedVersions,omitempty"`
	FixedVersion     string                 `protobuf:"bytes,5,opt,name=fixedVersion,proto3" json:"fixedVersion,omitempty"`
	Severity         string                 `protobuf:"bytes,6,opt,name=severity,proto3" json:"severity,omitempty"`
	PublishedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=publishedAt,proto3" json:"publishedAt,omitempty"`
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{13}
}

func (x *Vulnerability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vulnerability) GetAffectedPackage() string {
	if x != nil {
		return x.AffectedPackage
	}
	return ""
}

func (x *Vulnerability) GetAffectedVersions() string {
	if x != nil {
		return x.AffectedVersions
	}
	return ""
}

func (x *Vulnerability) GetFixedVersion() string {
	if x != nil {
		return x.FixedVersion
	}
	return ""
}

func (x *Vulnerability) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Vulnerability) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type RecommendationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Policy      *structpb.Struct       `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	Active      bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *RecommendationPolicy) Reset() {
	*x = RecommendationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendationPolicy) ProtoMessage() {}

func (x *RecommendationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendationPolicy.ProtoReflect.Descriptor instead.
func (*RecommendationPolicy) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{14}
}

func (x *RecommendationPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecommendationPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecommendationPolicy) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecommendationPolicy) GetPolicy() *structpb.Struct {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *RecommendationPolicy) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type PolicyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policyId,proto3" json:"policyId,omitempty"`
}

func (x *PolicyId) Reset() {
	*x = PolicyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyId) ProtoMessage() {}

func (x *PolicyId) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyId.ProtoReflect.Descriptor instead.
func (*PolicyId) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{15}
}

func (x *PolicyId) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type AllPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*PolicyMetadata `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *AllPoliciesResponse) Reset() {
	*x = AllPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPoliciesResponse) ProtoMessage() {}

func (x *AllPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPoliciesResponse.ProtoReflect.Descriptor instead.
func (*AllPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{16}
}

func (x *AllPoliciesResponse) GetPolicies() []*PolicyMetadata {
	if x != nil {
		return x.Policies
	}
	return nil
}

type PolicyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId    string                 `protobuf:"bytes,1,opt,name=policyId,proto3" json:"policyId,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Active      bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *PolicyMetadata) Reset() {
	*x = PolicyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMetadata) ProtoMessage() {}

func (x *PolicyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMetadata.ProtoReflect.Descriptor instead.
func (*PolicyMetadata) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{17}
}

func (x *PolicyMetadata) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PolicyMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PolicyMetadata) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type PolicyDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyMetadata *PolicyMetadata  `protobuf:"bytes,1,opt,name=policyMetadata,proto3" json:"policyMetadata,omitempty"`
	Policy         *structpb.Struct `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *PolicyDetails) Reset() {
	*x = PolicyDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDetails) ProtoMessage() {}

func (x *PolicyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDetails.ProtoReflect.Descriptor instead.
func (*PolicyDetails) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{18}
}

func (x *PolicyDetails) GetPolicyMetadata() *PolicyMetadata {
	if x != nil {
		return x.PolicyMetadata
	}
	return nil
}

func (x *PolicyDetails) GetPolicy() *structpb.Struct {
	if x != nil {
		return x.Policy
	}
	return nil
}

type PolicyFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *PolicyFilters) Reset() {
	*x = PolicyFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyFilters) ProtoMessage() {}

func (x *PolicyFilters) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyFilters.ProtoReflect.Descriptor instead.
func (*PolicyFilters) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{19}
}

func (x *PolicyFilters) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type RecommendationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId       string `protobuf:"bytes,1,opt,name=policyId,proto3" json:"policyId,omitempty"`
	CurrentVersion string `protobuf:"bytes,2,opt,name=currentVersion,proto3" json:"currentVersion,omitempty"`
	Vendor         string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Topk           uint32 `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
}

func (x *RecommendationFilter) Reset() {
	*x = RecommendationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendationFilter) ProtoMessage() {}

func (x *RecommendationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendationFilter.ProtoReflect.Descriptor instead.
func (*RecommendationFilter) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{20}
}

func (x *RecommendationFilter) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *RecommendationFilter) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *RecommendationFilter) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *RecommendationFilter) GetTopk() uint32 {
	if x != nil {
		return x.Topk
	}
	return 0
}

type UpdateRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId       string                `protobuf:"bytes,1,opt,name=policyId,proto3" json:"policyId,omitempty"`
	CurrentVersion string                `protobuf:"bytes,2,opt,name=currentVersion,proto3" json:"currentVersion,omitempty"`
	Vendor         string                `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Versions       []*RecommendedVersion `protobuf:"bytes,4,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *UpdateRecommendations) Reset() {
	*x = UpdateRecommendations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecommendations) ProtoMessage() {}

func (x *UpdateRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecommendations.ProtoReflect.Descriptor instead.
func (*UpdateRecommendations) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateRecommendations) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *UpdateRecommendations) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *UpdateRecommendations) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *UpdateRecommendations) GetVersions() []*RecommendedVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

type RecommendedVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string           `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt string           `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Reason    *structpb.Struct `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RecommendedVersion) Reset() {
	*x = RecommendedVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendedVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendedVersion) ProtoMessage() {}

func (x *RecommendedVersion) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendedVersion.ProtoReflect.Descriptor instead.
func (*RecommendedVersion) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{22}
}

func (x *RecommendedVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RecommendedVersion) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RecommendedVersion) GetReason() *structpb.Struct {
	if x != nil {
		return x.Reason
	}
	return nil
}

type GetCISRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
}

func (x *GetCISRequest) Reset() {
	*x = GetCISRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCISRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCISRequest) ProtoMessage() {}

func (x *GetCISRequest) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCISRequest.ProtoReflect.Descriptor instead.
func (*GetCISRequest) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{23}
}

func (x *GetCISRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type SecuritySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId       string                  `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Vulnerabilities []*VulnerabilitySummary `protobuf:"bytes,2,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	CisReport       *structpb.Struct        `protobuf:"bytes,3,opt,name=cisReport,proto3" json:"cisReport,omitempty"`
}

func (x *SecuritySummary) Reset() {
	*x = SecuritySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecuritySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuritySummary) ProtoMessage() {}

func (x *SecuritySummary) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuritySummary.ProtoReflect.Descriptor instead.
func (*SecuritySummary) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{24}
}

func (x *SecuritySummary) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *SecuritySummary) GetVulnerabilities() []*VulnerabilitySummary {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *SecuritySummary) GetCisReport() *structpb.Struct {
	if x != nil {
		return x.CisReport
	}
	return nil
}

type ReleaseComparisonFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName ReleaseComponent `protobuf:"varint,1,opt,name=componentName,proto3,enum=proto.ReleaseComponent" json:"componentName,omitempty"`
	CurrReleaseId string           `protobuf:"bytes,2,opt,name=currReleaseId,proto3" json:"currReleaseId,omitempty"`
	NewReleaseId  string           `protobuf:"bytes,3,opt,name=newReleaseId,proto3" json:"newReleaseId,omitempty"`
}

func (x *ReleaseComparisonFilter) Reset() {
	*x = ReleaseComparisonFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseComparisonFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseComparisonFilter) ProtoMessage() {}

func (x *ReleaseComparisonFilter) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseComparisonFilter.ProtoReflect.Descriptor instead.
func (*ReleaseComparisonFilter) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{25}
}

func (x *ReleaseComparisonFilter) GetComponentName() ReleaseComponent {
	if x != nil {
		return x.ComponentName
	}
	return ReleaseComponent_UNSPECIFIED_COMPONENT
}

func (x *ReleaseComparisonFilter) GetCurrReleaseId() string {
	if x != nil {
		return x.CurrReleaseId
	}
	return ""
}

func (x *ReleaseComparisonFilter) GetNewReleaseId() string {
	if x != nil {
		return x.NewReleaseId
	}
	return ""
}

type VulnerabilityComparisonReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary []*VulnerabilityDiscovery         `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary,omitempty"`
	Report  []*VulnerabilityComparisonSummary `protobuf:"bytes,2,rep,name=report,proto3" json:"report,omitempty"`
}

func (x *VulnerabilityComparisonReport) Reset() {
	*x = VulnerabilityComparisonReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityComparisonReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityComparisonReport) ProtoMessage() {}

func (x *VulnerabilityComparisonReport) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityComparisonReport.ProtoReflect.Descriptor instead.
func (*VulnerabilityComparisonReport) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{26}
}

func (x *VulnerabilityComparisonReport) GetSummary() []*VulnerabilityDiscovery {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *VulnerabilityComparisonReport) GetReport() []*VulnerabilityComparisonSummary {
	if x != nil {
		return x.Report
	}
	return nil
}

type VulnerabilityDiscovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	Fixed     uint32 `protobuf:"varint,2,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Common    uint32 `protobuf:"varint,3,opt,name=common,proto3" json:"common,omitempty"`
	New       uint32 `protobuf:"varint,4,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *VulnerabilityDiscovery) Reset() {
	*x = VulnerabilityDiscovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityDiscovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityDiscovery) ProtoMessage() {}

func (x *VulnerabilityDiscovery) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityDiscovery.ProtoReflect.Descriptor instead.
func (*VulnerabilityDiscovery) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{27}
}

func (x *VulnerabilityDiscovery) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *VulnerabilityDiscovery) GetFixed() uint32 {
	if x != nil {
		return x.Fixed
	}
	return 0
}

func (x *VulnerabilityDiscovery) GetCommon() uint32 {
	if x != nil {
		return x.Common
	}
	return 0
}

func (x *VulnerabilityDiscovery) GetNew() uint32 {
	if x != nil {
		return x.New
	}
	return 0
}

type VulnerabilityComparisonSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName       string                  `protobuf:"bytes,1,opt,name=componentName,proto3" json:"componentName,omitempty"`
	CurrReleaseId       string                  `protobuf:"bytes,2,opt,name=currReleaseId,proto3" json:"currReleaseId,omitempty"`
	NewReleaseId        string                  `protobuf:"bytes,3,opt,name=newReleaseId,proto3" json:"newReleaseId,omitempty"`
	CurrComponentSHA256 string                  `protobuf:"bytes,4,opt,name=currComponentSHA256,proto3" json:"currComponentSHA256,omitempty"`
	NewComponentSHA256  string                  `protobuf:"bytes,5,opt,name=newComponentSHA256,proto3" json:"newComponentSHA256,omitempty"`
	CurrScanTimestamp   *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=currScanTimestamp,proto3" json:"currScanTimestamp,omitempty"`
	NewScanTimestamp    *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=newScanTimestamp,proto3" json:"newScanTimestamp,omitempty"`
	ScanTool            string                  `protobuf:"bytes,8,opt,name=scanTool,proto3" json:"scanTool,omitempty"`
	Fixed               *VulnerabilitiesWrapper `protobuf:"bytes,9,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Common              *VulnerabilitiesWrapper `protobuf:"bytes,10,opt,name=common,proto3" json:"common,omitempty"`
	New                 *VulnerabilitiesWrapper `protobuf:"bytes,11,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *VulnerabilityComparisonSummary) Reset() {
	*x = VulnerabilityComparisonSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityComparisonSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityComparisonSummary) ProtoMessage() {}

func (x *VulnerabilityComparisonSummary) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityComparisonSummary.ProtoReflect.Descriptor instead.
func (*VulnerabilityComparisonSummary) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{28}
}

func (x *VulnerabilityComparisonSummary) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *VulnerabilityComparisonSummary) GetCurrReleaseId() string {
	if x != nil {
		return x.CurrReleaseId
	}
	return ""
}

func (x *VulnerabilityComparisonSummary) GetNewReleaseId() string {
	if x != nil {
		return x.NewReleaseId
	}
	return ""
}

func (x *VulnerabilityComparisonSummary) GetCurrComponentSHA256() string {
	if x != nil {
		return x.CurrComponentSHA256
	}
	return ""
}

func (x *VulnerabilityComparisonSummary) GetNewComponentSHA256() string {
	if x != nil {
		return x.NewComponentSHA256
	}
	return ""
}

func (x *VulnerabilityComparisonSummary) GetCurrScanTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrScanTimestamp
	}
	return nil
}

func (x *VulnerabilityComparisonSummary) GetNewScanTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.NewScanTimestamp
	}
	return nil
}

func (x *VulnerabilityComparisonSummary) GetScanTool() string {
	if x != nil {
		return x.ScanTool
	}
	return ""
}

func (x *VulnerabilityComparisonSummary) GetFixed() *VulnerabilitiesWrapper {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *VulnerabilityComparisonSummary) GetCommon() *VulnerabilitiesWrapper {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *VulnerabilityComparisonSummary) GetNew() *VulnerabilitiesWrapper {
	if x != nil {
		return x.New
	}
	return nil
}

type VulnerabilitiesWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vulns []*Vulnerability `protobuf:"bytes,1,rep,name=Vulns,proto3" json:"Vulns,omitempty"`
}

func (x *VulnerabilitiesWrapper) Reset() {
	*x = VulnerabilitiesWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_insights_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilitiesWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilitiesWrapper) ProtoMessage() {}

func (x *VulnerabilitiesWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_security_insights_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilitiesWrapper.ProtoReflect.Descriptor instead.
func (*VulnerabilitiesWrapper) Descriptor() ([]byte, []int) {
	return file_security_insights_proto_rawDescGZIP(), []int{29}
}

func (x *VulnerabilitiesWrapper) GetVulns() []*Vulnerability {
	if x != nil {
		return x.Vulns
	}
	return nil
}

var File_security_insights_proto protoreflect.FileDescriptor

var file_security_insights_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x4e,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8d, 0x04, 0x0a, 0x0c, 0x4b,
	0x38, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x75, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c,
	0x65, 0x6f, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x65, 0x6f, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c,
	0x65, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x65, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4d, 0x44, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x10, 0x4b, 0x38,
	0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4d, 0x44, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22,
	0xba, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75,
	0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x76,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x5c, 0x2e,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x42, 0x4f, 0x4d, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x62, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x42, 0x4f, 0x4d, 0x52,
	0x04, 0x73, 0x62, 0x6f, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x53, 0x42, 0x4f, 0x4d, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x62, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x62,
	0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x42, 0x4f, 0x4d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcd, 0x02, 0x0a, 0x13, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12, 0x40, 0x0a, 0x0d, 0x73,
	0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x0f, 0x76, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xba, 0x03, 0x0a, 0x14, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x63, 0x0a, 0x12, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x76, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x45, 0x0a, 0x17, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x15, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x09, 0x43, 0x49, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x41, 0x0a,
	0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x95, 0x02, 0x0a, 0x0d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xb4, 0x01, 0x0a,
	0x0e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x27, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x49, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x69,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x63, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xf0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa,
	0x42, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x76, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x5c, 0x2e,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x76, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x3d, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x76,
	0x0a, 0x16, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0xbd, 0x04, 0x0a, 0x1e, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x72,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12, 0x2e, 0x0a, 0x12, 0x6e,
	0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12, 0x48, 0x0a, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6e, 0x65, 0x77,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x44, 0x0a, 0x16, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x05, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x2a, 0x59, 0x0a, 0x0c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x4b, 0x55, 0x42, 0x45,
	0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x53, 0x53,
	0x5f, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x42, 0x4f, 0x4d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x44, 0x58, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x44,
	0x58, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x43, 0x49, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x4e,
	0x44, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x2a,
	0x63, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x41, 0x4c, 0x49, 0x43, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55,
	0x4e, 0x43, 0x10, 0x04, 0x32, 0xbf, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x44, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x44, 0x22,
	0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x12, 0x70, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4d, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x42, 0x4f, 0x4d, 0x12, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x42,
	0x4f, 0x4d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x62,
	0x6f, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x85, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x42, 0x4f, 0x4d, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x42, 0x4f, 0x4d, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x7b,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f,
	0x73, 0x62, 0x6f, 0x6d, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x74, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x49, 0x53, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x49, 0x53,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x7d, 0x2f, 0x63, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x57,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x49,
	0x53, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x49, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x49, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x7d, 0x2f, 0x63, 0x69, 0x73, 0x12, 0x79, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x72, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x7b,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x01, 0x0a, 0x1d, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x6c, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x02, 0xaa, 0xdd, 0x1b,
	0x13, 0x12, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_security_insights_proto_rawDescOnce sync.Once
	file_security_insights_proto_rawDescData = file_security_insights_proto_rawDesc
)

func file_security_insights_proto_rawDescGZIP() []byte {
	file_security_insights_proto_rawDescOnce.Do(func() {
		file_security_insights_proto_rawDescData = protoimpl.X.CompressGZIP(file_security_insights_proto_rawDescData)
	})
	return file_security_insights_proto_rawDescData
}

var file_security_insights_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_security_insights_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_security_insights_proto_goTypes = []interface{}{
	(ValidVendors)(0),                      // 0: proto.ValidVendors
	(ValidSBOMFormats)(0),                  // 1: proto.ValidSBOMFormats
	(ComponentType)(0),                     // 2: proto.ComponentType
	(ReleaseComponent)(0),                  // 3: proto.ReleaseComponent
	(*ComponentList)(nil),                  // 4: proto.ComponentList
	(*Releases)(nil),                       // 5: proto.Releases
	(*K8SReleaseMD)(nil),                   // 6: proto.K8sReleaseMD
	(*K8SReleaseMDList)(nil),               // 7: proto.K8sReleaseMDList
	(*ReleaseComponents)(nil),              // 8: proto.ReleaseComponents
	(*GetReleaseRequest)(nil),              // 9: proto.GetReleaseRequest
	(*ReleaseFilter)(nil),                  // 10: proto.ReleaseFilter
	(*ReleaseSBOM)(nil),                    // 11: proto.ReleaseSBOM
	(*SBOM)(nil),                           // 12: proto.SBOM
	(*VulnerabilityReport)(nil),            // 13: proto.VulnerabilityReport
	(*VulnerabilitySummary)(nil),           // 14: proto.VulnerabilitySummary
	(*VulnerabilitiesResult)(nil),          // 15: proto.VulnerabilitiesResult
	(*CISReport)(nil),                      // 16: proto.CISReport
	(*Vulnerability)(nil),                  // 17: proto.Vulnerability
	(*RecommendationPolicy)(nil),           // 18: proto.RecommendationPolicy
	(*PolicyId)(nil),                       // 19: proto.PolicyId
	(*AllPoliciesResponse)(nil),            // 20: proto.AllPoliciesResponse
	(*PolicyMetadata)(nil),                 // 21: proto.PolicyMetadata
	(*PolicyDetails)(nil),                  // 22: proto.PolicyDetails
	(*PolicyFilters)(nil),                  // 23: proto.PolicyFilters
	(*RecommendationFilter)(nil),           // 24: proto.RecommendationFilter
	(*UpdateRecommendations)(nil),          // 25: proto.UpdateRecommendations
	(*RecommendedVersion)(nil),             // 26: proto.RecommendedVersion
	(*GetCISRequest)(nil),                  // 27: proto.GetCISRequest
	(*SecuritySummary)(nil),                // 28: proto.SecuritySummary
	(*ReleaseComparisonFilter)(nil),        // 29: proto.ReleaseComparisonFilter
	(*VulnerabilityComparisonReport)(nil),  // 30: proto.VulnerabilityComparisonReport
	(*VulnerabilityDiscovery)(nil),         // 31: proto.VulnerabilityDiscovery
	(*VulnerabilityComparisonSummary)(nil), // 32: proto.VulnerabilityComparisonSummary
	(*VulnerabilitiesWrapper)(nil),         // 33: proto.VulnerabilitiesWrapper
	nil,                                    // 34: proto.ComponentList.ComponentsEntry
	nil,                                    // 35: proto.K8sReleaseMD.PropertiesEntry
	nil,                                    // 36: proto.VulnerabilitySummary.VulnerabilityCountEntry
	(*timestamppb.Timestamp)(nil),          // 37: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                // 38: google.protobuf.Struct
	(*emptypb.Empty)(nil),                  // 39: google.protobuf.Empty
}
var file_security_insights_proto_depIdxs = []int32{
	34, // 0: proto.ComponentList.components:type_name -> proto.ComponentList.ComponentsEntry
	0,  // 1: proto.K8sReleaseMD.vendor:type_name -> proto.ValidVendors
	37, // 2: proto.K8sReleaseMD.releaseTimestamp:type_name -> google.protobuf.Timestamp
	37, // 3: proto.K8sReleaseMD.eosTimestamp:type_name -> google.protobuf.Timestamp
	37, // 4: proto.K8sReleaseMD.eolTimestamp:type_name -> google.protobuf.Timestamp
	35, // 5: proto.K8sReleaseMD.properties:type_name -> proto.K8sReleaseMD.PropertiesEntry
	8,  // 6: proto.K8sReleaseMD.components:type_name -> proto.ReleaseComponents
	6,  // 7: proto.K8sReleaseMDList.releases:type_name -> proto.K8sReleaseMD
	0,  // 8: proto.ReleaseComponents.vendor:type_name -> proto.ValidVendors
	37, // 9: proto.ReleaseComponents.ReleaseTime:type_name -> google.protobuf.Timestamp
	2,  // 10: proto.ReleaseComponents.type:type_name -> proto.ComponentType
	3,  // 11: proto.GetReleaseRequest.component:type_name -> proto.ReleaseComponent
	3,  // 12: proto.ReleaseFilter.component:type_name -> proto.ReleaseComponent
	12, // 13: proto.ReleaseSBOM.sbom:type_name -> proto.SBOM
	1,  // 14: proto.SBOM.format:type_name -> proto.ValidSBOMFormats
	37, // 15: proto.SBOM.createTimestamp:type_name -> google.protobuf.Timestamp
	37, // 16: proto.VulnerabilityReport.scanTimestamp:type_name -> google.protobuf.Timestamp
	17, // 17: proto.VulnerabilityReport.vulnerabilities:type_name -> proto.Vulnerability
	37, // 18: proto.VulnerabilitySummary.scanTimestamp:type_name -> google.protobuf.Timestamp
	36, // 19: proto.VulnerabilitySummary.vulnerabilityCount:type_name -> proto.VulnerabilitySummary.VulnerabilityCountEntry
	13, // 20: proto.VulnerabilitiesResult.report:type_name -> proto.VulnerabilityReport
	37, // 21: proto.CISReport.scanTimestamp:type_name -> google.protobuf.Timestamp
	38, // 22: proto.CISReport.vulnerabilities:type_name -> google.protobuf.Struct
	37, // 23: proto.Vulnerability.publishedAt:type_name -> google.protobuf.Timestamp
	37, // 24: proto.RecommendationPolicy.createdAt:type_name -> google.protobuf.Timestamp
	38, // 25: proto.RecommendationPolicy.policy:type_name -> google.protobuf.Struct
	21, // 26: proto.AllPoliciesResponse.policies:type_name -> proto.PolicyMetadata
	37, // 27: proto.PolicyMetadata.createdAt:type_name -> google.protobuf.Timestamp
	21, // 28: proto.PolicyDetails.policyMetadata:type_name -> proto.PolicyMetadata
	38, // 29: proto.PolicyDetails.policy:type_name -> google.protobuf.Struct
	26, // 30: proto.UpdateRecommendations.versions:type_name -> proto.RecommendedVersion
	38, // 31: proto.RecommendedVersion.reason:type_name -> google.protobuf.Struct
	14, // 32: proto.SecuritySummary.vulnerabilities:type_name -> proto.VulnerabilitySummary
	38, // 33: proto.SecuritySummary.cisReport:type_name -> google.protobuf.Struct
	3,  // 34: proto.ReleaseComparisonFilter.componentName:type_name -> proto.ReleaseComponent
	31, // 35: proto.VulnerabilityComparisonReport.summary:type_name -> proto.VulnerabilityDiscovery
	32, // 36: proto.VulnerabilityComparisonReport.report:type_name -> proto.VulnerabilityComparisonSummary
	37, // 37: proto.VulnerabilityComparisonSummary.currScanTimestamp:type_name -> google.protobuf.Timestamp
	37, // 38: proto.VulnerabilityComparisonSummary.newScanTimestamp:type_name -> google.protobuf.Timestamp
	33, // 39: proto.VulnerabilityComparisonSummary.fixed:type_name -> proto.VulnerabilitiesWrapper
	33, // 40: proto.VulnerabilityComparisonSummary.common:type_name -> proto.VulnerabilitiesWrapper
	33, // 41: proto.VulnerabilityComparisonSummary.new:type_name -> proto.VulnerabilitiesWrapper
	17, // 42: proto.VulnerabilitiesWrapper.Vulns:type_name -> proto.Vulnerability
	5,  // 43: proto.ComponentList.ComponentsEntry.value:type_name -> proto.Releases
	6,  // 44: proto.SecurityInsights.CreateRelease:input_type -> proto.K8sReleaseMD
	9,  // 45: proto.SecurityInsights.GetRelease:input_type -> proto.GetReleaseRequest
	10, // 46: proto.SecurityInsights.GetAllReleases:input_type -> proto.ReleaseFilter
	11, // 47: proto.SecurityInsights.StoreReleaseSBOM:input_type -> proto.ReleaseSBOM
	8,  // 48: proto.SecurityInsights.StoreReleaseComponent:input_type -> proto.ReleaseComponents
	9,  // 49: proto.SecurityInsights.GetReleaseComponent:input_type -> proto.GetReleaseRequest
	9,  // 50: proto.SecurityInsights.GetReleaseSBOM:input_type -> proto.GetReleaseRequest
	13, // 51: proto.SecurityInsights.StoreReleaseVulnerabilityReport:input_type -> proto.VulnerabilityReport
	16, // 52: proto.SecurityInsights.StoreCISReport:input_type -> proto.CISReport
	9,  // 53: proto.SecurityInsights.GetReleaseVulnerabilities:input_type -> proto.GetReleaseRequest
	27, // 54: proto.SecurityInsights.GetCISReport:input_type -> proto.GetCISRequest
	18, // 55: proto.SecurityInsights.UpdateRecommendationPolicy:input_type -> proto.RecommendationPolicy
	9,  // 56: proto.SecurityInsights.GetSummary:input_type -> proto.GetReleaseRequest
	23, // 57: proto.SecurityInsights.GetRecommendationPolicies:input_type -> proto.PolicyFilters
	19, // 58: proto.SecurityInsights.GetRecommendationPolicy:input_type -> proto.PolicyId
	24, // 59: proto.SecurityInsights.GetUpdateRecommendation:input_type -> proto.RecommendationFilter
	10, // 60: proto.SecurityInsights.GetAllComponents:input_type -> proto.ReleaseFilter
	29, // 61: proto.SecurityInsights.CompareReleaseVulnerabilities:input_type -> proto.ReleaseComparisonFilter
	39, // 62: proto.SecurityInsights.CreateRelease:output_type -> google.protobuf.Empty
	6,  // 63: proto.SecurityInsights.GetRelease:output_type -> proto.K8sReleaseMD
	7,  // 64: proto.SecurityInsights.GetAllReleases:output_type -> proto.K8sReleaseMDList
	39, // 65: proto.SecurityInsights.StoreReleaseSBOM:output_type -> google.protobuf.Empty
	39, // 66: proto.SecurityInsights.StoreReleaseComponent:output_type -> google.protobuf.Empty
	8,  // 67: proto.SecurityInsights.GetReleaseComponent:output_type -> proto.ReleaseComponents
	12, // 68: proto.SecurityInsights.GetReleaseSBOM:output_type -> proto.SBOM
	39, // 69: proto.SecurityInsights.StoreReleaseVulnerabilityReport:output_type -> google.protobuf.Empty
	39, // 70: proto.SecurityInsights.StoreCISReport:output_type -> google.protobuf.Empty
	15, // 71: proto.SecurityInsights.GetReleaseVulnerabilities:output_type -> proto.VulnerabilitiesResult
	16, // 72: proto.SecurityInsights.GetCISReport:output_type -> proto.CISReport
	39, // 73: proto.SecurityInsights.UpdateRecommendationPolicy:output_type -> google.protobuf.Empty
	28, // 74: proto.SecurityInsights.GetSummary:output_type -> proto.SecuritySummary
	20, // 75: proto.SecurityInsights.GetRecommendationPolicies:output_type -> proto.AllPoliciesResponse
	22, // 76: proto.SecurityInsights.GetRecommendationPolicy:output_type -> proto.PolicyDetails
	25, // 77: proto.SecurityInsights.GetUpdateRecommendation:output_type -> proto.UpdateRecommendations
	4,  // 78: proto.SecurityInsights.GetAllComponents:output_type -> proto.ComponentList
	30, // 79: proto.SecurityInsights.CompareReleaseVulnerabilities:output_type -> proto.VulnerabilityComparisonReport
	62, // [62:80] is the sub-list for method output_type
	44, // [44:62] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_security_insights_proto_init() }
func file_security_insights_proto_init() {
	if File_security_insights_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_security_insights_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Releases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SReleaseMD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SReleaseMDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseComponents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSBOM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBOM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilitySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilitiesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CISReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecommendations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendedVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCISRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecuritySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseComparisonFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityComparisonReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityDiscovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityComparisonSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_insights_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilitiesWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_security_insights_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_security_insights_proto_goTypes,
		DependencyIndexes: file_security_insights_proto_depIdxs,
		EnumInfos:         file_security_insights_proto_enumTypes,
		MessageInfos:      file_security_insights_proto_msgTypes,
	}.Build()
	File_security_insights_proto = out.File
	file_security_insights_proto_rawDesc = nil
	file_security_insights_proto_goTypes = nil
	file_security_insights_proto_depIdxs = nil
}
