// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dpai_postgres.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DpaiPostgresDeploymentMeta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresDeploymentMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresDeploymentMeta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresDeploymentMetaMultiError, or nil if none found.
func (m *DpaiPostgresDeploymentMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresDeploymentMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if all {
		switch v := interface{}(m.GetDeploymentStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresDeploymentMetaValidationError{
				field:  "DeploymentStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresDeploymentMetaMultiError(errors)
	}

	return nil
}

// DpaiPostgresDeploymentMetaMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresDeploymentMeta.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresDeploymentMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresDeploymentMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresDeploymentMetaMultiError) AllErrors() []error { return m }

// DpaiPostgresDeploymentMetaValidationError is the validation error returned
// by DpaiPostgresDeploymentMeta.Validate if the designated constraints aren't met.
type DpaiPostgresDeploymentMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresDeploymentMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresDeploymentMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresDeploymentMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresDeploymentMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresDeploymentMetaValidationError) ErrorName() string {
	return "DpaiPostgresDeploymentMetaValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresDeploymentMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresDeploymentMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresDeploymentMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresDeploymentMetaValidationError{}

// Validate checks the field values on DpaiPostgresAdminProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresAdminProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresAdminProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresAdminPropertiesMultiError, or nil if none found.
func (m *DpaiPostgresAdminProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresAdminProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminUsername

	// no validation rules for AdminPassword

	if all {
		switch v := interface{}(m.GetAdminPasswordSecretReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresAdminPropertiesValidationError{
					field:  "AdminPasswordSecretReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresAdminPropertiesValidationError{
					field:  "AdminPasswordSecretReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminPasswordSecretReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresAdminPropertiesValidationError{
				field:  "AdminPasswordSecretReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiPostgresAdminPropertiesMultiError(errors)
	}

	return nil
}

// DpaiPostgresAdminPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresAdminProperties.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresAdminPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresAdminPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresAdminPropertiesMultiError) AllErrors() []error { return m }

// DpaiPostgresAdminPropertiesValidationError is the validation error returned
// by DpaiPostgresAdminProperties.Validate if the designated constraints
// aren't met.
type DpaiPostgresAdminPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresAdminPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresAdminPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresAdminPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresAdminPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresAdminPropertiesValidationError) ErrorName() string {
	return "DpaiPostgresAdminPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresAdminPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresAdminProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresAdminPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresAdminPropertiesValidationError{}

// Validate checks the field values on DpaiPostgresSizePgPoolProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresSizePgPoolProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizePgPoolProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizePgPoolPropertiesMultiError, or nil if none found.
func (m *DpaiPostgresSizePgPoolProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizePgPoolProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfInstancesDefault

	// no validation rules for NumberOfInstancesMin

	// no validation rules for NumberOfInstancesMax

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuRequest

	// no validation rules for ResourceMemoryLimit

	// no validation rules for ResourceMemoryRequest

	if len(errors) > 0 {
		return DpaiPostgresSizePgPoolPropertiesMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizePgPoolPropertiesMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresSizePgPoolProperties.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresSizePgPoolPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizePgPoolPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizePgPoolPropertiesMultiError) AllErrors() []error { return m }

// DpaiPostgresSizePgPoolPropertiesValidationError is the validation error
// returned by DpaiPostgresSizePgPoolProperties.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizePgPoolPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizePgPoolPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizePgPoolPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizePgPoolPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizePgPoolPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizePgPoolPropertiesValidationError) ErrorName() string {
	return "DpaiPostgresSizePgPoolPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizePgPoolPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizePgPoolProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizePgPoolPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizePgPoolPropertiesValidationError{}

// Validate checks the field values on DpaiPostgresSizeDiskProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeDiskProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeDiskProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeDiskPropertiesMultiError, or nil if none found.
func (m *DpaiPostgresSizeDiskProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeDiskProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiskSizeInGbDefault

	// no validation rules for DiskSizeInGbMin

	// no validation rules for DiskSizeInGbMax

	// no validation rules for StorageClassName

	if len(errors) > 0 {
		return DpaiPostgresSizeDiskPropertiesMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeDiskPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeDiskProperties.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresSizeDiskPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeDiskPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeDiskPropertiesMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeDiskPropertiesValidationError is the validation error
// returned by DpaiPostgresSizeDiskProperties.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizeDiskPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeDiskPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeDiskPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeDiskPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeDiskPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeDiskPropertiesValidationError) ErrorName() string {
	return "DpaiPostgresSizeDiskPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeDiskPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeDiskProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeDiskPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeDiskPropertiesValidationError{}

// Validate checks the field values on DpaiPostgresSize with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSize with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeMultiError, or nil if none found.
func (m *DpaiPostgresSize) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for NumberOfInstancesDefault

	// no validation rules for NumberOfInstancesMin

	// no validation rules for NumberOfInstancesMax

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuRequest

	// no validation rules for ResourceMemoryLimit

	// no validation rules for ResourceMemoryRequest

	if all {
		switch v := interface{}(m.GetPgPoolProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresSizeValidationError{
					field:  "PgPoolProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresSizeValidationError{
					field:  "PgPoolProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgPoolProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresSizeValidationError{
				field:  "PgPoolProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiskProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresSizeValidationError{
					field:  "DiskProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresSizeValidationError{
					field:  "DiskProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiskProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresSizeValidationError{
				field:  "DiskProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresSizeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresSizeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresSizeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiPostgresSizeMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeMultiError is an error wrapping multiple validation errors
// returned by DpaiPostgresSize.ValidateAll() if the designated constraints
// aren't met.
type DpaiPostgresSizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeValidationError is the validation error returned by
// DpaiPostgresSize.Validate if the designated constraints aren't met.
type DpaiPostgresSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeValidationError) ErrorName() string { return "DpaiPostgresSizeValidationError" }

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeValidationError{}

// Validate checks the field values on DpaiPostgresSizeCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeCreateRequestMultiError, or nil if none found.
func (m *DpaiPostgresSizeCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for NumberOfInstancesDefault

	// no validation rules for NumberOfInstancesMin

	// no validation rules for NumberOfInstancesMax

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuRequest

	// no validation rules for ResourceMemoryLimit

	// no validation rules for ResourceMemoryRequest

	if all {
		switch v := interface{}(m.GetPgPoolProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresSizeCreateRequestValidationError{
					field:  "PgPoolProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresSizeCreateRequestValidationError{
					field:  "PgPoolProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgPoolProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresSizeCreateRequestValidationError{
				field:  "PgPoolProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiskProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresSizeCreateRequestValidationError{
					field:  "DiskProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresSizeCreateRequestValidationError{
					field:  "DiskProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiskProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresSizeCreateRequestValidationError{
				field:  "DiskProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresSizeCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresSizeCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeCreateRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeCreateRequestValidationError is the validation error
// returned by DpaiPostgresSizeCreateRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizeCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeCreateRequestValidationError) ErrorName() string {
	return "DpaiPostgresSizeCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeCreateRequestValidationError{}

// Validate checks the field values on DpaiPostgresSizeListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeListRequestMultiError, or nil if none found.
func (m *DpaiPostgresSizeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresSizeListRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeListRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeListRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresSizeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeListRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeListRequestValidationError is the validation error returned
// by DpaiPostgresSizeListRequest.Validate if the designated constraints
// aren't met.
type DpaiPostgresSizeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeListRequestValidationError) ErrorName() string {
	return "DpaiPostgresSizeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeListRequestValidationError{}

// Validate checks the field values on DpaiPostgresSizeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeListResponseMultiError, or nil if none found.
func (m *DpaiPostgresSizeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiPostgresSizeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiPostgresSizeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiPostgresSizeListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiPostgresSizeListResponseMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeListResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresSizeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeListResponseMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeListResponseValidationError is the validation error returned
// by DpaiPostgresSizeListResponse.Validate if the designated constraints
// aren't met.
type DpaiPostgresSizeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeListResponseValidationError) ErrorName() string {
	return "DpaiPostgresSizeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeListResponseValidationError{}

// Validate checks the field values on DpaiPostgresSizeGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeGetByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeGetByIdRequestMultiError, or nil if none found.
func (m *DpaiPostgresSizeGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresSizeGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeGetByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresSizeGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeGetByIdRequestValidationError is the validation error
// returned by DpaiPostgresSizeGetByIdRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizeGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeGetByIdRequestValidationError) ErrorName() string {
	return "DpaiPostgresSizeGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeGetByIdRequestValidationError{}

// Validate checks the field values on DpaiPostgresSizeGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresSizeGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeGetByNameRequestMultiError, or nil if none found.
func (m *DpaiPostgresSizeGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresSizeGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresSizeGetByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresSizeGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeGetByNameRequestValidationError is the validation error
// returned by DpaiPostgresSizeGetByNameRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizeGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeGetByNameRequestValidationError) ErrorName() string {
	return "DpaiPostgresSizeGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeGetByNameRequestValidationError{}

// Validate checks the field values on DpaiPostgresSizeUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeUpdateRequestMultiError, or nil if none found.
func (m *DpaiPostgresSizeUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for NumberOfInstancesDefault

	// no validation rules for NumberOfInstancesMin

	// no validation rules for NumberOfInstancesMax

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuRequest

	// no validation rules for ResourceMemoryLimit

	// no validation rules for ResourceMemoryRequest

	if all {
		switch v := interface{}(m.GetPgPoolProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresSizeUpdateRequestValidationError{
					field:  "PgPoolProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresSizeUpdateRequestValidationError{
					field:  "PgPoolProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgPoolProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresSizeUpdateRequestValidationError{
				field:  "PgPoolProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiskProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresSizeUpdateRequestValidationError{
					field:  "DiskProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresSizeUpdateRequestValidationError{
					field:  "DiskProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiskProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresSizeUpdateRequestValidationError{
				field:  "DiskProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresSizeUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresSizeUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeUpdateRequestValidationError is the validation error
// returned by DpaiPostgresSizeUpdateRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizeUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeUpdateRequestValidationError) ErrorName() string {
	return "DpaiPostgresSizeUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeUpdateRequestValidationError{}

// Validate checks the field values on DpaiPostgresSizeDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeDeleteRequestMultiError, or nil if none found.
func (m *DpaiPostgresSizeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresSizeDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresSizeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeDeleteRequestValidationError is the validation error
// returned by DpaiPostgresSizeDeleteRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeDeleteRequestValidationError) ErrorName() string {
	return "DpaiPostgresSizeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeDeleteRequestValidationError{}

// Validate checks the field values on DpaiPostgresSizeDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizeDeleteResponseMultiError, or nil if none found.
func (m *DpaiPostgresSizeDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiPostgresSizeDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizeDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresSizeDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizeDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizeDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiPostgresSizeDeleteResponseValidationError is the validation error
// returned by DpaiPostgresSizeDeleteResponse.Validate if the designated
// constraints aren't met.
type DpaiPostgresSizeDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizeDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizeDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizeDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizeDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizeDeleteResponseValidationError) ErrorName() string {
	return "DpaiPostgresSizeDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizeDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizeDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizeDeleteResponseValidationError{}

// Validate checks the field values on DpaiPostgresVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionMultiError, or nil if none found.
func (m *DpaiPostgresVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for PostgresVersion

	// no validation rules for ImageReference

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresVersionValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresVersionValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresVersionValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackwardCompatibleFrom

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresVersionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresVersionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresVersionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiPostgresVersionMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionMultiError is an error wrapping multiple validation
// errors returned by DpaiPostgresVersion.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionValidationError is the validation error returned by
// DpaiPostgresVersion.Validate if the designated constraints aren't met.
type DpaiPostgresVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionValidationError) ErrorName() string {
	return "DpaiPostgresVersionValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionValidationError{}

// Validate checks the field values on DpaiPostgresVersionCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresVersionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionCreateRequestMultiError, or nil if none found.
func (m *DpaiPostgresVersionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for PostgresVersion

	// no validation rules for ImageReference

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresVersionCreateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresVersionCreateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresVersionCreateRequestValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackwardCompatibleFrom

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresVersionCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresVersionCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresVersionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionCreateRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionCreateRequestValidationError is the validation error
// returned by DpaiPostgresVersionCreateRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionCreateRequestValidationError) ErrorName() string {
	return "DpaiPostgresVersionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionCreateRequestValidationError{}

// Validate checks the field values on DpaiPostgresVersionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresVersionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionListRequestMultiError, or nil if none found.
func (m *DpaiPostgresVersionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresVersionListRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionListRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresVersionListRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresVersionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionListRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionListRequestValidationError is the validation error
// returned by DpaiPostgresVersionListRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionListRequestValidationError) ErrorName() string {
	return "DpaiPostgresVersionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionListRequestValidationError{}

// Validate checks the field values on DpaiPostgresVersionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresVersionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionListResponseMultiError, or nil if none found.
func (m *DpaiPostgresVersionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiPostgresVersionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiPostgresVersionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiPostgresVersionListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiPostgresVersionListResponseMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresVersionListResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresVersionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionListResponseMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionListResponseValidationError is the validation error
// returned by DpaiPostgresVersionListResponse.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionListResponseValidationError) ErrorName() string {
	return "DpaiPostgresVersionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionListResponseValidationError{}

// Validate checks the field values on DpaiPostgresVersionGetByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresVersionGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionGetByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionGetByIdRequestMultiError, or nil if none found.
func (m *DpaiPostgresVersionGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresVersionGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresVersionGetByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresVersionGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionGetByIdRequestValidationError is the validation error
// returned by DpaiPostgresVersionGetByIdRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionGetByIdRequestValidationError) ErrorName() string {
	return "DpaiPostgresVersionGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionGetByIdRequestValidationError{}

// Validate checks the field values on DpaiPostgresVersionGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresVersionGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionGetByNameRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionGetByNameRequestMultiError, or nil if none found.
func (m *DpaiPostgresVersionGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresVersionGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresVersionGetByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresVersionGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionGetByNameRequestValidationError is the validation error
// returned by DpaiPostgresVersionGetByNameRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionGetByNameRequestValidationError) ErrorName() string {
	return "DpaiPostgresVersionGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionGetByNameRequestValidationError{}

// Validate checks the field values on DpaiPostgresVersionUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresVersionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionUpdateRequestMultiError, or nil if none found.
func (m *DpaiPostgresVersionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for ImageReference

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresVersionUpdateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresVersionUpdateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresVersionUpdateRequestValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackwardCompatibleFrom

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresVersionUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresVersionUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresVersionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionUpdateRequestValidationError is the validation error
// returned by DpaiPostgresVersionUpdateRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionUpdateRequestValidationError) ErrorName() string {
	return "DpaiPostgresVersionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionUpdateRequestValidationError{}

// Validate checks the field values on DpaiPostgresVersionDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresVersionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionDeleteRequestMultiError, or nil if none found.
func (m *DpaiPostgresVersionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresVersionDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresVersionDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresVersionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionDeleteRequestValidationError is the validation error
// returned by DpaiPostgresVersionDeleteRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionDeleteRequestValidationError) ErrorName() string {
	return "DpaiPostgresVersionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionDeleteRequestValidationError{}

// Validate checks the field values on DpaiPostgresVersionDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiPostgresVersionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresVersionDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DpaiPostgresVersionDeleteResponseMultiError, or nil if none found.
func (m *DpaiPostgresVersionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresVersionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiPostgresVersionDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiPostgresVersionDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// DpaiPostgresVersionDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresVersionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresVersionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresVersionDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiPostgresVersionDeleteResponseValidationError is the validation error
// returned by DpaiPostgresVersionDeleteResponse.Validate if the designated
// constraints aren't met.
type DpaiPostgresVersionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresVersionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresVersionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresVersionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresVersionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresVersionDeleteResponseValidationError) ErrorName() string {
	return "DpaiPostgresVersionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresVersionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresVersionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresVersionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresVersionDeleteResponseValidationError{}

// Validate checks the field values on DpaiPostgresSizeProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresSizeProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresSizeProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresSizePropertiesMultiError, or nil if none found.
func (m *DpaiPostgresSizeProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresSizeProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SizeId

	// no validation rules for NumberOfInstances

	// no validation rules for NumberOfPgPoolInstances

	// no validation rules for DiskSizeInGb

	if len(errors) > 0 {
		return DpaiPostgresSizePropertiesMultiError(errors)
	}

	return nil
}

// DpaiPostgresSizePropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresSizeProperties.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresSizePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresSizePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresSizePropertiesMultiError) AllErrors() []error { return m }

// DpaiPostgresSizePropertiesValidationError is the validation error returned
// by DpaiPostgresSizeProperties.Validate if the designated constraints aren't met.
type DpaiPostgresSizePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresSizePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresSizePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresSizePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresSizePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresSizePropertiesValidationError) ErrorName() string {
	return "DpaiPostgresSizePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresSizePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresSizeProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresSizePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresSizePropertiesValidationError{}

// Validate checks the field values on DpaiPostgresOptionalProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresOptionalProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresOptionalProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresOptionalPropertiesMultiError, or nil if none found.
func (m *DpaiPostgresOptionalProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresOptionalProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InitialDatabaseName

	if len(errors) > 0 {
		return DpaiPostgresOptionalPropertiesMultiError(errors)
	}

	return nil
}

// DpaiPostgresOptionalPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresOptionalProperties.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresOptionalPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresOptionalPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresOptionalPropertiesMultiError) AllErrors() []error { return m }

// DpaiPostgresOptionalPropertiesValidationError is the validation error
// returned by DpaiPostgresOptionalProperties.Validate if the designated
// constraints aren't met.
type DpaiPostgresOptionalPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresOptionalPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresOptionalPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresOptionalPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresOptionalPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresOptionalPropertiesValidationError) ErrorName() string {
	return "DpaiPostgresOptionalPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresOptionalPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresOptionalProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresOptionalPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresOptionalPropertiesValidationError{}

// Validate checks the field values on DpaiPostgres with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgres) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgres with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiPostgresMultiError, or
// nil if none found.
func (m *DpaiPostgres) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgres) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkspaceId

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for VersionId

	if all {
		switch v := interface{}(m.GetSizeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSizeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresValidationError{
				field:  "SizeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptionalProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "OptionalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "OptionalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionalProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresValidationError{
				field:  "OptionalProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAdminProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "AdminProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "AdminProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresValidationError{
				field:  "AdminProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AdvanceConfiguration

	// no validation rules for Tags

	// no validation rules for ServerUrl

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeploymentMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresValidationError{
				field:  "DeploymentMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiPostgresMultiError(errors)
	}

	return nil
}

// DpaiPostgresMultiError is an error wrapping multiple validation errors
// returned by DpaiPostgres.ValidateAll() if the designated constraints aren't met.
type DpaiPostgresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresMultiError) AllErrors() []error { return m }

// DpaiPostgresValidationError is the validation error returned by
// DpaiPostgres.Validate if the designated constraints aren't met.
type DpaiPostgresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresValidationError) ErrorName() string { return "DpaiPostgresValidationError" }

// Error satisfies the builtin error interface
func (e DpaiPostgresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgres.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresValidationError{}

// Validate checks the field values on DpaiPostgresCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresCreateRequestMultiError, or nil if none found.
func (m *DpaiPostgresCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkspaceId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for VersionId

	if all {
		switch v := interface{}(m.GetSizeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresCreateRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresCreateRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSizeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresCreateRequestValidationError{
				field:  "SizeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptionalProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresCreateRequestValidationError{
					field:  "OptionalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresCreateRequestValidationError{
					field:  "OptionalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionalProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresCreateRequestValidationError{
				field:  "OptionalProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAdminProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresCreateRequestValidationError{
					field:  "AdminProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresCreateRequestValidationError{
					field:  "AdminProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresCreateRequestValidationError{
				field:  "AdminProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AdvanceConfiguration

	// no validation rules for Tags

	// no validation rules for CreatedBy

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresCreateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiPostgresCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiPostgresCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresCreateRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresCreateRequestValidationError is the validation error returned by
// DpaiPostgresCreateRequest.Validate if the designated constraints aren't met.
type DpaiPostgresCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresCreateRequestValidationError) ErrorName() string {
	return "DpaiPostgresCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresCreateRequestValidationError{}

// Validate checks the field values on DpaiPostgresListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresListRequestMultiError, or nil if none found.
func (m *DpaiPostgresListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresListRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresListRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiPostgresListRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresListRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresListRequestValidationError is the validation error returned by
// DpaiPostgresListRequest.Validate if the designated constraints aren't met.
type DpaiPostgresListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresListRequestValidationError) ErrorName() string {
	return "DpaiPostgresListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresListRequestValidationError{}

// Validate checks the field values on DpaiPostgresListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresListResponseMultiError, or nil if none found.
func (m *DpaiPostgresListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiPostgresListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiPostgresListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiPostgresListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiPostgresListResponseMultiError(errors)
	}

	return nil
}

// DpaiPostgresListResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiPostgresListResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiPostgresListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresListResponseMultiError) AllErrors() []error { return m }

// DpaiPostgresListResponseValidationError is the validation error returned by
// DpaiPostgresListResponse.Validate if the designated constraints aren't met.
type DpaiPostgresListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresListResponseValidationError) ErrorName() string {
	return "DpaiPostgresListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresListResponseValidationError{}

// Validate checks the field values on DpaiPostgresGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresGetByIdRequestMultiError, or nil if none found.
func (m *DpaiPostgresGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresGetByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresGetByIdRequestValidationError is the validation error returned
// by DpaiPostgresGetByIdRequest.Validate if the designated constraints aren't met.
type DpaiPostgresGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresGetByIdRequestValidationError) ErrorName() string {
	return "DpaiPostgresGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresGetByIdRequestValidationError{}

// Validate checks the field values on DpaiPostgresGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresGetByNameRequestMultiError, or nil if none found.
func (m *DpaiPostgresGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresGetByNameRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresGetByNameRequestValidationError is the validation error returned
// by DpaiPostgresGetByNameRequest.Validate if the designated constraints
// aren't met.
type DpaiPostgresGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresGetByNameRequestValidationError) ErrorName() string {
	return "DpaiPostgresGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresGetByNameRequestValidationError{}

// Validate checks the field values on DpaiPostgresDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresDeleteRequestMultiError, or nil if none found.
func (m *DpaiPostgresDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiPostgresDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiPostgresDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresDeleteRequestValidationError is the validation error returned by
// DpaiPostgresDeleteRequest.Validate if the designated constraints aren't met.
type DpaiPostgresDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresDeleteRequestValidationError) ErrorName() string {
	return "DpaiPostgresDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresDeleteRequestValidationError{}

// Validate checks the field values on DpaiPostgresUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresUpdateRequestMultiError, or nil if none found.
func (m *DpaiPostgresUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for Tags

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiPostgresUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiPostgresUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresUpdateRequestValidationError is the validation error returned by
// DpaiPostgresUpdateRequest.Validate if the designated constraints aren't met.
type DpaiPostgresUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresUpdateRequestValidationError) ErrorName() string {
	return "DpaiPostgresUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresUpdateRequestValidationError{}

// Validate checks the field values on DpaiPostgresRestartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresRestartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresRestartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresRestartRequestMultiError, or nil if none found.
func (m *DpaiPostgresRestartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresRestartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresRestartRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresRestartRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresRestartRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresRestartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresRestartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresRestartRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresRestartRequestValidationError is the validation error returned
// by DpaiPostgresRestartRequest.Validate if the designated constraints aren't met.
type DpaiPostgresRestartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresRestartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresRestartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresRestartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresRestartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresRestartRequestValidationError) ErrorName() string {
	return "DpaiPostgresRestartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresRestartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresRestartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresRestartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresRestartRequestValidationError{}

// Validate checks the field values on DpaiPostgresResizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresResizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresResizeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresResizeRequestMultiError, or nil if none found.
func (m *DpaiPostgresResizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresResizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSizeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiPostgresResizeRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiPostgresResizeRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSizeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiPostgresResizeRequestValidationError{
				field:  "SizeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresResizeRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresResizeRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiPostgresResizeRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiPostgresResizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresResizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresResizeRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresResizeRequestValidationError is the validation error returned by
// DpaiPostgresResizeRequest.Validate if the designated constraints aren't met.
type DpaiPostgresResizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresResizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresResizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresResizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresResizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresResizeRequestValidationError) ErrorName() string {
	return "DpaiPostgresResizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresResizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresResizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresResizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresResizeRequestValidationError{}

// Validate checks the field values on DpaiPostgresListUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresListUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresListUpgradeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiPostgresListUpgradeRequestMultiError, or nil if none found.
func (m *DpaiPostgresListUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresListUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresListUpgradeRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresListUpgradeRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresListUpgradeRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiPostgresListUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresListUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresListUpgradeRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresListUpgradeRequestValidationError is the validation error
// returned by DpaiPostgresListUpgradeRequest.Validate if the designated
// constraints aren't met.
type DpaiPostgresListUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresListUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresListUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresListUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresListUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresListUpgradeRequestValidationError) ErrorName() string {
	return "DpaiPostgresListUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresListUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresListUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresListUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresListUpgradeRequestValidationError{}

// Validate checks the field values on DpaiPostgresUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiPostgresUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiPostgresUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiPostgresUpgradeRequestMultiError, or nil if none found.
func (m *DpaiPostgresUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiPostgresUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for VersionId

	// no validation rules for WorkspaceId

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiPostgresUpgradeRequestMultiError(errors)
	}

	return nil
}

// DpaiPostgresUpgradeRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiPostgresUpgradeRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiPostgresUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiPostgresUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiPostgresUpgradeRequestMultiError) AllErrors() []error { return m }

// DpaiPostgresUpgradeRequestValidationError is the validation error returned
// by DpaiPostgresUpgradeRequest.Validate if the designated constraints aren't met.
type DpaiPostgresUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiPostgresUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiPostgresUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiPostgresUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiPostgresUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiPostgresUpgradeRequestValidationError) ErrorName() string {
	return "DpaiPostgresUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiPostgresUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiPostgresUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiPostgresUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiPostgresUpgradeRequestValidationError{}
