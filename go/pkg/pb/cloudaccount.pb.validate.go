// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cloudaccount.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CloudAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloudAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloudAccountMultiError, or
// nil if none found.
func (m *CloudAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Tid

	// no validation rules for Oid

	// no validation rules for ParentId

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudAccountValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Owner

	// no validation rules for Type

	// no validation rules for BillingAccountCreated

	// no validation rules for Enrolled

	// no validation rules for LowCredits

	if all {
		switch v := interface{}(m.GetCreditsDepleted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudAccountValidationError{
					field:  "CreditsDepleted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudAccountValidationError{
					field:  "CreditsDepleted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreditsDepleted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudAccountValidationError{
				field:  "CreditsDepleted",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TerminatePaidServices

	// no validation rules for TerminateMessageQueued

	// no validation rules for Delinquent

	// no validation rules for PaidServicesAllowed

	// no validation rules for PersonId

	// no validation rules for CountryCode

	// no validation rules for Restricted

	// no validation rules for AdminName

	if all {
		switch v := interface{}(m.GetAccessLimitedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudAccountValidationError{
					field:  "AccessLimitedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudAccountValidationError{
					field:  "AccessLimitedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessLimitedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudAccountValidationError{
				field:  "AccessLimitedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TradeRestricted

	// no validation rules for UpgradedToPremium

	// no validation rules for UpgradedToEnterprise

	if len(errors) > 0 {
		return CloudAccountMultiError(errors)
	}

	return nil
}

// CloudAccountMultiError is an error wrapping multiple validation errors
// returned by CloudAccount.ValidateAll() if the designated constraints aren't met.
type CloudAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountMultiError) AllErrors() []error { return m }

// CloudAccountValidationError is the validation error returned by
// CloudAccount.Validate if the designated constraints aren't met.
type CloudAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountValidationError) ErrorName() string { return "CloudAccountValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountValidationError{}

// Validate checks the field values on CloudAccountCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountCreate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountCreateMultiError, or nil if none found.
func (m *CloudAccountCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	// no validation rules for Tid

	// no validation rules for Oid

	// no validation rules for Name

	// no validation rules for Owner

	// no validation rules for Type

	// no validation rules for PersonId

	// no validation rules for CountryCode

	// no validation rules for Restricted

	// no validation rules for AdminName

	if all {
		switch v := interface{}(m.GetAccessLimitedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudAccountCreateValidationError{
					field:  "AccessLimitedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudAccountCreateValidationError{
					field:  "AccessLimitedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessLimitedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudAccountCreateValidationError{
				field:  "AccessLimitedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.BillingAccountCreated != nil {
		// no validation rules for BillingAccountCreated
	}

	if m.Enrolled != nil {
		// no validation rules for Enrolled
	}

	if m.LowCredits != nil {
		// no validation rules for LowCredits
	}

	if m.CreditsDepleted != nil {

		if all {
			switch v := interface{}(m.GetCreditsDepleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountCreateValidationError{
						field:  "CreditsDepleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountCreateValidationError{
						field:  "CreditsDepleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreditsDepleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountCreateValidationError{
					field:  "CreditsDepleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TerminatePaidServices != nil {
		// no validation rules for TerminatePaidServices
	}

	if m.TerminateMessageQueued != nil {
		// no validation rules for TerminateMessageQueued
	}

	if m.Delinquent != nil {
		// no validation rules for Delinquent
	}

	if m.PaidServicesAllowed != nil {
		// no validation rules for PaidServicesAllowed
	}

	if m.TradeRestricted != nil {
		// no validation rules for TradeRestricted
	}

	if m.UpgradedToPremium != nil {
		// no validation rules for UpgradedToPremium
	}

	if m.UpgradedToEnterprise != nil {
		// no validation rules for UpgradedToEnterprise
	}

	if len(errors) > 0 {
		return CloudAccountCreateMultiError(errors)
	}

	return nil
}

// CloudAccountCreateMultiError is an error wrapping multiple validation errors
// returned by CloudAccountCreate.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountCreateMultiError) AllErrors() []error { return m }

// CloudAccountCreateValidationError is the validation error returned by
// CloudAccountCreate.Validate if the designated constraints aren't met.
type CloudAccountCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountCreateValidationError) ErrorName() string {
	return "CloudAccountCreateValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountCreateValidationError{}

// Validate checks the field values on CloudAccountFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountFilterMultiError, or nil if none found.
func (m *CloudAccountFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Tid != nil {
		// no validation rules for Tid
	}

	if m.Oid != nil {
		// no validation rules for Oid
	}

	if m.Created != nil {

		if all {
			switch v := interface{}(m.GetCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountFilterValidationError{
						field:  "Created",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountFilterValidationError{
						field:  "Created",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountFilterValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Owner != nil {
		// no validation rules for Owner
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.BillingAccountCreated != nil {
		// no validation rules for BillingAccountCreated
	}

	if m.Enrolled != nil {
		// no validation rules for Enrolled
	}

	if m.LowCredits != nil {
		// no validation rules for LowCredits
	}

	if m.CreditsDepleted != nil {

		if all {
			switch v := interface{}(m.GetCreditsDepleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountFilterValidationError{
						field:  "CreditsDepleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountFilterValidationError{
						field:  "CreditsDepleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreditsDepleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountFilterValidationError{
					field:  "CreditsDepleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TerminatePaidServices != nil {
		// no validation rules for TerminatePaidServices
	}

	if m.TerminateMessageQueued != nil {
		// no validation rules for TerminateMessageQueued
	}

	if m.PersonId != nil {
		// no validation rules for PersonId
	}

	if m.CountryCode != nil {
		// no validation rules for CountryCode
	}

	if m.PaidServicesAllowed != nil {
		// no validation rules for PaidServicesAllowed
	}

	if m.Restricted != nil {
		// no validation rules for Restricted
	}

	if m.AdminName != nil {
		// no validation rules for AdminName
	}

	if m.AccessLimitedTimestamp != nil {

		if all {
			switch v := interface{}(m.GetAccessLimitedTimestamp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountFilterValidationError{
						field:  "AccessLimitedTimestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountFilterValidationError{
						field:  "AccessLimitedTimestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccessLimitedTimestamp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountFilterValidationError{
					field:  "AccessLimitedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TradeRestricted != nil {
		// no validation rules for TradeRestricted
	}

	if m.UpgradedToPremium != nil {
		// no validation rules for UpgradedToPremium
	}

	if m.UpgradedToEnterprise != nil {
		// no validation rules for UpgradedToEnterprise
	}

	if len(errors) > 0 {
		return CloudAccountFilterMultiError(errors)
	}

	return nil
}

// CloudAccountFilterMultiError is an error wrapping multiple validation errors
// returned by CloudAccountFilter.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountFilterMultiError) AllErrors() []error { return m }

// CloudAccountFilterValidationError is the validation error returned by
// CloudAccountFilter.Validate if the designated constraints aren't met.
type CloudAccountFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountFilterValidationError) ErrorName() string {
	return "CloudAccountFilterValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountFilterValidationError{}

// Validate checks the field values on CloudAccountUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountUpdateMultiError, or nil if none found.
func (m *CloudAccountUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Tid != nil {
		// no validation rules for Tid
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Owner != nil {
		// no validation rules for Owner
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.BillingAccountCreated != nil {
		// no validation rules for BillingAccountCreated
	}

	if m.Enrolled != nil {
		// no validation rules for Enrolled
	}

	if m.LowCredits != nil {
		// no validation rules for LowCredits
	}

	if m.CreditsDepleted != nil {

		if all {
			switch v := interface{}(m.GetCreditsDepleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountUpdateValidationError{
						field:  "CreditsDepleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountUpdateValidationError{
						field:  "CreditsDepleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreditsDepleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountUpdateValidationError{
					field:  "CreditsDepleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TerminatePaidServices != nil {
		// no validation rules for TerminatePaidServices
	}

	if m.TerminateMessageQueued != nil {
		// no validation rules for TerminateMessageQueued
	}

	if m.Delinquent != nil {
		// no validation rules for Delinquent
	}

	if m.PaidServicesAllowed != nil {
		// no validation rules for PaidServicesAllowed
	}

	if m.PersonId != nil {
		// no validation rules for PersonId
	}

	if m.CountryCode != nil {
		// no validation rules for CountryCode
	}

	if m.Restricted != nil {
		// no validation rules for Restricted
	}

	if m.AdminName != nil {
		// no validation rules for AdminName
	}

	if m.AccessLimitedTimestamp != nil {

		if all {
			switch v := interface{}(m.GetAccessLimitedTimestamp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudAccountUpdateValidationError{
						field:  "AccessLimitedTimestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudAccountUpdateValidationError{
						field:  "AccessLimitedTimestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccessLimitedTimestamp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudAccountUpdateValidationError{
					field:  "AccessLimitedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TradeRestricted != nil {
		// no validation rules for TradeRestricted
	}

	if m.UpgradedToPremium != nil {
		// no validation rules for UpgradedToPremium
	}

	if m.UpgradedToEnterprise != nil {
		// no validation rules for UpgradedToEnterprise
	}

	if len(errors) > 0 {
		return CloudAccountUpdateMultiError(errors)
	}

	return nil
}

// CloudAccountUpdateMultiError is an error wrapping multiple validation errors
// returned by CloudAccountUpdate.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountUpdateMultiError) AllErrors() []error { return m }

// CloudAccountUpdateValidationError is the validation error returned by
// CloudAccountUpdate.Validate if the designated constraints aren't met.
type CloudAccountUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountUpdateValidationError) ErrorName() string {
	return "CloudAccountUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountUpdateValidationError{}

// Validate checks the field values on CloudAccountId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloudAccountId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloudAccountIdMultiError,
// or nil if none found.
func (m *CloudAccountId) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CloudAccountIdMultiError(errors)
	}

	return nil
}

// CloudAccountIdMultiError is an error wrapping multiple validation errors
// returned by CloudAccountId.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountIdMultiError) AllErrors() []error { return m }

// CloudAccountIdValidationError is the validation error returned by
// CloudAccountId.Validate if the designated constraints aren't met.
type CloudAccountIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountIdValidationError) ErrorName() string { return "CloudAccountIdValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountIdValidationError{}

// Validate checks the field values on CloudAccountOid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountOid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountOid with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountOidMultiError, or nil if none found.
func (m *CloudAccountOid) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountOid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tid

	// no validation rules for Oid

	if len(errors) > 0 {
		return CloudAccountOidMultiError(errors)
	}

	return nil
}

// CloudAccountOidMultiError is an error wrapping multiple validation errors
// returned by CloudAccountOid.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountOidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountOidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountOidMultiError) AllErrors() []error { return m }

// CloudAccountOidValidationError is the validation error returned by
// CloudAccountOid.Validate if the designated constraints aren't met.
type CloudAccountOidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountOidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountOidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountOidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountOidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountOidValidationError) ErrorName() string { return "CloudAccountOidValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountOidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountOid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountOidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountOidValidationError{}

// Validate checks the field values on CloudAccountName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountNameMultiError, or nil if none found.
func (m *CloudAccountName) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CloudAccountNameMultiError(errors)
	}

	return nil
}

// CloudAccountNameMultiError is an error wrapping multiple validation errors
// returned by CloudAccountName.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountNameMultiError) AllErrors() []error { return m }

// CloudAccountNameValidationError is the validation error returned by
// CloudAccountName.Validate if the designated constraints aren't met.
type CloudAccountNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountNameValidationError) ErrorName() string { return "CloudAccountNameValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountNameValidationError{}

// Validate checks the field values on CloudAccountPersonId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountPersonId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountPersonId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountPersonIdMultiError, or nil if none found.
func (m *CloudAccountPersonId) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountPersonId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Personid

	if len(errors) > 0 {
		return CloudAccountPersonIdMultiError(errors)
	}

	return nil
}

// CloudAccountPersonIdMultiError is an error wrapping multiple validation
// errors returned by CloudAccountPersonId.ValidateAll() if the designated
// constraints aren't met.
type CloudAccountPersonIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountPersonIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountPersonIdMultiError) AllErrors() []error { return m }

// CloudAccountPersonIdValidationError is the validation error returned by
// CloudAccountPersonId.Validate if the designated constraints aren't met.
type CloudAccountPersonIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountPersonIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountPersonIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountPersonIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountPersonIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountPersonIdValidationError) ErrorName() string {
	return "CloudAccountPersonIdValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountPersonIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountPersonId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountPersonIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountPersonIdValidationError{}

// Validate checks the field values on AccountPerson with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountPerson) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountPerson with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountPersonMultiError, or
// nil if none found.
func (m *AccountPerson) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountPerson) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PersonId

	if len(errors) > 0 {
		return AccountPersonMultiError(errors)
	}

	return nil
}

// AccountPersonMultiError is an error wrapping multiple validation errors
// returned by AccountPerson.ValidateAll() if the designated constraints
// aren't met.
type AccountPersonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountPersonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountPersonMultiError) AllErrors() []error { return m }

// AccountPersonValidationError is the validation error returned by
// AccountPerson.Validate if the designated constraints aren't met.
type AccountPersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountPersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountPersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountPersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountPersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountPersonValidationError) ErrorName() string { return "AccountPersonValidationError" }

// Error satisfies the builtin error interface
func (e AccountPersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountPerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountPersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountPersonValidationError{}

// Validate checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountUserMultiError, or
// nil if none found.
func (m *AccountUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if len(errors) > 0 {
		return AccountUserMultiError(errors)
	}

	return nil
}

// AccountUserMultiError is an error wrapping multiple validation errors
// returned by AccountUser.ValidateAll() if the designated constraints aren't met.
type AccountUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUserMultiError) AllErrors() []error { return m }

// AccountUserValidationError is the validation error returned by
// AccountUser.Validate if the designated constraints aren't met.
type AccountUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUserValidationError) ErrorName() string { return "AccountUserValidationError" }

// Error satisfies the builtin error interface
func (e AccountUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUserValidationError{}

// Validate checks the field values on AccountClient with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountClient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountClient with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountClientMultiError, or
// nil if none found.
func (m *AccountClient) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountClient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if m.CloudAccountId != nil {
		// no validation rules for CloudAccountId
	}

	if len(errors) > 0 {
		return AccountClientMultiError(errors)
	}

	return nil
}

// AccountClientMultiError is an error wrapping multiple validation errors
// returned by AccountClient.ValidateAll() if the designated constraints
// aren't met.
type AccountClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountClientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountClientMultiError) AllErrors() []error { return m }

// AccountClientValidationError is the validation error returned by
// AccountClient.Validate if the designated constraints aren't met.
type AccountClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountClientValidationError) ErrorName() string { return "AccountClientValidationError" }

// Error satisfies the builtin error interface
func (e AccountClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountClientValidationError{}

// Validate checks the field values on RelatedAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RelatedAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelatedAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelatedAccountMultiError,
// or nil if none found.
func (m *RelatedAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *RelatedAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Owner

	if len(errors) > 0 {
		return RelatedAccountMultiError(errors)
	}

	return nil
}

// RelatedAccountMultiError is an error wrapping multiple validation errors
// returned by RelatedAccount.ValidateAll() if the designated constraints
// aren't met.
type RelatedAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelatedAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelatedAccountMultiError) AllErrors() []error { return m }

// RelatedAccountValidationError is the validation error returned by
// RelatedAccount.Validate if the designated constraints aren't met.
type RelatedAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelatedAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelatedAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelatedAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelatedAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelatedAccountValidationError) ErrorName() string { return "RelatedAccountValidationError" }

// Error satisfies the builtin error interface
func (e RelatedAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelatedAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelatedAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelatedAccountValidationError{}

// Validate checks the field values on RelatedAccounts with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelatedAccounts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelatedAccounts with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelatedAccountsMultiError, or nil if none found.
func (m *RelatedAccounts) ValidateAll() error {
	return m.validate(true)
}

func (m *RelatedAccounts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelatedAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelatedAccountsValidationError{
						field:  fmt.Sprintf("RelatedAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelatedAccountsValidationError{
						field:  fmt.Sprintf("RelatedAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelatedAccountsValidationError{
					field:  fmt.Sprintf("RelatedAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RelatedAccountsMultiError(errors)
	}

	return nil
}

// RelatedAccountsMultiError is an error wrapping multiple validation errors
// returned by RelatedAccounts.ValidateAll() if the designated constraints
// aren't met.
type RelatedAccountsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelatedAccountsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelatedAccountsMultiError) AllErrors() []error { return m }

// RelatedAccountsValidationError is the validation error returned by
// RelatedAccounts.Validate if the designated constraints aren't met.
type RelatedAccountsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelatedAccountsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelatedAccountsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelatedAccountsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelatedAccountsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelatedAccountsValidationError) ErrorName() string { return "RelatedAccountsValidationError" }

// Error satisfies the builtin error interface
func (e RelatedAccountsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelatedAccounts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelatedAccountsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelatedAccountsValidationError{}

// Validate checks the field values on MemberPersonId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberPersonId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberPersonId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberPersonIdMultiError,
// or nil if none found.
func (m *MemberPersonId) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberPersonId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PersonId

	// no validation rules for MemberEmail

	if len(errors) > 0 {
		return MemberPersonIdMultiError(errors)
	}

	return nil
}

// MemberPersonIdMultiError is an error wrapping multiple validation errors
// returned by MemberPersonId.ValidateAll() if the designated constraints
// aren't met.
type MemberPersonIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberPersonIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberPersonIdMultiError) AllErrors() []error { return m }

// MemberPersonIdValidationError is the validation error returned by
// MemberPersonId.Validate if the designated constraints aren't met.
type MemberPersonIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberPersonIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberPersonIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberPersonIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberPersonIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberPersonIdValidationError) ErrorName() string { return "MemberPersonIdValidationError" }

// Error satisfies the builtin error interface
func (e MemberPersonIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberPersonId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberPersonIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberPersonIdValidationError{}

// Validate checks the field values on MemberCloudAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberCloudAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberCloudAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberCloudAccountMultiError, or nil if none found.
func (m *MemberCloudAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberCloudAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Owner

	// no validation rules for InvitationState

	// no validation rules for Type

	if len(errors) > 0 {
		return MemberCloudAccountMultiError(errors)
	}

	return nil
}

// MemberCloudAccountMultiError is an error wrapping multiple validation errors
// returned by MemberCloudAccount.ValidateAll() if the designated constraints
// aren't met.
type MemberCloudAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberCloudAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberCloudAccountMultiError) AllErrors() []error { return m }

// MemberCloudAccountValidationError is the validation error returned by
// MemberCloudAccount.Validate if the designated constraints aren't met.
type MemberCloudAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberCloudAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberCloudAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberCloudAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberCloudAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberCloudAccountValidationError) ErrorName() string {
	return "MemberCloudAccountValidationError"
}

// Error satisfies the builtin error interface
func (e MemberCloudAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberCloudAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberCloudAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberCloudAccountValidationError{}

// Validate checks the field values on MemberAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberAccountMultiError, or
// nil if none found.
func (m *MemberAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemberAccount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberAccountValidationError{
						field:  fmt.Sprintf("MemberAccount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberAccountValidationError{
						field:  fmt.Sprintf("MemberAccount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberAccountValidationError{
					field:  fmt.Sprintf("MemberAccount[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberAccountMultiError(errors)
	}

	return nil
}

// MemberAccountMultiError is an error wrapping multiple validation errors
// returned by MemberAccount.ValidateAll() if the designated constraints
// aren't met.
type MemberAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAccountMultiError) AllErrors() []error { return m }

// MemberAccountValidationError is the validation error returned by
// MemberAccount.Validate if the designated constraints aren't met.
type MemberAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAccountValidationError) ErrorName() string { return "MemberAccountValidationError" }

// Error satisfies the builtin error interface
func (e MemberAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAccountValidationError{}

// Validate checks the field values on CloudAccountMembers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountMembers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountMembers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountMembersMultiError, or nil if none found.
func (m *CloudAccountMembers) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountMembers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return CloudAccountMembersMultiError(errors)
	}

	return nil
}

// CloudAccountMembersMultiError is an error wrapping multiple validation
// errors returned by CloudAccountMembers.ValidateAll() if the designated
// constraints aren't met.
type CloudAccountMembersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountMembersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountMembersMultiError) AllErrors() []error { return m }

// CloudAccountMembersValidationError is the validation error returned by
// CloudAccountMembers.Validate if the designated constraints aren't met.
type CloudAccountMembersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountMembersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountMembersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountMembersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountMembersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountMembersValidationError) ErrorName() string {
	return "CloudAccountMembersValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAccountMembersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountMembers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountMembersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountMembersValidationError{}

// Validate checks the field values on CloudAccountUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudAccountUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAccountUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudAccountUserMultiError, or nil if none found.
func (m *CloudAccountUser) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAccountUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	if m.OnlyActive != nil {
		// no validation rules for OnlyActive
	}

	if len(errors) > 0 {
		return CloudAccountUserMultiError(errors)
	}

	return nil
}

// CloudAccountUserMultiError is an error wrapping multiple validation errors
// returned by CloudAccountUser.ValidateAll() if the designated constraints
// aren't met.
type CloudAccountUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAccountUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAccountUserMultiError) AllErrors() []error { return m }

// CloudAccountUserValidationError is the validation error returned by
// CloudAccountUser.Validate if the designated constraints aren't met.
type CloudAccountUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountUserValidationError) ErrorName() string { return "CloudAccountUserValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountUserValidationError{}

// Validate checks the field values on Otp with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Otp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Otp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OtpMultiError, or nil if none found.
func (m *Otp) ValidateAll() error {
	return m.validate(true)
}

func (m *Otp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for MemberEmail

	// no validation rules for OtpCode

	// no validation rules for OtpState

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OtpValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OtpValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OtpValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OtpMultiError(errors)
	}

	return nil
}

// OtpMultiError is an error wrapping multiple validation errors returned by
// Otp.ValidateAll() if the designated constraints aren't met.
type OtpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OtpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OtpMultiError) AllErrors() []error { return m }

// OtpValidationError is the validation error returned by Otp.Validate if the
// designated constraints aren't met.
type OtpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OtpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OtpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OtpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OtpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OtpValidationError) ErrorName() string { return "OtpValidationError" }

// Error satisfies the builtin error interface
func (e OtpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOtp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OtpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OtpValidationError{}

// Validate checks the field values on OtpRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OtpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OtpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OtpRequestMultiError, or
// nil if none found.
func (m *OtpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OtpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for MemberEmail

	if len(errors) > 0 {
		return OtpRequestMultiError(errors)
	}

	return nil
}

// OtpRequestMultiError is an error wrapping multiple validation errors
// returned by OtpRequest.ValidateAll() if the designated constraints aren't met.
type OtpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OtpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OtpRequestMultiError) AllErrors() []error { return m }

// OtpRequestValidationError is the validation error returned by
// OtpRequest.Validate if the designated constraints aren't met.
type OtpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OtpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OtpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OtpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OtpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OtpRequestValidationError) ErrorName() string { return "OtpRequestValidationError" }

// Error satisfies the builtin error interface
func (e OtpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOtpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OtpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OtpRequestValidationError{}

// Validate checks the field values on VerifyOtpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyOtpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOtpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyOtpRequestMultiError, or nil if none found.
func (m *VerifyOtpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOtpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for MemberEmail

	// no validation rules for OtpCode

	if len(errors) > 0 {
		return VerifyOtpRequestMultiError(errors)
	}

	return nil
}

// VerifyOtpRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyOtpRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyOtpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOtpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOtpRequestMultiError) AllErrors() []error { return m }

// VerifyOtpRequestValidationError is the validation error returned by
// VerifyOtpRequest.Validate if the designated constraints aren't met.
type VerifyOtpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOtpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOtpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOtpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOtpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOtpRequestValidationError) ErrorName() string { return "VerifyOtpRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyOtpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOtpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOtpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOtpRequestValidationError{}

// Validate checks the field values on VerifyOtpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyOtpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOtpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyOtpResponseMultiError, or nil if none found.
func (m *VerifyOtpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOtpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Validated

	// no validation rules for OtpState

	// no validation rules for Message

	// no validation rules for Blocked

	// no validation rules for RetryLeft

	if len(errors) > 0 {
		return VerifyOtpResponseMultiError(errors)
	}

	return nil
}

// VerifyOtpResponseMultiError is an error wrapping multiple validation errors
// returned by VerifyOtpResponse.ValidateAll() if the designated constraints
// aren't met.
type VerifyOtpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOtpResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOtpResponseMultiError) AllErrors() []error { return m }

// VerifyOtpResponseValidationError is the validation error returned by
// VerifyOtpResponse.Validate if the designated constraints aren't met.
type VerifyOtpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOtpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOtpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOtpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOtpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOtpResponseValidationError) ErrorName() string {
	return "VerifyOtpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOtpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOtpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOtpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOtpResponseValidationError{}

// Validate checks the field values on InviteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InviteRequestMultiError, or
// nil if none found.
func (m *InviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberEmail

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteRequestValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Note

	if len(errors) > 0 {
		return InviteRequestMultiError(errors)
	}

	return nil
}

// InviteRequestMultiError is an error wrapping multiple validation errors
// returned by InviteRequest.ValidateAll() if the designated constraints
// aren't met.
type InviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteRequestMultiError) AllErrors() []error { return m }

// InviteRequestValidationError is the validation error returned by
// InviteRequest.Validate if the designated constraints aren't met.
type InviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteRequestValidationError) ErrorName() string { return "InviteRequestValidationError" }

// Error satisfies the builtin error interface
func (e InviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteRequestValidationError{}

// Validate checks the field values on InviteRequestList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InviteRequestList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteRequestList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteRequestListMultiError, or nil if none found.
func (m *InviteRequestList) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteRequestList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InviteRequestListValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InviteRequestListValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InviteRequestListValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InviteRequestListMultiError(errors)
	}

	return nil
}

// InviteRequestListMultiError is an error wrapping multiple validation errors
// returned by InviteRequestList.ValidateAll() if the designated constraints
// aren't met.
type InviteRequestListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteRequestListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteRequestListMultiError) AllErrors() []error { return m }

// InviteRequestListValidationError is the validation error returned by
// InviteRequestList.Validate if the designated constraints aren't met.
type InviteRequestListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteRequestListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteRequestListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteRequestListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteRequestListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteRequestListValidationError) ErrorName() string {
	return "InviteRequestListValidationError"
}

// Error satisfies the builtin error interface
func (e InviteRequestListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteRequestList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteRequestListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteRequestListValidationError{}

// Validate checks the field values on Invite with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Invite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Invite with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InviteMultiError, or nil if none found.
func (m *Invite) ValidateAll() error {
	return m.validate(true)
}

func (m *Invite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberEmail

	// no validation rules for InvitationState

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Note

	if len(errors) > 0 {
		return InviteMultiError(errors)
	}

	return nil
}

// InviteMultiError is an error wrapping multiple validation errors returned by
// Invite.ValidateAll() if the designated constraints aren't met.
type InviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteMultiError) AllErrors() []error { return m }

// InviteValidationError is the validation error returned by Invite.Validate if
// the designated constraints aren't met.
type InviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteValidationError) ErrorName() string { return "InviteValidationError" }

// Error satisfies the builtin error interface
func (e InviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteValidationError{}

// Validate checks the field values on InviteList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InviteList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InviteListMultiError, or
// nil if none found.
func (m *InviteList) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanAddMoreMembers

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InviteListValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InviteListValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InviteListValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MembersLimit

	// no validation rules for MemberCount

	if len(errors) > 0 {
		return InviteListMultiError(errors)
	}

	return nil
}

// InviteListMultiError is an error wrapping multiple validation errors
// returned by InviteList.ValidateAll() if the designated constraints aren't met.
type InviteListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteListMultiError) AllErrors() []error { return m }

// InviteListValidationError is the validation error returned by
// InviteList.Validate if the designated constraints aren't met.
type InviteListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteListValidationError) ErrorName() string { return "InviteListValidationError" }

// Error satisfies the builtin error interface
func (e InviteListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteListValidationError{}

// Validate checks the field values on InviteFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InviteFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InviteFilterMultiError, or
// nil if none found.
func (m *InviteFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminAccountId

	if len(errors) > 0 {
		return InviteFilterMultiError(errors)
	}

	return nil
}

// InviteFilterMultiError is an error wrapping multiple validation errors
// returned by InviteFilter.ValidateAll() if the designated constraints aren't met.
type InviteFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteFilterMultiError) AllErrors() []error { return m }

// InviteFilterValidationError is the validation error returned by
// InviteFilter.Validate if the designated constraints aren't met.
type InviteFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteFilterValidationError) ErrorName() string { return "InviteFilterValidationError" }

// Error satisfies the builtin error interface
func (e InviteFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteFilterValidationError{}

// Validate checks the field values on InviteResendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteResendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteResendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteResendRequestMultiError, or nil if none found.
func (m *InviteResendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteResendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminAccountId

	// no validation rules for MemberEmail

	if len(errors) > 0 {
		return InviteResendRequestMultiError(errors)
	}

	return nil
}

// InviteResendRequestMultiError is an error wrapping multiple validation
// errors returned by InviteResendRequest.ValidateAll() if the designated
// constraints aren't met.
type InviteResendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteResendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteResendRequestMultiError) AllErrors() []error { return m }

// InviteResendRequestValidationError is the validation error returned by
// InviteResendRequest.Validate if the designated constraints aren't met.
type InviteResendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteResendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteResendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteResendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteResendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteResendRequestValidationError) ErrorName() string {
	return "InviteResendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteResendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteResendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteResendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteResendRequestValidationError{}

// Validate checks the field values on InviteResendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteResendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteResendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteResendResponseMultiError, or nil if none found.
func (m *InviteResendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteResendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Blocked

	// no validation rules for RetryLeft

	if len(errors) > 0 {
		return InviteResendResponseMultiError(errors)
	}

	return nil
}

// InviteResendResponseMultiError is an error wrapping multiple validation
// errors returned by InviteResendResponse.ValidateAll() if the designated
// constraints aren't met.
type InviteResendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteResendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteResendResponseMultiError) AllErrors() []error { return m }

// InviteResendResponseValidationError is the validation error returned by
// InviteResendResponse.Validate if the designated constraints aren't met.
type InviteResendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteResendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteResendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteResendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteResendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteResendResponseValidationError) ErrorName() string {
	return "InviteResendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InviteResendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteResendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteResendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteResendResponseValidationError{}

// Validate checks the field values on InviteRevokeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteRevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteRevokeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteRevokeRequestMultiError, or nil if none found.
func (m *InviteRevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteRevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminAccountId

	// no validation rules for MemberEmail

	// no validation rules for InvitationState

	if len(errors) > 0 {
		return InviteRevokeRequestMultiError(errors)
	}

	return nil
}

// InviteRevokeRequestMultiError is an error wrapping multiple validation
// errors returned by InviteRevokeRequest.ValidateAll() if the designated
// constraints aren't met.
type InviteRevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteRevokeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteRevokeRequestMultiError) AllErrors() []error { return m }

// InviteRevokeRequestValidationError is the validation error returned by
// InviteRevokeRequest.Validate if the designated constraints aren't met.
type InviteRevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteRevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteRevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteRevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteRevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteRevokeRequestValidationError) ErrorName() string {
	return "InviteRevokeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteRevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteRevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteRevokeRequestValidationError{}

// Validate checks the field values on InviteUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteUpdateRequestMultiError, or nil if none found.
func (m *InviteUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminAccountId

	// no validation rules for MemberEmail

	// no validation rules for InvitationState

	if len(errors) > 0 {
		return InviteUpdateRequestMultiError(errors)
	}

	return nil
}

// InviteUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by InviteUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type InviteUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUpdateRequestMultiError) AllErrors() []error { return m }

// InviteUpdateRequestValidationError is the validation error returned by
// InviteUpdateRequest.Validate if the designated constraints aren't met.
type InviteUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUpdateRequestValidationError) ErrorName() string {
	return "InviteUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUpdateRequestValidationError{}

// Validate checks the field values on ValidateInviteCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateInviteCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateInviteCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateInviteCodeRequestMultiError, or nil if none found.
func (m *ValidateInviteCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateInviteCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminCloudAccountId

	// no validation rules for MemberEmail

	// no validation rules for InviteCode

	if len(errors) > 0 {
		return ValidateInviteCodeRequestMultiError(errors)
	}

	return nil
}

// ValidateInviteCodeRequestMultiError is an error wrapping multiple validation
// errors returned by ValidateInviteCodeRequest.ValidateAll() if the
// designated constraints aren't met.
type ValidateInviteCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateInviteCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateInviteCodeRequestMultiError) AllErrors() []error { return m }

// ValidateInviteCodeRequestValidationError is the validation error returned by
// ValidateInviteCodeRequest.Validate if the designated constraints aren't met.
type ValidateInviteCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateInviteCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateInviteCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateInviteCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateInviteCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateInviteCodeRequestValidationError) ErrorName() string {
	return "ValidateInviteCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateInviteCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateInviteCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateInviteCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateInviteCodeRequestValidationError{}

// Validate checks the field values on ValidateInviteCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateInviteCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateInviteCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateInviteCodeResponseMultiError, or nil if none found.
func (m *ValidateInviteCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateInviteCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	// no validation rules for InvitationState

	if len(errors) > 0 {
		return ValidateInviteCodeResponseMultiError(errors)
	}

	return nil
}

// ValidateInviteCodeResponseMultiError is an error wrapping multiple
// validation errors returned by ValidateInviteCodeResponse.ValidateAll() if
// the designated constraints aren't met.
type ValidateInviteCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateInviteCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateInviteCodeResponseMultiError) AllErrors() []error { return m }

// ValidateInviteCodeResponseValidationError is the validation error returned
// by ValidateInviteCodeResponse.Validate if the designated constraints aren't met.
type ValidateInviteCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateInviteCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateInviteCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateInviteCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateInviteCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateInviteCodeResponseValidationError) ErrorName() string {
	return "ValidateInviteCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateInviteCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateInviteCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateInviteCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateInviteCodeResponseValidationError{}

// Validate checks the field values on SendInviteCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendInviteCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendInviteCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendInviteCodeRequestMultiError, or nil if none found.
func (m *SendInviteCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendInviteCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminAccountId

	// no validation rules for MemberEmail

	if len(errors) > 0 {
		return SendInviteCodeRequestMultiError(errors)
	}

	return nil
}

// SendInviteCodeRequestMultiError is an error wrapping multiple validation
// errors returned by SendInviteCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type SendInviteCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendInviteCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendInviteCodeRequestMultiError) AllErrors() []error { return m }

// SendInviteCodeRequestValidationError is the validation error returned by
// SendInviteCodeRequest.Validate if the designated constraints aren't met.
type SendInviteCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInviteCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInviteCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInviteCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInviteCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInviteCodeRequestValidationError) ErrorName() string {
	return "SendInviteCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendInviteCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInviteCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInviteCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInviteCodeRequestValidationError{}
