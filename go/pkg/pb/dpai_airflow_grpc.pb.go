// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dpai_airflow.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DpaiAirflowSizeServiceClient is the client API for DpaiAirflowSizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiAirflowSizeServiceClient interface {
	// Create new DPAI Airflow Size
	DpaiAirflowSizeCreate(ctx context.Context, in *DpaiAirflowSizeCreateRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error)
	// List DPAI Airflow Sizes
	DpaiAirflowSizeList(ctx context.Context, in *DpaiAirflowSizeListRequest, opts ...grpc.CallOption) (*DpaiAirflowSizeListResponse, error)
	// Get DPAI Airflow Size by ID
	DpaiAirflowSizeGetById(ctx context.Context, in *DpaiAirflowSizeGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error)
	// Get DPAI Airflow Size by Name
	DpaiAirflowSizeGetByName(ctx context.Context, in *DpaiAirflowSizeGetByNameRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error)
	// Update DPAI Airflow Size metadata
	DpaiAirflowSizeUpdate(ctx context.Context, in *DpaiAirflowSizeUpdateRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error)
	// Delete DPAI Airflow Size
	DpaiAirflowSizeDelete(ctx context.Context, in *DpaiAirflowSizeDeleteRequest, opts ...grpc.CallOption) (*DpaiAirflowSizeDeleteResponse, error)
}

type dpaiAirflowSizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiAirflowSizeServiceClient(cc grpc.ClientConnInterface) DpaiAirflowSizeServiceClient {
	return &dpaiAirflowSizeServiceClient{cc}
}

func (c *dpaiAirflowSizeServiceClient) DpaiAirflowSizeCreate(ctx context.Context, in *DpaiAirflowSizeCreateRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error) {
	out := new(DpaiAirflowSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowSizeService/DpaiAirflowSizeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowSizeServiceClient) DpaiAirflowSizeList(ctx context.Context, in *DpaiAirflowSizeListRequest, opts ...grpc.CallOption) (*DpaiAirflowSizeListResponse, error) {
	out := new(DpaiAirflowSizeListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowSizeService/DpaiAirflowSizeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowSizeServiceClient) DpaiAirflowSizeGetById(ctx context.Context, in *DpaiAirflowSizeGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error) {
	out := new(DpaiAirflowSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowSizeService/DpaiAirflowSizeGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowSizeServiceClient) DpaiAirflowSizeGetByName(ctx context.Context, in *DpaiAirflowSizeGetByNameRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error) {
	out := new(DpaiAirflowSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowSizeService/DpaiAirflowSizeGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowSizeServiceClient) DpaiAirflowSizeUpdate(ctx context.Context, in *DpaiAirflowSizeUpdateRequest, opts ...grpc.CallOption) (*DpaiAirflowSize, error) {
	out := new(DpaiAirflowSize)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowSizeService/DpaiAirflowSizeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowSizeServiceClient) DpaiAirflowSizeDelete(ctx context.Context, in *DpaiAirflowSizeDeleteRequest, opts ...grpc.CallOption) (*DpaiAirflowSizeDeleteResponse, error) {
	out := new(DpaiAirflowSizeDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowSizeService/DpaiAirflowSizeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiAirflowSizeServiceServer is the server API for DpaiAirflowSizeService service.
// All implementations must embed UnimplementedDpaiAirflowSizeServiceServer
// for forward compatibility
type DpaiAirflowSizeServiceServer interface {
	// Create new DPAI Airflow Size
	DpaiAirflowSizeCreate(context.Context, *DpaiAirflowSizeCreateRequest) (*DpaiAirflowSize, error)
	// List DPAI Airflow Sizes
	DpaiAirflowSizeList(context.Context, *DpaiAirflowSizeListRequest) (*DpaiAirflowSizeListResponse, error)
	// Get DPAI Airflow Size by ID
	DpaiAirflowSizeGetById(context.Context, *DpaiAirflowSizeGetByIdRequest) (*DpaiAirflowSize, error)
	// Get DPAI Airflow Size by Name
	DpaiAirflowSizeGetByName(context.Context, *DpaiAirflowSizeGetByNameRequest) (*DpaiAirflowSize, error)
	// Update DPAI Airflow Size metadata
	DpaiAirflowSizeUpdate(context.Context, *DpaiAirflowSizeUpdateRequest) (*DpaiAirflowSize, error)
	// Delete DPAI Airflow Size
	DpaiAirflowSizeDelete(context.Context, *DpaiAirflowSizeDeleteRequest) (*DpaiAirflowSizeDeleteResponse, error)
	mustEmbedUnimplementedDpaiAirflowSizeServiceServer()
}

// UnimplementedDpaiAirflowSizeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiAirflowSizeServiceServer struct {
}

func (UnimplementedDpaiAirflowSizeServiceServer) DpaiAirflowSizeCreate(context.Context, *DpaiAirflowSizeCreateRequest) (*DpaiAirflowSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowSizeCreate not implemented")
}
func (UnimplementedDpaiAirflowSizeServiceServer) DpaiAirflowSizeList(context.Context, *DpaiAirflowSizeListRequest) (*DpaiAirflowSizeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowSizeList not implemented")
}
func (UnimplementedDpaiAirflowSizeServiceServer) DpaiAirflowSizeGetById(context.Context, *DpaiAirflowSizeGetByIdRequest) (*DpaiAirflowSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowSizeGetById not implemented")
}
func (UnimplementedDpaiAirflowSizeServiceServer) DpaiAirflowSizeGetByName(context.Context, *DpaiAirflowSizeGetByNameRequest) (*DpaiAirflowSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowSizeGetByName not implemented")
}
func (UnimplementedDpaiAirflowSizeServiceServer) DpaiAirflowSizeUpdate(context.Context, *DpaiAirflowSizeUpdateRequest) (*DpaiAirflowSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowSizeUpdate not implemented")
}
func (UnimplementedDpaiAirflowSizeServiceServer) DpaiAirflowSizeDelete(context.Context, *DpaiAirflowSizeDeleteRequest) (*DpaiAirflowSizeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowSizeDelete not implemented")
}
func (UnimplementedDpaiAirflowSizeServiceServer) mustEmbedUnimplementedDpaiAirflowSizeServiceServer() {
}

// UnsafeDpaiAirflowSizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiAirflowSizeServiceServer will
// result in compilation errors.
type UnsafeDpaiAirflowSizeServiceServer interface {
	mustEmbedUnimplementedDpaiAirflowSizeServiceServer()
}

func RegisterDpaiAirflowSizeServiceServer(s grpc.ServiceRegistrar, srv DpaiAirflowSizeServiceServer) {
	s.RegisterService(&DpaiAirflowSizeService_ServiceDesc, srv)
}

func _DpaiAirflowSizeService_DpaiAirflowSizeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowSizeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowSizeService/DpaiAirflowSizeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeCreate(ctx, req.(*DpaiAirflowSizeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowSizeService_DpaiAirflowSizeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowSizeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowSizeService/DpaiAirflowSizeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeList(ctx, req.(*DpaiAirflowSizeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowSizeService_DpaiAirflowSizeGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowSizeGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowSizeService/DpaiAirflowSizeGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeGetById(ctx, req.(*DpaiAirflowSizeGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowSizeService_DpaiAirflowSizeGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowSizeGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowSizeService/DpaiAirflowSizeGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeGetByName(ctx, req.(*DpaiAirflowSizeGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowSizeService_DpaiAirflowSizeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowSizeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowSizeService/DpaiAirflowSizeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeUpdate(ctx, req.(*DpaiAirflowSizeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowSizeService_DpaiAirflowSizeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowSizeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowSizeService/DpaiAirflowSizeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowSizeServiceServer).DpaiAirflowSizeDelete(ctx, req.(*DpaiAirflowSizeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiAirflowSizeService_ServiceDesc is the grpc.ServiceDesc for DpaiAirflowSizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiAirflowSizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiAirflowSizeService",
	HandlerType: (*DpaiAirflowSizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiAirflowSizeCreate",
			Handler:    _DpaiAirflowSizeService_DpaiAirflowSizeCreate_Handler,
		},
		{
			MethodName: "DpaiAirflowSizeList",
			Handler:    _DpaiAirflowSizeService_DpaiAirflowSizeList_Handler,
		},
		{
			MethodName: "DpaiAirflowSizeGetById",
			Handler:    _DpaiAirflowSizeService_DpaiAirflowSizeGetById_Handler,
		},
		{
			MethodName: "DpaiAirflowSizeGetByName",
			Handler:    _DpaiAirflowSizeService_DpaiAirflowSizeGetByName_Handler,
		},
		{
			MethodName: "DpaiAirflowSizeUpdate",
			Handler:    _DpaiAirflowSizeService_DpaiAirflowSizeUpdate_Handler,
		},
		{
			MethodName: "DpaiAirflowSizeDelete",
			Handler:    _DpaiAirflowSizeService_DpaiAirflowSizeDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_airflow.proto",
}

// DpaiAirflowVersionServiceClient is the client API for DpaiAirflowVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiAirflowVersionServiceClient interface {
	// Create new DPAI Airflow Version
	DpaiAirflowVersionCreate(ctx context.Context, in *DpaiAirflowVersionCreateRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error)
	// List DPAI Airflow Version
	DpaiAirflowVersionList(ctx context.Context, in *DpaiAirflowVersionListRequest, opts ...grpc.CallOption) (*DpaiAirflowVersionListResponse, error)
	// Get DPAI Airflow Version by ID
	DpaiAirflowVersionGetById(ctx context.Context, in *DpaiAirflowVersionGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error)
	// Get DPAI Airflow Version by name
	DpaiAirflowVersionGetByName(ctx context.Context, in *DpaiAirflowVersionGetByNameRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error)
	// Update DPAI Airflow Version metadata
	DpaiAirflowVersionUpdate(ctx context.Context, in *DpaiAirflowVersionUpdateRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error)
	// Delete DPAI Airflow Version
	DpaiAirflowVersionDelete(ctx context.Context, in *DpaiAirflowVersionDeleteRequest, opts ...grpc.CallOption) (*DpaiAirflowVersionDeleteResponse, error)
}

type dpaiAirflowVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiAirflowVersionServiceClient(cc grpc.ClientConnInterface) DpaiAirflowVersionServiceClient {
	return &dpaiAirflowVersionServiceClient{cc}
}

func (c *dpaiAirflowVersionServiceClient) DpaiAirflowVersionCreate(ctx context.Context, in *DpaiAirflowVersionCreateRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error) {
	out := new(DpaiAirflowVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowVersionService/DpaiAirflowVersionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowVersionServiceClient) DpaiAirflowVersionList(ctx context.Context, in *DpaiAirflowVersionListRequest, opts ...grpc.CallOption) (*DpaiAirflowVersionListResponse, error) {
	out := new(DpaiAirflowVersionListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowVersionService/DpaiAirflowVersionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowVersionServiceClient) DpaiAirflowVersionGetById(ctx context.Context, in *DpaiAirflowVersionGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error) {
	out := new(DpaiAirflowVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowVersionService/DpaiAirflowVersionGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowVersionServiceClient) DpaiAirflowVersionGetByName(ctx context.Context, in *DpaiAirflowVersionGetByNameRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error) {
	out := new(DpaiAirflowVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowVersionService/DpaiAirflowVersionGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowVersionServiceClient) DpaiAirflowVersionUpdate(ctx context.Context, in *DpaiAirflowVersionUpdateRequest, opts ...grpc.CallOption) (*DpaiAirflowVersion, error) {
	out := new(DpaiAirflowVersion)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowVersionService/DpaiAirflowVersionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowVersionServiceClient) DpaiAirflowVersionDelete(ctx context.Context, in *DpaiAirflowVersionDeleteRequest, opts ...grpc.CallOption) (*DpaiAirflowVersionDeleteResponse, error) {
	out := new(DpaiAirflowVersionDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowVersionService/DpaiAirflowVersionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiAirflowVersionServiceServer is the server API for DpaiAirflowVersionService service.
// All implementations must embed UnimplementedDpaiAirflowVersionServiceServer
// for forward compatibility
type DpaiAirflowVersionServiceServer interface {
	// Create new DPAI Airflow Version
	DpaiAirflowVersionCreate(context.Context, *DpaiAirflowVersionCreateRequest) (*DpaiAirflowVersion, error)
	// List DPAI Airflow Version
	DpaiAirflowVersionList(context.Context, *DpaiAirflowVersionListRequest) (*DpaiAirflowVersionListResponse, error)
	// Get DPAI Airflow Version by ID
	DpaiAirflowVersionGetById(context.Context, *DpaiAirflowVersionGetByIdRequest) (*DpaiAirflowVersion, error)
	// Get DPAI Airflow Version by name
	DpaiAirflowVersionGetByName(context.Context, *DpaiAirflowVersionGetByNameRequest) (*DpaiAirflowVersion, error)
	// Update DPAI Airflow Version metadata
	DpaiAirflowVersionUpdate(context.Context, *DpaiAirflowVersionUpdateRequest) (*DpaiAirflowVersion, error)
	// Delete DPAI Airflow Version
	DpaiAirflowVersionDelete(context.Context, *DpaiAirflowVersionDeleteRequest) (*DpaiAirflowVersionDeleteResponse, error)
	mustEmbedUnimplementedDpaiAirflowVersionServiceServer()
}

// UnimplementedDpaiAirflowVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiAirflowVersionServiceServer struct {
}

func (UnimplementedDpaiAirflowVersionServiceServer) DpaiAirflowVersionCreate(context.Context, *DpaiAirflowVersionCreateRequest) (*DpaiAirflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowVersionCreate not implemented")
}
func (UnimplementedDpaiAirflowVersionServiceServer) DpaiAirflowVersionList(context.Context, *DpaiAirflowVersionListRequest) (*DpaiAirflowVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowVersionList not implemented")
}
func (UnimplementedDpaiAirflowVersionServiceServer) DpaiAirflowVersionGetById(context.Context, *DpaiAirflowVersionGetByIdRequest) (*DpaiAirflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowVersionGetById not implemented")
}
func (UnimplementedDpaiAirflowVersionServiceServer) DpaiAirflowVersionGetByName(context.Context, *DpaiAirflowVersionGetByNameRequest) (*DpaiAirflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowVersionGetByName not implemented")
}
func (UnimplementedDpaiAirflowVersionServiceServer) DpaiAirflowVersionUpdate(context.Context, *DpaiAirflowVersionUpdateRequest) (*DpaiAirflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowVersionUpdate not implemented")
}
func (UnimplementedDpaiAirflowVersionServiceServer) DpaiAirflowVersionDelete(context.Context, *DpaiAirflowVersionDeleteRequest) (*DpaiAirflowVersionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowVersionDelete not implemented")
}
func (UnimplementedDpaiAirflowVersionServiceServer) mustEmbedUnimplementedDpaiAirflowVersionServiceServer() {
}

// UnsafeDpaiAirflowVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiAirflowVersionServiceServer will
// result in compilation errors.
type UnsafeDpaiAirflowVersionServiceServer interface {
	mustEmbedUnimplementedDpaiAirflowVersionServiceServer()
}

func RegisterDpaiAirflowVersionServiceServer(s grpc.ServiceRegistrar, srv DpaiAirflowVersionServiceServer) {
	s.RegisterService(&DpaiAirflowVersionService_ServiceDesc, srv)
}

func _DpaiAirflowVersionService_DpaiAirflowVersionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowVersionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowVersionService/DpaiAirflowVersionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionCreate(ctx, req.(*DpaiAirflowVersionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowVersionService_DpaiAirflowVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowVersionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowVersionService/DpaiAirflowVersionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionList(ctx, req.(*DpaiAirflowVersionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowVersionService_DpaiAirflowVersionGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowVersionGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowVersionService/DpaiAirflowVersionGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionGetById(ctx, req.(*DpaiAirflowVersionGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowVersionService_DpaiAirflowVersionGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowVersionGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowVersionService/DpaiAirflowVersionGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionGetByName(ctx, req.(*DpaiAirflowVersionGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowVersionService_DpaiAirflowVersionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowVersionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowVersionService/DpaiAirflowVersionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionUpdate(ctx, req.(*DpaiAirflowVersionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowVersionService_DpaiAirflowVersionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowVersionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowVersionService/DpaiAirflowVersionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowVersionServiceServer).DpaiAirflowVersionDelete(ctx, req.(*DpaiAirflowVersionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiAirflowVersionService_ServiceDesc is the grpc.ServiceDesc for DpaiAirflowVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiAirflowVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiAirflowVersionService",
	HandlerType: (*DpaiAirflowVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiAirflowVersionCreate",
			Handler:    _DpaiAirflowVersionService_DpaiAirflowVersionCreate_Handler,
		},
		{
			MethodName: "DpaiAirflowVersionList",
			Handler:    _DpaiAirflowVersionService_DpaiAirflowVersionList_Handler,
		},
		{
			MethodName: "DpaiAirflowVersionGetById",
			Handler:    _DpaiAirflowVersionService_DpaiAirflowVersionGetById_Handler,
		},
		{
			MethodName: "DpaiAirflowVersionGetByName",
			Handler:    _DpaiAirflowVersionService_DpaiAirflowVersionGetByName_Handler,
		},
		{
			MethodName: "DpaiAirflowVersionUpdate",
			Handler:    _DpaiAirflowVersionService_DpaiAirflowVersionUpdate_Handler,
		},
		{
			MethodName: "DpaiAirflowVersionDelete",
			Handler:    _DpaiAirflowVersionService_DpaiAirflowVersionDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_airflow.proto",
}

// DpaiAirflowConfServiceClient is the client API for DpaiAirflowConfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiAirflowConfServiceClient interface {
	// Create new DPAI Airflow Configuration
	DpaiAirflowConfCreate(ctx context.Context, in *DpaiAirflowConfCreateRequest, opts ...grpc.CallOption) (*DpaiAirflowConf, error)
	// List DPAI Airflow Configurations
	DpaiAirflowConfList(ctx context.Context, in *DpaiAirflowConfListRequest, opts ...grpc.CallOption) (*DpaiAirflowConfListResponse, error)
	// Get DPAI Airflow Configuration by ID
	DpaiAirflowConfGetById(ctx context.Context, in *DpaiAirflowConfGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflowConf, error)
	// Delete DPAI Airflow Configuration
	DpaiAirflowConfDelete(ctx context.Context, in *DpaiAirflowConfDeleteRequest, opts ...grpc.CallOption) (*DpaiAirflowConfDeleteResponse, error)
	// Delete DPAI Airflow Configuration
	DpaiAirflowConfDeleteByAirflowId(ctx context.Context, in *DpaiAirflowConfDeleteByAirflowIdRequest, opts ...grpc.CallOption) (*DpaiAirflowConfDeleteResponse, error)
}

type dpaiAirflowConfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiAirflowConfServiceClient(cc grpc.ClientConnInterface) DpaiAirflowConfServiceClient {
	return &dpaiAirflowConfServiceClient{cc}
}

func (c *dpaiAirflowConfServiceClient) DpaiAirflowConfCreate(ctx context.Context, in *DpaiAirflowConfCreateRequest, opts ...grpc.CallOption) (*DpaiAirflowConf, error) {
	out := new(DpaiAirflowConf)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowConfService/DpaiAirflowConfCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowConfServiceClient) DpaiAirflowConfList(ctx context.Context, in *DpaiAirflowConfListRequest, opts ...grpc.CallOption) (*DpaiAirflowConfListResponse, error) {
	out := new(DpaiAirflowConfListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowConfService/DpaiAirflowConfList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowConfServiceClient) DpaiAirflowConfGetById(ctx context.Context, in *DpaiAirflowConfGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflowConf, error) {
	out := new(DpaiAirflowConf)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowConfService/DpaiAirflowConfGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowConfServiceClient) DpaiAirflowConfDelete(ctx context.Context, in *DpaiAirflowConfDeleteRequest, opts ...grpc.CallOption) (*DpaiAirflowConfDeleteResponse, error) {
	out := new(DpaiAirflowConfDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowConfService/DpaiAirflowConfDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowConfServiceClient) DpaiAirflowConfDeleteByAirflowId(ctx context.Context, in *DpaiAirflowConfDeleteByAirflowIdRequest, opts ...grpc.CallOption) (*DpaiAirflowConfDeleteResponse, error) {
	out := new(DpaiAirflowConfDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowConfService/DpaiAirflowConfDeleteByAirflowId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiAirflowConfServiceServer is the server API for DpaiAirflowConfService service.
// All implementations must embed UnimplementedDpaiAirflowConfServiceServer
// for forward compatibility
type DpaiAirflowConfServiceServer interface {
	// Create new DPAI Airflow Configuration
	DpaiAirflowConfCreate(context.Context, *DpaiAirflowConfCreateRequest) (*DpaiAirflowConf, error)
	// List DPAI Airflow Configurations
	DpaiAirflowConfList(context.Context, *DpaiAirflowConfListRequest) (*DpaiAirflowConfListResponse, error)
	// Get DPAI Airflow Configuration by ID
	DpaiAirflowConfGetById(context.Context, *DpaiAirflowConfGetByIdRequest) (*DpaiAirflowConf, error)
	// Delete DPAI Airflow Configuration
	DpaiAirflowConfDelete(context.Context, *DpaiAirflowConfDeleteRequest) (*DpaiAirflowConfDeleteResponse, error)
	// Delete DPAI Airflow Configuration
	DpaiAirflowConfDeleteByAirflowId(context.Context, *DpaiAirflowConfDeleteByAirflowIdRequest) (*DpaiAirflowConfDeleteResponse, error)
	mustEmbedUnimplementedDpaiAirflowConfServiceServer()
}

// UnimplementedDpaiAirflowConfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiAirflowConfServiceServer struct {
}

func (UnimplementedDpaiAirflowConfServiceServer) DpaiAirflowConfCreate(context.Context, *DpaiAirflowConfCreateRequest) (*DpaiAirflowConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowConfCreate not implemented")
}
func (UnimplementedDpaiAirflowConfServiceServer) DpaiAirflowConfList(context.Context, *DpaiAirflowConfListRequest) (*DpaiAirflowConfListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowConfList not implemented")
}
func (UnimplementedDpaiAirflowConfServiceServer) DpaiAirflowConfGetById(context.Context, *DpaiAirflowConfGetByIdRequest) (*DpaiAirflowConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowConfGetById not implemented")
}
func (UnimplementedDpaiAirflowConfServiceServer) DpaiAirflowConfDelete(context.Context, *DpaiAirflowConfDeleteRequest) (*DpaiAirflowConfDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowConfDelete not implemented")
}
func (UnimplementedDpaiAirflowConfServiceServer) DpaiAirflowConfDeleteByAirflowId(context.Context, *DpaiAirflowConfDeleteByAirflowIdRequest) (*DpaiAirflowConfDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowConfDeleteByAirflowId not implemented")
}
func (UnimplementedDpaiAirflowConfServiceServer) mustEmbedUnimplementedDpaiAirflowConfServiceServer() {
}

// UnsafeDpaiAirflowConfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiAirflowConfServiceServer will
// result in compilation errors.
type UnsafeDpaiAirflowConfServiceServer interface {
	mustEmbedUnimplementedDpaiAirflowConfServiceServer()
}

func RegisterDpaiAirflowConfServiceServer(s grpc.ServiceRegistrar, srv DpaiAirflowConfServiceServer) {
	s.RegisterService(&DpaiAirflowConfService_ServiceDesc, srv)
}

func _DpaiAirflowConfService_DpaiAirflowConfCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowConfCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowConfService/DpaiAirflowConfCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfCreate(ctx, req.(*DpaiAirflowConfCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowConfService_DpaiAirflowConfList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowConfListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowConfService/DpaiAirflowConfList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfList(ctx, req.(*DpaiAirflowConfListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowConfService_DpaiAirflowConfGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowConfGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowConfService/DpaiAirflowConfGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfGetById(ctx, req.(*DpaiAirflowConfGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowConfService_DpaiAirflowConfDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowConfDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowConfService/DpaiAirflowConfDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfDelete(ctx, req.(*DpaiAirflowConfDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowConfService_DpaiAirflowConfDeleteByAirflowId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowConfDeleteByAirflowIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfDeleteByAirflowId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowConfService/DpaiAirflowConfDeleteByAirflowId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowConfServiceServer).DpaiAirflowConfDeleteByAirflowId(ctx, req.(*DpaiAirflowConfDeleteByAirflowIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiAirflowConfService_ServiceDesc is the grpc.ServiceDesc for DpaiAirflowConfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiAirflowConfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiAirflowConfService",
	HandlerType: (*DpaiAirflowConfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiAirflowConfCreate",
			Handler:    _DpaiAirflowConfService_DpaiAirflowConfCreate_Handler,
		},
		{
			MethodName: "DpaiAirflowConfList",
			Handler:    _DpaiAirflowConfService_DpaiAirflowConfList_Handler,
		},
		{
			MethodName: "DpaiAirflowConfGetById",
			Handler:    _DpaiAirflowConfService_DpaiAirflowConfGetById_Handler,
		},
		{
			MethodName: "DpaiAirflowConfDelete",
			Handler:    _DpaiAirflowConfService_DpaiAirflowConfDelete_Handler,
		},
		{
			MethodName: "DpaiAirflowConfDeleteByAirflowId",
			Handler:    _DpaiAirflowConfService_DpaiAirflowConfDeleteByAirflowId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_airflow.proto",
}

// DpaiAirflowServiceClient is the client API for DpaiAirflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpaiAirflowServiceClient interface {
	// Create new DPAI Airflow Service
	DpaiAirflowCreate(ctx context.Context, in *DpaiAirflowCreateRequest, opts ...grpc.CallOption) (*DpaiAirflow, error)
	// List all the DPAI Airflow Service in the given cloud account. Supports wildcard filter on name.
	DpaiAirflowList(ctx context.Context, in *DpaiAirflowListRequest, opts ...grpc.CallOption) (*DpaiAirflowListResponse, error)
	// Get a DPAI Airflow by ID
	DpaiAirflowGetById(ctx context.Context, in *DpaiAirflowGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflow, error)
	// Get a DPAI Airflow by name
	DpaiAirflowGetByName(ctx context.Context, in *DpaiAirflowGetByNameRequest, opts ...grpc.CallOption) (*DpaiAirflow, error)
	// Update the DPAI Airflow metadata.
	DpaiAirflowUpdate(ctx context.Context, in *DpaiAirflowUpdateRequest, opts ...grpc.CallOption) (*DpaiAirflow, error)
	// Delete the DPAI Airflow
	DpaiAirflowDelete(ctx context.Context, in *DpaiAirflowDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// List DPAI Airflow for upgrade
	DpaiAirflowListUpgrade(ctx context.Context, in *DpaiAirflowListUpgradeRequest, opts ...grpc.CallOption) (*DpaiAirflowVersionListResponse, error)
	// Upgrade Airflow
	DpaiAirflowUpgrade(ctx context.Context, in *DpaiAirflowUpgradeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// Restart Airflow
	DpaiAirflowRestart(ctx context.Context, in *DpaiAirflowRestartRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
	// Resize Airflow
	DpaiAirflowResize(ctx context.Context, in *DpaiAirflowResizeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error)
}

type dpaiAirflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpaiAirflowServiceClient(cc grpc.ClientConnInterface) DpaiAirflowServiceClient {
	return &dpaiAirflowServiceClient{cc}
}

func (c *dpaiAirflowServiceClient) DpaiAirflowCreate(ctx context.Context, in *DpaiAirflowCreateRequest, opts ...grpc.CallOption) (*DpaiAirflow, error) {
	out := new(DpaiAirflow)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowList(ctx context.Context, in *DpaiAirflowListRequest, opts ...grpc.CallOption) (*DpaiAirflowListResponse, error) {
	out := new(DpaiAirflowListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowGetById(ctx context.Context, in *DpaiAirflowGetByIdRequest, opts ...grpc.CallOption) (*DpaiAirflow, error) {
	out := new(DpaiAirflow)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowGetByName(ctx context.Context, in *DpaiAirflowGetByNameRequest, opts ...grpc.CallOption) (*DpaiAirflow, error) {
	out := new(DpaiAirflow)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowUpdate(ctx context.Context, in *DpaiAirflowUpdateRequest, opts ...grpc.CallOption) (*DpaiAirflow, error) {
	out := new(DpaiAirflow)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowDelete(ctx context.Context, in *DpaiAirflowDeleteRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowListUpgrade(ctx context.Context, in *DpaiAirflowListUpgradeRequest, opts ...grpc.CallOption) (*DpaiAirflowVersionListResponse, error) {
	out := new(DpaiAirflowVersionListResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowListUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowUpgrade(ctx context.Context, in *DpaiAirflowUpgradeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowRestart(ctx context.Context, in *DpaiAirflowRestartRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpaiAirflowServiceClient) DpaiAirflowResize(ctx context.Context, in *DpaiAirflowResizeRequest, opts ...grpc.CallOption) (*DpaiDeploymentResponse, error) {
	out := new(DpaiDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DpaiAirflowService/DpaiAirflowResize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpaiAirflowServiceServer is the server API for DpaiAirflowService service.
// All implementations must embed UnimplementedDpaiAirflowServiceServer
// for forward compatibility
type DpaiAirflowServiceServer interface {
	// Create new DPAI Airflow Service
	DpaiAirflowCreate(context.Context, *DpaiAirflowCreateRequest) (*DpaiAirflow, error)
	// List all the DPAI Airflow Service in the given cloud account. Supports wildcard filter on name.
	DpaiAirflowList(context.Context, *DpaiAirflowListRequest) (*DpaiAirflowListResponse, error)
	// Get a DPAI Airflow by ID
	DpaiAirflowGetById(context.Context, *DpaiAirflowGetByIdRequest) (*DpaiAirflow, error)
	// Get a DPAI Airflow by name
	DpaiAirflowGetByName(context.Context, *DpaiAirflowGetByNameRequest) (*DpaiAirflow, error)
	// Update the DPAI Airflow metadata.
	DpaiAirflowUpdate(context.Context, *DpaiAirflowUpdateRequest) (*DpaiAirflow, error)
	// Delete the DPAI Airflow
	DpaiAirflowDelete(context.Context, *DpaiAirflowDeleteRequest) (*DpaiDeploymentResponse, error)
	// List DPAI Airflow for upgrade
	DpaiAirflowListUpgrade(context.Context, *DpaiAirflowListUpgradeRequest) (*DpaiAirflowVersionListResponse, error)
	// Upgrade Airflow
	DpaiAirflowUpgrade(context.Context, *DpaiAirflowUpgradeRequest) (*DpaiDeploymentResponse, error)
	// Restart Airflow
	DpaiAirflowRestart(context.Context, *DpaiAirflowRestartRequest) (*DpaiDeploymentResponse, error)
	// Resize Airflow
	DpaiAirflowResize(context.Context, *DpaiAirflowResizeRequest) (*DpaiDeploymentResponse, error)
	mustEmbedUnimplementedDpaiAirflowServiceServer()
}

// UnimplementedDpaiAirflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpaiAirflowServiceServer struct {
}

func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowCreate(context.Context, *DpaiAirflowCreateRequest) (*DpaiAirflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowCreate not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowList(context.Context, *DpaiAirflowListRequest) (*DpaiAirflowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowList not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowGetById(context.Context, *DpaiAirflowGetByIdRequest) (*DpaiAirflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowGetById not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowGetByName(context.Context, *DpaiAirflowGetByNameRequest) (*DpaiAirflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowGetByName not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowUpdate(context.Context, *DpaiAirflowUpdateRequest) (*DpaiAirflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowUpdate not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowDelete(context.Context, *DpaiAirflowDeleteRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowDelete not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowListUpgrade(context.Context, *DpaiAirflowListUpgradeRequest) (*DpaiAirflowVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowListUpgrade not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowUpgrade(context.Context, *DpaiAirflowUpgradeRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowUpgrade not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowRestart(context.Context, *DpaiAirflowRestartRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowRestart not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) DpaiAirflowResize(context.Context, *DpaiAirflowResizeRequest) (*DpaiDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DpaiAirflowResize not implemented")
}
func (UnimplementedDpaiAirflowServiceServer) mustEmbedUnimplementedDpaiAirflowServiceServer() {}

// UnsafeDpaiAirflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpaiAirflowServiceServer will
// result in compilation errors.
type UnsafeDpaiAirflowServiceServer interface {
	mustEmbedUnimplementedDpaiAirflowServiceServer()
}

func RegisterDpaiAirflowServiceServer(s grpc.ServiceRegistrar, srv DpaiAirflowServiceServer) {
	s.RegisterService(&DpaiAirflowService_ServiceDesc, srv)
}

func _DpaiAirflowService_DpaiAirflowCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowCreate(ctx, req.(*DpaiAirflowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowList(ctx, req.(*DpaiAirflowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowGetById(ctx, req.(*DpaiAirflowGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowGetByName(ctx, req.(*DpaiAirflowGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowUpdate(ctx, req.(*DpaiAirflowUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowDelete(ctx, req.(*DpaiAirflowDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowListUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowListUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowListUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowListUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowListUpgrade(ctx, req.(*DpaiAirflowListUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowUpgrade(ctx, req.(*DpaiAirflowUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowRestart(ctx, req.(*DpaiAirflowRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpaiAirflowService_DpaiAirflowResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpaiAirflowResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DpaiAirflowService/DpaiAirflowResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpaiAirflowServiceServer).DpaiAirflowResize(ctx, req.(*DpaiAirflowResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpaiAirflowService_ServiceDesc is the grpc.ServiceDesc for DpaiAirflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpaiAirflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DpaiAirflowService",
	HandlerType: (*DpaiAirflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DpaiAirflowCreate",
			Handler:    _DpaiAirflowService_DpaiAirflowCreate_Handler,
		},
		{
			MethodName: "DpaiAirflowList",
			Handler:    _DpaiAirflowService_DpaiAirflowList_Handler,
		},
		{
			MethodName: "DpaiAirflowGetById",
			Handler:    _DpaiAirflowService_DpaiAirflowGetById_Handler,
		},
		{
			MethodName: "DpaiAirflowGetByName",
			Handler:    _DpaiAirflowService_DpaiAirflowGetByName_Handler,
		},
		{
			MethodName: "DpaiAirflowUpdate",
			Handler:    _DpaiAirflowService_DpaiAirflowUpdate_Handler,
		},
		{
			MethodName: "DpaiAirflowDelete",
			Handler:    _DpaiAirflowService_DpaiAirflowDelete_Handler,
		},
		{
			MethodName: "DpaiAirflowListUpgrade",
			Handler:    _DpaiAirflowService_DpaiAirflowListUpgrade_Handler,
		},
		{
			MethodName: "DpaiAirflowUpgrade",
			Handler:    _DpaiAirflowService_DpaiAirflowUpgrade_Handler,
		},
		{
			MethodName: "DpaiAirflowRestart",
			Handler:    _DpaiAirflowService_DpaiAirflowRestart_Handler,
		},
		{
			MethodName: "DpaiAirflowResize",
			Handler:    _DpaiAirflowService_DpaiAirflowResize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpai_airflow.proto",
}
