// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pb/authz_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAuthzServiceClient is a mock of AuthzServiceClient interface.
type MockAuthzServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzServiceClientMockRecorder
}

// MockAuthzServiceClientMockRecorder is the mock recorder for MockAuthzServiceClient.
type MockAuthzServiceClientMockRecorder struct {
	mock *MockAuthzServiceClient
}

// NewMockAuthzServiceClient creates a new mock instance.
func NewMockAuthzServiceClient(ctrl *gomock.Controller) *MockAuthzServiceClient {
	mock := &MockAuthzServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthzServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzServiceClient) EXPECT() *MockAuthzServiceClientMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockAuthzServiceClient) Actions(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*ActionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Actions", varargs...)
	ret0, _ := ret[0].(*ActionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Actions indicates an expected call of Actions.
func (mr *MockAuthzServiceClientMockRecorder) Actions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockAuthzServiceClient)(nil).Actions), varargs...)
}

// AddCloudAccountRolesToUser mocks base method.
func (m *MockAuthzServiceClient) AddCloudAccountRolesToUser(ctx context.Context, in *CloudAccountRolesUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCloudAccountRolesToUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCloudAccountRolesToUser indicates an expected call of AddCloudAccountRolesToUser.
func (mr *MockAuthzServiceClientMockRecorder) AddCloudAccountRolesToUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloudAccountRolesToUser", reflect.TypeOf((*MockAuthzServiceClient)(nil).AddCloudAccountRolesToUser), varargs...)
}

// AddPermissionToCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) AddPermissionToCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPermissionToCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermissionToCloudAccountRole indicates an expected call of AddPermissionToCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) AddPermissionToCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionToCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).AddPermissionToCloudAccountRole), varargs...)
}

// AddUserToCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) AddUserToCloudAccountRole(ctx context.Context, in *CloudAccountRoleUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUserToCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToCloudAccountRole indicates an expected call of AddUserToCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) AddUserToCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).AddUserToCloudAccountRole), varargs...)
}

// AssignDefaultCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) AssignDefaultCloudAccountRole(ctx context.Context, in *AssignDefaultCloudAccountRoleRequest, opts ...grpc.CallOption) (*CloudAccountRole, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignDefaultCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*CloudAccountRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDefaultCloudAccountRole indicates an expected call of AssignDefaultCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) AssignDefaultCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDefaultCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).AssignDefaultCloudAccountRole), varargs...)
}

// AssignSystemRole mocks base method.
func (m *MockAuthzServiceClient) AssignSystemRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignSystemRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignSystemRole indicates an expected call of AssignSystemRole.
func (mr *MockAuthzServiceClientMockRecorder) AssignSystemRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSystemRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).AssignSystemRole), varargs...)
}

// Check mocks base method.
func (m *MockAuthzServiceClient) Check(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*AuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockAuthzServiceClientMockRecorder) Check(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthzServiceClient)(nil).Check), varargs...)
}

// CheckInternal mocks base method.
func (m *MockAuthzServiceClient) CheckInternal(ctx context.Context, in *AuthorizationRequestInternal, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckInternal", varargs...)
	ret0, _ := ret[0].(*AuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInternal indicates an expected call of CheckInternal.
func (mr *MockAuthzServiceClientMockRecorder) CheckInternal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInternal", reflect.TypeOf((*MockAuthzServiceClient)(nil).CheckInternal), varargs...)
}

// CreateCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) CreateCloudAccountRole(ctx context.Context, in *CloudAccountRole, opts ...grpc.CallOption) (*CloudAccountRole, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*CloudAccountRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudAccountRole indicates an expected call of CreateCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) CreateCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).CreateCloudAccountRole), varargs...)
}

// CreatePolicy mocks base method.
func (m *MockAuthzServiceClient) CreatePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicy", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockAuthzServiceClientMockRecorder) CreatePolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockAuthzServiceClient)(nil).CreatePolicy), varargs...)
}

// DefaultCloudAccountRoleAssigned mocks base method.
func (m *MockAuthzServiceClient) DefaultCloudAccountRoleAssigned(ctx context.Context, in *DefaultCloudAccountRoleAssignedRequest, opts ...grpc.CallOption) (*DefaultCloudAccountRoleAssignedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DefaultCloudAccountRoleAssigned", varargs...)
	ret0, _ := ret[0].(*DefaultCloudAccountRoleAssignedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultCloudAccountRoleAssigned indicates an expected call of DefaultCloudAccountRoleAssigned.
func (mr *MockAuthzServiceClientMockRecorder) DefaultCloudAccountRoleAssigned(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCloudAccountRoleAssigned", reflect.TypeOf((*MockAuthzServiceClient)(nil).DefaultCloudAccountRoleAssigned), varargs...)
}

// GetCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) GetCloudAccountRole(ctx context.Context, in *CloudAccountRoleId, opts ...grpc.CallOption) (*CloudAccountRole, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*CloudAccountRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudAccountRole indicates an expected call of GetCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) GetCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).GetCloudAccountRole), varargs...)
}

// GetUser mocks base method.
func (m *MockAuthzServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserDetailed, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*UserDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthzServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthzServiceClient)(nil).GetUser), varargs...)
}

// ListResourceDefinition mocks base method.
func (m *MockAuthzServiceClient) ListResourceDefinition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResourceDefinitions, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceDefinition", varargs...)
	ret0, _ := ret[0].(*ResourceDefinitions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceDefinition indicates an expected call of ListResourceDefinition.
func (mr *MockAuthzServiceClientMockRecorder) ListResourceDefinition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDefinition", reflect.TypeOf((*MockAuthzServiceClient)(nil).ListResourceDefinition), varargs...)
}

// ListUsersByCloudAccount mocks base method.
func (m *MockAuthzServiceClient) ListUsersByCloudAccount(ctx context.Context, in *ListUsersByCloudAccountRequest, opts ...grpc.CallOption) (*ListUsersByCloudAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersByCloudAccount", varargs...)
	ret0, _ := ret[0].(*ListUsersByCloudAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByCloudAccount indicates an expected call of ListUsersByCloudAccount.
func (mr *MockAuthzServiceClientMockRecorder) ListUsersByCloudAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByCloudAccount", reflect.TypeOf((*MockAuthzServiceClient)(nil).ListUsersByCloudAccount), varargs...)
}

// Lookup mocks base method.
func (m *MockAuthzServiceClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lookup", varargs...)
	ret0, _ := ret[0].(*LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockAuthzServiceClientMockRecorder) Lookup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockAuthzServiceClient)(nil).Lookup), varargs...)
}

// LookupInternal mocks base method.
func (m *MockAuthzServiceClient) LookupInternal(ctx context.Context, in *LookupRequestInternal, opts ...grpc.CallOption) (*LookupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupInternal", varargs...)
	ret0, _ := ret[0].(*LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupInternal indicates an expected call of LookupInternal.
func (mr *MockAuthzServiceClientMockRecorder) LookupInternal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupInternal", reflect.TypeOf((*MockAuthzServiceClient)(nil).LookupInternal), varargs...)
}

// Ping mocks base method.
func (m *MockAuthzServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAuthzServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAuthzServiceClient)(nil).Ping), varargs...)
}

// QueryCloudAccountRoles mocks base method.
func (m *MockAuthzServiceClient) QueryCloudAccountRoles(ctx context.Context, in *CloudAccountRoleQuery, opts ...grpc.CallOption) (*CloudAccountRoles, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCloudAccountRoles", varargs...)
	ret0, _ := ret[0].(*CloudAccountRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCloudAccountRoles indicates an expected call of QueryCloudAccountRoles.
func (mr *MockAuthzServiceClientMockRecorder) QueryCloudAccountRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCloudAccountRoles", reflect.TypeOf((*MockAuthzServiceClient)(nil).QueryCloudAccountRoles), varargs...)
}

// RemoveCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) RemoveCloudAccountRole(ctx context.Context, in *CloudAccountRoleId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCloudAccountRole indicates an expected call of RemoveCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) RemoveCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).RemoveCloudAccountRole), varargs...)
}

// RemoveCloudAccountRolesFromUser mocks base method.
func (m *MockAuthzServiceClient) RemoveCloudAccountRolesFromUser(ctx context.Context, in *CloudAccountRolesUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveCloudAccountRolesFromUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCloudAccountRolesFromUser indicates an expected call of RemoveCloudAccountRolesFromUser.
func (mr *MockAuthzServiceClientMockRecorder) RemoveCloudAccountRolesFromUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudAccountRolesFromUser", reflect.TypeOf((*MockAuthzServiceClient)(nil).RemoveCloudAccountRolesFromUser), varargs...)
}

// RemovePermissionFromCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) RemovePermissionFromCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePermissionFromCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermissionFromCloudAccountRole indicates an expected call of RemovePermissionFromCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) RemovePermissionFromCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionFromCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).RemovePermissionFromCloudAccountRole), varargs...)
}

// RemovePolicy mocks base method.
func (m *MockAuthzServiceClient) RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePolicy", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicy indicates an expected call of RemovePolicy.
func (mr *MockAuthzServiceClientMockRecorder) RemovePolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockAuthzServiceClient)(nil).RemovePolicy), varargs...)
}

// RemoveResourceFromCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) RemoveResourceFromCloudAccountRole(ctx context.Context, in *CloudAccountRoleResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveResourceFromCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveResourceFromCloudAccountRole indicates an expected call of RemoveResourceFromCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) RemoveResourceFromCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResourceFromCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).RemoveResourceFromCloudAccountRole), varargs...)
}

// RemoveUserFromCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) RemoveUserFromCloudAccountRole(ctx context.Context, in *CloudAccountRoleUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUserFromCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserFromCloudAccountRole indicates an expected call of RemoveUserFromCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) RemoveUserFromCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).RemoveUserFromCloudAccountRole), varargs...)
}

// SystemRoleExists mocks base method.
func (m *MockAuthzServiceClient) SystemRoleExists(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*SystemRoleExistResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SystemRoleExists", varargs...)
	ret0, _ := ret[0].(*SystemRoleExistResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemRoleExists indicates an expected call of SystemRoleExists.
func (mr *MockAuthzServiceClientMockRecorder) SystemRoleExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemRoleExists", reflect.TypeOf((*MockAuthzServiceClient)(nil).SystemRoleExists), varargs...)
}

// UnassignSystemRole mocks base method.
func (m *MockAuthzServiceClient) UnassignSystemRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnassignSystemRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignSystemRole indicates an expected call of UnassignSystemRole.
func (mr *MockAuthzServiceClientMockRecorder) UnassignSystemRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignSystemRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).UnassignSystemRole), varargs...)
}

// UpdateCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) UpdateCloudAccountRole(ctx context.Context, in *CloudAccountRoleUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudAccountRole indicates an expected call of UpdateCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) UpdateCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).UpdateCloudAccountRole), varargs...)
}

// UpdatePermissionCloudAccountRole mocks base method.
func (m *MockAuthzServiceClient) UpdatePermissionCloudAccountRole(ctx context.Context, in *CloudAccountRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermissionCloudAccountRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionCloudAccountRole indicates an expected call of UpdatePermissionCloudAccountRole.
func (mr *MockAuthzServiceClientMockRecorder) UpdatePermissionCloudAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionCloudAccountRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).UpdatePermissionCloudAccountRole), varargs...)
}

// MockAuthzServiceServer is a mock of AuthzServiceServer interface.
type MockAuthzServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzServiceServerMockRecorder
}

// MockAuthzServiceServerMockRecorder is the mock recorder for MockAuthzServiceServer.
type MockAuthzServiceServerMockRecorder struct {
	mock *MockAuthzServiceServer
}

// NewMockAuthzServiceServer creates a new mock instance.
func NewMockAuthzServiceServer(ctrl *gomock.Controller) *MockAuthzServiceServer {
	mock := &MockAuthzServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthzServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzServiceServer) EXPECT() *MockAuthzServiceServerMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockAuthzServiceServer) Actions(arg0 context.Context, arg1 *ActionsRequest) (*ActionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions", arg0, arg1)
	ret0, _ := ret[0].(*ActionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Actions indicates an expected call of Actions.
func (mr *MockAuthzServiceServerMockRecorder) Actions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockAuthzServiceServer)(nil).Actions), arg0, arg1)
}

// AddCloudAccountRolesToUser mocks base method.
func (m *MockAuthzServiceServer) AddCloudAccountRolesToUser(arg0 context.Context, arg1 *CloudAccountRolesUserRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloudAccountRolesToUser", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCloudAccountRolesToUser indicates an expected call of AddCloudAccountRolesToUser.
func (mr *MockAuthzServiceServerMockRecorder) AddCloudAccountRolesToUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloudAccountRolesToUser", reflect.TypeOf((*MockAuthzServiceServer)(nil).AddCloudAccountRolesToUser), arg0, arg1)
}

// AddPermissionToCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) AddPermissionToCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRolePermissionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionToCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermissionToCloudAccountRole indicates an expected call of AddPermissionToCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) AddPermissionToCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionToCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).AddPermissionToCloudAccountRole), arg0, arg1)
}

// AddUserToCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) AddUserToCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRoleUserRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToCloudAccountRole indicates an expected call of AddUserToCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) AddUserToCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).AddUserToCloudAccountRole), arg0, arg1)
}

// AssignDefaultCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) AssignDefaultCloudAccountRole(arg0 context.Context, arg1 *AssignDefaultCloudAccountRoleRequest) (*CloudAccountRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignDefaultCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccountRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDefaultCloudAccountRole indicates an expected call of AssignDefaultCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) AssignDefaultCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDefaultCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).AssignDefaultCloudAccountRole), arg0, arg1)
}

// AssignSystemRole mocks base method.
func (m *MockAuthzServiceServer) AssignSystemRole(arg0 context.Context, arg1 *RoleRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignSystemRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignSystemRole indicates an expected call of AssignSystemRole.
func (mr *MockAuthzServiceServerMockRecorder) AssignSystemRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSystemRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).AssignSystemRole), arg0, arg1)
}

// Check mocks base method.
func (m *MockAuthzServiceServer) Check(arg0 context.Context, arg1 *AuthorizationRequest) (*AuthorizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*AuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockAuthzServiceServerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthzServiceServer)(nil).Check), arg0, arg1)
}

// CheckInternal mocks base method.
func (m *MockAuthzServiceServer) CheckInternal(arg0 context.Context, arg1 *AuthorizationRequestInternal) (*AuthorizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInternal", arg0, arg1)
	ret0, _ := ret[0].(*AuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInternal indicates an expected call of CheckInternal.
func (mr *MockAuthzServiceServerMockRecorder) CheckInternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInternal", reflect.TypeOf((*MockAuthzServiceServer)(nil).CheckInternal), arg0, arg1)
}

// CreateCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) CreateCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRole) (*CloudAccountRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccountRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudAccountRole indicates an expected call of CreateCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) CreateCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).CreateCloudAccountRole), arg0, arg1)
}

// CreatePolicy mocks base method.
func (m *MockAuthzServiceServer) CreatePolicy(arg0 context.Context, arg1 *PolicyRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockAuthzServiceServerMockRecorder) CreatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockAuthzServiceServer)(nil).CreatePolicy), arg0, arg1)
}

// DefaultCloudAccountRoleAssigned mocks base method.
func (m *MockAuthzServiceServer) DefaultCloudAccountRoleAssigned(arg0 context.Context, arg1 *DefaultCloudAccountRoleAssignedRequest) (*DefaultCloudAccountRoleAssignedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultCloudAccountRoleAssigned", arg0, arg1)
	ret0, _ := ret[0].(*DefaultCloudAccountRoleAssignedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultCloudAccountRoleAssigned indicates an expected call of DefaultCloudAccountRoleAssigned.
func (mr *MockAuthzServiceServerMockRecorder) DefaultCloudAccountRoleAssigned(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCloudAccountRoleAssigned", reflect.TypeOf((*MockAuthzServiceServer)(nil).DefaultCloudAccountRoleAssigned), arg0, arg1)
}

// GetCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) GetCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRoleId) (*CloudAccountRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccountRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudAccountRole indicates an expected call of GetCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) GetCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).GetCloudAccountRole), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockAuthzServiceServer) GetUser(arg0 context.Context, arg1 *GetUserRequest) (*UserDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*UserDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthzServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthzServiceServer)(nil).GetUser), arg0, arg1)
}

// ListResourceDefinition mocks base method.
func (m *MockAuthzServiceServer) ListResourceDefinition(arg0 context.Context, arg1 *emptypb.Empty) (*ResourceDefinitions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceDefinition", arg0, arg1)
	ret0, _ := ret[0].(*ResourceDefinitions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceDefinition indicates an expected call of ListResourceDefinition.
func (mr *MockAuthzServiceServerMockRecorder) ListResourceDefinition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDefinition", reflect.TypeOf((*MockAuthzServiceServer)(nil).ListResourceDefinition), arg0, arg1)
}

// ListUsersByCloudAccount mocks base method.
func (m *MockAuthzServiceServer) ListUsersByCloudAccount(arg0 context.Context, arg1 *ListUsersByCloudAccountRequest) (*ListUsersByCloudAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByCloudAccount", arg0, arg1)
	ret0, _ := ret[0].(*ListUsersByCloudAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByCloudAccount indicates an expected call of ListUsersByCloudAccount.
func (mr *MockAuthzServiceServerMockRecorder) ListUsersByCloudAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByCloudAccount", reflect.TypeOf((*MockAuthzServiceServer)(nil).ListUsersByCloudAccount), arg0, arg1)
}

// Lookup mocks base method.
func (m *MockAuthzServiceServer) Lookup(arg0 context.Context, arg1 *LookupRequest) (*LookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(*LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockAuthzServiceServerMockRecorder) Lookup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockAuthzServiceServer)(nil).Lookup), arg0, arg1)
}

// LookupInternal mocks base method.
func (m *MockAuthzServiceServer) LookupInternal(arg0 context.Context, arg1 *LookupRequestInternal) (*LookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupInternal", arg0, arg1)
	ret0, _ := ret[0].(*LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupInternal indicates an expected call of LookupInternal.
func (mr *MockAuthzServiceServerMockRecorder) LookupInternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupInternal", reflect.TypeOf((*MockAuthzServiceServer)(nil).LookupInternal), arg0, arg1)
}

// Ping mocks base method.
func (m *MockAuthzServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAuthzServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAuthzServiceServer)(nil).Ping), arg0, arg1)
}

// QueryCloudAccountRoles mocks base method.
func (m *MockAuthzServiceServer) QueryCloudAccountRoles(arg0 context.Context, arg1 *CloudAccountRoleQuery) (*CloudAccountRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCloudAccountRoles", arg0, arg1)
	ret0, _ := ret[0].(*CloudAccountRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCloudAccountRoles indicates an expected call of QueryCloudAccountRoles.
func (mr *MockAuthzServiceServerMockRecorder) QueryCloudAccountRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCloudAccountRoles", reflect.TypeOf((*MockAuthzServiceServer)(nil).QueryCloudAccountRoles), arg0, arg1)
}

// RemoveCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) RemoveCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRoleId) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCloudAccountRole indicates an expected call of RemoveCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) RemoveCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).RemoveCloudAccountRole), arg0, arg1)
}

// RemoveCloudAccountRolesFromUser mocks base method.
func (m *MockAuthzServiceServer) RemoveCloudAccountRolesFromUser(arg0 context.Context, arg1 *CloudAccountRolesUserRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudAccountRolesFromUser", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCloudAccountRolesFromUser indicates an expected call of RemoveCloudAccountRolesFromUser.
func (mr *MockAuthzServiceServerMockRecorder) RemoveCloudAccountRolesFromUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudAccountRolesFromUser", reflect.TypeOf((*MockAuthzServiceServer)(nil).RemoveCloudAccountRolesFromUser), arg0, arg1)
}

// RemovePermissionFromCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) RemovePermissionFromCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRolePermissionId) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionFromCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermissionFromCloudAccountRole indicates an expected call of RemovePermissionFromCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) RemovePermissionFromCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionFromCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).RemovePermissionFromCloudAccountRole), arg0, arg1)
}

// RemovePolicy mocks base method.
func (m *MockAuthzServiceServer) RemovePolicy(arg0 context.Context, arg1 *PolicyRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicy", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicy indicates an expected call of RemovePolicy.
func (mr *MockAuthzServiceServerMockRecorder) RemovePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockAuthzServiceServer)(nil).RemovePolicy), arg0, arg1)
}

// RemoveResourceFromCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) RemoveResourceFromCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRoleResourceRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveResourceFromCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveResourceFromCloudAccountRole indicates an expected call of RemoveResourceFromCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) RemoveResourceFromCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResourceFromCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).RemoveResourceFromCloudAccountRole), arg0, arg1)
}

// RemoveUserFromCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) RemoveUserFromCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRoleUserRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserFromCloudAccountRole indicates an expected call of RemoveUserFromCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) RemoveUserFromCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).RemoveUserFromCloudAccountRole), arg0, arg1)
}

// SystemRoleExists mocks base method.
func (m *MockAuthzServiceServer) SystemRoleExists(arg0 context.Context, arg1 *RoleRequest) (*SystemRoleExistResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemRoleExists", arg0, arg1)
	ret0, _ := ret[0].(*SystemRoleExistResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemRoleExists indicates an expected call of SystemRoleExists.
func (mr *MockAuthzServiceServerMockRecorder) SystemRoleExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemRoleExists", reflect.TypeOf((*MockAuthzServiceServer)(nil).SystemRoleExists), arg0, arg1)
}

// UnassignSystemRole mocks base method.
func (m *MockAuthzServiceServer) UnassignSystemRole(arg0 context.Context, arg1 *RoleRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignSystemRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignSystemRole indicates an expected call of UnassignSystemRole.
func (mr *MockAuthzServiceServerMockRecorder) UnassignSystemRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignSystemRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).UnassignSystemRole), arg0, arg1)
}

// UpdateCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) UpdateCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRoleUpdate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudAccountRole indicates an expected call of UpdateCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) UpdateCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).UpdateCloudAccountRole), arg0, arg1)
}

// UpdatePermissionCloudAccountRole mocks base method.
func (m *MockAuthzServiceServer) UpdatePermissionCloudAccountRole(arg0 context.Context, arg1 *CloudAccountRolePermissionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionCloudAccountRole", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionCloudAccountRole indicates an expected call of UpdatePermissionCloudAccountRole.
func (mr *MockAuthzServiceServerMockRecorder) UpdatePermissionCloudAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionCloudAccountRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).UpdatePermissionCloudAccountRole), arg0, arg1)
}

// mustEmbedUnimplementedAuthzServiceServer mocks base method.
func (m *MockAuthzServiceServer) mustEmbedUnimplementedAuthzServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthzServiceServer")
}

// mustEmbedUnimplementedAuthzServiceServer indicates an expected call of mustEmbedUnimplementedAuthzServiceServer.
func (mr *MockAuthzServiceServerMockRecorder) mustEmbedUnimplementedAuthzServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthzServiceServer", reflect.TypeOf((*MockAuthzServiceServer)(nil).mustEmbedUnimplementedAuthzServiceServer))
}

// MockUnsafeAuthzServiceServer is a mock of UnsafeAuthzServiceServer interface.
type MockUnsafeAuthzServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthzServiceServerMockRecorder
}

// MockUnsafeAuthzServiceServerMockRecorder is the mock recorder for MockUnsafeAuthzServiceServer.
type MockUnsafeAuthzServiceServerMockRecorder struct {
	mock *MockUnsafeAuthzServiceServer
}

// NewMockUnsafeAuthzServiceServer creates a new mock instance.
func NewMockUnsafeAuthzServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthzServiceServer {
	mock := &MockUnsafeAuthzServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthzServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthzServiceServer) EXPECT() *MockUnsafeAuthzServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthzServiceServer mocks base method.
func (m *MockUnsafeAuthzServiceServer) mustEmbedUnimplementedAuthzServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthzServiceServer")
}

// mustEmbedUnimplementedAuthzServiceServer indicates an expected call of mustEmbedUnimplementedAuthzServiceServer.
func (mr *MockUnsafeAuthzServiceServerMockRecorder) mustEmbedUnimplementedAuthzServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthzServiceServer", reflect.TypeOf((*MockUnsafeAuthzServiceServer)(nil).mustEmbedUnimplementedAuthzServiceServer))
}
