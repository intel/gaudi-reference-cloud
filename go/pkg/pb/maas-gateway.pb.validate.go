// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: maas-gateway.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListSupportedModels with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSupportedModels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSupportedModels with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSupportedModelsMultiError, or nil if none found.
func (m *ListSupportedModels) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSupportedModels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSupportedModelsValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSupportedModelsValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSupportedModelsValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSupportedModelsMultiError(errors)
	}

	return nil
}

// ListSupportedModelsMultiError is an error wrapping multiple validation
// errors returned by ListSupportedModels.ValidateAll() if the designated
// constraints aren't met.
type ListSupportedModelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSupportedModelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSupportedModelsMultiError) AllErrors() []error { return m }

// ListSupportedModelsValidationError is the validation error returned by
// ListSupportedModels.Validate if the designated constraints aren't met.
type ListSupportedModelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSupportedModelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSupportedModelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSupportedModelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSupportedModelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSupportedModelsValidationError) ErrorName() string {
	return "ListSupportedModelsValidationError"
}

// Error satisfies the builtin error interface
func (e ListSupportedModelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSupportedModels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSupportedModelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSupportedModelsValidationError{}

// Validate checks the field values on MaasRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaasRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaasRequestMultiError, or
// nil if none found.
func (m *MaasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MaasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetModel()); l < 2 || l > 150 {
		err := MaasRequestValidationError{
			field:  "Model",
			reason: "value length must be between 2 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRequest() == nil {
		err := MaasRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaasRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaasRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaasRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudAccountId

	// no validation rules for ProductName

	// no validation rules for ProductId

	if len(errors) > 0 {
		return MaasRequestMultiError(errors)
	}

	return nil
}

// MaasRequestMultiError is an error wrapping multiple validation errors
// returned by MaasRequest.ValidateAll() if the designated constraints aren't met.
type MaasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaasRequestMultiError) AllErrors() []error { return m }

// MaasRequestValidationError is the validation error returned by
// MaasRequest.Validate if the designated constraints aren't met.
type MaasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaasRequestValidationError) ErrorName() string { return "MaasRequestValidationError" }

// Error satisfies the builtin error interface
func (e MaasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaasRequestValidationError{}

// Validate checks the field values on MaasGenerateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaasGenerateStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaasGenerateStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaasGenerateStreamRequestMultiError, or nil if none found.
func (m *MaasGenerateStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MaasGenerateStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPrompt()) < 2 {
		err := MaasGenerateStreamRequestValidationError{
			field:  "Prompt",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaasGenerateStreamRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaasGenerateStreamRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaasGenerateStreamRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MaasGenerateStreamRequestMultiError(errors)
	}

	return nil
}

// MaasGenerateStreamRequestMultiError is an error wrapping multiple validation
// errors returned by MaasGenerateStreamRequest.ValidateAll() if the
// designated constraints aren't met.
type MaasGenerateStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaasGenerateStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaasGenerateStreamRequestMultiError) AllErrors() []error { return m }

// MaasGenerateStreamRequestValidationError is the validation error returned by
// MaasGenerateStreamRequest.Validate if the designated constraints aren't met.
type MaasGenerateStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaasGenerateStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaasGenerateStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaasGenerateStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaasGenerateStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaasGenerateStreamRequestValidationError) ErrorName() string {
	return "MaasGenerateStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MaasGenerateStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaasGenerateStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaasGenerateStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaasGenerateStreamRequestValidationError{}

// Validate checks the field values on MaasGenerateRequestParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaasGenerateRequestParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaasGenerateRequestParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaasGenerateRequestParamsMultiError, or nil if none found.
func (m *MaasGenerateRequestParams) ValidateAll() error {
	return m.validate(true)
}

func (m *MaasGenerateRequestParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetMaxNewTokens(); val < 1 || val >= 2048 {
		err := MaasGenerateRequestParamsValidationError{
			field:  "MaxNewTokens",
			reason: "value must be inside range [1, 2048)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Temperature != nil {

		if val := m.GetTemperature(); val < 0 || val >= 1 {
			err := MaasGenerateRequestParamsValidationError{
				field:  "Temperature",
				reason: "value must be inside range [0, 1)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MaasGenerateRequestParamsMultiError(errors)
	}

	return nil
}

// MaasGenerateRequestParamsMultiError is an error wrapping multiple validation
// errors returned by MaasGenerateRequestParams.ValidateAll() if the
// designated constraints aren't met.
type MaasGenerateRequestParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaasGenerateRequestParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaasGenerateRequestParamsMultiError) AllErrors() []error { return m }

// MaasGenerateRequestParamsValidationError is the validation error returned by
// MaasGenerateRequestParams.Validate if the designated constraints aren't met.
type MaasGenerateRequestParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaasGenerateRequestParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaasGenerateRequestParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaasGenerateRequestParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaasGenerateRequestParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaasGenerateRequestParamsValidationError) ErrorName() string {
	return "MaasGenerateRequestParamsValidationError"
}

// Error satisfies the builtin error interface
func (e MaasGenerateRequestParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaasGenerateRequestParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaasGenerateRequestParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaasGenerateRequestParamsValidationError{}

// Validate checks the field values on MaasResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MaasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaasResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MaasResponseMultiError, or
// nil if none found.
func (m *MaasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MaasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaasResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaasResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaasResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MaasResponseMultiError(errors)
	}

	return nil
}

// MaasResponseMultiError is an error wrapping multiple validation errors
// returned by MaasResponse.ValidateAll() if the designated constraints aren't met.
type MaasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaasResponseMultiError) AllErrors() []error { return m }

// MaasResponseValidationError is the validation error returned by
// MaasResponse.Validate if the designated constraints aren't met.
type MaasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaasResponseValidationError) ErrorName() string { return "MaasResponseValidationError" }

// Error satisfies the builtin error interface
func (e MaasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaasResponseValidationError{}

// Validate checks the field values on MaasGenerateStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaasGenerateStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaasGenerateStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaasGenerateStreamResponseMultiError, or nil if none found.
func (m *MaasGenerateStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MaasGenerateStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaasGenerateStreamResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaasGenerateStreamResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaasGenerateStreamResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTopTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaasGenerateStreamResponseValidationError{
						field:  fmt.Sprintf("TopTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaasGenerateStreamResponseValidationError{
						field:  fmt.Sprintf("TopTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaasGenerateStreamResponseValidationError{
					field:  fmt.Sprintf("TopTokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GeneratedText != nil {
		// no validation rules for GeneratedText
	}

	if m.Details != nil {

		if all {
			switch v := interface{}(m.GetDetails()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaasGenerateStreamResponseValidationError{
						field:  "Details",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaasGenerateStreamResponseValidationError{
						field:  "Details",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaasGenerateStreamResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RequestID != nil {
		// no validation rules for RequestID
	}

	if len(errors) > 0 {
		return MaasGenerateStreamResponseMultiError(errors)
	}

	return nil
}

// MaasGenerateStreamResponseMultiError is an error wrapping multiple
// validation errors returned by MaasGenerateStreamResponse.ValidateAll() if
// the designated constraints aren't met.
type MaasGenerateStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaasGenerateStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaasGenerateStreamResponseMultiError) AllErrors() []error { return m }

// MaasGenerateStreamResponseValidationError is the validation error returned
// by MaasGenerateStreamResponse.Validate if the designated constraints aren't met.
type MaasGenerateStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaasGenerateStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaasGenerateStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaasGenerateStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaasGenerateStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaasGenerateStreamResponseValidationError) ErrorName() string {
	return "MaasGenerateStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MaasGenerateStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaasGenerateStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaasGenerateStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaasGenerateStreamResponseValidationError{}

// Validate checks the field values on APIToken with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APIToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in APITokenMultiError, or nil
// if none found.
func (m *APIToken) ValidateAll() error {
	return m.validate(true)
}

func (m *APIToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	// no validation rules for Special

	if m.Logprob != nil {
		// no validation rules for Logprob
	}

	if len(errors) > 0 {
		return APITokenMultiError(errors)
	}

	return nil
}

// APITokenMultiError is an error wrapping multiple validation errors returned
// by APIToken.ValidateAll() if the designated constraints aren't met.
type APITokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenMultiError) AllErrors() []error { return m }

// APITokenValidationError is the validation error returned by
// APIToken.Validate if the designated constraints aren't met.
type APITokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenValidationError) ErrorName() string { return "APITokenValidationError" }

// Error satisfies the builtin error interface
func (e APITokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenValidationError{}

// Validate checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Model) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModelMultiError, or nil if none found.
func (m *Model) ValidateAll() error {
	return m.validate(true)
}

func (m *Model) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelName

	// no validation rules for ProductId

	// no validation rules for ProductName

	if len(errors) > 0 {
		return ModelMultiError(errors)
	}

	return nil
}

// ModelMultiError is an error wrapping multiple validation errors returned by
// Model.ValidateAll() if the designated constraints aren't met.
type ModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelMultiError) AllErrors() []error { return m }

// ModelValidationError is the validation error returned by Model.Validate if
// the designated constraints aren't met.
type ModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelValidationError) ErrorName() string { return "ModelValidationError" }

// Error satisfies the builtin error interface
func (e ModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelValidationError{}
