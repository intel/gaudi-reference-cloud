// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: quota_management.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuotaManagementServiceClient is the client API for QuotaManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaManagementServiceClient interface {
	Register(ctx context.Context, in *ServiceQuotaRegistrationRequest, opts ...grpc.CallOption) (*ServiceQuotaRegistrationResponse, error)
	ListRegisteredServices(ctx context.Context, in *ServicesListRequest, opts ...grpc.CallOption) (*ServicesListResponse, error)
	ListServiceResources(ctx context.Context, in *ServiceResourcesListRequest, opts ...grpc.CallOption) (*ServiceResourcesListResponse, error)
	GetServiceResource(ctx context.Context, in *ServiceResourceRequest, opts ...grpc.CallOption) (*ServiceResourceResponse, error)
	UpdateServiceRegistration(ctx context.Context, in *UpdateServiceRegistrationRequest, opts ...grpc.CallOption) (*ServiceQuotaRegistrationResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateServiceQuota(ctx context.Context, in *CreateServiceQuotaRequest, opts ...grpc.CallOption) (*CreateServiceQuotaResponse, error)
	GetServiceQuotaResource(ctx context.Context, in *ServiceQuotaResourceRequest, opts ...grpc.CallOption) (*ServiceQuotaResourceResponse, error)
	DeleteServiceQuotaResource(ctx context.Context, in *DeleteServiceQuotaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateServiceQuotaResource(ctx context.Context, in *UpdateQuotaServiceRequest, opts ...grpc.CallOption) (*UpdateQuotaServiceResponse, error)
	ListServiceQuota(ctx context.Context, in *ListServiceQuotaRequest, opts ...grpc.CallOption) (*ListServiceQuotaResponse, error)
	ListAllServiceQuotas(ctx context.Context, in *ListAllServiceQuotaRequest, opts ...grpc.CallOption) (*ListAllServiceQuotaResponse, error)
}

type quotaManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaManagementServiceClient(cc grpc.ClientConnInterface) QuotaManagementServiceClient {
	return &quotaManagementServiceClient{cc}
}

func (c *quotaManagementServiceClient) Register(ctx context.Context, in *ServiceQuotaRegistrationRequest, opts ...grpc.CallOption) (*ServiceQuotaRegistrationResponse, error) {
	out := new(ServiceQuotaRegistrationResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) ListRegisteredServices(ctx context.Context, in *ServicesListRequest, opts ...grpc.CallOption) (*ServicesListResponse, error) {
	out := new(ServicesListResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/ListRegisteredServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) ListServiceResources(ctx context.Context, in *ServiceResourcesListRequest, opts ...grpc.CallOption) (*ServiceResourcesListResponse, error) {
	out := new(ServiceResourcesListResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/ListServiceResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) GetServiceResource(ctx context.Context, in *ServiceResourceRequest, opts ...grpc.CallOption) (*ServiceResourceResponse, error) {
	out := new(ServiceResourceResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/GetServiceResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) UpdateServiceRegistration(ctx context.Context, in *UpdateServiceRegistrationRequest, opts ...grpc.CallOption) (*ServiceQuotaRegistrationResponse, error) {
	out := new(ServiceQuotaRegistrationResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/UpdateServiceRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) CreateServiceQuota(ctx context.Context, in *CreateServiceQuotaRequest, opts ...grpc.CallOption) (*CreateServiceQuotaResponse, error) {
	out := new(CreateServiceQuotaResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/CreateServiceQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) GetServiceQuotaResource(ctx context.Context, in *ServiceQuotaResourceRequest, opts ...grpc.CallOption) (*ServiceQuotaResourceResponse, error) {
	out := new(ServiceQuotaResourceResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/GetServiceQuotaResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) DeleteServiceQuotaResource(ctx context.Context, in *DeleteServiceQuotaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/DeleteServiceQuotaResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) UpdateServiceQuotaResource(ctx context.Context, in *UpdateQuotaServiceRequest, opts ...grpc.CallOption) (*UpdateQuotaServiceResponse, error) {
	out := new(UpdateQuotaServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/UpdateServiceQuotaResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) ListServiceQuota(ctx context.Context, in *ListServiceQuotaRequest, opts ...grpc.CallOption) (*ListServiceQuotaResponse, error) {
	out := new(ListServiceQuotaResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/ListServiceQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaManagementServiceClient) ListAllServiceQuotas(ctx context.Context, in *ListAllServiceQuotaRequest, opts ...grpc.CallOption) (*ListAllServiceQuotaResponse, error) {
	out := new(ListAllServiceQuotaResponse)
	err := c.cc.Invoke(ctx, "/proto.QuotaManagementService/ListAllServiceQuotas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaManagementServiceServer is the server API for QuotaManagementService service.
// All implementations must embed UnimplementedQuotaManagementServiceServer
// for forward compatibility
type QuotaManagementServiceServer interface {
	Register(context.Context, *ServiceQuotaRegistrationRequest) (*ServiceQuotaRegistrationResponse, error)
	ListRegisteredServices(context.Context, *ServicesListRequest) (*ServicesListResponse, error)
	ListServiceResources(context.Context, *ServiceResourcesListRequest) (*ServiceResourcesListResponse, error)
	GetServiceResource(context.Context, *ServiceResourceRequest) (*ServiceResourceResponse, error)
	UpdateServiceRegistration(context.Context, *UpdateServiceRegistrationRequest) (*ServiceQuotaRegistrationResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*emptypb.Empty, error)
	CreateServiceQuota(context.Context, *CreateServiceQuotaRequest) (*CreateServiceQuotaResponse, error)
	GetServiceQuotaResource(context.Context, *ServiceQuotaResourceRequest) (*ServiceQuotaResourceResponse, error)
	DeleteServiceQuotaResource(context.Context, *DeleteServiceQuotaRequest) (*emptypb.Empty, error)
	UpdateServiceQuotaResource(context.Context, *UpdateQuotaServiceRequest) (*UpdateQuotaServiceResponse, error)
	ListServiceQuota(context.Context, *ListServiceQuotaRequest) (*ListServiceQuotaResponse, error)
	ListAllServiceQuotas(context.Context, *ListAllServiceQuotaRequest) (*ListAllServiceQuotaResponse, error)
	mustEmbedUnimplementedQuotaManagementServiceServer()
}

// UnimplementedQuotaManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuotaManagementServiceServer struct {
}

func (UnimplementedQuotaManagementServiceServer) Register(context.Context, *ServiceQuotaRegistrationRequest) (*ServiceQuotaRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedQuotaManagementServiceServer) ListRegisteredServices(context.Context, *ServicesListRequest) (*ServicesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredServices not implemented")
}
func (UnimplementedQuotaManagementServiceServer) ListServiceResources(context.Context, *ServiceResourcesListRequest) (*ServiceResourcesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceResources not implemented")
}
func (UnimplementedQuotaManagementServiceServer) GetServiceResource(context.Context, *ServiceResourceRequest) (*ServiceResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceResource not implemented")
}
func (UnimplementedQuotaManagementServiceServer) UpdateServiceRegistration(context.Context, *UpdateServiceRegistrationRequest) (*ServiceQuotaRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceRegistration not implemented")
}
func (UnimplementedQuotaManagementServiceServer) DeleteService(context.Context, *DeleteServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedQuotaManagementServiceServer) CreateServiceQuota(context.Context, *CreateServiceQuotaRequest) (*CreateServiceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceQuota not implemented")
}
func (UnimplementedQuotaManagementServiceServer) GetServiceQuotaResource(context.Context, *ServiceQuotaResourceRequest) (*ServiceQuotaResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceQuotaResource not implemented")
}
func (UnimplementedQuotaManagementServiceServer) DeleteServiceQuotaResource(context.Context, *DeleteServiceQuotaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceQuotaResource not implemented")
}
func (UnimplementedQuotaManagementServiceServer) UpdateServiceQuotaResource(context.Context, *UpdateQuotaServiceRequest) (*UpdateQuotaServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceQuotaResource not implemented")
}
func (UnimplementedQuotaManagementServiceServer) ListServiceQuota(context.Context, *ListServiceQuotaRequest) (*ListServiceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceQuota not implemented")
}
func (UnimplementedQuotaManagementServiceServer) ListAllServiceQuotas(context.Context, *ListAllServiceQuotaRequest) (*ListAllServiceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllServiceQuotas not implemented")
}
func (UnimplementedQuotaManagementServiceServer) mustEmbedUnimplementedQuotaManagementServiceServer() {
}

// UnsafeQuotaManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaManagementServiceServer will
// result in compilation errors.
type UnsafeQuotaManagementServiceServer interface {
	mustEmbedUnimplementedQuotaManagementServiceServer()
}

func RegisterQuotaManagementServiceServer(s grpc.ServiceRegistrar, srv QuotaManagementServiceServer) {
	s.RegisterService(&QuotaManagementService_ServiceDesc, srv)
}

func _QuotaManagementService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceQuotaRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).Register(ctx, req.(*ServiceQuotaRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_ListRegisteredServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).ListRegisteredServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/ListRegisteredServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).ListRegisteredServices(ctx, req.(*ServicesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_ListServiceResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceResourcesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).ListServiceResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/ListServiceResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).ListServiceResources(ctx, req.(*ServiceResourcesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_GetServiceResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).GetServiceResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/GetServiceResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).GetServiceResource(ctx, req.(*ServiceResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_UpdateServiceRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).UpdateServiceRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/UpdateServiceRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).UpdateServiceRegistration(ctx, req.(*UpdateServiceRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_CreateServiceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).CreateServiceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/CreateServiceQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).CreateServiceQuota(ctx, req.(*CreateServiceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_GetServiceQuotaResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceQuotaResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).GetServiceQuotaResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/GetServiceQuotaResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).GetServiceQuotaResource(ctx, req.(*ServiceQuotaResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_DeleteServiceQuotaResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).DeleteServiceQuotaResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/DeleteServiceQuotaResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).DeleteServiceQuotaResource(ctx, req.(*DeleteServiceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_UpdateServiceQuotaResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).UpdateServiceQuotaResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/UpdateServiceQuotaResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).UpdateServiceQuotaResource(ctx, req.(*UpdateQuotaServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_ListServiceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).ListServiceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/ListServiceQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).ListServiceQuota(ctx, req.(*ListServiceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaManagementService_ListAllServiceQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllServiceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaManagementServiceServer).ListAllServiceQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QuotaManagementService/ListAllServiceQuotas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaManagementServiceServer).ListAllServiceQuotas(ctx, req.(*ListAllServiceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaManagementService_ServiceDesc is the grpc.ServiceDesc for QuotaManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.QuotaManagementService",
	HandlerType: (*QuotaManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _QuotaManagementService_Register_Handler,
		},
		{
			MethodName: "ListRegisteredServices",
			Handler:    _QuotaManagementService_ListRegisteredServices_Handler,
		},
		{
			MethodName: "ListServiceResources",
			Handler:    _QuotaManagementService_ListServiceResources_Handler,
		},
		{
			MethodName: "GetServiceResource",
			Handler:    _QuotaManagementService_GetServiceResource_Handler,
		},
		{
			MethodName: "UpdateServiceRegistration",
			Handler:    _QuotaManagementService_UpdateServiceRegistration_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _QuotaManagementService_DeleteService_Handler,
		},
		{
			MethodName: "CreateServiceQuota",
			Handler:    _QuotaManagementService_CreateServiceQuota_Handler,
		},
		{
			MethodName: "GetServiceQuotaResource",
			Handler:    _QuotaManagementService_GetServiceQuotaResource_Handler,
		},
		{
			MethodName: "DeleteServiceQuotaResource",
			Handler:    _QuotaManagementService_DeleteServiceQuotaResource_Handler,
		},
		{
			MethodName: "UpdateServiceQuotaResource",
			Handler:    _QuotaManagementService_UpdateServiceQuotaResource_Handler,
		},
		{
			MethodName: "ListServiceQuota",
			Handler:    _QuotaManagementService_ListServiceQuota_Handler,
		},
		{
			MethodName: "ListAllServiceQuotas",
			Handler:    _QuotaManagementService_ListAllServiceQuotas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quota_management.proto",
}
