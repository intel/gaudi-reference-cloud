// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: security-insights.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecurityInsightsClient is the client API for SecurityInsights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityInsightsClient interface {
	CreateRelease(ctx context.Context, in *K8SReleaseMD, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*K8SReleaseMD, error)
	GetAllReleases(ctx context.Context, in *ReleaseFilter, opts ...grpc.CallOption) (*K8SReleaseMDList, error)
	StoreReleaseSBOM(ctx context.Context, in *ReleaseSBOM, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StoreReleaseComponent(ctx context.Context, in *ReleaseComponents, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetReleaseComponent(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (SecurityInsights_GetReleaseComponentClient, error)
	GetReleaseSBOM(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*SBOM, error)
	StoreReleaseVulnerabilityReport(ctx context.Context, in *VulnerabilityReport, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StoreCISReport(ctx context.Context, in *CISReport, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetReleaseVulnerabilities(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*VulnerabilitiesResult, error)
	GetCISReport(ctx context.Context, in *GetCISRequest, opts ...grpc.CallOption) (*CISReport, error)
	UpdateRecommendationPolicy(ctx context.Context, in *RecommendationPolicy, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSummary(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*SecuritySummary, error)
	GetRecommendationPolicies(ctx context.Context, in *PolicyFilters, opts ...grpc.CallOption) (*AllPoliciesResponse, error)
	GetRecommendationPolicy(ctx context.Context, in *PolicyId, opts ...grpc.CallOption) (*PolicyDetails, error)
	GetUpdateRecommendation(ctx context.Context, in *RecommendationFilter, opts ...grpc.CallOption) (*UpdateRecommendations, error)
	GetAllComponents(ctx context.Context, in *ReleaseFilter, opts ...grpc.CallOption) (*ComponentList, error)
	CompareReleaseVulnerabilities(ctx context.Context, in *ReleaseComparisonFilter, opts ...grpc.CallOption) (*VulnerabilityComparisonReport, error)
}

type securityInsightsClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityInsightsClient(cc grpc.ClientConnInterface) SecurityInsightsClient {
	return &securityInsightsClient{cc}
}

func (c *securityInsightsClient) CreateRelease(ctx context.Context, in *K8SReleaseMD, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/CreateRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*K8SReleaseMD, error) {
	out := new(K8SReleaseMD)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetAllReleases(ctx context.Context, in *ReleaseFilter, opts ...grpc.CallOption) (*K8SReleaseMDList, error) {
	out := new(K8SReleaseMDList)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetAllReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) StoreReleaseSBOM(ctx context.Context, in *ReleaseSBOM, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/StoreReleaseSBOM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) StoreReleaseComponent(ctx context.Context, in *ReleaseComponents, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/StoreReleaseComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetReleaseComponent(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (SecurityInsights_GetReleaseComponentClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityInsights_ServiceDesc.Streams[0], "/proto.SecurityInsights/GetReleaseComponent", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityInsightsGetReleaseComponentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityInsights_GetReleaseComponentClient interface {
	Recv() (*ReleaseComponents, error)
	grpc.ClientStream
}

type securityInsightsGetReleaseComponentClient struct {
	grpc.ClientStream
}

func (x *securityInsightsGetReleaseComponentClient) Recv() (*ReleaseComponents, error) {
	m := new(ReleaseComponents)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityInsightsClient) GetReleaseSBOM(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*SBOM, error) {
	out := new(SBOM)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetReleaseSBOM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) StoreReleaseVulnerabilityReport(ctx context.Context, in *VulnerabilityReport, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/StoreReleaseVulnerabilityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) StoreCISReport(ctx context.Context, in *CISReport, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/StoreCISReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetReleaseVulnerabilities(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*VulnerabilitiesResult, error) {
	out := new(VulnerabilitiesResult)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetReleaseVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetCISReport(ctx context.Context, in *GetCISRequest, opts ...grpc.CallOption) (*CISReport, error) {
	out := new(CISReport)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetCISReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) UpdateRecommendationPolicy(ctx context.Context, in *RecommendationPolicy, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/UpdateRecommendationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetSummary(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*SecuritySummary, error) {
	out := new(SecuritySummary)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetRecommendationPolicies(ctx context.Context, in *PolicyFilters, opts ...grpc.CallOption) (*AllPoliciesResponse, error) {
	out := new(AllPoliciesResponse)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetRecommendationPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetRecommendationPolicy(ctx context.Context, in *PolicyId, opts ...grpc.CallOption) (*PolicyDetails, error) {
	out := new(PolicyDetails)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetRecommendationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetUpdateRecommendation(ctx context.Context, in *RecommendationFilter, opts ...grpc.CallOption) (*UpdateRecommendations, error) {
	out := new(UpdateRecommendations)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetUpdateRecommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) GetAllComponents(ctx context.Context, in *ReleaseFilter, opts ...grpc.CallOption) (*ComponentList, error) {
	out := new(ComponentList)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/GetAllComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityInsightsClient) CompareReleaseVulnerabilities(ctx context.Context, in *ReleaseComparisonFilter, opts ...grpc.CallOption) (*VulnerabilityComparisonReport, error) {
	out := new(VulnerabilityComparisonReport)
	err := c.cc.Invoke(ctx, "/proto.SecurityInsights/CompareReleaseVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityInsightsServer is the server API for SecurityInsights service.
// All implementations must embed UnimplementedSecurityInsightsServer
// for forward compatibility
type SecurityInsightsServer interface {
	CreateRelease(context.Context, *K8SReleaseMD) (*emptypb.Empty, error)
	GetRelease(context.Context, *GetReleaseRequest) (*K8SReleaseMD, error)
	GetAllReleases(context.Context, *ReleaseFilter) (*K8SReleaseMDList, error)
	StoreReleaseSBOM(context.Context, *ReleaseSBOM) (*emptypb.Empty, error)
	StoreReleaseComponent(context.Context, *ReleaseComponents) (*emptypb.Empty, error)
	GetReleaseComponent(*GetReleaseRequest, SecurityInsights_GetReleaseComponentServer) error
	GetReleaseSBOM(context.Context, *GetReleaseRequest) (*SBOM, error)
	StoreReleaseVulnerabilityReport(context.Context, *VulnerabilityReport) (*emptypb.Empty, error)
	StoreCISReport(context.Context, *CISReport) (*emptypb.Empty, error)
	GetReleaseVulnerabilities(context.Context, *GetReleaseRequest) (*VulnerabilitiesResult, error)
	GetCISReport(context.Context, *GetCISRequest) (*CISReport, error)
	UpdateRecommendationPolicy(context.Context, *RecommendationPolicy) (*emptypb.Empty, error)
	GetSummary(context.Context, *GetReleaseRequest) (*SecuritySummary, error)
	GetRecommendationPolicies(context.Context, *PolicyFilters) (*AllPoliciesResponse, error)
	GetRecommendationPolicy(context.Context, *PolicyId) (*PolicyDetails, error)
	GetUpdateRecommendation(context.Context, *RecommendationFilter) (*UpdateRecommendations, error)
	GetAllComponents(context.Context, *ReleaseFilter) (*ComponentList, error)
	CompareReleaseVulnerabilities(context.Context, *ReleaseComparisonFilter) (*VulnerabilityComparisonReport, error)
	mustEmbedUnimplementedSecurityInsightsServer()
}

// UnimplementedSecurityInsightsServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityInsightsServer struct {
}

func (UnimplementedSecurityInsightsServer) CreateRelease(context.Context, *K8SReleaseMD) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedSecurityInsightsServer) GetRelease(context.Context, *GetReleaseRequest) (*K8SReleaseMD, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (UnimplementedSecurityInsightsServer) GetAllReleases(context.Context, *ReleaseFilter) (*K8SReleaseMDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReleases not implemented")
}
func (UnimplementedSecurityInsightsServer) StoreReleaseSBOM(context.Context, *ReleaseSBOM) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreReleaseSBOM not implemented")
}
func (UnimplementedSecurityInsightsServer) StoreReleaseComponent(context.Context, *ReleaseComponents) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreReleaseComponent not implemented")
}
func (UnimplementedSecurityInsightsServer) GetReleaseComponent(*GetReleaseRequest, SecurityInsights_GetReleaseComponentServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReleaseComponent not implemented")
}
func (UnimplementedSecurityInsightsServer) GetReleaseSBOM(context.Context, *GetReleaseRequest) (*SBOM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseSBOM not implemented")
}
func (UnimplementedSecurityInsightsServer) StoreReleaseVulnerabilityReport(context.Context, *VulnerabilityReport) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreReleaseVulnerabilityReport not implemented")
}
func (UnimplementedSecurityInsightsServer) StoreCISReport(context.Context, *CISReport) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCISReport not implemented")
}
func (UnimplementedSecurityInsightsServer) GetReleaseVulnerabilities(context.Context, *GetReleaseRequest) (*VulnerabilitiesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseVulnerabilities not implemented")
}
func (UnimplementedSecurityInsightsServer) GetCISReport(context.Context, *GetCISRequest) (*CISReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCISReport not implemented")
}
func (UnimplementedSecurityInsightsServer) UpdateRecommendationPolicy(context.Context, *RecommendationPolicy) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendationPolicy not implemented")
}
func (UnimplementedSecurityInsightsServer) GetSummary(context.Context, *GetReleaseRequest) (*SecuritySummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedSecurityInsightsServer) GetRecommendationPolicies(context.Context, *PolicyFilters) (*AllPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationPolicies not implemented")
}
func (UnimplementedSecurityInsightsServer) GetRecommendationPolicy(context.Context, *PolicyId) (*PolicyDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationPolicy not implemented")
}
func (UnimplementedSecurityInsightsServer) GetUpdateRecommendation(context.Context, *RecommendationFilter) (*UpdateRecommendations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateRecommendation not implemented")
}
func (UnimplementedSecurityInsightsServer) GetAllComponents(context.Context, *ReleaseFilter) (*ComponentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllComponents not implemented")
}
func (UnimplementedSecurityInsightsServer) CompareReleaseVulnerabilities(context.Context, *ReleaseComparisonFilter) (*VulnerabilityComparisonReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareReleaseVulnerabilities not implemented")
}
func (UnimplementedSecurityInsightsServer) mustEmbedUnimplementedSecurityInsightsServer() {}

// UnsafeSecurityInsightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityInsightsServer will
// result in compilation errors.
type UnsafeSecurityInsightsServer interface {
	mustEmbedUnimplementedSecurityInsightsServer()
}

func RegisterSecurityInsightsServer(s grpc.ServiceRegistrar, srv SecurityInsightsServer) {
	s.RegisterService(&SecurityInsights_ServiceDesc, srv)
}

func _SecurityInsights_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SReleaseMD)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).CreateRelease(ctx, req.(*K8SReleaseMD))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetRelease(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetAllReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetAllReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetAllReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetAllReleases(ctx, req.(*ReleaseFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_StoreReleaseSBOM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSBOM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).StoreReleaseSBOM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/StoreReleaseSBOM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).StoreReleaseSBOM(ctx, req.(*ReleaseSBOM))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_StoreReleaseComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseComponents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).StoreReleaseComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/StoreReleaseComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).StoreReleaseComponent(ctx, req.(*ReleaseComponents))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetReleaseComponent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetReleaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityInsightsServer).GetReleaseComponent(m, &securityInsightsGetReleaseComponentServer{stream})
}

type SecurityInsights_GetReleaseComponentServer interface {
	Send(*ReleaseComponents) error
	grpc.ServerStream
}

type securityInsightsGetReleaseComponentServer struct {
	grpc.ServerStream
}

func (x *securityInsightsGetReleaseComponentServer) Send(m *ReleaseComponents) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityInsights_GetReleaseSBOM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetReleaseSBOM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetReleaseSBOM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetReleaseSBOM(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_StoreReleaseVulnerabilityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VulnerabilityReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).StoreReleaseVulnerabilityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/StoreReleaseVulnerabilityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).StoreReleaseVulnerabilityReport(ctx, req.(*VulnerabilityReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_StoreCISReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CISReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).StoreCISReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/StoreCISReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).StoreCISReport(ctx, req.(*CISReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetReleaseVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetReleaseVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetReleaseVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetReleaseVulnerabilities(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetCISReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCISRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetCISReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetCISReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetCISReport(ctx, req.(*GetCISRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_UpdateRecommendationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).UpdateRecommendationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/UpdateRecommendationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).UpdateRecommendationPolicy(ctx, req.(*RecommendationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetSummary(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetRecommendationPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetRecommendationPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetRecommendationPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetRecommendationPolicies(ctx, req.(*PolicyFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetRecommendationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetRecommendationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetRecommendationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetRecommendationPolicy(ctx, req.(*PolicyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetUpdateRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetUpdateRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetUpdateRecommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetUpdateRecommendation(ctx, req.(*RecommendationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_GetAllComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).GetAllComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/GetAllComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).GetAllComponents(ctx, req.(*ReleaseFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityInsights_CompareReleaseVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseComparisonFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityInsightsServer).CompareReleaseVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecurityInsights/CompareReleaseVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityInsightsServer).CompareReleaseVulnerabilities(ctx, req.(*ReleaseComparisonFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityInsights_ServiceDesc is the grpc.ServiceDesc for SecurityInsights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityInsights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SecurityInsights",
	HandlerType: (*SecurityInsightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelease",
			Handler:    _SecurityInsights_CreateRelease_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _SecurityInsights_GetRelease_Handler,
		},
		{
			MethodName: "GetAllReleases",
			Handler:    _SecurityInsights_GetAllReleases_Handler,
		},
		{
			MethodName: "StoreReleaseSBOM",
			Handler:    _SecurityInsights_StoreReleaseSBOM_Handler,
		},
		{
			MethodName: "StoreReleaseComponent",
			Handler:    _SecurityInsights_StoreReleaseComponent_Handler,
		},
		{
			MethodName: "GetReleaseSBOM",
			Handler:    _SecurityInsights_GetReleaseSBOM_Handler,
		},
		{
			MethodName: "StoreReleaseVulnerabilityReport",
			Handler:    _SecurityInsights_StoreReleaseVulnerabilityReport_Handler,
		},
		{
			MethodName: "StoreCISReport",
			Handler:    _SecurityInsights_StoreCISReport_Handler,
		},
		{
			MethodName: "GetReleaseVulnerabilities",
			Handler:    _SecurityInsights_GetReleaseVulnerabilities_Handler,
		},
		{
			MethodName: "GetCISReport",
			Handler:    _SecurityInsights_GetCISReport_Handler,
		},
		{
			MethodName: "UpdateRecommendationPolicy",
			Handler:    _SecurityInsights_UpdateRecommendationPolicy_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _SecurityInsights_GetSummary_Handler,
		},
		{
			MethodName: "GetRecommendationPolicies",
			Handler:    _SecurityInsights_GetRecommendationPolicies_Handler,
		},
		{
			MethodName: "GetRecommendationPolicy",
			Handler:    _SecurityInsights_GetRecommendationPolicy_Handler,
		},
		{
			MethodName: "GetUpdateRecommendation",
			Handler:    _SecurityInsights_GetUpdateRecommendation_Handler,
		},
		{
			MethodName: "GetAllComponents",
			Handler:    _SecurityInsights_GetAllComponents_Handler,
		},
		{
			MethodName: "CompareReleaseVulnerabilities",
			Handler:    _SecurityInsights_CompareReleaseVulnerabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReleaseComponent",
			Handler:       _SecurityInsights_GetReleaseComponent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "security-insights.proto",
}
