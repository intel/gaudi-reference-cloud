// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: maas-gateway.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaasGatewayClient is the client API for MaasGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaasGatewayClient interface {
	GenerateStream(ctx context.Context, in *MaasRequest, opts ...grpc.CallOption) (MaasGateway_GenerateStreamClient, error)
	GetSupportedModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSupportedModels, error)
}

type maasGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewMaasGatewayClient(cc grpc.ClientConnInterface) MaasGatewayClient {
	return &maasGatewayClient{cc}
}

func (c *maasGatewayClient) GenerateStream(ctx context.Context, in *MaasRequest, opts ...grpc.CallOption) (MaasGateway_GenerateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaasGateway_ServiceDesc.Streams[0], "/proto.MaasGateway/GenerateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &maasGatewayGenerateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MaasGateway_GenerateStreamClient interface {
	Recv() (*MaasResponse, error)
	grpc.ClientStream
}

type maasGatewayGenerateStreamClient struct {
	grpc.ClientStream
}

func (x *maasGatewayGenerateStreamClient) Recv() (*MaasResponse, error) {
	m := new(MaasResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maasGatewayClient) GetSupportedModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSupportedModels, error) {
	out := new(ListSupportedModels)
	err := c.cc.Invoke(ctx, "/proto.MaasGateway/GetSupportedModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaasGatewayServer is the server API for MaasGateway service.
// All implementations must embed UnimplementedMaasGatewayServer
// for forward compatibility
type MaasGatewayServer interface {
	GenerateStream(*MaasRequest, MaasGateway_GenerateStreamServer) error
	GetSupportedModels(context.Context, *emptypb.Empty) (*ListSupportedModels, error)
	mustEmbedUnimplementedMaasGatewayServer()
}

// UnimplementedMaasGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedMaasGatewayServer struct {
}

func (UnimplementedMaasGatewayServer) GenerateStream(*MaasRequest, MaasGateway_GenerateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateStream not implemented")
}
func (UnimplementedMaasGatewayServer) GetSupportedModels(context.Context, *emptypb.Empty) (*ListSupportedModels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedModels not implemented")
}
func (UnimplementedMaasGatewayServer) mustEmbedUnimplementedMaasGatewayServer() {}

// UnsafeMaasGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaasGatewayServer will
// result in compilation errors.
type UnsafeMaasGatewayServer interface {
	mustEmbedUnimplementedMaasGatewayServer()
}

func RegisterMaasGatewayServer(s grpc.ServiceRegistrar, srv MaasGatewayServer) {
	s.RegisterService(&MaasGateway_ServiceDesc, srv)
}

func _MaasGateway_GenerateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MaasRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaasGatewayServer).GenerateStream(m, &maasGatewayGenerateStreamServer{stream})
}

type MaasGateway_GenerateStreamServer interface {
	Send(*MaasResponse) error
	grpc.ServerStream
}

type maasGatewayGenerateStreamServer struct {
	grpc.ServerStream
}

func (x *maasGatewayGenerateStreamServer) Send(m *MaasResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MaasGateway_GetSupportedModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaasGatewayServer).GetSupportedModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MaasGateway/GetSupportedModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaasGatewayServer).GetSupportedModels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MaasGateway_ServiceDesc is the grpc.ServiceDesc for MaasGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaasGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MaasGateway",
	HandlerType: (*MaasGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedModels",
			Handler:    _MaasGateway_GetSupportedModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateStream",
			Handler:       _MaasGateway_GenerateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "maas-gateway.proto",
}
