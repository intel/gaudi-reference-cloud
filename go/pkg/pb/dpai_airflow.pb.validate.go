// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dpai_airflow.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DpaiAirflowSize with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSize with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeMultiError, or nil if none found.
func (m *DpaiAirflowSize) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for NumberOfNodesDefault

	// no validation rules for NodeSizeId

	// no validation rules for BackendDatabaseSizeId

	// no validation rules for LogDirectoryDiskSize

	// no validation rules for RedisDiskSize

	if all {
		switch v := interface{}(m.GetAirflowSizeWebserverProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowSizeWebserverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowSizeWebserverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowSizeWebserverProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeValidationError{
				field:  "AirflowSizeWebserverProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowSchedulerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowSchedulerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowSchedulerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowSchedulerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeValidationError{
				field:  "AirflowSchedulerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowWorkerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowWorkerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowWorkerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowWorkerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeValidationError{
				field:  "AirflowWorkerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowTriggerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowTriggerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "AirflowTriggerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowTriggerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeValidationError{
				field:  "AirflowTriggerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowSizeMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeMultiError is an error wrapping multiple validation errors
// returned by DpaiAirflowSize.ValidateAll() if the designated constraints
// aren't met.
type DpaiAirflowSizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeValidationError is the validation error returned by
// DpaiAirflowSize.Validate if the designated constraints aren't met.
type DpaiAirflowSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeValidationError) ErrorName() string { return "DpaiAirflowSizeValidationError" }

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeValidationError{}

// Validate checks the field values on DpaiAirflowSizeWebServerProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiAirflowSizeWebServerProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeWebServerProperties
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeWebServerPropertiesMultiError, or nil if none found.
func (m *DpaiAirflowSizeWebServerProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeWebServerProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WebserverCount

	// no validation rules for WebserverCpuLimit

	// no validation rules for WebserverMemoryLimit

	// no validation rules for WebserverCpuRequest

	// no validation rules for WebserverMemoryRequest

	if len(errors) > 0 {
		return DpaiAirflowSizeWebServerPropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeWebServerPropertiesMultiError is an error wrapping multiple
// validation errors returned by
// DpaiAirflowSizeWebServerProperties.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowSizeWebServerPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeWebServerPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeWebServerPropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeWebServerPropertiesValidationError is the validation error
// returned by DpaiAirflowSizeWebServerProperties.Validate if the designated
// constraints aren't met.
type DpaiAirflowSizeWebServerPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeWebServerPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeWebServerPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeWebServerPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeWebServerPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeWebServerPropertiesValidationError) ErrorName() string {
	return "DpaiAirflowSizeWebServerPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeWebServerPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeWebServerProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeWebServerPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeWebServerPropertiesValidationError{}

// Validate checks the field values on DpaiAirflowSchedulerProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSchedulerProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSchedulerProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowSchedulerPropertiesMultiError, or nil if none found.
func (m *DpaiAirflowSchedulerProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSchedulerProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SchedularCountDefault

	// no validation rules for SchedulerCountMin

	// no validation rules for SchedulerCountMax

	// no validation rules for SchedulerCpuLimit

	// no validation rules for SchedulerMemoryLimit

	// no validation rules for SchedulerMemoryRequest

	// no validation rules for SchedulerCpuRequest

	if len(errors) > 0 {
		return DpaiAirflowSchedulerPropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowSchedulerPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSchedulerProperties.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowSchedulerPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSchedulerPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSchedulerPropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowSchedulerPropertiesValidationError is the validation error
// returned by DpaiAirflowSchedulerProperties.Validate if the designated
// constraints aren't met.
type DpaiAirflowSchedulerPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSchedulerPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSchedulerPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSchedulerPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSchedulerPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSchedulerPropertiesValidationError) ErrorName() string {
	return "DpaiAirflowSchedulerPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSchedulerPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSchedulerProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSchedulerPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSchedulerPropertiesValidationError{}

// Validate checks the field values on DpaiAirflowWorkerProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowWorkerProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowWorkerProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowWorkerPropertiesMultiError, or nil if none found.
func (m *DpaiAirflowWorkerProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowWorkerProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkerCountDefault

	// no validation rules for WorkerCountMin

	// no validation rules for WorkerCountMax

	// no validation rules for WorkerMemoryLimit

	// no validation rules for WorkerMemoryRequest

	// no validation rules for WorkerCpuLimit

	// no validation rules for WorkerCpuRequest

	if len(errors) > 0 {
		return DpaiAirflowWorkerPropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowWorkerPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowWorkerProperties.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowWorkerPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowWorkerPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowWorkerPropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowWorkerPropertiesValidationError is the validation error returned
// by DpaiAirflowWorkerProperties.Validate if the designated constraints
// aren't met.
type DpaiAirflowWorkerPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowWorkerPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowWorkerPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowWorkerPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowWorkerPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowWorkerPropertiesValidationError) ErrorName() string {
	return "DpaiAirflowWorkerPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowWorkerPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowWorkerProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowWorkerPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowWorkerPropertiesValidationError{}

// Validate checks the field values on DpaiAirflowTriggerProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowTriggerProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowTriggerProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowTriggerPropertiesMultiError, or nil if none found.
func (m *DpaiAirflowTriggerProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowTriggerProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TriggerCount

	// no validation rules for TriggerMemoryLimit

	// no validation rules for TriggerMemoryRequest

	// no validation rules for TriggerCpuLimit

	// no validation rules for TriggerCpuRequest

	if len(errors) > 0 {
		return DpaiAirflowTriggerPropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowTriggerPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowTriggerProperties.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowTriggerPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowTriggerPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowTriggerPropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowTriggerPropertiesValidationError is the validation error returned
// by DpaiAirflowTriggerProperties.Validate if the designated constraints
// aren't met.
type DpaiAirflowTriggerPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowTriggerPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowTriggerPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowTriggerPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowTriggerPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowTriggerPropertiesValidationError) ErrorName() string {
	return "DpaiAirflowTriggerPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowTriggerPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowTriggerProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowTriggerPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowTriggerPropertiesValidationError{}

// Validate checks the field values on DpaiAirflowSizeCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeCreateRequestMultiError, or nil if none found.
func (m *DpaiAirflowSizeCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for NumberOfNodesDefault

	// no validation rules for NodeSizeId

	// no validation rules for BackendDatabaseSizeId

	// no validation rules for LogDirectoryDiskSize

	// no validation rules for RedisDiskSize

	if all {
		switch v := interface{}(m.GetAirflowSizeWebserverProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowSizeWebserverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowSizeWebserverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowSizeWebserverProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeCreateRequestValidationError{
				field:  "AirflowSizeWebserverProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowSchedulerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowSchedulerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowSchedulerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowSchedulerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeCreateRequestValidationError{
				field:  "AirflowSchedulerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowWorkerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowWorkerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowWorkerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowWorkerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeCreateRequestValidationError{
				field:  "AirflowWorkerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowTriggerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowTriggerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeCreateRequestValidationError{
					field:  "AirflowTriggerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowTriggerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeCreateRequestValidationError{
				field:  "AirflowTriggerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowSizeCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowSizeCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeCreateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeCreateRequestValidationError is the validation error returned
// by DpaiAirflowSizeCreateRequest.Validate if the designated constraints
// aren't met.
type DpaiAirflowSizeCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeCreateRequestValidationError) ErrorName() string {
	return "DpaiAirflowSizeCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeCreateRequestValidationError{}

// Validate checks the field values on DpaiAirflowSizeListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeListRequestMultiError, or nil if none found.
func (m *DpaiAirflowSizeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiAirflowSizeListRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeListRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeListRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowSizeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeListRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeListRequestValidationError is the validation error returned
// by DpaiAirflowSizeListRequest.Validate if the designated constraints aren't met.
type DpaiAirflowSizeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeListRequestValidationError) ErrorName() string {
	return "DpaiAirflowSizeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeListRequestValidationError{}

// Validate checks the field values on DpaiAirflowSizeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeListResponseMultiError, or nil if none found.
func (m *DpaiAirflowSizeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiAirflowSizeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiAirflowSizeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiAirflowSizeListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiAirflowSizeListResponseMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeListResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowSizeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeListResponseMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeListResponseValidationError is the validation error returned
// by DpaiAirflowSizeListResponse.Validate if the designated constraints
// aren't met.
type DpaiAirflowSizeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeListResponseValidationError) ErrorName() string {
	return "DpaiAirflowSizeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeListResponseValidationError{}

// Validate checks the field values on DpaiAirflowSizeGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeGetByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeGetByIdRequestMultiError, or nil if none found.
func (m *DpaiAirflowSizeGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowSizeGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeGetByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowSizeGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeGetByIdRequestValidationError is the validation error
// returned by DpaiAirflowSizeGetByIdRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowSizeGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeGetByIdRequestValidationError) ErrorName() string {
	return "DpaiAirflowSizeGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeGetByIdRequestValidationError{}

// Validate checks the field values on DpaiAirflowSizeGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeGetByNameRequestMultiError, or nil if none found.
func (m *DpaiAirflowSizeGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	if len(errors) > 0 {
		return DpaiAirflowSizeGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeGetByNameRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowSizeGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeGetByNameRequestValidationError is the validation error
// returned by DpaiAirflowSizeGetByNameRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowSizeGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeGetByNameRequestValidationError) ErrorName() string {
	return "DpaiAirflowSizeGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeGetByNameRequestValidationError{}

// Validate checks the field values on DpaiAirflowSizeUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeUpdateRequestMultiError, or nil if none found.
func (m *DpaiAirflowSizeUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for NumberOfNodesDefault

	// no validation rules for NodeSizeId

	// no validation rules for BackendDatabaseSizeId

	// no validation rules for LogDirectoryDiskSize

	// no validation rules for RedisDiskSize

	if all {
		switch v := interface{}(m.GetAirflowSizeWebserverProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowSizeWebserverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowSizeWebserverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowSizeWebserverProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeUpdateRequestValidationError{
				field:  "AirflowSizeWebserverProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowSchedulerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowSchedulerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowSchedulerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowSchedulerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeUpdateRequestValidationError{
				field:  "AirflowSchedulerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowWorkerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowWorkerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowWorkerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowWorkerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeUpdateRequestValidationError{
				field:  "AirflowWorkerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAirflowTriggerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowTriggerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowSizeUpdateRequestValidationError{
					field:  "AirflowTriggerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowTriggerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowSizeUpdateRequestValidationError{
				field:  "AirflowTriggerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowSizeUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowSizeUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeUpdateRequestValidationError is the validation error returned
// by DpaiAirflowSizeUpdateRequest.Validate if the designated constraints
// aren't met.
type DpaiAirflowSizeUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeUpdateRequestValidationError) ErrorName() string {
	return "DpaiAirflowSizeUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeUpdateRequestValidationError{}

// Validate checks the field values on DpaiAirflowSizeDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeDeleteRequestMultiError, or nil if none found.
func (m *DpaiAirflowSizeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowSizeDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowSizeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeDeleteRequestValidationError is the validation error returned
// by DpaiAirflowSizeDeleteRequest.Validate if the designated constraints
// aren't met.
type DpaiAirflowSizeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeDeleteRequestValidationError) ErrorName() string {
	return "DpaiAirflowSizeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeDeleteRequestValidationError{}

// Validate checks the field values on DpaiAirflowSizeDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizeDeleteResponseMultiError, or nil if none found.
func (m *DpaiAirflowSizeDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiAirflowSizeDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizeDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowSizeDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowSizeDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizeDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizeDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiAirflowSizeDeleteResponseValidationError is the validation error
// returned by DpaiAirflowSizeDeleteResponse.Validate if the designated
// constraints aren't met.
type DpaiAirflowSizeDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizeDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizeDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizeDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizeDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizeDeleteResponseValidationError) ErrorName() string {
	return "DpaiAirflowSizeDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizeDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizeDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizeDeleteResponseValidationError{}

// Validate checks the field values on DpaiAirflowVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionMultiError, or nil if none found.
func (m *DpaiAirflowVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for BackendDatabaseVersionId

	if all {
		switch v := interface{}(m.GetAirflowVersionProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "AirflowVersionProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "AirflowVersionProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowVersionProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionValidationError{
				field:  "AirflowVersionProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExecutorType

	if all {
		switch v := interface{}(m.GetImageReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionValidationError{
				field:  "ImageReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for BackwardCompatibleFrom

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowVersionMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionMultiError is an error wrapping multiple validation errors
// returned by DpaiAirflowVersion.ValidateAll() if the designated constraints
// aren't met.
type DpaiAirflowVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionValidationError is the validation error returned by
// DpaiAirflowVersion.Validate if the designated constraints aren't met.
type DpaiAirflowVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionValidationError) ErrorName() string {
	return "DpaiAirflowVersionValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionValidationError{}

// Validate checks the field values on DpaiAirflowVersionProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowVersionProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionPropertiesMultiError, or nil if none found.
func (m *DpaiAirflowVersionProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AirflowVersion

	// no validation rules for PythonVersion

	// no validation rules for PostgresVersion

	// no validation rules for RedisVersion

	if len(errors) > 0 {
		return DpaiAirflowVersionPropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowVersionProperties.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowVersionPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionPropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionPropertiesValidationError is the validation error returned
// by DpaiAirflowVersionProperties.Validate if the designated constraints
// aren't met.
type DpaiAirflowVersionPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionPropertiesValidationError) ErrorName() string {
	return "DpaiAirflowVersionPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionPropertiesValidationError{}

// Validate checks the field values on DpaiAirflowVersionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowVersionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionCreateRequestMultiError, or nil if none found.
func (m *DpaiAirflowVersionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for BackendDatabaseVersionId

	if all {
		switch v := interface{}(m.GetAirflowVersionProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionCreateRequestValidationError{
					field:  "AirflowVersionProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionCreateRequestValidationError{
					field:  "AirflowVersionProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAirflowVersionProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionCreateRequestValidationError{
				field:  "AirflowVersionProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExecutorType

	if all {
		switch v := interface{}(m.GetImageReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionCreateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionCreateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionCreateRequestValidationError{
				field:  "ImageReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionCreateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionCreateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionCreateRequestValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for BackwardCompatibleFrom

	if len(errors) > 0 {
		return DpaiAirflowVersionCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowVersionCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowVersionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionCreateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionCreateRequestValidationError is the validation error
// returned by DpaiAirflowVersionCreateRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionCreateRequestValidationError) ErrorName() string {
	return "DpaiAirflowVersionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionCreateRequestValidationError{}

// Validate checks the field values on DpaiAirflowVersionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowVersionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionListRequestMultiError, or nil if none found.
func (m *DpaiAirflowVersionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(errors) > 0 {
		return DpaiAirflowVersionListRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionListRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowVersionListRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowVersionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionListRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionListRequestValidationError is the validation error
// returned by DpaiAirflowVersionListRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionListRequestValidationError) ErrorName() string {
	return "DpaiAirflowVersionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionListRequestValidationError{}

// Validate checks the field values on DpaiAirflowVersionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowVersionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionListResponseMultiError, or nil if none found.
func (m *DpaiAirflowVersionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiAirflowVersionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiAirflowVersionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiAirflowVersionListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiAirflowVersionListResponseMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowVersionListResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowVersionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionListResponseMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionListResponseValidationError is the validation error
// returned by DpaiAirflowVersionListResponse.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionListResponseValidationError) ErrorName() string {
	return "DpaiAirflowVersionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionListResponseValidationError{}

// Validate checks the field values on DpaiAirflowVersionGetByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiAirflowVersionGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionGetByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionGetByIdRequestMultiError, or nil if none found.
func (m *DpaiAirflowVersionGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowVersionGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiAirflowVersionGetByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowVersionGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionGetByIdRequestValidationError is the validation error
// returned by DpaiAirflowVersionGetByIdRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionGetByIdRequestValidationError) ErrorName() string {
	return "DpaiAirflowVersionGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionGetByIdRequestValidationError{}

// Validate checks the field values on DpaiAirflowVersionGetByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiAirflowVersionGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionGetByNameRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionGetByNameRequestMultiError, or nil if none found.
func (m *DpaiAirflowVersionGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	if len(errors) > 0 {
		return DpaiAirflowVersionGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by
// DpaiAirflowVersionGetByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowVersionGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionGetByNameRequestValidationError is the validation error
// returned by DpaiAirflowVersionGetByNameRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionGetByNameRequestValidationError) ErrorName() string {
	return "DpaiAirflowVersionGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionGetByNameRequestValidationError{}

// Validate checks the field values on DpaiAirflowVersionUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowVersionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionUpdateRequestMultiError, or nil if none found.
func (m *DpaiAirflowVersionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Version

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetImageReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionUpdateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionUpdateRequestValidationError{
					field:  "ImageReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionUpdateRequestValidationError{
				field:  "ImageReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChartReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowVersionUpdateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowVersionUpdateRequestValidationError{
					field:  "ChartReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChartReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowVersionUpdateRequestValidationError{
				field:  "ChartReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackwardCompatibleFrom

	if len(errors) > 0 {
		return DpaiAirflowVersionUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowVersionUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowVersionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionUpdateRequestValidationError is the validation error
// returned by DpaiAirflowVersionUpdateRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionUpdateRequestValidationError) ErrorName() string {
	return "DpaiAirflowVersionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionUpdateRequestValidationError{}

// Validate checks the field values on DpaiAirflowVersionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowVersionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionDeleteRequestMultiError, or nil if none found.
func (m *DpaiAirflowVersionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowVersionDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowVersionDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowVersionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionDeleteRequestValidationError is the validation error
// returned by DpaiAirflowVersionDeleteRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionDeleteRequestValidationError) ErrorName() string {
	return "DpaiAirflowVersionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionDeleteRequestValidationError{}

// Validate checks the field values on DpaiAirflowVersionDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DpaiAirflowVersionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowVersionDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowVersionDeleteResponseMultiError, or nil if none found.
func (m *DpaiAirflowVersionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowVersionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiAirflowVersionDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiAirflowVersionDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// DpaiAirflowVersionDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowVersionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowVersionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowVersionDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiAirflowVersionDeleteResponseValidationError is the validation error
// returned by DpaiAirflowVersionDeleteResponse.Validate if the designated
// constraints aren't met.
type DpaiAirflowVersionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowVersionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowVersionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowVersionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowVersionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowVersionDeleteResponseValidationError) ErrorName() string {
	return "DpaiAirflowVersionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowVersionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowVersionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowVersionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowVersionDeleteResponseValidationError{}

// Validate checks the field values on DpaiAirflowConf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConf with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfMultiError, or nil if none found.
func (m *DpaiAirflowConf) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for AirflowId

	// no validation rules for Key

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowConfValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowConfValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowConfValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowConfMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfMultiError is an error wrapping multiple validation errors
// returned by DpaiAirflowConf.ValidateAll() if the designated constraints
// aren't met.
type DpaiAirflowConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfMultiError) AllErrors() []error { return m }

// DpaiAirflowConfValidationError is the validation error returned by
// DpaiAirflowConf.Validate if the designated constraints aren't met.
type DpaiAirflowConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfValidationError) ErrorName() string { return "DpaiAirflowConfValidationError" }

// Error satisfies the builtin error interface
func (e DpaiAirflowConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfValidationError{}

// Validate checks the field values on DpaiAirflowConfCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConfCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConfCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfCreateRequestMultiError, or nil if none found.
func (m *DpaiAirflowConfCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for AirflowId

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for CreatedBy

	if len(errors) > 0 {
		return DpaiAirflowConfCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowConfCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowConfCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfCreateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowConfCreateRequestValidationError is the validation error returned
// by DpaiAirflowConfCreateRequest.Validate if the designated constraints
// aren't met.
type DpaiAirflowConfCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfCreateRequestValidationError) ErrorName() string {
	return "DpaiAirflowConfCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfCreateRequestValidationError{}

// Validate checks the field values on DpaiAirflowConfListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConfListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConfListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfListRequestMultiError, or nil if none found.
func (m *DpaiAirflowConfListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for AirflowId

	if len(errors) > 0 {
		return DpaiAirflowConfListRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfListRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowConfListRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowConfListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfListRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowConfListRequestValidationError is the validation error returned
// by DpaiAirflowConfListRequest.Validate if the designated constraints aren't met.
type DpaiAirflowConfListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfListRequestValidationError) ErrorName() string {
	return "DpaiAirflowConfListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfListRequestValidationError{}

// Validate checks the field values on DpaiAirflowConfListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConfListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConfListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfListResponseMultiError, or nil if none found.
func (m *DpaiAirflowConfListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiAirflowConfListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiAirflowConfListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiAirflowConfListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HasMore

	// no validation rules for NextToken

	// no validation rules for PrevToken

	if len(errors) > 0 {
		return DpaiAirflowConfListResponseMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfListResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowConfListResponse.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowConfListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfListResponseMultiError) AllErrors() []error { return m }

// DpaiAirflowConfListResponseValidationError is the validation error returned
// by DpaiAirflowConfListResponse.Validate if the designated constraints
// aren't met.
type DpaiAirflowConfListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfListResponseValidationError) ErrorName() string {
	return "DpaiAirflowConfListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfListResponseValidationError{}

// Validate checks the field values on DpaiAirflowConfGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConfGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConfGetByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfGetByIdRequestMultiError, or nil if none found.
func (m *DpaiAirflowConfGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowConfGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfGetByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowConfGetByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowConfGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowConfGetByIdRequestValidationError is the validation error
// returned by DpaiAirflowConfGetByIdRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowConfGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfGetByIdRequestValidationError) ErrorName() string {
	return "DpaiAirflowConfGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfGetByIdRequestValidationError{}

// Validate checks the field values on DpaiAirflowConfUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConfUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConfUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfUpdateRequestMultiError, or nil if none found.
func (m *DpaiAirflowConfUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for AirflowId

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return DpaiAirflowConfUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowConfUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowConfUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowConfUpdateRequestValidationError is the validation error returned
// by DpaiAirflowConfUpdateRequest.Validate if the designated constraints
// aren't met.
type DpaiAirflowConfUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfUpdateRequestValidationError) ErrorName() string {
	return "DpaiAirflowConfUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfUpdateRequestValidationError{}

// Validate checks the field values on DpaiAirflowConfDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConfDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConfDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfDeleteRequestMultiError, or nil if none found.
func (m *DpaiAirflowConfDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowConfDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowConfDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowConfDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowConfDeleteRequestValidationError is the validation error returned
// by DpaiAirflowConfDeleteRequest.Validate if the designated constraints
// aren't met.
type DpaiAirflowConfDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfDeleteRequestValidationError) ErrorName() string {
	return "DpaiAirflowConfDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfDeleteRequestValidationError{}

// Validate checks the field values on DpaiAirflowConfDeleteByAirflowIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DpaiAirflowConfDeleteByAirflowIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DpaiAirflowConfDeleteByAirflowIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DpaiAirflowConfDeleteByAirflowIdRequestMultiError, or nil if none found.
func (m *DpaiAirflowConfDeleteByAirflowIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfDeleteByAirflowIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowConfDeleteByAirflowIdRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfDeleteByAirflowIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// DpaiAirflowConfDeleteByAirflowIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowConfDeleteByAirflowIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfDeleteByAirflowIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfDeleteByAirflowIdRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowConfDeleteByAirflowIdRequestValidationError is the validation
// error returned by DpaiAirflowConfDeleteByAirflowIdRequest.Validate if the
// designated constraints aren't met.
type DpaiAirflowConfDeleteByAirflowIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfDeleteByAirflowIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfDeleteByAirflowIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfDeleteByAirflowIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfDeleteByAirflowIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfDeleteByAirflowIdRequestValidationError) ErrorName() string {
	return "DpaiAirflowConfDeleteByAirflowIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfDeleteByAirflowIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfDeleteByAirflowIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfDeleteByAirflowIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfDeleteByAirflowIdRequestValidationError{}

// Validate checks the field values on DpaiAirflowConfDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowConfDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowConfDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowConfDeleteResponseMultiError, or nil if none found.
func (m *DpaiAirflowConfDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowConfDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return DpaiAirflowConfDeleteResponseMultiError(errors)
	}

	return nil
}

// DpaiAirflowConfDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowConfDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowConfDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowConfDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowConfDeleteResponseMultiError) AllErrors() []error { return m }

// DpaiAirflowConfDeleteResponseValidationError is the validation error
// returned by DpaiAirflowConfDeleteResponse.Validate if the designated
// constraints aren't met.
type DpaiAirflowConfDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowConfDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowConfDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowConfDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowConfDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowConfDeleteResponseValidationError) ErrorName() string {
	return "DpaiAirflowConfDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowConfDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowConfDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowConfDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowConfDeleteResponseValidationError{}

// Validate checks the field values on DpaiAirflowStorageProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowStorageProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowStorageProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowStoragePropertiesMultiError, or nil if none found.
func (m *DpaiAirflowStorageProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowStorageProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BucketId

	// no validation rules for BucketPrincipal

	if all {
		switch v := interface{}(m.GetPath()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowStoragePropertiesValidationError{
					field:  "Path",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowStoragePropertiesValidationError{
					field:  "Path",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowStoragePropertiesValidationError{
				field:  "Path",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowStoragePropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowStoragePropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowStorageProperties.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowStoragePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowStoragePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowStoragePropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowStoragePropertiesValidationError is the validation error returned
// by DpaiAirflowStorageProperties.Validate if the designated constraints
// aren't met.
type DpaiAirflowStoragePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowStoragePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowStoragePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowStoragePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowStoragePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowStoragePropertiesValidationError) ErrorName() string {
	return "DpaiAirflowStoragePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowStoragePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowStorageProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowStoragePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowStoragePropertiesValidationError{}

// Validate checks the field values on DpaiAirflowPathProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowPathProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowPathProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowPathPropertiesMultiError, or nil if none found.
func (m *DpaiAirflowPathProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowPathProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DagFolderPath

	// no validation rules for PluginFolderPath

	// no validation rules for RequirementPath

	// no validation rules for LogFolder

	if len(errors) > 0 {
		return DpaiAirflowPathPropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowPathPropertiesMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowPathProperties.ValidateAll() if the
// designated constraints aren't met.
type DpaiAirflowPathPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowPathPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowPathPropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowPathPropertiesValidationError is the validation error returned by
// DpaiAirflowPathProperties.Validate if the designated constraints aren't met.
type DpaiAirflowPathPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowPathPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowPathPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowPathPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowPathPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowPathPropertiesValidationError) ErrorName() string {
	return "DpaiAirflowPathPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowPathPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowPathProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowPathPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowPathPropertiesValidationError{}

// Validate checks the field values on DpaiAirflowWebServerProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowWebServerProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowWebServerProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowWebServerPropertiesMultiError, or nil if none found.
func (m *DpaiAirflowWebServerProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowWebServerProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	if len(m.GetWebserverAdminUsername()) > 16 {
		err := DpaiAirflowWebServerPropertiesValidationError{
			field:  "WebserverAdminUsername",
			reason: "value length must be at most 16 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DpaiAirflowWebServerProperties_WebserverAdminUsername_Pattern.MatchString(m.GetWebserverAdminUsername()) {
		err := DpaiAirflowWebServerPropertiesValidationError{
			field:  "WebserverAdminUsername",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWebserverAdminPassword()) < 8 {
		err := DpaiAirflowWebServerPropertiesValidationError{
			field:  "WebserverAdminPassword",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetWebserverAdminPassword()) > 16 {
		err := DpaiAirflowWebServerPropertiesValidationError{
			field:  "WebserverAdminPassword",
			reason: "value length must be at most 16 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DpaiAirflowWebServerPropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowWebServerPropertiesMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowWebServerProperties.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowWebServerPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowWebServerPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowWebServerPropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowWebServerPropertiesValidationError is the validation error
// returned by DpaiAirflowWebServerProperties.Validate if the designated
// constraints aren't met.
type DpaiAirflowWebServerPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowWebServerPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowWebServerPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowWebServerPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowWebServerPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowWebServerPropertiesValidationError) ErrorName() string {
	return "DpaiAirflowWebServerPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowWebServerPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowWebServerProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowWebServerPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowWebServerPropertiesValidationError{}

var _DpaiAirflowWebServerProperties_WebserverAdminUsername_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

// Validate checks the field values on DpaiAirflowSizeProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowSizeProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowSizeProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowSizePropertiesMultiError, or nil if none found.
func (m *DpaiAirflowSizeProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowSizeProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for NumberOfNodes

	// no validation rules for NumberOfWorkers

	// no validation rules for NumberOfSchedulers

	if len(errors) > 0 {
		return DpaiAirflowSizePropertiesMultiError(errors)
	}

	return nil
}

// DpaiAirflowSizePropertiesMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowSizeProperties.ValidateAll() if the
// designated constraints aren't met.
type DpaiAirflowSizePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowSizePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowSizePropertiesMultiError) AllErrors() []error { return m }

// DpaiAirflowSizePropertiesValidationError is the validation error returned by
// DpaiAirflowSizeProperties.Validate if the designated constraints aren't met.
type DpaiAirflowSizePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowSizePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowSizePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowSizePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowSizePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowSizePropertiesValidationError) ErrorName() string {
	return "DpaiAirflowSizePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowSizePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowSizeProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowSizePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowSizePropertiesValidationError{}

// Validate checks the field values on DpaiAirflowDeploymentMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowDeploymentMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowDeploymentMeta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowDeploymentMetaMultiError, or nil if none found.
func (m *DpaiAirflowDeploymentMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowDeploymentMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	// no validation rules for BackendDatabaseId

	// no validation rules for IksClusterId

	// no validation rules for WorkspaceId

	// no validation rules for NodeGroupId

	if all {
		switch v := interface{}(m.GetDeploymentStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowDeploymentMetaValidationError{
					field:  "DeploymentStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowDeploymentMetaValidationError{
				field:  "DeploymentStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowDeploymentMetaMultiError(errors)
	}

	return nil
}

// DpaiAirflowDeploymentMetaMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowDeploymentMeta.ValidateAll() if the
// designated constraints aren't met.
type DpaiAirflowDeploymentMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowDeploymentMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowDeploymentMetaMultiError) AllErrors() []error { return m }

// DpaiAirflowDeploymentMetaValidationError is the validation error returned by
// DpaiAirflowDeploymentMeta.Validate if the designated constraints aren't met.
type DpaiAirflowDeploymentMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowDeploymentMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowDeploymentMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowDeploymentMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowDeploymentMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowDeploymentMetaValidationError) ErrorName() string {
	return "DpaiAirflowDeploymentMetaValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowDeploymentMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowDeploymentMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowDeploymentMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowDeploymentMetaValidationError{}

// Validate checks the field values on DpaiAirflow with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DpaiAirflowMultiError, or
// nil if none found.
func (m *DpaiAirflow) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for WorkspaceName

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for Tags

	if all {
		switch v := interface{}(m.GetStorageProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "StorageProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "StorageProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowValidationError{
				field:  "StorageProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebServerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "WebServerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "WebServerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebServerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowValidationError{
				field:  "WebServerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSizeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSizeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowValidationError{
				field:  "SizeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeploymentMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowValidationError{
					field:  "DeploymentMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowValidationError{
				field:  "DeploymentMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowMultiError(errors)
	}

	return nil
}

// DpaiAirflowMultiError is an error wrapping multiple validation errors
// returned by DpaiAirflow.ValidateAll() if the designated constraints aren't met.
type DpaiAirflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowMultiError) AllErrors() []error { return m }

// DpaiAirflowValidationError is the validation error returned by
// DpaiAirflow.Validate if the designated constraints aren't met.
type DpaiAirflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowValidationError) ErrorName() string { return "DpaiAirflowValidationError" }

// Error satisfies the builtin error interface
func (e DpaiAirflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowValidationError{}

// Validate checks the field values on DpaiAirflowCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowCreateRequestMultiError, or nil if none found.
func (m *DpaiAirflowCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	if len(m.GetWorkspaceName()) > 32 {
		err := DpaiAirflowCreateRequestValidationError{
			field:  "WorkspaceName",
			reason: "value length must be at most 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DpaiAirflowCreateRequest_WorkspaceName_Pattern.MatchString(m.GetWorkspaceName()) {
		err := DpaiAirflowCreateRequestValidationError{
			field:  "WorkspaceName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WorkspaceId

	if len(m.GetName()) > 32 {
		err := DpaiAirflowCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DpaiAirflowCreateRequest_Name_Pattern.MatchString(m.GetName()) {
		err := DpaiAirflowCreateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDescription()) > 512 {
		err := DpaiAirflowCreateRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 512 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DpaiAirflowCreateRequest_Description_Pattern.MatchString(m.GetDescription()) {
		err := DpaiAirflowCreateRequestValidationError{
			field:  "Description",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-_ ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	// no validation rules for Tags

	if all {
		switch v := interface{}(m.GetStorageProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowCreateRequestValidationError{
					field:  "StorageProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowCreateRequestValidationError{
					field:  "StorageProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowCreateRequestValidationError{
				field:  "StorageProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebServerProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowCreateRequestValidationError{
					field:  "WebServerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowCreateRequestValidationError{
					field:  "WebServerProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebServerProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowCreateRequestValidationError{
				field:  "WebServerProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSizeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DpaiAirflowCreateRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DpaiAirflowCreateRequestValidationError{
					field:  "SizeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSizeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DpaiAirflowCreateRequestValidationError{
				field:  "SizeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DpaiAirflowCreateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowCreateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowCreateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowCreateRequestValidationError is the validation error returned by
// DpaiAirflowCreateRequest.Validate if the designated constraints aren't met.
type DpaiAirflowCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowCreateRequestValidationError) ErrorName() string {
	return "DpaiAirflowCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowCreateRequestValidationError{}

var _DpaiAirflowCreateRequest_WorkspaceName_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

var _DpaiAirflowCreateRequest_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9-]+$")

var _DpaiAirflowCreateRequest_Description_Pattern = regexp.MustCompile("^[a-zA-Z0-9-_ ]*$")

// Validate checks the field values on DpaiAirflowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowListRequestMultiError, or nil if none found.
func (m *DpaiAirflowListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for WorkspaceId

	// no validation rules for Name

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return DpaiAirflowListRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowListRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowListRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowListRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowListRequestValidationError is the validation error returned by
// DpaiAirflowListRequest.Validate if the designated constraints aren't met.
type DpaiAirflowListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowListRequestValidationError) ErrorName() string {
	return "DpaiAirflowListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowListRequestValidationError{}

// Validate checks the field values on DpaiAirflowListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowListResponseMultiError, or nil if none found.
func (m *DpaiAirflowListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DpaiAirflowListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DpaiAirflowListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DpaiAirflowListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrevOffset

	// no validation rules for CurrOffset

	// no validation rules for NextOffset

	// no validation rules for LastOffset

	// no validation rules for Limit

	// no validation rules for TotalRecords

	if len(errors) > 0 {
		return DpaiAirflowListResponseMultiError(errors)
	}

	return nil
}

// DpaiAirflowListResponseMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowListResponse.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowListResponseMultiError) AllErrors() []error { return m }

// DpaiAirflowListResponseValidationError is the validation error returned by
// DpaiAirflowListResponse.Validate if the designated constraints aren't met.
type DpaiAirflowListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowListResponseValidationError) ErrorName() string {
	return "DpaiAirflowListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowListResponseValidationError{}

// Validate checks the field values on DpaiAirflowGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowGetByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowGetByIdRequestMultiError, or nil if none found.
func (m *DpaiAirflowGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowGetByIdRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowGetByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowGetByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiAirflowGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowGetByIdRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowGetByIdRequestValidationError is the validation error returned by
// DpaiAirflowGetByIdRequest.Validate if the designated constraints aren't met.
type DpaiAirflowGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowGetByIdRequestValidationError) ErrorName() string {
	return "DpaiAirflowGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowGetByIdRequestValidationError{}

// Validate checks the field values on DpaiAirflowGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowGetByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowGetByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowGetByNameRequestMultiError, or nil if none found.
func (m *DpaiAirflowGetByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowGetByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Name

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return DpaiAirflowGetByNameRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowGetByNameRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowGetByNameRequest.ValidateAll() if
// the designated constraints aren't met.
type DpaiAirflowGetByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowGetByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowGetByNameRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowGetByNameRequestValidationError is the validation error returned
// by DpaiAirflowGetByNameRequest.Validate if the designated constraints
// aren't met.
type DpaiAirflowGetByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowGetByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowGetByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowGetByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowGetByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowGetByNameRequestValidationError) ErrorName() string {
	return "DpaiAirflowGetByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowGetByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowGetByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowGetByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowGetByNameRequestValidationError{}

// Validate checks the field values on DpaiAirflowUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowUpdateRequestMultiError, or nil if none found.
func (m *DpaiAirflowUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for Tags

	if len(errors) > 0 {
		return DpaiAirflowUpdateRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowUpdateRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowUpdateRequestValidationError is the validation error returned by
// DpaiAirflowUpdateRequest.Validate if the designated constraints aren't met.
type DpaiAirflowUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowUpdateRequestValidationError) ErrorName() string {
	return "DpaiAirflowUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowUpdateRequestValidationError{}

// Validate checks the field values on DpaiAirflowDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowDeleteRequestMultiError, or nil if none found.
func (m *DpaiAirflowDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowDeleteRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowDeleteRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowDeleteRequestValidationError is the validation error returned by
// DpaiAirflowDeleteRequest.Validate if the designated constraints aren't met.
type DpaiAirflowDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowDeleteRequestValidationError) ErrorName() string {
	return "DpaiAirflowDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowDeleteRequestValidationError{}

// Validate checks the field values on DpaiAirflowRestartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowRestartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowRestartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowRestartRequestMultiError, or nil if none found.
func (m *DpaiAirflowRestartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowRestartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for WorkspaceId

	// no validation rules for AirflowId

	if len(errors) > 0 {
		return DpaiAirflowRestartRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowRestartRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowRestartRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiAirflowRestartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowRestartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowRestartRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowRestartRequestValidationError is the validation error returned by
// DpaiAirflowRestartRequest.Validate if the designated constraints aren't met.
type DpaiAirflowRestartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowRestartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowRestartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowRestartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowRestartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowRestartRequestValidationError) ErrorName() string {
	return "DpaiAirflowRestartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowRestartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowRestartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowRestartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowRestartRequestValidationError{}

// Validate checks the field values on DpaiAirflowResizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowResizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowResizeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowResizeRequestMultiError, or nil if none found.
func (m *DpaiAirflowResizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowResizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Size

	// no validation rules for NumberOfNodes

	// no validation rules for NumberOfWorkers

	// no validation rules for NumberOfSchedulers

	// no validation rules for WorkspaceId

	// no validation rules for AirflowId

	if len(errors) > 0 {
		return DpaiAirflowResizeRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowResizeRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowResizeRequest.ValidateAll() if the designated
// constraints aren't met.
type DpaiAirflowResizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowResizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowResizeRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowResizeRequestValidationError is the validation error returned by
// DpaiAirflowResizeRequest.Validate if the designated constraints aren't met.
type DpaiAirflowResizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowResizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowResizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowResizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowResizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowResizeRequestValidationError) ErrorName() string {
	return "DpaiAirflowResizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowResizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowResizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowResizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowResizeRequestValidationError{}

// Validate checks the field values on DpaiAirflowListUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowListUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowListUpgradeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DpaiAirflowListUpgradeRequestMultiError, or nil if none found.
func (m *DpaiAirflowListUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowListUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	if len(errors) > 0 {
		return DpaiAirflowListUpgradeRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowListUpgradeRequestMultiError is an error wrapping multiple
// validation errors returned by DpaiAirflowListUpgradeRequest.ValidateAll()
// if the designated constraints aren't met.
type DpaiAirflowListUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowListUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowListUpgradeRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowListUpgradeRequestValidationError is the validation error
// returned by DpaiAirflowListUpgradeRequest.Validate if the designated
// constraints aren't met.
type DpaiAirflowListUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowListUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowListUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowListUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowListUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowListUpgradeRequestValidationError) ErrorName() string {
	return "DpaiAirflowListUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowListUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowListUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowListUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowListUpgradeRequestValidationError{}

// Validate checks the field values on DpaiAirflowUpgradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DpaiAirflowUpgradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DpaiAirflowUpgradeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DpaiAirflowUpgradeRequestMultiError, or nil if none found.
func (m *DpaiAirflowUpgradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DpaiAirflowUpgradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudAccountId

	// no validation rules for Id

	// no validation rules for Version

	// no validation rules for WorkspaceId

	// no validation rules for AirflowId

	if len(errors) > 0 {
		return DpaiAirflowUpgradeRequestMultiError(errors)
	}

	return nil
}

// DpaiAirflowUpgradeRequestMultiError is an error wrapping multiple validation
// errors returned by DpaiAirflowUpgradeRequest.ValidateAll() if the
// designated constraints aren't met.
type DpaiAirflowUpgradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DpaiAirflowUpgradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DpaiAirflowUpgradeRequestMultiError) AllErrors() []error { return m }

// DpaiAirflowUpgradeRequestValidationError is the validation error returned by
// DpaiAirflowUpgradeRequest.Validate if the designated constraints aren't met.
type DpaiAirflowUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DpaiAirflowUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DpaiAirflowUpgradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DpaiAirflowUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DpaiAirflowUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DpaiAirflowUpgradeRequestValidationError) ErrorName() string {
	return "DpaiAirflowUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DpaiAirflowUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDpaiAirflowUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DpaiAirflowUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DpaiAirflowUpgradeRequestValidationError{}
