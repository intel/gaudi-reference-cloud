// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: cloudaccount.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_UNSPECIFIED        AccountType = 0
	AccountType_ACCOUNT_TYPE_STANDARD           AccountType = 1
	AccountType_ACCOUNT_TYPE_PREMIUM            AccountType = 2
	AccountType_ACCOUNT_TYPE_ENTERPRISE_PENDING AccountType = 3
	AccountType_ACCOUNT_TYPE_ENTERPRISE         AccountType = 4
	AccountType_ACCOUNT_TYPE_INTEL              AccountType = 5
	AccountType_ACCOUNT_TYPE_MEMBER             AccountType = 6
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_UNSPECIFIED",
		1: "ACCOUNT_TYPE_STANDARD",
		2: "ACCOUNT_TYPE_PREMIUM",
		3: "ACCOUNT_TYPE_ENTERPRISE_PENDING",
		4: "ACCOUNT_TYPE_ENTERPRISE",
		5: "ACCOUNT_TYPE_INTEL",
		6: "ACCOUNT_TYPE_MEMBER",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED":        0,
		"ACCOUNT_TYPE_STANDARD":           1,
		"ACCOUNT_TYPE_PREMIUM":            2,
		"ACCOUNT_TYPE_ENTERPRISE_PENDING": 3,
		"ACCOUNT_TYPE_ENTERPRISE":         4,
		"ACCOUNT_TYPE_INTEL":              5,
		"ACCOUNT_TYPE_MEMBER":             6,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudaccount_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_cloudaccount_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{0}
}

type UpgradeStatus int32

const (
	UpgradeStatus_UPGRADE_COMPLETE            UpgradeStatus = 0
	UpgradeStatus_UPGRADE_NOT_INITIATED       UpgradeStatus = 1
	UpgradeStatus_UPGRADE_PENDING             UpgradeStatus = 2
	UpgradeStatus_UPGRADE_PENDING_CC          UpgradeStatus = 3
	UpgradeStatus_UPGRADE_PENDING_CC_VERIFIED UpgradeStatus = 4
)

// Enum value maps for UpgradeStatus.
var (
	UpgradeStatus_name = map[int32]string{
		0: "UPGRADE_COMPLETE",
		1: "UPGRADE_NOT_INITIATED",
		2: "UPGRADE_PENDING",
		3: "UPGRADE_PENDING_CC",
		4: "UPGRADE_PENDING_CC_VERIFIED",
	}
	UpgradeStatus_value = map[string]int32{
		"UPGRADE_COMPLETE":            0,
		"UPGRADE_NOT_INITIATED":       1,
		"UPGRADE_PENDING":             2,
		"UPGRADE_PENDING_CC":          3,
		"UPGRADE_PENDING_CC_VERIFIED": 4,
	}
)

func (x UpgradeStatus) Enum() *UpgradeStatus {
	p := new(UpgradeStatus)
	*p = x
	return p
}

func (x UpgradeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudaccount_proto_enumTypes[1].Descriptor()
}

func (UpgradeStatus) Type() protoreflect.EnumType {
	return &file_cloudaccount_proto_enumTypes[1]
}

func (x UpgradeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeStatus.Descriptor instead.
func (UpgradeStatus) EnumDescriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{1}
}

type OtpState int32

const (
	OtpState_OTP_STATE_PENDING  OtpState = 0
	OtpState_OTP_STATE_ACCEPTED OtpState = 1
	OtpState_OTP_STATE_EXPIRED  OtpState = 2
	OtpState_OTP_STATE_INVALID  OtpState = 3
)

// Enum value maps for OtpState.
var (
	OtpState_name = map[int32]string{
		0: "OTP_STATE_PENDING",
		1: "OTP_STATE_ACCEPTED",
		2: "OTP_STATE_EXPIRED",
		3: "OTP_STATE_INVALID",
	}
	OtpState_value = map[string]int32{
		"OTP_STATE_PENDING":  0,
		"OTP_STATE_ACCEPTED": 1,
		"OTP_STATE_EXPIRED":  2,
		"OTP_STATE_INVALID":  3,
	}
)

func (x OtpState) Enum() *OtpState {
	p := new(OtpState)
	*p = x
	return p
}

func (x OtpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtpState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudaccount_proto_enumTypes[2].Descriptor()
}

func (OtpState) Type() protoreflect.EnumType {
	return &file_cloudaccount_proto_enumTypes[2]
}

func (x OtpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OtpState.Descriptor instead.
func (OtpState) EnumDescriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{2}
}

type OtpType int32

const (
	OtpType_INVITATION_VALIDATE OtpType = 0
	OtpType_INVITATION_RESEND   OtpType = 1
)

// Enum value maps for OtpType.
var (
	OtpType_name = map[int32]string{
		0: "INVITATION_VALIDATE",
		1: "INVITATION_RESEND",
	}
	OtpType_value = map[string]int32{
		"INVITATION_VALIDATE": 0,
		"INVITATION_RESEND":   1,
	}
)

func (x OtpType) Enum() *OtpType {
	p := new(OtpType)
	*p = x
	return p
}

func (x OtpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtpType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudaccount_proto_enumTypes[3].Descriptor()
}

func (OtpType) Type() protoreflect.EnumType {
	return &file_cloudaccount_proto_enumTypes[3]
}

func (x OtpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OtpType.Descriptor instead.
func (OtpType) EnumDescriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{3}
}

type InvitationState int32

const (
	InvitationState_INVITE_STATE_UNSPECIFIED    InvitationState = 0
	InvitationState_INVITE_STATE_PENDING_ACCEPT InvitationState = 1
	InvitationState_INVITE_STATE_ACCEPTED       InvitationState = 2
	InvitationState_INVITE_STATE_REVOKED        InvitationState = 3
	InvitationState_INVITE_STATE_EXPIRED        InvitationState = 4
	InvitationState_INVITE_STATE_REJECTED       InvitationState = 5
	InvitationState_INVITE_STATE_REMOVED        InvitationState = 6
)

// Enum value maps for InvitationState.
var (
	InvitationState_name = map[int32]string{
		0: "INVITE_STATE_UNSPECIFIED",
		1: "INVITE_STATE_PENDING_ACCEPT",
		2: "INVITE_STATE_ACCEPTED",
		3: "INVITE_STATE_REVOKED",
		4: "INVITE_STATE_EXPIRED",
		5: "INVITE_STATE_REJECTED",
		6: "INVITE_STATE_REMOVED",
	}
	InvitationState_value = map[string]int32{
		"INVITE_STATE_UNSPECIFIED":    0,
		"INVITE_STATE_PENDING_ACCEPT": 1,
		"INVITE_STATE_ACCEPTED":       2,
		"INVITE_STATE_REVOKED":        3,
		"INVITE_STATE_EXPIRED":        4,
		"INVITE_STATE_REJECTED":       5,
		"INVITE_STATE_REMOVED":        6,
	}
)

func (x InvitationState) Enum() *InvitationState {
	p := new(InvitationState)
	*p = x
	return p
}

func (x InvitationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvitationState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudaccount_proto_enumTypes[4].Descriptor()
}

func (InvitationState) Type() protoreflect.EnumType {
	return &file_cloudaccount_proto_enumTypes[4]
}

func (x InvitationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvitationState.Descriptor instead.
func (InvitationState) EnumDescriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{4}
}

type CloudAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tid                    string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"` // tenant id
	Oid                    string                 `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"` // object id
	ParentId               string                 `protobuf:"bytes,4,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Created                *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Name                   string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Owner                  string                 `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	Type                   AccountType            `protobuf:"varint,8,opt,name=type,proto3,enum=proto.AccountType" json:"type,omitempty"`
	BillingAccountCreated  bool                   `protobuf:"varint,9,opt,name=billingAccountCreated,proto3" json:"billingAccountCreated,omitempty"`
	Enrolled               bool                   `protobuf:"varint,10,opt,name=enrolled,proto3" json:"enrolled,omitempty"`
	LowCredits             bool                   `protobuf:"varint,11,opt,name=lowCredits,proto3" json:"lowCredits,omitempty"`
	CreditsDepleted        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=creditsDepleted,proto3" json:"creditsDepleted,omitempty"`
	TerminatePaidServices  bool                   `protobuf:"varint,13,opt,name=terminatePaidServices,proto3" json:"terminatePaidServices,omitempty"`
	TerminateMessageQueued bool                   `protobuf:"varint,14,opt,name=terminateMessageQueued,proto3" json:"terminateMessageQueued,omitempty"`
	Delinquent             bool                   `protobuf:"varint,15,opt,name=delinquent,proto3" json:"delinquent,omitempty"`
	PaidServicesAllowed    bool                   `protobuf:"varint,16,opt,name=paidServicesAllowed,proto3" json:"paidServicesAllowed,omitempty"`
	PersonId               string                 `protobuf:"bytes,17,opt,name=personId,proto3" json:"personId,omitempty"`
	CountryCode            string                 `protobuf:"bytes,18,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Restricted             bool                   `protobuf:"varint,19,opt,name=restricted,proto3" json:"restricted,omitempty"`
	AdminName              string                 `protobuf:"bytes,20,opt,name=adminName,proto3" json:"adminName,omitempty"`
	AccessLimitedTimestamp *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=accessLimitedTimestamp,proto3" json:"accessLimitedTimestamp,omitempty"`
	TradeRestricted        bool                   `protobuf:"varint,22,opt,name=tradeRestricted,proto3" json:"tradeRestricted,omitempty"`
	UpgradedToPremium      UpgradeStatus          `protobuf:"varint,23,opt,name=upgradedToPremium,proto3,enum=proto.UpgradeStatus" json:"upgradedToPremium,omitempty"`
	UpgradedToEnterprise   UpgradeStatus          `protobuf:"varint,24,opt,name=upgradedToEnterprise,proto3,enum=proto.UpgradeStatus" json:"upgradedToEnterprise,omitempty"`
}

func (x *CloudAccount) Reset() {
	*x = CloudAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccount) ProtoMessage() {}

func (x *CloudAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccount.ProtoReflect.Descriptor instead.
func (*CloudAccount) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{0}
}

func (x *CloudAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudAccount) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CloudAccount) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *CloudAccount) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CloudAccount) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CloudAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudAccount) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CloudAccount) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *CloudAccount) GetBillingAccountCreated() bool {
	if x != nil {
		return x.BillingAccountCreated
	}
	return false
}

func (x *CloudAccount) GetEnrolled() bool {
	if x != nil {
		return x.Enrolled
	}
	return false
}

func (x *CloudAccount) GetLowCredits() bool {
	if x != nil {
		return x.LowCredits
	}
	return false
}

func (x *CloudAccount) GetCreditsDepleted() *timestamppb.Timestamp {
	if x != nil {
		return x.CreditsDepleted
	}
	return nil
}

func (x *CloudAccount) GetTerminatePaidServices() bool {
	if x != nil {
		return x.TerminatePaidServices
	}
	return false
}

func (x *CloudAccount) GetTerminateMessageQueued() bool {
	if x != nil {
		return x.TerminateMessageQueued
	}
	return false
}

func (x *CloudAccount) GetDelinquent() bool {
	if x != nil {
		return x.Delinquent
	}
	return false
}

func (x *CloudAccount) GetPaidServicesAllowed() bool {
	if x != nil {
		return x.PaidServicesAllowed
	}
	return false
}

func (x *CloudAccount) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *CloudAccount) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CloudAccount) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *CloudAccount) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *CloudAccount) GetAccessLimitedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessLimitedTimestamp
	}
	return nil
}

func (x *CloudAccount) GetTradeRestricted() bool {
	if x != nil {
		return x.TradeRestricted
	}
	return false
}

func (x *CloudAccount) GetUpgradedToPremium() UpgradeStatus {
	if x != nil {
		return x.UpgradedToPremium
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

func (x *CloudAccount) GetUpgradedToEnterprise() UpgradeStatus {
	if x != nil {
		return x.UpgradedToEnterprise
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

type CloudAccountCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId               string                 `protobuf:"bytes,1,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Tid                    string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Oid                    string                 `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	Name                   string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Owner                  string                 `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Type                   AccountType            `protobuf:"varint,6,opt,name=type,proto3,enum=proto.AccountType" json:"type,omitempty"`
	BillingAccountCreated  *bool                  `protobuf:"varint,7,opt,name=billingAccountCreated,proto3,oneof" json:"billingAccountCreated,omitempty"`
	Enrolled               *bool                  `protobuf:"varint,8,opt,name=enrolled,proto3,oneof" json:"enrolled,omitempty"`
	LowCredits             *bool                  `protobuf:"varint,9,opt,name=lowCredits,proto3,oneof" json:"lowCredits,omitempty"`
	CreditsDepleted        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=creditsDepleted,proto3,oneof" json:"creditsDepleted,omitempty"`
	TerminatePaidServices  *bool                  `protobuf:"varint,11,opt,name=terminatePaidServices,proto3,oneof" json:"terminatePaidServices,omitempty"`
	TerminateMessageQueued *bool                  `protobuf:"varint,12,opt,name=terminateMessageQueued,proto3,oneof" json:"terminateMessageQueued,omitempty"`
	Delinquent             *bool                  `protobuf:"varint,13,opt,name=delinquent,proto3,oneof" json:"delinquent,omitempty"`
	PaidServicesAllowed    *bool                  `protobuf:"varint,14,opt,name=paidServicesAllowed,proto3,oneof" json:"paidServicesAllowed,omitempty"`
	PersonId               string                 `protobuf:"bytes,15,opt,name=personId,proto3" json:"personId,omitempty"`
	CountryCode            string                 `protobuf:"bytes,16,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Restricted             bool                   `protobuf:"varint,17,opt,name=restricted,proto3" json:"restricted,omitempty"`
	AdminName              string                 `protobuf:"bytes,18,opt,name=adminName,proto3" json:"adminName,omitempty"`
	AccessLimitedTimestamp *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=accessLimitedTimestamp,proto3" json:"accessLimitedTimestamp,omitempty"`
	TradeRestricted        *bool                  `protobuf:"varint,20,opt,name=tradeRestricted,proto3,oneof" json:"tradeRestricted,omitempty"`
	UpgradedToPremium      *UpgradeStatus         `protobuf:"varint,21,opt,name=upgradedToPremium,proto3,enum=proto.UpgradeStatus,oneof" json:"upgradedToPremium,omitempty"`
	UpgradedToEnterprise   *UpgradeStatus         `protobuf:"varint,22,opt,name=upgradedToEnterprise,proto3,enum=proto.UpgradeStatus,oneof" json:"upgradedToEnterprise,omitempty"`
}

func (x *CloudAccountCreate) Reset() {
	*x = CloudAccountCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountCreate) ProtoMessage() {}

func (x *CloudAccountCreate) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountCreate.ProtoReflect.Descriptor instead.
func (*CloudAccountCreate) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{1}
}

func (x *CloudAccountCreate) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CloudAccountCreate) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CloudAccountCreate) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *CloudAccountCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudAccountCreate) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CloudAccountCreate) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *CloudAccountCreate) GetBillingAccountCreated() bool {
	if x != nil && x.BillingAccountCreated != nil {
		return *x.BillingAccountCreated
	}
	return false
}

func (x *CloudAccountCreate) GetEnrolled() bool {
	if x != nil && x.Enrolled != nil {
		return *x.Enrolled
	}
	return false
}

func (x *CloudAccountCreate) GetLowCredits() bool {
	if x != nil && x.LowCredits != nil {
		return *x.LowCredits
	}
	return false
}

func (x *CloudAccountCreate) GetCreditsDepleted() *timestamppb.Timestamp {
	if x != nil {
		return x.CreditsDepleted
	}
	return nil
}

func (x *CloudAccountCreate) GetTerminatePaidServices() bool {
	if x != nil && x.TerminatePaidServices != nil {
		return *x.TerminatePaidServices
	}
	return false
}

func (x *CloudAccountCreate) GetTerminateMessageQueued() bool {
	if x != nil && x.TerminateMessageQueued != nil {
		return *x.TerminateMessageQueued
	}
	return false
}

func (x *CloudAccountCreate) GetDelinquent() bool {
	if x != nil && x.Delinquent != nil {
		return *x.Delinquent
	}
	return false
}

func (x *CloudAccountCreate) GetPaidServicesAllowed() bool {
	if x != nil && x.PaidServicesAllowed != nil {
		return *x.PaidServicesAllowed
	}
	return false
}

func (x *CloudAccountCreate) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *CloudAccountCreate) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CloudAccountCreate) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *CloudAccountCreate) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *CloudAccountCreate) GetAccessLimitedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessLimitedTimestamp
	}
	return nil
}

func (x *CloudAccountCreate) GetTradeRestricted() bool {
	if x != nil && x.TradeRestricted != nil {
		return *x.TradeRestricted
	}
	return false
}

func (x *CloudAccountCreate) GetUpgradedToPremium() UpgradeStatus {
	if x != nil && x.UpgradedToPremium != nil {
		return *x.UpgradedToPremium
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

func (x *CloudAccountCreate) GetUpgradedToEnterprise() UpgradeStatus {
	if x != nil && x.UpgradedToEnterprise != nil {
		return *x.UpgradedToEnterprise
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

type CloudAccountFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ParentId               *string                `protobuf:"bytes,2,opt,name=parentId,proto3,oneof" json:"parentId,omitempty"`
	Tid                    *string                `protobuf:"bytes,3,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	Oid                    *string                `protobuf:"bytes,4,opt,name=oid,proto3,oneof" json:"oid,omitempty"`
	Created                *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Name                   *string                `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Owner                  *string                `protobuf:"bytes,7,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Type                   *AccountType           `protobuf:"varint,8,opt,name=type,proto3,enum=proto.AccountType,oneof" json:"type,omitempty"`
	BillingAccountCreated  *bool                  `protobuf:"varint,9,opt,name=billingAccountCreated,proto3,oneof" json:"billingAccountCreated,omitempty"`
	Enrolled               *bool                  `protobuf:"varint,10,opt,name=enrolled,proto3,oneof" json:"enrolled,omitempty"`
	LowCredits             *bool                  `protobuf:"varint,11,opt,name=lowCredits,proto3,oneof" json:"lowCredits,omitempty"`
	CreditsDepleted        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=creditsDepleted,proto3,oneof" json:"creditsDepleted,omitempty"`
	TerminatePaidServices  *bool                  `protobuf:"varint,13,opt,name=terminatePaidServices,proto3,oneof" json:"terminatePaidServices,omitempty"`
	TerminateMessageQueued *bool                  `protobuf:"varint,14,opt,name=terminateMessageQueued,proto3,oneof" json:"terminateMessageQueued,omitempty"`
	PersonId               *string                `protobuf:"bytes,15,opt,name=personId,proto3,oneof" json:"personId,omitempty"`
	CountryCode            *string                `protobuf:"bytes,16,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"`
	PaidServicesAllowed    *bool                  `protobuf:"varint,17,opt,name=paidServicesAllowed,proto3,oneof" json:"paidServicesAllowed,omitempty"`
	Restricted             *bool                  `protobuf:"varint,18,opt,name=restricted,proto3,oneof" json:"restricted,omitempty"`
	AdminName              *string                `protobuf:"bytes,19,opt,name=adminName,proto3,oneof" json:"adminName,omitempty"`
	AccessLimitedTimestamp *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=accessLimitedTimestamp,proto3,oneof" json:"accessLimitedTimestamp,omitempty"`
	TradeRestricted        *bool                  `protobuf:"varint,21,opt,name=tradeRestricted,proto3,oneof" json:"tradeRestricted,omitempty"`
	UpgradedToPremium      *UpgradeStatus         `protobuf:"varint,22,opt,name=upgradedToPremium,proto3,enum=proto.UpgradeStatus,oneof" json:"upgradedToPremium,omitempty"`
	UpgradedToEnterprise   *UpgradeStatus         `protobuf:"varint,23,opt,name=upgradedToEnterprise,proto3,enum=proto.UpgradeStatus,oneof" json:"upgradedToEnterprise,omitempty"`
}

func (x *CloudAccountFilter) Reset() {
	*x = CloudAccountFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountFilter) ProtoMessage() {}

func (x *CloudAccountFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountFilter.ProtoReflect.Descriptor instead.
func (*CloudAccountFilter) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{2}
}

func (x *CloudAccountFilter) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CloudAccountFilter) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *CloudAccountFilter) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *CloudAccountFilter) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *CloudAccountFilter) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CloudAccountFilter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CloudAccountFilter) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *CloudAccountFilter) GetType() AccountType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *CloudAccountFilter) GetBillingAccountCreated() bool {
	if x != nil && x.BillingAccountCreated != nil {
		return *x.BillingAccountCreated
	}
	return false
}

func (x *CloudAccountFilter) GetEnrolled() bool {
	if x != nil && x.Enrolled != nil {
		return *x.Enrolled
	}
	return false
}

func (x *CloudAccountFilter) GetLowCredits() bool {
	if x != nil && x.LowCredits != nil {
		return *x.LowCredits
	}
	return false
}

func (x *CloudAccountFilter) GetCreditsDepleted() *timestamppb.Timestamp {
	if x != nil {
		return x.CreditsDepleted
	}
	return nil
}

func (x *CloudAccountFilter) GetTerminatePaidServices() bool {
	if x != nil && x.TerminatePaidServices != nil {
		return *x.TerminatePaidServices
	}
	return false
}

func (x *CloudAccountFilter) GetTerminateMessageQueued() bool {
	if x != nil && x.TerminateMessageQueued != nil {
		return *x.TerminateMessageQueued
	}
	return false
}

func (x *CloudAccountFilter) GetPersonId() string {
	if x != nil && x.PersonId != nil {
		return *x.PersonId
	}
	return ""
}

func (x *CloudAccountFilter) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CloudAccountFilter) GetPaidServicesAllowed() bool {
	if x != nil && x.PaidServicesAllowed != nil {
		return *x.PaidServicesAllowed
	}
	return false
}

func (x *CloudAccountFilter) GetRestricted() bool {
	if x != nil && x.Restricted != nil {
		return *x.Restricted
	}
	return false
}

func (x *CloudAccountFilter) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *CloudAccountFilter) GetAccessLimitedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessLimitedTimestamp
	}
	return nil
}

func (x *CloudAccountFilter) GetTradeRestricted() bool {
	if x != nil && x.TradeRestricted != nil {
		return *x.TradeRestricted
	}
	return false
}

func (x *CloudAccountFilter) GetUpgradedToPremium() UpgradeStatus {
	if x != nil && x.UpgradedToPremium != nil {
		return *x.UpgradedToPremium
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

func (x *CloudAccountFilter) GetUpgradedToEnterprise() UpgradeStatus {
	if x != nil && x.UpgradedToEnterprise != nil {
		return *x.UpgradedToEnterprise
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

type CloudAccountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId               *string                `protobuf:"bytes,2,opt,name=parentId,proto3,oneof" json:"parentId,omitempty"`
	Tid                    *string                `protobuf:"bytes,3,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	Name                   *string                `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Owner                  *string                `protobuf:"bytes,5,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Type                   *AccountType           `protobuf:"varint,6,opt,name=type,proto3,enum=proto.AccountType,oneof" json:"type,omitempty"`
	BillingAccountCreated  *bool                  `protobuf:"varint,7,opt,name=billingAccountCreated,proto3,oneof" json:"billingAccountCreated,omitempty"`
	Enrolled               *bool                  `protobuf:"varint,8,opt,name=enrolled,proto3,oneof" json:"enrolled,omitempty"`
	LowCredits             *bool                  `protobuf:"varint,9,opt,name=lowCredits,proto3,oneof" json:"lowCredits,omitempty"`
	CreditsDepleted        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=creditsDepleted,proto3,oneof" json:"creditsDepleted,omitempty"`
	TerminatePaidServices  *bool                  `protobuf:"varint,11,opt,name=terminatePaidServices,proto3,oneof" json:"terminatePaidServices,omitempty"`
	TerminateMessageQueued *bool                  `protobuf:"varint,12,opt,name=terminateMessageQueued,proto3,oneof" json:"terminateMessageQueued,omitempty"`
	Delinquent             *bool                  `protobuf:"varint,13,opt,name=delinquent,proto3,oneof" json:"delinquent,omitempty"`
	PaidServicesAllowed    *bool                  `protobuf:"varint,14,opt,name=paidServicesAllowed,proto3,oneof" json:"paidServicesAllowed,omitempty"`
	PersonId               *string                `protobuf:"bytes,15,opt,name=personId,proto3,oneof" json:"personId,omitempty"`
	CountryCode            *string                `protobuf:"bytes,16,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"`
	Restricted             *bool                  `protobuf:"varint,17,opt,name=restricted,proto3,oneof" json:"restricted,omitempty"`
	AdminName              *string                `protobuf:"bytes,18,opt,name=adminName,proto3,oneof" json:"adminName,omitempty"`
	AccessLimitedTimestamp *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=accessLimitedTimestamp,proto3,oneof" json:"accessLimitedTimestamp,omitempty"`
	TradeRestricted        *bool                  `protobuf:"varint,20,opt,name=tradeRestricted,proto3,oneof" json:"tradeRestricted,omitempty"`
	UpgradedToPremium      *UpgradeStatus         `protobuf:"varint,21,opt,name=upgradedToPremium,proto3,enum=proto.UpgradeStatus,oneof" json:"upgradedToPremium,omitempty"`
	UpgradedToEnterprise   *UpgradeStatus         `protobuf:"varint,22,opt,name=upgradedToEnterprise,proto3,enum=proto.UpgradeStatus,oneof" json:"upgradedToEnterprise,omitempty"`
}

func (x *CloudAccountUpdate) Reset() {
	*x = CloudAccountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountUpdate) ProtoMessage() {}

func (x *CloudAccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountUpdate.ProtoReflect.Descriptor instead.
func (*CloudAccountUpdate) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{3}
}

func (x *CloudAccountUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudAccountUpdate) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *CloudAccountUpdate) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *CloudAccountUpdate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CloudAccountUpdate) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *CloudAccountUpdate) GetType() AccountType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *CloudAccountUpdate) GetBillingAccountCreated() bool {
	if x != nil && x.BillingAccountCreated != nil {
		return *x.BillingAccountCreated
	}
	return false
}

func (x *CloudAccountUpdate) GetEnrolled() bool {
	if x != nil && x.Enrolled != nil {
		return *x.Enrolled
	}
	return false
}

func (x *CloudAccountUpdate) GetLowCredits() bool {
	if x != nil && x.LowCredits != nil {
		return *x.LowCredits
	}
	return false
}

func (x *CloudAccountUpdate) GetCreditsDepleted() *timestamppb.Timestamp {
	if x != nil {
		return x.CreditsDepleted
	}
	return nil
}

func (x *CloudAccountUpdate) GetTerminatePaidServices() bool {
	if x != nil && x.TerminatePaidServices != nil {
		return *x.TerminatePaidServices
	}
	return false
}

func (x *CloudAccountUpdate) GetTerminateMessageQueued() bool {
	if x != nil && x.TerminateMessageQueued != nil {
		return *x.TerminateMessageQueued
	}
	return false
}

func (x *CloudAccountUpdate) GetDelinquent() bool {
	if x != nil && x.Delinquent != nil {
		return *x.Delinquent
	}
	return false
}

func (x *CloudAccountUpdate) GetPaidServicesAllowed() bool {
	if x != nil && x.PaidServicesAllowed != nil {
		return *x.PaidServicesAllowed
	}
	return false
}

func (x *CloudAccountUpdate) GetPersonId() string {
	if x != nil && x.PersonId != nil {
		return *x.PersonId
	}
	return ""
}

func (x *CloudAccountUpdate) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CloudAccountUpdate) GetRestricted() bool {
	if x != nil && x.Restricted != nil {
		return *x.Restricted
	}
	return false
}

func (x *CloudAccountUpdate) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *CloudAccountUpdate) GetAccessLimitedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessLimitedTimestamp
	}
	return nil
}

func (x *CloudAccountUpdate) GetTradeRestricted() bool {
	if x != nil && x.TradeRestricted != nil {
		return *x.TradeRestricted
	}
	return false
}

func (x *CloudAccountUpdate) GetUpgradedToPremium() UpgradeStatus {
	if x != nil && x.UpgradedToPremium != nil {
		return *x.UpgradedToPremium
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

func (x *CloudAccountUpdate) GetUpgradedToEnterprise() UpgradeStatus {
	if x != nil && x.UpgradedToEnterprise != nil {
		return *x.UpgradedToEnterprise
	}
	return UpgradeStatus_UPGRADE_COMPLETE
}

type CloudAccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CloudAccountId) Reset() {
	*x = CloudAccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountId) ProtoMessage() {}

func (x *CloudAccountId) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountId.ProtoReflect.Descriptor instead.
func (*CloudAccountId) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{4}
}

func (x *CloudAccountId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CloudAccountOid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Oid string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CloudAccountOid) Reset() {
	*x = CloudAccountOid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountOid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountOid) ProtoMessage() {}

func (x *CloudAccountOid) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountOid.ProtoReflect.Descriptor instead.
func (*CloudAccountOid) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{5}
}

func (x *CloudAccountOid) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CloudAccountOid) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type CloudAccountName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CloudAccountName) Reset() {
	*x = CloudAccountName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountName) ProtoMessage() {}

func (x *CloudAccountName) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountName.ProtoReflect.Descriptor instead.
func (*CloudAccountName) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{6}
}

func (x *CloudAccountName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CloudAccountPersonId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Personid string `protobuf:"bytes,1,opt,name=personid,proto3" json:"personid,omitempty"`
}

func (x *CloudAccountPersonId) Reset() {
	*x = CloudAccountPersonId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountPersonId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountPersonId) ProtoMessage() {}

func (x *CloudAccountPersonId) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountPersonId.ProtoReflect.Descriptor instead.
func (*CloudAccountPersonId) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{7}
}

func (x *CloudAccountPersonId) GetPersonid() string {
	if x != nil {
		return x.Personid
	}
	return ""
}

type AccountPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId string `protobuf:"bytes,1,opt,name=personId,proto3" json:"personId,omitempty"`
}

func (x *AccountPerson) Reset() {
	*x = AccountPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPerson) ProtoMessage() {}

func (x *AccountPerson) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPerson.ProtoReflect.Descriptor instead.
func (*AccountPerson) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{8}
}

func (x *AccountPerson) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

type AccountUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName       string  `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	CloudAccountId *string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3,oneof" json:"cloudAccountId,omitempty"`
}

func (x *AccountUser) Reset() {
	*x = AccountUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUser) ProtoMessage() {}

func (x *AccountUser) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUser.ProtoReflect.Descriptor instead.
func (*AccountUser) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{9}
}

func (x *AccountUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccountUser) GetCloudAccountId() string {
	if x != nil && x.CloudAccountId != nil {
		return *x.CloudAccountId
	}
	return ""
}

type AccountClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId       string  `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	CloudAccountId *string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3,oneof" json:"cloudAccountId,omitempty"`
}

func (x *AccountClient) Reset() {
	*x = AccountClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountClient) ProtoMessage() {}

func (x *AccountClient) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountClient.ProtoReflect.Descriptor instead.
func (*AccountClient) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{10}
}

func (x *AccountClient) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AccountClient) GetCloudAccountId() string {
	if x != nil && x.CloudAccountId != nil {
		return *x.CloudAccountId
	}
	return ""
}

type RelatedAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *RelatedAccount) Reset() {
	*x = RelatedAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedAccount) ProtoMessage() {}

func (x *RelatedAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedAccount.ProtoReflect.Descriptor instead.
func (*RelatedAccount) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{11}
}

func (x *RelatedAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelatedAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelatedAccount) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type RelatedAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelatedAccounts []*RelatedAccount `protobuf:"bytes,1,rep,name=relatedAccounts,proto3" json:"relatedAccounts,omitempty"`
}

func (x *RelatedAccounts) Reset() {
	*x = RelatedAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedAccounts) ProtoMessage() {}

func (x *RelatedAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedAccounts.ProtoReflect.Descriptor instead.
func (*RelatedAccounts) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{12}
}

func (x *RelatedAccounts) GetRelatedAccounts() []*RelatedAccount {
	if x != nil {
		return x.RelatedAccounts
	}
	return nil
}

type MemberPersonId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId    string `protobuf:"bytes,1,opt,name=personId,proto3" json:"personId,omitempty"`
	MemberEmail string `protobuf:"bytes,2,opt,name=memberEmail,proto3" json:"memberEmail,omitempty"`
}

func (x *MemberPersonId) Reset() {
	*x = MemberPersonId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberPersonId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPersonId) ProtoMessage() {}

func (x *MemberPersonId) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPersonId.ProtoReflect.Descriptor instead.
func (*MemberPersonId) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{13}
}

func (x *MemberPersonId) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *MemberPersonId) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

type MemberCloudAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner           string          `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	InvitationState InvitationState `protobuf:"varint,4,opt,name=invitationState,proto3,enum=proto.InvitationState" json:"invitationState,omitempty"`
	Type            AccountType     `protobuf:"varint,5,opt,name=type,proto3,enum=proto.AccountType" json:"type,omitempty"`
}

func (x *MemberCloudAccount) Reset() {
	*x = MemberCloudAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCloudAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCloudAccount) ProtoMessage() {}

func (x *MemberCloudAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCloudAccount.ProtoReflect.Descriptor instead.
func (*MemberCloudAccount) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{14}
}

func (x *MemberCloudAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemberCloudAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberCloudAccount) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *MemberCloudAccount) GetInvitationState() InvitationState {
	if x != nil {
		return x.InvitationState
	}
	return InvitationState_INVITE_STATE_UNSPECIFIED
}

func (x *MemberCloudAccount) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

type MemberAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberAccount []*MemberCloudAccount `protobuf:"bytes,1,rep,name=memberAccount,proto3" json:"memberAccount,omitempty"`
}

func (x *MemberAccount) Reset() {
	*x = MemberAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAccount) ProtoMessage() {}

func (x *MemberAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAccount.ProtoReflect.Descriptor instead.
func (*MemberAccount) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{15}
}

func (x *MemberAccount) GetMemberAccount() []*MemberCloudAccount {
	if x != nil {
		return x.MemberAccount
	}
	return nil
}

type CloudAccountMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string   `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Members        []string `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *CloudAccountMembers) Reset() {
	*x = CloudAccountMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountMembers) ProtoMessage() {}

func (x *CloudAccountMembers) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountMembers.ProtoReflect.Descriptor instead.
func (*CloudAccountMembers) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{16}
}

func (x *CloudAccountMembers) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CloudAccountMembers) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

type CloudAccountUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName   string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	OnlyActive *bool  `protobuf:"varint,2,opt,name=onlyActive,proto3,oneof" json:"onlyActive,omitempty"`
}

func (x *CloudAccountUser) Reset() {
	*x = CloudAccountUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountUser) ProtoMessage() {}

func (x *CloudAccountUser) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountUser.ProtoReflect.Descriptor instead.
func (*CloudAccountUser) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{17}
}

func (x *CloudAccountUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CloudAccountUser) GetOnlyActive() bool {
	if x != nil && x.OnlyActive != nil {
		return *x.OnlyActive
	}
	return false
}

// TODO: remove if not used
type Otp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string                 `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	MemberEmail    string                 `protobuf:"bytes,2,opt,name=memberEmail,proto3" json:"memberEmail,omitempty"`
	OtpCode        string                 `protobuf:"bytes,3,opt,name=otpCode,proto3" json:"otpCode,omitempty"`
	OtpState       OtpState               `protobuf:"varint,4,opt,name=otpState,proto3,enum=proto.OtpState" json:"otpState,omitempty"`
	Expiry         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *Otp) Reset() {
	*x = Otp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Otp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Otp) ProtoMessage() {}

func (x *Otp) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Otp.ProtoReflect.Descriptor instead.
func (*Otp) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{18}
}

func (x *Otp) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *Otp) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

func (x *Otp) GetOtpCode() string {
	if x != nil {
		return x.OtpCode
	}
	return ""
}

func (x *Otp) GetOtpState() OtpState {
	if x != nil {
		return x.OtpState
	}
	return OtpState_OTP_STATE_PENDING
}

func (x *Otp) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type OtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	MemberEmail    string `protobuf:"bytes,2,opt,name=memberEmail,proto3" json:"memberEmail,omitempty"`
}

func (x *OtpRequest) Reset() {
	*x = OtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtpRequest) ProtoMessage() {}

func (x *OtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtpRequest.ProtoReflect.Descriptor instead.
func (*OtpRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{19}
}

func (x *OtpRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *OtpRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

type VerifyOtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	MemberEmail    string `protobuf:"bytes,2,opt,name=memberEmail,proto3" json:"memberEmail,omitempty"`
	OtpCode        string `protobuf:"bytes,3,opt,name=otpCode,proto3" json:"otpCode,omitempty"`
}

func (x *VerifyOtpRequest) Reset() {
	*x = VerifyOtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOtpRequest) ProtoMessage() {}

func (x *VerifyOtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOtpRequest.ProtoReflect.Descriptor instead.
func (*VerifyOtpRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{20}
}

func (x *VerifyOtpRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *VerifyOtpRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

func (x *VerifyOtpRequest) GetOtpCode() string {
	if x != nil {
		return x.OtpCode
	}
	return ""
}

type VerifyOtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validated bool     `protobuf:"varint,1,opt,name=validated,proto3" json:"validated,omitempty"`
	OtpState  OtpState `protobuf:"varint,2,opt,name=otpState,proto3,enum=proto.OtpState" json:"otpState,omitempty"`
	Message   string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Blocked   bool     `protobuf:"varint,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	RetryLeft int32    `protobuf:"varint,5,opt,name=retryLeft,proto3" json:"retryLeft,omitempty"`
}

func (x *VerifyOtpResponse) Reset() {
	*x = VerifyOtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOtpResponse) ProtoMessage() {}

func (x *VerifyOtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOtpResponse.ProtoReflect.Descriptor instead.
func (*VerifyOtpResponse) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{21}
}

func (x *VerifyOtpResponse) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *VerifyOtpResponse) GetOtpState() OtpState {
	if x != nil {
		return x.OtpState
	}
	return OtpState_OTP_STATE_PENDING
}

func (x *VerifyOtpResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VerifyOtpResponse) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *VerifyOtpResponse) GetRetryLeft() int32 {
	if x != nil {
		return x.RetryLeft
	}
	return 0
}

type InviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberEmail         string                 `protobuf:"bytes,1,opt,name=member_email,json=memberEmail,proto3" json:"member_email,omitempty"`
	Expiry              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Note                string                 `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	CloudAccountRoleIds []string               `protobuf:"bytes,4,rep,name=cloudAccountRoleIds,proto3" json:"cloudAccountRoleIds,omitempty"`
}

func (x *InviteRequest) Reset() {
	*x = InviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteRequest) ProtoMessage() {}

func (x *InviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteRequest.ProtoReflect.Descriptor instead.
func (*InviteRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{22}
}

func (x *InviteRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

func (x *InviteRequest) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *InviteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *InviteRequest) GetCloudAccountRoleIds() []string {
	if x != nil {
		return x.CloudAccountRoleIds
	}
	return nil
}

type InviteRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAccountId string           `protobuf:"bytes,1,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Invites        []*InviteRequest `protobuf:"bytes,2,rep,name=invites,proto3" json:"invites,omitempty"`
}

func (x *InviteRequestList) Reset() {
	*x = InviteRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteRequestList) ProtoMessage() {}

func (x *InviteRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteRequestList.ProtoReflect.Descriptor instead.
func (*InviteRequestList) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{23}
}

func (x *InviteRequestList) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *InviteRequestList) GetInvites() []*InviteRequest {
	if x != nil {
		return x.Invites
	}
	return nil
}

type Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberEmail     string                 `protobuf:"bytes,1,opt,name=member_email,json=memberEmail,proto3" json:"member_email,omitempty"`
	InvitationState InvitationState        `protobuf:"varint,2,opt,name=invitation_state,json=invitationState,proto3,enum=proto.InvitationState" json:"invitation_state,omitempty"`
	Expiry          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Note            string                 `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *Invite) Reset() {
	*x = Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invite) ProtoMessage() {}

func (x *Invite) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invite.ProtoReflect.Descriptor instead.
func (*Invite) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{24}
}

func (x *Invite) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

func (x *Invite) GetInvitationState() InvitationState {
	if x != nil {
		return x.InvitationState
	}
	return InvitationState_INVITE_STATE_UNSPECIFIED
}

func (x *Invite) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *Invite) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type InviteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanAddMoreMembers bool      `protobuf:"varint,1,opt,name=can_add_more_members,json=canAddMoreMembers,proto3" json:"can_add_more_members,omitempty"`
	Invites           []*Invite `protobuf:"bytes,2,rep,name=invites,proto3" json:"invites,omitempty"`
	MembersLimit      int32     `protobuf:"varint,3,opt,name=members_limit,json=membersLimit,proto3" json:"members_limit,omitempty"`
	MemberCount       int32     `protobuf:"varint,4,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
}

func (x *InviteList) Reset() {
	*x = InviteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteList) ProtoMessage() {}

func (x *InviteList) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteList.ProtoReflect.Descriptor instead.
func (*InviteList) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{25}
}

func (x *InviteList) GetCanAddMoreMembers() bool {
	if x != nil {
		return x.CanAddMoreMembers
	}
	return false
}

func (x *InviteList) GetInvites() []*Invite {
	if x != nil {
		return x.Invites
	}
	return nil
}

func (x *InviteList) GetMembersLimit() int32 {
	if x != nil {
		return x.MembersLimit
	}
	return 0
}

func (x *InviteList) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

type InviteFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccountId string `protobuf:"bytes,1,opt,name=adminAccountId,proto3" json:"adminAccountId,omitempty"`
}

func (x *InviteFilter) Reset() {
	*x = InviteFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteFilter) ProtoMessage() {}

func (x *InviteFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteFilter.ProtoReflect.Descriptor instead.
func (*InviteFilter) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{26}
}

func (x *InviteFilter) GetAdminAccountId() string {
	if x != nil {
		return x.AdminAccountId
	}
	return ""
}

type InviteResendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccountId string `protobuf:"bytes,1,opt,name=adminAccountId,proto3" json:"adminAccountId,omitempty"`
	MemberEmail    string `protobuf:"bytes,2,opt,name=member_email,json=memberEmail,proto3" json:"member_email,omitempty"`
}

func (x *InviteResendRequest) Reset() {
	*x = InviteResendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteResendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteResendRequest) ProtoMessage() {}

func (x *InviteResendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteResendRequest.ProtoReflect.Descriptor instead.
func (*InviteResendRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{27}
}

func (x *InviteResendRequest) GetAdminAccountId() string {
	if x != nil {
		return x.AdminAccountId
	}
	return ""
}

func (x *InviteResendRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

type InviteResendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Blocked   bool   `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`
	RetryLeft int32  `protobuf:"varint,3,opt,name=retryLeft,proto3" json:"retryLeft,omitempty"`
}

func (x *InviteResendResponse) Reset() {
	*x = InviteResendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteResendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteResendResponse) ProtoMessage() {}

func (x *InviteResendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteResendResponse.ProtoReflect.Descriptor instead.
func (*InviteResendResponse) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{28}
}

func (x *InviteResendResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InviteResendResponse) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *InviteResendResponse) GetRetryLeft() int32 {
	if x != nil {
		return x.RetryLeft
	}
	return 0
}

type InviteRevokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccountId  string          `protobuf:"bytes,1,opt,name=adminAccountId,proto3" json:"adminAccountId,omitempty"`
	MemberEmail     string          `protobuf:"bytes,2,opt,name=member_email,json=memberEmail,proto3" json:"member_email,omitempty"`
	InvitationState InvitationState `protobuf:"varint,3,opt,name=invitation_state,json=invitationState,proto3,enum=proto.InvitationState" json:"invitation_state,omitempty"`
}

func (x *InviteRevokeRequest) Reset() {
	*x = InviteRevokeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteRevokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteRevokeRequest) ProtoMessage() {}

func (x *InviteRevokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteRevokeRequest.ProtoReflect.Descriptor instead.
func (*InviteRevokeRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{29}
}

func (x *InviteRevokeRequest) GetAdminAccountId() string {
	if x != nil {
		return x.AdminAccountId
	}
	return ""
}

func (x *InviteRevokeRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

func (x *InviteRevokeRequest) GetInvitationState() InvitationState {
	if x != nil {
		return x.InvitationState
	}
	return InvitationState_INVITE_STATE_UNSPECIFIED
}

type InviteUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccountId  string          `protobuf:"bytes,1,opt,name=adminAccountId,proto3" json:"adminAccountId,omitempty"`
	MemberEmail     string          `protobuf:"bytes,2,opt,name=memberEmail,proto3" json:"memberEmail,omitempty"`
	InvitationState InvitationState `protobuf:"varint,3,opt,name=invitation_state,json=invitationState,proto3,enum=proto.InvitationState" json:"invitation_state,omitempty"`
}

func (x *InviteUpdateRequest) Reset() {
	*x = InviteUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUpdateRequest) ProtoMessage() {}

func (x *InviteUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUpdateRequest.ProtoReflect.Descriptor instead.
func (*InviteUpdateRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{30}
}

func (x *InviteUpdateRequest) GetAdminAccountId() string {
	if x != nil {
		return x.AdminAccountId
	}
	return ""
}

func (x *InviteUpdateRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

func (x *InviteUpdateRequest) GetInvitationState() InvitationState {
	if x != nil {
		return x.InvitationState
	}
	return InvitationState_INVITE_STATE_UNSPECIFIED
}

type ValidateInviteCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminCloudAccountId string `protobuf:"bytes,1,opt,name=adminCloudAccountId,proto3" json:"adminCloudAccountId,omitempty"`
	MemberEmail         string `protobuf:"bytes,2,opt,name=memberEmail,proto3" json:"memberEmail,omitempty"`
	InviteCode          string `protobuf:"bytes,3,opt,name=inviteCode,proto3" json:"inviteCode,omitempty"`
}

func (x *ValidateInviteCodeRequest) Reset() {
	*x = ValidateInviteCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateInviteCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateInviteCodeRequest) ProtoMessage() {}

func (x *ValidateInviteCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateInviteCodeRequest.ProtoReflect.Descriptor instead.
func (*ValidateInviteCodeRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{31}
}

func (x *ValidateInviteCodeRequest) GetAdminCloudAccountId() string {
	if x != nil {
		return x.AdminCloudAccountId
	}
	return ""
}

func (x *ValidateInviteCodeRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

func (x *ValidateInviteCodeRequest) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

type ValidateInviteCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid           bool            `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	InvitationState InvitationState `protobuf:"varint,2,opt,name=invitationState,proto3,enum=proto.InvitationState" json:"invitationState,omitempty"`
}

func (x *ValidateInviteCodeResponse) Reset() {
	*x = ValidateInviteCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateInviteCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateInviteCodeResponse) ProtoMessage() {}

func (x *ValidateInviteCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateInviteCodeResponse.ProtoReflect.Descriptor instead.
func (*ValidateInviteCodeResponse) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{32}
}

func (x *ValidateInviteCodeResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateInviteCodeResponse) GetInvitationState() InvitationState {
	if x != nil {
		return x.InvitationState
	}
	return InvitationState_INVITE_STATE_UNSPECIFIED
}

type SendInviteCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccountId string `protobuf:"bytes,1,opt,name=adminAccountId,proto3" json:"adminAccountId,omitempty"`
	MemberEmail    string `protobuf:"bytes,2,opt,name=memberEmail,proto3" json:"memberEmail,omitempty"`
}

func (x *SendInviteCodeRequest) Reset() {
	*x = SendInviteCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudaccount_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInviteCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInviteCodeRequest) ProtoMessage() {}

func (x *SendInviteCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudaccount_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInviteCodeRequest.ProtoReflect.Descriptor instead.
func (*SendInviteCodeRequest) Descriptor() ([]byte, []int) {
	return file_cloudaccount_proto_rawDescGZIP(), []int{33}
}

func (x *SendInviteCodeRequest) GetAdminAccountId() string {
	if x != nil {
		return x.AdminAccountId
	}
	return ""
}

func (x *SendInviteCodeRequest) GetMemberEmail() string {
	if x != nil {
		return x.MemberEmail
	}
	return ""
}

var File_cloudaccount_proto protoreflect.FileDescriptor

var file_cloudaccount_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x07, 0x0a, 0x0c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x44, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x69,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x48, 0x0a, 0x14, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x22, 0xc6, 0x09, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x15,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a,
	0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x13, 0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x11, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x09, 0x52, 0x11,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x0a, 0x52, 0x14, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x22, 0xba, 0x0b, 0x0a,
	0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x08, 0x52, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0b, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c,
	0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x16, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x13, 0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x13,
	0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57,
	0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x13, 0x52, 0x16, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x14, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x15, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x16, 0x52, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54,
	0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x22, 0xfc, 0x0a, 0x0a, 0x12, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x15, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x08, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a, 0x6c, 0x6f, 0x77,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0a, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0b, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0c, 0x52, 0x13, 0x70, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x16, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x11, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x13, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x14, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x14,
	0x52, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd,
	0x1b, 0x02, 0x38, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x26, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x0f,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x22, 0x4e, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0xb8, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x0d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a,
	0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd,
	0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a,
	0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0xca, 0x01, 0x0a, 0x03, 0x4f, 0x74, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x6f, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x6f, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x64, 0x0a,
	0x0a, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38, 0x01, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x08, 0x6f, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x6f, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x22, 0xac, 0x01,
	0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x79, 0x0a, 0x11,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x22, 0xae, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x61, 0x6e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x44, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd,
	0x1b, 0x02, 0x38, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x68, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x65, 0x66, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x65, 0x66,
	0x74, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x02, 0x38, 0x01, 0x52,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x41, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b,
	0x02, 0x38, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x20, 0x01,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x20, 0x01, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x1a, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x69, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x20, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2a, 0xd3, 0x01, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x06, 0x2a, 0x8e, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x43, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x43, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x04, 0x2a, 0x67, 0x0a, 0x08, 0x4f, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x07, 0x4f,
	0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0xd4, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x32, 0xc3, 0x08,
	0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x5d, 0x0a, 0x06, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x58,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x66, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x4f, 0x69, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x74, 0x69, 0x64,
	0x2f, 0x7b, 0x74, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x69, 0x64, 0x2f, 0x7b, 0x6f, 0x69, 0x64, 0x7d,
	0x12, 0x60, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x70, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x69, 0x64, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x69, 0x64, 0x7d, 0x12, 0x55, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x70,
	0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x5a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x55, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70,
	0x69, 0x6e, 0x67, 0x32, 0xb3, 0x08, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x7b, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69,
	0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x12, 0x88,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12,
	0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48,
	0x01, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x12, 0x78, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x61, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0x9b, 0x01, 0x0a, 0x1c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x32, 0xbd, 0x02, 0x0a, 0x0a, 0x4f, 0x74, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x74, 0x70, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x74, 0x70, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x12, 0x69, 0x0a, 0x09, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x74, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04,
	0x0a, 0x02, 0x48, 0x01, 0x12, 0x61, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x74,
	0x70, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x74, 0x70, 0x2f, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x32, 0xcf, 0x07, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x12, 0x70, 0x0a,
	0x0a, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x64, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x12,
	0x88, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x3a, 0x01, 0x2a,
	0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01,
	0x12, 0x9a, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b,
	0x04, 0x0a, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x12, 0x83, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a,
	0x02, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08,
	0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x48, 0x01, 0x32, 0xb2, 0x01, 0x0a, 0x23, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x42, 0x55,
	0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa,
	0xdd, 0x1b, 0x02, 0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudaccount_proto_rawDescOnce sync.Once
	file_cloudaccount_proto_rawDescData = file_cloudaccount_proto_rawDesc
)

func file_cloudaccount_proto_rawDescGZIP() []byte {
	file_cloudaccount_proto_rawDescOnce.Do(func() {
		file_cloudaccount_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudaccount_proto_rawDescData)
	})
	return file_cloudaccount_proto_rawDescData
}

var file_cloudaccount_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cloudaccount_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_cloudaccount_proto_goTypes = []interface{}{
	(AccountType)(0),                   // 0: proto.AccountType
	(UpgradeStatus)(0),                 // 1: proto.UpgradeStatus
	(OtpState)(0),                      // 2: proto.OtpState
	(OtpType)(0),                       // 3: proto.OtpType
	(InvitationState)(0),               // 4: proto.InvitationState
	(*CloudAccount)(nil),               // 5: proto.CloudAccount
	(*CloudAccountCreate)(nil),         // 6: proto.CloudAccountCreate
	(*CloudAccountFilter)(nil),         // 7: proto.CloudAccountFilter
	(*CloudAccountUpdate)(nil),         // 8: proto.CloudAccountUpdate
	(*CloudAccountId)(nil),             // 9: proto.CloudAccountId
	(*CloudAccountOid)(nil),            // 10: proto.CloudAccountOid
	(*CloudAccountName)(nil),           // 11: proto.CloudAccountName
	(*CloudAccountPersonId)(nil),       // 12: proto.CloudAccountPersonId
	(*AccountPerson)(nil),              // 13: proto.AccountPerson
	(*AccountUser)(nil),                // 14: proto.AccountUser
	(*AccountClient)(nil),              // 15: proto.AccountClient
	(*RelatedAccount)(nil),             // 16: proto.RelatedAccount
	(*RelatedAccounts)(nil),            // 17: proto.RelatedAccounts
	(*MemberPersonId)(nil),             // 18: proto.MemberPersonId
	(*MemberCloudAccount)(nil),         // 19: proto.MemberCloudAccount
	(*MemberAccount)(nil),              // 20: proto.MemberAccount
	(*CloudAccountMembers)(nil),        // 21: proto.CloudAccountMembers
	(*CloudAccountUser)(nil),           // 22: proto.CloudAccountUser
	(*Otp)(nil),                        // 23: proto.Otp
	(*OtpRequest)(nil),                 // 24: proto.OtpRequest
	(*VerifyOtpRequest)(nil),           // 25: proto.VerifyOtpRequest
	(*VerifyOtpResponse)(nil),          // 26: proto.VerifyOtpResponse
	(*InviteRequest)(nil),              // 27: proto.InviteRequest
	(*InviteRequestList)(nil),          // 28: proto.InviteRequestList
	(*Invite)(nil),                     // 29: proto.Invite
	(*InviteList)(nil),                 // 30: proto.InviteList
	(*InviteFilter)(nil),               // 31: proto.InviteFilter
	(*InviteResendRequest)(nil),        // 32: proto.InviteResendRequest
	(*InviteResendResponse)(nil),       // 33: proto.InviteResendResponse
	(*InviteRevokeRequest)(nil),        // 34: proto.InviteRevokeRequest
	(*InviteUpdateRequest)(nil),        // 35: proto.InviteUpdateRequest
	(*ValidateInviteCodeRequest)(nil),  // 36: proto.ValidateInviteCodeRequest
	(*ValidateInviteCodeResponse)(nil), // 37: proto.ValidateInviteCodeResponse
	(*SendInviteCodeRequest)(nil),      // 38: proto.SendInviteCodeRequest
	(*timestamppb.Timestamp)(nil),      // 39: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),              // 40: google.protobuf.Empty
	(*wrapperspb.BoolValue)(nil),       // 41: google.protobuf.BoolValue
}
var file_cloudaccount_proto_depIdxs = []int32{
	39, // 0: proto.CloudAccount.created:type_name -> google.protobuf.Timestamp
	0,  // 1: proto.CloudAccount.type:type_name -> proto.AccountType
	39, // 2: proto.CloudAccount.creditsDepleted:type_name -> google.protobuf.Timestamp
	39, // 3: proto.CloudAccount.accessLimitedTimestamp:type_name -> google.protobuf.Timestamp
	1,  // 4: proto.CloudAccount.upgradedToPremium:type_name -> proto.UpgradeStatus
	1,  // 5: proto.CloudAccount.upgradedToEnterprise:type_name -> proto.UpgradeStatus
	0,  // 6: proto.CloudAccountCreate.type:type_name -> proto.AccountType
	39, // 7: proto.CloudAccountCreate.creditsDepleted:type_name -> google.protobuf.Timestamp
	39, // 8: proto.CloudAccountCreate.accessLimitedTimestamp:type_name -> google.protobuf.Timestamp
	1,  // 9: proto.CloudAccountCreate.upgradedToPremium:type_name -> proto.UpgradeStatus
	1,  // 10: proto.CloudAccountCreate.upgradedToEnterprise:type_name -> proto.UpgradeStatus
	39, // 11: proto.CloudAccountFilter.created:type_name -> google.protobuf.Timestamp
	0,  // 12: proto.CloudAccountFilter.type:type_name -> proto.AccountType
	39, // 13: proto.CloudAccountFilter.creditsDepleted:type_name -> google.protobuf.Timestamp
	39, // 14: proto.CloudAccountFilter.accessLimitedTimestamp:type_name -> google.protobuf.Timestamp
	1,  // 15: proto.CloudAccountFilter.upgradedToPremium:type_name -> proto.UpgradeStatus
	1,  // 16: proto.CloudAccountFilter.upgradedToEnterprise:type_name -> proto.UpgradeStatus
	0,  // 17: proto.CloudAccountUpdate.type:type_name -> proto.AccountType
	39, // 18: proto.CloudAccountUpdate.creditsDepleted:type_name -> google.protobuf.Timestamp
	39, // 19: proto.CloudAccountUpdate.accessLimitedTimestamp:type_name -> google.protobuf.Timestamp
	1,  // 20: proto.CloudAccountUpdate.upgradedToPremium:type_name -> proto.UpgradeStatus
	1,  // 21: proto.CloudAccountUpdate.upgradedToEnterprise:type_name -> proto.UpgradeStatus
	16, // 22: proto.RelatedAccounts.relatedAccounts:type_name -> proto.RelatedAccount
	4,  // 23: proto.MemberCloudAccount.invitationState:type_name -> proto.InvitationState
	0,  // 24: proto.MemberCloudAccount.type:type_name -> proto.AccountType
	19, // 25: proto.MemberAccount.memberAccount:type_name -> proto.MemberCloudAccount
	2,  // 26: proto.Otp.otpState:type_name -> proto.OtpState
	39, // 27: proto.Otp.expiry:type_name -> google.protobuf.Timestamp
	2,  // 28: proto.VerifyOtpResponse.otpState:type_name -> proto.OtpState
	39, // 29: proto.InviteRequest.expiry:type_name -> google.protobuf.Timestamp
	27, // 30: proto.InviteRequestList.invites:type_name -> proto.InviteRequest
	4,  // 31: proto.Invite.invitation_state:type_name -> proto.InvitationState
	39, // 32: proto.Invite.expiry:type_name -> google.protobuf.Timestamp
	29, // 33: proto.InviteList.invites:type_name -> proto.Invite
	4,  // 34: proto.InviteRevokeRequest.invitation_state:type_name -> proto.InvitationState
	4,  // 35: proto.InviteUpdateRequest.invitation_state:type_name -> proto.InvitationState
	4,  // 36: proto.ValidateInviteCodeResponse.invitationState:type_name -> proto.InvitationState
	6,  // 37: proto.CloudAccountService.Create:input_type -> proto.CloudAccountCreate
	6,  // 38: proto.CloudAccountService.Ensure:input_type -> proto.CloudAccountCreate
	9,  // 39: proto.CloudAccountService.GetById:input_type -> proto.CloudAccountId
	10, // 40: proto.CloudAccountService.GetByOid:input_type -> proto.CloudAccountOid
	11, // 41: proto.CloudAccountService.GetByName:input_type -> proto.CloudAccountName
	12, // 42: proto.CloudAccountService.GetByPersonId:input_type -> proto.CloudAccountPersonId
	7,  // 43: proto.CloudAccountService.Search:input_type -> proto.CloudAccountFilter
	8,  // 44: proto.CloudAccountService.Update:input_type -> proto.CloudAccountUpdate
	11, // 45: proto.CloudAccountService.CheckCloudAccountExists:input_type -> proto.CloudAccountName
	9,  // 46: proto.CloudAccountService.Delete:input_type -> proto.CloudAccountId
	40, // 47: proto.CloudAccountService.Ping:input_type -> google.protobuf.Empty
	9,  // 48: proto.CloudAccountMemberService.ReadMembers:input_type -> proto.CloudAccountId
	9,  // 49: proto.CloudAccountMemberService.ReadActiveMembers:input_type -> proto.CloudAccountId
	21, // 50: proto.CloudAccountMemberService.AddMembers:input_type -> proto.CloudAccountMembers
	21, // 51: proto.CloudAccountMemberService.RemoveMembers:input_type -> proto.CloudAccountMembers
	22, // 52: proto.CloudAccountMemberService.ReadUserCloudAccounts:input_type -> proto.CloudAccountUser
	14, // 53: proto.CloudAccountMemberService.GetCloudAccountsForOpa:input_type -> proto.AccountUser
	18, // 54: proto.CloudAccountMemberService.UpdatePersonId:input_type -> proto.MemberPersonId
	14, // 55: proto.CloudAccountMemberService.GetMemberPersonId:input_type -> proto.AccountUser
	15, // 56: proto.CloudAccountAppClientService.GetAppClientCloudAccount:input_type -> proto.AccountClient
	24, // 57: proto.OtpService.CreateOtp:input_type -> proto.OtpRequest
	25, // 58: proto.OtpService.VerifyOtp:input_type -> proto.VerifyOtpRequest
	24, // 59: proto.OtpService.ResendOtp:input_type -> proto.OtpRequest
	28, // 60: proto.CloudAccountInvitationService.CreateInvite:input_type -> proto.InviteRequestList
	31, // 61: proto.CloudAccountInvitationService.ReadInvite:input_type -> proto.InviteFilter
	32, // 62: proto.CloudAccountInvitationService.ResendInvite:input_type -> proto.InviteResendRequest
	34, // 63: proto.CloudAccountInvitationService.RevokeInvite:input_type -> proto.InviteRevokeRequest
	36, // 64: proto.CloudAccountInvitationService.ValidateInviteCode:input_type -> proto.ValidateInviteCodeRequest
	38, // 65: proto.CloudAccountInvitationService.SendInviteCode:input_type -> proto.SendInviteCodeRequest
	35, // 66: proto.CloudAccountInvitationService.RemoveInvite:input_type -> proto.InviteUpdateRequest
	35, // 67: proto.CloudAccountInvitationMemberService.RejectInvite:input_type -> proto.InviteUpdateRequest
	9,  // 68: proto.CloudAccountService.Create:output_type -> proto.CloudAccountId
	5,  // 69: proto.CloudAccountService.Ensure:output_type -> proto.CloudAccount
	5,  // 70: proto.CloudAccountService.GetById:output_type -> proto.CloudAccount
	5,  // 71: proto.CloudAccountService.GetByOid:output_type -> proto.CloudAccount
	5,  // 72: proto.CloudAccountService.GetByName:output_type -> proto.CloudAccount
	5,  // 73: proto.CloudAccountService.GetByPersonId:output_type -> proto.CloudAccount
	5,  // 74: proto.CloudAccountService.Search:output_type -> proto.CloudAccount
	40, // 75: proto.CloudAccountService.Update:output_type -> google.protobuf.Empty
	41, // 76: proto.CloudAccountService.CheckCloudAccountExists:output_type -> google.protobuf.BoolValue
	40, // 77: proto.CloudAccountService.Delete:output_type -> google.protobuf.Empty
	40, // 78: proto.CloudAccountService.Ping:output_type -> google.protobuf.Empty
	21, // 79: proto.CloudAccountMemberService.ReadMembers:output_type -> proto.CloudAccountMembers
	21, // 80: proto.CloudAccountMemberService.ReadActiveMembers:output_type -> proto.CloudAccountMembers
	40, // 81: proto.CloudAccountMemberService.AddMembers:output_type -> google.protobuf.Empty
	40, // 82: proto.CloudAccountMemberService.RemoveMembers:output_type -> google.protobuf.Empty
	20, // 83: proto.CloudAccountMemberService.ReadUserCloudAccounts:output_type -> proto.MemberAccount
	17, // 84: proto.CloudAccountMemberService.GetCloudAccountsForOpa:output_type -> proto.RelatedAccounts
	40, // 85: proto.CloudAccountMemberService.UpdatePersonId:output_type -> google.protobuf.Empty
	13, // 86: proto.CloudAccountMemberService.GetMemberPersonId:output_type -> proto.AccountPerson
	5,  // 87: proto.CloudAccountAppClientService.GetAppClientCloudAccount:output_type -> proto.CloudAccount
	40, // 88: proto.OtpService.CreateOtp:output_type -> google.protobuf.Empty
	26, // 89: proto.OtpService.VerifyOtp:output_type -> proto.VerifyOtpResponse
	40, // 90: proto.OtpService.ResendOtp:output_type -> google.protobuf.Empty
	40, // 91: proto.CloudAccountInvitationService.CreateInvite:output_type -> google.protobuf.Empty
	30, // 92: proto.CloudAccountInvitationService.ReadInvite:output_type -> proto.InviteList
	33, // 93: proto.CloudAccountInvitationService.ResendInvite:output_type -> proto.InviteResendResponse
	40, // 94: proto.CloudAccountInvitationService.RevokeInvite:output_type -> google.protobuf.Empty
	37, // 95: proto.CloudAccountInvitationService.ValidateInviteCode:output_type -> proto.ValidateInviteCodeResponse
	40, // 96: proto.CloudAccountInvitationService.SendInviteCode:output_type -> google.protobuf.Empty
	40, // 97: proto.CloudAccountInvitationService.RemoveInvite:output_type -> google.protobuf.Empty
	40, // 98: proto.CloudAccountInvitationMemberService.RejectInvite:output_type -> google.protobuf.Empty
	68, // [68:99] is the sub-list for method output_type
	37, // [37:68] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_cloudaccount_proto_init() }
func file_cloudaccount_proto_init() {
	if File_cloudaccount_proto != nil {
		return
	}
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloudaccount_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountOid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountPersonId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberPersonId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCloudAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Otp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteResendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteResendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteRevokeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateInviteCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateInviteCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudaccount_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInviteCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloudaccount_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_cloudaccount_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_cloudaccount_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_cloudaccount_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_cloudaccount_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_cloudaccount_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudaccount_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_cloudaccount_proto_goTypes,
		DependencyIndexes: file_cloudaccount_proto_depIdxs,
		EnumInfos:         file_cloudaccount_proto_enumTypes,
		MessageInfos:      file_cloudaccount_proto_msgTypes,
	}.Build()
	File_cloudaccount_proto = out.File
	file_cloudaccount_proto_rawDesc = nil
	file_cloudaccount_proto_goTypes = nil
	file_cloudaccount_proto_depIdxs = nil
}
