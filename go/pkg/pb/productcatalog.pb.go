// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: productcatalog.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Expand as more product types such as storage and networking are added.
type RateUnit int32

const (
	RateUnit_RATE_UNIT_UNSPECIFIED                RateUnit = 0
	RateUnit_RATE_UNIT_DOLLARS_PER_MINUTE         RateUnit = 1
	RateUnit_RATE_UNIT_DOLLARS_PER_TB_PER_HOUR    RateUnit = 2
	RateUnit_RATE_UNIT_DOLLARS_PER_INFERENCE      RateUnit = 3
	RateUnit_RATE_UNIT_DOLLARS_PER_MILLION_TOKENS RateUnit = 4
)

// Enum value maps for RateUnit.
var (
	RateUnit_name = map[int32]string{
		0: "RATE_UNIT_UNSPECIFIED",
		1: "RATE_UNIT_DOLLARS_PER_MINUTE",
		2: "RATE_UNIT_DOLLARS_PER_TB_PER_HOUR",
		3: "RATE_UNIT_DOLLARS_PER_INFERENCE",
		4: "RATE_UNIT_DOLLARS_PER_MILLION_TOKENS",
	}
	RateUnit_value = map[string]int32{
		"RATE_UNIT_UNSPECIFIED":                0,
		"RATE_UNIT_DOLLARS_PER_MINUTE":         1,
		"RATE_UNIT_DOLLARS_PER_TB_PER_HOUR":    2,
		"RATE_UNIT_DOLLARS_PER_INFERENCE":      3,
		"RATE_UNIT_DOLLARS_PER_MILLION_TOKENS": 4,
	}
)

func (x RateUnit) Enum() *RateUnit {
	p := new(RateUnit)
	*p = x
	return p
}

func (x RateUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_productcatalog_proto_enumTypes[0].Descriptor()
}

func (RateUnit) Type() protoreflect.EnumType {
	return &file_productcatalog_proto_enumTypes[0]
}

func (x RateUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateUnit.Descriptor instead.
func (RateUnit) EnumDescriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{0}
}

type ProductStatus int32

const (
	ProductStatus_PRODUCT_STATUS_UNSPECIFIED  ProductStatus = 0
	ProductStatus_PRODUCT_STATUS_READY        ProductStatus = 1
	ProductStatus_PRODUCT_STATUS_PROVISIONING ProductStatus = 2
	ProductStatus_PRODUCT_STATUS_ERROR        ProductStatus = 3
)

// Enum value maps for ProductStatus.
var (
	ProductStatus_name = map[int32]string{
		0: "PRODUCT_STATUS_UNSPECIFIED",
		1: "PRODUCT_STATUS_READY",
		2: "PRODUCT_STATUS_PROVISIONING",
		3: "PRODUCT_STATUS_ERROR",
	}
	ProductStatus_value = map[string]int32{
		"PRODUCT_STATUS_UNSPECIFIED":  0,
		"PRODUCT_STATUS_READY":        1,
		"PRODUCT_STATUS_PROVISIONING": 2,
		"PRODUCT_STATUS_ERROR":        3,
	}
)

func (x ProductStatus) Enum() *ProductStatus {
	p := new(ProductStatus)
	*p = x
	return p
}

func (x ProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_productcatalog_proto_enumTypes[1].Descriptor()
}

func (ProductStatus) Type() protoreflect.EnumType {
	return &file_productcatalog_proto_enumTypes[1]
}

func (x ProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus.Descriptor instead.
func (ProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{1}
}

type ChangeRequestType int32

const (
	ChangeRequestType_create ChangeRequestType = 0
	ChangeRequestType_update ChangeRequestType = 1
	ChangeRequestType_enable ChangeRequestType = 2
)

// Enum value maps for ChangeRequestType.
var (
	ChangeRequestType_name = map[int32]string{
		0: "create",
		1: "update",
		2: "enable",
	}
	ChangeRequestType_value = map[string]int32{
		"create": 0,
		"update": 1,
		"enable": 2,
	}
)

func (x ChangeRequestType) Enum() *ChangeRequestType {
	p := new(ChangeRequestType)
	*p = x
	return p
}

func (x ChangeRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_productcatalog_proto_enumTypes[2].Descriptor()
}

func (ChangeRequestType) Type() protoreflect.EnumType {
	return &file_productcatalog_proto_enumTypes[2]
}

func (x ChangeRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeRequestType.Descriptor instead.
func (ChangeRequestType) EnumDescriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{2}
}

type ChangeRequestStatus int32

const (
	ChangeRequestStatus_pending  ChangeRequestStatus = 0
	ChangeRequestStatus_approved ChangeRequestStatus = 1
	ChangeRequestStatus_denied   ChangeRequestStatus = 2
)

// Enum value maps for ChangeRequestStatus.
var (
	ChangeRequestStatus_name = map[int32]string{
		0: "pending",
		1: "approved",
		2: "denied",
	}
	ChangeRequestStatus_value = map[string]int32{
		"pending":  0,
		"approved": 1,
		"denied":   2,
	}
)

func (x ChangeRequestStatus) Enum() *ChangeRequestStatus {
	p := new(ChangeRequestStatus)
	*p = x
	return p
}

func (x ChangeRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_productcatalog_proto_enumTypes[3].Descriptor()
}

func (ChangeRequestStatus) Type() protoreflect.EnumType {
	return &file_productcatalog_proto_enumTypes[3]
}

func (x ChangeRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeRequestStatus.Descriptor instead.
func (ChangeRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{3}
}

type VendorFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Id   *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *VendorFilter) Reset() {
	*x = VendorFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorFilter) ProtoMessage() {}

func (x *VendorFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorFilter.ProtoReflect.Descriptor instead.
func (*VendorFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{0}
}

func (x *VendorFilter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VendorFilter) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type Vendor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Families    []*ProductFamily       `protobuf:"bytes,5,rep,name=families,proto3" json:"families,omitempty"`
}

func (x *Vendor) Reset() {
	*x = Vendor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vendor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor) ProtoMessage() {}

func (x *Vendor) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor.ProtoReflect.Descriptor instead.
func (*Vendor) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{1}
}

func (x *Vendor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vendor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vendor) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Vendor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vendor) GetFamilies() []*ProductFamily {
	if x != nil {
		return x.Families
	}
	return nil
}

type ProductFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ProductFamily) Reset() {
	*x = ProductFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFamily) ProtoMessage() {}

func (x *ProductFamily) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFamily.ProtoReflect.Descriptor instead.
func (*ProductFamily) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{2}
}

func (x *ProductFamily) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductFamily) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductFamily) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProductFamily) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ProductUserFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string         `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	ProductFilter  *ProductFilter `protobuf:"bytes,2,opt,name=productFilter,proto3" json:"productFilter,omitempty"`
}

func (x *ProductUserFilter) Reset() {
	*x = ProductUserFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductUserFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductUserFilter) ProtoMessage() {}

func (x *ProductUserFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductUserFilter.ProtoReflect.Descriptor instead.
func (*ProductUserFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{3}
}

func (x *ProductUserFilter) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductUserFilter) GetProductFilter() *ProductFilter {
	if x != nil {
		return x.ProductFilter
	}
	return nil
}

type ProductFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string           `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Id          *string           `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	VendorId    *string           `protobuf:"bytes,3,opt,name=vendorId,proto3,oneof" json:"vendorId,omitempty"`
	FamilyId    *string           `protobuf:"bytes,4,opt,name=familyId,proto3,oneof" json:"familyId,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Eccn        *string           `protobuf:"bytes,6,opt,name=eccn,proto3,oneof" json:"eccn,omitempty"`
	Pcq         *string           `protobuf:"bytes,7,opt,name=pcq,proto3,oneof" json:"pcq,omitempty"`
	MatchExpr   *string           `protobuf:"bytes,8,opt,name=matchExpr,proto3,oneof" json:"matchExpr,omitempty"`
	AccountType *AccountType      `protobuf:"varint,9,opt,name=accountType,proto3,enum=proto.AccountType,oneof" json:"accountType,omitempty"`
	Region      *string           `protobuf:"bytes,10,opt,name=region,proto3,oneof" json:"region,omitempty"`
}

func (x *ProductFilter) Reset() {
	*x = ProductFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFilter) ProtoMessage() {}

func (x *ProductFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFilter.ProtoReflect.Descriptor instead.
func (*ProductFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{4}
}

func (x *ProductFilter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProductFilter) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ProductFilter) GetVendorId() string {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return ""
}

func (x *ProductFilter) GetFamilyId() string {
	if x != nil && x.FamilyId != nil {
		return *x.FamilyId
	}
	return ""
}

func (x *ProductFilter) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProductFilter) GetEccn() string {
	if x != nil && x.Eccn != nil {
		return *x.Eccn
	}
	return ""
}

func (x *ProductFilter) GetPcq() string {
	if x != nil && x.Pcq != nil {
		return *x.Pcq
	}
	return ""
}

func (x *ProductFilter) GetMatchExpr() string {
	if x != nil && x.MatchExpr != nil {
		return *x.MatchExpr
	}
	return ""
}

func (x *ProductFilter) GetAccountType() AccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *ProductFilter) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	VendorId    string                 `protobuf:"bytes,4,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	FamilyId    string                 `protobuf:"bytes,5,opt,name=familyId,proto3" json:"familyId,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Eccn        string                 `protobuf:"bytes,8,opt,name=eccn,proto3" json:"eccn,omitempty"`
	Pcq         string                 `protobuf:"bytes,9,opt,name=pcq,proto3" json:"pcq,omitempty"`
	MatchExpr   string                 `protobuf:"bytes,10,opt,name=matchExpr,proto3" json:"matchExpr,omitempty"`
	Rates       []*Rate                `protobuf:"bytes,11,rep,name=rates,proto3" json:"rates,omitempty"`
	Status      string                 `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Access      string                 `protobuf:"bytes,13,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{5}
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Product) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Product) GetFamilyId() string {
	if x != nil {
		return x.FamilyId
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Product) GetEccn() string {
	if x != nil {
		return x.Eccn
	}
	return ""
}

func (x *Product) GetPcq() string {
	if x != nil {
		return x.Pcq
	}
	return ""
}

func (x *Product) GetMatchExpr() string {
	if x != nil {
		return x.MatchExpr
	}
	return ""
}

func (x *Product) GetRates() []*Rate {
	if x != nil {
		return x.Rates
	}
	return nil
}

func (x *Product) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Product) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType AccountType `protobuf:"varint,1,opt,name=accountType,proto3,enum=proto.AccountType" json:"accountType,omitempty"`
	Unit        RateUnit    `protobuf:"varint,2,opt,name=unit,proto3,enum=proto.RateUnit" json:"unit,omitempty"`
	Rate        string      `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	UsageExpr   string      `protobuf:"bytes,4,opt,name=usageExpr,proto3" json:"usageExpr,omitempty"`
}

func (x *Rate) Reset() {
	*x = Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{6}
}

func (x *Rate) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *Rate) GetUnit() RateUnit {
	if x != nil {
		return x.Unit
	}
	return RateUnit_RATE_UNIT_UNSPECIFIED
}

func (x *Rate) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *Rate) GetUsageExpr() string {
	if x != nil {
		return x.UsageExpr
	}
	return ""
}

type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{7}
}

func (x *ProductResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type VendorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendors []*Vendor `protobuf:"bytes,1,rep,name=vendors,proto3" json:"vendors,omitempty"`
}

func (x *VendorResponse) Reset() {
	*x = VendorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorResponse) ProtoMessage() {}

func (x *VendorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorResponse.ProtoReflect.Descriptor instead.
func (*VendorResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{8}
}

func (x *VendorResponse) GetVendors() []*Vendor {
	if x != nil {
		return x.Vendors
	}
	return nil
}

type SetProductStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId  string        `protobuf:"bytes,1,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	FamilyId  string        `protobuf:"bytes,2,opt,name=familyId,proto3" json:"familyId,omitempty"`
	ProductId string        `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	Status    ProductStatus `protobuf:"varint,4,opt,name=status,proto3,enum=proto.ProductStatus" json:"status,omitempty"`
	Error     string        `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetProductStatus) Reset() {
	*x = SetProductStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProductStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProductStatus) ProtoMessage() {}

func (x *SetProductStatus) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProductStatus.ProtoReflect.Descriptor instead.
func (*SetProductStatus) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{9}
}

func (x *SetProductStatus) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *SetProductStatus) GetFamilyId() string {
	if x != nil {
		return x.FamilyId
	}
	return ""
}

func (x *SetProductStatus) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *SetProductStatus) GetStatus() ProductStatus {
	if x != nil {
		return x.Status
	}
	return ProductStatus_PRODUCT_STATUS_UNSPECIFIED
}

func (x *SetProductStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SetProductStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []*SetProductStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *SetProductStatusRequest) Reset() {
	*x = SetProductStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProductStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProductStatusRequest) ProtoMessage() {}

func (x *SetProductStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProductStatusRequest.ProtoReflect.Descriptor instead.
func (*SetProductStatusRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{10}
}

func (x *SetProductStatusRequest) GetStatus() []*SetProductStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId *string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3,oneof" json:"cloudaccountId,omitempty"`
}

func (x *GetAccessRequest) Reset() {
	*x = GetAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessRequest) ProtoMessage() {}

func (x *GetAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessRequest.ProtoReflect.Descriptor instead.
func (*GetAccessRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{11}
}

func (x *GetAccessRequest) GetCloudaccountId() string {
	if x != nil && x.CloudaccountId != nil {
		return *x.CloudaccountId
	}
	return ""
}

type GetAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acl []*ProductAccessResponse `protobuf:"bytes,1,rep,name=acl,proto3" json:"acl,omitempty"`
}

func (x *GetAccessResponse) Reset() {
	*x = GetAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessResponse) ProtoMessage() {}

func (x *GetAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessResponse.ProtoReflect.Descriptor instead.
func (*GetAccessResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{12}
}

func (x *GetAccessResponse) GetAcl() []*ProductAccessResponse {
	if x != nil {
		return x.Acl
	}
	return nil
}

type ProductAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string                 `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	VendorId       string                 `protobuf:"bytes,2,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	FamilyId       string                 `protobuf:"bytes,3,opt,name=familyId,proto3" json:"familyId,omitempty"`
	ProductId      string                 `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	AdminName      string                 `protobuf:"bytes,5,opt,name=adminName,proto3" json:"adminName,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *ProductAccessRequest) Reset() {
	*x = ProductAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAccessRequest) ProtoMessage() {}

func (x *ProductAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAccessRequest.ProtoReflect.Descriptor instead.
func (*ProductAccessRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{13}
}

func (x *ProductAccessRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductAccessRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *ProductAccessRequest) GetFamilyId() string {
	if x != nil {
		return x.FamilyId
	}
	return ""
}

func (x *ProductAccessRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductAccessRequest) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *ProductAccessRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type ProductAccessCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	ProductId      string `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *ProductAccessCheckRequest) Reset() {
	*x = ProductAccessCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAccessCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAccessCheckRequest) ProtoMessage() {}

func (x *ProductAccessCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAccessCheckRequest.ProtoReflect.Descriptor instead.
func (*ProductAccessCheckRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{14}
}

func (x *ProductAccessCheckRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductAccessCheckRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type DeleteAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	VendorId       string `protobuf:"bytes,2,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	ProductId      string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *DeleteAccessRequest) Reset() {
	*x = DeleteAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccessRequest) ProtoMessage() {}

func (x *DeleteAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccessRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccessRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteAccessRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *DeleteAccessRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DeleteAccessRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type ProductAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string                 `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	VendorId       string                 `protobuf:"bytes,2,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	FamilyId       string                 `protobuf:"bytes,3,opt,name=familyId,proto3" json:"familyId,omitempty"`
	ProductId      string                 `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	AdminName      string                 `protobuf:"bytes,5,opt,name=adminName,proto3" json:"adminName,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *ProductAccessResponse) Reset() {
	*x = ProductAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAccessResponse) ProtoMessage() {}

func (x *ProductAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAccessResponse.ProtoReflect.Descriptor instead.
func (*ProductAccessResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{16}
}

func (x *ProductAccessResponse) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductAccessResponse) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *ProductAccessResponse) GetFamilyId() string {
	if x != nil {
		return x.FamilyId
	}
	return ""
}

func (x *ProductAccessResponse) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductAccessResponse) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *ProductAccessResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type AddRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FriendlyName     string `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Type             string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Subnet           string `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AvailabilityZone string `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Prefix           int32  `protobuf:"varint,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	IsDefault        bool   `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	ApiDns           string `protobuf:"bytes,8,opt,name=api_dns,json=apiDns,proto3" json:"api_dns,omitempty"`
	Vnet             string `protobuf:"bytes,9,opt,name=vnet,proto3" json:"vnet,omitempty"`
}

func (x *AddRegionRequest) Reset() {
	*x = AddRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRegionRequest) ProtoMessage() {}

func (x *AddRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRegionRequest.ProtoReflect.Descriptor instead.
func (*AddRegionRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{17}
}

func (x *AddRegionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddRegionRequest) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *AddRegionRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddRegionRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *AddRegionRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *AddRegionRequest) GetPrefix() int32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *AddRegionRequest) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *AddRegionRequest) GetApiDns() string {
	if x != nil {
		return x.ApiDns
	}
	return ""
}

func (x *AddRegionRequest) GetVnet() string {
	if x != nil {
		return x.Vnet
	}
	return ""
}

type RegionUserFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string        `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	RegionFilter   *RegionFilter `protobuf:"bytes,2,opt,name=regionFilter,proto3" json:"regionFilter,omitempty"`
}

func (x *RegionUserFilter) Reset() {
	*x = RegionUserFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionUserFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionUserFilter) ProtoMessage() {}

func (x *RegionUserFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionUserFilter.ProtoReflect.Descriptor instead.
func (*RegionUserFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{18}
}

func (x *RegionUserFilter) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *RegionUserFilter) GetRegionFilter() *RegionFilter {
	if x != nil {
		return x.RegionFilter
	}
	return nil
}

type RegionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	FriendlyName     *string `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3,oneof" json:"friendly_name,omitempty"`
	Type             *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Subnet           *string `protobuf:"bytes,4,opt,name=subnet,proto3,oneof" json:"subnet,omitempty"`
	AvailabilityZone *string `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3,oneof" json:"availability_zone,omitempty"`
	Prefix           *int32  `protobuf:"varint,6,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	IsDefault        *bool   `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3,oneof" json:"is_default,omitempty"`
	ApiDns           *string `protobuf:"bytes,8,opt,name=api_dns,json=apiDns,proto3,oneof" json:"api_dns,omitempty"`
	Vnet             *string `protobuf:"bytes,9,opt,name=vnet,proto3,oneof" json:"vnet,omitempty"`
	AdminName        *string `protobuf:"bytes,10,opt,name=adminName,proto3,oneof" json:"adminName,omitempty"`
}

func (x *RegionFilter) Reset() {
	*x = RegionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionFilter) ProtoMessage() {}

func (x *RegionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionFilter.ProtoReflect.Descriptor instead.
func (*RegionFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{19}
}

func (x *RegionFilter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RegionFilter) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *RegionFilter) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *RegionFilter) GetSubnet() string {
	if x != nil && x.Subnet != nil {
		return *x.Subnet
	}
	return ""
}

func (x *RegionFilter) GetAvailabilityZone() string {
	if x != nil && x.AvailabilityZone != nil {
		return *x.AvailabilityZone
	}
	return ""
}

func (x *RegionFilter) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *RegionFilter) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *RegionFilter) GetApiDns() string {
	if x != nil && x.ApiDns != nil {
		return *x.ApiDns
	}
	return ""
}

func (x *RegionFilter) GetVnet() string {
	if x != nil && x.Vnet != nil {
		return *x.Vnet
	}
	return ""
}

func (x *RegionFilter) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FriendlyName     string                 `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Type             string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Subnet           string                 `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AvailabilityZone string                 `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Prefix           int32                  `protobuf:"varint,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	IsDefault        bool                   `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	ApiDns           string                 `protobuf:"bytes,8,opt,name=api_dns,json=apiDns,proto3" json:"api_dns,omitempty"`
	Vnet             string                 `protobuf:"bytes,9,opt,name=vnet,proto3" json:"vnet,omitempty"`
	AdminName        string                 `protobuf:"bytes,10,opt,name=adminName,proto3" json:"adminName,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{20}
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Region) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *Region) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Region) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Region) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *Region) GetPrefix() int32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *Region) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Region) GetApiDns() string {
	if x != nil {
		return x.ApiDns
	}
	return ""
}

func (x *Region) GetVnet() string {
	if x != nil {
		return x.Vnet
	}
	return ""
}

func (x *Region) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *Region) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Region) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type RegionUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FriendlyName     string `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Type             string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Subnet           string `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AvailabilityZone string `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Prefix           int32  `protobuf:"varint,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	IsDefault        bool   `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	ApiDns           string `protobuf:"bytes,8,opt,name=api_dns,json=apiDns,proto3" json:"api_dns,omitempty"`
	Vnet             string `protobuf:"bytes,9,opt,name=vnet,proto3" json:"vnet,omitempty"`
}

func (x *RegionUser) Reset() {
	*x = RegionUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionUser) ProtoMessage() {}

func (x *RegionUser) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionUser.ProtoReflect.Descriptor instead.
func (*RegionUser) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{21}
}

func (x *RegionUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegionUser) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *RegionUser) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegionUser) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *RegionUser) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *RegionUser) GetPrefix() int32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *RegionUser) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *RegionUser) GetApiDns() string {
	if x != nil {
		return x.ApiDns
	}
	return ""
}

func (x *RegionUser) GetVnet() string {
	if x != nil {
		return x.Vnet
	}
	return ""
}

type RegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []*Region `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *RegionResponse) Reset() {
	*x = RegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionResponse) ProtoMessage() {}

func (x *RegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionResponse.ProtoReflect.Descriptor instead.
func (*RegionResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{22}
}

func (x *RegionResponse) GetRegions() []*Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

type RegionUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []*RegionUser `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *RegionUserResponse) Reset() {
	*x = RegionUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionUserResponse) ProtoMessage() {}

func (x *RegionUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionUserResponse.ProtoReflect.Descriptor instead.
func (*RegionUserResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{23}
}

func (x *RegionUserResponse) GetRegions() []*RegionUser {
	if x != nil {
		return x.Regions
	}
	return nil
}

type UpdateRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FriendlyName     *string `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3,oneof" json:"friendly_name,omitempty"`
	Type             *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Subnet           *string `protobuf:"bytes,4,opt,name=subnet,proto3,oneof" json:"subnet,omitempty"`
	AvailabilityZone *string `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3,oneof" json:"availability_zone,omitempty"`
	Prefix           *int32  `protobuf:"varint,6,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	IsDefault        *bool   `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3,oneof" json:"is_default,omitempty"`
	ApiDns           *string `protobuf:"bytes,8,opt,name=api_dns,json=apiDns,proto3,oneof" json:"api_dns,omitempty"`
	Vnet             *string `protobuf:"bytes,9,opt,name=vnet,proto3,oneof" json:"vnet,omitempty"`
}

func (x *UpdateRegionRequest) Reset() {
	*x = UpdateRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegionRequest) ProtoMessage() {}

func (x *UpdateRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegionRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegionRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateRegionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRegionRequest) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *UpdateRegionRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateRegionRequest) GetSubnet() string {
	if x != nil && x.Subnet != nil {
		return *x.Subnet
	}
	return ""
}

func (x *UpdateRegionRequest) GetAvailabilityZone() string {
	if x != nil && x.AvailabilityZone != nil {
		return *x.AvailabilityZone
	}
	return ""
}

func (x *UpdateRegionRequest) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *UpdateRegionRequest) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *UpdateRegionRequest) GetApiDns() string {
	if x != nil && x.ApiDns != nil {
		return *x.ApiDns
	}
	return ""
}

func (x *UpdateRegionRequest) GetVnet() string {
	if x != nil && x.Vnet != nil {
		return *x.Vnet
	}
	return ""
}

type DeleteRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRegionRequest) Reset() {
	*x = DeleteRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegionRequest) ProtoMessage() {}

func (x *DeleteRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegionRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegionRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteRegionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRegionAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId   *string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3,oneof" json:"cloudaccountId,omitempty"`
	RegionAccessType *string `protobuf:"bytes,2,opt,name=regionAccessType,proto3,oneof" json:"regionAccessType,omitempty"`
}

func (x *GetRegionAccessRequest) Reset() {
	*x = GetRegionAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionAccessRequest) ProtoMessage() {}

func (x *GetRegionAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionAccessRequest.ProtoReflect.Descriptor instead.
func (*GetRegionAccessRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{26}
}

func (x *GetRegionAccessRequest) GetCloudaccountId() string {
	if x != nil && x.CloudaccountId != nil {
		return *x.CloudaccountId
	}
	return ""
}

func (x *GetRegionAccessRequest) GetRegionAccessType() string {
	if x != nil && x.RegionAccessType != nil {
		return *x.RegionAccessType
	}
	return ""
}

type GetRegionAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acl []*RegionAccessResponse `protobuf:"bytes,1,rep,name=acl,proto3" json:"acl,omitempty"`
}

func (x *GetRegionAccessResponse) Reset() {
	*x = GetRegionAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionAccessResponse) ProtoMessage() {}

func (x *GetRegionAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionAccessResponse.ProtoReflect.Descriptor instead.
func (*GetRegionAccessResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{27}
}

func (x *GetRegionAccessResponse) GetAcl() []*RegionAccessResponse {
	if x != nil {
		return x.Acl
	}
	return nil
}

type RegionAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string                 `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	RegionName     string                 `protobuf:"bytes,2,opt,name=regionName,proto3" json:"regionName,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *RegionAccessRequest) Reset() {
	*x = RegionAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionAccessRequest) ProtoMessage() {}

func (x *RegionAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionAccessRequest.ProtoReflect.Descriptor instead.
func (*RegionAccessRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{28}
}

func (x *RegionAccessRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *RegionAccessRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *RegionAccessRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type RegionAccessCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	RegionName     string `protobuf:"bytes,2,opt,name=regionName,proto3" json:"regionName,omitempty"`
}

func (x *RegionAccessCheckRequest) Reset() {
	*x = RegionAccessCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionAccessCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionAccessCheckRequest) ProtoMessage() {}

func (x *RegionAccessCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionAccessCheckRequest.ProtoReflect.Descriptor instead.
func (*RegionAccessCheckRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{29}
}

func (x *RegionAccessCheckRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *RegionAccessCheckRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type DeleteRegionAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	RegionName     string `protobuf:"bytes,2,opt,name=regionName,proto3" json:"regionName,omitempty"`
}

func (x *DeleteRegionAccessRequest) Reset() {
	*x = DeleteRegionAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegionAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegionAccessRequest) ProtoMessage() {}

func (x *DeleteRegionAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegionAccessRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegionAccessRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteRegionAccessRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *DeleteRegionAccessRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type RegionAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string                 `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	RegionName     string                 `protobuf:"bytes,2,opt,name=regionName,proto3" json:"regionName,omitempty"`
	AdminName      string                 `protobuf:"bytes,3,opt,name=adminName,proto3" json:"adminName,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *RegionAccessResponse) Reset() {
	*x = RegionAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionAccessResponse) ProtoMessage() {}

func (x *RegionAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionAccessResponse.ProtoReflect.Descriptor instead.
func (*RegionAccessResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{31}
}

func (x *RegionAccessResponse) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *RegionAccessResponse) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *RegionAccessResponse) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *RegionAccessResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type DefaultRegionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FriendlyName     string `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Type             string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Subnet           string `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AvailabilityZone string `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Prefix           int32  `protobuf:"varint,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	IsDefault        bool   `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	ApiDns           string `protobuf:"bytes,8,opt,name=api_dns,json=apiDns,proto3" json:"api_dns,omitempty"`
	Environment      string `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DefaultRegionSpec) Reset() {
	*x = DefaultRegionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultRegionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultRegionSpec) ProtoMessage() {}

func (x *DefaultRegionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultRegionSpec.ProtoReflect.Descriptor instead.
func (*DefaultRegionSpec) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{32}
}

func (x *DefaultRegionSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DefaultRegionSpec) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *DefaultRegionSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DefaultRegionSpec) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DefaultRegionSpec) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *DefaultRegionSpec) GetPrefix() int32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *DefaultRegionSpec) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *DefaultRegionSpec) GetApiDns() string {
	if x != nil {
		return x.ApiDns
	}
	return ""
}

func (x *DefaultRegionSpec) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DefaultProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string                   `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"` //apiVersion and kind fields only used to keep compatibility with existing yamls files
	Kind       string                   `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *DefaultProduct_Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *ProductSpec             `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *DefaultProduct) Reset() {
	*x = DefaultProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProduct) ProtoMessage() {}

func (x *DefaultProduct) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProduct.ProtoReflect.Descriptor instead.
func (*DefaultProduct) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{33}
}

func (x *DefaultProduct) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *DefaultProduct) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DefaultProduct) GetMetadata() *DefaultProduct_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DefaultProduct) GetSpec() *ProductSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ProductSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	VendorId    string                 `protobuf:"bytes,4,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	FamilyId    string                 `protobuf:"bytes,5,opt,name=familyId,proto3" json:"familyId,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    []*KeyValue            `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Eccn        string                 `protobuf:"bytes,8,opt,name=eccn,proto3" json:"eccn,omitempty"` // [(validate.rules).string.pattern = "^[0-9A-Z]{5,6}$"];
	Pcq         string                 `protobuf:"bytes,9,opt,name=pcq,proto3" json:"pcq,omitempty"`   // [(validate.rules).string.pattern = "^[0-9]+$"];
	MatchExpr   string                 `protobuf:"bytes,10,opt,name=matchExpr,proto3" json:"matchExpr,omitempty"`
	Rates       []*DefaultRate         `protobuf:"bytes,11,rep,name=rates,proto3" json:"rates,omitempty"`
	Status      string                 `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Access      string                 `protobuf:"bytes,13,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *ProductSpec) Reset() {
	*x = ProductSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSpec) ProtoMessage() {}

func (x *ProductSpec) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSpec.ProtoReflect.Descriptor instead.
func (*ProductSpec) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{34}
}

func (x *ProductSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductSpec) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProductSpec) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *ProductSpec) GetFamilyId() string {
	if x != nil {
		return x.FamilyId
	}
	return ""
}

func (x *ProductSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductSpec) GetMetadata() []*KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProductSpec) GetEccn() string {
	if x != nil {
		return x.Eccn
	}
	return ""
}

func (x *ProductSpec) GetPcq() string {
	if x != nil {
		return x.Pcq
	}
	return ""
}

func (x *ProductSpec) GetMatchExpr() string {
	if x != nil {
		return x.MatchExpr
	}
	return ""
}

func (x *ProductSpec) GetRates() []*DefaultRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

func (x *ProductSpec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProductSpec) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type DefaultRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType string `protobuf:"bytes,1,opt,name=accountType,proto3" json:"accountType,omitempty"`
	Unit        string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	Rate        string `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	UsageExpr   string `protobuf:"bytes,4,opt,name=usageExpr,proto3" json:"usageExpr,omitempty"`
}

func (x *DefaultRate) Reset() {
	*x = DefaultRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultRate) ProtoMessage() {}

func (x *DefaultRate) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultRate.ProtoReflect.Descriptor instead.
func (*DefaultRate) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{35}
}

func (x *DefaultRate) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *DefaultRate) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *DefaultRate) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *DefaultRate) GetUsageExpr() string {
	if x != nil {
		return x.UsageExpr
	}
	return ""
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{36}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DefaultProductDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DefaultProductDeleteRequest) Reset() {
	*x = DefaultProductDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultProductDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProductDeleteRequest) ProtoMessage() {}

func (x *DefaultProductDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProductDeleteRequest.ProtoReflect.Descriptor instead.
func (*DefaultProductDeleteRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{37}
}

func (x *DefaultProductDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DefaultProductSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DefaultProductSearchRequest) Reset() {
	*x = DefaultProductSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultProductSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProductSearchRequest) ProtoMessage() {}

func (x *DefaultProductSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProductSearchRequest.ProtoReflect.Descriptor instead.
func (*DefaultProductSearchRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{38}
}

func (x *DefaultProductSearchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DefaultProductGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DefaultProductGetRequest) Reset() {
	*x = DefaultProductGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultProductGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProductGetRequest) ProtoMessage() {}

func (x *DefaultProductGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProductGetRequest.ProtoReflect.Descriptor instead.
func (*DefaultProductGetRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{39}
}

func (x *DefaultProductGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DefaultVendor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string                  `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"` //apiVersion and kind fields only used to keep compatibility with existing yamls files
	Kind       string                  `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *DefaultVendor_Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *VendorSpec             `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *DefaultVendor) Reset() {
	*x = DefaultVendor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultVendor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultVendor) ProtoMessage() {}

func (x *DefaultVendor) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultVendor.ProtoReflect.Descriptor instead.
func (*DefaultVendor) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{40}
}

func (x *DefaultVendor) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *DefaultVendor) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DefaultVendor) GetMetadata() *DefaultVendor_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DefaultVendor) GetSpec() *VendorSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type VendorSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Families    []*DefaultFamily `protobuf:"bytes,4,rep,name=families,proto3" json:"families,omitempty"` // google.protobuf.Timestamp created = 5;
}

func (x *VendorSpec) Reset() {
	*x = VendorSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorSpec) ProtoMessage() {}

func (x *VendorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorSpec.ProtoReflect.Descriptor instead.
func (*VendorSpec) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{41}
}

func (x *VendorSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VendorSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorSpec) GetFamilies() []*DefaultFamily {
	if x != nil {
		return x.Families
	}
	return nil
}

type DefaultFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DefaultFamily) Reset() {
	*x = DefaultFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultFamily) ProtoMessage() {}

func (x *DefaultFamily) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultFamily.ProtoReflect.Descriptor instead.
func (*DefaultFamily) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{42}
}

func (x *DefaultFamily) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DefaultFamily) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DefaultFamily) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// TODO fix typo
type DefaultVendortDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DefaultVendortDeleteRequest) Reset() {
	*x = DefaultVendortDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultVendortDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultVendortDeleteRequest) ProtoMessage() {}

func (x *DefaultVendortDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultVendortDeleteRequest.ProtoReflect.Descriptor instead.
func (*DefaultVendortDeleteRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{43}
}

func (x *DefaultVendortDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DefaultVendorSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DefaultVendorSearchRequest) Reset() {
	*x = DefaultVendorSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultVendorSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultVendorSearchRequest) ProtoMessage() {}

func (x *DefaultVendorSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultVendorSearchRequest.ProtoReflect.Descriptor instead.
func (*DefaultVendorSearchRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{44}
}

func (x *DefaultVendorSearchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DefaultVendorGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DefaultVendorGetRequest) Reset() {
	*x = DefaultVendorGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultVendorGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultVendorGetRequest) ProtoMessage() {}

func (x *DefaultVendorGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultVendorGetRequest.ProtoReflect.Descriptor instead.
func (*DefaultVendorGetRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{45}
}

func (x *DefaultVendorGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FamilyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VendorId    *string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3,oneof" json:"vendor_id,omitempty"`
	Name        *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AdminName   *string `protobuf:"bytes,5,opt,name=adminName,proto3,oneof" json:"adminName,omitempty"`
	Enabled     *bool   `protobuf:"varint,6,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *FamilyRequest) Reset() {
	*x = FamilyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyRequest) ProtoMessage() {}

func (x *FamilyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyRequest.ProtoReflect.Descriptor instead.
func (*FamilyRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{46}
}

func (x *FamilyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FamilyRequest) GetVendorId() string {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return ""
}

func (x *FamilyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FamilyRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FamilyRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *FamilyRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type FamilyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Families []*Family `protobuf:"bytes,1,rep,name=families,proto3" json:"families,omitempty"`
}

func (x *FamilyResponse) Reset() {
	*x = FamilyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyResponse) ProtoMessage() {}

func (x *FamilyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyResponse.ProtoReflect.Descriptor instead.
func (*FamilyResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{47}
}

func (x *FamilyResponse) GetFamilies() []*Family {
	if x != nil {
		return x.Families
	}
	return nil
}

type Family struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Family) Reset() {
	*x = Family{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Family) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Family) ProtoMessage() {}

func (x *Family) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Family.ProtoReflect.Descriptor instead.
func (*Family) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{48}
}

func (x *Family) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Family) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Family) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Family) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Family) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type FamilyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FamilyFilter) Reset() {
	*x = FamilyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyFilter) ProtoMessage() {}

func (x *FamilyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyFilter.ProtoReflect.Descriptor instead.
func (*FamilyFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{49}
}

func (x *FamilyFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FamilyFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListFamiliesByVendorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
}

func (x *ListFamiliesByVendorRequest) Reset() {
	*x = ListFamiliesByVendorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFamiliesByVendorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFamiliesByVendorRequest) ProtoMessage() {}

func (x *ListFamiliesByVendorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFamiliesByVendorRequest.ProtoReflect.Descriptor instead.
func (*ListFamiliesByVendorRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{50}
}

func (x *ListFamiliesByVendorRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

type VendorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AdminName   *string `protobuf:"bytes,4,opt,name=adminName,proto3,oneof" json:"adminName,omitempty"`
	Enabled     *bool   `protobuf:"varint,5,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *VendorRequest) Reset() {
	*x = VendorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorRequest) ProtoMessage() {}

func (x *VendorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorRequest.ProtoReflect.Descriptor instead.
func (*VendorRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{51}
}

func (x *VendorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VendorRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VendorRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VendorRequest) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *VendorRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type VendorRequestFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Enabled *bool   `protobuf:"varint,3,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *VendorRequestFilter) Reset() {
	*x = VendorRequestFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorRequestFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorRequestFilter) ProtoMessage() {}

func (x *VendorRequestFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorRequestFilter.ProtoReflect.Descriptor instead.
func (*VendorRequestFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{52}
}

func (x *VendorRequestFilter) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VendorRequestFilter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VendorRequestFilter) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type VendorId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VendorId) Reset() {
	*x = VendorId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorId) ProtoMessage() {}

func (x *VendorId) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorId.ProtoReflect.Descriptor instead.
func (*VendorId) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{53}
}

func (x *VendorId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegionalRateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	RegionId  string `protobuf:"bytes,2,opt,name=regionId,proto3" json:"regionId,omitempty"`
}

func (x *RegionalRateFilter) Reset() {
	*x = RegionalRateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionalRateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionalRateFilter) ProtoMessage() {}

func (x *RegionalRateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionalRateFilter.ProtoReflect.Descriptor instead.
func (*RegionalRateFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{54}
}

func (x *RegionalRateFilter) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *RegionalRateFilter) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type ProductAccessRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string                 `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	ProductId      string                 `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	RegionId       string                 `protobuf:"bytes,3,opt,name=regionId,proto3" json:"regionId,omitempty"`
	AdminName      string                 `protobuf:"bytes,4,opt,name=adminName,proto3" json:"adminName,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *ProductAccessRequestV2) Reset() {
	*x = ProductAccessRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAccessRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAccessRequestV2) ProtoMessage() {}

func (x *ProductAccessRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAccessRequestV2.ProtoReflect.Descriptor instead.
func (*ProductAccessRequestV2) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{55}
}

func (x *ProductAccessRequestV2) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductAccessRequestV2) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductAccessRequestV2) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ProductAccessRequestV2) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *ProductAccessRequestV2) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type DeleteAccessRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	RegionId       string `protobuf:"bytes,2,opt,name=regionId,proto3" json:"regionId,omitempty"`
	ProductId      string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *DeleteAccessRequestV2) Reset() {
	*x = DeleteAccessRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccessRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccessRequestV2) ProtoMessage() {}

func (x *DeleteAccessRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccessRequestV2.ProtoReflect.Descriptor instead.
func (*DeleteAccessRequestV2) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteAccessRequestV2) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *DeleteAccessRequestV2) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *DeleteAccessRequestV2) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type GetAccessResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acl []*ProductAccessResponseV2 `protobuf:"bytes,1,rep,name=acl,proto3" json:"acl,omitempty"`
}

func (x *GetAccessResponseV2) Reset() {
	*x = GetAccessResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessResponseV2) ProtoMessage() {}

func (x *GetAccessResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessResponseV2.ProtoReflect.Descriptor instead.
func (*GetAccessResponseV2) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{57}
}

func (x *GetAccessResponseV2) GetAcl() []*ProductAccessResponseV2 {
	if x != nil {
		return x.Acl
	}
	return nil
}

type ProductAccessResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string                 `protobuf:"bytes,1,opt,name=cloudaccountId,proto3" json:"cloudaccountId,omitempty"`
	RegionId       string                 `protobuf:"bytes,2,opt,name=regionId,proto3" json:"regionId,omitempty"`
	ProductId      string                 `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	AdminName      string                 `protobuf:"bytes,4,opt,name=adminName,proto3" json:"adminName,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *ProductAccessResponseV2) Reset() {
	*x = ProductAccessResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAccessResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAccessResponseV2) ProtoMessage() {}

func (x *ProductAccessResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAccessResponseV2.ProtoReflect.Descriptor instead.
func (*ProductAccessResponseV2) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{58}
}

func (x *ProductAccessResponseV2) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductAccessResponseV2) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ProductAccessResponseV2) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductAccessResponseV2) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *ProductAccessResponseV2) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type RateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   *string `protobuf:"bytes,1,opt,name=productId,proto3,oneof" json:"productId,omitempty"`
	RegionId    *string `protobuf:"bytes,2,opt,name=regionId,proto3,oneof" json:"regionId,omitempty"`
	AccountType *string `protobuf:"bytes,3,opt,name=accountType,proto3,oneof" json:"accountType,omitempty"`
	Rate        *string `protobuf:"bytes,4,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	Unit        *string `protobuf:"bytes,5,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	UsageExpr   *string `protobuf:"bytes,6,opt,name=usageExpr,proto3,oneof" json:"usageExpr,omitempty"`
}

func (x *RateData) Reset() {
	*x = RateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateData) ProtoMessage() {}

func (x *RateData) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateData.ProtoReflect.Descriptor instead.
func (*RateData) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{59}
}

func (x *RateData) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *RateData) GetRegionId() string {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return ""
}

func (x *RateData) GetAccountType() string {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ""
}

func (x *RateData) GetRate() string {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return ""
}

func (x *RateData) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *RateData) GetUsageExpr() string {
	if x != nil && x.UsageExpr != nil {
		return *x.UsageExpr
	}
	return ""
}

type ProductData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description         *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	FamilyId            *string `protobuf:"bytes,4,opt,name=familyId,proto3,oneof" json:"familyId,omitempty"`
	VendorId            *string `protobuf:"bytes,5,opt,name=vendorId,proto3,oneof" json:"vendorId,omitempty"`
	Pcq                 *string `protobuf:"bytes,6,opt,name=pcq,proto3,oneof" json:"pcq,omitempty"`
	Eccn                *string `protobuf:"bytes,7,opt,name=eccn,proto3,oneof" json:"eccn,omitempty"`
	MatchExpr           *string `protobuf:"bytes,8,opt,name=matchExpr,proto3,oneof" json:"matchExpr,omitempty"`
	ServiceName         *string `protobuf:"bytes,9,opt,name=serviceName,proto3,oneof" json:"serviceName,omitempty"`
	ServiceType         *string `protobuf:"bytes,10,opt,name=serviceType,proto3,oneof" json:"serviceType,omitempty"`
	InstanceType        *string `protobuf:"bytes,11,opt,name=instanceType,proto3,oneof" json:"instanceType,omitempty"`
	InstanceMode        *string `protobuf:"bytes,12,opt,name=instanceMode,proto3,oneof" json:"instanceMode,omitempty"`
	InstanceCategory    *string `protobuf:"bytes,13,opt,name=instanceCategory,proto3,oneof" json:"instanceCategory,omitempty"`
	DisplayName         *string `protobuf:"bytes,14,opt,name=displayName,proto3,oneof" json:"displayName,omitempty"`
	DisplayCategory     *string `protobuf:"bytes,15,opt,name=displayCategory,proto3,oneof" json:"displayCategory,omitempty"`
	DisplayDesc         *string `protobuf:"bytes,16,opt,name=displayDesc,proto3,oneof" json:"displayDesc,omitempty"`
	DisplayInfo         *string `protobuf:"bytes,17,opt,name=displayInfo,proto3,oneof" json:"displayInfo,omitempty"`
	DisplayHighlight    *string `protobuf:"bytes,18,opt,name=displayHighlight,proto3,oneof" json:"displayHighlight,omitempty"`
	AccountTypesBlocked *string `protobuf:"bytes,19,opt,name=accountTypesBlocked,proto3,oneof" json:"accountTypesBlocked,omitempty"`
	AccountWhitelist    *bool   `protobuf:"varint,20,opt,name=accountWhitelist,proto3,oneof" json:"accountWhitelist,omitempty"`
	BillingEnable       *bool   `protobuf:"varint,21,opt,name=billingEnable,proto3,oneof" json:"billingEnable,omitempty"`
	ReleaseStatus       *string `protobuf:"bytes,22,opt,name=releaseStatus,proto3,oneof" json:"releaseStatus,omitempty"`
	Usecase             *string `protobuf:"bytes,23,opt,name=usecase,proto3,oneof" json:"usecase,omitempty"`
	Metadata            *string `protobuf:"bytes,24,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Status              *string `protobuf:"bytes,25,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Enabled             *bool   `protobuf:"varint,26,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *ProductData) Reset() {
	*x = ProductData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductData) ProtoMessage() {}

func (x *ProductData) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductData.ProtoReflect.Descriptor instead.
func (*ProductData) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{60}
}

func (x *ProductData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProductData) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProductData) GetFamilyId() string {
	if x != nil && x.FamilyId != nil {
		return *x.FamilyId
	}
	return ""
}

func (x *ProductData) GetVendorId() string {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return ""
}

func (x *ProductData) GetPcq() string {
	if x != nil && x.Pcq != nil {
		return *x.Pcq
	}
	return ""
}

func (x *ProductData) GetEccn() string {
	if x != nil && x.Eccn != nil {
		return *x.Eccn
	}
	return ""
}

func (x *ProductData) GetMatchExpr() string {
	if x != nil && x.MatchExpr != nil {
		return *x.MatchExpr
	}
	return ""
}

func (x *ProductData) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *ProductData) GetServiceType() string {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return ""
}

func (x *ProductData) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *ProductData) GetInstanceMode() string {
	if x != nil && x.InstanceMode != nil {
		return *x.InstanceMode
	}
	return ""
}

func (x *ProductData) GetInstanceCategory() string {
	if x != nil && x.InstanceCategory != nil {
		return *x.InstanceCategory
	}
	return ""
}

func (x *ProductData) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ProductData) GetDisplayCategory() string {
	if x != nil && x.DisplayCategory != nil {
		return *x.DisplayCategory
	}
	return ""
}

func (x *ProductData) GetDisplayDesc() string {
	if x != nil && x.DisplayDesc != nil {
		return *x.DisplayDesc
	}
	return ""
}

func (x *ProductData) GetDisplayInfo() string {
	if x != nil && x.DisplayInfo != nil {
		return *x.DisplayInfo
	}
	return ""
}

func (x *ProductData) GetDisplayHighlight() string {
	if x != nil && x.DisplayHighlight != nil {
		return *x.DisplayHighlight
	}
	return ""
}

func (x *ProductData) GetAccountTypesBlocked() string {
	if x != nil && x.AccountTypesBlocked != nil {
		return *x.AccountTypesBlocked
	}
	return ""
}

func (x *ProductData) GetAccountWhitelist() bool {
	if x != nil && x.AccountWhitelist != nil {
		return *x.AccountWhitelist
	}
	return false
}

func (x *ProductData) GetBillingEnable() bool {
	if x != nil && x.BillingEnable != nil {
		return *x.BillingEnable
	}
	return false
}

func (x *ProductData) GetReleaseStatus() string {
	if x != nil && x.ReleaseStatus != nil {
		return *x.ReleaseStatus
	}
	return ""
}

func (x *ProductData) GetUsecase() string {
	if x != nil && x.Usecase != nil {
		return *x.Usecase
	}
	return ""
}

func (x *ProductData) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *ProductData) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ProductData) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type ProposedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *ProductData `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Rates   []*RateData  `protobuf:"bytes,2,rep,name=rates,proto3" json:"rates,omitempty"`
}

func (x *ProposedData) Reset() {
	*x = ProposedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposedData) ProtoMessage() {}

func (x *ProposedData) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposedData.ProtoReflect.Descriptor instead.
func (*ProposedData) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{61}
}

func (x *ProposedData) GetProduct() *ProductData {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProposedData) GetRates() []*RateData {
	if x != nil {
		return x.Rates
	}
	return nil
}

type ProductChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestType   string                 `protobuf:"bytes,2,opt,name=requestType,proto3" json:"requestType,omitempty"`
	RequestStatus string                 `protobuf:"bytes,3,opt,name=requestStatus,proto3" json:"requestStatus,omitempty"`
	ProposedData  string                 `protobuf:"bytes,4,opt,name=proposedData,proto3" json:"proposedData,omitempty"`
	Requester     string                 `protobuf:"bytes,5,opt,name=requester,proto3" json:"requester,omitempty"`
	Reviewer      string                 `protobuf:"bytes,6,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ProductChangeRequest) Reset() {
	*x = ProductChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductChangeRequest) ProtoMessage() {}

func (x *ProductChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductChangeRequest.ProtoReflect.Descriptor instead.
func (*ProductChangeRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{62}
}

func (x *ProductChangeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductChangeRequest) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *ProductChangeRequest) GetRequestStatus() string {
	if x != nil {
		return x.RequestStatus
	}
	return ""
}

func (x *ProductChangeRequest) GetProposedData() string {
	if x != nil {
		return x.ProposedData
	}
	return ""
}

func (x *ProductChangeRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *ProductChangeRequest) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *ProductChangeRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProductChangeRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ProductChangeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestType   ChangeRequestType      `protobuf:"varint,2,opt,name=requestType,proto3,enum=proto.ChangeRequestType" json:"requestType,omitempty"`
	RequestStatus ChangeRequestStatus    `protobuf:"varint,3,opt,name=requestStatus,proto3,enum=proto.ChangeRequestStatus" json:"requestStatus,omitempty"`
	ProposedData  *ProposedData          `protobuf:"bytes,4,opt,name=proposedData,proto3" json:"proposedData,omitempty"`
	Requester     string                 `protobuf:"bytes,5,opt,name=requester,proto3" json:"requester,omitempty"`
	Reviewer      string                 `protobuf:"bytes,6,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ProductChangeRequestResponse) Reset() {
	*x = ProductChangeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductChangeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductChangeRequestResponse) ProtoMessage() {}

func (x *ProductChangeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductChangeRequestResponse.ProtoReflect.Descriptor instead.
func (*ProductChangeRequestResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{63}
}

func (x *ProductChangeRequestResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductChangeRequestResponse) GetRequestType() ChangeRequestType {
	if x != nil {
		return x.RequestType
	}
	return ChangeRequestType_create
}

func (x *ProductChangeRequestResponse) GetRequestStatus() ChangeRequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return ChangeRequestStatus_pending
}

func (x *ProductChangeRequestResponse) GetProposedData() *ProposedData {
	if x != nil {
		return x.ProposedData
	}
	return nil
}

func (x *ProductChangeRequestResponse) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *ProductChangeRequestResponse) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *ProductChangeRequestResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProductChangeRequestResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ProductChangeRequestResponseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductChangeRequests []*ProductChangeRequestResponse `protobuf:"bytes,1,rep,name=productChangeRequests,proto3" json:"productChangeRequests,omitempty"`
}

func (x *ProductChangeRequestResponseList) Reset() {
	*x = ProductChangeRequestResponseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductChangeRequestResponseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductChangeRequestResponseList) ProtoMessage() {}

func (x *ProductChangeRequestResponseList) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductChangeRequestResponseList.ProtoReflect.Descriptor instead.
func (*ProductChangeRequestResponseList) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{64}
}

func (x *ProductChangeRequestResponseList) GetProductChangeRequests() []*ProductChangeRequestResponse {
	if x != nil {
		return x.ProductChangeRequests
	}
	return nil
}

type ProductChangeRequestFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32               `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	RequestStatus *ChangeRequestStatus `protobuf:"varint,2,opt,name=requestStatus,proto3,enum=proto.ChangeRequestStatus,oneof" json:"requestStatus,omitempty"`
}

func (x *ProductChangeRequestFilter) Reset() {
	*x = ProductChangeRequestFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductChangeRequestFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductChangeRequestFilter) ProtoMessage() {}

func (x *ProductChangeRequestFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductChangeRequestFilter.ProtoReflect.Descriptor instead.
func (*ProductChangeRequestFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{65}
}

func (x *ProductChangeRequestFilter) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProductChangeRequestFilter) GetRequestStatus() ChangeRequestStatus {
	if x != nil && x.RequestStatus != nil {
		return *x.RequestStatus
	}
	return ChangeRequestStatus_pending
}

type ReviewProductChangeRequestFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Approve *bool `protobuf:"varint,2,opt,name=approve,proto3,oneof" json:"approve,omitempty"` // optional to be able to check if its nil
}

func (x *ReviewProductChangeRequestFilter) Reset() {
	*x = ReviewProductChangeRequestFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewProductChangeRequestFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewProductChangeRequestFilter) ProtoMessage() {}

func (x *ReviewProductChangeRequestFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewProductChangeRequestFilter.ProtoReflect.Descriptor instead.
func (*ReviewProductChangeRequestFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{66}
}

func (x *ReviewProductChangeRequestFilter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReviewProductChangeRequestFilter) GetApprove() bool {
	if x != nil && x.Approve != nil {
		return *x.Approve
	}
	return false
}

type EnableProductFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	Enable    *bool  `protobuf:"varint,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"` // optional to be able to check if its nil
}

func (x *EnableProductFilter) Reset() {
	*x = EnableProductFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableProductFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableProductFilter) ProtoMessage() {}

func (x *EnableProductFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableProductFilter.ProtoReflect.Descriptor instead.
func (*EnableProductFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{67}
}

func (x *EnableProductFilter) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *EnableProductFilter) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type ProductInterestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudaccountId string `protobuf:"bytes,2,opt,name=cloudaccount_id,json=cloudaccountId,proto3" json:"cloudaccount_id,omitempty"`
	UserEmail      string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	ProductId      string `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	RegionId       string `protobuf:"bytes,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Description    string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ProductInterestRequest) Reset() {
	*x = ProductInterestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInterestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInterestRequest) ProtoMessage() {}

func (x *ProductInterestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInterestRequest.ProtoReflect.Descriptor instead.
func (*ProductInterestRequest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{68}
}

func (x *ProductInterestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductInterestRequest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductInterestRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ProductInterestRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductInterestRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ProductInterestRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ProductInterestFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudaccountId string `protobuf:"bytes,1,opt,name=cloudaccount_id,json=cloudaccountId,proto3" json:"cloudaccount_id,omitempty"`
	UserEmail      string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	ProductId      string `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	RegionId       string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *ProductInterestFilter) Reset() {
	*x = ProductInterestFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInterestFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInterestFilter) ProtoMessage() {}

func (x *ProductInterestFilter) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInterestFilter.ProtoReflect.Descriptor instead.
func (*ProductInterestFilter) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{69}
}

func (x *ProductInterestFilter) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductInterestFilter) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ProductInterestFilter) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductInterestFilter) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type ProductInterestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductInterests []*ProductInterest `protobuf:"bytes,1,rep,name=product_interests,json=productInterests,proto3" json:"product_interests,omitempty"`
}

func (x *ProductInterestResponse) Reset() {
	*x = ProductInterestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInterestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInterestResponse) ProtoMessage() {}

func (x *ProductInterestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInterestResponse.ProtoReflect.Descriptor instead.
func (*ProductInterestResponse) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{70}
}

func (x *ProductInterestResponse) GetProductInterests() []*ProductInterest {
	if x != nil {
		return x.ProductInterests
	}
	return nil
}

type ProductInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudaccountId string                 `protobuf:"bytes,2,opt,name=cloudaccount_id,json=cloudaccountId,proto3" json:"cloudaccount_id,omitempty"`
	UserEmail      string                 `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	ProductId      string                 `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	RegionId       string                 `protobuf:"bytes,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Description    string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ProductInterest) Reset() {
	*x = ProductInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInterest) ProtoMessage() {}

func (x *ProductInterest) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInterest.ProtoReflect.Descriptor instead.
func (*ProductInterest) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{71}
}

func (x *ProductInterest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductInterest) GetCloudaccountId() string {
	if x != nil {
		return x.CloudaccountId
	}
	return ""
}

func (x *ProductInterest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ProductInterest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductInterest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ProductInterest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductInterest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type DefaultProduct_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DefaultProduct_Metadata) Reset() {
	*x = DefaultProduct_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultProduct_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultProduct_Metadata) ProtoMessage() {}

func (x *DefaultProduct_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultProduct_Metadata.ProtoReflect.Descriptor instead.
func (*DefaultProduct_Metadata) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{33, 0}
}

func (x *DefaultProduct_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DefaultVendor_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DefaultVendor_Metadata) Reset() {
	*x = DefaultVendor_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productcatalog_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultVendor_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultVendor_Metadata) ProtoMessage() {}

func (x *DefaultVendor_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_productcatalog_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultVendor_Metadata.ProtoReflect.Descriptor instead.
func (*DefaultVendor_Metadata) Descriptor() ([]byte, []int) {
	return file_productcatalog_proto_rawDescGZIP(), []int{40, 0}
}

func (x *DefaultVendor_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_productcatalog_proto protoreflect.FileDescriptor

var file_productcatalog_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x0c, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x8b,
	0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8b, 0x04,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x04, 0x65, 0x63, 0x63, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x04, 0x65, 0x63, 0x63, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x63, 0x71, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x70, 0x63, 0x71, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x63, 0x63, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70,
	0x63, 0x71, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x03, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x63, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x63, 0x63, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x71,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x63, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x04, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x22,
	0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x39,
	0x0a, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x52, 0x07, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x03, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0xe8, 0x01,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xbb, 0x03, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x78, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x5f, 0xfa, 0x42, 0x5c, 0x72, 0x5a, 0x32, 0x58, 0x5e, 0x28, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3f, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x29, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x29, 0x2b, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5d, 0x7b, 0x32, 0x2c, 0x7d, 0x28, 0x3a, 0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x28, 0x5c, 0x2f,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x2e, 0x5f, 0x7e, 0x25, 0x21,
	0x24, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x3b, 0x3d, 0x3a, 0x40, 0x2f, 0x5d, 0x2b, 0x29,
	0x2b, 0x24, 0x52, 0x06, 0x61, 0x70, 0x69, 0x44, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6e,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6e, 0x65, 0x74, 0x22, 0x7b,
	0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xaa, 0xdd, 0x1b, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf4, 0x03, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xfa,
	0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x32, 0x13, 0x5e, 0x28, 0x6f, 0x70, 0x65, 0x6e, 0x7c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x29, 0x24, 0x48, 0x02, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x61, 0x70, 0x69, 0x44, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x6e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x76, 0x6e, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x6e, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x44, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x6e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x6e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x44, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6e, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6e, 0x65, 0x74, 0x22, 0x39, 0x0a, 0x0e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd1, 0x04, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xff, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x48,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x48, 0x02, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x48, 0x03, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x48, 0x04, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7d, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0xfa, 0x42,
	0x5c, 0x72, 0x5a, 0x32, 0x58, 0x5e, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3f, 0x3a, 0x5c, 0x2f,
	0x5c, 0x2f, 0x29, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x2b, 0x5c, 0x2e, 0x29, 0x2b, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x32, 0x2c,
	0x7d, 0x28, 0x3a, 0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x28, 0x5c, 0x2f, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x2e, 0x5f, 0x7e, 0x25, 0x21, 0x24, 0x26, 0x27, 0x28, 0x29,
	0x2a, 0x2b, 0x2c, 0x3b, 0x3d, 0x3a, 0x40, 0x2f, 0x5d, 0x2b, 0x29, 0x2b, 0x24, 0x48, 0x06, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x44, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x6e,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x76, 0x6e, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x64, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x22, 0x4f,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x01, 0x32, 0x1b, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5b, 0x2d, 0x2e, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x9e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x48, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x61,
	0x63, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x62, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x97,
	0x02, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x44, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x44, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x01, 0x32, 0x1b, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5b, 0x2d, 0x2e, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb5, 0x04,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x66, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0xfa,
	0x42, 0x53, 0x72, 0x51, 0x10, 0x01, 0x32, 0x4d, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x5c, 0x77, 0x5c, 0x73, 0x5c, 0x70, 0x50, 0x5c, 0x70, 0x53, 0x5d, 0x2b, 0x24,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x63, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x63, 0x63, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x71, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x63, 0x71, 0x12, 0x25, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x04, 0x52, 0x05,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x42, 0x2b, 0x72,
	0x29, 0x10, 0x01, 0x32, 0x25, 0x5e, 0x28, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x7c,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x7c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x7c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x29, 0x24, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xfa, 0x42, 0x5a, 0x72, 0x58, 0x10, 0x01, 0x32, 0x54,
	0x5e, 0x28, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x7c, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x42, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x7c, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x7c, 0x64, 0x6f, 0x6c, 0x6c, 0x61,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x29, 0x24, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10,
	0x01, 0x32, 0x13, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x2b, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x10, 0x01, 0x32, 0x1b, 0x5e, 0x28, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0xe2, 0x80, 0x93, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5c, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x29, 0x24, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x22, 0x3b, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a,
	0x1b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a,
	0x1e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x08, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a,
	0x1b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52,
	0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x06, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x32, 0x0a, 0x0c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0xd4, 0x01, 0x0a, 0x0d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x7e, 0x0a, 0x13, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x79, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x30, 0x0a, 0x03, 0x61, 0x63, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0xd3, 0x01, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x95, 0x02, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x22, 0xd5, 0x0a, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70,
	0x63, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x70, 0x63, 0x71, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x63, 0x63, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x04, 0x65, 0x63, 0x63, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x18, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x63, 0x71, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x63,
	0x63, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x63, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x25, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x7d, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x91,
	0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5d, 0x0a, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x22, 0x5b, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xce,
	0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9b, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x22, 0x82, 0x02,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x2a, 0xbd, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x41, 0x52, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x41, 0x52,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x54, 0x42, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x41, 0x52, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x41, 0x52, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53,
	0x10, 0x04, 0x2a, 0x84, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x02,
	0x32, 0x67, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0x32, 0xbc, 0x03, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x69, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xae, 0x03, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x59, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x12, 0x61, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12,
	0x63, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61,
	0x63, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xd1, 0x03, 0x0a, 0x0d, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12,
	0x55, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0xaa, 0xdd,
	0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x5b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0xb8, 0x03,
	0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x12, 0x5f, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63,
	0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xc5, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4b, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x03,
	0x50, 0x75, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x79, 0x6e, 0x63, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01,
	0x32, 0xbe, 0x02, 0x0a, 0x11, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x30,
	0x01, 0x12, 0x33, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x79, 0x6e, 0x63, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10,
	0x01, 0x32, 0xe2, 0x02, 0x0a, 0x0d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x69, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x56,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x2f, 0x69,
	0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0xe5, 0x02, 0x0a, 0x0d, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x10, 0x01, 0x12, 0x52, 0x0a, 0x03,
	0x41, 0x64, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x63, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0x59, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73,
	0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x51, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0xc7,
	0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x32, 0x12, 0x5b, 0x0a, 0x09, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0xaa, 0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x6c, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0xaa,
	0xdd, 0x1b, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xc1, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x12, 0x66, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x64, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x99, 0x05, 0x0a,
	0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x1d,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x63, 0x72, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a,
	0x1c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x32, 0xe5, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x03,
	0x41, 0x64, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x42, 0x55, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x64, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x62, 0xaa, 0xdd, 0x1b, 0x02, 0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_productcatalog_proto_rawDescOnce sync.Once
	file_productcatalog_proto_rawDescData = file_productcatalog_proto_rawDesc
)

func file_productcatalog_proto_rawDescGZIP() []byte {
	file_productcatalog_proto_rawDescOnce.Do(func() {
		file_productcatalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_productcatalog_proto_rawDescData)
	})
	return file_productcatalog_proto_rawDescData
}

var file_productcatalog_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_productcatalog_proto_msgTypes = make([]protoimpl.MessageInfo, 76)
var file_productcatalog_proto_goTypes = []interface{}{
	(RateUnit)(0),                            // 0: proto.RateUnit
	(ProductStatus)(0),                       // 1: proto.ProductStatus
	(ChangeRequestType)(0),                   // 2: proto.ChangeRequestType
	(ChangeRequestStatus)(0),                 // 3: proto.ChangeRequestStatus
	(*VendorFilter)(nil),                     // 4: proto.VendorFilter
	(*Vendor)(nil),                           // 5: proto.Vendor
	(*ProductFamily)(nil),                    // 6: proto.ProductFamily
	(*ProductUserFilter)(nil),                // 7: proto.ProductUserFilter
	(*ProductFilter)(nil),                    // 8: proto.ProductFilter
	(*Product)(nil),                          // 9: proto.Product
	(*Rate)(nil),                             // 10: proto.Rate
	(*ProductResponse)(nil),                  // 11: proto.ProductResponse
	(*VendorResponse)(nil),                   // 12: proto.VendorResponse
	(*SetProductStatus)(nil),                 // 13: proto.SetProductStatus
	(*SetProductStatusRequest)(nil),          // 14: proto.SetProductStatusRequest
	(*GetAccessRequest)(nil),                 // 15: proto.GetAccessRequest
	(*GetAccessResponse)(nil),                // 16: proto.GetAccessResponse
	(*ProductAccessRequest)(nil),             // 17: proto.ProductAccessRequest
	(*ProductAccessCheckRequest)(nil),        // 18: proto.ProductAccessCheckRequest
	(*DeleteAccessRequest)(nil),              // 19: proto.DeleteAccessRequest
	(*ProductAccessResponse)(nil),            // 20: proto.ProductAccessResponse
	(*AddRegionRequest)(nil),                 // 21: proto.AddRegionRequest
	(*RegionUserFilter)(nil),                 // 22: proto.RegionUserFilter
	(*RegionFilter)(nil),                     // 23: proto.RegionFilter
	(*Region)(nil),                           // 24: proto.Region
	(*RegionUser)(nil),                       // 25: proto.RegionUser
	(*RegionResponse)(nil),                   // 26: proto.RegionResponse
	(*RegionUserResponse)(nil),               // 27: proto.RegionUserResponse
	(*UpdateRegionRequest)(nil),              // 28: proto.UpdateRegionRequest
	(*DeleteRegionRequest)(nil),              // 29: proto.DeleteRegionRequest
	(*GetRegionAccessRequest)(nil),           // 30: proto.GetRegionAccessRequest
	(*GetRegionAccessResponse)(nil),          // 31: proto.GetRegionAccessResponse
	(*RegionAccessRequest)(nil),              // 32: proto.RegionAccessRequest
	(*RegionAccessCheckRequest)(nil),         // 33: proto.RegionAccessCheckRequest
	(*DeleteRegionAccessRequest)(nil),        // 34: proto.DeleteRegionAccessRequest
	(*RegionAccessResponse)(nil),             // 35: proto.RegionAccessResponse
	(*DefaultRegionSpec)(nil),                // 36: proto.DefaultRegionSpec
	(*DefaultProduct)(nil),                   // 37: proto.DefaultProduct
	(*ProductSpec)(nil),                      // 38: proto.ProductSpec
	(*DefaultRate)(nil),                      // 39: proto.DefaultRate
	(*KeyValue)(nil),                         // 40: proto.KeyValue
	(*DefaultProductDeleteRequest)(nil),      // 41: proto.DefaultProductDeleteRequest
	(*DefaultProductSearchRequest)(nil),      // 42: proto.DefaultProductSearchRequest
	(*DefaultProductGetRequest)(nil),         // 43: proto.DefaultProductGetRequest
	(*DefaultVendor)(nil),                    // 44: proto.DefaultVendor
	(*VendorSpec)(nil),                       // 45: proto.VendorSpec
	(*DefaultFamily)(nil),                    // 46: proto.DefaultFamily
	(*DefaultVendortDeleteRequest)(nil),      // 47: proto.DefaultVendortDeleteRequest
	(*DefaultVendorSearchRequest)(nil),       // 48: proto.DefaultVendorSearchRequest
	(*DefaultVendorGetRequest)(nil),          // 49: proto.DefaultVendorGetRequest
	(*FamilyRequest)(nil),                    // 50: proto.FamilyRequest
	(*FamilyResponse)(nil),                   // 51: proto.FamilyResponse
	(*Family)(nil),                           // 52: proto.Family
	(*FamilyFilter)(nil),                     // 53: proto.FamilyFilter
	(*ListFamiliesByVendorRequest)(nil),      // 54: proto.ListFamiliesByVendorRequest
	(*VendorRequest)(nil),                    // 55: proto.VendorRequest
	(*VendorRequestFilter)(nil),              // 56: proto.VendorRequestFilter
	(*VendorId)(nil),                         // 57: proto.VendorId
	(*RegionalRateFilter)(nil),               // 58: proto.RegionalRateFilter
	(*ProductAccessRequestV2)(nil),           // 59: proto.ProductAccessRequestV2
	(*DeleteAccessRequestV2)(nil),            // 60: proto.DeleteAccessRequestV2
	(*GetAccessResponseV2)(nil),              // 61: proto.GetAccessResponseV2
	(*ProductAccessResponseV2)(nil),          // 62: proto.ProductAccessResponseV2
	(*RateData)(nil),                         // 63: proto.RateData
	(*ProductData)(nil),                      // 64: proto.ProductData
	(*ProposedData)(nil),                     // 65: proto.ProposedData
	(*ProductChangeRequest)(nil),             // 66: proto.ProductChangeRequest
	(*ProductChangeRequestResponse)(nil),     // 67: proto.ProductChangeRequestResponse
	(*ProductChangeRequestResponseList)(nil), // 68: proto.ProductChangeRequestResponseList
	(*ProductChangeRequestFilter)(nil),       // 69: proto.ProductChangeRequestFilter
	(*ReviewProductChangeRequestFilter)(nil), // 70: proto.ReviewProductChangeRequestFilter
	(*EnableProductFilter)(nil),              // 71: proto.EnableProductFilter
	(*ProductInterestRequest)(nil),           // 72: proto.ProductInterestRequest
	(*ProductInterestFilter)(nil),            // 73: proto.ProductInterestFilter
	(*ProductInterestResponse)(nil),          // 74: proto.ProductInterestResponse
	(*ProductInterest)(nil),                  // 75: proto.ProductInterest
	nil,                                      // 76: proto.ProductFilter.MetadataEntry
	nil,                                      // 77: proto.Product.MetadataEntry
	(*DefaultProduct_Metadata)(nil),          // 78: proto.DefaultProduct.Metadata
	(*DefaultVendor_Metadata)(nil),           // 79: proto.DefaultVendor.Metadata
	(*timestamppb.Timestamp)(nil),            // 80: google.protobuf.Timestamp
	(AccountType)(0),                         // 81: proto.AccountType
	(*emptypb.Empty)(nil),                    // 82: google.protobuf.Empty
	(*wrapperspb.BoolValue)(nil),             // 83: google.protobuf.BoolValue
}
var file_productcatalog_proto_depIdxs = []int32{
	80,  // 0: proto.Vendor.created:type_name -> google.protobuf.Timestamp
	6,   // 1: proto.Vendor.families:type_name -> proto.ProductFamily
	80,  // 2: proto.ProductFamily.created:type_name -> google.protobuf.Timestamp
	8,   // 3: proto.ProductUserFilter.productFilter:type_name -> proto.ProductFilter
	76,  // 4: proto.ProductFilter.metadata:type_name -> proto.ProductFilter.MetadataEntry
	81,  // 5: proto.ProductFilter.accountType:type_name -> proto.AccountType
	80,  // 6: proto.Product.created:type_name -> google.protobuf.Timestamp
	77,  // 7: proto.Product.metadata:type_name -> proto.Product.MetadataEntry
	10,  // 8: proto.Product.rates:type_name -> proto.Rate
	81,  // 9: proto.Rate.accountType:type_name -> proto.AccountType
	0,   // 10: proto.Rate.unit:type_name -> proto.RateUnit
	9,   // 11: proto.ProductResponse.products:type_name -> proto.Product
	5,   // 12: proto.VendorResponse.vendors:type_name -> proto.Vendor
	1,   // 13: proto.SetProductStatus.status:type_name -> proto.ProductStatus
	13,  // 14: proto.SetProductStatusRequest.status:type_name -> proto.SetProductStatus
	20,  // 15: proto.GetAccessResponse.acl:type_name -> proto.ProductAccessResponse
	80,  // 16: proto.ProductAccessRequest.created:type_name -> google.protobuf.Timestamp
	80,  // 17: proto.ProductAccessResponse.created:type_name -> google.protobuf.Timestamp
	23,  // 18: proto.RegionUserFilter.regionFilter:type_name -> proto.RegionFilter
	80,  // 19: proto.Region.created_at:type_name -> google.protobuf.Timestamp
	80,  // 20: proto.Region.updated_at:type_name -> google.protobuf.Timestamp
	24,  // 21: proto.RegionResponse.regions:type_name -> proto.Region
	25,  // 22: proto.RegionUserResponse.regions:type_name -> proto.RegionUser
	35,  // 23: proto.GetRegionAccessResponse.acl:type_name -> proto.RegionAccessResponse
	80,  // 24: proto.RegionAccessRequest.created:type_name -> google.protobuf.Timestamp
	80,  // 25: proto.RegionAccessResponse.created:type_name -> google.protobuf.Timestamp
	78,  // 26: proto.DefaultProduct.metadata:type_name -> proto.DefaultProduct.Metadata
	38,  // 27: proto.DefaultProduct.spec:type_name -> proto.ProductSpec
	80,  // 28: proto.ProductSpec.created:type_name -> google.protobuf.Timestamp
	40,  // 29: proto.ProductSpec.metadata:type_name -> proto.KeyValue
	39,  // 30: proto.ProductSpec.rates:type_name -> proto.DefaultRate
	79,  // 31: proto.DefaultVendor.metadata:type_name -> proto.DefaultVendor.Metadata
	45,  // 32: proto.DefaultVendor.spec:type_name -> proto.VendorSpec
	46,  // 33: proto.VendorSpec.families:type_name -> proto.DefaultFamily
	52,  // 34: proto.FamilyResponse.families:type_name -> proto.Family
	80,  // 35: proto.Family.created_at:type_name -> google.protobuf.Timestamp
	80,  // 36: proto.ProductAccessRequestV2.createdAt:type_name -> google.protobuf.Timestamp
	62,  // 37: proto.GetAccessResponseV2.acl:type_name -> proto.ProductAccessResponseV2
	80,  // 38: proto.ProductAccessResponseV2.createdAt:type_name -> google.protobuf.Timestamp
	64,  // 39: proto.ProposedData.product:type_name -> proto.ProductData
	63,  // 40: proto.ProposedData.rates:type_name -> proto.RateData
	80,  // 41: proto.ProductChangeRequest.createdAt:type_name -> google.protobuf.Timestamp
	80,  // 42: proto.ProductChangeRequest.updatedAt:type_name -> google.protobuf.Timestamp
	2,   // 43: proto.ProductChangeRequestResponse.requestType:type_name -> proto.ChangeRequestType
	3,   // 44: proto.ProductChangeRequestResponse.requestStatus:type_name -> proto.ChangeRequestStatus
	65,  // 45: proto.ProductChangeRequestResponse.proposedData:type_name -> proto.ProposedData
	80,  // 46: proto.ProductChangeRequestResponse.createdAt:type_name -> google.protobuf.Timestamp
	80,  // 47: proto.ProductChangeRequestResponse.updatedAt:type_name -> google.protobuf.Timestamp
	67,  // 48: proto.ProductChangeRequestResponseList.productChangeRequests:type_name -> proto.ProductChangeRequestResponse
	3,   // 49: proto.ProductChangeRequestFilter.requestStatus:type_name -> proto.ChangeRequestStatus
	75,  // 50: proto.ProductInterestResponse.product_interests:type_name -> proto.ProductInterest
	80,  // 51: proto.ProductInterest.created_at:type_name -> google.protobuf.Timestamp
	4,   // 52: proto.ProductVendorService.Read:input_type -> proto.VendorFilter
	8,   // 53: proto.ProductCatalogService.AdminRead:input_type -> proto.ProductFilter
	7,   // 54: proto.ProductCatalogService.UserRead:input_type -> proto.ProductUserFilter
	7,   // 55: proto.ProductCatalogService.UserReadExternal:input_type -> proto.ProductUserFilter
	14,  // 56: proto.ProductCatalogService.SetStatus:input_type -> proto.SetProductStatusRequest
	82,  // 57: proto.ProductCatalogService.Ping:input_type -> google.protobuf.Empty
	15,  // 58: proto.ProductAccessService.ReadAccess:input_type -> proto.GetAccessRequest
	17,  // 59: proto.ProductAccessService.AddAccess:input_type -> proto.ProductAccessRequest
	19,  // 60: proto.ProductAccessService.RemoveAccess:input_type -> proto.DeleteAccessRequest
	18,  // 61: proto.ProductAccessService.CheckProductAccess:input_type -> proto.ProductAccessCheckRequest
	21,  // 62: proto.RegionService.Add:input_type -> proto.AddRegionRequest
	23,  // 63: proto.RegionService.AdminRead:input_type -> proto.RegionFilter
	22,  // 64: proto.RegionService.UserRead:input_type -> proto.RegionUserFilter
	28,  // 65: proto.RegionService.Update:input_type -> proto.UpdateRegionRequest
	29,  // 66: proto.RegionService.Delete:input_type -> proto.DeleteRegionRequest
	30,  // 67: proto.RegionAccessService.ReadAccess:input_type -> proto.GetRegionAccessRequest
	32,  // 68: proto.RegionAccessService.AddAccess:input_type -> proto.RegionAccessRequest
	34,  // 69: proto.RegionAccessService.RemoveAccess:input_type -> proto.DeleteRegionAccessRequest
	33,  // 70: proto.RegionAccessService.CheckRegionAccess:input_type -> proto.RegionAccessCheckRequest
	42,  // 71: proto.ProductSyncService.SearchStream:input_type -> proto.DefaultProductSearchRequest
	37,  // 72: proto.ProductSyncService.Put:input_type -> proto.DefaultProduct
	41,  // 73: proto.ProductSyncService.Delete:input_type -> proto.DefaultProductDeleteRequest
	43,  // 74: proto.ProductSyncService.Get:input_type -> proto.DefaultProductGetRequest
	48,  // 75: proto.VendorSyncService.SearchStream:input_type -> proto.DefaultVendorSearchRequest
	44,  // 76: proto.VendorSyncService.Put:input_type -> proto.DefaultVendor
	47,  // 77: proto.VendorSyncService.Delete:input_type -> proto.DefaultVendortDeleteRequest
	49,  // 78: proto.VendorSyncService.Get:input_type -> proto.DefaultVendorGetRequest
	50,  // 79: proto.FamilyService.Read:input_type -> proto.FamilyRequest
	50,  // 80: proto.FamilyService.Add:input_type -> proto.FamilyRequest
	50,  // 81: proto.FamilyService.Update:input_type -> proto.FamilyRequest
	53,  // 82: proto.FamilyService.GetById:input_type -> proto.FamilyFilter
	4,   // 83: proto.VendorService.Read:input_type -> proto.VendorFilter
	55,  // 84: proto.VendorService.Add:input_type -> proto.VendorRequest
	55,  // 85: proto.VendorService.Update:input_type -> proto.VendorRequest
	57,  // 86: proto.VendorService.GetById:input_type -> proto.VendorId
	8,   // 87: proto.ProductCatalogServiceV2.AdminRead:input_type -> proto.ProductFilter
	7,   // 88: proto.ProductCatalogServiceV2.UserRead:input_type -> proto.ProductUserFilter
	7,   // 89: proto.ProductCatalogServiceV2.UserReadExternal:input_type -> proto.ProductUserFilter
	14,  // 90: proto.ProductCatalogServiceV2.SetStatus:input_type -> proto.SetProductStatusRequest
	82,  // 91: proto.ProductCatalogServiceV2.Ping:input_type -> google.protobuf.Empty
	15,  // 92: proto.AccessService.ReadAccess:input_type -> proto.GetAccessRequest
	59,  // 93: proto.AccessService.AddAccess:input_type -> proto.ProductAccessRequestV2
	60,  // 94: proto.AccessService.RemoveAccess:input_type -> proto.DeleteAccessRequestV2
	65,  // 95: proto.ProductChangeRequestService.AddProductDataInChangeRequest:input_type -> proto.ProposedData
	65,  // 96: proto.ProductChangeRequestService.UpdateProductDataInChangeRequest:input_type -> proto.ProposedData
	70,  // 97: proto.ProductChangeRequestService.ReviewProductChangeRequest:input_type -> proto.ReviewProductChangeRequestFilter
	71,  // 98: proto.ProductChangeRequestService.EnableProductInChangeRequest:input_type -> proto.EnableProductFilter
	69,  // 99: proto.ProductChangeRequestService.ReadProductChangeRequest:input_type -> proto.ProductChangeRequestFilter
	73,  // 100: proto.ProductInterestService.Read:input_type -> proto.ProductInterestFilter
	72,  // 101: proto.ProductInterestService.Add:input_type -> proto.ProductInterestRequest
	12,  // 102: proto.ProductVendorService.Read:output_type -> proto.VendorResponse
	11,  // 103: proto.ProductCatalogService.AdminRead:output_type -> proto.ProductResponse
	11,  // 104: proto.ProductCatalogService.UserRead:output_type -> proto.ProductResponse
	11,  // 105: proto.ProductCatalogService.UserReadExternal:output_type -> proto.ProductResponse
	82,  // 106: proto.ProductCatalogService.SetStatus:output_type -> google.protobuf.Empty
	82,  // 107: proto.ProductCatalogService.Ping:output_type -> google.protobuf.Empty
	16,  // 108: proto.ProductAccessService.ReadAccess:output_type -> proto.GetAccessResponse
	82,  // 109: proto.ProductAccessService.AddAccess:output_type -> google.protobuf.Empty
	82,  // 110: proto.ProductAccessService.RemoveAccess:output_type -> google.protobuf.Empty
	83,  // 111: proto.ProductAccessService.CheckProductAccess:output_type -> google.protobuf.BoolValue
	82,  // 112: proto.RegionService.Add:output_type -> google.protobuf.Empty
	26,  // 113: proto.RegionService.AdminRead:output_type -> proto.RegionResponse
	27,  // 114: proto.RegionService.UserRead:output_type -> proto.RegionUserResponse
	82,  // 115: proto.RegionService.Update:output_type -> google.protobuf.Empty
	82,  // 116: proto.RegionService.Delete:output_type -> google.protobuf.Empty
	31,  // 117: proto.RegionAccessService.ReadAccess:output_type -> proto.GetRegionAccessResponse
	82,  // 118: proto.RegionAccessService.AddAccess:output_type -> google.protobuf.Empty
	82,  // 119: proto.RegionAccessService.RemoveAccess:output_type -> google.protobuf.Empty
	83,  // 120: proto.RegionAccessService.CheckRegionAccess:output_type -> google.protobuf.BoolValue
	37,  // 121: proto.ProductSyncService.SearchStream:output_type -> proto.DefaultProduct
	82,  // 122: proto.ProductSyncService.Put:output_type -> google.protobuf.Empty
	82,  // 123: proto.ProductSyncService.Delete:output_type -> google.protobuf.Empty
	37,  // 124: proto.ProductSyncService.Get:output_type -> proto.DefaultProduct
	44,  // 125: proto.VendorSyncService.SearchStream:output_type -> proto.DefaultVendor
	82,  // 126: proto.VendorSyncService.Put:output_type -> google.protobuf.Empty
	82,  // 127: proto.VendorSyncService.Delete:output_type -> google.protobuf.Empty
	44,  // 128: proto.VendorSyncService.Get:output_type -> proto.DefaultVendor
	51,  // 129: proto.FamilyService.Read:output_type -> proto.FamilyResponse
	82,  // 130: proto.FamilyService.Add:output_type -> google.protobuf.Empty
	82,  // 131: proto.FamilyService.Update:output_type -> google.protobuf.Empty
	51,  // 132: proto.FamilyService.GetById:output_type -> proto.FamilyResponse
	12,  // 133: proto.VendorService.Read:output_type -> proto.VendorResponse
	82,  // 134: proto.VendorService.Add:output_type -> google.protobuf.Empty
	82,  // 135: proto.VendorService.Update:output_type -> google.protobuf.Empty
	12,  // 136: proto.VendorService.GetById:output_type -> proto.VendorResponse
	11,  // 137: proto.ProductCatalogServiceV2.AdminRead:output_type -> proto.ProductResponse
	11,  // 138: proto.ProductCatalogServiceV2.UserRead:output_type -> proto.ProductResponse
	11,  // 139: proto.ProductCatalogServiceV2.UserReadExternal:output_type -> proto.ProductResponse
	82,  // 140: proto.ProductCatalogServiceV2.SetStatus:output_type -> google.protobuf.Empty
	82,  // 141: proto.ProductCatalogServiceV2.Ping:output_type -> google.protobuf.Empty
	61,  // 142: proto.AccessService.ReadAccess:output_type -> proto.GetAccessResponseV2
	82,  // 143: proto.AccessService.AddAccess:output_type -> google.protobuf.Empty
	82,  // 144: proto.AccessService.RemoveAccess:output_type -> google.protobuf.Empty
	82,  // 145: proto.ProductChangeRequestService.AddProductDataInChangeRequest:output_type -> google.protobuf.Empty
	82,  // 146: proto.ProductChangeRequestService.UpdateProductDataInChangeRequest:output_type -> google.protobuf.Empty
	82,  // 147: proto.ProductChangeRequestService.ReviewProductChangeRequest:output_type -> google.protobuf.Empty
	82,  // 148: proto.ProductChangeRequestService.EnableProductInChangeRequest:output_type -> google.protobuf.Empty
	68,  // 149: proto.ProductChangeRequestService.ReadProductChangeRequest:output_type -> proto.ProductChangeRequestResponseList
	74,  // 150: proto.ProductInterestService.Read:output_type -> proto.ProductInterestResponse
	82,  // 151: proto.ProductInterestService.Add:output_type -> google.protobuf.Empty
	102, // [102:152] is the sub-list for method output_type
	52,  // [52:102] is the sub-list for method input_type
	52,  // [52:52] is the sub-list for extension type_name
	52,  // [52:52] is the sub-list for extension extendee
	0,   // [0:52] is the sub-list for field type_name
}

func init() { file_productcatalog_proto_init() }
func file_productcatalog_proto_init() {
	if File_productcatalog_proto != nil {
		return
	}
	file_cloudaccount_proto_init()
	file_annotations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_productcatalog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vendor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductUserFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProductStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProductStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAccessCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionUserFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionAccessCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegionAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultRegionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultProductDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultProductSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultProductGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultVendor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultVendortDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultVendorSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultVendorGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Family); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFamiliesByVendorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorRequestFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionalRateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAccessRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccessRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAccessResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductChangeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductChangeRequestResponseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductChangeRequestFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewProductChangeRequestFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableProductFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInterestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInterestFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInterestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultProduct_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productcatalog_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultVendor_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_productcatalog_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_productcatalog_proto_msgTypes[67].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_productcatalog_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   76,
			NumExtensions: 0,
			NumServices:   13,
		},
		GoTypes:           file_productcatalog_proto_goTypes,
		DependencyIndexes: file_productcatalog_proto_depIdxs,
		EnumInfos:         file_productcatalog_proto_enumTypes,
		MessageInfos:      file_productcatalog_proto_msgTypes,
	}.Build()
	File_productcatalog_proto = out.File
	file_productcatalog_proto_rawDesc = nil
	file_productcatalog_proto_goTypes = nil
	file_productcatalog_proto_depIdxs = nil
}
