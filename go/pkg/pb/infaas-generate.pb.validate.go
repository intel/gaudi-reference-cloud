// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: infaas-generate.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateStreamRequestMultiError, or nil if none found.
func (m *GenerateStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestID

	// no validation rules for Prompt

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateStreamRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateStreamRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateStreamRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateStreamRequestMultiError(errors)
	}

	return nil
}

// GenerateStreamRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStreamRequestMultiError) AllErrors() []error { return m }

// GenerateStreamRequestValidationError is the validation error returned by
// GenerateStreamRequest.Validate if the designated constraints aren't met.
type GenerateStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStreamRequestValidationError) ErrorName() string {
	return "GenerateStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStreamRequestValidationError{}

// Validate checks the field values on ChatCompletionStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionStreamRequestMultiError, or nil if none found.
func (m *ChatCompletionStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestID

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionStreamRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionStreamRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionStreamRequestValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RepetitionPenalty != nil {
		// no validation rules for RepetitionPenalty
	}

	if m.FrequencyPenalty != nil {
		// no validation rules for FrequencyPenalty
	}

	if m.ReturnLogprobs != nil {
		// no validation rules for ReturnLogprobs
	}

	if m.TopLogprobs != nil {
		// no validation rules for TopLogprobs
	}

	if m.MaxTokens != nil {
		// no validation rules for MaxTokens
	}

	if m.NumCompletions != nil {
		// no validation rules for NumCompletions
	}

	if m.PresencePenalty != nil {
		// no validation rules for PresencePenalty
	}

	if m.Seed != nil {
		// no validation rules for Seed
	}

	if m.Temperature != nil {
		// no validation rules for Temperature
	}

	if m.TopP != nil {
		// no validation rules for TopP
	}

	if len(errors) > 0 {
		return ChatCompletionStreamRequestMultiError(errors)
	}

	return nil
}

// ChatCompletionStreamRequestMultiError is an error wrapping multiple
// validation errors returned by ChatCompletionStreamRequest.ValidateAll() if
// the designated constraints aren't met.
type ChatCompletionStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionStreamRequestMultiError) AllErrors() []error { return m }

// ChatCompletionStreamRequestValidationError is the validation error returned
// by ChatCompletionStreamRequest.Validate if the designated constraints
// aren't met.
type ChatCompletionStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionStreamRequestValidationError) ErrorName() string {
	return "ChatCompletionStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionStreamRequestValidationError{}

// Validate checks the field values on ChatCompletionMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionMessageMultiError, or nil if none found.
func (m *ChatCompletionMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for Content

	if len(errors) > 0 {
		return ChatCompletionMessageMultiError(errors)
	}

	return nil
}

// ChatCompletionMessageMultiError is an error wrapping multiple validation
// errors returned by ChatCompletionMessage.ValidateAll() if the designated
// constraints aren't met.
type ChatCompletionMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionMessageMultiError) AllErrors() []error { return m }

// ChatCompletionMessageValidationError is the validation error returned by
// ChatCompletionMessage.Validate if the designated constraints aren't met.
type ChatCompletionMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionMessageValidationError) ErrorName() string {
	return "ChatCompletionMessageValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionMessageValidationError{}

// Validate checks the field values on GenerateStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateStreamResponseMultiError, or nil if none found.
func (m *GenerateStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateStreamResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateStreamResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateStreamResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTopTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateStreamResponseValidationError{
						field:  fmt.Sprintf("TopTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateStreamResponseValidationError{
						field:  fmt.Sprintf("TopTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateStreamResponseValidationError{
					field:  fmt.Sprintf("TopTokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GeneratedText != nil {
		// no validation rules for GeneratedText
	}

	if m.Details != nil {

		if all {
			switch v := interface{}(m.GetDetails()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateStreamResponseValidationError{
						field:  "Details",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateStreamResponseValidationError{
						field:  "Details",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateStreamResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenerateStreamResponseMultiError(errors)
	}

	return nil
}

// GenerateStreamResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStreamResponseMultiError) AllErrors() []error { return m }

// GenerateStreamResponseValidationError is the validation error returned by
// GenerateStreamResponse.Validate if the designated constraints aren't met.
type GenerateStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStreamResponseValidationError) ErrorName() string {
	return "GenerateStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStreamResponseValidationError{}

// Validate checks the field values on ChatCompletionStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionStreamResponseMultiError, or nil if none found.
func (m *ChatCompletionStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompletionID

	// no validation rules for Object

	// no validation rules for Created

	// no validation rules for Model

	// no validation rules for SystemFingerprint

	for idx, item := range m.GetChoices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionStreamResponseValidationError{
						field:  fmt.Sprintf("Choices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionStreamResponseValidationError{
						field:  fmt.Sprintf("Choices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionStreamResponseValidationError{
					field:  fmt.Sprintf("Choices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatCompletionStreamResponseMultiError(errors)
	}

	return nil
}

// ChatCompletionStreamResponseMultiError is an error wrapping multiple
// validation errors returned by ChatCompletionStreamResponse.ValidateAll() if
// the designated constraints aren't met.
type ChatCompletionStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionStreamResponseMultiError) AllErrors() []error { return m }

// ChatCompletionStreamResponseValidationError is the validation error returned
// by ChatCompletionStreamResponse.Validate if the designated constraints
// aren't met.
type ChatCompletionStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionStreamResponseValidationError) ErrorName() string {
	return "ChatCompletionStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionStreamResponseValidationError{}

// Validate checks the field values on ChatCompletionUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionUsageMultiError, or nil if none found.
func (m *ChatCompletionUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PromptTokens

	// no validation rules for CompletionTokens

	if len(errors) > 0 {
		return ChatCompletionUsageMultiError(errors)
	}

	return nil
}

// ChatCompletionUsageMultiError is an error wrapping multiple validation
// errors returned by ChatCompletionUsage.ValidateAll() if the designated
// constraints aren't met.
type ChatCompletionUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionUsageMultiError) AllErrors() []error { return m }

// ChatCompletionUsageValidationError is the validation error returned by
// ChatCompletionUsage.Validate if the designated constraints aren't met.
type ChatCompletionUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionUsageValidationError) ErrorName() string {
	return "ChatCompletionUsageValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionUsageValidationError{}

// Validate checks the field values on ChatCompletionStreamChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionStreamChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionStreamChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionStreamChoiceMultiError, or nil if none found.
func (m *ChatCompletionStreamChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionStreamChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	if m.Delta != nil {

		if all {
			switch v := interface{}(m.GetDelta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionStreamChoiceValidationError{
						field:  "Delta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionStreamChoiceValidationError{
						field:  "Delta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionStreamChoiceValidationError{
					field:  "Delta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Logprobs != nil {

		if all {
			switch v := interface{}(m.GetLogprobs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionStreamChoiceValidationError{
						field:  "Logprobs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionStreamChoiceValidationError{
						field:  "Logprobs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogprobs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionStreamChoiceValidationError{
					field:  "Logprobs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FinishReason != nil {
		// no validation rules for FinishReason
	}

	if m.Usage != nil {

		if all {
			switch v := interface{}(m.GetUsage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionStreamChoiceValidationError{
						field:  "Usage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionStreamChoiceValidationError{
						field:  "Usage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionStreamChoiceValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatCompletionStreamChoiceMultiError(errors)
	}

	return nil
}

// ChatCompletionStreamChoiceMultiError is an error wrapping multiple
// validation errors returned by ChatCompletionStreamChoice.ValidateAll() if
// the designated constraints aren't met.
type ChatCompletionStreamChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionStreamChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionStreamChoiceMultiError) AllErrors() []error { return m }

// ChatCompletionStreamChoiceValidationError is the validation error returned
// by ChatCompletionStreamChoice.Validate if the designated constraints aren't met.
type ChatCompletionStreamChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionStreamChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionStreamChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionStreamChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionStreamChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionStreamChoiceValidationError) ErrorName() string {
	return "ChatCompletionStreamChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionStreamChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionStreamChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionStreamChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionStreamChoiceValidationError{}

// Validate checks the field values on ChatCompletionStreamLogprobsContent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChatCompletionStreamLogprobsContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionStreamLogprobsContent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChatCompletionStreamLogprobsContentMultiError, or nil if none found.
func (m *ChatCompletionStreamLogprobsContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionStreamLogprobsContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCompletionStreamLogprobsContentValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCompletionStreamLogprobsContentValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCompletionStreamLogprobsContentValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatCompletionStreamLogprobsContentMultiError(errors)
	}

	return nil
}

// ChatCompletionStreamLogprobsContentMultiError is an error wrapping multiple
// validation errors returned by
// ChatCompletionStreamLogprobsContent.ValidateAll() if the designated
// constraints aren't met.
type ChatCompletionStreamLogprobsContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionStreamLogprobsContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionStreamLogprobsContentMultiError) AllErrors() []error { return m }

// ChatCompletionStreamLogprobsContentValidationError is the validation error
// returned by ChatCompletionStreamLogprobsContent.Validate if the designated
// constraints aren't met.
type ChatCompletionStreamLogprobsContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionStreamLogprobsContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionStreamLogprobsContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionStreamLogprobsContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionStreamLogprobsContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionStreamLogprobsContentValidationError) ErrorName() string {
	return "ChatCompletionStreamLogprobsContentValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionStreamLogprobsContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionStreamLogprobsContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionStreamLogprobsContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionStreamLogprobsContentValidationError{}

// Validate checks the field values on ChatCompletionStreamLogprob with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionStreamLogprob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionStreamLogprob with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionStreamLogprobMultiError, or nil if none found.
func (m *ChatCompletionStreamLogprob) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionStreamLogprob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Logprob

	if len(errors) > 0 {
		return ChatCompletionStreamLogprobMultiError(errors)
	}

	return nil
}

// ChatCompletionStreamLogprobMultiError is an error wrapping multiple
// validation errors returned by ChatCompletionStreamLogprob.ValidateAll() if
// the designated constraints aren't met.
type ChatCompletionStreamLogprobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionStreamLogprobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionStreamLogprobMultiError) AllErrors() []error { return m }

// ChatCompletionStreamLogprobValidationError is the validation error returned
// by ChatCompletionStreamLogprob.Validate if the designated constraints
// aren't met.
type ChatCompletionStreamLogprobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionStreamLogprobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionStreamLogprobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionStreamLogprobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionStreamLogprobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionStreamLogprobValidationError) ErrorName() string {
	return "ChatCompletionStreamLogprobValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionStreamLogprobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionStreamLogprob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionStreamLogprobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionStreamLogprobValidationError{}

// Validate checks the field values on GenerateAPIToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateAPIToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAPIToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAPITokenMultiError, or nil if none found.
func (m *GenerateAPIToken) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAPIToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	// no validation rules for Special

	if m.Logprob != nil {
		// no validation rules for Logprob
	}

	if len(errors) > 0 {
		return GenerateAPITokenMultiError(errors)
	}

	return nil
}

// GenerateAPITokenMultiError is an error wrapping multiple validation errors
// returned by GenerateAPIToken.ValidateAll() if the designated constraints
// aren't met.
type GenerateAPITokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAPITokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAPITokenMultiError) AllErrors() []error { return m }

// GenerateAPITokenValidationError is the validation error returned by
// GenerateAPIToken.Validate if the designated constraints aren't met.
type GenerateAPITokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAPITokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAPITokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAPITokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAPITokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAPITokenValidationError) ErrorName() string { return "GenerateAPITokenValidationError" }

// Error satisfies the builtin error interface
func (e GenerateAPITokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAPIToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAPITokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAPITokenValidationError{}

// Validate checks the field values on StreamDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamDetailsMultiError, or
// nil if none found.
func (m *StreamDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FinishReason

	// no validation rules for GeneratedTokens

	if m.Seed != nil {
		// no validation rules for Seed
	}

	if len(errors) > 0 {
		return StreamDetailsMultiError(errors)
	}

	return nil
}

// StreamDetailsMultiError is an error wrapping multiple validation errors
// returned by StreamDetails.ValidateAll() if the designated constraints
// aren't met.
type StreamDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamDetailsMultiError) AllErrors() []error { return m }

// StreamDetailsValidationError is the validation error returned by
// StreamDetails.Validate if the designated constraints aren't met.
type StreamDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamDetailsValidationError) ErrorName() string { return "StreamDetailsValidationError" }

// Error satisfies the builtin error interface
func (e StreamDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamDetailsValidationError{}

// Validate checks the field values on GenerateRequestParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRequestParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRequestParameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateRequestParametersMultiError, or nil if none found.
func (m *GenerateRequestParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRequestParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DoSample

	// no validation rules for MaxNewTokens

	// no validation rules for ReturnFullText

	// no validation rules for Watermark

	// no validation rules for Details

	// no validation rules for DecoderInputDetails

	if m.RepetitionPenalty != nil {
		// no validation rules for RepetitionPenalty
	}

	if m.FrequencyPenalty != nil {
		// no validation rules for FrequencyPenalty
	}

	if m.Seed != nil {
		// no validation rules for Seed
	}

	if m.Temperature != nil {
		// no validation rules for Temperature
	}

	if m.TopK != nil {
		// no validation rules for TopK
	}

	if m.TopP != nil {
		// no validation rules for TopP
	}

	if m.Truncate != nil {
		// no validation rules for Truncate
	}

	if m.TypicalP != nil {
		// no validation rules for TypicalP
	}

	if m.BestOf != nil {
		// no validation rules for BestOf
	}

	if m.TopNTokens != nil {
		// no validation rules for TopNTokens
	}

	if len(errors) > 0 {
		return GenerateRequestParametersMultiError(errors)
	}

	return nil
}

// GenerateRequestParametersMultiError is an error wrapping multiple validation
// errors returned by GenerateRequestParameters.ValidateAll() if the
// designated constraints aren't met.
type GenerateRequestParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRequestParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRequestParametersMultiError) AllErrors() []error { return m }

// GenerateRequestParametersValidationError is the validation error returned by
// GenerateRequestParameters.Validate if the designated constraints aren't met.
type GenerateRequestParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRequestParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRequestParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRequestParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRequestParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRequestParametersValidationError) ErrorName() string {
	return "GenerateRequestParametersValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRequestParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRequestParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRequestParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRequestParametersValidationError{}
